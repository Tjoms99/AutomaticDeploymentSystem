
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 66 00 20 11 29 01 00 6b fe 01 00 e5 28 01 00     .f. .)..k....(..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	e5 28 01 00 e5 28 01 00 e5 28 01 00 00 00 00 00     .(...(...(......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	4d 25 01 00 e5 28 01 00 00 00 00 00 f9 24 01 00     M%...(.......$..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	e5 28 01 00                                         .(..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	fd 25 01 00 c3 3c 02 00 fd 25 01 00 fd 25 01 00     .%...<...%...%..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	71 3c 02 00 fd 25 01 00 fd 25 01 00 a9 3c 02 00     q<...%...%...<..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..
			switch (*fmt) {
  c0:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..
  d0:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..
  e0:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..
  f0:	fd 25 01 00 fd 25 01 00 fd 25 01 00 fd 25 01 00     .%...%...%...%..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				align = VA_STACK_ALIGN(void *);
     120:	f00c fbf4 	bl	c90c <__udivmoddi4>
			switch (*fmt) {
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
		buf = (void *) ROUND_UP(buf, align);
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
		if (is_str_arg) {
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
			int v = va_arg(ap, int);
     16a:	4180      	sbcs	r0, r0

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	3001      	adds	r0, #1
			}
			buf += sizeof(int);
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
				arg_idx--;
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
				parsing = false;
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				if (fmt[-1] == 'l') {
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
					if (fmt[-2] == 'l') {
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
				parsing = false;
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
						align = VA_STACK_ALIGN(long long);
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
				size = sizeof(void *);
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
					v.ld = va_arg(ap, long double);
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
				buf = (void *) ROUND_UP(buf, align);
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
				if (buf0 != NULL) {
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
					if (BUF_OFFSET + size > len) {
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
						*(long double *)buf = v.ld;
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
				buf += size;
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
				parsing = false;
     1c2:	4017      	ands	r7, r2
			switch (*fmt) {
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
			if (*++fmt == '\0') {
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
			if (!parsing) {
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
				if (*fmt == '%') {
     1da:	eb56 060a 	adcs.w	r6, r6, sl
					arg_idx++;
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
					parsing = true;
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
				align = VA_STACK_ALIGN(size_t);
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
			switch (*fmt) {
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
				parsing = false;
     1f4:	ea19 0902 	ands.w	r9, r9, r2

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
					return -EINVAL;
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
			long long v = va_arg(ap, long long);
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
				}
			}
			buf += sizeof(long long);
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
		} else if (size == sizeof(int)) {
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
			int v = va_arg(ap, int);
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
			if (buf0 != NULL) {
     222:	ea18 0802 	ands.w	r8, r8, r2
		} else if (size == sizeof(long long)) {
     226:	eb74 0408 	sbcs.w	r4, r4, r8
			long long v = va_arg(ap, long long);
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
			s = va_arg(ap, char *);
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
			if (is_ro && !do_ro) {
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     254:	eb75 0509 	sbcs.w	r5, r5, r9
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     258:	ea1a 0a02 	ands.w	sl, sl, r2
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
				if (buf0 != NULL) {
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
					str_ptr_arg[s_idx] = arg_idx;
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
					str_ptr_pos[s_idx] = s_ptr_idx;
     270:	4252      	negs	r2, r2
					str_ptr_arg[s_idx] = arg_idx;
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
					if (is_ro) {
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
						s_ro_cnt++;
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
				s_idx++;
     28a:	1aed      	subs	r5, r5, r3
					if (BUF_OFFSET + size > len) {
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
			buf += sizeof(char *);
     290:	c1c0      	stmia	r1!, {r6, r7}
					if (BUF_OFFSET + size > len) {
     292:	f1b8 0801 	subs.w	r8, r8, #1
			switch (*fmt) {
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
				} else if (is_ro) {
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
					len += 1;
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
				} else if (rws_pos_en) {
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
					len += strlen(s) + 1 + 1;
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
	if (rws_pos_en) {
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
		for (i = 0; i < s_idx; i++) {
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
			*buf++ = str_ptr_arg[i];
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
	for (i = 0; i < s_idx; i++) {
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	930e      	str	r3, [sp, #56]	; 0x38
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
			if (BUF_OFFSET + 1 > len) {
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
			if (BUF_OFFSET + 1 > len) {
     336:	fbea 1264 	umaal	r1, r2, sl, r4
			*buf++ = pos;
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
		for (i = 0; i < s_idx; i++) {
     340:	fbea 6364 	umaal	r6, r3, sl, r4
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
		if (rws_pos_en) {
     352:	fbea 2364 	umaal	r2, r3, sl, r4
			*buf++ = str_ptr_arg[i];
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
			size = 0;
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
		if (BUF_OFFSET + 1 + size > len) {
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
		*buf++ = str_ptr_pos[i];
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
		memcpy(buf, s, size);
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
		buf += size;
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
	for (i = 0; i < s_idx; i++) {
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
			size = strlen(s) + 1;
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
		return -EFAULT;
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	f04c 0601 	orr.w	r6, ip, #1
     6ee:	f08c 0702 	eor.w	r7, ip, #2
     6f2:	eb18 0806 	adds.w	r8, r8, r6
     6f6:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     6fa:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     6fe:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     702:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     706:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     70a:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     70e:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     712:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     716:	eb18 000c 	adds.w	r0, r8, ip
     71a:	eb59 010c 	adcs.w	r1, r9, ip
     71e:	eb5a 020c 	adcs.w	r2, sl, ip
     722:	f15b 0300 	adcs.w	r3, fp, #0
     726:	f154 0400 	adcs.w	r4, r4, #0
     72a:	f155 0500 	adcs.w	r5, r5, #0
     72e:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     732:	eb57 070c 	adcs.w	r7, r7, ip
     736:	4770      	bx	lr

00000738 <ocrypto_mod_p256_mul>:
     738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	b087      	sub	sp, #28
     73e:	f7ff fdaf 	bl	2a0 <ocrypto_mul256_noframe>
     742:	f8dd 8010 	ldr.w	r8, [sp, #16]
     746:	f8dd 9014 	ldr.w	r9, [sp, #20]
     74a:	f8dd a018 	ldr.w	sl, [sp, #24]
     74e:	f7ff ff97 	bl	680 <mul_reduce>
     752:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     756:	f7ff ff93 	bl	680 <mul_reduce>
     75a:	b003      	add	sp, #12
     75c:	f85d 8b04 	ldr.w	r8, [sp], #4
     760:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000768 <ocrypto_mod_p256_sqr>:
     768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     76c:	b087      	sub	sp, #28
     76e:	f7ff fe53 	bl	418 <ocrypto_sqr256_noframe>
     772:	f8dd 8010 	ldr.w	r8, [sp, #16]
     776:	f8dd 9014 	ldr.w	r9, [sp, #20]
     77a:	f8dd a018 	ldr.w	sl, [sp, #24]
     77e:	f7ff ff7f 	bl	680 <mul_reduce>
     782:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     786:	f7ff ff7b 	bl	680 <mul_reduce>
     78a:	b003      	add	sp, #12
     78c:	f85d 8b04 	ldr.w	r8, [sp], #4
     790:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     79a:	4c14      	ldr	r4, [pc, #80]	; (7ec <__data_size+0x82>)
     79c:	7a20      	ldrb	r0, [r4, #8]
     79e:	f88d 0001 	strb.w	r0, [sp, #1]
     7a2:	79e0      	ldrb	r0, [r4, #7]
     7a4:	f88d 0000 	strb.w	r0, [sp]
     7a8:	79a0      	ldrb	r0, [r4, #6]
     7aa:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ae:	7960      	ldrb	r0, [r4, #5]
     7b0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7b4:	4668      	mov	r0, sp
     7b6:	f006 fd67 	bl	7288 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7ba:	b108      	cbz	r0, 7c0 <__data_size+0x56>
     7bc:	21ad      	movs	r1, #173	; 0xad
     7be:	e010      	b.n	7e2 <__data_size+0x78>
     7c0:	68e0      	ldr	r0, [r4, #12]
     7c2:	9002      	str	r0, [sp, #8]
     7c4:	a802      	add	r0, sp, #8
     7c6:	f006 fd75 	bl	72b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ca:	b108      	cbz	r0, 7d0 <__data_size+0x66>
     7cc:	21b1      	movs	r1, #177	; 0xb1
     7ce:	e008      	b.n	7e2 <__data_size+0x78>
     7d0:	4807      	ldr	r0, [pc, #28]	; (7f0 <__data_size+0x86>)
     7d2:	6800      	ldr	r0, [r0, #0]
     7d4:	9003      	str	r0, [sp, #12]
     7d6:	a803      	add	r0, sp, #12
     7d8:	f00f face 	bl	fd78 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7dc:	2800      	cmp	r0, #0
     7de:	d003      	beq.n	7e8 <__data_size+0x7e>
     7e0:	21b5      	movs	r1, #181	; 0xb5
     7e2:	2003      	movs	r0, #3
     7e4:	f000 f91a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     7e8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     7ea:	0000      	.short	0x0000
     7ec:	20000fc0 	.word	0x20000fc0
     7f0:	00000b08 	.word	0x00000b08
     7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7f8:	4f16      	ldr	r7, [pc, #88]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     7fa:	4604      	mov	r4, r0
     7fc:	4616      	mov	r6, r2
     7fe:	78f8      	ldrb	r0, [r7, #3]
     800:	460d      	mov	r5, r1
     802:	b178      	cbz	r0, 824 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24>
     804:	7c28      	ldrb	r0, [r5, #16]
     806:	b168      	cbz	r0, 824 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24>
     808:	6820      	ldr	r0, [r4, #0]
     80a:	2225      	movs	r2, #37	; 0x25
     80c:	1cc0      	adds	r0, r0, #3
     80e:	f020 0003 	bic.w	r0, r0, #3
     812:	6020      	str	r0, [r4, #0]
     814:	7c29      	ldrb	r1, [r5, #16]
     816:	b106      	cbz	r6, 81a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1a>
     818:	2000      	movs	r0, #0
     81a:	f000 fd9d 	bl	1358 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     81e:	6821      	ldr	r1, [r4, #0]
     820:	4408      	add	r0, r1
     822:	6020      	str	r0, [r4, #0]
     824:	7d28      	ldrb	r0, [r5, #20]
     826:	2800      	cmp	r0, #0
     828:	d012      	beq.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     82a:	78f8      	ldrb	r0, [r7, #3]
     82c:	2800      	cmp	r0, #0
     82e:	d00f      	beq.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     830:	7c28      	ldrb	r0, [r5, #16]
     832:	2800      	cmp	r0, #0
     834:	d00c      	beq.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     836:	6820      	ldr	r0, [r4, #0]
     838:	1dc0      	adds	r0, r0, #7
     83a:	f020 0007 	bic.w	r0, r0, #7
     83e:	6020      	str	r0, [r4, #0]
     840:	7d29      	ldrb	r1, [r5, #20]
     842:	b106      	cbz	r6, 846 <__z_interrupt_stack_SIZEOF+0x6>
     844:	2000      	movs	r0, #0
     846:	f002 fdab 	bl	33a0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
     84a:	6821      	ldr	r1, [r4, #0]
     84c:	4408      	add	r0, r1
     84e:	6020      	str	r0, [r4, #0]
     850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     854:	20000040 	.word	0x20000040

00000858 <sdc_build_revision_get>:
     858:	b510      	push	{r4, lr}
     85a:	b128      	cbz	r0, 868 <sdc_build_revision_get+0x10>
     85c:	2214      	movs	r2, #20
     85e:	4904      	ldr	r1, [pc, #16]	; (870 <sdc_build_revision_get+0x18>)
     860:	f010 f8b2 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     864:	2000      	movs	r0, #0
     866:	bd10      	pop	{r4, pc}
     868:	f06f 0015 	mvn.w	r0, #21
     86c:	bd10      	pop	{r4, pc}
     86e:	0000      	.short	0x0000
     870:	00000b30 	.word	0x00000b30

00000874 <sdc_cfg_set>:
     874:	b570      	push	{r4, r5, r6, lr}
     876:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     87a:	bb88      	cbnz	r0, 8e0 <sdc_cfg_set+0x6c>
     87c:	4c23      	ldr	r4, [pc, #140]	; (90c <sdc_cfg_set+0x98>)
     87e:	7860      	ldrb	r0, [r4, #1]
     880:	b108      	cbz	r0, 886 <sdc_cfg_set+0x12>
     882:	11a8      	asrs	r0, r5, #6
     884:	bd70      	pop	{r4, r5, r6, pc}
     886:	b1f9      	cbz	r1, 8c8 <sdc_cfg_set+0x54>
     888:	f06f 0015 	mvn.w	r0, #21
     88c:	2a00      	cmp	r2, #0
     88e:	d0f9      	beq.n	884 <sdc_cfg_set+0x10>
     890:	4b1f      	ldr	r3, [pc, #124]	; (910 <sdc_cfg_set+0x9c>)
     892:	2909      	cmp	r1, #9
     894:	d234      	bcs.n	900 <sdc_cfg_set+0x8c>
     896:	e8df f001 	tbb	[pc, r1]
     89a:	0533      	.short	0x0533
     89c:	33180833 	.word	0x33180833
     8a0:	0024331b 	.word	0x0024331b
     8a4:	7810      	ldrb	r0, [r2, #0]
     8a6:	7018      	strb	r0, [r3, #0]
     8a8:	e01f      	b.n	8ea <sdc_cfg_set+0x76>
     8aa:	7891      	ldrb	r1, [r2, #2]
     8ac:	2900      	cmp	r1, #0
     8ae:	d0e9      	beq.n	884 <sdc_cfg_set+0x10>
     8b0:	78d1      	ldrb	r1, [r2, #3]
     8b2:	2900      	cmp	r1, #0
     8b4:	d0e6      	beq.n	884 <sdc_cfg_set+0x10>
     8b6:	7811      	ldrb	r1, [r2, #0]
     8b8:	291b      	cmp	r1, #27
     8ba:	d3e3      	bcc.n	884 <sdc_cfg_set+0x10>
     8bc:	7851      	ldrb	r1, [r2, #1]
     8be:	291b      	cmp	r1, #27
     8c0:	d3e0      	bcc.n	884 <sdc_cfg_set+0x10>
     8c2:	6810      	ldr	r0, [r2, #0]
     8c4:	f8c3 0005 	str.w	r0, [r3, #5]
     8c8:	e00f      	b.n	8ea <sdc_cfg_set+0x76>
     8ca:	6810      	ldr	r0, [r2, #0]
     8cc:	60d8      	str	r0, [r3, #12]
     8ce:	e00c      	b.n	8ea <sdc_cfg_set+0x76>
     8d0:	78e1      	ldrb	r1, [r4, #3]
     8d2:	b111      	cbz	r1, 8da <sdc_cfg_set+0x66>
     8d4:	7811      	ldrb	r1, [r2, #0]
     8d6:	2902      	cmp	r1, #2
     8d8:	d3d4      	bcc.n	884 <sdc_cfg_set+0x10>
     8da:	7810      	ldrb	r0, [r2, #0]
     8dc:	7418      	strb	r0, [r3, #16]
     8de:	e004      	b.n	8ea <sdc_cfg_set+0x76>
     8e0:	e00e      	b.n	900 <sdc_cfg_set+0x8c>
     8e2:	8811      	ldrh	r1, [r2, #0]
     8e4:	29ff      	cmp	r1, #255	; 0xff
     8e6:	d8cd      	bhi.n	884 <sdc_cfg_set+0x10>
     8e8:	7519      	strb	r1, [r3, #20]
     8ea:	2201      	movs	r2, #1
     8ec:	4908      	ldr	r1, [pc, #32]	; (910 <sdc_cfg_set+0x9c>)
     8ee:	2000      	movs	r0, #0
     8f0:	f00c f95c 	bl	cbac <__udivmoddi4+0x2a0>
     8f4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     8f8:	db04      	blt.n	904 <sdc_cfg_set+0x90>
     8fa:	f06f 000b 	mvn.w	r0, #11
     8fe:	bd70      	pop	{r4, r5, r6, pc}
     900:	4628      	mov	r0, r5
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	2101      	movs	r1, #1
     906:	70a1      	strb	r1, [r4, #2]
     908:	bd70      	pop	{r4, r5, r6, pc}
     90a:	0000      	.short	0x0000
     90c:	20000040 	.word	0x20000040
     910:	20000fc0 	.word	0x20000fc0

00000914 <sdc_disable>:
     914:	b510      	push	{r4, lr}
     916:	4c07      	ldr	r4, [pc, #28]	; (934 <sdc_disable+0x20>)
     918:	7860      	ldrb	r0, [r4, #1]
     91a:	b120      	cbz	r0, 926 <sdc_disable+0x12>
     91c:	f006 ffc4 	bl	78a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     920:	7820      	ldrb	r0, [r4, #0]
     922:	f00b ff13 	bl	c74c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     926:	f000 fd63 	bl	13f0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     92a:	f000 fe3b 	bl	15a4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     92e:	2000      	movs	r0, #0
     930:	7060      	strb	r0, [r4, #1]
     932:	bd10      	pop	{r4, pc}
     934:	20000040 	.word	0x20000040

00000938 <sdc_enable>:
     938:	b570      	push	{r4, r5, r6, lr}
     93a:	460c      	mov	r4, r1
     93c:	0005      	movs	r5, r0
     93e:	d002      	beq.n	946 <sdc_enable+0xe>
     940:	b10c      	cbz	r4, 946 <sdc_enable+0xe>
     942:	0760      	lsls	r0, r4, #29
     944:	d002      	beq.n	94c <sdc_enable+0x14>
     946:	f06f 0015 	mvn.w	r0, #21
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	f000 f916 	bl	b7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     950:	b1a8      	cbz	r0, 97e <sdc_enable+0x46>
     952:	4628      	mov	r0, r5
     954:	f00b fec0 	bl	c6d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     958:	4d0a      	ldr	r5, [pc, #40]	; (984 <sdc_enable+0x4c>)
     95a:	2200      	movs	r2, #0
     95c:	490a      	ldr	r1, [pc, #40]	; (988 <sdc_enable+0x50>)
     95e:	7028      	strb	r0, [r5, #0]
     960:	4620      	mov	r0, r4
     962:	f00c f923 	bl	cbac <__udivmoddi4+0x2a0>
     966:	f00f fdee 	bl	10546 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     96a:	2100      	movs	r1, #0
     96c:	7828      	ldrb	r0, [r5, #0]
     96e:	f006 ff83 	bl	7878 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     972:	f7ff ff11 	bl	798 <__data_size+0x2e>
     976:	2001      	movs	r0, #1
     978:	7068      	strb	r0, [r5, #1]
     97a:	2000      	movs	r0, #0
     97c:	bd70      	pop	{r4, r5, r6, pc}
     97e:	f04f 30ff 	mov.w	r0, #4294967295
     982:	bd70      	pop	{r4, r5, r6, pc}
     984:	20000040 	.word	0x20000040
     988:	20000fc0 	.word	0x20000fc0

0000098c <sdc_init>:
     98c:	b530      	push	{r4, r5, lr}
     98e:	b089      	sub	sp, #36	; 0x24
     990:	0005      	movs	r5, r0
     992:	d00c      	beq.n	9ae <sdc_init+0x22>
     994:	f00b fe48 	bl	c628 <mpsl_is_initialized>
     998:	f04f 34ff 	mov.w	r4, #4294967295
     99c:	b120      	cbz	r0, 9a8 <sdc_init+0x1c>
     99e:	f00b fcf9 	bl	c394 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     9a2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     9a6:	d905      	bls.n	9b4 <sdc_init+0x28>
     9a8:	4620      	mov	r0, r4
     9aa:	b009      	add	sp, #36	; 0x24
     9ac:	bd30      	pop	{r4, r5, pc}
     9ae:	f06f 0015 	mvn.w	r0, #21
     9b2:	e7fa      	b.n	9aa <sdc_init+0x1e>
     9b4:	4c14      	ldr	r4, [pc, #80]	; (a08 <sdc_init+0x7c>)
     9b6:	4815      	ldr	r0, [pc, #84]	; (a0c <sdc_init+0x80>)
     9b8:	6065      	str	r5, [r4, #4]
     9ba:	f000 f9f5 	bl	da8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     9be:	2000      	movs	r0, #0
     9c0:	7060      	strb	r0, [r4, #1]
     9c2:	70a0      	strb	r0, [r4, #2]
     9c4:	70e0      	strb	r0, [r4, #3]
     9c6:	4601      	mov	r1, r0
     9c8:	2224      	movs	r2, #36	; 0x24
     9ca:	4668      	mov	r0, sp
     9cc:	f010 f876 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     9d0:	2224      	movs	r2, #36	; 0x24
     9d2:	490f      	ldr	r1, [pc, #60]	; (a10 <sdc_init+0x84>)
     9d4:	4668      	mov	r0, sp
     9d6:	f00f fff7 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     9da:	2224      	movs	r2, #36	; 0x24
     9dc:	4669      	mov	r1, sp
     9de:	480d      	ldr	r0, [pc, #52]	; (a14 <sdc_init+0x88>)
     9e0:	f00f fff2 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     9e4:	f3ef 8410 	mrs	r4, PRIMASK
     9e8:	b672      	cpsid	i
     9ea:	f000 fd0f 	bl	140c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     9ee:	480a      	ldr	r0, [pc, #40]	; (a18 <sdc_init+0x8c>)
     9f0:	f000 fde4 	bl	15bc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     9f4:	b118      	cbz	r0, 9fe <sdc_init+0x72>
     9f6:	21cb      	movs	r1, #203	; 0xcb
     9f8:	2003      	movs	r0, #3
     9fa:	f000 f80f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     9fe:	b904      	cbnz	r4, a02 <sdc_init+0x76>
     a00:	b662      	cpsie	i
     a02:	2000      	movs	r0, #0
     a04:	e7d1      	b.n	9aa <sdc_init+0x1e>
     a06:	0000      	.short	0x0000
     a08:	20000040 	.word	0x20000040
     a0c:	00000799 	.word	0x00000799
     a10:	00000b0c 	.word	0x00000b0c
     a14:	20000fc0 	.word	0x20000fc0
     a18:	00000ba9 	.word	0x00000ba9

00000a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a1c:	b50e      	push	{r1, r2, r3, lr}
     a1e:	b672      	cpsid	i
     a20:	4a15      	ldr	r2, [pc, #84]	; (a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a22:	6855      	ldr	r5, [r2, #4]
     a24:	b1dd      	cbz	r5, a5e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a26:	2200      	movs	r2, #0
     a28:	4603      	mov	r3, r0
     a2a:	466e      	mov	r6, sp
     a2c:	240a      	movs	r4, #10
     a2e:	e003      	b.n	a38 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a30:	fbb0 f0f4 	udiv	r0, r0, r4
     a34:	1c52      	adds	r2, r2, #1
     a36:	b2d2      	uxtb	r2, r2
     a38:	2800      	cmp	r0, #0
     a3a:	d1f9      	bne.n	a30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     a3c:	54b0      	strb	r0, [r6, r2]
     a3e:	e00a      	b.n	a56 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     a40:	b2d8      	uxtb	r0, r3
     a42:	fbb0 f7f4 	udiv	r7, r0, r4
     a46:	fbb3 f3f4 	udiv	r3, r3, r4
     a4a:	fb04 0017 	mls	r0, r4, r7, r0
     a4e:	1e52      	subs	r2, r2, #1
     a50:	b2d2      	uxtb	r2, r2
     a52:	3030      	adds	r0, #48	; 0x30
     a54:	54b0      	strb	r0, [r6, r2]
     a56:	2a00      	cmp	r2, #0
     a58:	d1f2      	bne.n	a40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     a5a:	4630      	mov	r0, r6
     a5c:	47a8      	blx	r5
     a5e:	f3bf 8f4f 	dsb	sy
     a62:	4806      	ldr	r0, [pc, #24]	; (a7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     a64:	6801      	ldr	r1, [r0, #0]
     a66:	4a06      	ldr	r2, [pc, #24]	; (a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     a68:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     a6c:	4311      	orrs	r1, r2
     a6e:	6001      	str	r1, [r0, #0]
     a70:	f3bf 8f4f 	dsb	sy
     a74:	bf00      	nop
     a76:	e7fd      	b.n	a74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     a78:	20000040 	.word	0x20000040
     a7c:	e000ed0c 	.word	0xe000ed0c
     a80:	05fa0004 	.word	0x05fa0004

00000a84 <sdc_support_central>:
     a84:	b510      	push	{r4, lr}
     a86:	4c07      	ldr	r4, [pc, #28]	; (aa4 <sdc_support_central+0x20>)
     a88:	78a0      	ldrb	r0, [r4, #2]
     a8a:	7861      	ldrb	r1, [r4, #1]
     a8c:	4308      	orrs	r0, r1
     a8e:	d002      	beq.n	a96 <sdc_support_central+0x12>
     a90:	f04f 30ff 	mov.w	r0, #4294967295
     a94:	bd10      	pop	{r4, pc}
     a96:	f006 ff17 	bl	78c8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     a9a:	2001      	movs	r0, #1
     a9c:	70e0      	strb	r0, [r4, #3]
     a9e:	2000      	movs	r0, #0
     aa0:	bd10      	pop	{r4, pc}
     aa2:	0000      	.short	0x0000
     aa4:	20000040 	.word	0x20000040

00000aa8 <sdc_support_dle_central>:
     aa8:	4806      	ldr	r0, [pc, #24]	; (ac4 <sdc_support_dle_central+0x1c>)
     aaa:	b510      	push	{r4, lr}
     aac:	7881      	ldrb	r1, [r0, #2]
     aae:	7840      	ldrb	r0, [r0, #1]
     ab0:	4301      	orrs	r1, r0
     ab2:	d002      	beq.n	aba <sdc_support_dle_central+0x12>
     ab4:	f04f 30ff 	mov.w	r0, #4294967295
     ab8:	bd10      	pop	{r4, pc}
     aba:	f006 fcf3 	bl	74a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     abe:	2000      	movs	r0, #0
     ac0:	bd10      	pop	{r4, pc}
     ac2:	0000      	.short	0x0000
     ac4:	20000040 	.word	0x20000040

00000ac8 <sdc_support_le_2m_phy>:
     ac8:	4806      	ldr	r0, [pc, #24]	; (ae4 <sdc_support_le_2m_phy+0x1c>)
     aca:	b510      	push	{r4, lr}
     acc:	7881      	ldrb	r1, [r0, #2]
     ace:	7840      	ldrb	r0, [r0, #1]
     ad0:	4301      	orrs	r1, r0
     ad2:	d002      	beq.n	ada <sdc_support_le_2m_phy+0x12>
     ad4:	f04f 30ff 	mov.w	r0, #4294967295
     ad8:	bd10      	pop	{r4, pc}
     ada:	f00f fa36 	bl	ff4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     ade:	2000      	movs	r0, #0
     ae0:	bd10      	pop	{r4, pc}
     ae2:	0000      	.short	0x0000
     ae4:	20000040 	.word	0x20000040

00000ae8 <sdc_support_phy_update_central>:
     ae8:	4806      	ldr	r0, [pc, #24]	; (b04 <sdc_support_phy_update_central+0x1c>)
     aea:	b510      	push	{r4, lr}
     aec:	7881      	ldrb	r1, [r0, #2]
     aee:	7840      	ldrb	r0, [r0, #1]
     af0:	4301      	orrs	r1, r0
     af2:	d002      	beq.n	afa <sdc_support_phy_update_central+0x12>
     af4:	f04f 30ff 	mov.w	r0, #4294967295
     af8:	bd10      	pop	{r4, pc}
     afa:	f00f fa4a 	bl	ff92 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     afe:	2000      	movs	r0, #0
     b00:	bd10      	pop	{r4, pc}
     b02:	0000      	.short	0x0000
     b04:	20000040 	.word	0x20000040
     b08:	00000001 	.word	0x00000001
     b0c:	00000001 	.word	0x00000001
     b10:	031b1b00 	.word	0x031b1b00
     b14:	00000002 	.word	0x00000002
     b18:	00001d4c 	.word	0x00001d4c
     b1c:	00000003 	.word	0x00000003
     b20:	00000008 	.word	0x00000008
	...
     b30:	c12e7ee0 	.word	0xc12e7ee0
     b34:	2385055e 	.word	0x2385055e
     b38:	fadc1546 	.word	0xfadc1546
     b3c:	707d298e 	.word	0x707d298e
     b40:	fca59310 	.word	0xfca59310

00000b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b44:	4a05      	ldr	r2, [pc, #20]	; (b5c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b46:	b510      	push	{r4, lr}
     b48:	6852      	ldr	r2, [r2, #4]
     b4a:	b112      	cbz	r2, b52 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b50:	4710      	bx	r2
     b52:	2192      	movs	r1, #146	; 0x92
     b54:	2004      	movs	r0, #4
     b56:	f7ff ff61 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b5a:	0000      	.short	0x0000
     b5c:	20000fe4 	.word	0x20000fe4

00000b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     b60:	4a05      	ldr	r2, [pc, #20]	; (b78 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     b62:	b510      	push	{r4, lr}
     b64:	6892      	ldr	r2, [r2, #8]
     b66:	b112      	cbz	r2, b6e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b6c:	4710      	bx	r2
     b6e:	2198      	movs	r1, #152	; 0x98
     b70:	2004      	movs	r0, #4
     b72:	f7ff ff53 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b76:	0000      	.short	0x0000
     b78:	20000fe4 	.word	0x20000fe4

00000b7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     b7c:	4805      	ldr	r0, [pc, #20]	; (b94 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     b7e:	6801      	ldr	r1, [r0, #0]
     b80:	b129      	cbz	r1, b8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b82:	6841      	ldr	r1, [r0, #4]
     b84:	b119      	cbz	r1, b8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b86:	6880      	ldr	r0, [r0, #8]
     b88:	b108      	cbz	r0, b8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b8a:	2001      	movs	r0, #1
     b8c:	4770      	bx	lr
     b8e:	2000      	movs	r0, #0
     b90:	4770      	bx	lr
     b92:	0000      	.short	0x0000
     b94:	20000fe4 	.word	0x20000fe4

00000b98 <sdc_rand_source_register>:
     b98:	4902      	ldr	r1, [pc, #8]	; (ba4 <sdc_rand_source_register+0xc>)
     b9a:	c80d      	ldmia	r0, {r0, r2, r3}
     b9c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     ba0:	2000      	movs	r0, #0
     ba2:	4770      	bx	lr
     ba4:	20000fe4 	.word	0x20000fe4

00000ba8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     baa:	4c12      	ldr	r4, [pc, #72]	; (bf4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     bac:	2600      	movs	r6, #0
     bae:	6825      	ldr	r5, [r4, #0]
     bb0:	e011      	b.n	bd6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bb2:	9800      	ldr	r0, [sp, #0]
     bb4:	2802      	cmp	r0, #2
     bb6:	d002      	beq.n	bbe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     bb8:	2803      	cmp	r0, #3
     bba:	d10c      	bne.n	bd6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bbc:	e006      	b.n	bcc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     bbe:	6820      	ldr	r0, [r4, #0]
     bc0:	b110      	cbz	r0, bc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     bc2:	2000      	movs	r0, #0
     bc4:	6026      	str	r6, [r4, #0]
     bc6:	e005      	b.n	bd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     bc8:	2128      	movs	r1, #40	; 0x28
     bca:	e00c      	b.n	be6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     bcc:	6820      	ldr	r0, [r4, #0]
     bce:	b168      	cbz	r0, bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     bd0:	2001      	movs	r0, #1
     bd2:	6026      	str	r6, [r4, #0]
     bd4:	47a8      	blx	r5
     bd6:	4668      	mov	r0, sp
     bd8:	f000 fcb6 	bl	1548 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     bdc:	2800      	cmp	r0, #0
     bde:	d0e8      	beq.n	bb2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     be0:	2805      	cmp	r0, #5
     be2:	d005      	beq.n	bf0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     be4:	2135      	movs	r1, #53	; 0x35
     be6:	2004      	movs	r0, #4
     be8:	f7ff ff18 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bec:	212d      	movs	r1, #45	; 0x2d
     bee:	e7fa      	b.n	be6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bf2:	0000      	.short	0x0000
     bf4:	20000048 	.word	0x20000048

00000bf8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     bfc:	4605      	mov	r5, r0
     bfe:	4925      	ldr	r1, [pc, #148]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c00:	1d00      	adds	r0, r0, #4
     c02:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c06:	2600      	movs	r6, #0
     c08:	6008      	str	r0, [r1, #0]
     c0a:	7838      	ldrb	r0, [r7, #0]
     c0c:	b150      	cbz	r0, c24 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c0e:	78ba      	ldrb	r2, [r7, #2]
     c10:	463c      	mov	r4, r7
     c12:	1c79      	adds	r1, r7, #1
     c14:	4628      	mov	r0, r5
     c16:	1c92      	adds	r2, r2, #2
     c18:	f00f fed6 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c1c:	7026      	strb	r6, [r4, #0]
     c1e:	2004      	movs	r0, #4
     c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c24:	481b      	ldr	r0, [pc, #108]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c26:	f001 fed9 	bl	29dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c2a:	4604      	mov	r4, r0
     c2c:	2802      	cmp	r0, #2
     c2e:	d004      	beq.n	c3a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c30:	2c04      	cmp	r4, #4
     c32:	d007      	beq.n	c44 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c34:	2c08      	cmp	r4, #8
     c36:	d027      	beq.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
     c38:	e02a      	b.n	c90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c3a:	4916      	ldr	r1, [pc, #88]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c3c:	4628      	mov	r0, r5
     c3e:	f00c f83a 	bl	ccb6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c42:	e025      	b.n	c90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c44:	4913      	ldr	r1, [pc, #76]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c46:	4628      	mov	r0, r5
     c48:	f00c f89a 	bl	cd80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c4c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     c50:	d303      	bcc.n	c5a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x62>
     c52:	21c7      	movs	r1, #199	; 0xc7
     c54:	2008      	movs	r0, #8
     c56:	f7ff fee1 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c5a:	2800      	cmp	r0, #0
     c5c:	d0d5      	beq.n	c0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c5e:	f895 9000 	ldrb.w	r9, [r5]
     c62:	f895 8002 	ldrb.w	r8, [r5, #2]
     c66:	4648      	mov	r0, r9
     c68:	f000 f844 	bl	cf4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     c6c:	2800      	cmp	r0, #0
     c6e:	d0cc      	beq.n	c0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c70:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
     c74:	d10c      	bne.n	c90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c76:	4640      	mov	r0, r8
     c78:	f1b8 0f12 	cmp.w	r8, #18
     c7c:	d0c5      	beq.n	c0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c7e:	f000 f84b 	bl	d18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     c82:	2800      	cmp	r0, #0
     c84:	d0c1      	beq.n	c0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c86:	e003      	b.n	c90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c88:	4902      	ldr	r1, [pc, #8]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c8a:	4628      	mov	r0, r5
     c8c:	f00c f841 	bl	cd12 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     c90:	4620      	mov	r0, r4
     c92:	e7c5      	b.n	c20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     c94:	20000ff0 	.word	0x20000ff0
     c98:	b570      	push	{r4, r5, r6, lr}
     c9a:	780a      	ldrb	r2, [r1, #0]
     c9c:	7082      	strb	r2, [r0, #2]
     c9e:	b33a      	cbz	r2, cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
     ca0:	2a01      	cmp	r2, #1
     ca2:	d825      	bhi.n	cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
     ca4:	2313      	movs	r3, #19
     ca6:	7003      	strb	r3, [r0, #0]
     ca8:	2300      	movs	r3, #0
     caa:	e00a      	b.n	cc2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
     cac:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     cb0:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     cb4:	78a6      	ldrb	r6, [r4, #2]
     cb6:	70ee      	strb	r6, [r5, #3]
     cb8:	8864      	ldrh	r4, [r4, #2]
     cba:	0a24      	lsrs	r4, r4, #8
     cbc:	1c5b      	adds	r3, r3, #1
     cbe:	712c      	strb	r4, [r5, #4]
     cc0:	b2db      	uxtb	r3, r3
     cc2:	4293      	cmp	r3, r2
     cc4:	d3f2      	bcc.n	cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
     cc6:	2300      	movs	r3, #0
     cc8:	e00b      	b.n	ce2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xea>
     cca:	bf00      	nop
     ccc:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     cd0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     cd4:	792e      	ldrb	r6, [r5, #4]
     cd6:	7166      	strb	r6, [r4, #5]
     cd8:	88ad      	ldrh	r5, [r5, #4]
     cda:	0a2d      	lsrs	r5, r5, #8
     cdc:	1c5b      	adds	r3, r3, #1
     cde:	71a5      	strb	r5, [r4, #6]
     ce0:	b2db      	uxtb	r3, r3
     ce2:	4293      	cmp	r3, r2
     ce4:	d3f2      	bcc.n	ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
     ce6:	2101      	movs	r1, #1
     ce8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     cec:	b2c0      	uxtb	r0, r0
     cee:	bd70      	pop	{r4, r5, r6, pc}
     cf0:	2000      	movs	r0, #0
     cf2:	bd70      	pop	{r4, r5, r6, pc}

00000cf4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     cf4:	2840      	cmp	r0, #64	; 0x40
     cf6:	d203      	bcs.n	d00 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     cf8:	1e40      	subs	r0, r0, #1
     cfa:	b2c1      	uxtb	r1, r0
     cfc:	4805      	ldr	r0, [pc, #20]	; (d14 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cfe:	e005      	b.n	d0c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d00:	28ff      	cmp	r0, #255	; 0xff
     d02:	d005      	beq.n	d10 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d04:	3840      	subs	r0, #64	; 0x40
     d06:	b2c1      	uxtb	r1, r0
     d08:	4802      	ldr	r0, [pc, #8]	; (d14 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d0a:	3008      	adds	r0, #8
     d0c:	f00c baca 	b.w	d2a4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d10:	2001      	movs	r0, #1
     d12:	4770      	bx	lr
     d14:	2000004c 	.word	0x2000004c

00000d18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d18:	1e40      	subs	r0, r0, #1
     d1a:	b2c1      	uxtb	r1, r0
     d1c:	4801      	ldr	r0, [pc, #4]	; (d24 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d1e:	f00c bac1 	b.w	d2a4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d22:	0000      	.short	0x0000
     d24:	2000005c 	.word	0x2000005c

00000d28 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d28:	4902      	ldr	r1, [pc, #8]	; (d34 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     d2a:	6802      	ldr	r2, [r0, #0]
     d2c:	610a      	str	r2, [r1, #16]
     d2e:	6840      	ldr	r0, [r0, #4]
     d30:	6148      	str	r0, [r1, #20]
     d32:	4770      	bx	lr
     d34:	2000004c 	.word	0x2000004c

00000d38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d38:	4905      	ldr	r1, [pc, #20]	; (d50 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     d3a:	6802      	ldr	r2, [r0, #0]
     d3c:	600a      	str	r2, [r1, #0]
     d3e:	6840      	ldr	r0, [r0, #4]
     d40:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     d44:	600a      	str	r2, [r1, #0]
     d46:	4a03      	ldr	r2, [pc, #12]	; (d54 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d48:	4310      	orrs	r0, r2
     d4a:	6048      	str	r0, [r1, #4]
     d4c:	4770      	bx	lr
     d4e:	0000      	.short	0x0000
     d50:	2000004c 	.word	0x2000004c
     d54:	024007f8 	.word	0x024007f8

00000d58 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     d58:	4902      	ldr	r1, [pc, #8]	; (d64 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     d5a:	6802      	ldr	r2, [r0, #0]
     d5c:	608a      	str	r2, [r1, #8]
     d5e:	6840      	ldr	r0, [r0, #4]
     d60:	60c8      	str	r0, [r1, #12]
     d62:	4770      	bx	lr
     d64:	2000004c 	.word	0x2000004c

00000d68 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     d68:	4807      	ldr	r0, [pc, #28]	; (d88 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     d6a:	f04f 31ff 	mov.w	r1, #4294967295
     d6e:	2200      	movs	r2, #0
     d70:	6001      	str	r1, [r0, #0]
     d72:	0cc9      	lsrs	r1, r1, #19
     d74:	6041      	str	r1, [r0, #4]
     d76:	f100 0108 	add.w	r1, r0, #8
     d7a:	201f      	movs	r0, #31
     d7c:	600a      	str	r2, [r1, #0]
     d7e:	604a      	str	r2, [r1, #4]
     d80:	3108      	adds	r1, #8
     d82:	e9c1 0200 	strd	r0, r2, [r1]
     d86:	4770      	bx	lr
     d88:	2000004c 	.word	0x2000004c

00000d8c <sdc_hci_cmd_cb_reset>:
     d8c:	b510      	push	{r4, lr}
     d8e:	f7ff ffeb 	bl	d68 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     d92:	f00f f84e 	bl	fe32 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     d96:	4604      	mov	r4, r0
     d98:	4802      	ldr	r0, [pc, #8]	; (da4 <sdc_hci_cmd_cb_reset+0x18>)
     d9a:	6800      	ldr	r0, [r0, #0]
     d9c:	b100      	cbz	r0, da0 <sdc_hci_cmd_cb_reset+0x14>
     d9e:	4780      	blx	r0
     da0:	4620      	mov	r0, r4
     da2:	bd10      	pop	{r4, pc}
     da4:	20000064 	.word	0x20000064

00000da8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     da8:	4901      	ldr	r1, [pc, #4]	; (db0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     daa:	6008      	str	r0, [r1, #0]
     dac:	4770      	bx	lr
     dae:	0000      	.short	0x0000
     db0:	20000064 	.word	0x20000064

00000db4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     db8:	4604      	mov	r4, r0
     dba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     dbe:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     dc2:	4d1f      	ldr	r5, [pc, #124]	; (e40 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     dc4:	4e1e      	ldr	r6, [pc, #120]	; (e40 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     dc6:	3d10      	subs	r5, #16
     dc8:	2210      	movs	r2, #16
     dca:	2100      	movs	r1, #0
     dcc:	4620      	mov	r0, r4
     dce:	f00f fe75 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     dd2:	2210      	movs	r2, #16
     dd4:	2100      	movs	r1, #0
     dd6:	f104 0010 	add.w	r0, r4, #16
     dda:	f00f fe6f 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     dde:	6828      	ldr	r0, [r5, #0]
     de0:	1c40      	adds	r0, r0, #1
     de2:	d108      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     de4:	6868      	ldr	r0, [r5, #4]
     de6:	1c40      	adds	r0, r0, #1
     de8:	d105      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     dea:	68a8      	ldr	r0, [r5, #8]
     dec:	1c40      	adds	r0, r0, #1
     dee:	d102      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     df0:	68e8      	ldr	r0, [r5, #12]
     df2:	1c40      	adds	r0, r0, #1
     df4:	d007      	beq.n	e06 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     df6:	6828      	ldr	r0, [r5, #0]
     df8:	686a      	ldr	r2, [r5, #4]
     dfa:	68a9      	ldr	r1, [r5, #8]
     dfc:	68eb      	ldr	r3, [r5, #12]
     dfe:	6120      	str	r0, [r4, #16]
     e00:	6162      	str	r2, [r4, #20]
     e02:	61a1      	str	r1, [r4, #24]
     e04:	61e3      	str	r3, [r4, #28]
     e06:	2000      	movs	r0, #0
     e08:	f000 fcac 	bl	1764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     e0c:	4387      	bics	r7, r0
     e0e:	07f8      	lsls	r0, r7, #31
     e10:	d113      	bne.n	e3a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     e12:	6830      	ldr	r0, [r6, #0]
     e14:	1c40      	adds	r0, r0, #1
     e16:	d108      	bne.n	e2a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     e18:	6870      	ldr	r0, [r6, #4]
     e1a:	1c40      	adds	r0, r0, #1
     e1c:	d105      	bne.n	e2a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     e1e:	68b0      	ldr	r0, [r6, #8]
     e20:	1c40      	adds	r0, r0, #1
     e22:	d102      	bne.n	e2a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     e24:	68f0      	ldr	r0, [r6, #12]
     e26:	1c40      	adds	r0, r0, #1
     e28:	d007      	beq.n	e3a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     e2a:	6832      	ldr	r2, [r6, #0]
     e2c:	6870      	ldr	r0, [r6, #4]
     e2e:	68b1      	ldr	r1, [r6, #8]
     e30:	68f3      	ldr	r3, [r6, #12]
     e32:	6022      	str	r2, [r4, #0]
     e34:	6060      	str	r0, [r4, #4]
     e36:	60a1      	str	r1, [r4, #8]
     e38:	60e3      	str	r3, [r4, #12]
     e3a:	2000      	movs	r0, #0
     e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e40:	10000090 	.word	0x10000090

00000e44 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     e44:	b538      	push	{r3, r4, r5, lr}
     e46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     e4a:	4604      	mov	r4, r0
     e4c:	4822      	ldr	r0, [pc, #136]	; (ed8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e4e:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     e52:	4d21      	ldr	r5, [pc, #132]	; (ed8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e54:	6802      	ldr	r2, [r0, #0]
     e56:	3d14      	subs	r5, #20
     e58:	1c52      	adds	r2, r2, #1
     e5a:	d104      	bne.n	e66 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     e5c:	6842      	ldr	r2, [r0, #4]
     e5e:	43d2      	mvns	r2, r2
     e60:	0412      	lsls	r2, r2, #16
     e62:	0c12      	lsrs	r2, r2, #16
     e64:	d035      	beq.n	ed2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e66:	07c9      	lsls	r1, r1, #31
     e68:	d033      	beq.n	ed2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e6a:	6801      	ldr	r1, [r0, #0]
     e6c:	6840      	ldr	r0, [r0, #4]
     e6e:	f8ad 0000 	strh.w	r0, [sp]
     e72:	f8c4 1001 	str.w	r1, [r4, #1]
     e76:	f8bd 0000 	ldrh.w	r0, [sp]
     e7a:	f8a4 0005 	strh.w	r0, [r4, #5]
     e7e:	79a0      	ldrb	r0, [r4, #6]
     e80:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     e84:	71a0      	strb	r0, [r4, #6]
     e86:	6828      	ldr	r0, [r5, #0]
     e88:	1c40      	adds	r0, r0, #1
     e8a:	d00c      	beq.n	ea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e8c:	6868      	ldr	r0, [r5, #4]
     e8e:	1c40      	adds	r0, r0, #1
     e90:	d009      	beq.n	ea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e92:	68a8      	ldr	r0, [r5, #8]
     e94:	1c40      	adds	r0, r0, #1
     e96:	d006      	beq.n	ea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e98:	68e8      	ldr	r0, [r5, #12]
     e9a:	1c40      	adds	r0, r0, #1
     e9c:	d003      	beq.n	ea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e9e:	2000      	movs	r0, #0
     ea0:	f000 fc60 	bl	1764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     ea4:	b140      	cbz	r0, eb8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     ea6:	2210      	movs	r2, #16
     ea8:	2100      	movs	r1, #0
     eaa:	1de0      	adds	r0, r4, #7
     eac:	f00f fe06 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     eb0:	2001      	movs	r0, #1
     eb2:	7020      	strb	r0, [r4, #0]
     eb4:	2000      	movs	r0, #0
     eb6:	bd38      	pop	{r3, r4, r5, pc}
     eb8:	682a      	ldr	r2, [r5, #0]
     eba:	6869      	ldr	r1, [r5, #4]
     ebc:	68a8      	ldr	r0, [r5, #8]
     ebe:	68eb      	ldr	r3, [r5, #12]
     ec0:	f8c4 2007 	str.w	r2, [r4, #7]
     ec4:	f8c4 100b 	str.w	r1, [r4, #11]
     ec8:	f8c4 000f 	str.w	r0, [r4, #15]
     ecc:	f8c4 3013 	str.w	r3, [r4, #19]
     ed0:	e7ee      	b.n	eb0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     ed2:	2000      	movs	r0, #0
     ed4:	e7ed      	b.n	eb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     ed6:	0000      	.short	0x0000
     ed8:	100000a4 	.word	0x100000a4

00000edc <sdc_hci_cmd_vs_zephyr_read_version_info>:
     edc:	2102      	movs	r1, #2
     ede:	8001      	strh	r1, [r0, #0]
     ee0:	8041      	strh	r1, [r0, #2]
     ee2:	2100      	movs	r1, #0
     ee4:	7101      	strb	r1, [r0, #4]
     ee6:	21e0      	movs	r1, #224	; 0xe0
     ee8:	7141      	strb	r1, [r0, #5]
     eea:	f642 617e 	movw	r1, #11902	; 0x2e7e
     eee:	80c1      	strh	r1, [r0, #6]
     ef0:	4901      	ldr	r1, [pc, #4]	; (ef8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     ef2:	6081      	str	r1, [r0, #8]
     ef4:	2000      	movs	r0, #0
     ef6:	4770      	bx	lr
     ef8:	85055ec1 	.word	0x85055ec1
     efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f00:	798c      	ldrb	r4, [r1, #6]
     f02:	f8dd e018 	ldr.w	lr, [sp, #24]
     f06:	2c08      	cmp	r4, #8
     f08:	d901      	bls.n	f0e <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     f0a:	21db      	movs	r1, #219	; 0xdb
     f0c:	e02c      	b.n	f68 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     f0e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; fb4 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
     f12:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     f16:	b10d      	cbz	r5, f1c <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     f18:	21dc      	movs	r1, #220	; 0xdc
     f1a:	e025      	b.n	f68 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     f1c:	79cd      	ldrb	r5, [r1, #7]
     f1e:	2d00      	cmp	r5, #0
     f20:	d045      	beq.n	fae <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
     f22:	006f      	lsls	r7, r5, #1
     f24:	370a      	adds	r7, #10
     f26:	681d      	ldr	r5, [r3, #0]
     f28:	2c02      	cmp	r4, #2
     f2a:	443d      	add	r5, r7
     f2c:	d901      	bls.n	f32 <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     f2e:	4626      	mov	r6, r4
     f30:	e001      	b.n	f36 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     f32:	f04f 0602 	mov.w	r6, #2
     f36:	442e      	add	r6, r5
     f38:	f1a6 0601 	sub.w	r6, r6, #1
     f3c:	d901      	bls.n	f42 <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
     f3e:	4625      	mov	r5, r4
     f40:	e001      	b.n	f46 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
     f42:	f04f 0502 	mov.w	r5, #2
     f46:	f1a5 0501 	sub.w	r5, r5, #1
     f4a:	ea26 0605 	bic.w	r6, r6, r5
     f4e:	888d      	ldrh	r5, [r1, #4]
     f50:	4425      	add	r5, r4
     f52:	f1a4 0401 	sub.w	r4, r4, #1
     f56:	f1a5 0501 	sub.w	r5, r5, #1
     f5a:	ea25 0504 	bic.w	r5, r5, r4
     f5e:	f64f 74ff 	movw	r4, #65535	; 0xffff
     f62:	42a5      	cmp	r5, r4
     f64:	d303      	bcc.n	f6e <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
     f66:	21e7      	movs	r1, #231	; 0xe7
     f68:	2017      	movs	r0, #23
     f6a:	f7ff fd57 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f6e:	f1be 0f00 	cmp.w	lr, #0
     f72:	d118      	bne.n	fa6 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
     f74:	1bf4      	subs	r4, r6, r7
     f76:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     f7a:	8025      	strh	r5, [r4, #0]
     f7c:	79c8      	ldrb	r0, [r1, #7]
     f7e:	70a0      	strb	r0, [r4, #2]
     f80:	2001      	movs	r0, #1
     f82:	70e0      	strb	r0, [r4, #3]
     f84:	7122      	strb	r2, [r4, #4]
     f86:	6808      	ldr	r0, [r1, #0]
     f88:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     f8c:	0c00      	lsrs	r0, r0, #16
     f8e:	80e0      	strh	r0, [r4, #6]
     f90:	8808      	ldrh	r0, [r1, #0]
     f92:	8120      	strh	r0, [r4, #8]
     f94:	2000      	movs	r0, #0
     f96:	e003      	b.n	fa0 <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
     f98:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     f9c:	1c40      	adds	r0, r0, #1
     f9e:	817a      	strh	r2, [r7, #10]
     fa0:	79cf      	ldrb	r7, [r1, #7]
     fa2:	4287      	cmp	r7, r0
     fa4:	d8f8      	bhi.n	f98 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
     fa6:	79c8      	ldrb	r0, [r1, #7]
     fa8:	fb00 6005 	mla	r0, r0, r5, r6
     fac:	6018      	str	r0, [r3, #0]
     fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fb2:	0000      	.short	0x0000
     fb4:	20000068 	.word	0x20000068
     fb8:	b530      	push	{r4, r5, lr}
     fba:	4603      	mov	r3, r0
     fbc:	ea4f 0002 	mov.w	r0, r2
     fc0:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     fc4:	8964      	ldrh	r4, [r4, #10]
     fc6:	428c      	cmp	r4, r1
     fc8:	d009      	beq.n	fde <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
     fca:	789c      	ldrb	r4, [r3, #2]
     fcc:	1c40      	adds	r0, r0, #1
     fce:	fbb0 f5f4 	udiv	r5, r0, r4
     fd2:	fb04 0015 	mls	r0, r4, r5, r0
     fd6:	b2c0      	uxtb	r0, r0
     fd8:	4290      	cmp	r0, r2
     fda:	d1f1      	bne.n	fc0 <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
     fdc:	20ff      	movs	r0, #255	; 0xff
     fde:	bd30      	pop	{r4, r5, pc}

00000fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     fe0:	4a08      	ldr	r2, [pc, #32]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fe2:	b510      	push	{r4, lr}
     fe4:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     fe8:	4601      	mov	r1, r0
     fea:	4620      	mov	r0, r4
     fec:	f00c fcab 	bl	d946 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     ff0:	4601      	mov	r1, r0
     ff2:	28ff      	cmp	r0, #255	; 0xff
     ff4:	d004      	beq.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ff6:	4620      	mov	r0, r4
     ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ffc:	f00c bcb7 	b.w	d96e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1000:	2000      	movs	r0, #0
    1002:	bd10      	pop	{r4, pc}
    1004:	20000068 	.word	0x20000068

00001008 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1008:	b570      	push	{r4, r5, r6, lr}
    100a:	4604      	mov	r4, r0
    100c:	7808      	ldrb	r0, [r1, #0]
    100e:	784a      	ldrb	r2, [r1, #1]
    1010:	b086      	sub	sp, #24
    1012:	4290      	cmp	r0, r2
    1014:	d902      	bls.n	101c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    1016:	f44f 7184 	mov.w	r1, #264	; 0x108
    101a:	e006      	b.n	102a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    101c:	9401      	str	r4, [sp, #4]
    101e:	b13c      	cbz	r4, 1030 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    1020:	2300      	movs	r3, #0
    1022:	0760      	lsls	r0, r4, #29
    1024:	d006      	beq.n	1034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    1026:	f240 1119 	movw	r1, #281	; 0x119
    102a:	2017      	movs	r0, #23
    102c:	f7ff fcf6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1030:	2301      	movs	r3, #1
    1032:	e7f6      	b.n	1022 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    1034:	480b      	ldr	r0, [pc, #44]	; (1064 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>)
    1036:	2200      	movs	r2, #0
    1038:	4e0b      	ldr	r6, [pc, #44]	; (1068 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>)
    103a:	6002      	str	r2, [r0, #0]
    103c:	7849      	ldrb	r1, [r1, #1]
    103e:	e9d6 5000 	ldrd	r5, r0, [r6]
    1042:	68b6      	ldr	r6, [r6, #8]
    1044:	f361 601f 	bfi	r0, r1, #24, #8
    1048:	e9cd 5002 	strd	r5, r0, [sp, #8]
    104c:	9300      	str	r3, [sp, #0]
    104e:	9604      	str	r6, [sp, #16]
    1050:	ab01      	add	r3, sp, #4
    1052:	a902      	add	r1, sp, #8
    1054:	4610      	mov	r0, r2
    1056:	f7ff ff51 	bl	efc <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    105a:	9801      	ldr	r0, [sp, #4]
    105c:	b006      	add	sp, #24
    105e:	1b00      	subs	r0, r0, r4
    1060:	bd70      	pop	{r4, r5, r6, pc}
    1062:	0000      	.short	0x0000
    1064:	20000068 	.word	0x20000068
    1068:	00001158 	.word	0x00001158

0000106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    106c:	b510      	push	{r4, lr}
    106e:	4604      	mov	r4, r0
    1070:	7980      	ldrb	r0, [r0, #6]
    1072:	490e      	ldr	r1, [pc, #56]	; (10ac <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    1074:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1078:	b1a8      	cbz	r0, 10a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    107a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    107e:	79e1      	ldrb	r1, [r4, #7]
    1080:	7882      	ldrb	r2, [r0, #2]
    1082:	4291      	cmp	r1, r2
    1084:	d20f      	bcs.n	10a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    1086:	1c4a      	adds	r2, r1, #1
    1088:	71e2      	strb	r2, [r4, #7]
    108a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    108e:	8952      	ldrh	r2, [r2, #10]
    1090:	429a      	cmp	r2, r3
    1092:	d0f4      	beq.n	107e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    1094:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    1098:	8952      	ldrh	r2, [r2, #10]
    109a:	80a2      	strh	r2, [r4, #4]
    109c:	f00c fc67 	bl	d96e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    10a0:	6020      	str	r0, [r4, #0]
    10a2:	2000      	movs	r0, #0
    10a4:	bd10      	pop	{r4, pc}
    10a6:	2005      	movs	r0, #5
    10a8:	bd10      	pop	{r4, pc}
    10aa:	0000      	.short	0x0000
    10ac:	20000068 	.word	0x20000068

000010b0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    10b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10b4:	4607      	mov	r7, r0
    10b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    10ba:	8038      	strh	r0, [r7, #0]
    10bc:	4812      	ldr	r0, [pc, #72]	; (1108 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    10be:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    10c2:	b1ec      	cbz	r4, 1100 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    10c4:	78a5      	ldrb	r5, [r4, #2]
    10c6:	7920      	ldrb	r0, [r4, #4]
    10c8:	fbb0 f1f5 	udiv	r1, r0, r5
    10cc:	fb05 0611 	mls	r6, r5, r1, r0
    10d0:	4632      	mov	r2, r6
    10d2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    10d6:	4620      	mov	r0, r4
    10d8:	f7ff ff6e 	bl	fb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    10dc:	4602      	mov	r2, r0
    10de:	28ff      	cmp	r0, #255	; 0xff
    10e0:	d00e      	beq.n	1100 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    10e2:	1ba8      	subs	r0, r5, r6
    10e4:	4410      	add	r0, r2
    10e6:	fbb0 f1f5 	udiv	r1, r0, r5
    10ea:	fb05 0011 	mls	r0, r5, r1, r0
    10ee:	7921      	ldrb	r1, [r4, #4]
    10f0:	4408      	add	r0, r1
    10f2:	b281      	uxth	r1, r0
    10f4:	8039      	strh	r1, [r7, #0]
    10f6:	4620      	mov	r0, r4
    10f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    10fc:	f00c bc1d 	b.w	d93a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1100:	2000      	movs	r0, #0
    1102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1106:	0000      	.short	0x0000
    1108:	20000068 	.word	0x20000068

0000110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1110:	4606      	mov	r6, r0
    1112:	4810      	ldr	r0, [pc, #64]	; (1154 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    1114:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    1118:	4631      	mov	r1, r6
    111a:	4628      	mov	r0, r5
    111c:	f00c fc13 	bl	d946 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1120:	4604      	mov	r4, r0
    1122:	28ff      	cmp	r0, #255	; 0xff
    1124:	d012      	beq.n	114c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    1126:	f8d5 0006 	ldr.w	r0, [r5, #6]
    112a:	4621      	mov	r1, r4
    112c:	ea4f 4730 	mov.w	r7, r0, ror #16
    1130:	4628      	mov	r0, r5
    1132:	f00c fc1c 	bl	d96e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1136:	4601      	mov	r1, r0
    1138:	4630      	mov	r0, r6
    113a:	47b8      	blx	r7
    113c:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1140:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    1144:	8148      	strh	r0, [r1, #10]
    1146:	2000      	movs	r0, #0
    1148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    114c:	f243 0002 	movw	r0, #12290	; 0x3002
    1150:	e7fa      	b.n	1148 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    1152:	0000      	.short	0x0000
    1154:	20000068 	.word	0x20000068
    1158:	0000f1eb 	.word	0x0000f1eb
    115c:	000802a8 	.word	0x000802a8
    1160:	00000000 	.word	0x00000000

00001164 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1164:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1168:	4c24      	ldr	r4, [pc, #144]	; (11fc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    116a:	4606      	mov	r6, r0
    116c:	b081      	sub	sp, #4
    116e:	6820      	ldr	r0, [r4, #0]
    1170:	469a      	mov	sl, r3
    1172:	4693      	mov	fp, r2
    1174:	b158      	cbz	r0, 118e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    1176:	7a01      	ldrb	r1, [r0, #8]
    1178:	42b1      	cmp	r1, r6
    117a:	d903      	bls.n	1184 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    117c:	6840      	ldr	r0, [r0, #4]
    117e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1182:	b140      	cbz	r0, 1196 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1184:	f243 0002 	movw	r0, #12290	; 0x3002
    1188:	b005      	add	sp, #20
    118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    118e:	21a5      	movs	r1, #165	; 0xa5
    1190:	2018      	movs	r0, #24
    1192:	f7ff fc43 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1196:	4619      	mov	r1, r3
    1198:	9802      	ldr	r0, [sp, #8]
    119a:	f00c fc23 	bl	d9e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    119e:	4680      	mov	r8, r0
    11a0:	4658      	mov	r0, fp
    11a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    11a4:	f00c fc14 	bl	d9d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    11a8:	4605      	mov	r5, r0
    11aa:	eb08 0005 	add.w	r0, r8, r5
    11ae:	1d00      	adds	r0, r0, #4
    11b0:	b287      	uxth	r7, r0
    11b2:	6820      	ldr	r0, [r4, #0]
    11b4:	46a1      	mov	r9, r4
    11b6:	4639      	mov	r1, r7
    11b8:	6800      	ldr	r0, [r0, #0]
    11ba:	f00c fb59 	bl	d870 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    11be:	0004      	movs	r4, r0
    11c0:	d01a      	beq.n	11f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    11c2:	8067      	strh	r7, [r4, #2]
    11c4:	8025      	strh	r5, [r4, #0]
    11c6:	4629      	mov	r1, r5
    11c8:	1d20      	adds	r0, r4, #4
    11ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    11cc:	4607      	mov	r7, r0
    11ce:	465a      	mov	r2, fp
    11d0:	2309      	movs	r3, #9
    11d2:	9500      	str	r5, [sp, #0]
    11d4:	f00c fac6 	bl	d764 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    11d8:	8820      	ldrh	r0, [r4, #0]
    11da:	4641      	mov	r1, r8
    11dc:	4438      	add	r0, r7
    11de:	230a      	movs	r3, #10
    11e0:	9a02      	ldr	r2, [sp, #8]
    11e2:	f8cd a000 	str.w	sl, [sp]
    11e6:	f00c fabd 	bl	d764 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    11ea:	f8d9 0000 	ldr.w	r0, [r9]
    11ee:	6840      	ldr	r0, [r0, #4]
    11f0:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    11f4:	2000      	movs	r0, #0
    11f6:	e7c7      	b.n	1188 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    11f8:	2004      	movs	r0, #4
    11fa:	e7c5      	b.n	1188 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    11fc:	2000006c 	.word	0x2000006c

00001200 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1200:	b570      	push	{r4, r5, r6, lr}
    1202:	4c14      	ldr	r4, [pc, #80]	; (1254 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1204:	6823      	ldr	r3, [r4, #0]
    1206:	b18b      	cbz	r3, 122c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1208:	7a19      	ldrb	r1, [r3, #8]
    120a:	4281      	cmp	r1, r0
    120c:	d912      	bls.n	1234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    120e:	685a      	ldr	r2, [r3, #4]
    1210:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1214:	b171      	cbz	r1, 1234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1216:	2500      	movs	r5, #0
    1218:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    121c:	884a      	ldrh	r2, [r1, #2]
    121e:	6818      	ldr	r0, [r3, #0]
    1220:	f00c fb7e 	bl	d920 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1224:	6821      	ldr	r1, [r4, #0]
    1226:	2000      	movs	r0, #0
    1228:	7a0a      	ldrb	r2, [r1, #8]
    122a:	e00c      	b.n	1246 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    122c:	21c6      	movs	r1, #198	; 0xc6
    122e:	2018      	movs	r0, #24
    1230:	f7ff fbf4 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1234:	f243 0002 	movw	r0, #12290	; 0x3002
    1238:	bd70      	pop	{r4, r5, r6, pc}
    123a:	684b      	ldr	r3, [r1, #4]
    123c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1240:	b933      	cbnz	r3, 1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1242:	1c40      	adds	r0, r0, #1
    1244:	b2c0      	uxtb	r0, r0
    1246:	4282      	cmp	r2, r0
    1248:	d8f7      	bhi.n	123a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    124a:	6808      	ldr	r0, [r1, #0]
    124c:	f00c fb5d 	bl	d90a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1250:	2000      	movs	r0, #0
    1252:	bd70      	pop	{r4, r5, r6, pc}
    1254:	2000006c 	.word	0x2000006c

00001258 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    125c:	460d      	mov	r5, r1
    125e:	0004      	movs	r4, r0
    1260:	4690      	mov	r8, r2
    1262:	f04f 0600 	mov.w	r6, #0
    1266:	d006      	beq.n	1276 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1268:	2700      	movs	r7, #0
    126a:	07a0      	lsls	r0, r4, #30
    126c:	d005      	beq.n	127a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    126e:	2186      	movs	r1, #134	; 0x86
    1270:	2018      	movs	r0, #24
    1272:	f7ff fbd3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1276:	2701      	movs	r7, #1
    1278:	e7f7      	b.n	126a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    127a:	b1cd      	cbz	r5, 12b0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    127c:	4611      	mov	r1, r2
    127e:	2000      	movs	r0, #0
    1280:	f00c fb27 	bl	d8d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1284:	300c      	adds	r0, #12
    1286:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    128a:	b98f      	cbnz	r7, 12b0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    128c:	4f0a      	ldr	r7, [pc, #40]	; (12b8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    128e:	f104 000c 	add.w	r0, r4, #12
    1292:	00aa      	lsls	r2, r5, #2
    1294:	603c      	str	r4, [r7, #0]
    1296:	7225      	strb	r5, [r4, #8]
    1298:	6060      	str	r0, [r4, #4]
    129a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    129e:	6020      	str	r0, [r4, #0]
    12a0:	2100      	movs	r1, #0
    12a2:	6860      	ldr	r0, [r4, #4]
    12a4:	f00f fc0a 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12a8:	4641      	mov	r1, r8
    12aa:	6838      	ldr	r0, [r7, #0]
    12ac:	f00c fb11 	bl	d8d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12b0:	4630      	mov	r0, r6
    12b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12b6:	0000      	.short	0x0000
    12b8:	2000006c 	.word	0x2000006c

000012bc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    12bc:	b570      	push	{r4, r5, r6, lr}
    12be:	4d08      	ldr	r5, [pc, #32]	; (12e0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    12c0:	6828      	ldr	r0, [r5, #0]
    12c2:	2800      	cmp	r0, #0
    12c4:	d00a      	beq.n	12dc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    12c6:	2400      	movs	r4, #0
    12c8:	e004      	b.n	12d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    12ca:	4620      	mov	r0, r4
    12cc:	f7ff ff98 	bl	1200 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    12d0:	1c64      	adds	r4, r4, #1
    12d2:	b2e4      	uxtb	r4, r4
    12d4:	6828      	ldr	r0, [r5, #0]
    12d6:	7a00      	ldrb	r0, [r0, #8]
    12d8:	42a0      	cmp	r0, r4
    12da:	d8f6      	bhi.n	12ca <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    12dc:	bd70      	pop	{r4, r5, r6, pc}
    12de:	0000      	.short	0x0000
    12e0:	2000006c 	.word	0x2000006c

000012e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    12e4:	4909      	ldr	r1, [pc, #36]	; (130c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    12e6:	b510      	push	{r4, lr}
    12e8:	4602      	mov	r2, r0
    12ea:	6809      	ldr	r1, [r1, #0]
    12ec:	2000      	movs	r0, #0
    12ee:	b149      	cbz	r1, 1304 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    12f0:	7a0b      	ldrb	r3, [r1, #8]
    12f2:	4293      	cmp	r3, r2
    12f4:	d905      	bls.n	1302 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    12f6:	6849      	ldr	r1, [r1, #4]
    12f8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    12fc:	2900      	cmp	r1, #0
    12fe:	d000      	beq.n	1302 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1300:	1d08      	adds	r0, r1, #4
    1302:	bd10      	pop	{r4, pc}
    1304:	21ec      	movs	r1, #236	; 0xec
    1306:	2018      	movs	r0, #24
    1308:	f7ff fb88 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    130c:	2000006c 	.word	0x2000006c

00001310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1310:	490a      	ldr	r1, [pc, #40]	; (133c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1312:	b510      	push	{r4, lr}
    1314:	4602      	mov	r2, r0
    1316:	6809      	ldr	r1, [r1, #0]
    1318:	2000      	movs	r0, #0
    131a:	b159      	cbz	r1, 1334 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    131c:	7a0b      	ldrb	r3, [r1, #8]
    131e:	4293      	cmp	r3, r2
    1320:	d907      	bls.n	1332 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1322:	6849      	ldr	r1, [r1, #4]
    1324:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1328:	2900      	cmp	r1, #0
    132a:	d002      	beq.n	1332 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    132c:	f831 0b04 	ldrh.w	r0, [r1], #4
    1330:	4408      	add	r0, r1
    1332:	bd10      	pop	{r4, pc}
    1334:	21fa      	movs	r1, #250	; 0xfa
    1336:	2018      	movs	r0, #24
    1338:	f7ff fb70 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    133c:	2000006c 	.word	0x2000006c

00001340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1340:	4801      	ldr	r0, [pc, #4]	; (1348 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    1342:	7840      	ldrb	r0, [r0, #1]
    1344:	4770      	bx	lr
    1346:	0000      	.short	0x0000
    1348:	20000070 	.word	0x20000070

0000134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    134c:	4801      	ldr	r0, [pc, #4]	; (1354 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    134e:	6840      	ldr	r0, [r0, #4]
    1350:	4770      	bx	lr
    1352:	0000      	.short	0x0000
    1354:	20000070 	.word	0x20000070

00001358 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    135c:	460c      	mov	r4, r1
    135e:	4607      	mov	r7, r0
    1360:	4616      	mov	r6, r2
    1362:	2125      	movs	r1, #37	; 0x25
    1364:	4610      	mov	r0, r2
    1366:	460d      	mov	r5, r1
    1368:	4622      	mov	r2, r4
    136a:	f00c fa40 	bl	d7ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    136e:	4680      	mov	r8, r0
    1370:	b157      	cbz	r7, 1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>
    1372:	4638      	mov	r0, r7
    1374:	4641      	mov	r1, r8
    1376:	4632      	mov	r2, r6
    1378:	462b      	mov	r3, r5
    137a:	9400      	str	r4, [sp, #0]
    137c:	f00c f9f2 	bl	d764 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1380:	4803      	ldr	r0, [pc, #12]	; (1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>)
    1382:	6047      	str	r7, [r0, #4]
    1384:	7004      	strb	r4, [r0, #0]
    1386:	7046      	strb	r6, [r0, #1]
    1388:	4640      	mov	r0, r8
    138a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    138e:	0000      	.short	0x0000
    1390:	20000070 	.word	0x20000070

00001394 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    1394:	4802      	ldr	r0, [pc, #8]	; (13a0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    1396:	7842      	ldrb	r2, [r0, #1]
    1398:	7801      	ldrb	r1, [r0, #0]
    139a:	6840      	ldr	r0, [r0, #4]
    139c:	f7ff bfdc 	b.w	1358 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    13a0:	20000070 	.word	0x20000070
    13a4:	b530      	push	{r4, r5, lr}
    13a6:	490d      	ldr	r1, [pc, #52]	; (13dc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    13a8:	2001      	movs	r0, #1
    13aa:	6048      	str	r0, [r1, #4]
    13ac:	1e82      	subs	r2, r0, #2
    13ae:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13b2:	490b      	ldr	r1, [pc, #44]	; (13e0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    13b4:	6088      	str	r0, [r1, #8]
    13b6:	2300      	movs	r3, #0
    13b8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    13bc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13c0:	4c08      	ldr	r4, [pc, #32]	; (13e4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    13c2:	6023      	str	r3, [r4, #0]
    13c4:	1d25      	adds	r5, r4, #4
    13c6:	6028      	str	r0, [r5, #0]
    13c8:	6088      	str	r0, [r1, #8]
    13ca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13ce:	6023      	str	r3, [r4, #0]
    13d0:	6028      	str	r0, [r5, #0]
    13d2:	4906      	ldr	r1, [pc, #24]	; (13ec <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    13d4:	4804      	ldr	r0, [pc, #16]	; (13e8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    13d6:	6008      	str	r0, [r1, #0]
    13d8:	bd30      	pop	{r4, r5, pc}
    13da:	0000      	.short	0x0000
    13dc:	4000e000 	.word	0x4000e000
    13e0:	4000f000 	.word	0x4000f000
    13e4:	4000f500 	.word	0x4000f500
    13e8:	3ff60000 	.word	0x3ff60000
    13ec:	4001f508 	.word	0x4001f508

000013f0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    13f0:	b510      	push	{r4, lr}
    13f2:	f7ff ffd7 	bl	13a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    13f6:	f00c fb1d 	bl	da34 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    13fa:	4903      	ldr	r1, [pc, #12]	; (1408 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    13fc:	4801      	ldr	r0, [pc, #4]	; (1404 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    13fe:	6008      	str	r0, [r1, #0]
    1400:	bd10      	pop	{r4, pc}
    1402:	0000      	.short	0x0000
    1404:	3ff60000 	.word	0x3ff60000
    1408:	4001f508 	.word	0x4001f508

0000140c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    140c:	b510      	push	{r4, lr}
    140e:	f7ff ffc9 	bl	13a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    1412:	f00c fb0f 	bl	da34 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    1416:	f000 f887 	bl	1528 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    141a:	4905      	ldr	r1, [pc, #20]	; (1430 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    141c:	4803      	ldr	r0, [pc, #12]	; (142c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    141e:	6008      	str	r0, [r1, #0]
    1420:	f000 f8b8 	bl	1594 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1428:	f000 b8dc 	b.w	15e4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    142c:	3ff60000 	.word	0x3ff60000
    1430:	4001f508 	.word	0x4001f508
    1434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1438:	4682      	mov	sl, r0
    143a:	4838      	ldr	r0, [pc, #224]	; (151c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    143c:	f00f f9c1 	bl	107c2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1440:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 151c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    1444:	b128      	cbz	r0, 1452 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1446:	2601      	movs	r6, #1
    1448:	f10b 0001 	add.w	r0, fp, #1
    144c:	21ff      	movs	r1, #255	; 0xff
    144e:	7001      	strb	r1, [r0, #0]
    1450:	e000      	b.n	1454 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    1452:	2600      	movs	r6, #0
    1454:	f44f 7580 	mov.w	r5, #256	; 0x100
    1458:	4c31      	ldr	r4, [pc, #196]	; (1520 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    145a:	f04f 0800 	mov.w	r8, #0
    145e:	1d2f      	adds	r7, r5, #4
    1460:	2101      	movs	r1, #1
    1462:	6061      	str	r1, [r4, #4]
    1464:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1468:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    146c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1470:	6021      	str	r1, [r4, #0]
    1472:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1524 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    1476:	e01c      	b.n	14b2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1478:	f8d9 0000 	ldr.w	r0, [r9]
    147c:	06c0      	lsls	r0, r0, #27
    147e:	d518      	bpl.n	14b2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1480:	200e      	movs	r0, #14
    1482:	f00c fae6 	bl	da52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    1486:	f3ef 8010 	mrs	r0, PRIMASK
    148a:	9000      	str	r0, [sp, #0]
    148c:	b672      	cpsid	i
    148e:	2103      	movs	r1, #3
    1490:	4620      	mov	r0, r4
    1492:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1496:	4629      	mov	r1, r5
    1498:	f00c fae8 	bl	da6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    149c:	b930      	cbnz	r0, 14ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    149e:	4639      	mov	r1, r7
    14a0:	4620      	mov	r0, r4
    14a2:	f00c fae3 	bl	da6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    14a6:	b908      	cbnz	r0, 14ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    14a8:	f00f fa22 	bl	108f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    14ac:	9800      	ldr	r0, [sp, #0]
    14ae:	b900      	cbnz	r0, 14b2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    14b0:	b662      	cpsie	i
    14b2:	4629      	mov	r1, r5
    14b4:	4620      	mov	r0, r4
    14b6:	f00c fad9 	bl	da6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    14ba:	b928      	cbnz	r0, 14c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    14bc:	4639      	mov	r1, r7
    14be:	4620      	mov	r0, r4
    14c0:	f00c fad4 	bl	da6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    14c4:	2800      	cmp	r0, #0
    14c6:	d0d7      	beq.n	1478 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    14c8:	4639      	mov	r1, r7
    14ca:	4620      	mov	r0, r4
    14cc:	f00c face 	bl	da6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    14d0:	2800      	cmp	r0, #0
    14d2:	d1c5      	bne.n	1460 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    14d4:	bb06      	cbnz	r6, 1518 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    14d6:	f89b 1001 	ldrb.w	r1, [fp, #1]
    14da:	f88d 1000 	strb.w	r1, [sp]
    14de:	9900      	ldr	r1, [sp, #0]
    14e0:	9100      	str	r1, [sp, #0]
    14e2:	f89d 1000 	ldrb.w	r1, [sp]
    14e6:	b109      	cbz	r1, 14ec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    14e8:	2501      	movs	r5, #1
    14ea:	e000      	b.n	14ee <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    14ec:	2500      	movs	r5, #0
    14ee:	f10b 0001 	add.w	r0, fp, #1
    14f2:	f880 8000 	strb.w	r8, [r0]
    14f6:	2003      	movs	r0, #3
    14f8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    14fc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1500:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1504:	200e      	movs	r0, #14
    1506:	f00c faa4 	bl	da52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    150a:	4804      	ldr	r0, [pc, #16]	; (151c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    150c:	f00f f970 	bl	107f0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1510:	b115      	cbz	r5, 1518 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1512:	2011      	movs	r0, #17
    1514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1518:	2000      	movs	r0, #0
    151a:	e7fb      	b.n	1514 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    151c:	20000350 	.word	0x20000350
    1520:	4000e000 	.word	0x4000e000
    1524:	e000ed10 	.word	0xe000ed10

00001528 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1528:	b510      	push	{r4, lr}
    152a:	4806      	ldr	r0, [pc, #24]	; (1544 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    152c:	f00f f95c 	bl	107e8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1530:	b118      	cbz	r0, 153a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1532:	2130      	movs	r1, #48	; 0x30
    1534:	201d      	movs	r0, #29
    1536:	f7ff fa71 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    153a:	4802      	ldr	r0, [pc, #8]	; (1544 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    153c:	2100      	movs	r1, #0
    153e:	7041      	strb	r1, [r0, #1]
    1540:	bd10      	pop	{r4, pc}
    1542:	0000      	.short	0x0000
    1544:	20000350 	.word	0x20000350

00001548 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1548:	b570      	push	{r4, r5, r6, lr}
    154a:	4911      	ldr	r1, [pc, #68]	; (1590 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    154c:	680a      	ldr	r2, [r1, #0]
    154e:	b1ea      	cbz	r2, 158c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1550:	2300      	movs	r3, #0
    1552:	461d      	mov	r5, r3
    1554:	2401      	movs	r4, #1
    1556:	684a      	ldr	r2, [r1, #4]
    1558:	1c52      	adds	r2, r2, #1
    155a:	604a      	str	r2, [r1, #4]
    155c:	2a09      	cmp	r2, #9
    155e:	d300      	bcc.n	1562 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1560:	604d      	str	r5, [r1, #4]
    1562:	790e      	ldrb	r6, [r1, #4]
    1564:	fa04 f206 	lsl.w	r2, r4, r6
    1568:	680e      	ldr	r6, [r1, #0]
    156a:	4216      	tst	r6, r2
    156c:	d00b      	beq.n	1586 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    156e:	f3ef 8310 	mrs	r3, PRIMASK
    1572:	b672      	cpsid	i
    1574:	680c      	ldr	r4, [r1, #0]
    1576:	4394      	bics	r4, r2
    1578:	600c      	str	r4, [r1, #0]
    157a:	b903      	cbnz	r3, 157e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    157c:	b662      	cpsie	i
    157e:	6849      	ldr	r1, [r1, #4]
    1580:	6001      	str	r1, [r0, #0]
    1582:	2000      	movs	r0, #0
    1584:	bd70      	pop	{r4, r5, r6, pc}
    1586:	1c5b      	adds	r3, r3, #1
    1588:	2b09      	cmp	r3, #9
    158a:	d3e4      	bcc.n	1556 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    158c:	2005      	movs	r0, #5
    158e:	bd70      	pop	{r4, r5, r6, pc}
    1590:	20000078 	.word	0x20000078

00001594 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1594:	4802      	ldr	r0, [pc, #8]	; (15a0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1596:	2100      	movs	r1, #0
    1598:	6001      	str	r1, [r0, #0]
    159a:	6041      	str	r1, [r0, #4]
    159c:	4770      	bx	lr
    159e:	0000      	.short	0x0000
    15a0:	20000078 	.word	0x20000078

000015a4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    15a4:	b510      	push	{r4, lr}
    15a6:	4c04      	ldr	r4, [pc, #16]	; (15b8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    15a8:	7820      	ldrb	r0, [r4, #0]
    15aa:	28ff      	cmp	r0, #255	; 0xff
    15ac:	d003      	beq.n	15b6 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    15ae:	f00b f8cd 	bl	c74c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    15b2:	20ff      	movs	r0, #255	; 0xff
    15b4:	7020      	strb	r0, [r4, #0]
    15b6:	bd10      	pop	{r4, pc}
    15b8:	20000000 	.word	0x20000000

000015bc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    15bc:	b510      	push	{r4, lr}
    15be:	4c08      	ldr	r4, [pc, #32]	; (15e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    15c0:	7861      	ldrb	r1, [r4, #1]
    15c2:	b109      	cbz	r1, 15c8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    15c4:	200f      	movs	r0, #15
    15c6:	bd10      	pop	{r4, pc}
    15c8:	f00b f886 	bl	c6d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    15cc:	7020      	strb	r0, [r4, #0]
    15ce:	28ff      	cmp	r0, #255	; 0xff
    15d0:	d001      	beq.n	15d6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    15d2:	2000      	movs	r0, #0
    15d4:	bd10      	pop	{r4, pc}
    15d6:	2173      	movs	r1, #115	; 0x73
    15d8:	201f      	movs	r0, #31
    15da:	f7ff fa1f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    15de:	0000      	.short	0x0000
    15e0:	20000000 	.word	0x20000000

000015e4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    15e4:	4901      	ldr	r1, [pc, #4]	; (15ec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    15e6:	2000      	movs	r0, #0
    15e8:	7048      	strb	r0, [r1, #1]
    15ea:	4770      	bx	lr
    15ec:	20000000 	.word	0x20000000

000015f0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    15f0:	4806      	ldr	r0, [pc, #24]	; (160c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    15f2:	4a07      	ldr	r2, [pc, #28]	; (1610 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    15f4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    15f6:	8852      	ldrh	r2, [r2, #2]
    15f8:	4291      	cmp	r1, r2
    15fa:	d104      	bne.n	1606 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    15fc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1600:	b108      	cbz	r0, 1606 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1602:	2000      	movs	r0, #0
    1604:	4770      	bx	lr
    1606:	2001      	movs	r0, #1
    1608:	4770      	bx	lr
    160a:	0000      	.short	0x0000
    160c:	200012bc 	.word	0x200012bc
    1610:	20000344 	.word	0x20000344

00001614 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1614:	4901      	ldr	r1, [pc, #4]	; (161c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1616:	8048      	strh	r0, [r1, #2]
    1618:	4770      	bx	lr
    161a:	0000      	.short	0x0000
    161c:	20000344 	.word	0x20000344

00001620 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1620:	4808      	ldr	r0, [pc, #32]	; (1644 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1622:	4a09      	ldr	r2, [pc, #36]	; (1648 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1624:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1626:	8852      	ldrh	r2, [r2, #2]
    1628:	4291      	cmp	r1, r2
    162a:	d109      	bne.n	1640 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    162c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1630:	8481      	strh	r1, [r0, #36]	; 0x24
    1632:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1636:	b119      	cbz	r1, 1640 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1638:	2100      	movs	r1, #0
    163a:	7001      	strb	r1, [r0, #0]
    163c:	2001      	movs	r0, #1
    163e:	4770      	bx	lr
    1640:	2000      	movs	r0, #0
    1642:	4770      	bx	lr
    1644:	200012bc 	.word	0x200012bc
    1648:	20000344 	.word	0x20000344

0000164c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    164c:	4807      	ldr	r0, [pc, #28]	; (166c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    164e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1652:	2901      	cmp	r1, #1
    1654:	d007      	beq.n	1666 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    1656:	2101      	movs	r1, #1
    1658:	7001      	strb	r1, [r0, #0]
    165a:	4805      	ldr	r0, [pc, #20]	; (1670 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    165c:	4903      	ldr	r1, [pc, #12]	; (166c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    165e:	8800      	ldrh	r0, [r0, #0]
    1660:	8488      	strh	r0, [r1, #36]	; 0x24
    1662:	2001      	movs	r0, #1
    1664:	4770      	bx	lr
    1666:	2000      	movs	r0, #0
    1668:	4770      	bx	lr
    166a:	0000      	.short	0x0000
    166c:	200012bc 	.word	0x200012bc
    1670:	20000344 	.word	0x20000344

00001674 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    1674:	4906      	ldr	r1, [pc, #24]	; (1690 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    1676:	4b07      	ldr	r3, [pc, #28]	; (1694 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1678:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    167a:	885b      	ldrh	r3, [r3, #2]
    167c:	429a      	cmp	r2, r3
    167e:	d105      	bne.n	168c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1680:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1684:	b112      	cbz	r2, 168c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1686:	6001      	str	r1, [r0, #0]
    1688:	2001      	movs	r0, #1
    168a:	4770      	bx	lr
    168c:	2000      	movs	r0, #0
    168e:	4770      	bx	lr
    1690:	200012bc 	.word	0x200012bc
    1694:	20000344 	.word	0x20000344

00001698 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1698:	4909      	ldr	r1, [pc, #36]	; (16c0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    169a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    169c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    16a0:	3bff      	subs	r3, #255	; 0xff
    16a2:	d002      	beq.n	16aa <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    16a4:	2100      	movs	r1, #0
    16a6:	6001      	str	r1, [r0, #0]
    16a8:	e007      	b.n	16ba <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    16aa:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    16ae:	4904      	ldr	r1, [pc, #16]	; (16c0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    16b0:	2a01      	cmp	r2, #1
    16b2:	d002      	beq.n	16ba <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    16b4:	6001      	str	r1, [r0, #0]
    16b6:	2001      	movs	r0, #1
    16b8:	4770      	bx	lr
    16ba:	2000      	movs	r0, #0
    16bc:	4770      	bx	lr
    16be:	0000      	.short	0x0000
    16c0:	200012bc 	.word	0x200012bc

000016c4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    16c4:	4901      	ldr	r1, [pc, #4]	; (16cc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    16c6:	8008      	strh	r0, [r1, #0]
    16c8:	4770      	bx	lr
    16ca:	0000      	.short	0x0000
    16cc:	20000344 	.word	0x20000344

000016d0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    16d0:	4905      	ldr	r1, [pc, #20]	; (16e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    16d2:	2000      	movs	r0, #0
    16d4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    16d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    16dc:	8488      	strh	r0, [r1, #36]	; 0x24
    16de:	4903      	ldr	r1, [pc, #12]	; (16ec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    16e0:	8008      	strh	r0, [r1, #0]
    16e2:	8048      	strh	r0, [r1, #2]
    16e4:	4770      	bx	lr
    16e6:	0000      	.short	0x0000
    16e8:	200012bc 	.word	0x200012bc
    16ec:	20000344 	.word	0x20000344
    16f0:	4905      	ldr	r1, [pc, #20]	; (1708 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    16f2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    16f4:	4282      	cmp	r2, r0
    16f6:	d105      	bne.n	1704 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    16f8:	2000      	movs	r0, #0
    16fa:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    16fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1702:	8488      	strh	r0, [r1, #36]	; 0x24
    1704:	4770      	bx	lr
    1706:	0000      	.short	0x0000
    1708:	200012bc 	.word	0x200012bc

0000170c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    170c:	4a0a      	ldr	r2, [pc, #40]	; (1738 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    170e:	b110      	cbz	r0, 1716 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1710:	2801      	cmp	r0, #1
    1712:	d007      	beq.n	1724 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1714:	e00e      	b.n	1734 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1716:	7850      	ldrb	r0, [r2, #1]
    1718:	b160      	cbz	r0, 1734 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    171a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    171e:	6008      	str	r0, [r1, #0]
    1720:	88d0      	ldrh	r0, [r2, #6]
    1722:	e004      	b.n	172e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1724:	7810      	ldrb	r0, [r2, #0]
    1726:	b128      	cbz	r0, 1734 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1728:	6890      	ldr	r0, [r2, #8]
    172a:	6008      	str	r0, [r1, #0]
    172c:	8990      	ldrh	r0, [r2, #12]
    172e:	8088      	strh	r0, [r1, #4]
    1730:	2001      	movs	r0, #1
    1732:	4770      	bx	lr
    1734:	2000      	movs	r0, #0
    1736:	4770      	bx	lr
    1738:	20000352 	.word	0x20000352

0000173c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    173c:	4a08      	ldr	r2, [pc, #32]	; (1760 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    173e:	2301      	movs	r3, #1
    1740:	b138      	cbz	r0, 1752 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    1742:	2801      	cmp	r0, #1
    1744:	d104      	bne.n	1750 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    1746:	7013      	strb	r3, [r2, #0]
    1748:	6808      	ldr	r0, [r1, #0]
    174a:	6090      	str	r0, [r2, #8]
    174c:	8888      	ldrh	r0, [r1, #4]
    174e:	8190      	strh	r0, [r2, #12]
    1750:	4770      	bx	lr
    1752:	7053      	strb	r3, [r2, #1]
    1754:	6808      	ldr	r0, [r1, #0]
    1756:	f8c2 0002 	str.w	r0, [r2, #2]
    175a:	8888      	ldrh	r0, [r1, #4]
    175c:	80d0      	strh	r0, [r2, #6]
    175e:	4770      	bx	lr
    1760:	20000352 	.word	0x20000352

00001764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    1764:	4906      	ldr	r1, [pc, #24]	; (1780 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    1766:	b110      	cbz	r0, 176e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1768:	2801      	cmp	r0, #1
    176a:	d002      	beq.n	1772 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    176c:	e005      	b.n	177a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    176e:	7848      	ldrb	r0, [r1, #1]
    1770:	e000      	b.n	1774 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    1772:	7808      	ldrb	r0, [r1, #0]
    1774:	b108      	cbz	r0, 177a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1776:	2001      	movs	r0, #1
    1778:	4770      	bx	lr
    177a:	2000      	movs	r0, #0
    177c:	4770      	bx	lr
    177e:	0000      	.short	0x0000
    1780:	20000352 	.word	0x20000352

00001784 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    1784:	4901      	ldr	r1, [pc, #4]	; (178c <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    1786:	7708      	strb	r0, [r1, #28]
    1788:	4770      	bx	lr
    178a:	0000      	.short	0x0000
    178c:	200009ca 	.word	0x200009ca

00001790 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    1790:	b570      	push	{r4, r5, r6, lr}
    1792:	460c      	mov	r4, r1
    1794:	4605      	mov	r5, r0
    1796:	f000 f92b 	bl	19f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    179a:	b118      	cbz	r0, 17a4 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    179c:	21d0      	movs	r1, #208	; 0xd0
    179e:	2027      	movs	r0, #39	; 0x27
    17a0:	f7ff f93c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17a4:	4803      	ldr	r0, [pc, #12]	; (17b4 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    17a6:	2101      	movs	r1, #1
    17a8:	f00c fd97 	bl	e2da <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    17ac:	4802      	ldr	r0, [pc, #8]	; (17b8 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    17ae:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    17b2:	bd70      	pop	{r4, r5, r6, pc}
    17b4:	200009a8 	.word	0x200009a8
    17b8:	20000080 	.word	0x20000080

000017bc <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    17bc:	4901      	ldr	r1, [pc, #4]	; (17c4 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    17be:	2001      	movs	r0, #1
    17c0:	7148      	strb	r0, [r1, #5]
    17c2:	4770      	bx	lr
    17c4:	20000080 	.word	0x20000080

000017c8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    17c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17cc:	4e65      	ldr	r6, [pc, #404]	; (1964 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x19c>)
    17ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    17d0:	7835      	ldrb	r5, [r6, #0]
    17d2:	bbed      	cbnz	r5, 1850 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x88>
    17d4:	b3e2      	cbz	r2, 1850 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x88>
    17d6:	b3db      	cbz	r3, 1850 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x88>
    17d8:	b3d4      	cbz	r4, 1850 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x88>
    17da:	f106 0514 	add.w	r5, r6, #20
    17de:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    17e2:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    17e6:	2700      	movs	r7, #0
    17e8:	7177      	strb	r7, [r6, #5]
    17ea:	7137      	strb	r7, [r6, #4]
    17ec:	70b7      	strb	r7, [r6, #2]
    17ee:	7077      	strb	r7, [r6, #1]
    17f0:	70f7      	strb	r7, [r6, #3]
    17f2:	81b7      	strh	r7, [r6, #12]
    17f4:	81f7      	strh	r7, [r6, #14]
    17f6:	f000 f94b 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    17fa:	4605      	mov	r5, r0
    17fc:	f000 f942 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1800:	4604      	mov	r4, r0
    1802:	f006 fce1 	bl	81c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    1806:	f006 fa7b 	bl	7d00 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    180a:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    180e:	f006 fd5f 	bl	82d0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    1812:	69e0      	ldr	r0, [r4, #28]
    1814:	f006 fe42 	bl	849c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1818:	6960      	ldr	r0, [r4, #20]
    181a:	f006 fe35 	bl	8488 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    181e:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1822:	f006 fe6b 	bl	84fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    1826:	f04f 0b01 	mov.w	fp, #1
    182a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    182e:	2000      	movs	r0, #0
    1830:	f006 fbca 	bl	7fc8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    1834:	2800      	cmp	r0, #0
    1836:	d07d      	beq.n	1934 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16c>
    1838:	484b      	ldr	r0, [pc, #300]	; (1968 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a0>)
    183a:	f006 fc29 	bl	8090 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    183e:	8820      	ldrh	r0, [r4, #0]
    1840:	f7ff fd66 	bl	1310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    1844:	6370      	str	r0, [r6, #52]	; 0x34
    1846:	8820      	ldrh	r0, [r4, #0]
    1848:	f7ff fd4c 	bl	12e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    184c:	63b0      	str	r0, [r6, #56]	; 0x38
    184e:	e000      	b.n	1852 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x8a>
    1850:	e009      	b.n	1866 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x9e>
    1852:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    1856:	f88d 0000 	strb.w	r0, [sp]
    185a:	9800      	ldr	r0, [sp, #0]
    185c:	9000      	str	r0, [sp, #0]
    185e:	f89d 0000 	ldrb.w	r0, [sp]
    1862:	b9a8      	cbnz	r0, 1890 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xc8>
    1864:	e002      	b.n	186c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xa4>
    1866:	f240 1145 	movw	r1, #325	; 0x145
    186a:	e077      	b.n	195c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x194>
    186c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    186e:	b178      	cbz	r0, 1890 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xc8>
    1870:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    1874:	8aa9      	ldrh	r1, [r5, #20]
    1876:	4288      	cmp	r0, r1
    1878:	d10a      	bne.n	1890 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xc8>
    187a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    187e:	2201      	movs	r2, #1
    1880:	4408      	add	r0, r1
    1882:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    1886:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    188a:	6f21      	ldr	r1, [r4, #112]	; 0x70
    188c:	f009 fd44 	bl	b318 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    1890:	f105 0288 	add.w	r2, r5, #136	; 0x88
    1894:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 196c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a4>
    1898:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    189c:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    18a0:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    18a4:	f8c9 2019 	str.w	r2, [r9, #25]
    18a8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    18ac:	f8c9 101d 	str.w	r1, [r9, #29]
    18b0:	f000 f922 	bl	1af8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xec>
    18b4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    18b6:	4601      	mov	r1, r0
    18b8:	4610      	mov	r0, r2
    18ba:	f00c fa9a 	bl	ddf2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    18be:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    18c0:	4281      	cmp	r1, r0
    18c2:	d200      	bcs.n	18c6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    18c4:	4608      	mov	r0, r1
    18c6:	71b0      	strb	r0, [r6, #6]
    18c8:	46b0      	mov	r8, r6
    18ca:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    18ce:	46ba      	mov	sl, r7
    18d0:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    18d2:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    18d6:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    18d8:	2908      	cmp	r1, #8
    18da:	d100      	bne.n	18de <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x116>
    18dc:	2104      	movs	r1, #4
    18de:	f00c fa88 	bl	ddf2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    18e2:	b90f      	cbnz	r7, 18e8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x120>
    18e4:	1d00      	adds	r0, r0, #4
    18e6:	b280      	uxth	r0, r0
    18e8:	4286      	cmp	r6, r0
    18ea:	d200      	bcs.n	18ee <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x126>
    18ec:	4630      	mov	r0, r6
    18ee:	f888 0007 	strb.w	r0, [r8, #7]
    18f2:	f888 0008 	strb.w	r0, [r8, #8]
    18f6:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    18fa:	b188      	cbz	r0, 1920 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x158>
    18fc:	f889 b018 	strb.w	fp, [r9, #24]
    1900:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    1904:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1908:	4656      	mov	r6, sl
    190a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    190e:	f00c f95d 	bl	dbcc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1912:	4603      	mov	r3, r0
    1914:	22fb      	movs	r2, #251	; 0xfb
    1916:	4915      	ldr	r1, [pc, #84]	; (196c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a4>)
    1918:	4630      	mov	r0, r6
    191a:	9600      	str	r6, [sp, #0]
    191c:	f006 f95c 	bl	7bd8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1920:	2001      	movs	r0, #1
    1922:	f000 fb63 	bl	1fec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a0>
    1926:	4812      	ldr	r0, [pc, #72]	; (1970 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a8>)
    1928:	6800      	ldr	r0, [r0, #0]
    192a:	2803      	cmp	r0, #3
    192c:	d014      	beq.n	1958 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x190>
    192e:	280b      	cmp	r0, #11
    1930:	d012      	beq.n	1958 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x190>
    1932:	e000      	b.n	1936 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    1934:	e00e      	b.n	1954 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x18c>
    1936:	480d      	ldr	r0, [pc, #52]	; (196c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a4>)
    1938:	220e      	movs	r2, #14
    193a:	2100      	movs	r1, #0
    193c:	304a      	adds	r0, #74	; 0x4a
    193e:	f00f f8bd 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1942:	480a      	ldr	r0, [pc, #40]	; (196c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a4>)
    1944:	8aa9      	ldrh	r1, [r5, #20]
    1946:	304a      	adds	r0, #74	; 0x4a
    1948:	8041      	strh	r1, [r0, #2]
    194a:	8821      	ldrh	r1, [r4, #0]
    194c:	8001      	strh	r1, [r0, #0]
    194e:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    1952:	7101      	strb	r1, [r0, #4]
    1954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1958:	f240 2102 	movw	r1, #514	; 0x202
    195c:	2027      	movs	r0, #39	; 0x27
    195e:	f7ff f85d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1962:	0000      	.short	0x0000
    1964:	20000080 	.word	0x20000080
    1968:	00002174 	.word	0x00002174
    196c:	20000980 	.word	0x20000980
    1970:	40001550 	.word	0x40001550

00001974 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    1974:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1978:	4688      	mov	r8, r1
    197a:	4607      	mov	r7, r0
    197c:	f000 f888 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1980:	4c1a      	ldr	r4, [pc, #104]	; (19ec <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    1982:	4605      	mov	r5, r0
    1984:	07b8      	lsls	r0, r7, #30
    1986:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1988:	784e      	ldrb	r6, [r1, #1]
    198a:	d516      	bpl.n	19ba <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    198c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    198e:	b330      	cbz	r0, 19de <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    1990:	8962      	ldrh	r2, [r4, #10]
    1992:	1cd2      	adds	r2, r2, #3
    1994:	f00f f818 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1998:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    199a:	6260      	str	r0, [r4, #36]	; 0x24
    199c:	4669      	mov	r1, sp
    199e:	aa01      	add	r2, sp, #4
    19a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    19a2:	f00b fe5c 	bl	d65e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    19a6:	9800      	ldr	r0, [sp, #0]
    19a8:	f00b fdf6 	bl	d598 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    19ac:	f8c8 0000 	str.w	r0, [r8]
    19b0:	4631      	mov	r1, r6
    19b2:	2201      	movs	r2, #1
    19b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    19b6:	f00b fda6 	bl	d506 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    19ba:	07f8      	lsls	r0, r7, #31
    19bc:	d00d      	beq.n	19da <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    19be:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    19c2:	3518      	adds	r5, #24
    19c4:	1c40      	adds	r0, r0, #1
    19c6:	f141 0100 	adc.w	r1, r1, #0
    19ca:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    19ce:	f815 0918 	ldrb.w	r0, [r5], #-24
    19d2:	2801      	cmp	r0, #1
    19d4:	d008      	beq.n	19e8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    19d6:	2001      	movs	r0, #1
    19d8:	7628      	strb	r0, [r5, #24]
    19da:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    19de:	f240 415c 	movw	r1, #1116	; 0x45c
    19e2:	2027      	movs	r0, #39	; 0x27
    19e4:	f7ff f81a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    19e8:	2000      	movs	r0, #0
    19ea:	e7f5      	b.n	19d8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    19ec:	20000080 	.word	0x20000080

000019f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    19f0:	4804      	ldr	r0, [pc, #16]	; (1a04 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    19f2:	7800      	ldrb	r0, [r0, #0]
    19f4:	b108      	cbz	r0, 19fa <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    19f6:	200c      	movs	r0, #12
    19f8:	4770      	bx	lr
    19fa:	4903      	ldr	r1, [pc, #12]	; (1a08 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    19fc:	2000      	movs	r0, #0
    19fe:	7708      	strb	r0, [r1, #28]
    1a00:	4770      	bx	lr
    1a02:	0000      	.short	0x0000
    1a04:	20000080 	.word	0x20000080
    1a08:	200009ca 	.word	0x200009ca

00001a0c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    1a0c:	4812      	ldr	r0, [pc, #72]	; (1a58 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    1a0e:	b508      	push	{r3, lr}
    1a10:	7801      	ldrb	r1, [r0, #0]
    1a12:	b139      	cbz	r1, 1a24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18>
    1a14:	7800      	ldrb	r0, [r0, #0]
    1a16:	2801      	cmp	r0, #1
    1a18:	d006      	beq.n	1a28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    1a1a:	f240 211a 	movw	r1, #538	; 0x21a
    1a1e:	2027      	movs	r0, #39	; 0x27
    1a20:	f7fe fffc 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a24:	f000 f9bc 	bl	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1a28:	f000 f82c 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1a2c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1a30:	f88d 1000 	strb.w	r1, [sp]
    1a34:	9900      	ldr	r1, [sp, #0]
    1a36:	9100      	str	r1, [sp, #0]
    1a38:	f89d 1000 	ldrb.w	r1, [sp]
    1a3c:	2900      	cmp	r1, #0
    1a3e:	d10a      	bne.n	1a56 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a>
    1a40:	6f01      	ldr	r1, [r0, #112]	; 0x70
    1a42:	2900      	cmp	r1, #0
    1a44:	d007      	beq.n	1a56 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a>
    1a46:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    1a4a:	2200      	movs	r2, #0
    1a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1a50:	4611      	mov	r1, r2
    1a52:	f009 bc61 	b.w	b318 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    1a56:	bd08      	pop	{r3, pc}
    1a58:	20000080 	.word	0x20000080
    1a5c:	4608      	mov	r0, r1
    1a5e:	2100      	movs	r1, #0
    1a60:	7041      	strb	r1, [r0, #1]
    1a62:	2122      	movs	r1, #34	; 0x22
    1a64:	f800 1b04 	strb.w	r1, [r0], #4
    1a68:	220e      	movs	r2, #14
    1a6a:	4901      	ldr	r1, [pc, #4]	; (1a70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x64>)
    1a6c:	f00e bfac 	b.w	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1a70:	200009d8 	.word	0x200009d8
    1a74:	4a02      	ldr	r2, [pc, #8]	; (1a80 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    1a76:	8993      	ldrh	r3, [r2, #12]
    1a78:	4303      	orrs	r3, r0
    1a7a:	8193      	strh	r3, [r2, #12]
    1a7c:	6952      	ldr	r2, [r2, #20]
    1a7e:	4710      	bx	r2
    1a80:	20000080 	.word	0x20000080
    1a84:	4801      	ldr	r0, [pc, #4]	; (1a8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    1a86:	6840      	ldr	r0, [r0, #4]
    1a88:	4770      	bx	lr
    1a8a:	0000      	.short	0x0000
    1a8c:	200000bc 	.word	0x200000bc
    1a90:	4801      	ldr	r0, [pc, #4]	; (1a98 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x8c>)
    1a92:	6840      	ldr	r0, [r0, #4]
    1a94:	3088      	adds	r0, #136	; 0x88
    1a96:	4770      	bx	lr
    1a98:	200000bc 	.word	0x200000bc
    1a9c:	4a01      	ldr	r2, [pc, #4]	; (1aa4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x98>)
    1a9e:	2100      	movs	r1, #0
    1aa0:	6952      	ldr	r2, [r2, #20]
    1aa2:	4710      	bx	r2
    1aa4:	20000080 	.word	0x20000080
    1aa8:	b570      	push	{r4, r5, r6, lr}
    1aaa:	4605      	mov	r5, r0
    1aac:	2901      	cmp	r1, #1
    1aae:	d81c      	bhi.n	1aea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xde>
    1ab0:	4c10      	ldr	r4, [pc, #64]	; (1af4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xe8>)
    1ab2:	69a1      	ldr	r1, [r4, #24]
    1ab4:	4788      	blx	r1
    1ab6:	b1c0      	cbz	r0, 1aea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xde>
    1ab8:	7920      	ldrb	r0, [r4, #4]
    1aba:	b9b0      	cbnz	r0, 1aea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xde>
    1abc:	2d01      	cmp	r5, #1
    1abe:	d116      	bne.n	1aee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xe2>
    1ac0:	f104 0010 	add.w	r0, r4, #16
    1ac4:	7800      	ldrb	r0, [r0, #0]
    1ac6:	06c1      	lsls	r1, r0, #27
    1ac8:	d405      	bmi.n	1ad6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xca>
    1aca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1acc:	7809      	ldrb	r1, [r1, #0]
    1ace:	06c9      	lsls	r1, r1, #27
    1ad0:	d401      	bmi.n	1ad6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xca>
    1ad2:	2101      	movs	r1, #1
    1ad4:	e000      	b.n	1ad8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xcc>
    1ad6:	2100      	movs	r1, #0
    1ad8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ada:	b91a      	cbnz	r2, 1ae4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>
    1adc:	8962      	ldrh	r2, [r4, #10]
    1ade:	b10a      	cbz	r2, 1ae4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>
    1ae0:	06c0      	lsls	r0, r0, #27
    1ae2:	d502      	bpl.n	1aea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xde>
    1ae4:	89a0      	ldrh	r0, [r4, #12]
    1ae6:	4301      	orrs	r1, r0
    1ae8:	d001      	beq.n	1aee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xe2>
    1aea:	2001      	movs	r0, #1
    1aec:	bd70      	pop	{r4, r5, r6, pc}
    1aee:	2000      	movs	r0, #0
    1af0:	bd70      	pop	{r4, r5, r6, pc}
    1af2:	0000      	.short	0x0000
    1af4:	20000080 	.word	0x20000080
    1af8:	b510      	push	{r4, lr}
    1afa:	f7ff ffc3 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1afe:	4604      	mov	r4, r0
    1b00:	f7ff ffc6 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1b04:	4601      	mov	r1, r0
    1b06:	7f40      	ldrb	r0, [r0, #29]
    1b08:	4a0b      	ldr	r2, [pc, #44]	; (1b38 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x12c>)
    1b0a:	2825      	cmp	r0, #37	; 0x25
    1b0c:	d00a      	beq.n	1b24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x118>
    1b0e:	2826      	cmp	r0, #38	; 0x26
    1b10:	d008      	beq.n	1b24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x118>
    1b12:	7f89      	ldrb	r1, [r1, #30]
    1b14:	2925      	cmp	r1, #37	; 0x25
    1b16:	d005      	beq.n	1b24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x118>
    1b18:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1b1c:	2804      	cmp	r0, #4
    1b1e:	d100      	bne.n	1b22 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x116>
    1b20:	2008      	movs	r0, #8
    1b22:	bd10      	pop	{r4, pc}
    1b24:	6850      	ldr	r0, [r2, #4]
    1b26:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1b2a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b32:	f00c b859 	b.w	dbe8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x20>
    1b36:	0000      	.short	0x0000
    1b38:	200000bc 	.word	0x200000bc
    1b3c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1b40:	468b      	mov	fp, r1
    1b42:	4681      	mov	r9, r0
    1b44:	f7ff ffa4 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1b48:	2700      	movs	r7, #0
    1b4a:	4c64      	ldr	r4, [pc, #400]	; (1cdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d0>)
    1b4c:	4606      	mov	r6, r0
    1b4e:	f88d 7008 	strb.w	r7, [sp, #8]
    1b52:	9703      	str	r7, [sp, #12]
    1b54:	9701      	str	r7, [sp, #4]
    1b56:	7820      	ldrb	r0, [r4, #0]
    1b58:	463d      	mov	r5, r7
    1b5a:	2802      	cmp	r0, #2
    1b5c:	d004      	beq.n	1b68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x15c>
    1b5e:	f240 41df 	movw	r1, #1247	; 0x4df
    1b62:	2027      	movs	r0, #39	; 0x27
    1b64:	f7fe ff5a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b68:	7ba0      	ldrb	r0, [r4, #14]
    1b6a:	0640      	lsls	r0, r0, #25
    1b6c:	d406      	bmi.n	1b7c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x170>
    1b6e:	2040      	movs	r0, #64	; 0x40
    1b70:	f7ff ff94 	bl	1a9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x90>
    1b74:	89e0      	ldrh	r0, [r4, #14]
    1b76:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1b7a:	81e0      	strh	r0, [r4, #14]
    1b7c:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1b80:	f04f 0801 	mov.w	r8, #1
    1b84:	f1b9 0f00 	cmp.w	r9, #0
    1b88:	d03a      	beq.n	1c00 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f4>
    1b8a:	b180      	cbz	r0, 1bae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1a2>
    1b8c:	f006 f8f2 	bl	7d74 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1b90:	f006 f8cc 	bl	7d2c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1b94:	b958      	cbnz	r0, 1bae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1a2>
    1b96:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b98:	7841      	ldrb	r1, [r0, #1]
    1b9a:	b141      	cbz	r1, 1bae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1a2>
    1b9c:	7800      	ldrb	r0, [r0, #0]
    1b9e:	7e31      	ldrb	r1, [r6, #24]
    1ba0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1ba4:	4288      	cmp	r0, r1
    1ba6:	d102      	bne.n	1bae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1a2>
    1ba8:	f884 8001 	strb.w	r8, [r4, #1]
    1bac:	e092      	b.n	1cd4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2c8>
    1bae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1bb0:	7841      	ldrb	r1, [r0, #1]
    1bb2:	8161      	strh	r1, [r4, #10]
    1bb4:	b121      	cbz	r1, 1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1b4>
    1bb6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1bb8:	f00b fe27 	bl	d80a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1bbc:	62a0      	str	r0, [r4, #40]	; 0x28
    1bbe:	e000      	b.n	1bc2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1b6>
    1bc0:	62a5      	str	r5, [r4, #40]	; 0x28
    1bc2:	89e0      	ldrh	r0, [r4, #14]
    1bc4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1bc8:	81e0      	strh	r0, [r4, #14]
    1bca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1bcc:	7df1      	ldrb	r1, [r6, #23]
    1bce:	7800      	ldrb	r0, [r0, #0]
    1bd0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1bd4:	4288      	cmp	r0, r1
    1bd6:	d007      	beq.n	1be8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1dc>
    1bd8:	a803      	add	r0, sp, #12
    1bda:	f000 f985 	bl	1ee8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>
    1bde:	89e0      	ldrh	r0, [r4, #14]
    1be0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1be4:	81e0      	strh	r0, [r4, #14]
    1be6:	e000      	b.n	1bea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1de>
    1be8:	2701      	movs	r7, #1
    1bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1bec:	7e31      	ldrb	r1, [r6, #24]
    1bee:	7800      	ldrb	r0, [r0, #0]
    1bf0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1bf4:	4288      	cmp	r0, r1
    1bf6:	d10d      	bne.n	1c14 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x208>
    1bf8:	a802      	add	r0, sp, #8
    1bfa:	f000 f92b 	bl	1e54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>
    1bfe:	e009      	b.n	1c14 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x208>
    1c00:	b108      	cbz	r0, 1c06 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1fa>
    1c02:	f006 f8b1 	bl	7d68 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1c06:	78a0      	ldrb	r0, [r4, #2]
    1c08:	1c40      	adds	r0, r0, #1
    1c0a:	70a0      	strb	r0, [r4, #2]
    1c0c:	89e0      	ldrh	r0, [r4, #14]
    1c0e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1c12:	81e0      	strh	r0, [r4, #14]
    1c14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1cdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d0>
    1c18:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1c1c:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1c20:	b198      	cbz	r0, 1c4a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x23e>
    1c22:	f7ff ff2f 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1c26:	492e      	ldr	r1, [pc, #184]	; (1ce0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d4>)
    1c28:	f881 8018 	strb.w	r8, [r1, #24]
    1c2c:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1c30:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c34:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1c38:	f00b ffc8 	bl	dbcc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1c3c:	4603      	mov	r3, r0
    1c3e:	22fb      	movs	r2, #251	; 0xfb
    1c40:	4927      	ldr	r1, [pc, #156]	; (1ce0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d4>)
    1c42:	4628      	mov	r0, r5
    1c44:	9500      	str	r5, [sp, #0]
    1c46:	f005 ffc7 	bl	7bd8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1c4a:	f04f 0800 	mov.w	r8, #0
    1c4e:	f1bb 0f00 	cmp.w	fp, #0
    1c52:	d104      	bne.n	1c5e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x252>
    1c54:	78a1      	ldrb	r1, [r4, #2]
    1c56:	2001      	movs	r0, #1
    1c58:	f7ff ff26 	bl	1aa8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x9c>
    1c5c:	b120      	cbz	r0, 1c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x25c>
    1c5e:	f006 fbff 	bl	8460 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1c62:	f04f 0801 	mov.w	r8, #1
    1c66:	e002      	b.n	1c6e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x262>
    1c68:	2000      	movs	r0, #0
    1c6a:	f000 f9bf 	bl	1fec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a0>
    1c6e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1c72:	b118      	cbz	r0, 1c7c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x270>
    1c74:	a901      	add	r1, sp, #4
    1c76:	2002      	movs	r0, #2
    1c78:	f7ff fe7c 	bl	1974 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    1c7c:	4818      	ldr	r0, [pc, #96]	; (1ce0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d4>)
    1c7e:	304a      	adds	r0, #74	; 0x4a
    1c80:	b117      	cbz	r7, 1c88 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x27c>
    1c82:	8942      	ldrh	r2, [r0, #10]
    1c84:	1c52      	adds	r2, r2, #1
    1c86:	8142      	strh	r2, [r0, #10]
    1c88:	f1b9 0f00 	cmp.w	r9, #0
    1c8c:	d004      	beq.n	1c98 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x28c>
    1c8e:	88c1      	ldrh	r1, [r0, #6]
    1c90:	1c49      	adds	r1, r1, #1
    1c92:	80c1      	strh	r1, [r0, #6]
    1c94:	70a5      	strb	r5, [r4, #2]
    1c96:	e002      	b.n	1c9e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x292>
    1c98:	8901      	ldrh	r1, [r0, #8]
    1c9a:	1c49      	adds	r1, r1, #1
    1c9c:	8101      	strh	r1, [r0, #8]
    1c9e:	480f      	ldr	r0, [pc, #60]	; (1cdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d0>)
    1ca0:	303c      	adds	r0, #60	; 0x3c
    1ca2:	f001 fa79 	bl	3198 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1ca6:	9803      	ldr	r0, [sp, #12]
    1ca8:	b140      	cbz	r0, 1cbc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2b0>
    1caa:	f00b fc75 	bl	d598 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1cae:	f8da 1004 	ldr.w	r1, [sl, #4]
    1cb2:	1c40      	adds	r0, r0, #1
    1cb4:	7205      	strb	r5, [r0, #8]
    1cb6:	2208      	movs	r2, #8
    1cb8:	f00c fb4b 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1cbc:	9801      	ldr	r0, [sp, #4]
    1cbe:	b130      	cbz	r0, 1cce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2c2>
    1cc0:	f8da 1004 	ldr.w	r1, [sl, #4]
    1cc4:	7205      	strb	r5, [r0, #8]
    1cc6:	2210      	movs	r2, #16
    1cc8:	9801      	ldr	r0, [sp, #4]
    1cca:	f00c fb42 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1cce:	f1b8 0f00 	cmp.w	r8, #0
    1cd2:	d001      	beq.n	1cd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2cc>
    1cd4:	f000 f864 	bl	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1cd8:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1cdc:	20000080 	.word	0x20000080
    1ce0:	20000980 	.word	0x20000980
    1ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ce8:	4688      	mov	r8, r1
    1cea:	4681      	mov	r9, r0
    1cec:	f7ff fed0 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1cf0:	4d29      	ldr	r5, [pc, #164]	; (1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>)
    1cf2:	4604      	mov	r4, r0
    1cf4:	7828      	ldrb	r0, [r5, #0]
    1cf6:	2801      	cmp	r0, #1
    1cf8:	d004      	beq.n	1d04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>
    1cfa:	f240 416b 	movw	r1, #1131	; 0x46b
    1cfe:	2027      	movs	r0, #39	; 0x27
    1d00:	f7fe fe8c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d04:	7c20      	ldrb	r0, [r4, #16]
    1d06:	2600      	movs	r6, #0
    1d08:	2701      	movs	r7, #1
    1d0a:	b120      	cbz	r0, 1d16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x30a>
    1d0c:	7426      	strb	r6, [r4, #16]
    1d0e:	2100      	movs	r1, #0
    1d10:	2004      	movs	r0, #4
    1d12:	f7ff feaf 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    1d16:	6a29      	ldr	r1, [r5, #32]
    1d18:	7808      	ldrb	r0, [r1, #0]
    1d1a:	43c0      	mvns	r0, r0
    1d1c:	0780      	lsls	r0, r0, #30
    1d1e:	d109      	bne.n	1d34 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x328>
    1d20:	7da0      	ldrb	r0, [r4, #22]
    1d22:	bb88      	cbnz	r0, 1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d24:	2002      	movs	r0, #2
    1d26:	f7ff fea5 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    1d2a:	6a28      	ldr	r0, [r5, #32]
    1d2c:	7800      	ldrb	r0, [r0, #0]
    1d2e:	43c0      	mvns	r0, r0
    1d30:	0780      	lsls	r0, r0, #30
    1d32:	d029      	beq.n	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d34:	6a28      	ldr	r0, [r5, #32]
    1d36:	7840      	ldrb	r0, [r0, #1]
    1d38:	b110      	cbz	r0, 1d40 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x334>
    1d3a:	2002      	movs	r0, #2
    1d3c:	75a0      	strb	r0, [r4, #22]
    1d3e:	e000      	b.n	1d42 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x336>
    1d40:	75a7      	strb	r7, [r4, #22]
    1d42:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1d46:	b198      	cbz	r0, 1d70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>
    1d48:	f7ff fe9c 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1d4c:	4913      	ldr	r1, [pc, #76]	; (1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>)
    1d4e:	7a2d      	ldrb	r5, [r5, #8]
    1d50:	760e      	strb	r6, [r1, #24]
    1d52:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1d56:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1d5a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1d5e:	f00b ff35 	bl	dbcc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1d62:	4603      	mov	r3, r0
    1d64:	462a      	mov	r2, r5
    1d66:	490d      	ldr	r1, [pc, #52]	; (1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>)
    1d68:	4638      	mov	r0, r7
    1d6a:	9600      	str	r6, [sp, #0]
    1d6c:	f005 ff34 	bl	7bd8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1d70:	ea38 0009 	bics.w	r0, r8, r9
    1d74:	d004      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d76:	2100      	movs	r1, #0
    1d78:	4608      	mov	r0, r1
    1d7a:	f7ff fe95 	bl	1aa8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x9c>
    1d7e:	b128      	cbz	r0, 1d8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d84:	f000 b80c 	b.w	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1d88:	2003      	movs	r0, #3
    1d8a:	e7d7      	b.n	1d3c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x330>
    1d8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d90:	2000      	movs	r0, #0
    1d92:	f000 b8ef 	b.w	1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>
    1d96:	0000      	.short	0x0000
    1d98:	20000080 	.word	0x20000080
    1d9c:	20000980 	.word	0x20000980
    1da0:	b510      	push	{r4, lr}
    1da2:	f006 f887 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1da6:	f005 ffab 	bl	7d00 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1daa:	4c0d      	ldr	r4, [pc, #52]	; (1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>)
    1dac:	89e0      	ldrh	r0, [r4, #14]
    1dae:	f7ff fe75 	bl	1a9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x90>
    1db2:	480c      	ldr	r0, [pc, #48]	; (1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>)
    1db4:	7f00      	ldrb	r0, [r0, #28]
    1db6:	b158      	cbz	r0, 1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1db8:	490a      	ldr	r1, [pc, #40]	; (1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>)
    1dba:	220e      	movs	r2, #14
    1dbc:	f101 000e 	add.w	r0, r1, #14
    1dc0:	f00e fe02 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1dc4:	4807      	ldr	r0, [pc, #28]	; (1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>)
    1dc6:	2202      	movs	r2, #2
    1dc8:	4907      	ldr	r1, [pc, #28]	; (1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>)
    1dca:	301d      	adds	r0, #29
    1dcc:	f00c fad5 	bl	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1dd0:	69e2      	ldr	r2, [r4, #28]
    1dd2:	7921      	ldrb	r1, [r4, #4]
    1dd4:	7860      	ldrb	r0, [r4, #1]
    1dd6:	4790      	blx	r2
    1dd8:	2000      	movs	r0, #0
    1dda:	7020      	strb	r0, [r4, #0]
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	0000      	.short	0x0000
    1de0:	20000080 	.word	0x20000080
    1de4:	200009ca 	.word	0x200009ca
    1de8:	00001a5d 	.word	0x00001a5d
    1dec:	4808      	ldr	r0, [pc, #32]	; (1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>)
    1dee:	b510      	push	{r4, lr}
    1df0:	7800      	ldrb	r0, [r0, #0]
    1df2:	2802      	cmp	r0, #2
    1df4:	d004      	beq.n	1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>
    1df6:	f240 2149 	movw	r1, #585	; 0x249
    1dfa:	2027      	movs	r0, #39	; 0x27
    1dfc:	f7fe fe0e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e00:	4904      	ldr	r1, [pc, #16]	; (1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>)
    1e02:	2001      	movs	r0, #1
    1e04:	7308      	strb	r0, [r1, #12]
    1e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e0a:	f7ff bfc9 	b.w	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1e0e:	0000      	.short	0x0000
    1e10:	20000080 	.word	0x20000080
    1e14:	200009ca 	.word	0x200009ca
    1e18:	b430      	push	{r4, r5}
    1e1a:	4604      	mov	r4, r0
    1e1c:	480c      	ldr	r0, [pc, #48]	; (1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>)
    1e1e:	7a00      	ldrb	r0, [r0, #8]
    1e20:	b10b      	cbz	r3, 1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e22:	1d00      	adds	r0, r0, #4
    1e24:	b2c0      	uxtb	r0, r0
    1e26:	b93a      	cbnz	r2, 1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e28:	28ff      	cmp	r0, #255	; 0xff
    1e2a:	d105      	bne.n	1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e2c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1e30:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1e34:	429a      	cmp	r2, r3
    1e36:	d009      	beq.n	1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1e38:	b121      	cbz	r1, 1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e3a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1e3e:	bc30      	pop	{r4, r5}
    1e40:	f006 bb32 	b.w	84a8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1e44:	20ff      	movs	r0, #255	; 0xff
    1e46:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1e4a:	e7f8      	b.n	1e3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e4c:	bc30      	pop	{r4, r5}
    1e4e:	4770      	bx	lr
    1e50:	20000080 	.word	0x20000080
    1e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e58:	4607      	mov	r7, r0
    1e5a:	f7ff fe19 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1e5e:	4c21      	ldr	r4, [pc, #132]	; (1ee4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1e60:	4605      	mov	r5, r0
    1e62:	2601      	movs	r6, #1
    1e64:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1e66:	7808      	ldrb	r0, [r1, #0]
    1e68:	f000 0003 	and.w	r0, r0, #3
    1e6c:	2801      	cmp	r0, #1
    1e6e:	d00c      	beq.n	1e8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13e>
    1e70:	2802      	cmp	r0, #2
    1e72:	d00a      	beq.n	1e8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13e>
    1e74:	2803      	cmp	r0, #3
    1e76:	d11b      	bne.n	1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1e78:	742e      	strb	r6, [r5, #16]
    1e7a:	89e0      	ldrh	r0, [r4, #14]
    1e7c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1e80:	81e0      	strh	r0, [r4, #14]
    1e82:	2001      	movs	r0, #1
    1e84:	f7ff fdf6 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    1e88:	e012      	b.n	1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1e8a:	7848      	ldrb	r0, [r1, #1]
    1e8c:	b180      	cbz	r0, 1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1e8e:	89e1      	ldrh	r1, [r4, #14]
    1e90:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1e94:	81e1      	strh	r1, [r4, #14]
    1e96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1e98:	2900      	cmp	r1, #0
    1e9a:	d018      	beq.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1e9c:	28fb      	cmp	r0, #251	; 0xfb
    1e9e:	d818      	bhi.n	1ed2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x186>
    1ea0:	7960      	ldrb	r0, [r4, #5]
    1ea2:	b120      	cbz	r0, 1eae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x162>
    1ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ea8:	2020      	movs	r0, #32
    1eaa:	f7ff bdf7 	b.w	1a9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x90>
    1eae:	703e      	strb	r6, [r7, #0]
    1eb0:	7e28      	ldrb	r0, [r5, #24]
    1eb2:	2801      	cmp	r0, #1
    1eb4:	d012      	beq.n	1edc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>
    1eb6:	762e      	strb	r6, [r5, #24]
    1eb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1eba:	7840      	ldrb	r0, [r0, #1]
    1ebc:	2800      	cmp	r0, #0
    1ebe:	d006      	beq.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1ec0:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1ec4:	1c40      	adds	r0, r0, #1
    1ec6:	f141 0100 	adc.w	r1, r1, #0
    1eca:	e9c5 0100 	strd	r0, r1, [r5]
    1ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ed2:	7920      	ldrb	r0, [r4, #4]
    1ed4:	f040 0010 	orr.w	r0, r0, #16
    1ed8:	7120      	strb	r0, [r4, #4]
    1eda:	e7f8      	b.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1edc:	2000      	movs	r0, #0
    1ede:	7628      	strb	r0, [r5, #24]
    1ee0:	e7ea      	b.n	1eb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>
    1ee2:	0000      	.short	0x0000
    1ee4:	20000080 	.word	0x20000080
    1ee8:	b570      	push	{r4, r5, r6, lr}
    1eea:	4605      	mov	r5, r0
    1eec:	f7ff fdd0 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1ef0:	4604      	mov	r4, r0
    1ef2:	7d80      	ldrb	r0, [r0, #22]
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d026      	beq.n	1f46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fa>
    1ef8:	2802      	cmp	r0, #2
    1efa:	d10c      	bne.n	1f16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ca>
    1efc:	4817      	ldr	r0, [pc, #92]	; (1f5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x210>)
    1efe:	4629      	mov	r1, r5
    1f00:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1f02:	f00b fad8 	bl	d4b6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1f06:	b1f8      	cbz	r0, 1f48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fc>
    1f08:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1f0c:	1c40      	adds	r0, r0, #1
    1f0e:	f141 0100 	adc.w	r1, r1, #0
    1f12:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1f16:	2500      	movs	r5, #0
    1f18:	75a5      	strb	r5, [r4, #22]
    1f1a:	7c60      	ldrb	r0, [r4, #17]
    1f1c:	2601      	movs	r6, #1
    1f1e:	b170      	cbz	r0, 1f3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f2>
    1f20:	7465      	strb	r5, [r4, #17]
    1f22:	f7ff fb7d 	bl	1620 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1f26:	b190      	cbz	r0, 1f4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x202>
    1f28:	2100      	movs	r1, #0
    1f2a:	2008      	movs	r0, #8
    1f2c:	f7ff fda2 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    1f30:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1f34:	1c40      	adds	r0, r0, #1
    1f36:	f141 0100 	adc.w	r1, r1, #0
    1f3a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1f3e:	7de0      	ldrb	r0, [r4, #23]
    1f40:	2801      	cmp	r0, #1
    1f42:	d009      	beq.n	1f58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>
    1f44:	75e6      	strb	r6, [r4, #23]
    1f46:	bd70      	pop	{r4, r5, r6, pc}
    1f48:	f240 31da 	movw	r1, #986	; 0x3da
    1f4c:	e001      	b.n	1f52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x206>
    1f4e:	f240 31f1 	movw	r1, #1009	; 0x3f1
    1f52:	2027      	movs	r0, #39	; 0x27
    1f54:	f7fe fd62 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f58:	75e5      	strb	r5, [r4, #23]
    1f5a:	bd70      	pop	{r4, r5, r6, pc}
    1f5c:	20000080 	.word	0x20000080
    1f60:	4803      	ldr	r0, [pc, #12]	; (1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>)
    1f62:	7800      	ldrb	r0, [r0, #0]
    1f64:	2800      	cmp	r0, #0
    1f66:	d001      	beq.n	1f6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x220>
    1f68:	f7ff bf1a 	b.w	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1f6c:	4770      	bx	lr
    1f6e:	0000      	.short	0x0000
    1f70:	20000080 	.word	0x20000080
    1f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f78:	4607      	mov	r7, r0
    1f7a:	f7ff fd83 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1f7e:	4680      	mov	r8, r0
    1f80:	f7ff fd86 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1f84:	4c17      	ldr	r4, [pc, #92]	; (1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>)
    1f86:	4605      	mov	r5, r0
    1f88:	463a      	mov	r2, r7
    1f8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1f8c:	6260      	str	r0, [r4, #36]	; 0x24
    1f8e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f92:	2101      	movs	r1, #1
    1f94:	4640      	mov	r0, r8
    1f96:	f7ff ff3f 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1f9a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1f9e:	2600      	movs	r6, #0
    1fa0:	b168      	cbz	r0, 1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1fa2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1fa4:	f006 f9b6 	bl	8314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1fa8:	480f      	ldr	r0, [pc, #60]	; (1fe8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29c>)
    1faa:	7606      	strb	r6, [r0, #24]
    1fac:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1fb0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1fb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1fb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1fb8:	f005 fe60 	bl	7c7c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1fbc:	e004      	b.n	1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    1fbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1fc0:	f006 f9a8 	bl	8314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1fc4:	f005 fe9c 	bl	7d00 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1fc8:	b917      	cbnz	r7, 1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1fca:	4630      	mov	r0, r6
    1fcc:	f006 f868 	bl	80a0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1fd0:	2100      	movs	r1, #0
    1fd2:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1fd6:	4608      	mov	r0, r1
    1fd8:	f006 fa24 	bl	8424 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1fdc:	2002      	movs	r0, #2
    1fde:	7020      	strb	r0, [r4, #0]
    1fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fe4:	20000080 	.word	0x20000080
    1fe8:	20000980 	.word	0x20000980
    1fec:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1ff0:	4604      	mov	r4, r0
    1ff2:	f7ff fd4d 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1ff6:	4605      	mov	r5, r0
    1ff8:	f7ff fd44 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1ffc:	f04f 0800 	mov.w	r8, #0
    2000:	f88d 8000 	strb.w	r8, [sp]
    2004:	4606      	mov	r6, r0
    2006:	f8df 9164 	ldr.w	r9, [pc, #356]	; 216c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x420>
    200a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    200e:	4622      	mov	r2, r4
    2010:	4641      	mov	r1, r8
    2012:	f7ff ff01 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    2016:	7da8      	ldrb	r0, [r5, #22]
    2018:	2701      	movs	r7, #1
    201a:	f1a9 0420 	sub.w	r4, r9, #32
    201e:	b140      	cbz	r0, 2032 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e6>
    2020:	2801      	cmp	r0, #1
    2022:	d01f      	beq.n	2064 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x318>
    2024:	2802      	cmp	r0, #2
    2026:	d030      	beq.n	208a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33e>
    2028:	2803      	cmp	r0, #3
    202a:	d03c      	beq.n	20a6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35a>
    202c:	f240 21fb 	movw	r1, #763	; 0x2fb
    2030:	e058      	b.n	20e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x398>
    2032:	79a0      	ldrb	r0, [r4, #6]
    2034:	2150      	movs	r1, #80	; 0x50
    2036:	f8ad 0004 	strh.w	r0, [sp, #4]
    203a:	5388      	strh	r0, [r1, r6]
    203c:	4648      	mov	r0, r9
    203e:	f7ff fb19 	bl	1674 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2042:	b128      	cbz	r0, 2050 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x304>
    2044:	2080      	movs	r0, #128	; 0x80
    2046:	6a21      	ldr	r1, [r4, #32]
    2048:	f7ff fd14 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    204c:	746f      	strb	r7, [r5, #17]
    204e:	e02e      	b.n	20ae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x362>
    2050:	466a      	mov	r2, sp
    2052:	a901      	add	r1, sp, #4
    2054:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2056:	f00b fdd1 	bl	dbfc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    205a:	6220      	str	r0, [r4, #32]
    205c:	b110      	cbz	r0, 2064 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x318>
    205e:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    2062:	b111      	cbz	r1, 206a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31e>
    2064:	4842      	ldr	r0, [pc, #264]	; (2170 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x424>)
    2066:	6220      	str	r0, [r4, #32]
    2068:	e021      	b.n	20ae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x362>
    206a:	f89d 1000 	ldrb.w	r1, [sp]
    206e:	b931      	cbnz	r1, 207e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x332>
    2070:	f8a0 8000 	strh.w	r8, [r0]
    2074:	f880 8002 	strb.w	r8, [r0, #2]
    2078:	2101      	movs	r1, #1
    207a:	f00c f92e 	bl	e2da <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    207e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2082:	6a20      	ldr	r0, [r4, #32]
    2084:	f00c f8c3 	bl	e20e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    2088:	e011      	b.n	20ae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x362>
    208a:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    208e:	f8ad 0004 	strh.w	r0, [sp, #4]
    2092:	466a      	mov	r2, sp
    2094:	a901      	add	r1, sp, #4
    2096:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2098:	f00b fdb0 	bl	dbfc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    209c:	6220      	str	r0, [r4, #32]
    209e:	b930      	cbnz	r0, 20ae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x362>
    20a0:	f240 21e5 	movw	r1, #741	; 0x2e5
    20a4:	e01e      	b.n	20e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x398>
    20a6:	4648      	mov	r0, r9
    20a8:	f7ff fae4 	bl	1674 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    20ac:	b1c0      	cbz	r0, 20e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x394>
    20ae:	6a20      	ldr	r0, [r4, #32]
    20b0:	2308      	movs	r3, #8
    20b2:	7801      	ldrb	r1, [r0, #0]
    20b4:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    20b8:	7001      	strb	r1, [r0, #0]
    20ba:	7dea      	ldrb	r2, [r5, #23]
    20bc:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    20c0:	4311      	orrs	r1, r2
    20c2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    20c6:	7001      	strb	r1, [r0, #0]
    20c8:	7e2a      	ldrb	r2, [r5, #24]
    20ca:	2304      	movs	r3, #4
    20cc:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    20d0:	4311      	orrs	r1, r2
    20d2:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    20d6:	7001      	strb	r1, [r0, #0]
    20d8:	43c9      	mvns	r1, r1
    20da:	0789      	lsls	r1, r1, #30
    20dc:	d005      	beq.n	20ea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39e>
    20de:	e007      	b.n	20f0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a4>
    20e0:	f240 21ee 	movw	r1, #750	; 0x2ee
    20e4:	2027      	movs	r0, #39	; 0x27
    20e6:	f7fe fc99 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20ea:	78c0      	ldrb	r0, [r0, #3]
    20ec:	2802      	cmp	r0, #2
    20ee:	d00f      	beq.n	2110 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c4>
    20f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    20f2:	f00b faf7 	bl	d6e4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    20f6:	b108      	cbz	r0, 20fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b0>
    20f8:	2101      	movs	r1, #1
    20fa:	e00a      	b.n	2112 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c6>
    20fc:	6a20      	ldr	r0, [r4, #32]
    20fe:	7800      	ldrb	r0, [r0, #0]
    2100:	43c0      	mvns	r0, r0
    2102:	0780      	lsls	r0, r0, #30
    2104:	d004      	beq.n	2110 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c4>
    2106:	f7ff fa73 	bl	15f0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    210a:	f080 0101 	eor.w	r1, r0, #1
    210e:	e000      	b.n	2112 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c6>
    2110:	2100      	movs	r1, #0
    2112:	6a20      	ldr	r0, [r4, #32]
    2114:	7802      	ldrb	r2, [r0, #0]
    2116:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    211a:	7001      	strb	r1, [r0, #0]
    211c:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2120:	b181      	cbz	r1, 2144 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f8>
    2122:	7841      	ldrb	r1, [r0, #1]
    2124:	b171      	cbz	r1, 2144 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f8>
    2126:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2128:	f006 f8f4 	bl	8314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    212c:	4810      	ldr	r0, [pc, #64]	; (2170 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x424>)
    212e:	3828      	subs	r0, #40	; 0x28
    2130:	7607      	strb	r7, [r0, #24]
    2132:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2136:	e9c0 1204 	strd	r1, r2, [r0, #16]
    213a:	6a21      	ldr	r1, [r4, #32]
    213c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    213e:	f005 fd9d 	bl	7c7c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2142:	e003      	b.n	214c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x400>
    2144:	f006 f8e6 	bl	8314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2148:	f005 fdda 	bl	7d00 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    214c:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2150:	2101      	movs	r1, #1
    2152:	2000      	movs	r0, #0
    2154:	f006 f966 	bl	8424 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2158:	70e7      	strb	r7, [r4, #3]
    215a:	6a20      	ldr	r0, [r4, #32]
    215c:	8801      	ldrh	r1, [r0, #0]
    215e:	8221      	strh	r1, [r4, #16]
    2160:	7880      	ldrb	r0, [r0, #2]
    2162:	74a0      	strb	r0, [r4, #18]
    2164:	7027      	strb	r7, [r4, #0]
    2166:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    216a:	0000      	.short	0x0000
    216c:	200000a0 	.word	0x200000a0
    2170:	200009a8 	.word	0x200009a8
    2174:	00001ded 	.word	0x00001ded
    2178:	00001b3d 	.word	0x00001b3d
    217c:	00001ce5 	.word	0x00001ce5
    2180:	00001f61 	.word	0x00001f61

00002184 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2184:	4800      	ldr	r0, [pc, #0]	; (2188 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2186:	4770      	bx	lr
    2188:	2000146c 	.word	0x2000146c

0000218c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    218c:	4904      	ldr	r1, [pc, #16]	; (21a0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    218e:	784a      	ldrb	r2, [r1, #1]
    2190:	4282      	cmp	r2, r0
    2192:	d903      	bls.n	219c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2194:	4408      	add	r0, r1
    2196:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    219a:	4770      	bx	lr
    219c:	2000      	movs	r0, #0
    219e:	4770      	bx	lr
    21a0:	200012e2 	.word	0x200012e2

000021a4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    21a4:	4904      	ldr	r1, [pc, #16]	; (21b8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    21a6:	784a      	ldrb	r2, [r1, #1]
    21a8:	4282      	cmp	r2, r0
    21aa:	d903      	bls.n	21b4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    21ac:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    21b0:	3082      	adds	r0, #130	; 0x82
    21b2:	4770      	bx	lr
    21b4:	2000      	movs	r0, #0
    21b6:	4770      	bx	lr
    21b8:	200012e2 	.word	0x200012e2

000021bc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    21bc:	4a05      	ldr	r2, [pc, #20]	; (21d4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    21be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    21c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    21c6:	6802      	ldr	r2, [r0, #0]
    21c8:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    21cc:	8880      	ldrh	r0, [r0, #4]
    21ce:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    21d2:	4770      	bx	lr
    21d4:	200012e2 	.word	0x200012e2

000021d8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    21d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21dc:	4607      	mov	r7, r0
    21de:	2400      	movs	r4, #0
    21e0:	4d10      	ldr	r5, [pc, #64]	; (2224 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    21e2:	e019      	b.n	2218 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    21e4:	4620      	mov	r0, r4
    21e6:	f7ff ffdd 	bl	21a4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    21ea:	0003      	movs	r3, r0
    21ec:	d012      	beq.n	2214 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    21ee:	1928      	adds	r0, r5, r4
    21f0:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    21f4:	b970      	cbnz	r0, 2214 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    21f6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    21fa:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    21fe:	f506 7685 	add.w	r6, r6, #266	; 0x10a
    2202:	463a      	mov	r2, r7
    2204:	4631      	mov	r1, r6
    2206:	4618      	mov	r0, r3
    2208:	f00b fc7b 	bl	db02 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    220c:	4630      	mov	r0, r6
    220e:	4621      	mov	r1, r4
    2210:	f7ff ffd4 	bl	21bc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    2214:	1c64      	adds	r4, r4, #1
    2216:	b2e4      	uxtb	r4, r4
    2218:	7868      	ldrb	r0, [r5, #1]
    221a:	42a0      	cmp	r0, r4
    221c:	d8e2      	bhi.n	21e4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    221e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2222:	0000      	.short	0x0000
    2224:	200012e2 	.word	0x200012e2

00002228 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    2228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    222c:	460e      	mov	r6, r1
    222e:	4607      	mov	r7, r0
    2230:	4615      	mov	r5, r2
    2232:	2106      	movs	r1, #6
    2234:	4630      	mov	r0, r6
    2236:	f00b fed3 	bl	dfe0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    223a:	4c0d      	ldr	r4, [pc, #52]	; (2270 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    223c:	b160      	cbz	r0, 2258 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    223e:	2000      	movs	r0, #0
    2240:	e004      	b.n	224c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    2242:	1821      	adds	r1, r4, r0
    2244:	1c40      	adds	r0, r0, #1
    2246:	f881 513a 	strb.w	r5, [r1, #314]	; 0x13a
    224a:	b2c0      	uxtb	r0, r0
    224c:	7861      	ldrb	r1, [r4, #1]
    224e:	4281      	cmp	r1, r0
    2250:	d8f7      	bhi.n	2242 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    2252:	2001      	movs	r0, #1
    2254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2258:	4631      	mov	r1, r6
    225a:	4638      	mov	r0, r7
    225c:	f00b fcdd 	bl	dc1a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    2260:	2808      	cmp	r0, #8
    2262:	d003      	beq.n	226c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    2264:	4420      	add	r0, r4
    2266:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    226a:	e7f2      	b.n	2252 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    226c:	2000      	movs	r0, #0
    226e:	e7f1      	b.n	2254 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    2270:	200012e2 	.word	0x200012e2

00002274 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2274:	4904      	ldr	r1, [pc, #16]	; (2288 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2276:	784a      	ldrb	r2, [r1, #1]
    2278:	4282      	cmp	r2, r0
    227a:	d903      	bls.n	2284 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    227c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2280:	1c80      	adds	r0, r0, #2
    2282:	4770      	bx	lr
    2284:	2000      	movs	r0, #0
    2286:	4770      	bx	lr
    2288:	200012e2 	.word	0x200012e2

0000228c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    228c:	4908      	ldr	r1, [pc, #32]	; (22b0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    228e:	784a      	ldrb	r2, [r1, #1]
    2290:	4282      	cmp	r2, r0
    2292:	d903      	bls.n	229c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    2294:	180a      	adds	r2, r1, r0
    2296:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
    229a:	b10a      	cbz	r2, 22a0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    229c:	2000      	movs	r0, #0
    229e:	4770      	bx	lr
    22a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    22a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    22a8:	f500 7085 	add.w	r0, r0, #266	; 0x10a
    22ac:	4770      	bx	lr
    22ae:	0000      	.short	0x0000
    22b0:	200012e2 	.word	0x200012e2

000022b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    22b4:	b510      	push	{r4, lr}
    22b6:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    22ba:	2100      	movs	r1, #0
    22bc:	4805      	ldr	r0, [pc, #20]	; (22d4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    22be:	f00e fbfd 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    22c2:	4805      	ldr	r0, [pc, #20]	; (22d8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    22c4:	2100      	movs	r1, #0
    22c6:	7001      	strb	r1, [r0, #0]
    22c8:	7041      	strb	r1, [r0, #1]
    22ca:	f44f 7161 	mov.w	r1, #900	; 0x384
    22ce:	8041      	strh	r1, [r0, #2]
    22d0:	bd10      	pop	{r4, pc}
    22d2:	0000      	.short	0x0000
    22d4:	200012e2 	.word	0x200012e2
    22d8:	20000348 	.word	0x20000348

000022dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    22dc:	4901      	ldr	r1, [pc, #4]	; (22e4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    22de:	7008      	strb	r0, [r1, #0]
    22e0:	4770      	bx	lr
    22e2:	0000      	.short	0x0000
    22e4:	20000348 	.word	0x20000348

000022e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    22e8:	4801      	ldr	r0, [pc, #4]	; (22f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    22ea:	7800      	ldrb	r0, [r0, #0]
    22ec:	4770      	bx	lr
    22ee:	0000      	.short	0x0000
    22f0:	20000348 	.word	0x20000348

000022f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    22f4:	4b0b      	ldr	r3, [pc, #44]	; (2324 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    22f6:	b510      	push	{r4, lr}
    22f8:	785c      	ldrb	r4, [r3, #1]
    22fa:	4284      	cmp	r4, r0
    22fc:	d910      	bls.n	2320 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    22fe:	4418      	add	r0, r3
    2300:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2304:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2308:	4418      	add	r0, r3
    230a:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    230e:	700b      	strb	r3, [r1, #0]
    2310:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2314:	6011      	str	r1, [r2, #0]
    2316:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    231a:	8090      	strh	r0, [r2, #4]
    231c:	2001      	movs	r0, #1
    231e:	bd10      	pop	{r4, pc}
    2320:	2000      	movs	r0, #0
    2322:	bd10      	pop	{r4, pc}
    2324:	200012e2 	.word	0x200012e2

00002328 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    2328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    232c:	4698      	mov	r8, r3
    232e:	4691      	mov	r9, r2
    2330:	460f      	mov	r7, r1
    2332:	4606      	mov	r6, r0
    2334:	f000 f8cc 	bl	24d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    2338:	4604      	mov	r4, r0
    233a:	2808      	cmp	r0, #8
    233c:	d006      	beq.n	234c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    233e:	f000 f8b3 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2342:	2808      	cmp	r0, #8
    2344:	d002      	beq.n	234c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    2346:	2012      	movs	r0, #18
    2348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    234c:	4d1f      	ldr	r5, [pc, #124]	; (23cc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xa4>)
    234e:	7868      	ldrb	r0, [r5, #1]
    2350:	2808      	cmp	r0, #8
    2352:	d238      	bcs.n	23c6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x9e>
    2354:	2c08      	cmp	r4, #8
    2356:	d113      	bne.n	2380 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x58>
    2358:	782c      	ldrb	r4, [r5, #0]
    235a:	1c60      	adds	r0, r4, #1
    235c:	7028      	strb	r0, [r5, #0]
    235e:	2c08      	cmp	r4, #8
    2360:	d303      	bcc.n	236a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x42>
    2362:	2144      	movs	r1, #68	; 0x44
    2364:	2028      	movs	r0, #40	; 0x28
    2366:	f7fe fb59 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    236a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    236e:	4428      	add	r0, r5
    2370:	6839      	ldr	r1, [r7, #0]
    2372:	f8c0 1153 	str.w	r1, [r0, #339]	; 0x153
    2376:	88b9      	ldrh	r1, [r7, #4]
    2378:	f8a0 1157 	strh.w	r1, [r0, #343]	; 0x157
    237c:	f880 6152 	strb.w	r6, [r0, #338]	; 0x152
    2380:	786e      	ldrb	r6, [r5, #1]
    2382:	2210      	movs	r2, #16
    2384:	1c70      	adds	r0, r6, #1
    2386:	7068      	strb	r0, [r5, #1]
    2388:	eb05 1706 	add.w	r7, r5, r6, lsl #4
    238c:	1cb8      	adds	r0, r7, #2
    238e:	4649      	mov	r1, r9
    2390:	f00b fdee 	bl	df70 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    2394:	f107 0082 	add.w	r0, r7, #130	; 0x82
    2398:	2210      	movs	r2, #16
    239a:	4641      	mov	r1, r8
    239c:	f00b fde8 	bl	df70 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    23a0:	2110      	movs	r1, #16
    23a2:	4640      	mov	r0, r8
    23a4:	f00b fe1c 	bl	dfe0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    23a8:	4435      	add	r5, r6
    23aa:	2110      	movs	r1, #16
    23ac:	f885 0142 	strb.w	r0, [r5, #322]	; 0x142
    23b0:	4648      	mov	r0, r9
    23b2:	f205 152b 	addw	r5, r5, #299	; 0x12b
    23b6:	f00b fe13 	bl	dfe0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    23ba:	77e8      	strb	r0, [r5, #31]
    23bc:	f805 4c29 	strb.w	r4, [r5, #-41]
    23c0:	2000      	movs	r0, #0
    23c2:	73e8      	strb	r0, [r5, #15]
    23c4:	e7c0      	b.n	2348 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    23c6:	2007      	movs	r0, #7
    23c8:	e7be      	b.n	2348 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    23ca:	0000      	.short	0x0000
    23cc:	200012e2 	.word	0x200012e2

000023d0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    23d0:	4806      	ldr	r0, [pc, #24]	; (23ec <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    23d2:	b510      	push	{r4, lr}
    23d4:	7840      	ldrb	r0, [r0, #1]
    23d6:	1e40      	subs	r0, r0, #1
    23d8:	b244      	sxtb	r4, r0
    23da:	e004      	b.n	23e6 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    23dc:	b2e0      	uxtb	r0, r4
    23de:	f000 f8d9 	bl	2594 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    23e2:	1e64      	subs	r4, r4, #1
    23e4:	b264      	sxtb	r4, r4
    23e6:	2c00      	cmp	r4, #0
    23e8:	daf8      	bge.n	23dc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    23ea:	bd10      	pop	{r4, pc}
    23ec:	200012e2 	.word	0x200012e2

000023f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    23f0:	4801      	ldr	r0, [pc, #4]	; (23f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    23f2:	8840      	ldrh	r0, [r0, #2]
    23f4:	4770      	bx	lr
    23f6:	0000      	.short	0x0000
    23f8:	20000348 	.word	0x20000348

000023fc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    23fc:	b138      	cbz	r0, 240e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    23fe:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    2402:	4288      	cmp	r0, r1
    2404:	d803      	bhi.n	240e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    2406:	4903      	ldr	r1, [pc, #12]	; (2414 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    2408:	8048      	strh	r0, [r1, #2]
    240a:	2001      	movs	r0, #1
    240c:	4770      	bx	lr
    240e:	2000      	movs	r0, #0
    2410:	4770      	bx	lr
    2412:	0000      	.short	0x0000
    2414:	20000348 	.word	0x20000348

00002418 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    2418:	b570      	push	{r4, r5, r6, lr}
    241a:	2401      	movs	r4, #1
    241c:	4616      	mov	r6, r2
    241e:	4625      	mov	r5, r4
    2420:	f000 f856 	bl	24d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    2424:	2808      	cmp	r0, #8
    2426:	d019      	beq.n	245c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    2428:	f000 f83e 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    242c:	4603      	mov	r3, r0
    242e:	2808      	cmp	r0, #8
    2430:	d014      	beq.n	245c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    2432:	b106      	cbz	r6, 2436 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x1e>
    2434:	7033      	strb	r3, [r6, #0]
    2436:	4618      	mov	r0, r3
    2438:	f7ff ff1c 	bl	2274 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    243c:	b170      	cbz	r0, 245c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    243e:	480a      	ldr	r0, [pc, #40]	; (2468 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x50>)
    2440:	7841      	ldrb	r1, [r0, #1]
    2442:	4299      	cmp	r1, r3
    2444:	d903      	bls.n	244e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x36>
    2446:	18c1      	adds	r1, r0, r3
    2448:	f891 514a 	ldrb.w	r5, [r1, #330]	; 0x14a
    244c:	e000      	b.n	2450 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    244e:	2500      	movs	r5, #0
    2450:	4418      	add	r0, r3
    2452:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2456:	2801      	cmp	r0, #1
    2458:	d003      	beq.n	2462 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x4a>
    245a:	2400      	movs	r4, #0
    245c:	ea44 0005 	orr.w	r0, r4, r5
    2460:	bd70      	pop	{r4, r5, r6, pc}
    2462:	2401      	movs	r4, #1
    2464:	e7fa      	b.n	245c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    2466:	0000      	.short	0x0000
    2468:	200012e2 	.word	0x200012e2

0000246c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    246c:	4901      	ldr	r1, [pc, #4]	; (2474 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    246e:	7048      	strb	r0, [r1, #1]
    2470:	4770      	bx	lr
    2472:	0000      	.short	0x0000
    2474:	20000348 	.word	0x20000348
    2478:	4602      	mov	r2, r0
    247a:	4809      	ldr	r0, [pc, #36]	; (24a0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    247c:	b510      	push	{r4, lr}
    247e:	7800      	ldrb	r0, [r0, #0]
    2480:	460b      	mov	r3, r1
    2482:	b158      	cbz	r0, 249c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2484:	4807      	ldr	r0, [pc, #28]	; (24a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2486:	7841      	ldrb	r1, [r0, #1]
    2488:	b141      	cbz	r1, 249c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    248a:	b10b      	cbz	r3, 2490 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    248c:	1c80      	adds	r0, r0, #2
    248e:	e001      	b.n	2494 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2490:	4804      	ldr	r0, [pc, #16]	; (24a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2492:	3082      	adds	r0, #130	; 0x82
    2494:	f005 fafa 	bl	7a8c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2498:	2001      	movs	r0, #1
    249a:	bd10      	pop	{r4, pc}
    249c:	2000      	movs	r0, #0
    249e:	bd10      	pop	{r4, pc}
    24a0:	20000348 	.word	0x20000348
    24a4:	200012e2 	.word	0x200012e2
    24a8:	4908      	ldr	r1, [pc, #32]	; (24cc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    24aa:	b510      	push	{r4, lr}
    24ac:	4603      	mov	r3, r0
    24ae:	2000      	movs	r0, #0
    24b0:	784a      	ldrb	r2, [r1, #1]
    24b2:	e006      	b.n	24c2 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    24b4:	180c      	adds	r4, r1, r0
    24b6:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    24ba:	429c      	cmp	r4, r3
    24bc:	d004      	beq.n	24c8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    24be:	1c40      	adds	r0, r0, #1
    24c0:	b2c0      	uxtb	r0, r0
    24c2:	4282      	cmp	r2, r0
    24c4:	d8f6      	bhi.n	24b4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    24c6:	2008      	movs	r0, #8
    24c8:	bd10      	pop	{r4, pc}
    24ca:	0000      	.short	0x0000
    24cc:	200012e2 	.word	0x200012e2
    24d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24d2:	4c1a      	ldr	r4, [pc, #104]	; (253c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    24d4:	4603      	mov	r3, r0
    24d6:	2000      	movs	r0, #0
    24d8:	7825      	ldrb	r5, [r4, #0]
    24da:	e02b      	b.n	2534 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    24dc:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    24e0:	4422      	add	r2, r4
    24e2:	780f      	ldrb	r7, [r1, #0]
    24e4:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    24e8:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    24ec:	ea87 070c 	eor.w	r7, r7, ip
    24f0:	405e      	eors	r6, r3
    24f2:	443e      	add	r6, r7
    24f4:	784f      	ldrb	r7, [r1, #1]
    24f6:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    24fa:	ea87 070c 	eor.w	r7, r7, ip
    24fe:	443e      	add	r6, r7
    2500:	788f      	ldrb	r7, [r1, #2]
    2502:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2506:	ea87 070c 	eor.w	r7, r7, ip
    250a:	443e      	add	r6, r7
    250c:	78cf      	ldrb	r7, [r1, #3]
    250e:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2512:	ea87 070c 	eor.w	r7, r7, ip
    2516:	443e      	add	r6, r7
    2518:	790f      	ldrb	r7, [r1, #4]
    251a:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    251e:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    2522:	ea87 070c 	eor.w	r7, r7, ip
    2526:	443e      	add	r6, r7
    2528:	794f      	ldrb	r7, [r1, #5]
    252a:	4057      	eors	r7, r2
    252c:	42f7      	cmn	r7, r6
    252e:	d004      	beq.n	253a <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2530:	1c40      	adds	r0, r0, #1
    2532:	b2c0      	uxtb	r0, r0
    2534:	4285      	cmp	r5, r0
    2536:	d8d1      	bhi.n	24dc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    2538:	2008      	movs	r0, #8
    253a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    253c:	200012e2 	.word	0x200012e2
    2540:	b570      	push	{r4, r5, r6, lr}
    2542:	4605      	mov	r5, r0
    2544:	f7ff ffb0 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2548:	2808      	cmp	r0, #8
    254a:	d120      	bne.n	258e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    254c:	4c10      	ldr	r4, [pc, #64]	; (2590 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x124>)
    254e:	7820      	ldrb	r0, [r4, #0]
    2550:	1e40      	subs	r0, r0, #1
    2552:	b2c0      	uxtb	r0, r0
    2554:	7020      	strb	r0, [r4, #0]
    2556:	42a8      	cmp	r0, r5
    2558:	d019      	beq.n	258e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    255a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    255e:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    2562:	4420      	add	r0, r4
    2564:	4421      	add	r1, r4
    2566:	f500 72ab 	add.w	r2, r0, #342	; 0x156
    256a:	f8d0 0152 	ldr.w	r0, [r0, #338]	; 0x152
    256e:	f8c1 0152 	str.w	r0, [r1, #338]	; 0x152
    2572:	8810      	ldrh	r0, [r2, #0]
    2574:	f8a1 0156 	strh.w	r0, [r1, #342]	; 0x156
    2578:	7890      	ldrb	r0, [r2, #2]
    257a:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
    257e:	7820      	ldrb	r0, [r4, #0]
    2580:	f7ff ff92 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2584:	2808      	cmp	r0, #8
    2586:	d002      	beq.n	258e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    2588:	4420      	add	r0, r4
    258a:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    258e:	bd70      	pop	{r4, r5, r6, pc}
    2590:	200012e2 	.word	0x200012e2
    2594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2598:	4c1d      	ldr	r4, [pc, #116]	; (2610 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x1a4>)
    259a:	4606      	mov	r6, r0
    259c:	19a7      	adds	r7, r4, r6
    259e:	7860      	ldrb	r0, [r4, #1]
    25a0:	1e40      	subs	r0, r0, #1
    25a2:	b2c5      	uxtb	r5, r0
    25a4:	7065      	strb	r5, [r4, #1]
    25a6:	f897 a102 	ldrb.w	sl, [r7, #258]	; 0x102
    25aa:	42ae      	cmp	r6, r5
    25ac:	d02a      	beq.n	2604 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x198>
    25ae:	eb04 1905 	add.w	r9, r4, r5, lsl #4
    25b2:	eb04 1806 	add.w	r8, r4, r6, lsl #4
    25b6:	f109 0102 	add.w	r1, r9, #2
    25ba:	f108 0002 	add.w	r0, r8, #2
    25be:	2210      	movs	r2, #16
    25c0:	f00e fa02 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25c4:	f109 0182 	add.w	r1, r9, #130	; 0x82
    25c8:	f108 0082 	add.w	r0, r8, #130	; 0x82
    25cc:	2210      	movs	r2, #16
    25ce:	f00e f9fb 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25d2:	1960      	adds	r0, r4, r5
    25d4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    25d8:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    25dc:	f887 1102 	strb.w	r1, [r7, #258]	; 0x102
    25e0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    25e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    25e8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    25ec:	f8d2 310a 	ldr.w	r3, [r2, #266]	; 0x10a
    25f0:	f8c1 310a 	str.w	r3, [r1, #266]	; 0x10a
    25f4:	f8b2 210e 	ldrh.w	r2, [r2, #270]	; 0x10e
    25f8:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    25fc:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2600:	f887 013a 	strb.w	r0, [r7, #314]	; 0x13a
    2604:	4650      	mov	r0, sl
    2606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    260a:	f7ff bf99 	b.w	2540 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd4>
    260e:	0000      	.short	0x0000
    2610:	200012e2 	.word	0x200012e2

00002614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2618:	4604      	mov	r4, r0
    261a:	f100 0788 	add.w	r7, r0, #136	; 0x88
    261e:	b171      	cbz	r1, 263e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2620:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2624:	1e75      	subs	r5, r6, #1
    2626:	2901      	cmp	r1, #1
    2628:	d016      	beq.n	2658 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    262a:	2902      	cmp	r1, #2
    262c:	d025      	beq.n	267a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    262e:	2903      	cmp	r1, #3
    2630:	d110      	bne.n	2654 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2632:	4631      	mov	r1, r6
    2634:	4628      	mov	r0, r5
    2636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    263a:	f00b bd41 	b.w	e0c0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    263e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    2642:	2100      	movs	r1, #0
    2644:	f00e fa3a 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2648:	4638      	mov	r0, r7
    264a:	f000 f84d 	bl	26e8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    264e:	2020      	movs	r0, #32
    2650:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    2654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2658:	6921      	ldr	r1, [r4, #16]
    265a:	480d      	ldr	r0, [pc, #52]	; (2690 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    265c:	460a      	mov	r2, r1
    265e:	4408      	add	r0, r1
    2660:	fbb0 f0f1 	udiv	r0, r0, r1
    2664:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    2668:	f640 30b8 	movw	r0, #3000	; 0xbb8
    266c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    2670:	8b63      	ldrh	r3, [r4, #26]
    2672:	4638      	mov	r0, r7
    2674:	f000 f80e 	bl	2694 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    2678:	e7db      	b.n	2632 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    267a:	6901      	ldr	r1, [r0, #16]
    267c:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    2680:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    2684:	4638      	mov	r0, r7
    2686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    268a:	f000 b803 	b.w	2694 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    268e:	0000      	.short	0x0000
    2690:	01c9c37f 	.word	0x01c9c37f
    2694:	b510      	push	{r4, lr}
    2696:	2400      	movs	r4, #0
    2698:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    269c:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    26a0:	434c      	muls	r4, r1
    26a2:	fbb4 f4f2 	udiv	r4, r4, r2
    26a6:	f820 4912 	strh.w	r4, [r0], #-18
    26aa:	f240 2471 	movw	r4, #625	; 0x271
    26ae:	4363      	muls	r3, r4
    26b0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    26b4:	1e5b      	subs	r3, r3, #1
    26b6:	fbb3 f3f2 	udiv	r3, r3, r2
    26ba:	8203      	strh	r3, [r0, #16]
    26bc:	4b09      	ldr	r3, [pc, #36]	; (26e4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    26be:	fbb3 f3f2 	udiv	r3, r3, r2
    26c2:	1c5b      	adds	r3, r3, #1
    26c4:	82c3      	strh	r3, [r0, #22]
    26c6:	8903      	ldrh	r3, [r0, #8]
    26c8:	4363      	muls	r3, r4
    26ca:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    26ce:	1e5b      	subs	r3, r3, #1
    26d0:	fbb3 f3f2 	udiv	r3, r3, r2
    26d4:	6043      	str	r3, [r0, #4]
    26d6:	6803      	ldr	r3, [r0, #0]
    26d8:	434b      	muls	r3, r1
    26da:	fbb3 f1f2 	udiv	r1, r3, r2
    26de:	6001      	str	r1, [r0, #0]
    26e0:	bd10      	pop	{r4, pc}
    26e2:	0000      	.short	0x0000
    26e4:	02625a00 	.word	0x02625a00
    26e8:	2101      	movs	r1, #1
    26ea:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    26ee:	490b      	ldr	r1, [pc, #44]	; (271c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    26f0:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    26f4:	2107      	movs	r1, #7
    26f6:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    26fa:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    26fe:	780a      	ldrb	r2, [r1, #0]
    2700:	f022 0204 	bic.w	r2, r2, #4
    2704:	700a      	strb	r2, [r1, #0]
    2706:	21fe      	movs	r1, #254	; 0xfe
    2708:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    270c:	217f      	movs	r1, #127	; 0x7f
    270e:	7641      	strb	r1, [r0, #25]
    2710:	4903      	ldr	r1, [pc, #12]	; (2720 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2712:	6081      	str	r1, [r0, #8]
    2714:	2100      	movs	r1, #0
    2716:	e9c0 1100 	strd	r1, r1, [r0]
    271a:	4770      	bx	lr
    271c:	c404492f 	.word	0xc404492f
    2720:	fffce000 	.word	0xfffce000

00002724 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2724:	4902      	ldr	r1, [pc, #8]	; (2730 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2726:	f991 1000 	ldrsb.w	r1, [r1]
    272a:	f00b bc7a 	b.w	e022 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    272e:	0000      	.short	0x0000
    2730:	20000360 	.word	0x20000360

00002734 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2734:	b508      	push	{r3, lr}
    2736:	207f      	movs	r0, #127	; 0x7f
    2738:	f88d 0000 	strb.w	r0, [sp]
    273c:	4668      	mov	r0, sp
    273e:	f005 fe97 	bl	8470 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2742:	b140      	cbz	r0, 2756 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2744:	4805      	ldr	r0, [pc, #20]	; (275c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    2746:	7840      	ldrb	r0, [r0, #1]
    2748:	4240      	negs	r0, r0
    274a:	b241      	sxtb	r1, r0
    274c:	f99d 0000 	ldrsb.w	r0, [sp]
    2750:	f00b fc67 	bl	e022 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2754:	bd08      	pop	{r3, pc}
    2756:	f99d 0000 	ldrsb.w	r0, [sp]
    275a:	bd08      	pop	{r3, pc}
    275c:	20000360 	.word	0x20000360

00002760 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2760:	4a01      	ldr	r2, [pc, #4]	; (2768 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2762:	7010      	strb	r0, [r2, #0]
    2764:	7051      	strb	r1, [r2, #1]
    2766:	4770      	bx	lr
    2768:	20000360 	.word	0x20000360

0000276c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    276c:	4909      	ldr	r1, [pc, #36]	; (2794 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    276e:	b508      	push	{r3, lr}
    2770:	7809      	ldrb	r1, [r1, #0]
    2772:	f88d 1000 	strb.w	r1, [sp]
    2776:	9900      	ldr	r1, [sp, #0]
    2778:	9100      	str	r1, [sp, #0]
    277a:	f89d 1000 	ldrb.w	r1, [sp]
    277e:	b109      	cbz	r1, 2784 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    2780:	2000      	movs	r0, #0
    2782:	bd08      	pop	{r3, pc}
    2784:	4903      	ldr	r1, [pc, #12]	; (2794 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    2786:	f8d1 2001 	ldr.w	r2, [r1, #1]
    278a:	6002      	str	r2, [r0, #0]
    278c:	7949      	ldrb	r1, [r1, #5]
    278e:	7101      	strb	r1, [r0, #4]
    2790:	2001      	movs	r0, #1
    2792:	bd08      	pop	{r3, pc}
    2794:	20000362 	.word	0x20000362

00002798 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    2798:	4905      	ldr	r1, [pc, #20]	; (27b0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    279a:	22ff      	movs	r2, #255	; 0xff
    279c:	700a      	strb	r2, [r1, #0]
    279e:	460a      	mov	r2, r1
    27a0:	6803      	ldr	r3, [r0, #0]
    27a2:	f8c2 3001 	str.w	r3, [r2, #1]
    27a6:	7900      	ldrb	r0, [r0, #4]
    27a8:	7150      	strb	r0, [r2, #5]
    27aa:	2000      	movs	r0, #0
    27ac:	7008      	strb	r0, [r1, #0]
    27ae:	4770      	bx	lr
    27b0:	20000362 	.word	0x20000362
    27b4:	b570      	push	{r4, r5, r6, lr}
    27b6:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    27ba:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    27be:	2401      	movs	r4, #1
    27c0:	fb03 2101 	mla	r1, r3, r1, r2
    27c4:	2225      	movs	r2, #37	; 0x25
    27c6:	fbb1 f3f2 	udiv	r3, r1, r2
    27ca:	fb02 1113 	mls	r1, r2, r3, r1
    27ce:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    27d2:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    27d6:	f001 0307 	and.w	r3, r1, #7
    27da:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    27de:	fa04 f303 	lsl.w	r3, r4, r3
    27e2:	421a      	tst	r2, r3
    27e4:	d004      	beq.n	27f0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    27e6:	bf00      	nop
    27e8:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    27ec:	2000      	movs	r0, #0
    27ee:	bd70      	pop	{r4, r5, r6, pc}
    27f0:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    27f4:	fbb1 f3f2 	udiv	r3, r1, r2
    27f8:	fb02 1113 	mls	r1, r2, r3, r1
    27fc:	1c49      	adds	r1, r1, #1
    27fe:	b2c9      	uxtb	r1, r1
    2800:	2300      	movs	r3, #0
    2802:	18c5      	adds	r5, r0, r3
    2804:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2808:	428a      	cmp	r2, r1
    280a:	d312      	bcc.n	2832 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    280c:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2810:	2200      	movs	r2, #0
    2812:	bf00      	nop
    2814:	fa04 f602 	lsl.w	r6, r4, r2
    2818:	4235      	tst	r5, r6
    281a:	d001      	beq.n	2820 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    281c:	1e49      	subs	r1, r1, #1
    281e:	b2c9      	uxtb	r1, r1
    2820:	b121      	cbz	r1, 282c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    2822:	1c52      	adds	r2, r2, #1
    2824:	b2d2      	uxtb	r2, r2
    2826:	2a08      	cmp	r2, #8
    2828:	d3f4      	bcc.n	2814 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    282a:	e004      	b.n	2836 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    282c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2830:	e7da      	b.n	27e8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    2832:	1a89      	subs	r1, r1, r2
    2834:	b2c9      	uxtb	r1, r1
    2836:	1c5b      	adds	r3, r3, #1
    2838:	b2db      	uxtb	r3, r3
    283a:	2b05      	cmp	r3, #5
    283c:	d3e1      	bcc.n	2802 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    283e:	201f      	movs	r0, #31
    2840:	bd70      	pop	{r4, r5, r6, pc}
    2842:	0000      	movs	r0, r0
    2844:	b570      	push	{r4, r5, r6, lr}
    2846:	1c49      	adds	r1, r1, #1
    2848:	2300      	movs	r3, #0
    284a:	b2c9      	uxtb	r1, r1
    284c:	2401      	movs	r4, #1
    284e:	18c5      	adds	r5, r0, r3
    2850:	79aa      	ldrb	r2, [r5, #6]
    2852:	428a      	cmp	r2, r1
    2854:	d312      	bcc.n	287c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    2856:	f895 5001 	ldrb.w	r5, [r5, #1]
    285a:	2200      	movs	r2, #0
    285c:	fa04 f602 	lsl.w	r6, r4, r2
    2860:	4235      	tst	r5, r6
    2862:	d001      	beq.n	2868 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    2864:	1e49      	subs	r1, r1, #1
    2866:	b2c9      	uxtb	r1, r1
    2868:	b121      	cbz	r1, 2874 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    286a:	1c52      	adds	r2, r2, #1
    286c:	b2d2      	uxtb	r2, r2
    286e:	2a08      	cmp	r2, #8
    2870:	d3f4      	bcc.n	285c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    2872:	e005      	b.n	2880 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    2874:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2878:	b2c0      	uxtb	r0, r0
    287a:	bd70      	pop	{r4, r5, r6, pc}
    287c:	1a89      	subs	r1, r1, r2
    287e:	b2c9      	uxtb	r1, r1
    2880:	1c5b      	adds	r3, r3, #1
    2882:	b2db      	uxtb	r3, r3
    2884:	2b05      	cmp	r3, #5
    2886:	d3e2      	bcc.n	284e <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    2888:	219d      	movs	r1, #157	; 0x9d
    288a:	2046      	movs	r0, #70	; 0x46
    288c:	f7fe f8c6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002890 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2890:	7841      	ldrb	r1, [r0, #1]
    2892:	b141      	cbz	r1, 28a6 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2894:	78c0      	ldrb	r0, [r0, #3]
    2896:	282b      	cmp	r0, #43	; 0x2b
    2898:	d203      	bcs.n	28a2 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    289a:	4a04      	ldr	r2, [pc, #16]	; (28ac <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    289c:	5c10      	ldrb	r0, [r2, r0]
    289e:	4288      	cmp	r0, r1
    28a0:	d101      	bne.n	28a6 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    28a2:	2001      	movs	r0, #1
    28a4:	4770      	bx	lr
    28a6:	2000      	movs	r0, #0
    28a8:	4770      	bx	lr
    28aa:	0000      	.short	0x0000
    28ac:	00010c06 	.word	0x00010c06

000028b0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    28b0:	b510      	push	{r4, lr}
    28b2:	2201      	movs	r2, #1
    28b4:	70c1      	strb	r1, [r0, #3]
    28b6:	292b      	cmp	r1, #43	; 0x2b
    28b8:	d202      	bcs.n	28c0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    28ba:	4a06      	ldr	r2, [pc, #24]	; (28d4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    28bc:	5c52      	ldrb	r2, [r2, r1]
    28be:	e006      	b.n	28ce <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    28c0:	29ff      	cmp	r1, #255	; 0xff
    28c2:	d004      	beq.n	28ce <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    28c4:	f240 4174 	movw	r1, #1140	; 0x474
    28c8:	202a      	movs	r0, #42	; 0x2a
    28ca:	f7fe f8a7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28ce:	7042      	strb	r2, [r0, #1]
    28d0:	bd10      	pop	{r4, pc}
    28d2:	0000      	.short	0x0000
    28d4:	00010c06 	.word	0x00010c06

000028d8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    28d8:	4904      	ldr	r1, [pc, #16]	; (28ec <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    28da:	7c89      	ldrb	r1, [r1, #18]
    28dc:	0749      	lsls	r1, r1, #29
    28de:	d400      	bmi.n	28e2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    28e0:	b108      	cbz	r0, 28e6 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    28e2:	2000      	movs	r0, #0
    28e4:	4770      	bx	lr
    28e6:	2001      	movs	r0, #1
    28e8:	4770      	bx	lr
    28ea:	0000      	.short	0x0000
    28ec:	200011fc 	.word	0x200011fc

000028f0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    28f0:	4803      	ldr	r0, [pc, #12]	; (2900 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    28f2:	7c80      	ldrb	r0, [r0, #18]
    28f4:	0780      	lsls	r0, r0, #30
    28f6:	d401      	bmi.n	28fc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    28f8:	2001      	movs	r0, #1
    28fa:	4770      	bx	lr
    28fc:	2000      	movs	r0, #0
    28fe:	4770      	bx	lr
    2900:	200011fc 	.word	0x200011fc

00002904 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    2904:	4803      	ldr	r0, [pc, #12]	; (2914 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    2906:	7c80      	ldrb	r0, [r0, #18]
    2908:	07c0      	lsls	r0, r0, #31
    290a:	d001      	beq.n	2910 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    290c:	2000      	movs	r0, #0
    290e:	4770      	bx	lr
    2910:	2001      	movs	r0, #1
    2912:	4770      	bx	lr
    2914:	200011fc 	.word	0x200011fc
    2918:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    291c:	4688      	mov	r8, r1
    291e:	4699      	mov	r9, r3
    2920:	4615      	mov	r5, r2
    2922:	4604      	mov	r4, r0
    2924:	a901      	add	r1, sp, #4
    2926:	f00b f9cd 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    292a:	bbb0      	cbnz	r0, 299a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    292c:	9e02      	ldr	r6, [sp, #8]
    292e:	2001      	movs	r0, #1
    2930:	3688      	adds	r6, #136	; 0x88
    2932:	b17d      	cbz	r5, 2954 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2934:	4620      	mov	r0, r4
    2936:	f7fe fceb 	bl	1310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    293a:	0004      	movs	r4, r0
    293c:	d00d      	beq.n	295a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    293e:	4629      	mov	r1, r5
    2940:	f00a fea2 	bl	d688 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2944:	b118      	cbz	r0, 294e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2946:	4918      	ldr	r1, [pc, #96]	; (29a8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    2948:	8849      	ldrh	r1, [r1, #2]
    294a:	42a9      	cmp	r1, r5
    294c:	d207      	bcs.n	295e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    294e:	2000      	movs	r0, #0
    2950:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2954:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2958:	e01f      	b.n	299a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    295a:	2167      	movs	r1, #103	; 0x67
    295c:	e020      	b.n	29a0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    295e:	4601      	mov	r1, r0
    2960:	466a      	mov	r2, sp
    2962:	4620      	mov	r0, r4
    2964:	f00a fe89 	bl	d67a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2968:	9800      	ldr	r0, [sp, #0]
    296a:	2700      	movs	r7, #0
    296c:	8007      	strh	r7, [r0, #0]
    296e:	7087      	strb	r7, [r0, #2]
    2970:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2974:	b109      	cbz	r1, 297a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2976:	f04f 0802 	mov.w	r8, #2
    297a:	4641      	mov	r1, r8
    297c:	f00b fcad 	bl	e2da <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2980:	9800      	ldr	r0, [sp, #0]
    2982:	462a      	mov	r2, r5
    2984:	4649      	mov	r1, r9
    2986:	1cc0      	adds	r0, r0, #3
    2988:	f00e f81e 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    298c:	4620      	mov	r0, r4
    298e:	4629      	mov	r1, r5
    2990:	f00a fe31 	bl	d5f6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2994:	b118      	cbz	r0, 299e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    2996:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    299a:	2001      	movs	r0, #1
    299c:	e7d8      	b.n	2950 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    299e:	217c      	movs	r1, #124	; 0x7c
    29a0:	202b      	movs	r0, #43	; 0x2b
    29a2:	f7fe f83b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29a6:	0000      	.short	0x0000
    29a8:	200011fc 	.word	0x200011fc

000029ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    29ac:	4809      	ldr	r0, [pc, #36]	; (29d4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    29ae:	b082      	sub	sp, #8
    29b0:	7a00      	ldrb	r0, [r0, #8]
    29b2:	f88d 0000 	strb.w	r0, [sp]
    29b6:	9800      	ldr	r0, [sp, #0]
    29b8:	9000      	str	r0, [sp, #0]
    29ba:	f89d 0000 	ldrb.w	r0, [sp]
    29be:	2800      	cmp	r0, #0
    29c0:	d105      	bne.n	29ce <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    29c2:	2202      	movs	r2, #2
    29c4:	4904      	ldr	r1, [pc, #16]	; (29d8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    29c6:	4803      	ldr	r0, [pc, #12]	; (29d4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    29c8:	b002      	add	sp, #8
    29ca:	f00b bcc2 	b.w	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    29ce:	b002      	add	sp, #8
    29d0:	4770      	bx	lr
    29d2:	0000      	.short	0x0000
    29d4:	20001214 	.word	0x20001214
    29d8:	0000e399 	.word	0x0000e399

000029dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    29dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29e0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2b88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1ac>
    29e4:	4f69      	ldr	r7, [pc, #420]	; (2b8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    29e6:	4683      	mov	fp, r0
    29e8:	f04f 0a01 	mov.w	sl, #1
    29ec:	2600      	movs	r6, #0
    29ee:	6878      	ldr	r0, [r7, #4]
    29f0:	4635      	mov	r5, r6
    29f2:	7a00      	ldrb	r0, [r0, #8]
    29f4:	f88d 0000 	strb.w	r0, [sp]
    29f8:	9800      	ldr	r0, [sp, #0]
    29fa:	9000      	str	r0, [sp, #0]
    29fc:	f89d 1000 	ldrb.w	r1, [sp]
    2a00:	2910      	cmp	r1, #16
    2a02:	d106      	bne.n	2a12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2a04:	f899 1013 	ldrb.w	r1, [r9, #19]
    2a08:	b119      	cbz	r1, 2a12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2a0a:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    2a0e:	2800      	cmp	r0, #0
    2a10:	d077      	beq.n	2b02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2a12:	f88d 6000 	strb.w	r6, [sp]
    2a16:	4668      	mov	r0, sp
    2a18:	f000 f91c 	bl	2c54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb4>
    2a1c:	f89d 1000 	ldrb.w	r1, [sp]
    2a20:	2900      	cmp	r1, #0
    2a22:	d1f8      	bne.n	2a16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    2a24:	2800      	cmp	r0, #0
    2a26:	d06c      	beq.n	2b02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2a28:	4604      	mov	r4, r0
    2a2a:	7a00      	ldrb	r0, [r0, #8]
    2a2c:	f88d 0000 	strb.w	r0, [sp]
    2a30:	9800      	ldr	r0, [sp, #0]
    2a32:	9000      	str	r0, [sp, #0]
    2a34:	f89d 8000 	ldrb.w	r8, [sp]
    2a38:	f104 0008 	add.w	r0, r4, #8
    2a3c:	2105      	movs	r1, #5
    2a3e:	9000      	str	r0, [sp, #0]
    2a40:	7001      	strb	r1, [r0, #0]
    2a42:	4640      	mov	r0, r8
    2a44:	f1b8 0f06 	cmp.w	r8, #6
    2a48:	d030      	beq.n	2aac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd0>
    2a4a:	dc07      	bgt.n	2a5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    2a4c:	2802      	cmp	r0, #2
    2a4e:	d00f      	beq.n	2a70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    2a50:	2803      	cmp	r0, #3
    2a52:	d019      	beq.n	2a88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    2a54:	f1b8 0f04 	cmp.w	r8, #4
    2a58:	d107      	bne.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8e>
    2a5a:	e01f      	b.n	2a9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    2a5c:	2808      	cmp	r0, #8
    2a5e:	d035      	beq.n	2acc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    2a60:	280f      	cmp	r0, #15
    2a62:	d052      	beq.n	2b0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    2a64:	f1b8 0f10 	cmp.w	r8, #16
    2a68:	d059      	beq.n	2b1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    2a6a:	f240 214a 	movw	r1, #586	; 0x24a
    2a6e:	e064      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2a70:	6862      	ldr	r2, [r4, #4]
    2a72:	b132      	cbz	r2, 2a82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    2a74:	4659      	mov	r1, fp
    2a76:	4620      	mov	r0, r4
    2a78:	4790      	blx	r2
    2a7a:	2004      	movs	r0, #4
    2a7c:	f360 0507 	bfi	r5, r0, #0, #8
    2a80:	e05e      	b.n	2b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2a82:	f240 11c3 	movw	r1, #451	; 0x1c3
    2a86:	e058      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2a88:	6862      	ldr	r2, [r4, #4]
    2a8a:	b122      	cbz	r2, 2a96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xba>
    2a8c:	4659      	mov	r1, fp
    2a8e:	4620      	mov	r0, r4
    2a90:	4790      	blx	r2
    2a92:	4605      	mov	r5, r0
    2a94:	e054      	b.n	2b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2a96:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    2a9a:	e04e      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2a9c:	6861      	ldr	r1, [r4, #4]
    2a9e:	b111      	cbz	r1, 2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2aa0:	4620      	mov	r0, r4
    2aa2:	4788      	blx	r1
    2aa4:	e04c      	b.n	2b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2aa6:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    2aaa:	e046      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2aac:	6862      	ldr	r2, [r4, #4]
    2aae:	b132      	cbz	r2, 2abe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    2ab0:	4659      	mov	r1, fp
    2ab2:	4620      	mov	r0, r4
    2ab4:	4790      	blx	r2
    2ab6:	f002 f869 	bl	4b8c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    2aba:	b118      	cbz	r0, 2ac4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    2abc:	e01f      	b.n	2afe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2abe:	f240 2111 	movw	r1, #529	; 0x211
    2ac2:	e03a      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2ac4:	f000 febc 	bl	3840 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    2ac8:	b3a0      	cbz	r0, 2b34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    2aca:	e018      	b.n	2afe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2acc:	4601      	mov	r1, r0
    2ace:	6860      	ldr	r0, [r4, #4]
    2ad0:	465d      	mov	r5, fp
    2ad2:	b118      	cbz	r0, 2adc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
    2ad4:	8804      	ldrh	r4, [r0, #0]
    2ad6:	2908      	cmp	r1, #8
    2ad8:	d111      	bne.n	2afe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2ada:	e001      	b.n	2ae0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    2adc:	21e5      	movs	r1, #229	; 0xe5
    2ade:	e02c      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2ae0:	4620      	mov	r0, r4
    2ae2:	f7fe fc15 	bl	1310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2ae6:	b170      	cbz	r0, 2b06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2ae8:	706e      	strb	r6, [r5, #1]
    2aea:	220f      	movs	r2, #15
    2aec:	702a      	strb	r2, [r5, #0]
    2aee:	80ec      	strh	r4, [r5, #6]
    2af0:	f8a5 a008 	strh.w	sl, [r5, #8]
    2af4:	4631      	mov	r1, r6
    2af6:	f885 a004 	strb.w	sl, [r5, #4]
    2afa:	f00a fe5c 	bl	d7b6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2afe:	2004      	movs	r0, #4
    2b00:	613e      	str	r6, [r7, #16]
    2b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b06:	21c5      	movs	r1, #197	; 0xc5
    2b08:	e017      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2b0a:	f88b 6001 	strb.w	r6, [fp, #1]
    2b0e:	211a      	movs	r1, #26
    2b10:	f88b 1000 	strb.w	r1, [fp]
    2b14:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2b18:	f8cb 1004 	str.w	r1, [fp, #4]
    2b1c:	e7ad      	b.n	2a7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    2b1e:	481c      	ldr	r0, [pc, #112]	; (2b90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>)
    2b20:	6802      	ldr	r2, [r0, #0]
    2b22:	b122      	cbz	r2, 2b2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    2b24:	6860      	ldr	r0, [r4, #4]
    2b26:	b130      	cbz	r0, 2b36 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15a>
    2b28:	8800      	ldrh	r0, [r0, #0]
    2b2a:	4659      	mov	r1, fp
    2b2c:	4790      	blx	r2
    2b2e:	2002      	movs	r0, #2
    2b30:	613e      	str	r6, [r7, #16]
    2b32:	e7e6      	b.n	2b02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2b34:	e004      	b.n	2b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2b36:	f44f 7110 	mov.w	r1, #576	; 0x240
    2b3a:	2010      	movs	r0, #16
    2b3c:	f7fd ff6e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b40:	f3c5 2007 	ubfx	r0, r5, #8, #8
    2b44:	2801      	cmp	r0, #1
    2b46:	d010      	beq.n	2b6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    2b48:	f3ef 8010 	mrs	r0, PRIMASK
    2b4c:	b672      	cpsid	i
    2b4e:	7a21      	ldrb	r1, [r4, #8]
    2b50:	f88d 1000 	strb.w	r1, [sp]
    2b54:	9900      	ldr	r1, [sp, #0]
    2b56:	9100      	str	r1, [sp, #0]
    2b58:	f89d 1000 	ldrb.w	r1, [sp]
    2b5c:	2905      	cmp	r1, #5
    2b5e:	d008      	beq.n	2b72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    2b60:	b139      	cbz	r1, 2b72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    2b62:	f366 0507 	bfi	r5, r6, #0, #8
    2b66:	b138      	cbz	r0, 2b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    2b68:	e007      	b.n	2b7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2b6a:	9800      	ldr	r0, [sp, #0]
    2b6c:	4641      	mov	r1, r8
    2b6e:	7001      	strb	r1, [r0, #0]
    2b70:	e003      	b.n	2b7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2b72:	7226      	strb	r6, [r4, #8]
    2b74:	613e      	str	r6, [r7, #16]
    2b76:	e7f6      	b.n	2b66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18a>
    2b78:	b662      	cpsie	i
    2b7a:	f015 0fff 	tst.w	r5, #255	; 0xff
    2b7e:	f43f af36 	beq.w	29ee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    2b82:	b2e8      	uxtb	r0, r5
    2b84:	e7bd      	b.n	2b02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2b86:	0000      	.short	0x0000
    2b88:	200011fc 	.word	0x200011fc
    2b8c:	20001228 	.word	0x20001228
    2b90:	200000c4 	.word	0x200000c4

00002b94 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2b94:	4901      	ldr	r1, [pc, #4]	; (2b9c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2b96:	7008      	strb	r0, [r1, #0]
    2b98:	f000 b8be 	b.w	2d18 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x178>
    2b9c:	20000368 	.word	0x20000368

00002ba0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2ba0:	4902      	ldr	r1, [pc, #8]	; (2bac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2ba2:	4801      	ldr	r0, [pc, #4]	; (2ba8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2ba4:	6008      	str	r0, [r1, #0]
    2ba6:	4770      	bx	lr
    2ba8:	00002bb1 	.word	0x00002bb1
    2bac:	200000c4 	.word	0x200000c4
    2bb0:	b538      	push	{r3, r4, r5, lr}
    2bb2:	000d      	movs	r5, r1
    2bb4:	d014      	beq.n	2be0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x40>
    2bb6:	80a8      	strh	r0, [r5, #4]
    2bb8:	2100      	movs	r1, #0
    2bba:	7269      	strb	r1, [r5, #9]
    2bbc:	f7fe fb92 	bl	12e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2bc0:	4604      	mov	r4, r0
    2bc2:	f00a fd3c 	bl	d63e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2bc6:	b170      	cbz	r0, 2be6 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x46>
    2bc8:	4601      	mov	r1, r0
    2bca:	466a      	mov	r2, sp
    2bcc:	4620      	mov	r0, r4
    2bce:	f00a fd54 	bl	d67a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2bd2:	80e8      	strh	r0, [r5, #6]
    2bd4:	b150      	cbz	r0, 2bec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4c>
    2bd6:	28fb      	cmp	r0, #251	; 0xfb
    2bd8:	d90b      	bls.n	2bf2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x52>
    2bda:	f240 1123 	movw	r1, #291	; 0x123
    2bde:	e033      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2be0:	f240 1113 	movw	r1, #275	; 0x113
    2be4:	e030      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2be6:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2bea:	e02d      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2bec:	f240 1121 	movw	r1, #289	; 0x121
    2bf0:	e02a      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2bf2:	9800      	ldr	r0, [sp, #0]
    2bf4:	f00b fb2f 	bl	e256 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2bf8:	2801      	cmp	r0, #1
    2bfa:	d004      	beq.n	2c06 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x66>
    2bfc:	2802      	cmp	r0, #2
    2bfe:	d002      	beq.n	2c06 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x66>
    2c00:	f240 1133 	movw	r1, #307	; 0x133
    2c04:	e020      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2c06:	7228      	strb	r0, [r5, #8]
    2c08:	6828      	ldr	r0, [r5, #0]
    2c0a:	b1a8      	cbz	r0, 2c38 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x98>
    2c0c:	9900      	ldr	r1, [sp, #0]
    2c0e:	88ea      	ldrh	r2, [r5, #6]
    2c10:	1cc9      	adds	r1, r1, #3
    2c12:	f00d fed9 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c16:	4620      	mov	r0, r4
    2c18:	f00a fcd9 	bl	d5ce <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2c1c:	b178      	cbz	r0, 2c3e <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x9e>
    2c1e:	4620      	mov	r0, r4
    2c20:	2100      	movs	r1, #0
    2c22:	f00a fdc8 	bl	d7b6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2c26:	b168      	cbz	r0, 2c44 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa4>
    2c28:	4809      	ldr	r0, [pc, #36]	; (2c50 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb0>)
    2c2a:	7cc1      	ldrb	r1, [r0, #19]
    2c2c:	2900      	cmp	r1, #0
    2c2e:	d002      	beq.n	2c36 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x96>
    2c30:	8a81      	ldrh	r1, [r0, #20]
    2c32:	1e49      	subs	r1, r1, #1
    2c34:	8281      	strh	r1, [r0, #20]
    2c36:	bd38      	pop	{r3, r4, r5, pc}
    2c38:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2c3c:	e004      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2c3e:	f240 113f 	movw	r1, #319	; 0x13f
    2c42:	e001      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2c44:	f44f 71a2 	mov.w	r1, #324	; 0x144
    2c48:	2010      	movs	r0, #16
    2c4a:	f7fd fee7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c4e:	0000      	.short	0x0000
    2c50:	200011fc 	.word	0x200011fc
    2c54:	b538      	push	{r3, r4, r5, lr}
    2c56:	4603      	mov	r3, r0
    2c58:	4917      	ldr	r1, [pc, #92]	; (2cb8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x118>)
    2c5a:	2000      	movs	r0, #0
    2c5c:	7018      	strb	r0, [r3, #0]
    2c5e:	6908      	ldr	r0, [r1, #16]
    2c60:	2401      	movs	r4, #1
    2c62:	b140      	cbz	r0, 2c76 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xd6>
    2c64:	7a02      	ldrb	r2, [r0, #8]
    2c66:	f88d 2000 	strb.w	r2, [sp]
    2c6a:	9a00      	ldr	r2, [sp, #0]
    2c6c:	9200      	str	r2, [sp, #0]
    2c6e:	f89d 5000 	ldrb.w	r5, [sp]
    2c72:	2d00      	cmp	r5, #0
    2c74:	d111      	bne.n	2c9a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfa>
    2c76:	6848      	ldr	r0, [r1, #4]
    2c78:	7a02      	ldrb	r2, [r0, #8]
    2c7a:	f88d 2000 	strb.w	r2, [sp]
    2c7e:	9a00      	ldr	r2, [sp, #0]
    2c80:	9200      	str	r2, [sp, #0]
    2c82:	f89d 5000 	ldrb.w	r5, [sp]
    2c86:	2d01      	cmp	r5, #1
    2c88:	d006      	beq.n	2c98 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xf8>
    2c8a:	f3ef 8210 	mrs	r2, PRIMASK
    2c8e:	b672      	cpsid	i
    2c90:	6805      	ldr	r5, [r0, #0]
    2c92:	604d      	str	r5, [r1, #4]
    2c94:	b112      	cbz	r2, 2c9c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfc>
    2c96:	e002      	b.n	2c9e <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfe>
    2c98:	2000      	movs	r0, #0
    2c9a:	bd38      	pop	{r3, r4, r5, pc}
    2c9c:	b662      	cpsie	i
    2c9e:	7a02      	ldrb	r2, [r0, #8]
    2ca0:	f88d 2000 	strb.w	r2, [sp]
    2ca4:	9a00      	ldr	r2, [sp, #0]
    2ca6:	9200      	str	r2, [sp, #0]
    2ca8:	f89d 5000 	ldrb.w	r5, [sp]
    2cac:	b10d      	cbz	r5, 2cb2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x112>
    2cae:	6108      	str	r0, [r1, #16]
    2cb0:	bd38      	pop	{r3, r4, r5, pc}
    2cb2:	701c      	strb	r4, [r3, #0]
    2cb4:	bd38      	pop	{r3, r4, r5, pc}
    2cb6:	0000      	.short	0x0000
    2cb8:	20001228 	.word	0x20001228
    2cbc:	b538      	push	{r3, r4, r5, lr}
    2cbe:	b1d0      	cbz	r0, 2cf6 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x156>
    2cc0:	6041      	str	r1, [r0, #4]
    2cc2:	f100 0108 	add.w	r1, r0, #8
    2cc6:	700a      	strb	r2, [r1, #0]
    2cc8:	f3ef 8310 	mrs	r3, PRIMASK
    2ccc:	b672      	cpsid	i
    2cce:	4c10      	ldr	r4, [pc, #64]	; (2d10 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x170>)
    2cd0:	6004      	str	r4, [r0, #0]
    2cd2:	1f21      	subs	r1, r4, #4
    2cd4:	684a      	ldr	r2, [r1, #4]
    2cd6:	b14a      	cbz	r2, 2cec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14c>
    2cd8:	7a12      	ldrb	r2, [r2, #8]
    2cda:	f88d 2000 	strb.w	r2, [sp]
    2cde:	9a00      	ldr	r2, [sp, #0]
    2ce0:	9200      	str	r2, [sp, #0]
    2ce2:	f89d 5000 	ldrb.w	r5, [sp]
    2ce6:	2d01      	cmp	r5, #1
    2ce8:	d100      	bne.n	2cec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14c>
    2cea:	600c      	str	r4, [r1, #0]
    2cec:	680a      	ldr	r2, [r1, #0]
    2cee:	6010      	str	r0, [r2, #0]
    2cf0:	6008      	str	r0, [r1, #0]
    2cf2:	b12b      	cbz	r3, 2d00 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x160>
    2cf4:	e005      	b.n	2d02 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x162>
    2cf6:	f240 2175 	movw	r1, #629	; 0x275
    2cfa:	2010      	movs	r0, #16
    2cfc:	f7fd fe8e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d00:	b662      	cpsie	i
    2d02:	4804      	ldr	r0, [pc, #16]	; (2d14 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x174>)
    2d04:	7800      	ldrb	r0, [r0, #0]
    2d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2d0a:	f009 bd03 	b.w	c714 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2d0e:	0000      	.short	0x0000
    2d10:	2000122c 	.word	0x2000122c
    2d14:	20000368 	.word	0x20000368
    2d18:	b510      	push	{r4, lr}
    2d1a:	2214      	movs	r2, #20
    2d1c:	2100      	movs	r1, #0
    2d1e:	4808      	ldr	r0, [pc, #32]	; (2d40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1a0>)
    2d20:	f00d fecc 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2d24:	4806      	ldr	r0, [pc, #24]	; (2d40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1a0>)
    2d26:	2212      	movs	r2, #18
    2d28:	2100      	movs	r1, #0
    2d2a:	3814      	subs	r0, #20
    2d2c:	f00d fec6 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2d30:	4803      	ldr	r0, [pc, #12]	; (2d40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1a0>)
    2d32:	2101      	movs	r1, #1
    2d34:	7301      	strb	r1, [r0, #12]
    2d36:	1d01      	adds	r1, r0, #4
    2d38:	6041      	str	r1, [r0, #4]
    2d3a:	6001      	str	r1, [r0, #0]
    2d3c:	bd10      	pop	{r4, pc}
    2d3e:	0000      	.short	0x0000
    2d40:	20001228 	.word	0x20001228

00002d44 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2d44:	b4f0      	push	{r4, r5, r6, r7}
    2d46:	8150      	strh	r0, [r2, #10]
    2d48:	890c      	ldrh	r4, [r1, #8]
    2d4a:	8194      	strh	r4, [r2, #12]
    2d4c:	898b      	ldrh	r3, [r1, #12]
    2d4e:	81d3      	strh	r3, [r2, #14]
    2d50:	8948      	ldrh	r0, [r1, #10]
    2d52:	8210      	strh	r0, [r2, #16]
    2d54:	89cd      	ldrh	r5, [r1, #14]
    2d56:	8255      	strh	r5, [r2, #18]
    2d58:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2d5a:	42ae      	cmp	r6, r5
    2d5c:	d108      	bne.n	2d70 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2d5e:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2d60:	4285      	cmp	r5, r0
    2d62:	d105      	bne.n	2d70 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2d64:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2d66:	429d      	cmp	r5, r3
    2d68:	d102      	bne.n	2d70 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2d6a:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    2d6c:	42a3      	cmp	r3, r4
    2d6e:	d001      	beq.n	2d74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    2d70:	2301      	movs	r3, #1
    2d72:	e000      	b.n	2d76 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2d74:	2300      	movs	r3, #0
    2d76:	7513      	strb	r3, [r2, #20]
    2d78:	8548      	strh	r0, [r1, #42]	; 0x2a
    2d7a:	8a50      	ldrh	r0, [r2, #18]
    2d7c:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2d7e:	8990      	ldrh	r0, [r2, #12]
    2d80:	8588      	strh	r0, [r1, #44]	; 0x2c
    2d82:	89d0      	ldrh	r0, [r2, #14]
    2d84:	8608      	strh	r0, [r1, #48]	; 0x30
    2d86:	bcf0      	pop	{r4, r5, r6, r7}
    2d88:	4901      	ldr	r1, [pc, #4]	; (2d90 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    2d8a:	4610      	mov	r0, r2
    2d8c:	f00b badb 	b.w	e346 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    2d90:	00002db5 	.word	0x00002db5

00002d94 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2d94:	8150      	strh	r0, [r2, #10]
    2d96:	8a88      	ldrh	r0, [r1, #20]
    2d98:	8190      	strh	r0, [r2, #12]
    2d9a:	8ac8      	ldrh	r0, [r1, #22]
    2d9c:	81d0      	strh	r0, [r2, #14]
    2d9e:	8b08      	ldrh	r0, [r1, #24]
    2da0:	8210      	strh	r0, [r2, #16]
    2da2:	8b48      	ldrh	r0, [r1, #26]
    2da4:	8250      	strh	r0, [r2, #18]
    2da6:	4902      	ldr	r1, [pc, #8]	; (2db0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    2da8:	4610      	mov	r0, r2
    2daa:	f00b bac9 	b.w	e340 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    2dae:	0000      	.short	0x0000
    2db0:	00002df5 	.word	0x00002df5
    2db4:	b538      	push	{r3, r4, r5, lr}
    2db6:	f1a0 0418 	sub.w	r4, r0, #24
    2dba:	7d00      	ldrb	r0, [r0, #20]
    2dbc:	460d      	mov	r5, r1
    2dbe:	f000 0001 	and.w	r0, r0, #1
    2dc2:	f7ff fd89 	bl	28d8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2dc6:	2100      	movs	r1, #0
    2dc8:	b108      	cbz	r0, 2dce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    2dca:	9100      	str	r1, [sp, #0]
    2dcc:	e00c      	b.n	2de8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    2dce:	7069      	strb	r1, [r5, #1]
    2dd0:	2016      	movs	r0, #22
    2dd2:	7028      	strb	r0, [r5, #0]
    2dd4:	f854 0f22 	ldr.w	r0, [r4, #34]!
    2dd8:	6068      	str	r0, [r5, #4]
    2dda:	6860      	ldr	r0, [r4, #4]
    2ddc:	60a8      	str	r0, [r5, #8]
    2dde:	68a0      	ldr	r0, [r4, #8]
    2de0:	60e8      	str	r0, [r5, #12]
    2de2:	4803      	ldr	r0, [pc, #12]	; (2df0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    2de4:	6840      	ldr	r0, [r0, #4]
    2de6:	9000      	str	r0, [sp, #0]
    2de8:	f8bd 0000 	ldrh.w	r0, [sp]
    2dec:	bd38      	pop	{r3, r4, r5, pc}
    2dee:	0000      	.short	0x0000
    2df0:	00002e7c 	.word	0x00002e7c
    2df4:	b570      	push	{r4, r5, r6, lr}
    2df6:	b086      	sub	sp, #24
    2df8:	460e      	mov	r6, r1
    2dfa:	4604      	mov	r4, r0
    2dfc:	f7ff fd78 	bl	28f0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2e00:	2500      	movs	r5, #0
    2e02:	b358      	cbz	r0, 2e5c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    2e04:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    2e08:	7225      	strb	r5, [r4, #8]
    2e0a:	8804      	ldrh	r4, [r0, #0]
    2e0c:	a903      	add	r1, sp, #12
    2e0e:	4620      	mov	r0, r4
    2e10:	f00c ff93 	bl	fd3a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    2e14:	b108      	cbz	r0, 2e1a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    2e16:	21fe      	movs	r1, #254	; 0xfe
    2e18:	e017      	b.n	2e4a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    2e1a:	f8ad 4000 	strh.w	r4, [sp]
    2e1e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2e22:	f8ad 0002 	strh.w	r0, [sp, #2]
    2e26:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    2e2a:	f8ad 0004 	strh.w	r0, [sp, #4]
    2e2e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2e32:	f8ad 0006 	strh.w	r0, [sp, #6]
    2e36:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    2e3a:	f8ad 0008 	strh.w	r0, [sp, #8]
    2e3e:	4668      	mov	r0, sp
    2e40:	f00c ffa2 	bl	fd88 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    2e44:	b120      	cbz	r0, 2e50 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    2e46:	f240 1107 	movw	r1, #263	; 0x107
    2e4a:	202c      	movs	r0, #44	; 0x2c
    2e4c:	f7fd fde6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2e50:	f8cd 5000 	str.w	r5, [sp]
    2e54:	f8bd 0000 	ldrh.w	r0, [sp]
    2e58:	b006      	add	sp, #24
    2e5a:	bd70      	pop	{r4, r5, r6, pc}
    2e5c:	201f      	movs	r0, #31
    2e5e:	7030      	strb	r0, [r6, #0]
    2e60:	7075      	strb	r5, [r6, #1]
    2e62:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    2e66:	6070      	str	r0, [r6, #4]
    2e68:	6860      	ldr	r0, [r4, #4]
    2e6a:	60b0      	str	r0, [r6, #8]
    2e6c:	8920      	ldrh	r0, [r4, #8]
    2e6e:	81b0      	strh	r0, [r6, #12]
    2e70:	4801      	ldr	r0, [pc, #4]	; (2e78 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    2e72:	6800      	ldr	r0, [r0, #0]
    2e74:	9000      	str	r0, [sp, #0]
    2e76:	e7ed      	b.n	2e54 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    2e78:	00002e7c 	.word	0x00002e7c
    2e7c:	00000004 	.word	0x00000004
    2e80:	00000004 	.word	0x00000004

00002e84 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e86:	f06f 021f 	mvn.w	r2, #31
    2e8a:	0c01      	lsrs	r1, r0, #16
    2e8c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2e90:	251f      	movs	r5, #31
    2e92:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2e96:	3854      	subs	r0, #84	; 0x54
    2e98:	d00d      	beq.n	2eb6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2e9a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2e9e:	3855      	subs	r0, #85	; 0x55
    2ea0:	d009      	beq.n	2eb6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ea2:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2ea6:	38aa      	subs	r0, #170	; 0xaa
    2ea8:	d005      	beq.n	2eb6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2eaa:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2eae:	38aa      	subs	r0, #170	; 0xaa
    2eb0:	d001      	beq.n	2eb6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2eb2:	2001      	movs	r0, #1
    2eb4:	e000      	b.n	2eb8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2eb6:	2000      	movs	r0, #0
    2eb8:	2200      	movs	r2, #0
    2eba:	4613      	mov	r3, r2
    2ebc:	ea4f 0402 	mov.w	r4, r2
    2ec0:	ea82 0701 	eor.w	r7, r2, r1
    2ec4:	43ff      	mvns	r7, r7
    2ec6:	431f      	orrs	r7, r3
    2ec8:	1c7f      	adds	r7, r7, #1
    2eca:	d00f      	beq.n	2eec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2ecc:	f006 0701 	and.w	r7, r6, #1
    2ed0:	0852      	lsrs	r2, r2, #1
    2ed2:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2ed6:	f005 0701 	and.w	r7, r5, #1
    2eda:	085b      	lsrs	r3, r3, #1
    2edc:	0876      	lsrs	r6, r6, #1
    2ede:	086d      	lsrs	r5, r5, #1
    2ee0:	1c64      	adds	r4, r4, #1
    2ee2:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2ee6:	2c16      	cmp	r4, #22
    2ee8:	d3ea      	bcc.n	2ec0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eec:	2000      	movs	r0, #0
    2eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002ef0 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2ef0:	b510      	push	{r4, lr}
    2ef2:	4604      	mov	r4, r0
    2ef4:	f00b fb74 	bl	e5e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2ef8:	b308      	cbz	r0, 2f3e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2efa:	43e0      	mvns	r0, r4
    2efc:	f00b fb70 	bl	e5e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2f00:	b1e8      	cbz	r0, 2f3e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f02:	16a0      	asrs	r0, r4, #26
    2f04:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2f08:	1e41      	subs	r1, r0, #1
    2f0a:	4208      	tst	r0, r1
    2f0c:	d017      	beq.n	2f3e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f0e:	4620      	mov	r0, r4
    2f10:	f00b fbb5 	bl	e67e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2f14:	2818      	cmp	r0, #24
    2f16:	d812      	bhi.n	2f3e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f18:	b2a0      	uxth	r0, r4
    2f1a:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2f1e:	d107      	bne.n	2f30 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2f20:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2f24:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2f28:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2f2c:	4281      	cmp	r1, r0
    2f2e:	d006      	beq.n	2f3e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f30:	4804      	ldr	r0, [pc, #16]	; (2f44 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2f32:	4044      	eors	r4, r0
    2f34:	1e60      	subs	r0, r4, #1
    2f36:	4204      	tst	r4, r0
    2f38:	d001      	beq.n	2f3e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f3a:	2001      	movs	r0, #1
    2f3c:	bd10      	pop	{r4, pc}
    2f3e:	2000      	movs	r0, #0
    2f40:	bd10      	pop	{r4, pc}
    2f42:	0000      	.short	0x0000
    2f44:	8e89bed6 	.word	0x8e89bed6

00002f48 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2f48:	b510      	push	{r4, lr}
    2f4a:	4804      	ldr	r0, [pc, #16]	; (2f5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f4c:	f00b fb59 	bl	e602 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2f50:	4802      	ldr	r0, [pc, #8]	; (2f5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f56:	3008      	adds	r0, #8
    2f58:	f00b bb53 	b.w	e602 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2f5c:	200000c8 	.word	0x200000c8

00002f60 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2f60:	4801      	ldr	r0, [pc, #4]	; (2f68 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2f62:	f000 b803 	b.w	2f6c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2f66:	0000      	.short	0x0000
    2f68:	200000d0 	.word	0x200000d0
    2f6c:	b510      	push	{r4, lr}
    2f6e:	e9d0 2100 	ldrd	r2, r1, [r0]
    2f72:	4b09      	ldr	r3, [pc, #36]	; (2f98 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2f74:	4c09      	ldr	r4, [pc, #36]	; (2f9c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2f76:	4353      	muls	r3, r2
    2f78:	4354      	muls	r4, r2
    2f7a:	4051      	eors	r1, r2
    2f7c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2f80:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2f84:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2f88:	e9c0 2100 	strd	r2, r1, [r0]
    2f8c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2f90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f94:	4618      	mov	r0, r3
    2f96:	bd10      	pop	{r4, pc}
    2f98:	c6ef3760 	.word	0xc6ef3760
    2f9c:	9e3779bb 	.word	0x9e3779bb

00002fa0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2fa0:	b570      	push	{r4, r5, r6, lr}
    2fa2:	6845      	ldr	r5, [r0, #4]
    2fa4:	1d0c      	adds	r4, r1, #4
    2fa6:	2300      	movs	r3, #0
    2fa8:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2fac:	3588      	adds	r5, #136	; 0x88
    2fae:	2601      	movs	r6, #1
    2fb0:	4619      	mov	r1, r3
    2fb2:	4628      	mov	r0, r5
    2fb4:	f00a fe9c 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fb8:	b1c0      	cbz	r0, 2fec <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>
    2fba:	6820      	ldr	r0, [r4, #0]
    2fbc:	4b0c      	ldr	r3, [pc, #48]	; (2ff0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x50>)
    2fbe:	6861      	ldr	r1, [r4, #4]
    2fc0:	4018      	ands	r0, r3
    2fc2:	f641 0207 	movw	r2, #6151	; 0x1807
    2fc6:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2fca:	4011      	ands	r1, r2
    2fcc:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2fd0:	211b      	movs	r1, #27
    2fd2:	f105 006e 	add.w	r0, r5, #110	; 0x6e
    2fd6:	f00b fc37 	bl	e848 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI+0x16>
    2fda:	2000      	movs	r0, #0
    2fdc:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    2fe0:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    2fe4:	2004      	movs	r0, #4
    2fe6:	77a8      	strb	r0, [r5, #30]
    2fe8:	2000      	movs	r0, #0
    2fea:	bd70      	pop	{r4, r5, r6, pc}
    2fec:	2001      	movs	r0, #1
    2fee:	bd70      	pop	{r4, r5, r6, pc}
    2ff0:	f704492f 	.word	0xf704492f

00002ff4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2ff4:	b510      	push	{r4, lr}
    2ff6:	1d04      	adds	r4, r0, #4
    2ff8:	f004 fcb6 	bl	7968 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2ffc:	4b03      	ldr	r3, [pc, #12]	; (300c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2ffe:	f641 0207 	movw	r2, #6151	; 0x1807
    3002:	4018      	ands	r0, r3
    3004:	4011      	ands	r1, r2
    3006:	6020      	str	r0, [r4, #0]
    3008:	6061      	str	r1, [r4, #4]
    300a:	bd10      	pop	{r4, pc}
    300c:	f704492f 	.word	0xf704492f

00003010 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    3010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3014:	4605      	mov	r5, r0
    3016:	7803      	ldrb	r3, [r0, #0]
    3018:	6840      	ldr	r0, [r0, #4]
    301a:	1d0f      	adds	r7, r1, #4
    301c:	f100 0688 	add.w	r6, r0, #136	; 0x88
    3020:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    3024:	4680      	mov	r8, r0
    3026:	7f72      	ldrb	r2, [r6, #29]
    3028:	2107      	movs	r1, #7
    302a:	4630      	mov	r0, r6
    302c:	f00a fe60 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3030:	b300      	cbz	r0, 3074 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    3032:	6839      	ldr	r1, [r7, #0]
    3034:	4b1a      	ldr	r3, [pc, #104]	; (30a0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x90>)
    3036:	6878      	ldr	r0, [r7, #4]
    3038:	4019      	ands	r1, r3
    303a:	f641 0207 	movw	r2, #6151	; 0x1807
    303e:	f8c6 106e 	str.w	r1, [r6, #110]	; 0x6e
    3042:	4010      	ands	r0, r2
    3044:	f8c6 0072 	str.w	r0, [r6, #114]	; 0x72
    3048:	211b      	movs	r1, #27
    304a:	f106 006e 	add.w	r0, r6, #110	; 0x6e
    304e:	f00b fbfb 	bl	e848 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI+0x16>
    3052:	2000      	movs	r0, #0
    3054:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    3058:	7770      	strb	r0, [r6, #29]
    305a:	6869      	ldr	r1, [r5, #4]
    305c:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    3060:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3064:	f88d 1000 	strb.w	r1, [sp]
    3068:	9900      	ldr	r1, [sp, #0]
    306a:	9100      	str	r1, [sp, #0]
    306c:	f89d 1000 	ldrb.w	r1, [sp]
    3070:	b999      	cbnz	r1, 309a <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8a>
    3072:	e002      	b.n	307a <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x6a>
    3074:	2001      	movs	r0, #1
    3076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    307a:	f8b8 1000 	ldrh.w	r1, [r8]
    307e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    3082:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3086:	6839      	ldr	r1, [r7, #0]
    3088:	66e1      	str	r1, [r4, #108]	; 0x6c
    308a:	6879      	ldr	r1, [r7, #4]
    308c:	6721      	str	r1, [r4, #112]	; 0x70
    308e:	2202      	movs	r2, #2
    3090:	4904      	ldr	r1, [pc, #16]	; (30a4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x94>)
    3092:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3096:	f00b f95c 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    309a:	2000      	movs	r0, #0
    309c:	e7eb      	b.n	3076 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x66>
    309e:	0000      	.short	0x0000
    30a0:	f704492f 	.word	0xf704492f
    30a4:	0000e8a9 	.word	0x0000e8a9

000030a8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    30a8:	b570      	push	{r4, r5, r6, lr}
    30aa:	1d0d      	adds	r5, r1, #4
    30ac:	6844      	ldr	r4, [r0, #4]
    30ae:	f004 fc5b 	bl	7968 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    30b2:	f641 0207 	movw	r2, #6151	; 0x1807
    30b6:	4b05      	ldr	r3, [pc, #20]	; (30cc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    30b8:	4011      	ands	r1, r2
    30ba:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    30be:	4018      	ands	r0, r3
    30c0:	4002      	ands	r2, r0
    30c2:	f362 0007 	bfi	r0, r2, #0, #8
    30c6:	6028      	str	r0, [r5, #0]
    30c8:	6069      	str	r1, [r5, #4]
    30ca:	bd70      	pop	{r4, r5, r6, pc}
    30cc:	f704492f 	.word	0xf704492f

000030d0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    30d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30d4:	6844      	ldr	r4, [r0, #4]
    30d6:	460d      	mov	r5, r1
    30d8:	7803      	ldrb	r3, [r0, #0]
    30da:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    30de:	3488      	adds	r4, #136	; 0x88
    30e0:	2701      	movs	r7, #1
    30e2:	2108      	movs	r1, #8
    30e4:	4620      	mov	r0, r4
    30e6:	f00a fe03 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    30ea:	b930      	cbnz	r0, 30fa <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    30ec:	2300      	movs	r3, #0
    30ee:	7fa2      	ldrb	r2, [r4, #30]
    30f0:	4619      	mov	r1, r3
    30f2:	4620      	mov	r0, r4
    30f4:	f00a fdfc 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    30f8:	b320      	cbz	r0, 3144 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    30fa:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    30fe:	f04f 0600 	mov.w	r6, #0
    3102:	0780      	lsls	r0, r0, #30
    3104:	d419      	bmi.n	313a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    3106:	4628      	mov	r0, r5
    3108:	f00b f901 	bl	e30e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    310c:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3110:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3114:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    3118:	8868      	ldrh	r0, [r5, #2]
    311a:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    311e:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    3122:	f040 0002 	orr.w	r0, r0, #2
    3126:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    312a:	07c0      	lsls	r0, r0, #31
    312c:	d00d      	beq.n	314a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    312e:	2202      	movs	r2, #2
    3130:	4912      	ldr	r1, [pc, #72]	; (317c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    3132:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3136:	f00b f920 	bl	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    313a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    313e:	07c0      	lsls	r0, r0, #31
    3140:	d003      	beq.n	314a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    3142:	e00e      	b.n	3162 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    3144:	2001      	movs	r0, #1
    3146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    314a:	2300      	movs	r3, #0
    314c:	7fa2      	ldrb	r2, [r4, #30]
    314e:	4619      	mov	r1, r3
    3150:	4620      	mov	r0, r4
    3152:	f00a fdcd 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3156:	b140      	cbz	r0, 316a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    3158:	77a7      	strb	r7, [r4, #30]
    315a:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    315e:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    3162:	7f60      	ldrb	r0, [r4, #29]
    3164:	2801      	cmp	r0, #1
    3166:	d004      	beq.n	3172 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    3168:	e006      	b.n	3178 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    316a:	2148      	movs	r1, #72	; 0x48
    316c:	2040      	movs	r0, #64	; 0x40
    316e:	f7fd fc55 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3172:	7766      	strb	r6, [r4, #29]
    3174:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    3178:	2000      	movs	r0, #0
    317a:	e7e4      	b.n	3146 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    317c:	0000e95d 	.word	0x0000e95d

00003180 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    3180:	4a04      	ldr	r2, [pc, #16]	; (3194 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    3182:	6892      	ldr	r2, [r2, #8]
    3184:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    3188:	434b      	muls	r3, r1
    318a:	4342      	muls	r2, r0
    318c:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3190:	4770      	bx	lr
    3192:	0000      	.short	0x0000
    3194:	200000d8 	.word	0x200000d8

00003198 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    3198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    319a:	6844      	ldr	r4, [r0, #4]
    319c:	4606      	mov	r6, r0
    319e:	f104 0588 	add.w	r5, r4, #136	; 0x88
    31a2:	f000 f87b 	bl	329c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    31a6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    31aa:	2901      	cmp	r1, #1
    31ac:	d11a      	bne.n	31e4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31ae:	2800      	cmp	r0, #0
    31b0:	d018      	beq.n	31e4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31b2:	6870      	ldr	r0, [r6, #4]
    31b4:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    31b8:	f88d 1000 	strb.w	r1, [sp]
    31bc:	9900      	ldr	r1, [sp, #0]
    31be:	9100      	str	r1, [sp, #0]
    31c0:	f89d 1000 	ldrb.w	r1, [sp]
    31c4:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    31c8:	2900      	cmp	r1, #0
    31ca:	d10b      	bne.n	31e4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31cc:	8821      	ldrh	r1, [r4, #0]
    31ce:	8141      	strh	r1, [r0, #10]
    31d0:	7e69      	ldrb	r1, [r5, #25]
    31d2:	7301      	strb	r1, [r0, #12]
    31d4:	7ea9      	ldrb	r1, [r5, #26]
    31d6:	7341      	strb	r1, [r0, #13]
    31d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    31dc:	2202      	movs	r2, #2
    31de:	4902      	ldr	r1, [pc, #8]	; (31e8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    31e0:	f00b b8b7 	b.w	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    31e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31e6:	0000      	.short	0x0000
    31e8:	0000e9db 	.word	0x0000e9db
    31ec:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    31f0:	4a0d      	ldr	r2, [pc, #52]	; (3228 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    31f2:	b510      	push	{r4, lr}
    31f4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    31f8:	1309      	asrs	r1, r1, #12
    31fa:	1300      	asrs	r0, r0, #12
    31fc:	b24b      	sxtb	r3, r1
    31fe:	f992 4000 	ldrsb.w	r4, [r2]
    3202:	4240      	negs	r0, r0
    3204:	2100      	movs	r1, #0
    3206:	b240      	sxtb	r0, r0
    3208:	42a3      	cmp	r3, r4
    320a:	da02      	bge.n	3212 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    320c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3210:	e005      	b.n	321e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3212:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3216:	42a3      	cmp	r3, r4
    3218:	dd04      	ble.n	3224 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    321a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    321e:	4408      	add	r0, r1
    3220:	f300 0107 	ssat	r1, #8, r0
    3224:	4608      	mov	r0, r1
    3226:	bd10      	pop	{r4, pc}
    3228:	200000d8 	.word	0x200000d8
    322c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3230:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    3234:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3238:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    323c:	f00c f9a0 	bl	f580 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3240:	4606      	mov	r6, r0
    3242:	68a0      	ldr	r0, [r4, #8]
    3244:	f7ff ffd2 	bl	31ec <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3248:	0007      	movs	r7, r0
    324a:	d021      	beq.n	3290 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    324c:	4620      	mov	r0, r4
    324e:	f00b fbcc 	bl	e9ea <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    3252:	2800      	cmp	r0, #0
    3254:	d01c      	beq.n	3290 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3256:	8828      	ldrh	r0, [r5, #0]
    3258:	4669      	mov	r1, sp
    325a:	f00a fd33 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    325e:	b118      	cbz	r0, 3268 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    3260:	2185      	movs	r1, #133	; 0x85
    3262:	207a      	movs	r0, #122	; 0x7a
    3264:	f7fd fbda 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3268:	1c76      	adds	r6, r6, #1
    326a:	b2f1      	uxtb	r1, r6
    326c:	2302      	movs	r3, #2
    326e:	463a      	mov	r2, r7
    3270:	4668      	mov	r0, sp
    3272:	f00c f9a4 	bl	f5be <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    3276:	2800      	cmp	r0, #0
    3278:	d10a      	bne.n	3290 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    327a:	4806      	ldr	r0, [pc, #24]	; (3294 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    327c:	4906      	ldr	r1, [pc, #24]	; (3298 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    327e:	7900      	ldrb	r0, [r0, #4]
    3280:	fba0 6501 	umull	r6, r5, r0, r1
    3284:	f00d f9fc 	bl	10680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3288:	1980      	adds	r0, r0, r6
    328a:	4169      	adcs	r1, r5
    328c:	e9c4 0100 	strd	r0, r1, [r4]
    3290:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3294:	200000d8 	.word	0x200000d8
    3298:	000f4240 	.word	0x000f4240
    329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32a0:	4607      	mov	r7, r0
    32a2:	f7ff fa47 	bl	2734 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    32a6:	687c      	ldr	r4, [r7, #4]
    32a8:	4605      	mov	r5, r0
    32aa:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    32ae:	3488      	adds	r4, #136	; 0x88
    32b0:	287f      	cmp	r0, #127	; 0x7f
    32b2:	d042      	beq.n	333a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    32b4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    32b8:	687e      	ldr	r6, [r7, #4]
    32ba:	76a0      	strb	r0, [r4, #26]
    32bc:	4629      	mov	r1, r5
    32be:	68a0      	ldr	r0, [r4, #8]
    32c0:	f7ff ff5e 	bl	3180 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    32c4:	60a0      	str	r0, [r4, #8]
    32c6:	481e      	ldr	r0, [pc, #120]	; (3340 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    32c8:	7940      	ldrb	r0, [r0, #5]
    32ca:	b1c0      	cbz	r0, 32fe <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    32cc:	6878      	ldr	r0, [r7, #4]
    32ce:	f100 0888 	add.w	r8, r0, #136	; 0x88
    32d2:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    32d6:	f7ff ff89 	bl	31ec <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    32da:	b180      	cbz	r0, 32fe <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    32dc:	4640      	mov	r0, r8
    32de:	f00b fb84 	bl	e9ea <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    32e2:	b160      	cbz	r0, 32fe <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    32e4:	6878      	ldr	r0, [r7, #4]
    32e6:	f500 78a9 	add.w	r8, r0, #338	; 0x152
    32ea:	4607      	mov	r7, r0
    32ec:	f004 ff32 	bl	8154 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    32f0:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    32f4:	4913      	ldr	r1, [pc, #76]	; (3344 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    32f6:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    32fa:	f00b f827 	bl	e34c <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    32fe:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3302:	2100      	movs	r1, #0
    3304:	1a28      	subs	r0, r5, r0
    3306:	d500      	bpl.n	330a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3308:	4240      	negs	r0, r0
    330a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    330e:	4282      	cmp	r2, r0
    3310:	dc10      	bgt.n	3334 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3312:	2aff      	cmp	r2, #255	; 0xff
    3314:	d00e      	beq.n	3334 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3316:	7f20      	ldrb	r0, [r4, #28]
    3318:	1c40      	adds	r0, r0, #1
    331a:	b2c0      	uxtb	r0, r0
    331c:	7720      	strb	r0, [r4, #28]
    331e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3322:	4290      	cmp	r0, r2
    3324:	d802      	bhi.n	332c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    3326:	7ee0      	ldrb	r0, [r4, #27]
    3328:	287f      	cmp	r0, #127	; 0x7f
    332a:	d103      	bne.n	3334 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    332c:	2000      	movs	r0, #0
    332e:	76e5      	strb	r5, [r4, #27]
    3330:	7720      	strb	r0, [r4, #28]
    3332:	2101      	movs	r1, #1
    3334:	4608      	mov	r0, r1
    3336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    333a:	2000      	movs	r0, #0
    333c:	e7fb      	b.n	3336 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    333e:	0000      	.short	0x0000
    3340:	200000d8 	.word	0x200000d8
    3344:	0000322d 	.word	0x0000322d

00003348 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    3348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    334a:	f00b fb6a 	bl	ea22 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    334e:	4604      	mov	r4, r0
    3350:	460d      	mov	r5, r1
    3352:	466a      	mov	r2, sp
    3354:	f000 f862 	bl	341c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3358:	b108      	cbz	r0, 335e <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    335a:	2001      	movs	r0, #1
    335c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    335e:	480f      	ldr	r0, [pc, #60]	; (339c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    3360:	7803      	ldrb	r3, [r0, #0]
    3362:	7841      	ldrb	r1, [r0, #1]
    3364:	428b      	cmp	r3, r1
    3366:	d101      	bne.n	336c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    3368:	2000      	movs	r0, #0
    336a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    336c:	461a      	mov	r2, r3
    336e:	6841      	ldr	r1, [r0, #4]
    3370:	e008      	b.n	3384 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    3372:	bf00      	nop
    3374:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    3378:	1e52      	subs	r2, r2, #1
    337a:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    337e:	e9c6 7c00 	strd	r7, ip, [r6]
    3382:	b2d2      	uxtb	r2, r2
    3384:	f89d 6000 	ldrb.w	r6, [sp]
    3388:	42b2      	cmp	r2, r6
    338a:	d8f3      	bhi.n	3374 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    338c:	b2f2      	uxtb	r2, r6
    338e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    3392:	1c5b      	adds	r3, r3, #1
    3394:	e9c1 4500 	strd	r4, r5, [r1]
    3398:	7003      	strb	r3, [r0, #0]
    339a:	e7de      	b.n	335a <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    339c:	200000e4 	.word	0x200000e4

000033a0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    33a0:	b510      	push	{r4, lr}
    33a2:	0742      	lsls	r2, r0, #29
    33a4:	d003      	beq.n	33ae <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    33a6:	2163      	movs	r1, #99	; 0x63
    33a8:	2048      	movs	r0, #72	; 0x48
    33aa:	f7fd fb37 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    33ae:	b120      	cbz	r0, 33ba <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    33b0:	4a03      	ldr	r2, [pc, #12]	; (33c0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    33b2:	7051      	strb	r1, [r2, #1]
    33b4:	6050      	str	r0, [r2, #4]
    33b6:	2000      	movs	r0, #0
    33b8:	7010      	strb	r0, [r2, #0]
    33ba:	00c8      	lsls	r0, r1, #3
    33bc:	bd10      	pop	{r4, pc}
    33be:	0000      	.short	0x0000
    33c0:	200000e4 	.word	0x200000e4

000033c4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    33c4:	b538      	push	{r3, r4, r5, lr}
    33c6:	f00b fb2c 	bl	ea22 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    33ca:	466a      	mov	r2, sp
    33cc:	f000 f826 	bl	341c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    33d0:	2800      	cmp	r0, #0
    33d2:	d014      	beq.n	33fe <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    33d4:	4a0a      	ldr	r2, [pc, #40]	; (3400 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    33d6:	7810      	ldrb	r0, [r2, #0]
    33d8:	1e40      	subs	r0, r0, #1
    33da:	b2c1      	uxtb	r1, r0
    33dc:	7011      	strb	r1, [r2, #0]
    33de:	f89d 0000 	ldrb.w	r0, [sp]
    33e2:	6852      	ldr	r2, [r2, #4]
    33e4:	e008      	b.n	33f8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    33e6:	bf00      	nop
    33e8:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    33ec:	1c40      	adds	r0, r0, #1
    33ee:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    33f2:	e9c3 4500 	strd	r4, r5, [r3]
    33f6:	b2c0      	uxtb	r0, r0
    33f8:	4288      	cmp	r0, r1
    33fa:	d3f5      	bcc.n	33e8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    33fc:	2001      	movs	r0, #1
    33fe:	bd38      	pop	{r3, r4, r5, pc}
    3400:	200000e4 	.word	0x200000e4

00003404 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3404:	4901      	ldr	r1, [pc, #4]	; (340c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3406:	2000      	movs	r0, #0
    3408:	7008      	strb	r0, [r1, #0]
    340a:	4770      	bx	lr
    340c:	200000e4 	.word	0x200000e4

00003410 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3410:	4801      	ldr	r0, [pc, #4]	; (3418 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3412:	7840      	ldrb	r0, [r0, #1]
    3414:	4770      	bx	lr
    3416:	0000      	.short	0x0000
    3418:	200000e4 	.word	0x200000e4
    341c:	b5f0      	push	{r4, r5, r6, r7, lr}
    341e:	4d20      	ldr	r5, [pc, #128]	; (34a0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    3420:	2300      	movs	r3, #0
    3422:	7013      	strb	r3, [r2, #0]
    3424:	782b      	ldrb	r3, [r5, #0]
    3426:	b323      	cbz	r3, 3472 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    3428:	2400      	movs	r4, #0
    342a:	1e5b      	subs	r3, r3, #1
    342c:	b2db      	uxtb	r3, r3
    342e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3432:	e00b      	b.n	344c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3434:	18e5      	adds	r5, r4, r3
    3436:	086d      	lsrs	r5, r5, #1
    3438:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    343c:	e9d6 7600 	ldrd	r7, r6, [r6]
    3440:	1a3f      	subs	r7, r7, r0
    3442:	418e      	sbcs	r6, r1
    3444:	d201      	bcs.n	344a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    3446:	462c      	mov	r4, r5
    3448:	e000      	b.n	344c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    344a:	462b      	mov	r3, r5
    344c:	1b1d      	subs	r5, r3, r4
    344e:	2d01      	cmp	r5, #1
    3450:	dcf0      	bgt.n	3434 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    3452:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    3456:	e9d6 5600 	ldrd	r5, r6, [r6]
    345a:	ea80 0705 	eor.w	r7, r0, r5
    345e:	ea81 0e06 	eor.w	lr, r1, r6
    3462:	ea57 070e 	orrs.w	r7, r7, lr
    3466:	d005      	beq.n	3474 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    3468:	1b45      	subs	r5, r0, r5
    346a:	eb71 0506 	sbcs.w	r5, r1, r6
    346e:	d203      	bcs.n	3478 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    3470:	7014      	strb	r4, [r2, #0]
    3472:	e010      	b.n	3496 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    3474:	7014      	strb	r4, [r2, #0]
    3476:	e011      	b.n	349c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    3478:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    347c:	e9d5 4500 	ldrd	r4, r5, [r5]
    3480:	ea80 0604 	eor.w	r6, r0, r4
    3484:	ea81 0705 	eor.w	r7, r1, r5
    3488:	433e      	orrs	r6, r7
    348a:	d006      	beq.n	349a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    348c:	1b00      	subs	r0, r0, r4
    348e:	41a9      	sbcs	r1, r5
    3490:	d300      	bcc.n	3494 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    3492:	1c5b      	adds	r3, r3, #1
    3494:	7013      	strb	r3, [r2, #0]
    3496:	2000      	movs	r0, #0
    3498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    349a:	7013      	strb	r3, [r2, #0]
    349c:	2001      	movs	r0, #1
    349e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34a0:	200000e4 	.word	0x200000e4

000034a4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    34a4:	4801      	ldr	r0, [pc, #4]	; (34ac <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    34a6:	6840      	ldr	r0, [r0, #4]
    34a8:	30a0      	adds	r0, #160	; 0xa0
    34aa:	4770      	bx	lr
    34ac:	200000ec 	.word	0x200000ec

000034b0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    34b0:	b510      	push	{r4, lr}
    34b2:	4c21      	ldr	r4, [pc, #132]	; (3538 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    34b4:	6860      	ldr	r0, [r4, #4]
    34b6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34ba:	f00b fae2 	bl	ea82 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    34be:	6861      	ldr	r1, [r4, #4]
    34c0:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    34c4:	314a      	adds	r1, #74	; 0x4a
    34c6:	f7fe f921 	bl	170c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    34ca:	6860      	ldr	r0, [r4, #4]
    34cc:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34d0:	f00b fade 	bl	ea90 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7c>
    34d4:	6861      	ldr	r1, [r4, #4]
    34d6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    34da:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    34de:	314a      	adds	r1, #74	; 0x4a
    34e0:	f00b fabb 	bl	ea5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    34e4:	b930      	cbnz	r0, 34f4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    34e6:	6861      	ldr	r1, [r4, #4]
    34e8:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    34ec:	314a      	adds	r1, #74	; 0x4a
    34ee:	f00b fabd 	bl	ea6c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    34f2:	b108      	cbz	r0, 34f8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    34f4:	2101      	movs	r1, #1
    34f6:	e000      	b.n	34fa <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    34f8:	2100      	movs	r1, #0
    34fa:	6860      	ldr	r0, [r4, #4]
    34fc:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    3500:	b919      	cbnz	r1, 350a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    3502:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3506:	2800      	cmp	r0, #0
    3508:	d014      	beq.n	3534 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    350a:	f7fe ff71 	bl	23f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    350e:	490b      	ldr	r1, [pc, #44]	; (353c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    3510:	fba0 2301 	umull	r2, r3, r0, r1
    3514:	6860      	ldr	r0, [r4, #4]
    3516:	3090      	adds	r0, #144	; 0x90
    3518:	f00b fb18 	bl	eb4c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    351c:	6860      	ldr	r0, [r4, #4]
    351e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3522:	b110      	cbz	r0, 352a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    3524:	2000      	movs	r0, #0
    3526:	f7fe fe57 	bl	21d8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    352a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    352e:	2000      	movs	r0, #0
    3530:	f000 be3a 	b.w	41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
    3534:	bd10      	pop	{r4, pc}
    3536:	0000      	.short	0x0000
    3538:	200000ec 	.word	0x200000ec
    353c:	000f4240 	.word	0x000f4240

00003540 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3540:	4a04      	ldr	r2, [pc, #16]	; (3554 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3542:	2803      	cmp	r0, #3
    3544:	6852      	ldr	r2, [r2, #4]
    3546:	d100      	bne.n	354a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    3548:	6551      	str	r1, [r2, #84]	; 0x54
    354a:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    354e:	2000      	movs	r0, #0
    3550:	4770      	bx	lr
    3552:	0000      	.short	0x0000
    3554:	200000ec 	.word	0x200000ec

00003558 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    3558:	4806      	ldr	r0, [pc, #24]	; (3574 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    355a:	b508      	push	{r3, lr}
    355c:	6840      	ldr	r0, [r0, #4]
    355e:	7a00      	ldrb	r0, [r0, #8]
    3560:	f88d 0000 	strb.w	r0, [sp]
    3564:	9800      	ldr	r0, [sp, #0]
    3566:	9000      	str	r0, [sp, #0]
    3568:	f89d 0000 	ldrb.w	r0, [sp]
    356c:	2800      	cmp	r0, #0
    356e:	d000      	beq.n	3572 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    3570:	2001      	movs	r0, #1
    3572:	bd08      	pop	{r3, pc}
    3574:	200000ec 	.word	0x200000ec

00003578 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    3578:	4902      	ldr	r1, [pc, #8]	; (3584 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    357a:	6849      	ldr	r1, [r1, #4]
    357c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    3580:	2000      	movs	r0, #0
    3582:	4770      	bx	lr
    3584:	200000ec 	.word	0x200000ec

00003588 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    3588:	480a      	ldr	r0, [pc, #40]	; (35b4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    358a:	6841      	ldr	r1, [r0, #4]
    358c:	6e88      	ldr	r0, [r1, #104]	; 0x68
    358e:	b170      	cbz	r0, 35ae <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    3590:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    3594:	22ff      	movs	r2, #255	; 0xff
    3596:	7002      	strb	r2, [r0, #0]
    3598:	2200      	movs	r2, #0
    359a:	668a      	str	r2, [r1, #104]	; 0x68
    359c:	7002      	strb	r2, [r0, #0]
    359e:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    35a2:	2001      	movs	r0, #1
    35a4:	4088      	lsls	r0, r1
    35a6:	4904      	ldr	r1, [pc, #16]	; (35b8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    35a8:	6008      	str	r0, [r1, #0]
    35aa:	2000      	movs	r0, #0
    35ac:	4770      	bx	lr
    35ae:	200c      	movs	r0, #12
    35b0:	4770      	bx	lr
    35b2:	0000      	.short	0x0000
    35b4:	200000ec 	.word	0x200000ec
    35b8:	4001f508 	.word	0x4001f508

000035bc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    35bc:	4602      	mov	r2, r0
    35be:	480c      	ldr	r0, [pc, #48]	; (35f0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    35c0:	b510      	push	{r4, lr}
    35c2:	6082      	str	r2, [r0, #8]
    35c4:	68c0      	ldr	r0, [r0, #12]
    35c6:	460c      	mov	r4, r1
    35c8:	b168      	cbz	r0, 35e6 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    35ca:	f000 ffdd 	bl	4588 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x588>
    35ce:	f00b fba3 	bl	ed18 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    35d2:	4620      	mov	r0, r4
    35d4:	f000 f8b8 	bl	3748 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    35d8:	2800      	cmp	r0, #0
    35da:	d007      	beq.n	35ec <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    35dc:	f640 11bb 	movw	r1, #2491	; 0x9bb
    35e0:	2032      	movs	r0, #50	; 0x32
    35e2:	f7fd fa1b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    35e6:	f640 11b5 	movw	r1, #2485	; 0x9b5
    35ea:	e7f9      	b.n	35e0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    35ec:	bd10      	pop	{r4, pc}
    35ee:	0000      	.short	0x0000
    35f0:	200000ec 	.word	0x200000ec

000035f4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    35f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35f8:	4c0f      	ldr	r4, [pc, #60]	; (3638 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    35fa:	4605      	mov	r5, r0
    35fc:	4616      	mov	r6, r2
    35fe:	6860      	ldr	r0, [r4, #4]
    3600:	460f      	mov	r7, r1
    3602:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    3606:	f00b fa43 	bl	ea90 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7c>
    360a:	b158      	cbz	r0, 3624 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    360c:	b955      	cbnz	r5, 3624 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    360e:	4638      	mov	r0, r7
    3610:	f00b fa37 	bl	ea82 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    3614:	4631      	mov	r1, r6
    3616:	f00a fb00 	bl	dc1a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    361a:	2808      	cmp	r0, #8
    361c:	d002      	beq.n	3624 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    361e:	2001      	movs	r0, #1
    3620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3624:	6860      	ldr	r0, [r4, #4]
    3626:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    362a:	f00b fa2a 	bl	ea82 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    362e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3632:	f7fe b897 	b.w	1764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    3636:	0000      	.short	0x0000
    3638:	200000ec 	.word	0x200000ec

0000363c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    363c:	b510      	push	{r4, lr}
    363e:	4c0a      	ldr	r4, [pc, #40]	; (3668 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3640:	6860      	ldr	r0, [r4, #4]
    3642:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3644:	b151      	cbz	r1, 365c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x20>
    3646:	2202      	movs	r2, #2
    3648:	7242      	strb	r2, [r0, #9]
    364a:	8809      	ldrh	r1, [r1, #0]
    364c:	8141      	strh	r1, [r0, #10]
    364e:	4907      	ldr	r1, [pc, #28]	; (366c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3650:	f00a fe7f 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3654:	6861      	ldr	r1, [r4, #4]
    3656:	2000      	movs	r0, #0
    3658:	6548      	str	r0, [r1, #84]	; 0x54
    365a:	bd10      	pop	{r4, pc}
    365c:	f240 4127 	movw	r1, #1063	; 0x427
    3660:	2032      	movs	r0, #50	; 0x32
    3662:	f7fd f9db 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3666:	0000      	.short	0x0000
    3668:	200000ec 	.word	0x200000ec
    366c:	0000397d 	.word	0x0000397d

00003670 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    3670:	b570      	push	{r4, r5, r6, lr}
    3672:	4615      	mov	r5, r2
    3674:	4c0e      	ldr	r4, [pc, #56]	; (36b0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>)
    3676:	460a      	mov	r2, r1
    3678:	2800      	cmp	r0, #0
    367a:	d015      	beq.n	36a8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x38>
    367c:	f04f 0300 	mov.w	r3, #0
    3680:	6861      	ldr	r1, [r4, #4]
    3682:	f801 3f51 	strb.w	r3, [r1, #81]!
    3686:	7248      	strb	r0, [r1, #9]
    3688:	f04f 0008 	mov.w	r0, #8
    368c:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    3690:	d108      	bne.n	36a4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x34>
    3692:	4610      	mov	r0, r2
    3694:	f00b f9f5 	bl	ea82 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    3698:	4629      	mov	r1, r5
    369a:	f00a fabe 	bl	dc1a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    369e:	6861      	ldr	r1, [r4, #4]
    36a0:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    36a4:	2000      	movs	r0, #0
    36a6:	bd70      	pop	{r4, r5, r6, pc}
    36a8:	f04f 0301 	mov.w	r3, #1
    36ac:	e7e8      	b.n	3680 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    36ae:	0000      	.short	0x0000
    36b0:	200000ec 	.word	0x200000ec

000036b4 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    36b4:	b510      	push	{r4, lr}
    36b6:	b1b1      	cbz	r1, 36e6 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    36b8:	4a0d      	ldr	r2, [pc, #52]	; (36f0 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    36ba:	6852      	ldr	r2, [r2, #4]
    36bc:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    36c0:	6808      	ldr	r0, [r1, #0]
    36c2:	6610      	str	r0, [r2, #96]	; 0x60
    36c4:	8888      	ldrh	r0, [r1, #4]
    36c6:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    36ca:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    36ce:	f852 1f54 	ldr.w	r1, [r2, #84]!
    36d2:	7248      	strb	r0, [r1, #9]
    36d4:	f852 0908 	ldr.w	r0, [r2], #-8
    36d8:	f852 1c02 	ldr.w	r1, [r2, #-2]
    36dc:	f8c0 100a 	str.w	r1, [r0, #10]
    36e0:	8851      	ldrh	r1, [r2, #2]
    36e2:	81c1      	strh	r1, [r0, #14]
    36e4:	bd10      	pop	{r4, pc}
    36e6:	f640 31a9 	movw	r1, #2985	; 0xba9
    36ea:	2032      	movs	r0, #50	; 0x32
    36ec:	f7fd f996 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36f0:	200000ec 	.word	0x200000ec

000036f4 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    36f4:	4902      	ldr	r1, [pc, #8]	; (3700 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    36f6:	4801      	ldr	r0, [pc, #4]	; (36fc <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    36f8:	60c8      	str	r0, [r1, #12]
    36fa:	4770      	bx	lr
    36fc:	000047c4 	.word	0x000047c4
    3700:	200000ec 	.word	0x200000ec

00003704 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    3704:	4902      	ldr	r1, [pc, #8]	; (3710 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    3706:	6849      	ldr	r1, [r1, #4]
    3708:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    370c:	4770      	bx	lr
    370e:	0000      	.short	0x0000
    3710:	200000ec 	.word	0x200000ec

00003714 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    3714:	b570      	push	{r4, r5, r6, lr}
    3716:	4605      	mov	r5, r0
    3718:	f7fd fe12 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    371c:	4604      	mov	r4, r0
    371e:	f7fd fe15 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3722:	4621      	mov	r1, r4
    3724:	f00b fa10 	bl	eb48 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    3728:	0001      	movs	r1, r0
    372a:	d006      	beq.n	373a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    372c:	4805      	ldr	r0, [pc, #20]	; (3744 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    372e:	68c0      	ldr	r0, [r0, #12]
    3730:	6802      	ldr	r2, [r0, #0]
    3732:	4628      	mov	r0, r5
    3734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3738:	4710      	bx	r2
    373a:	f640 21b1 	movw	r1, #2737	; 0xab1
    373e:	2032      	movs	r0, #50	; 0x32
    3740:	f7fd f96c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3744:	200000ec 	.word	0x200000ec

00003748 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    3748:	b570      	push	{r4, r5, r6, lr}
    374a:	4d19      	ldr	r5, [pc, #100]	; (37b0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    374c:	4604      	mov	r4, r0
    374e:	6868      	ldr	r0, [r5, #4]
    3750:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3754:	2901      	cmp	r1, #1
    3756:	d004      	beq.n	3762 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    3758:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    375c:	b108      	cbz	r0, 3762 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    375e:	200c      	movs	r0, #12
    3760:	bd70      	pop	{r4, r5, r6, pc}
    3762:	f7fd fe17 	bl	1394 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    3766:	f00b fad7 	bl	ed18 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    376a:	f000 f8c1 	bl	38f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    376e:	2246      	movs	r2, #70	; 0x46
    3770:	2100      	movs	r1, #0
    3772:	6868      	ldr	r0, [r5, #4]
    3774:	f00d f9a2 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3778:	6869      	ldr	r1, [r5, #4]
    377a:	2200      	movs	r2, #0
    377c:	2001      	movs	r0, #1
    377e:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    3782:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    3786:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    378a:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    378e:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    3792:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    3796:	2007      	movs	r0, #7
    3798:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    379c:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    37a0:	23ff      	movs	r3, #255	; 0xff
    37a2:	7003      	strb	r3, [r0, #0]
    37a4:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    37a8:	668a      	str	r2, [r1, #104]	; 0x68
    37aa:	7002      	strb	r2, [r0, #0]
    37ac:	2000      	movs	r0, #0
    37ae:	bd70      	pop	{r4, r5, r6, pc}
    37b0:	200000ec 	.word	0x200000ec

000037b4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    37b4:	4805      	ldr	r0, [pc, #20]	; (37cc <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    37b6:	b510      	push	{r4, lr}
    37b8:	6840      	ldr	r0, [r0, #4]
    37ba:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    37be:	f00b f960 	bl	ea82 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    37c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37c6:	f7fd bfcd 	b.w	1764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    37ca:	0000      	.short	0x0000
    37cc:	200000ec 	.word	0x200000ec

000037d0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    37d0:	b140      	cbz	r0, 37e4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    37d2:	2802      	cmp	r0, #2
    37d4:	d006      	beq.n	37e4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    37d6:	2200      	movs	r2, #0
    37d8:	4903      	ldr	r1, [pc, #12]	; (37e8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    37da:	6849      	ldr	r1, [r1, #4]
    37dc:	f801 2f51 	strb.w	r2, [r1, #81]!
    37e0:	7208      	strb	r0, [r1, #8]
    37e2:	4770      	bx	lr
    37e4:	2201      	movs	r2, #1
    37e6:	e7f7      	b.n	37d8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    37e8:	200000ec 	.word	0x200000ec

000037ec <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    37ec:	4902      	ldr	r1, [pc, #8]	; (37f8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    37ee:	6849      	ldr	r1, [r1, #4]
    37f0:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    37f4:	4770      	bx	lr
    37f6:	0000      	.short	0x0000
    37f8:	200000ec 	.word	0x200000ec

000037fc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    37fc:	b510      	push	{r4, lr}
    37fe:	4603      	mov	r3, r0
    3800:	7800      	ldrb	r0, [r0, #0]
    3802:	07c0      	lsls	r0, r0, #31
    3804:	d005      	beq.n	3812 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    3806:	7858      	ldrb	r0, [r3, #1]
    3808:	2100      	movs	r1, #0
    380a:	f7ff fe99 	bl	3540 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    380e:	2800      	cmp	r0, #0
    3810:	d10c      	bne.n	382c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    3812:	4c07      	ldr	r4, [pc, #28]	; (3830 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    3814:	7898      	ldrb	r0, [r3, #2]
    3816:	6861      	ldr	r1, [r4, #4]
    3818:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    381c:	78d8      	ldrb	r0, [r3, #3]
    381e:	f7ff ffd7 	bl	37d0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3822:	6861      	ldr	r1, [r4, #4]
    3824:	7918      	ldrb	r0, [r3, #4]
    3826:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    382a:	2000      	movs	r0, #0
    382c:	bd10      	pop	{r4, pc}
    382e:	0000      	.short	0x0000
    3830:	200000ec 	.word	0x200000ec

00003834 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3834:	4801      	ldr	r0, [pc, #4]	; (383c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    3836:	68c0      	ldr	r0, [r0, #12]
    3838:	6840      	ldr	r0, [r0, #4]
    383a:	4700      	bx	r0
    383c:	200000ec 	.word	0x200000ec

00003840 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3840:	4807      	ldr	r0, [pc, #28]	; (3860 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3842:	b508      	push	{r3, lr}
    3844:	6840      	ldr	r0, [r0, #4]
    3846:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    384a:	f88d 0000 	strb.w	r0, [sp]
    384e:	9800      	ldr	r0, [sp, #0]
    3850:	9000      	str	r0, [sp, #0]
    3852:	f89d 0000 	ldrb.w	r0, [sp]
    3856:	2800      	cmp	r0, #0
    3858:	d000      	beq.n	385c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    385a:	2001      	movs	r0, #1
    385c:	bd08      	pop	{r3, pc}
    385e:	0000      	.short	0x0000
    3860:	200000ec 	.word	0x200000ec

00003864 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    3864:	b510      	push	{r4, lr}
    3866:	f000 f947 	bl	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    386a:	4b0c      	ldr	r3, [pc, #48]	; (389c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    386c:	b140      	cbz	r0, 3880 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    386e:	6858      	ldr	r0, [r3, #4]
    3870:	2101      	movs	r1, #1
    3872:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    3876:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3878:	8809      	ldrh	r1, [r1, #0]
    387a:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    387e:	e004      	b.n	388a <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    3880:	6859      	ldr	r1, [r3, #4]
    3882:	2000      	movs	r0, #0
    3884:	f801 0f42 	strb.w	r0, [r1, #66]!
    3888:	8048      	strh	r0, [r1, #2]
    388a:	6858      	ldr	r0, [r3, #4]
    388c:	2202      	movs	r2, #2
    388e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3892:	4903      	ldr	r1, [pc, #12]	; (38a0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    3894:	3038      	adds	r0, #56	; 0x38
    3896:	f00a bd5c 	b.w	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    389a:	0000      	.short	0x0000
    389c:	200000ec 	.word	0x200000ec
    38a0:	00004521 	.word	0x00004521

000038a4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    38a4:	4802      	ldr	r0, [pc, #8]	; (38b0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    38a6:	6840      	ldr	r0, [r0, #4]
    38a8:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    38ac:	4770      	bx	lr
    38ae:	0000      	.short	0x0000
    38b0:	200000ec 	.word	0x200000ec

000038b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    38b4:	b510      	push	{r4, lr}
    38b6:	f000 f91f 	bl	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    38ba:	490c      	ldr	r1, [pc, #48]	; (38ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    38bc:	b128      	cbz	r0, 38ca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    38be:	6848      	ldr	r0, [r1, #4]
    38c0:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    38c4:	2801      	cmp	r0, #1
    38c6:	d00e      	beq.n	38e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    38c8:	e00c      	b.n	38e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    38ca:	6849      	ldr	r1, [r1, #4]
    38cc:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    38d0:	2801      	cmp	r0, #1
    38d2:	d001      	beq.n	38d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    38d4:	2802      	cmp	r0, #2
    38d6:	d105      	bne.n	38e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    38d8:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    38dc:	2801      	cmp	r0, #1
    38de:	d003      	beq.n	38e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    38e0:	2803      	cmp	r0, #3
    38e2:	d001      	beq.n	38e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    38e4:	2000      	movs	r0, #0
    38e6:	bd10      	pop	{r4, pc}
    38e8:	2001      	movs	r0, #1
    38ea:	bd10      	pop	{r4, pc}
    38ec:	200000ec 	.word	0x200000ec
    38f0:	b510      	push	{r4, lr}
    38f2:	4c07      	ldr	r4, [pc, #28]	; (3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    38f4:	6860      	ldr	r0, [r4, #4]
    38f6:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    38fa:	2800      	cmp	r0, #0
    38fc:	d007      	beq.n	390e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    38fe:	f004 fab7 	bl	7e70 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3902:	f004 f8db 	bl	7abc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3906:	6861      	ldr	r1, [r4, #4]
    3908:	2000      	movs	r0, #0
    390a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    390e:	bd10      	pop	{r4, pc}
    3910:	200000ec 	.word	0x200000ec
    3914:	2000      	movs	r0, #0
    3916:	7048      	strb	r0, [r1, #1]
    3918:	2007      	movs	r0, #7
    391a:	7008      	strb	r0, [r1, #0]
    391c:	4802      	ldr	r0, [pc, #8]	; (3928 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74>)
    391e:	6840      	ldr	r0, [r0, #4]
    3920:	6b40      	ldr	r0, [r0, #52]	; 0x34
    3922:	6048      	str	r0, [r1, #4]
    3924:	4770      	bx	lr
    3926:	0000      	.short	0x0000
    3928:	200000ec 	.word	0x200000ec
    392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3930:	4d10      	ldr	r5, [pc, #64]	; (3974 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc0>)
    3932:	4606      	mov	r6, r0
    3934:	460f      	mov	r7, r1
    3936:	6868      	ldr	r0, [r5, #4]
    3938:	490f      	ldr	r1, [pc, #60]	; (3978 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc4>)
    393a:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    393e:	5c0c      	ldrb	r4, [r1, r0]
    3940:	4620      	mov	r0, r4
    3942:	f004 fddb 	bl	84fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    3946:	6868      	ldr	r0, [r5, #4]
    3948:	2101      	movs	r1, #1
    394a:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
    394e:	2025      	movs	r0, #37	; 0x25
    3950:	f004 fdaa 	bl	84a8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    3954:	4638      	mov	r0, r7
    3956:	f004 fcdd 	bl	8314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    395a:	f04f 0101 	mov.w	r1, #1
    395e:	4608      	mov	r0, r1
    3960:	b126      	cbz	r6, 396c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb8>
    3962:	f004 fb31 	bl	7fc8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    3966:	b918      	cbnz	r0, 3970 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc>
    3968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    396c:	f004 faf2 	bl	7f54 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3970:	2001      	movs	r0, #1
    3972:	e7f9      	b.n	3968 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb4>
    3974:	200000ec 	.word	0x200000ec
    3978:	00010c31 	.word	0x00010c31
    397c:	b570      	push	{r4, r5, r6, lr}
    397e:	4e1a      	ldr	r6, [pc, #104]	; (39e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    3980:	460c      	mov	r4, r1
    3982:	6870      	ldr	r0, [r6, #4]
    3984:	7a41      	ldrb	r1, [r0, #9]
    3986:	b191      	cbz	r1, 39ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfa>
    3988:	8940      	ldrh	r0, [r0, #10]
    398a:	2100      	movs	r1, #0
    398c:	f7fd fb28 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    3990:	0005      	movs	r5, r0
    3992:	d025      	beq.n	39e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    3994:	8828      	ldrh	r0, [r5, #0]
    3996:	f00a f880 	bl	da9a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    399a:	8828      	ldrh	r0, [r5, #0]
    399c:	2100      	movs	r1, #0
    399e:	f7fd fbb5 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    39a2:	b188      	cbz	r0, 39c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x114>
    39a4:	f240 31f7 	movw	r1, #1015	; 0x3f7
    39a8:	2032      	movs	r0, #50	; 0x32
    39aa:	f7fd f837 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39ae:	6d41      	ldr	r1, [r0, #84]	; 0x54
    39b0:	f8d0 200e 	ldr.w	r2, [r0, #14]
    39b4:	f841 2f03 	str.w	r2, [r1, #3]!
    39b8:	8a42      	ldrh	r2, [r0, #18]
    39ba:	808a      	strh	r2, [r1, #4]
    39bc:	7b40      	ldrb	r0, [r0, #13]
    39be:	f00b f860 	bl	ea82 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    39c2:	6871      	ldr	r1, [r6, #4]
    39c4:	6d49      	ldr	r1, [r1, #84]	; 0x54
    39c6:	7088      	strb	r0, [r1, #2]
    39c8:	2500      	movs	r5, #0
    39ca:	7065      	strb	r5, [r4, #1]
    39cc:	2015      	movs	r0, #21
    39ce:	7020      	strb	r0, [r4, #0]
    39d0:	6871      	ldr	r1, [r6, #4]
    39d2:	2221      	movs	r2, #33	; 0x21
    39d4:	1d20      	adds	r0, r4, #4
    39d6:	3109      	adds	r1, #9
    39d8:	f00c fff6 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    39dc:	71e5      	strb	r5, [r4, #7]
    39de:	bd70      	pop	{r4, r5, r6, pc}
    39e0:	f240 31f3 	movw	r1, #1011	; 0x3f3
    39e4:	e7e0      	b.n	39a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf4>
    39e6:	0000      	.short	0x0000
    39e8:	200000ec 	.word	0x200000ec
    39ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ee:	2600      	movs	r6, #0
    39f0:	460f      	mov	r7, r1
    39f2:	4605      	mov	r5, r0
    39f4:	f88d 6000 	strb.w	r6, [sp]
    39f8:	466b      	mov	r3, sp
    39fa:	f000 f895 	bl	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    39fe:	0001      	movs	r1, r0
    3a00:	4810      	ldr	r0, [pc, #64]	; (3a44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x190>)
    3a02:	d003      	beq.n	3a0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x158>
    3a04:	6840      	ldr	r0, [r0, #4]
    3a06:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    3a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a0c:	6840      	ldr	r0, [r0, #4]
    3a0e:	f89d 1000 	ldrb.w	r1, [sp]
    3a12:	2f07      	cmp	r7, #7
    3a14:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    3a18:	d301      	bcc.n	3a1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3a1a:	4634      	mov	r4, r6
    3a1c:	e002      	b.n	3a24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x170>
    3a1e:	0022      	movs	r2, r4
    3a20:	d100      	bne.n	3a24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x170>
    3a22:	460c      	mov	r4, r1
    3a24:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    3a28:	6869      	ldr	r1, [r5, #4]
    3a2a:	2900      	cmp	r1, #0
    3a2c:	d0ed      	beq.n	3a0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x156>
    3a2e:	7c69      	ldrb	r1, [r5, #17]
    3a30:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    3a34:	6869      	ldr	r1, [r5, #4]
    3a36:	680a      	ldr	r2, [r1, #0]
    3a38:	f840 2f83 	str.w	r2, [r0, #131]!
    3a3c:	8889      	ldrh	r1, [r1, #4]
    3a3e:	8081      	strh	r1, [r0, #4]
    3a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a42:	0000      	.short	0x0000
    3a44:	200000ec 	.word	0x200000ec
    3a48:	b510      	push	{r4, lr}
    3a4a:	4915      	ldr	r1, [pc, #84]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a4c:	6842      	ldr	r2, [r0, #4]
    3a4e:	6849      	ldr	r1, [r1, #4]
    3a50:	7813      	ldrb	r3, [r2, #0]
    3a52:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    3a56:	42a3      	cmp	r3, r4
    3a58:	d11f      	bne.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a5a:	7853      	ldrb	r3, [r2, #1]
    3a5c:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    3a60:	42a3      	cmp	r3, r4
    3a62:	d11a      	bne.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a64:	7893      	ldrb	r3, [r2, #2]
    3a66:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    3a6a:	42a3      	cmp	r3, r4
    3a6c:	d115      	bne.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a6e:	78d3      	ldrb	r3, [r2, #3]
    3a70:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    3a74:	42a3      	cmp	r3, r4
    3a76:	d110      	bne.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a78:	7913      	ldrb	r3, [r2, #4]
    3a7a:	f891 4087 	ldrb.w	r4, [r1, #135]	; 0x87
    3a7e:	42a3      	cmp	r3, r4
    3a80:	d10b      	bne.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a82:	7952      	ldrb	r2, [r2, #5]
    3a84:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
    3a88:	429a      	cmp	r2, r3
    3a8a:	d106      	bne.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a8c:	7c40      	ldrb	r0, [r0, #17]
    3a8e:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    3a92:	4288      	cmp	r0, r1
    3a94:	d101      	bne.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a96:	2001      	movs	r0, #1
    3a98:	bd10      	pop	{r4, pc}
    3a9a:	2000      	movs	r0, #0
    3a9c:	bd10      	pop	{r4, pc}
    3a9e:	0000      	.short	0x0000
    3aa0:	200000ec 	.word	0x200000ec
    3aa4:	b510      	push	{r4, lr}
    3aa6:	7801      	ldrb	r1, [r0, #0]
    3aa8:	b08c      	sub	sp, #48	; 0x30
    3aaa:	f001 040f 	and.w	r4, r1, #15
    3aae:	4622      	mov	r2, r4
    3ab0:	a901      	add	r1, sp, #4
    3ab2:	f000 ff15 	bl	48e0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    3ab6:	f004 f9fd 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3aba:	f000 fbb5 	bl	4228 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x228>
    3abe:	2c04      	cmp	r4, #4
    3ac0:	d114      	bne.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ac2:	a801      	add	r0, sp, #4
    3ac4:	f7ff ffc0 	bl	3a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>
    3ac8:	b180      	cbz	r0, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3aca:	a80b      	add	r0, sp, #44	; 0x2c
    3acc:	f000 fbb4 	bl	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    3ad0:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    3ad4:	9000      	str	r0, [sp, #0]
    3ad6:	4807      	ldr	r0, [pc, #28]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3ad8:	6840      	ldr	r0, [r0, #4]
    3ada:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    3ade:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    3ae2:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    3ae6:	a801      	add	r0, sp, #4
    3ae8:	f00b f8cb 	bl	ec82 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    3aec:	b00c      	add	sp, #48	; 0x30
    3aee:	2005      	movs	r0, #5
    3af0:	bd10      	pop	{r4, pc}
    3af2:	0000      	.short	0x0000
    3af4:	200000ec 	.word	0x200000ec
    3af8:	4804      	ldr	r0, [pc, #16]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3afa:	6840      	ldr	r0, [r0, #4]
    3afc:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3b00:	2803      	cmp	r0, #3
    3b02:	d001      	beq.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
    3b04:	2000      	movs	r0, #0
    3b06:	4770      	bx	lr
    3b08:	2001      	movs	r0, #1
    3b0a:	4770      	bx	lr
    3b0c:	200000ec 	.word	0x200000ec
    3b10:	7c82      	ldrb	r2, [r0, #18]
    3b12:	6883      	ldr	r3, [r0, #8]
    3b14:	4803      	ldr	r0, [pc, #12]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3b16:	6841      	ldr	r1, [r0, #4]
    3b18:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3b1c:	314a      	adds	r1, #74	; 0x4a
    3b1e:	f009 bfc0 	b.w	daa2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3b22:	0000      	.short	0x0000
    3b24:	200000ec 	.word	0x200000ec
    3b28:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    3b2a:	6841      	ldr	r1, [r0, #4]
    3b2c:	461e      	mov	r6, r3
    3b2e:	4604      	mov	r4, r0
    3b30:	b301      	cbz	r1, 3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
    3b32:	7c60      	ldrb	r0, [r4, #17]
    3b34:	f00a ff9a 	bl	ea6c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3b38:	4d19      	ldr	r5, [pc, #100]	; (3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>)
    3b3a:	6869      	ldr	r1, [r5, #4]
    3b3c:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    3b40:	b141      	cbz	r1, 3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b42:	b138      	cbz	r0, 3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b44:	f00a f85f 	bl	dc06 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3b48:	6869      	ldr	r1, [r5, #4]
    3b4a:	f801 0f78 	strb.w	r0, [r1, #120]!
    3b4e:	7048      	strb	r0, [r1, #1]
    3b50:	2001      	movs	r0, #1
    3b52:	71c8      	strb	r0, [r1, #7]
    3b54:	6868      	ldr	r0, [r5, #4]
    3b56:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3b5a:	28ff      	cmp	r0, #255	; 0xff
    3b5c:	d00c      	beq.n	3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>
    3b5e:	466a      	mov	r2, sp
    3b60:	a902      	add	r1, sp, #8
    3b62:	f7fe fbc7 	bl	22f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3b66:	b1a8      	cbz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b68:	4669      	mov	r1, sp
    3b6a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3b6e:	f00a ff51 	bl	ea14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3b72:	7030      	strb	r0, [r6, #0]
    3b74:	2000      	movs	r0, #0
    3b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b78:	7c60      	ldrb	r0, [r4, #17]
    3b7a:	6861      	ldr	r1, [r4, #4]
    3b7c:	f00a ff4a 	bl	ea14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3b80:	7030      	strb	r0, [r6, #0]
    3b82:	686a      	ldr	r2, [r5, #4]
    3b84:	7c60      	ldrb	r0, [r4, #17]
    3b86:	6861      	ldr	r1, [r4, #4]
    3b88:	3278      	adds	r2, #120	; 0x78
    3b8a:	f7fe fc45 	bl	2418 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    3b8e:	f080 0001 	eor.w	r0, r0, #1
    3b92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b94:	f640 5134 	movw	r1, #3380	; 0xd34
    3b98:	2032      	movs	r0, #50	; 0x32
    3b9a:	f7fc ff3f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b9e:	0000      	.short	0x0000
    3ba0:	200000ec 	.word	0x200000ec
    3ba4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3ba8:	4c41      	ldr	r4, [pc, #260]	; (3cb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x218>)
    3baa:	2500      	movs	r5, #0
    3bac:	466f      	mov	r7, sp
    3bae:	6860      	ldr	r0, [r4, #4]
    3bb0:	7245      	strb	r5, [r0, #9]
    3bb2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3bb4:	880a      	ldrh	r2, [r1, #0]
    3bb6:	8142      	strh	r2, [r0, #10]
    3bb8:	6908      	ldr	r0, [r1, #16]
    3bba:	f00a f893 	bl	dce4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3bbe:	6861      	ldr	r1, [r4, #4]
    3bc0:	f821 0f20 	strh.w	r0, [r1, #32]!
    3bc4:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3bc6:	8b02      	ldrh	r2, [r0, #24]
    3bc8:	804a      	strh	r2, [r1, #2]
    3bca:	8b40      	ldrh	r0, [r0, #26]
    3bcc:	8088      	strh	r0, [r1, #4]
    3bce:	718d      	strb	r5, [r1, #6]
    3bd0:	20ff      	movs	r0, #255	; 0xff
    3bd2:	71c8      	strb	r0, [r1, #7]
    3bd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3bd8:	8108      	strh	r0, [r1, #8]
    3bda:	4669      	mov	r1, sp
    3bdc:	68a0      	ldr	r0, [r4, #8]
    3bde:	f00a fabf 	bl	e160 <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    3be2:	68a0      	ldr	r0, [r4, #8]
    3be4:	7800      	ldrb	r0, [r0, #0]
    3be6:	f3c0 1680 	ubfx	r6, r0, #6, #1
    3bea:	6860      	ldr	r0, [r4, #4]
    3bec:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3bf0:	b120      	cbz	r0, 3bfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x164>
    3bf2:	4639      	mov	r1, r7
    3bf4:	4630      	mov	r0, r6
    3bf6:	f00a ff39 	bl	ea6c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3bfa:	b940      	cbnz	r0, 3c0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x176>
    3bfc:	6860      	ldr	r0, [r4, #4]
    3bfe:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3c02:	b158      	cbz	r0, 3c1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x184>
    3c04:	4639      	mov	r1, r7
    3c06:	4630      	mov	r0, r6
    3c08:	f00a ff27 	bl	ea5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    3c0c:	b130      	cbz	r0, 3c1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x184>
    3c0e:	6860      	ldr	r0, [r4, #4]
    3c10:	9900      	ldr	r1, [sp, #0]
    3c12:	6141      	str	r1, [r0, #20]
    3c14:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3c18:	8301      	strh	r1, [r0, #24]
    3c1a:	e002      	b.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c1c:	6860      	ldr	r0, [r4, #4]
    3c1e:	6145      	str	r5, [r0, #20]
    3c20:	8305      	strh	r5, [r0, #24]
    3c22:	6861      	ldr	r1, [r4, #4]
    3c24:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    3c28:	28ff      	cmp	r0, #255	; 0xff
    3c2a:	d017      	beq.n	3c5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c4>
    3c2c:	f101 020e 	add.w	r2, r1, #14
    3c30:	310d      	adds	r1, #13
    3c32:	f7fe fb5f 	bl	22f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3c36:	b160      	cbz	r0, 3c52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ba>
    3c38:	6860      	ldr	r0, [r4, #4]
    3c3a:	7b41      	ldrb	r1, [r0, #13]
    3c3c:	f041 0102 	orr.w	r1, r1, #2
    3c40:	7341      	strb	r1, [r0, #13]
    3c42:	f8d0 1083 	ldr.w	r1, [r0, #131]	; 0x83
    3c46:	f8c0 101a 	str.w	r1, [r0, #26]
    3c4a:	f8b0 1087 	ldrh.w	r1, [r0, #135]	; 0x87
    3c4e:	83c1      	strh	r1, [r0, #30]
    3c50:	e011      	b.n	3c76 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1de>
    3c52:	f241 51ac 	movw	r1, #5548	; 0x15ac
    3c56:	2032      	movs	r0, #50	; 0x32
    3c58:	f7fc fee0 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c5c:	f891 008a 	ldrb.w	r0, [r1, #138]	; 0x8a
    3c60:	7348      	strb	r0, [r1, #13]
    3c62:	f8d1 0083 	ldr.w	r0, [r1, #131]	; 0x83
    3c66:	f8c1 000e 	str.w	r0, [r1, #14]
    3c6a:	f8b1 0087 	ldrh.w	r0, [r1, #135]	; 0x87
    3c6e:	8248      	strh	r0, [r1, #18]
    3c70:	f8c1 501a 	str.w	r5, [r1, #26]
    3c74:	83cd      	strh	r5, [r1, #30]
    3c76:	6860      	ldr	r0, [r4, #4]
    3c78:	f990 105e 	ldrsb.w	r1, [r0, #94]	; 0x5e
    3c7c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3c7e:	f00a f8f2 	bl	de66 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    3c82:	2202      	movs	r2, #2
    3c84:	490b      	ldr	r1, [pc, #44]	; (3cb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x21c>)
    3c86:	6860      	ldr	r0, [r4, #4]
    3c88:	f00a fb63 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3c8c:	6860      	ldr	r0, [r4, #4]
    3c8e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3c90:	302a      	adds	r0, #42	; 0x2a
    3c92:	880a      	ldrh	r2, [r1, #0]
    3c94:	4908      	ldr	r1, [pc, #32]	; (3cb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x220>)
    3c96:	868a      	strh	r2, [r1, #52]	; 0x34
    3c98:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    3c9a:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    3c9e:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    3ca2:	2202      	movs	r2, #2
    3ca4:	4905      	ldr	r1, [pc, #20]	; (3cbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x224>)
    3ca6:	f00a fb68 	bl	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3caa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3cae:	0000      	.short	0x0000
    3cb0:	200000ec 	.word	0x200000ec
    3cb4:	0000397d 	.word	0x0000397d
    3cb8:	200009f0 	.word	0x200009f0
    3cbc:	00003915 	.word	0x00003915
    3cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cc4:	4c4c      	ldr	r4, [pc, #304]	; (3df8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x360>)
    3cc6:	4606      	mov	r6, r0
    3cc8:	2100      	movs	r1, #0
    3cca:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    3cce:	3570      	adds	r5, #112	; 0x70
    3cd0:	8001      	strh	r1, [r0, #0]
    3cd2:	2e03      	cmp	r6, #3
    3cd4:	d002      	beq.n	3cdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x244>
    3cd6:	2e05      	cmp	r6, #5
    3cd8:	d004      	beq.n	3ce4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24c>
    3cda:	e051      	b.n	3d80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e8>
    3cdc:	2103      	movs	r1, #3
    3cde:	f00a fa56 	bl	e18e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3ce2:	e04d      	b.n	3d80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e8>
    3ce4:	2105      	movs	r1, #5
    3ce6:	f00a fa52 	bl	e18e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3cea:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3cee:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3cf0:	6949      	ldr	r1, [r1, #20]
    3cf2:	f8c7 100f 	str.w	r1, [r7, #15]
    3cf6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3cf8:	69c9      	ldr	r1, [r1, #28]
    3cfa:	74f9      	strb	r1, [r7, #19]
    3cfc:	0a0a      	lsrs	r2, r1, #8
    3cfe:	753a      	strb	r2, [r7, #20]
    3d00:	0c09      	lsrs	r1, r1, #16
    3d02:	7579      	strb	r1, [r7, #21]
    3d04:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3d06:	6901      	ldr	r1, [r0, #16]
    3d08:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3d0a:	f00a f963 	bl	dfd4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3d0e:	75b8      	strb	r0, [r7, #22]
    3d10:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3d14:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3d16:	6901      	ldr	r1, [r0, #16]
    3d18:	6a00      	ldr	r0, [r0, #32]
    3d1a:	f00a f944 	bl	dfa6 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3d1e:	75f8      	strb	r0, [r7, #23]
    3d20:	0a00      	lsrs	r0, r0, #8
    3d22:	7638      	strb	r0, [r7, #24]
    3d24:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3d28:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3d2a:	6900      	ldr	r0, [r0, #16]
    3d2c:	f009 ffda 	bl	dce4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3d30:	7678      	strb	r0, [r7, #25]
    3d32:	0a00      	lsrs	r0, r0, #8
    3d34:	76b8      	strb	r0, [r7, #26]
    3d36:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3d3a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3d3c:	8b09      	ldrh	r1, [r1, #24]
    3d3e:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3d42:	0a09      	lsrs	r1, r1, #8
    3d44:	7079      	strb	r1, [r7, #1]
    3d46:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3d48:	8b49      	ldrh	r1, [r1, #26]
    3d4a:	70b9      	strb	r1, [r7, #2]
    3d4c:	0a09      	lsrs	r1, r1, #8
    3d4e:	70f9      	strb	r1, [r7, #3]
    3d50:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3d52:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3d56:	607a      	str	r2, [r7, #4]
    3d58:	7909      	ldrb	r1, [r1, #4]
    3d5a:	7239      	strb	r1, [r7, #8]
    3d5c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3d5e:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3d62:	7a78      	ldrb	r0, [r7, #9]
    3d64:	f001 011f 	and.w	r1, r1, #31
    3d68:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3d6c:	4308      	orrs	r0, r1
    3d6e:	7278      	strb	r0, [r7, #9]
    3d70:	f003 fe2a 	bl	79c8 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3d74:	7a79      	ldrb	r1, [r7, #9]
    3d76:	f001 011f 	and.w	r1, r1, #31
    3d7a:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3d7e:	7279      	strb	r1, [r7, #9]
    3d80:	f105 0113 	add.w	r1, r5, #19
    3d84:	68a0      	ldr	r0, [r4, #8]
    3d86:	f00a fa1d 	bl	e1c4 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3d8a:	7ea9      	ldrb	r1, [r5, #26]
    3d8c:	68a0      	ldr	r0, [r4, #8]
    3d8e:	f00a fa1f 	bl	e1d0 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3d92:	6860      	ldr	r0, [r4, #4]
    3d94:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3d98:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3d9c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3da0:	b188      	cbz	r0, 3dc6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32e>
    3da2:	f7ff fea9 	bl	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3da6:	b130      	cbz	r0, 3db6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x31e>
    3da8:	6860      	ldr	r0, [r4, #4]
    3daa:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3dae:	b111      	cbz	r1, 3db6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x31e>
    3db0:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3db4:	e002      	b.n	3dbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x324>
    3db6:	6860      	ldr	r0, [r4, #4]
    3db8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3dbc:	f7fe fa66 	bl	228c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3dc0:	b108      	cbz	r0, 3dc6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32e>
    3dc2:	2701      	movs	r7, #1
    3dc4:	4605      	mov	r5, r0
    3dc6:	4629      	mov	r1, r5
    3dc8:	68a0      	ldr	r0, [r4, #8]
    3dca:	f00a fa08 	bl	e1de <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3dce:	4639      	mov	r1, r7
    3dd0:	68a0      	ldr	r0, [r4, #8]
    3dd2:	f00a fa0a 	bl	e1ea <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3dd6:	68a0      	ldr	r0, [r4, #8]
    3dd8:	f004 fa9c 	bl	8314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3ddc:	2e05      	cmp	r6, #5
    3dde:	d108      	bne.n	3df2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35a>
    3de0:	6860      	ldr	r0, [r4, #4]
    3de2:	682a      	ldr	r2, [r5, #0]
    3de4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3de6:	f8c1 200a 	str.w	r2, [r1, #10]
    3dea:	88aa      	ldrh	r2, [r5, #4]
    3dec:	81ca      	strh	r2, [r1, #14]
    3dee:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3df0:	7247      	strb	r7, [r0, #9]
    3df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3df6:	0000      	.short	0x0000
    3df8:	200000ec 	.word	0x200000ec
    3dfc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3e00:	4f65      	ldr	r7, [pc, #404]	; (3f98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x500>)
    3e02:	4604      	mov	r4, r0
    3e04:	6878      	ldr	r0, [r7, #4]
    3e06:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3e0a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3e0e:	b180      	cbz	r0, 3e32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39a>
    3e10:	2600      	movs	r6, #0
    3e12:	2500      	movs	r5, #0
    3e14:	7ca0      	ldrb	r0, [r4, #18]
    3e16:	68a1      	ldr	r1, [r4, #8]
    3e18:	f00a fe28 	bl	ea6c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3e1c:	4682      	mov	sl, r0
    3e1e:	f7ff fe6b 	bl	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3e22:	b140      	cbz	r0, 3e36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39e>
    3e24:	6878      	ldr	r0, [r7, #4]
    3e26:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3e2a:	b121      	cbz	r1, 3e36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39e>
    3e2c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3e30:	e004      	b.n	3e3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a4>
    3e32:	2601      	movs	r6, #1
    3e34:	e7ed      	b.n	3e12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x37a>
    3e36:	6878      	ldr	r0, [r7, #4]
    3e38:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3e3c:	4683      	mov	fp, r0
    3e3e:	f7fe f9b1 	bl	21a4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3e42:	ea5f 0900 	movs.w	r9, r0
    3e46:	d00c      	beq.n	3e62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ca>
    3e48:	4658      	mov	r0, fp
    3e4a:	f7fe f99f 	bl	218c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3e4e:	b100      	cbz	r0, 3e52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ba>
    3e50:	2601      	movs	r6, #1
    3e52:	f1ba 0f00 	cmp.w	sl, #0
    3e56:	d004      	beq.n	3e62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ca>
    3e58:	4648      	mov	r0, r9
    3e5a:	68a1      	ldr	r1, [r4, #8]
    3e5c:	f009 fe86 	bl	db6c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3e60:	4605      	mov	r5, r0
    3e62:	6878      	ldr	r0, [r7, #4]
    3e64:	46b9      	mov	r9, r7
    3e66:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3e6a:	b10d      	cbz	r5, 3e70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d8>
    3e6c:	f047 0702 	orr.w	r7, r7, #2
    3e70:	f7ff fe42 	bl	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3e74:	b3a0      	cbz	r0, 3ee0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x448>
    3e76:	6860      	ldr	r0, [r4, #4]
    3e78:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3e7c:	7802      	ldrb	r2, [r0, #0]
    3e7e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3e82:	429a      	cmp	r2, r3
    3e84:	d11f      	bne.n	3ec6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42e>
    3e86:	7842      	ldrb	r2, [r0, #1]
    3e88:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3e8c:	429a      	cmp	r2, r3
    3e8e:	d11a      	bne.n	3ec6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42e>
    3e90:	7882      	ldrb	r2, [r0, #2]
    3e92:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3e96:	429a      	cmp	r2, r3
    3e98:	d115      	bne.n	3ec6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42e>
    3e9a:	78c2      	ldrb	r2, [r0, #3]
    3e9c:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3ea0:	429a      	cmp	r2, r3
    3ea2:	d110      	bne.n	3ec6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42e>
    3ea4:	7902      	ldrb	r2, [r0, #4]
    3ea6:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3eaa:	429a      	cmp	r2, r3
    3eac:	d10b      	bne.n	3ec6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42e>
    3eae:	7940      	ldrb	r0, [r0, #5]
    3eb0:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3eb4:	4290      	cmp	r0, r2
    3eb6:	d106      	bne.n	3ec6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42e>
    3eb8:	7c60      	ldrb	r0, [r4, #17]
    3eba:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3ebe:	4288      	cmp	r0, r1
    3ec0:	d101      	bne.n	3ec6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42e>
    3ec2:	2001      	movs	r0, #1
    3ec4:	e000      	b.n	3ec8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x430>
    3ec6:	2000      	movs	r0, #0
    3ec8:	4f34      	ldr	r7, [pc, #208]	; (3f9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x504>)
    3eca:	4682      	mov	sl, r0
    3ecc:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3ed0:	2808      	cmp	r0, #8
    3ed2:	d006      	beq.n	3ee2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44a>
    3ed4:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3ed8:	4288      	cmp	r0, r1
    3eda:	d102      	bne.n	3ee2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44a>
    3edc:	2001      	movs	r0, #1
    3ede:	e001      	b.n	3ee4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44c>
    3ee0:	e021      	b.n	3f26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48e>
    3ee2:	2000      	movs	r0, #0
    3ee4:	4681      	mov	r9, r0
    3ee6:	b925      	cbnz	r5, 3ef2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x45a>
    3ee8:	b12e      	cbz	r6, 3ef6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x45e>
    3eea:	4620      	mov	r0, r4
    3eec:	f7ff fe10 	bl	3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>
    3ef0:	b108      	cbz	r0, 3ef6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x45e>
    3ef2:	2001      	movs	r0, #1
    3ef4:	e000      	b.n	3ef8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x460>
    3ef6:	2000      	movs	r0, #0
    3ef8:	f1b8 0f00 	cmp.w	r8, #0
    3efc:	d009      	beq.n	3f12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47a>
    3efe:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3f02:	2901      	cmp	r1, #1
    3f04:	d003      	beq.n	3f0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x476>
    3f06:	b921      	cbnz	r1, 3f12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47a>
    3f08:	ea5a 0109 	orrs.w	r1, sl, r9
    3f0c:	d001      	beq.n	3f12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47a>
    3f0e:	2101      	movs	r1, #1
    3f10:	e000      	b.n	3f14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47c>
    3f12:	2100      	movs	r1, #0
    3f14:	4208      	tst	r0, r1
    3f16:	d003      	beq.n	3f20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x488>
    3f18:	200c      	movs	r0, #12
    3f1a:	b004      	add	sp, #16
    3f1c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3f20:	f003 ffc8 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f24:	e036      	b.n	3f94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4fc>
    3f26:	f003 ffc5 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f2a:	f1b8 0f00 	cmp.w	r8, #0
    3f2e:	d031      	beq.n	3f94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4fc>
    3f30:	4620      	mov	r0, r4
    3f32:	f7ff fded 	bl	3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>
    3f36:	b900      	cbnz	r0, 3f3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a2>
    3f38:	b175      	cbz	r5, 3f58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c0>
    3f3a:	a803      	add	r0, sp, #12
    3f3c:	f000 f97c 	bl	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    3f40:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3f44:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3f48:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3f4c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    3f50:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3f54:	463b      	mov	r3, r7
    3f56:	e018      	b.n	3f8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4f2>
    3f58:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3f5c:	464d      	mov	r5, r9
    3f5e:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3f62:	2803      	cmp	r0, #3
    3f64:	d001      	beq.n	3f6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d2>
    3f66:	2802      	cmp	r0, #2
    3f68:	d114      	bne.n	3f94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4fc>
    3f6a:	f1ba 0f00 	cmp.w	sl, #0
    3f6e:	d011      	beq.n	3f94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4fc>
    3f70:	a803      	add	r0, sp, #12
    3f72:	f000 f961 	bl	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    3f76:	686a      	ldr	r2, [r5, #4]
    3f78:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3f7c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3f80:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    3f84:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3f88:	23fe      	movs	r3, #254	; 0xfe
    3f8a:	2101      	movs	r1, #1
    3f8c:	4620      	mov	r0, r4
    3f8e:	324a      	adds	r2, #74	; 0x4a
    3f90:	f00a fdff 	bl	eb92 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3f94:	2005      	movs	r0, #5
    3f96:	e7c0      	b.n	3f1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x482>
    3f98:	200000ec 	.word	0x200000ec
    3f9c:	200009f0 	.word	0x200009f0
    3fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3fa2:	4c3f      	ldr	r4, [pc, #252]	; (40a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa0>)
    3fa4:	4605      	mov	r5, r0
    3fa6:	6860      	ldr	r0, [r4, #4]
    3fa8:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3fac:	2900      	cmp	r1, #0
    3fae:	d06c      	beq.n	408a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a>
    3fb0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3fb4:	2802      	cmp	r0, #2
    3fb6:	d02c      	beq.n	4012 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12>
    3fb8:	2801      	cmp	r0, #1
    3fba:	d043      	beq.n	4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>
    3fbc:	f7ff fd9c 	bl	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3fc0:	2800      	cmp	r0, #0
    3fc2:	d067      	beq.n	4094 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x94>
    3fc4:	686a      	ldr	r2, [r5, #4]
    3fc6:	6861      	ldr	r1, [r4, #4]
    3fc8:	7810      	ldrb	r0, [r2, #0]
    3fca:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3fce:	4298      	cmp	r0, r3
    3fd0:	d14c      	bne.n	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    3fd2:	7850      	ldrb	r0, [r2, #1]
    3fd4:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3fd8:	4298      	cmp	r0, r3
    3fda:	d147      	bne.n	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    3fdc:	7890      	ldrb	r0, [r2, #2]
    3fde:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3fe2:	4298      	cmp	r0, r3
    3fe4:	d142      	bne.n	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    3fe6:	78d0      	ldrb	r0, [r2, #3]
    3fe8:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3fec:	4298      	cmp	r0, r3
    3fee:	d13d      	bne.n	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    3ff0:	7910      	ldrb	r0, [r2, #4]
    3ff2:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3ff6:	4298      	cmp	r0, r3
    3ff8:	d138      	bne.n	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    3ffa:	7950      	ldrb	r0, [r2, #5]
    3ffc:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    4000:	4290      	cmp	r0, r2
    4002:	d133      	bne.n	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    4004:	7c68      	ldrb	r0, [r5, #17]
    4006:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    400a:	4290      	cmp	r0, r2
    400c:	d12e      	bne.n	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    400e:	2001      	movs	r0, #1
    4010:	e02d      	b.n	406e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e>
    4012:	a803      	add	r0, sp, #12
    4014:	f000 f910 	bl	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    4018:	6862      	ldr	r2, [r4, #4]
    401a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    401e:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    4022:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    4026:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    402a:	23ff      	movs	r3, #255	; 0xff
    402c:	2100      	movs	r1, #0
    402e:	4628      	mov	r0, r5
    4030:	324a      	adds	r2, #74	; 0x4a
    4032:	f00a fdae 	bl	eb92 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    4036:	6861      	ldr	r1, [r4, #4]
    4038:	2001      	movs	r0, #1
    403a:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    403e:	200b      	movs	r0, #11
    4040:	b004      	add	sp, #16
    4042:	bd70      	pop	{r4, r5, r6, pc}
    4044:	a803      	add	r0, sp, #12
    4046:	f000 f8f7 	bl	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    404a:	6862      	ldr	r2, [r4, #4]
    404c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    4050:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    4054:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    4058:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    405c:	23ff      	movs	r3, #255	; 0xff
    405e:	2100      	movs	r1, #0
    4060:	4628      	mov	r0, r5
    4062:	324a      	adds	r2, #74	; 0x4a
    4064:	f00a fd95 	bl	eb92 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    4068:	2005      	movs	r0, #5
    406a:	e7e9      	b.n	4040 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40>
    406c:	2000      	movs	r0, #0
    406e:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    4072:	2901      	cmp	r1, #1
    4074:	d00c      	beq.n	4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    4076:	b958      	cbnz	r0, 4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    4078:	490a      	ldr	r1, [pc, #40]	; (40a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4>)
    407a:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    407e:	2808      	cmp	r0, #8
    4080:	d003      	beq.n	408a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a>
    4082:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    4086:	4281      	cmp	r1, r0
    4088:	d002      	beq.n	4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    408a:	f003 ff13 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    408e:	e7eb      	b.n	4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>
    4090:	200c      	movs	r0, #12
    4092:	e7d5      	b.n	4040 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40>
    4094:	f640 61e5 	movw	r1, #3813	; 0xee5
    4098:	2032      	movs	r0, #50	; 0x32
    409a:	f7fc fcbf 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    409e:	0000      	.short	0x0000
    40a0:	200000ec 	.word	0x200000ec
    40a4:	200009f0 	.word	0x200009f0
    40a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    40aa:	4c1e      	ldr	r4, [pc, #120]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    40ac:	4605      	mov	r5, r0
    40ae:	6860      	ldr	r0, [r4, #4]
    40b0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    40b4:	b129      	cbz	r1, 40c2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc2>
    40b6:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    40ba:	2802      	cmp	r0, #2
    40bc:	d004      	beq.n	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    40be:	2801      	cmp	r0, #1
    40c0:	d01b      	beq.n	40fa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xfa>
    40c2:	f003 fef7 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    40c6:	e02a      	b.n	411e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11e>
    40c8:	a803      	add	r0, sp, #12
    40ca:	f000 f8b5 	bl	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    40ce:	6862      	ldr	r2, [r4, #4]
    40d0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    40d4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    40d8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    40dc:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    40e0:	23ff      	movs	r3, #255	; 0xff
    40e2:	2106      	movs	r1, #6
    40e4:	4628      	mov	r0, r5
    40e6:	324a      	adds	r2, #74	; 0x4a
    40e8:	f00a fd53 	bl	eb92 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    40ec:	6862      	ldr	r2, [r4, #4]
    40ee:	200b      	movs	r0, #11
    40f0:	2100      	movs	r1, #0
    40f2:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    40f6:	b004      	add	sp, #16
    40f8:	bd70      	pop	{r4, r5, r6, pc}
    40fa:	a803      	add	r0, sp, #12
    40fc:	f000 f89c 	bl	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    4100:	6862      	ldr	r2, [r4, #4]
    4102:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    4106:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    410a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    410e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    4112:	23ff      	movs	r3, #255	; 0xff
    4114:	2106      	movs	r1, #6
    4116:	4628      	mov	r0, r5
    4118:	324a      	adds	r2, #74	; 0x4a
    411a:	f00a fd3a 	bl	eb92 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    411e:	2005      	movs	r0, #5
    4120:	e7e9      	b.n	40f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf6>
    4122:	0000      	.short	0x0000
    4124:	200000ec 	.word	0x200000ec
    4128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    412a:	b389      	cbz	r1, 4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    412c:	2901      	cmp	r1, #1
    412e:	d034      	beq.n	419a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19a>
    4130:	2505      	movs	r5, #5
    4132:	2902      	cmp	r1, #2
    4134:	d004      	beq.n	4140 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x140>
    4136:	2906      	cmp	r1, #6
    4138:	d025      	beq.n	4186 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x186>
    413a:	f003 febb 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    413e:	e01f      	b.n	4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>
    4140:	4606      	mov	r6, r0
    4142:	f003 feb7 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4146:	4c17      	ldr	r4, [pc, #92]	; (41a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a4>)
    4148:	6860      	ldr	r0, [r4, #4]
    414a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    414e:	b1b9      	cbz	r1, 4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>
    4150:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4154:	2801      	cmp	r0, #1
    4156:	d001      	beq.n	415c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x15c>
    4158:	2802      	cmp	r0, #2
    415a:	d111      	bne.n	4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>
    415c:	a803      	add	r0, sp, #12
    415e:	f000 f86b 	bl	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    4162:	6862      	ldr	r2, [r4, #4]
    4164:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    4168:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    416c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    4170:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    4174:	23ff      	movs	r3, #255	; 0xff
    4176:	2102      	movs	r1, #2
    4178:	4630      	mov	r0, r6
    417a:	324a      	adds	r2, #74	; 0x4a
    417c:	f00a fd09 	bl	eb92 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    4180:	b004      	add	sp, #16
    4182:	4628      	mov	r0, r5
    4184:	bd70      	pop	{r4, r5, r6, pc}
    4186:	b004      	add	sp, #16
    4188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    418c:	f7ff bf8c 	b.w	40a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa8>
    4190:	b004      	add	sp, #16
    4192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4196:	f7ff bf03 	b.w	3fa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x508>
    419a:	b004      	add	sp, #16
    419c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41a0:	f7ff be2c 	b.w	3dfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x364>
    41a4:	200000ec 	.word	0x200000ec
    41a8:	b570      	push	{r4, r5, r6, lr}
    41aa:	4c11      	ldr	r4, [pc, #68]	; (41f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f0>)
    41ac:	4605      	mov	r5, r0
    41ae:	6861      	ldr	r1, [r4, #4]
    41b0:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    41b4:	2800      	cmp	r0, #0
    41b6:	d019      	beq.n	41ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ec>
    41b8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    41bc:	2800      	cmp	r0, #0
    41be:	d015      	beq.n	41ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ec>
    41c0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    41c4:	314a      	adds	r1, #74	; 0x4a
    41c6:	f00a fc51 	bl	ea6c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    41ca:	b140      	cbz	r0, 41de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1de>
    41cc:	f7fd ffda 	bl	2184 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    41d0:	6861      	ldr	r1, [r4, #4]
    41d2:	462a      	mov	r2, r5
    41d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41d8:	314a      	adds	r1, #74	; 0x4a
    41da:	f009 bc92 	b.w	db02 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    41de:	6860      	ldr	r0, [r4, #4]
    41e0:	4629      	mov	r1, r5
    41e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41e6:	304a      	adds	r0, #74	; 0x4a
    41e8:	f009 bc7a 	b.w	dae0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    41ec:	bd70      	pop	{r4, r5, r6, pc}
    41ee:	0000      	.short	0x0000
    41f0:	200000ec 	.word	0x200000ec
    41f4:	4602      	mov	r2, r0
    41f6:	480b      	ldr	r0, [pc, #44]	; (4224 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x224>)
    41f8:	b082      	sub	sp, #8
    41fa:	6840      	ldr	r0, [r0, #4]
    41fc:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    4200:	f88d 1000 	strb.w	r1, [sp]
    4204:	9900      	ldr	r1, [sp, #0]
    4206:	9100      	str	r1, [sp, #0]
    4208:	f89d 1000 	ldrb.w	r1, [sp]
    420c:	2900      	cmp	r1, #0
    420e:	d107      	bne.n	4220 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x220>
    4210:	6e81      	ldr	r1, [r0, #104]	; 0x68
    4212:	2900      	cmp	r1, #0
    4214:	d004      	beq.n	4220 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x220>
    4216:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    421a:	b002      	add	sp, #8
    421c:	f007 b87c 	b.w	b318 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4220:	b002      	add	sp, #8
    4222:	4770      	bx	lr
    4224:	200000ec 	.word	0x200000ec
    4228:	b510      	push	{r4, lr}
    422a:	f7fe fa83 	bl	2734 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    422e:	4901      	ldr	r1, [pc, #4]	; (4234 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x234>)
    4230:	7008      	strb	r0, [r1, #0]
    4232:	bd10      	pop	{r4, pc}
    4234:	200000ec 	.word	0x200000ec
    4238:	4a07      	ldr	r2, [pc, #28]	; (4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>)
    423a:	b510      	push	{r4, lr}
    423c:	f992 1000 	ldrsb.w	r1, [r2]
    4240:	297f      	cmp	r1, #127	; 0x7f
    4242:	d003      	beq.n	424c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24c>
    4244:	7001      	strb	r1, [r0, #0]
    4246:	207f      	movs	r0, #127	; 0x7f
    4248:	7010      	strb	r0, [r2, #0]
    424a:	bd10      	pop	{r4, pc}
    424c:	f240 414d 	movw	r1, #1101	; 0x44d
    4250:	2032      	movs	r0, #50	; 0x32
    4252:	f7fc fbe3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4256:	0000      	.short	0x0000
    4258:	200000ec 	.word	0x200000ec
    425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4260:	4607      	mov	r7, r0
    4262:	f7fd f86d 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4266:	4604      	mov	r4, r0
    4268:	f7fd f870 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    426c:	4621      	mov	r1, r4
    426e:	f00a fc6b 	bl	eb48 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    4272:	0005      	movs	r5, r0
    4274:	d012      	beq.n	429c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x29c>
    4276:	4c2d      	ldr	r4, [pc, #180]	; (432c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32c>)
    4278:	6860      	ldr	r0, [r4, #4]
    427a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    427e:	2801      	cmp	r0, #1
    4280:	d004      	beq.n	428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>
    4282:	2802      	cmp	r0, #2
    4284:	d002      	beq.n	428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>
    4286:	f7ff fc37 	bl	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    428a:	b150      	cbz	r0, 42a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a2>
    428c:	f06f 0613 	mvn.w	r6, #19
    4290:	b33f      	cbz	r7, 42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
    4292:	4628      	mov	r0, r5
    4294:	f009 ff4c 	bl	e130 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    4298:	b950      	cbnz	r0, 42b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b0>
    429a:	e005      	b.n	42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>
    429c:	f241 5157 	movw	r1, #5463	; 0x1557
    42a0:	e03a      	b.n	4318 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x318>
    42a2:	f241 515d 	movw	r1, #5469	; 0x155d
    42a6:	e037      	b.n	4318 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x318>
    42a8:	4628      	mov	r0, r5
    42aa:	f009 ff63 	bl	e174 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    42ae:	b1c0      	cbz	r0, 42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
    42b0:	6861      	ldr	r1, [r4, #4]
    42b2:	4628      	mov	r0, r5
    42b4:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    42b8:	2a05      	cmp	r2, #5
    42ba:	d202      	bcs.n	42c2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c2>
    42bc:	f241 41dc 	movw	r1, #5340	; 0x14dc
    42c0:	e02a      	b.n	4318 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x318>
    42c2:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    42c6:	2a0b      	cmp	r2, #11
    42c8:	d302      	bcc.n	42d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d0>
    42ca:	f241 41dd 	movw	r1, #5341	; 0x14dd
    42ce:	e023      	b.n	4318 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x318>
    42d0:	68e2      	ldr	r2, [r4, #12]
    42d2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    42d6:	6952      	ldr	r2, [r2, #20]
    42d8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    42dc:	5851      	ldr	r1, [r2, r1]
    42de:	4788      	blx	r1
    42e0:	e016      	b.n	4310 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x310>
    42e2:	6860      	ldr	r0, [r4, #4]
    42e4:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    42e8:	2905      	cmp	r1, #5
    42ea:	d202      	bcs.n	42f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f2>
    42ec:	f241 514d 	movw	r1, #5453	; 0x154d
    42f0:	e012      	b.n	4318 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x318>
    42f2:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    42f6:	290b      	cmp	r1, #11
    42f8:	d302      	bcc.n	4300 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x300>
    42fa:	f241 514e 	movw	r1, #5454	; 0x154e
    42fe:	e00b      	b.n	4318 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x318>
    4300:	68e1      	ldr	r1, [r4, #12]
    4302:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4306:	6989      	ldr	r1, [r1, #24]
    4308:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    430c:	5808      	ldr	r0, [r1, r0]
    430e:	4780      	blx	r0
    4310:	280f      	cmp	r0, #15
    4312:	d304      	bcc.n	431e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x31e>
    4314:	f241 5172 	movw	r1, #5490	; 0x1572
    4318:	2032      	movs	r0, #50	; 0x32
    431a:	f7fc fb7f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    431e:	68e1      	ldr	r1, [r4, #12]
    4320:	6909      	ldr	r1, [r1, #16]
    4322:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    432a:	4700      	bx	r0
    432c:	200000ec 	.word	0x200000ec
    4330:	b510      	push	{r4, lr}
    4332:	b118      	cbz	r0, 433c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33c>
    4334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4338:	f000 b918 	b.w	456c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56c>
    433c:	2900      	cmp	r1, #0
    433e:	d01d      	beq.n	437c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x37c>
    4340:	480f      	ldr	r0, [pc, #60]	; (4380 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x380>)
    4342:	6841      	ldr	r1, [r0, #4]
    4344:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4348:	2a0b      	cmp	r2, #11
    434a:	d202      	bcs.n	4352 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x352>
    434c:	f241 612d 	movw	r1, #5677	; 0x162d
    4350:	e005      	b.n	435e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x35e>
    4352:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4356:	2a0f      	cmp	r2, #15
    4358:	d304      	bcc.n	4364 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x364>
    435a:	f241 612e 	movw	r1, #5678	; 0x162e
    435e:	2032      	movs	r0, #50	; 0x32
    4360:	f7fc fb5c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4364:	68c0      	ldr	r0, [r0, #12]
    4366:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    436a:	6880      	ldr	r0, [r0, #8]
    436c:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    4370:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4374:	5840      	ldr	r0, [r0, r1]
    4376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    437a:	4700      	bx	r0
    437c:	bd10      	pop	{r4, pc}
    437e:	0000      	.short	0x0000
    4380:	200000ec 	.word	0x200000ec
    4384:	b510      	push	{r4, lr}
    4386:	f7ff fab3 	bl	38f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    438a:	f000 f8fd 	bl	4588 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x588>
    438e:	4805      	ldr	r0, [pc, #20]	; (43a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a4>)
    4390:	6881      	ldr	r1, [r0, #8]
    4392:	2000      	movs	r0, #0
    4394:	f7ff fc06 	bl	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
    4398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    439c:	2002      	movs	r0, #2
    439e:	f000 bad7 	b.w	4950 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    43a2:	0000      	.short	0x0000
    43a4:	200000ec 	.word	0x200000ec
    43a8:	b510      	push	{r4, lr}
    43aa:	f7fc ffc9 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    43ae:	4604      	mov	r4, r0
    43b0:	f7fc ffcc 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    43b4:	4621      	mov	r1, r4
    43b6:	f00a fbc7 	bl	eb48 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    43ba:	b150      	cbz	r0, 43d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3d2>
    43bc:	f003 ffaa 	bl	8314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    43c0:	2000      	movs	r0, #0
    43c2:	f003 fe6d 	bl	80a0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    43c6:	4905      	ldr	r1, [pc, #20]	; (43dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3dc>)
    43c8:	2006      	movs	r0, #6
    43ca:	6849      	ldr	r1, [r1, #4]
    43cc:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    43d0:	bd10      	pop	{r4, pc}
    43d2:	f44f 61c6 	mov.w	r1, #1584	; 0x630
    43d6:	2032      	movs	r0, #50	; 0x32
    43d8:	f7fc fb20 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43dc:	200000ec 	.word	0x200000ec
    43e0:	490f      	ldr	r1, [pc, #60]	; (4420 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x420>)
    43e2:	b510      	push	{r4, lr}
    43e4:	6848      	ldr	r0, [r1, #4]
    43e6:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    43ea:	2a05      	cmp	r2, #5
    43ec:	d202      	bcs.n	43f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3f4>
    43ee:	f241 6161 	movw	r1, #5729	; 0x1661
    43f2:	e005      	b.n	4400 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x400>
    43f4:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    43f8:	2a0b      	cmp	r2, #11
    43fa:	d304      	bcc.n	4406 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x406>
    43fc:	f241 6162 	movw	r1, #5730	; 0x1662
    4400:	2032      	movs	r0, #50	; 0x32
    4402:	f7fc fb0b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4406:	68c9      	ldr	r1, [r1, #12]
    4408:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    440c:	68c9      	ldr	r1, [r1, #12]
    440e:	f06f 0213 	mvn.w	r2, #19
    4412:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4416:	5808      	ldr	r0, [r1, r0]
    4418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    441c:	4700      	bx	r0
    441e:	0000      	.short	0x0000
    4420:	200000ec 	.word	0x200000ec
    4424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4428:	4c2c      	ldr	r4, [pc, #176]	; (44dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4dc>)
    442a:	4605      	mov	r5, r0
    442c:	460e      	mov	r6, r1
    442e:	6860      	ldr	r0, [r4, #4]
    4430:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4434:	b120      	cbz	r0, 4440 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x440>
    4436:	2801      	cmp	r0, #1
    4438:	d002      	beq.n	4440 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x440>
    443a:	200c      	movs	r0, #12
    443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4440:	f003 fec2 	bl	81c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4444:	f003 fd14 	bl	7e70 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4448:	f003 fb38 	bl	7abc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    444c:	4824      	ldr	r0, [pc, #144]	; (44e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e0>)
    444e:	f003 fe1f 	bl	8090 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4452:	4824      	ldr	r0, [pc, #144]	; (44e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e4>)
    4454:	f004 f822 	bl	849c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4458:	4823      	ldr	r0, [pc, #140]	; (44e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e8>)
    445a:	f004 f815 	bl	8488 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    445e:	4630      	mov	r0, r6
    4460:	f003 ff58 	bl	8314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4464:	7968      	ldrb	r0, [r5, #5]
    4466:	b110      	cbz	r0, 446e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x46e>
    4468:	2001      	movs	r0, #1
    446a:	f7ff fec3 	bl	41f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f4>
    446e:	7928      	ldrb	r0, [r5, #4]
    4470:	2803      	cmp	r0, #3
    4472:	d001      	beq.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4474:	b118      	cbz	r0, 447e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x47e>
    4476:	e018      	b.n	44aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4aa>
    4478:	f640 2152 	movw	r1, #2642	; 0xa52
    447c:	e02a      	b.n	44d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4d4>
    447e:	6861      	ldr	r1, [r4, #4]
    4480:	2000      	movs	r0, #0
    4482:	2503      	movs	r5, #3
    4484:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    4488:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    448c:	1c52      	adds	r2, r2, #1
    448e:	fbb2 f7f5 	udiv	r7, r2, r5
    4492:	fb05 2217 	mls	r2, r5, r7, r2
    4496:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    449a:	fa23 f202 	lsr.w	r2, r3, r2
    449e:	07d2      	lsls	r2, r2, #31
    44a0:	d103      	bne.n	44aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4aa>
    44a2:	1c40      	adds	r0, r0, #1
    44a4:	b2c0      	uxtb	r0, r0
    44a6:	2803      	cmp	r0, #3
    44a8:	d3ee      	bcc.n	4488 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x488>
    44aa:	6860      	ldr	r0, [r4, #4]
    44ac:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    44b0:	f003 ff0e 	bl	82d0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    44b4:	4631      	mov	r1, r6
    44b6:	2001      	movs	r0, #1
    44b8:	f7ff fa38 	bl	392c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78>
    44bc:	2800      	cmp	r0, #0
    44be:	d0bd      	beq.n	443c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x43c>
    44c0:	f000 f91a 	bl	46f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6f8>
    44c4:	4809      	ldr	r0, [pc, #36]	; (44ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4ec>)
    44c6:	6800      	ldr	r0, [r0, #0]
    44c8:	2803      	cmp	r0, #3
    44ca:	d001      	beq.n	44d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4d0>
    44cc:	2000      	movs	r0, #0
    44ce:	e7b5      	b.n	443c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x43c>
    44d0:	f44f 6126 	mov.w	r1, #2656	; 0xa60
    44d4:	2032      	movs	r0, #50	; 0x32
    44d6:	f7fc faa1 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44da:	0000      	.short	0x0000
    44dc:	200000ec 	.word	0x200000ec
    44e0:	000047e0 	.word	0x000047e0
    44e4:	00555555 	.word	0x00555555
    44e8:	8e89bed6 	.word	0x8e89bed6
    44ec:	40001550 	.word	0x40001550
    44f0:	b510      	push	{r4, lr}
    44f2:	2000      	movs	r0, #0
    44f4:	f7ff fe7e 	bl	41f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f4>
    44f8:	4808      	ldr	r0, [pc, #32]	; (451c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x51c>)
    44fa:	6840      	ldr	r0, [r0, #4]
    44fc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4500:	b128      	cbz	r0, 450e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50e>
    4502:	2801      	cmp	r0, #1
    4504:	d003      	beq.n	450e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50e>
    4506:	2802      	cmp	r0, #2
    4508:	d004      	beq.n	4514 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x514>
    450a:	200c      	movs	r0, #12
    450c:	bd10      	pop	{r4, pc}
    450e:	f000 f82d 	bl	456c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56c>
    4512:	e001      	b.n	4518 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x518>
    4514:	f000 f840 	bl	4598 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x598>
    4518:	2000      	movs	r0, #0
    451a:	bd10      	pop	{r4, pc}
    451c:	200000ec 	.word	0x200000ec
    4520:	b510      	push	{r4, lr}
    4522:	2000      	movs	r0, #0
    4524:	7048      	strb	r0, [r1, #1]
    4526:	2019      	movs	r0, #25
    4528:	7008      	strb	r0, [r1, #0]
    452a:	480f      	ldr	r0, [pc, #60]	; (4568 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x568>)
    452c:	6840      	ldr	r0, [r0, #4]
    452e:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4532:	6048      	str	r0, [r1, #4]
    4534:	7908      	ldrb	r0, [r1, #4]
    4536:	2801      	cmp	r0, #1
    4538:	d114      	bne.n	4564 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x564>
    453a:	88cc      	ldrh	r4, [r1, #6]
    453c:	2100      	movs	r1, #0
    453e:	4620      	mov	r0, r4
    4540:	f7fc fd4e 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4544:	2800      	cmp	r0, #0
    4546:	d00d      	beq.n	4564 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x564>
    4548:	4620      	mov	r0, r4
    454a:	f009 faa6 	bl	da9a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    454e:	2100      	movs	r1, #0
    4550:	4620      	mov	r0, r4
    4552:	f7fc fddb 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4556:	2800      	cmp	r0, #0
    4558:	d004      	beq.n	4564 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x564>
    455a:	f240 4115 	movw	r1, #1045	; 0x415
    455e:	2032      	movs	r0, #50	; 0x32
    4560:	f7fc fa5c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4564:	bd10      	pop	{r4, pc}
    4566:	0000      	.short	0x0000
    4568:	200000ec 	.word	0x200000ec
    456c:	b510      	push	{r4, lr}
    456e:	f7ff f9bf 	bl	38f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4572:	4904      	ldr	r1, [pc, #16]	; (4584 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x584>)
    4574:	2001      	movs	r0, #1
    4576:	6849      	ldr	r1, [r1, #4]
    4578:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4580:	f000 bb0a 	b.w	4b98 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    4584:	200000ec 	.word	0x200000ec
    4588:	4902      	ldr	r1, [pc, #8]	; (4594 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x594>)
    458a:	2000      	movs	r0, #0
    458c:	6849      	ldr	r1, [r1, #4]
    458e:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4592:	4770      	bx	lr
    4594:	200000ec 	.word	0x200000ec
    4598:	b570      	push	{r4, r5, r6, lr}
    459a:	f7fc fed1 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    459e:	4604      	mov	r4, r0
    45a0:	f7fc fed4 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    45a4:	4621      	mov	r1, r4
    45a6:	f00a facf 	bl	eb48 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    45aa:	0004      	movs	r4, r0
    45ac:	d020      	beq.n	45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>
    45ae:	f00a fad8 	bl	eb62 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    45b2:	2000      	movs	r0, #0
    45b4:	f000 f9fa 	bl	49ac <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    45b8:	b1f8      	cbz	r0, 45fa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5fa>
    45ba:	4d20      	ldr	r5, [pc, #128]	; (463c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x63c>)
    45bc:	6868      	ldr	r0, [r5, #4]
    45be:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    45c2:	2802      	cmp	r0, #2
    45c4:	d003      	beq.n	45ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ce>
    45c6:	4621      	mov	r1, r4
    45c8:	2000      	movs	r0, #0
    45ca:	f7ff f9af 	bl	392c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78>
    45ce:	1ce0      	adds	r0, r4, #3
    45d0:	f009 fb16 	bl	dc00 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    45d4:	6869      	ldr	r1, [r5, #4]
    45d6:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    45da:	b128      	cbz	r0, 45e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5e8>
    45dc:	2440      	movs	r4, #64	; 0x40
    45de:	f003 fa8d 	bl	7afc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    45e2:	4620      	mov	r0, r4
    45e4:	f003 fc52 	bl	7e8c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    45e8:	f7ff fa86 	bl	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    45ec:	b970      	cbnz	r0, 460c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60c>
    45ee:	e008      	b.n	4602 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x602>
    45f0:	f240 511e 	movw	r1, #1310	; 0x51e
    45f4:	2032      	movs	r0, #50	; 0x32
    45f6:	f7fc fa11 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45fe:	f7ff bfb5 	b.w	456c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56c>
    4602:	6868      	ldr	r0, [r5, #4]
    4604:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4608:	2802      	cmp	r0, #2
    460a:	d104      	bne.n	4616 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x616>
    460c:	2100      	movs	r1, #0
    460e:	2201      	movs	r2, #1
    4610:	4608      	mov	r0, r1
    4612:	f003 ff07 	bl	8424 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4616:	6868      	ldr	r0, [r5, #4]
    4618:	21ff      	movs	r1, #255	; 0xff
    461a:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    461e:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4622:	2100      	movs	r1, #0
    4624:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    4628:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    462c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4630:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4634:	2105      	movs	r1, #5
    4636:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    463a:	bd70      	pop	{r4, r5, r6, pc}
    463c:	200000ec 	.word	0x200000ec
    4640:	b570      	push	{r4, r5, r6, lr}
    4642:	f7fc fe7d 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4646:	4604      	mov	r4, r0
    4648:	f7fc fe80 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    464c:	4621      	mov	r1, r4
    464e:	f00a fa7b 	bl	eb48 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    4652:	0005      	movs	r5, r0
    4654:	d028      	beq.n	46a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6a8>
    4656:	4e19      	ldr	r6, [pc, #100]	; (46bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6bc>)
    4658:	2004      	movs	r0, #4
    465a:	6874      	ldr	r4, [r6, #4]
    465c:	3470      	adds	r4, #112	; 0x70
    465e:	f000 f9a5 	bl	49ac <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4662:	b330      	cbz	r0, 46b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6b2>
    4664:	200c      	movs	r0, #12
    4666:	7020      	strb	r0, [r4, #0]
    4668:	2000      	movs	r0, #0
    466a:	f000 f971 	bl	4950 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    466e:	7828      	ldrb	r0, [r5, #0]
    4670:	6871      	ldr	r1, [r6, #4]
    4672:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4676:	f881 008b 	strb.w	r0, [r1, #139]	; 0x8b
    467a:	2005      	movs	r0, #5
    467c:	f7ff fb20 	bl	3cc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x228>
    4680:	4a0f      	ldr	r2, [pc, #60]	; (46c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c0>)
    4682:	68b1      	ldr	r1, [r6, #8]
    4684:	2520      	movs	r5, #32
    4686:	6d50      	ldr	r0, [r2, #84]	; 0x54
    4688:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    468c:	7808      	ldrb	r0, [r1, #0]
    468e:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    4692:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    4696:	4318      	orrs	r0, r3
    4698:	7008      	strb	r0, [r1, #0]
    469a:	6d50      	ldr	r0, [r2, #84]	; 0x54
    469c:	7ee2      	ldrb	r2, [r4, #27]
    469e:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    46a2:	4011      	ands	r1, r2
    46a4:	7001      	strb	r1, [r0, #0]
    46a6:	bd70      	pop	{r4, r5, r6, pc}
    46a8:	f240 619f 	movw	r1, #1695	; 0x69f
    46ac:	2032      	movs	r0, #50	; 0x32
    46ae:	f7fc f9b5 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46b6:	f7ff bf59 	b.w	456c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56c>
    46ba:	0000      	.short	0x0000
    46bc:	200000ec 	.word	0x200000ec
    46c0:	200009f0 	.word	0x200009f0
    46c4:	b510      	push	{r4, lr}
    46c6:	2003      	movs	r0, #3
    46c8:	f000 f970 	bl	49ac <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    46cc:	b168      	cbz	r0, 46ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6ea>
    46ce:	2003      	movs	r0, #3
    46d0:	f7ff faf6 	bl	3cc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x228>
    46d4:	2201      	movs	r2, #1
    46d6:	4611      	mov	r1, r2
    46d8:	2000      	movs	r0, #0
    46da:	f003 fea3 	bl	8424 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    46de:	4905      	ldr	r1, [pc, #20]	; (46f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6f4>)
    46e0:	200b      	movs	r0, #11
    46e2:	6849      	ldr	r1, [r1, #4]
    46e4:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    46e8:	bd10      	pop	{r4, pc}
    46ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46ee:	f7ff bf3d 	b.w	456c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56c>
    46f2:	0000      	.short	0x0000
    46f4:	200000ec 	.word	0x200000ec
    46f8:	b570      	push	{r4, r5, r6, lr}
    46fa:	4d19      	ldr	r5, [pc, #100]	; (4760 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x760>)
    46fc:	2000      	movs	r0, #0
    46fe:	686c      	ldr	r4, [r5, #4]
    4700:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    4704:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    4708:	b910      	cbnz	r0, 4710 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x710>
    470a:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    470e:	b308      	cbz	r0, 4754 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x754>
    4710:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    4714:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4718:	4050      	eors	r0, r2
    471a:	ea70 0101 	orns	r1, r0, r1
    471e:	d019      	beq.n	4754 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x754>
    4720:	f00b ffae 	bl	10680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4724:	e9d4 2300 	ldrd	r2, r3, [r4]
    4728:	1a80      	subs	r0, r0, r2
    472a:	4199      	sbcs	r1, r3
    472c:	d312      	bcc.n	4754 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x754>
    472e:	f7fd fe5f 	bl	23f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4732:	490c      	ldr	r1, [pc, #48]	; (4764 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x764>)
    4734:	fba0 2301 	umull	r2, r3, r0, r1
    4738:	6868      	ldr	r0, [r5, #4]
    473a:	3090      	adds	r0, #144	; 0x90
    473c:	f00a fa06 	bl	eb4c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    4740:	6868      	ldr	r0, [r5, #4]
    4742:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    4746:	b110      	cbz	r0, 474e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74e>
    4748:	2001      	movs	r0, #1
    474a:	f7fd fd45 	bl	21d8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    474e:	2001      	movs	r0, #1
    4750:	f7ff fd2a 	bl	41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
    4754:	6869      	ldr	r1, [r5, #4]
    4756:	2002      	movs	r0, #2
    4758:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    475c:	bd70      	pop	{r4, r5, r6, pc}
    475e:	0000      	.short	0x0000
    4760:	200000ec 	.word	0x200000ec
    4764:	000f4240 	.word	0x000f4240
    4768:	00004589 	.word	0x00004589
    476c:	0000456d 	.word	0x0000456d
    4770:	0000eb09 	.word	0x0000eb09
    4774:	0000eb09 	.word	0x0000eb09
    4778:	0000eb09 	.word	0x0000eb09
    477c:	00004599 	.word	0x00004599
    4780:	0000eb09 	.word	0x0000eb09
    4784:	0000eb09 	.word	0x0000eb09
    4788:	0000eb09 	.word	0x0000eb09
    478c:	0000eb09 	.word	0x0000eb09
    4790:	0000eb09 	.word	0x0000eb09
    4794:	000046c5 	.word	0x000046c5
    4798:	00004641 	.word	0x00004641
    479c:	0000eb09 	.word	0x0000eb09
    47a0:	0000eb09 	.word	0x0000eb09
    47a4:	000043a9 	.word	0x000043a9
    47a8:	00004385 	.word	0x00004385
    47ac:	0000eb13 	.word	0x0000eb13
    47b0:	0000eb21 	.word	0x0000eb21
    47b4:	0000eab9 	.word	0x0000eab9
    47b8:	0000eac3 	.word	0x0000eac3
    47bc:	0000ead1 	.word	0x0000ead1
    47c0:	00003aa5 	.word	0x00003aa5
    47c4:	00004425 	.word	0x00004425
    47c8:	000044f1 	.word	0x000044f1
    47cc:	000047a4 	.word	0x000047a4
    47d0:	000047ac 	.word	0x000047ac
    47d4:	00004768 	.word	0x00004768
    47d8:	000047bc 	.word	0x000047bc
    47dc:	000047b4 	.word	0x000047b4
    47e0:	000043e1 	.word	0x000043e1
    47e4:	0000425d 	.word	0x0000425d
    47e8:	00004331 	.word	0x00004331
    47ec:	0000eb33 	.word	0x0000eb33
    47f0:	b570      	push	{r4, r5, r6, lr}
    47f2:	4604      	mov	r4, r0
    47f4:	7800      	ldrb	r0, [r0, #0]
    47f6:	2805      	cmp	r0, #5
    47f8:	d001      	beq.n	47fe <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7fe>
    47fa:	2148      	movs	r1, #72	; 0x48
    47fc:	e058      	b.n	48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>
    47fe:	7ba0      	ldrb	r0, [r4, #14]
    4800:	06c0      	lsls	r0, r0, #27
    4802:	d401      	bmi.n	4808 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x808>
    4804:	2149      	movs	r1, #73	; 0x49
    4806:	e053      	b.n	48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>
    4808:	221c      	movs	r2, #28
    480a:	1d21      	adds	r1, r4, #4
    480c:	482f      	ldr	r0, [pc, #188]	; (48cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8cc>)
    480e:	f00c f8db 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4812:	482e      	ldr	r0, [pc, #184]	; (48cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8cc>)
    4814:	7b22      	ldrb	r2, [r4, #12]
    4816:	f104 0120 	add.w	r1, r4, #32
    481a:	301c      	adds	r0, #28
    481c:	f00c f8d4 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4820:	482a      	ldr	r0, [pc, #168]	; (48cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8cc>)
    4822:	f04f 0201 	mov.w	r2, #1
    4826:	7a81      	ldrb	r1, [r0, #10]
    4828:	0749      	lsls	r1, r1, #29
    482a:	d502      	bpl.n	4832 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x832>
    482c:	7cc1      	ldrb	r1, [r0, #19]
    482e:	29fe      	cmp	r1, #254	; 0xfe
    4830:	d00c      	beq.n	484c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84c>
    4832:	2304      	movs	r3, #4
    4834:	7023      	strb	r3, [r4, #0]
    4836:	6801      	ldr	r1, [r0, #0]
    4838:	6061      	str	r1, [r4, #4]
    483a:	6841      	ldr	r1, [r0, #4]
    483c:	60a1      	str	r1, [r4, #8]
    483e:	8901      	ldrh	r1, [r0, #8]
    4840:	81a1      	strh	r1, [r4, #12]
    4842:	7a81      	ldrb	r1, [r0, #10]
    4844:	070d      	lsls	r5, r1, #28
    4846:	d519      	bpl.n	487c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x87c>
    4848:	73a3      	strb	r3, [r4, #14]
    484a:	e02d      	b.n	48a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a8>
    484c:	2113      	movs	r1, #19
    484e:	7021      	strb	r1, [r4, #0]
    4850:	7801      	ldrb	r1, [r0, #0]
    4852:	7121      	strb	r1, [r4, #4]
    4854:	7162      	strb	r2, [r4, #5]
    4856:	7841      	ldrb	r1, [r0, #1]
    4858:	71a1      	strb	r1, [r4, #6]
    485a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    485e:	f8c4 1007 	str.w	r1, [r4, #7]
    4862:	88c1      	ldrh	r1, [r0, #6]
    4864:	f8a4 100b 	strh.w	r1, [r4, #11]
    4868:	21fe      	movs	r1, #254	; 0xfe
    486a:	7361      	strb	r1, [r4, #13]
    486c:	6941      	ldr	r1, [r0, #20]
    486e:	f8c4 100e 	str.w	r1, [r4, #14]
    4872:	8b01      	ldrh	r1, [r0, #24]
    4874:	8261      	strh	r1, [r4, #18]
    4876:	7a40      	ldrb	r0, [r0, #9]
    4878:	7520      	strb	r0, [r4, #20]
    487a:	bd70      	pop	{r4, r5, r6, pc}
    487c:	07cb      	lsls	r3, r1, #31
    487e:	d003      	beq.n	4888 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x888>
    4880:	078b      	lsls	r3, r1, #30
    4882:	d501      	bpl.n	4888 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x888>
    4884:	2100      	movs	r1, #0
    4886:	e00e      	b.n	48a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a6>
    4888:	074b      	lsls	r3, r1, #29
    488a:	d501      	bpl.n	4890 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x890>
    488c:	73a2      	strb	r2, [r4, #14]
    488e:	e00b      	b.n	48a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a8>
    4890:	07ca      	lsls	r2, r1, #31
    4892:	d110      	bne.n	48b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b6>
    4894:	078a      	lsls	r2, r1, #30
    4896:	d501      	bpl.n	489c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x89c>
    4898:	2102      	movs	r1, #2
    489a:	e004      	b.n	48a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a6>
    489c:	07ca      	lsls	r2, r1, #31
    489e:	d10a      	bne.n	48b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b6>
    48a0:	0789      	lsls	r1, r1, #30
    48a2:	d408      	bmi.n	48b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b6>
    48a4:	2103      	movs	r1, #3
    48a6:	73a1      	strb	r1, [r4, #14]
    48a8:	7a02      	ldrb	r2, [r0, #8]
    48aa:	2a1f      	cmp	r2, #31
    48ac:	d905      	bls.n	48ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ba>
    48ae:	218d      	movs	r1, #141	; 0x8d
    48b0:	2033      	movs	r0, #51	; 0x33
    48b2:	f7fc f8b3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48b6:	218a      	movs	r1, #138	; 0x8a
    48b8:	e7fa      	b.n	48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>
    48ba:	f104 000f 	add.w	r0, r4, #15
    48be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    48c2:	4902      	ldr	r1, [pc, #8]	; (48cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8cc>)
    48c4:	311c      	adds	r1, #28
    48c6:	f00c b87f 	b.w	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    48ca:	0000      	.short	0x0000
    48cc:	2000147c 	.word	0x2000147c
    48d0:	2100      	movs	r1, #0
    48d2:	7201      	strb	r1, [r0, #8]
    48d4:	2206      	movs	r2, #6
    48d6:	4901      	ldr	r1, [pc, #4]	; (48dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8dc>)
    48d8:	f009 bd3b 	b.w	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    48dc:	0000ed1d 	.word	0x0000ed1d

000048e0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    48e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48e4:	4616      	mov	r6, r2
    48e6:	460c      	mov	r4, r1
    48e8:	4605      	mov	r5, r0
    48ea:	f009 fc3f 	bl	e16c <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    48ee:	7460      	strb	r0, [r4, #17]
    48f0:	4628      	mov	r0, r5
    48f2:	f009 fc32 	bl	e15a <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    48f6:	74a0      	strb	r0, [r4, #18]
    48f8:	1cea      	adds	r2, r5, #3
    48fa:	4b14      	ldr	r3, [pc, #80]	; (494c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    48fc:	1d90      	adds	r0, r2, #6
    48fe:	2100      	movs	r1, #0
    4900:	2e07      	cmp	r6, #7
    4902:	d21f      	bcs.n	4944 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    4904:	e8df f006 	tbb	[pc, r6]
    4908:	1e110b04 	.word	0x1e110b04
    490c:	00041e13 	.word	0x00041e13
    4910:	781b      	ldrb	r3, [r3, #0]
    4912:	e00d      	b.n	4930 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4914:	60e0      	str	r0, [r4, #12]
    4916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    491a:	60e1      	str	r1, [r4, #12]
    491c:	e7fb      	b.n	4916 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    491e:	785b      	ldrb	r3, [r3, #1]
    4920:	7063      	strb	r3, [r4, #1]
    4922:	e9c4 2001 	strd	r2, r0, [r4, #4]
    4926:	7421      	strb	r1, [r4, #16]
    4928:	e7f7      	b.n	491a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    492a:	789b      	ldrb	r3, [r3, #2]
    492c:	e000      	b.n	4930 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    492e:	78db      	ldrb	r3, [r3, #3]
    4930:	7063      	strb	r3, [r4, #1]
    4932:	e9c4 2101 	strd	r2, r1, [r4, #4]
    4936:	786a      	ldrb	r2, [r5, #1]
    4938:	1f92      	subs	r2, r2, #6
    493a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    493e:	7422      	strb	r2, [r4, #16]
    4940:	d0eb      	beq.n	491a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4942:	e7e7      	b.n	4914 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4944:	7061      	strb	r1, [r4, #1]
    4946:	6061      	str	r1, [r4, #4]
    4948:	60a1      	str	r1, [r4, #8]
    494a:	e7ec      	b.n	4926 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    494c:	00010c34 	.word	0x00010c34

00004950 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    4950:	b570      	push	{r4, r5, r6, lr}
    4952:	b140      	cbz	r0, 4966 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4954:	2801      	cmp	r0, #1
    4956:	d006      	beq.n	4966 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4958:	2802      	cmp	r0, #2
    495a:	d00a      	beq.n	4972 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    495c:	2803      	cmp	r0, #3
    495e:	d006      	beq.n	496e <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    4960:	f640 01b4 	movw	r1, #2228	; 0x8b4
    4964:	e015      	b.n	4992 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    4966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    496a:	f000 b97d 	b.w	4c68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    496e:	2001      	movs	r0, #1
    4970:	e000      	b.n	4974 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    4972:	2000      	movs	r0, #0
    4974:	4c0c      	ldr	r4, [pc, #48]	; (49a8 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    4976:	2101      	movs	r1, #1
    4978:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    497c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    4980:	6a20      	ldr	r0, [r4, #32]
    4982:	2500      	movs	r5, #0
    4984:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    4988:	7821      	ldrb	r1, [r4, #0]
    498a:	2905      	cmp	r1, #5
    498c:	d004      	beq.n	4998 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    498e:	f640 0157 	movw	r1, #2135	; 0x857
    4992:	2021      	movs	r0, #33	; 0x21
    4994:	f7fc f842 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4998:	f00a facc 	bl	ef34 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA>
    499c:	6225      	str	r5, [r4, #32]
    499e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    49a2:	f000 b9c5 	b.w	4d30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    49a6:	0000      	.short	0x0000
    49a8:	20000a98 	.word	0x20000a98

000049ac <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    49ac:	b570      	push	{r4, r5, r6, lr}
    49ae:	4605      	mov	r5, r0
    49b0:	f00b fe66 	bl	10680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    49b4:	4c16      	ldr	r4, [pc, #88]	; (4a10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    49b6:	6921      	ldr	r1, [r4, #16]
    49b8:	1a46      	subs	r6, r0, r1
    49ba:	b155      	cbz	r5, 49d2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    49bc:	2d03      	cmp	r5, #3
    49be:	d00d      	beq.n	49dc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    49c0:	2d04      	cmp	r5, #4
    49c2:	d00e      	beq.n	49e2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    49c4:	2d06      	cmp	r5, #6
    49c6:	d01d      	beq.n	4a04 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    49c8:	f240 31d6 	movw	r1, #982	; 0x3d6
    49cc:	2021      	movs	r0, #33	; 0x21
    49ce:	f7fc f825 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49d2:	2001      	movs	r0, #1
    49d4:	f00a fa40 	bl	ee58 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    49d8:	3098      	adds	r0, #152	; 0x98
    49da:	e004      	b.n	49e6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    49dc:	f44f 7057 	mov.w	r0, #860	; 0x35c
    49e0:	e001      	b.n	49e6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    49e2:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    49e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    49e8:	1835      	adds	r5, r6, r0
    49ea:	39f9      	subs	r1, #249	; 0xf9
    49ec:	428d      	cmp	r5, r1
    49ee:	d307      	bcc.n	4a00 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    49f0:	2600      	movs	r6, #0
    49f2:	f000 fac9 	bl	4f88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    49f6:	b140      	cbz	r0, 4a0a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    49f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    49fa:	38f9      	subs	r0, #249	; 0xf9
    49fc:	4285      	cmp	r5, r0
    49fe:	d203      	bcs.n	4a08 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    4a00:	2601      	movs	r6, #1
    4a02:	e002      	b.n	4a0a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4a04:	2001      	movs	r0, #1
    4a06:	bd70      	pop	{r4, r5, r6, pc}
    4a08:	2600      	movs	r6, #0
    4a0a:	4630      	mov	r0, r6
    4a0c:	bd70      	pop	{r4, r5, r6, pc}
    4a0e:	0000      	.short	0x0000
    4a10:	20000a98 	.word	0x20000a98

00004a14 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    4a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a16:	4c1e      	ldr	r4, [pc, #120]	; (4a90 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    4a18:	4607      	mov	r7, r0
    4a1a:	b087      	sub	sp, #28
    4a1c:	7820      	ldrb	r0, [r4, #0]
    4a1e:	460e      	mov	r6, r1
    4a20:	b110      	cbz	r0, 4a28 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4a22:	200c      	movs	r0, #12
    4a24:	b007      	add	sp, #28
    4a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a28:	f7fe fd3c 	bl	34a4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a2c:	4605      	mov	r5, r0
    4a2e:	6227      	str	r7, [r4, #32]
    4a30:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4a34:	b110      	cbz	r0, 4a3c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    4a36:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    4a3a:	e025      	b.n	4a88 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4a3c:	2005      	movs	r0, #5
    4a3e:	7020      	strb	r0, [r4, #0]
    4a40:	2000      	movs	r0, #0
    4a42:	7060      	strb	r0, [r4, #1]
    4a44:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    4a48:	f000 fae4 	bl	5014 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4a4c:	64a0      	str	r0, [r4, #72]	; 0x48
    4a4e:	2100      	movs	r1, #0
    4a50:	4810      	ldr	r0, [pc, #64]	; (4a94 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    4a52:	f006 fa8f 	bl	af74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4a56:	7028      	strb	r0, [r5, #0]
    4a58:	2820      	cmp	r0, #32
    4a5a:	d00d      	beq.n	4a78 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    4a5c:	4633      	mov	r3, r6
    4a5e:	2200      	movs	r2, #0
    4a60:	2101      	movs	r1, #1
    4a62:	4668      	mov	r0, sp
    4a64:	f000 fb30 	bl	50c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4a68:	b148      	cbz	r0, 4a7e <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    4a6a:	7828      	ldrb	r0, [r5, #0]
    4a6c:	4669      	mov	r1, sp
    4a6e:	f00a fa1f 	bl	eeb0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6e>
    4a72:	b138      	cbz	r0, 4a84 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    4a74:	2000      	movs	r0, #0
    4a76:	e7d5      	b.n	4a24 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    4a78:	f240 310a 	movw	r1, #778	; 0x30a
    4a7c:	e004      	b.n	4a88 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4a7e:	f240 310d 	movw	r1, #781	; 0x30d
    4a82:	e001      	b.n	4a88 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4a84:	f240 310e 	movw	r1, #782	; 0x30e
    4a88:	2021      	movs	r0, #33	; 0x21
    4a8a:	f7fb ffc7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a8e:	0000      	.short	0x0000
    4a90:	20000a98 	.word	0x20000a98
    4a94:	00004d51 	.word	0x00004d51

00004a98 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    4a98:	4902      	ldr	r1, [pc, #8]	; (4aa4 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    4a9a:	6a09      	ldr	r1, [r1, #32]
    4a9c:	6001      	str	r1, [r0, #0]
    4a9e:	f000 b83d 	b.w	4b1c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4aa2:	0000      	.short	0x0000
    4aa4:	20000a98 	.word	0x20000a98

00004aa8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    4aa8:	b570      	push	{r4, r5, r6, lr}
    4aaa:	b086      	sub	sp, #24
    4aac:	4606      	mov	r6, r0
    4aae:	b111      	cbz	r1, 4ab6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    4ab0:	2011      	movs	r0, #17
    4ab2:	b006      	add	sp, #24
    4ab4:	bd70      	pop	{r4, r5, r6, pc}
    4ab6:	4c17      	ldr	r4, [pc, #92]	; (4b14 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    4ab8:	7820      	ldrb	r0, [r4, #0]
    4aba:	b108      	cbz	r0, 4ac0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    4abc:	200c      	movs	r0, #12
    4abe:	e7f8      	b.n	4ab2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4ac0:	f7fe fcf0 	bl	34a4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4ac4:	4605      	mov	r5, r0
    4ac6:	2000      	movs	r0, #0
    4ac8:	7060      	strb	r0, [r4, #1]
    4aca:	2004      	movs	r0, #4
    4acc:	7020      	strb	r0, [r4, #0]
    4ace:	f000 faa1 	bl	5014 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4ad2:	64a0      	str	r0, [r4, #72]	; 0x48
    4ad4:	2100      	movs	r1, #0
    4ad6:	4810      	ldr	r0, [pc, #64]	; (4b18 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    4ad8:	f006 fa4c 	bl	af74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4adc:	7028      	strb	r0, [r5, #0]
    4ade:	2820      	cmp	r0, #32
    4ae0:	d00d      	beq.n	4afe <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    4ae2:	4633      	mov	r3, r6
    4ae4:	2200      	movs	r2, #0
    4ae6:	2101      	movs	r1, #1
    4ae8:	4668      	mov	r0, sp
    4aea:	f000 faed 	bl	50c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4aee:	b148      	cbz	r0, 4b04 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    4af0:	7828      	ldrb	r0, [r5, #0]
    4af2:	4669      	mov	r1, sp
    4af4:	f00a f9dc 	bl	eeb0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6e>
    4af8:	b138      	cbz	r0, 4b0a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    4afa:	2000      	movs	r0, #0
    4afc:	e7d9      	b.n	4ab2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4afe:	f240 3162 	movw	r1, #866	; 0x362
    4b02:	e004      	b.n	4b0e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4b04:	f44f 7159 	mov.w	r1, #868	; 0x364
    4b08:	e001      	b.n	4b0e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4b0a:	f240 3165 	movw	r1, #869	; 0x365
    4b0e:	2021      	movs	r0, #33	; 0x21
    4b10:	f7fb ff84 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b14:	20000a98 	.word	0x20000a98
    4b18:	00004d51 	.word	0x00004d51

00004b1c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    4b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b20:	2700      	movs	r7, #0
    4b22:	f7fe fcbf 	bl	34a4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4b26:	4c18      	ldr	r4, [pc, #96]	; (4b88 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    4b28:	4605      	mov	r5, r0
    4b2a:	7820      	ldrb	r0, [r4, #0]
    4b2c:	2804      	cmp	r0, #4
    4b2e:	d005      	beq.n	4b3c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4b30:	7820      	ldrb	r0, [r4, #0]
    4b32:	2805      	cmp	r0, #5
    4b34:	d002      	beq.n	4b3c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4b36:	200c      	movs	r0, #12
    4b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b3c:	2001      	movs	r0, #1
    4b3e:	7060      	strb	r0, [r4, #1]
    4b40:	7b20      	ldrb	r0, [r4, #12]
    4b42:	b160      	cbz	r0, 4b5e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4b44:	f3ef 8610 	mrs	r6, PRIMASK
    4b48:	b672      	cpsid	i
    4b4a:	7b20      	ldrb	r0, [r4, #12]
    4b4c:	b128      	cbz	r0, 4b5a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4b4e:	7b60      	ldrb	r0, [r4, #13]
    4b50:	b118      	cbz	r0, 4b5a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4b52:	f009 ffa7 	bl	eaa4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4b56:	f000 f8eb 	bl	4d30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4b5a:	b126      	cbz	r6, 4b66 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    4b5c:	e004      	b.n	4b68 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4b5e:	7828      	ldrb	r0, [r5, #0]
    4b60:	f005 ff86 	bl	aa70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    4b64:	e000      	b.n	4b68 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4b66:	b662      	cpsie	i
    4b68:	7828      	ldrb	r0, [r5, #0]
    4b6a:	f006 f8eb 	bl	ad44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4b6e:	f000 fc03 	bl	5378 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4b72:	2000      	movs	r0, #0
    4b74:	7060      	strb	r0, [r4, #1]
    4b76:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4b7a:	b100      	cbz	r0, 4b7e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    4b7c:	270c      	movs	r7, #12
    4b7e:	f000 fc27 	bl	53d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4b82:	4638      	mov	r0, r7
    4b84:	e7d8      	b.n	4b38 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    4b86:	0000      	.short	0x0000
    4b88:	20000a98 	.word	0x20000a98

00004b8c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    4b8c:	4801      	ldr	r0, [pc, #4]	; (4b94 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    4b8e:	7800      	ldrb	r0, [r0, #0]
    4b90:	4770      	bx	lr
    4b92:	0000      	.short	0x0000
    4b94:	20000a98 	.word	0x20000a98

00004b98 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    4b98:	b510      	push	{r4, lr}
    4b9a:	4c10      	ldr	r4, [pc, #64]	; (4bdc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    4b9c:	b086      	sub	sp, #24
    4b9e:	7b20      	ldrb	r0, [r4, #12]
    4ba0:	b1b0      	cbz	r0, 4bd0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4ba2:	7860      	ldrb	r0, [r4, #1]
    4ba4:	b9a0      	cbnz	r0, 4bd0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4ba6:	2300      	movs	r3, #0
    4ba8:	461a      	mov	r2, r3
    4baa:	4619      	mov	r1, r3
    4bac:	4668      	mov	r0, sp
    4bae:	f000 fa8b 	bl	50c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4bb2:	b158      	cbz	r0, 4bcc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    4bb4:	f7fe fc76 	bl	34a4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4bb8:	7800      	ldrb	r0, [r0, #0]
    4bba:	4669      	mov	r1, sp
    4bbc:	f00a f978 	bl	eeb0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6e>
    4bc0:	b930      	cbnz	r0, 4bd0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4bc2:	f240 71bc 	movw	r1, #1980	; 0x7bc
    4bc6:	2021      	movs	r0, #33	; 0x21
    4bc8:	f7fb ff28 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bcc:	2001      	movs	r0, #1
    4bce:	70a0      	strb	r0, [r4, #2]
    4bd0:	b006      	add	sp, #24
    4bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bd6:	f000 b8ab 	b.w	4d30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4bda:	0000      	.short	0x0000
    4bdc:	20000a98 	.word	0x20000a98

00004be0 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4be0:	b508      	push	{r3, lr}
    4be2:	2260      	movs	r2, #96	; 0x60
    4be4:	2100      	movs	r1, #0
    4be6:	480c      	ldr	r0, [pc, #48]	; (4c18 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    4be8:	f00b ff68 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4bec:	f7fe fc5a 	bl	34a4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4bf0:	2120      	movs	r1, #32
    4bf2:	7001      	strb	r1, [r0, #0]
    4bf4:	f000 f812 	bl	4c1c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    4bf8:	b120      	cbz	r0, 4c04 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    4bfa:	f240 2135 	movw	r1, #565	; 0x235
    4bfe:	2021      	movs	r0, #33	; 0x21
    4c00:	f7fb ff0c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c04:	f242 7010 	movw	r0, #10000	; 0x2710
    4c08:	9000      	str	r0, [sp, #0]
    4c0a:	2201      	movs	r2, #1
    4c0c:	4669      	mov	r1, sp
    4c0e:	1080      	asrs	r0, r0, #2
    4c10:	f000 f940 	bl	4e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4c14:	bd08      	pop	{r3, pc}
    4c16:	0000      	.short	0x0000
    4c18:	20000a98 	.word	0x20000a98

00004c1c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    4c1c:	4803      	ldr	r0, [pc, #12]	; (4c2c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    4c1e:	b510      	push	{r4, lr}
    4c20:	7800      	ldrb	r0, [r0, #0]
    4c22:	b108      	cbz	r0, 4c28 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4c24:	f7ff ff7a 	bl	4b1c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4c28:	2000      	movs	r0, #0
    4c2a:	bd10      	pop	{r4, pc}
    4c2c:	20000a98 	.word	0x20000a98

00004c30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4c30:	490c      	ldr	r1, [pc, #48]	; (4c64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4c32:	b508      	push	{r3, lr}
    4c34:	7809      	ldrb	r1, [r1, #0]
    4c36:	b121      	cbz	r1, 4c42 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    4c38:	f44f 7147 	mov.w	r1, #796	; 0x31c
    4c3c:	2021      	movs	r0, #33	; 0x21
    4c3e:	f7fb feed 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c42:	2300      	movs	r3, #0
    4c44:	9300      	str	r3, [sp, #0]
    4c46:	7801      	ldrb	r1, [r0, #0]
    4c48:	461a      	mov	r2, r3
    4c4a:	07c9      	lsls	r1, r1, #31
    4c4c:	d003      	beq.n	4c56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    4c4e:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    4c52:	2201      	movs	r2, #1
    4c54:	9000      	str	r0, [sp, #0]
    4c56:	4669      	mov	r1, sp
    4c58:	4618      	mov	r0, r3
    4c5a:	f000 f91b 	bl	4e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4c5e:	2000      	movs	r0, #0
    4c60:	bd08      	pop	{r3, pc}
    4c62:	0000      	.short	0x0000
    4c64:	20000a98 	.word	0x20000a98
    4c68:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4c6c:	4c2e      	ldr	r4, [pc, #184]	; (4d28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    4c6e:	4680      	mov	r8, r0
    4c70:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    4c74:	461e      	mov	r6, r3
    4c76:	f003 fa67 	bl	8148 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4c7a:	4607      	mov	r7, r0
    4c7c:	6a20      	ldr	r0, [r4, #32]
    4c7e:	2101      	movs	r1, #1
    4c80:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    4c84:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    4c88:	3062      	adds	r0, #98	; 0x62
    4c8a:	21ff      	movs	r1, #255	; 0xff
    4c8c:	7281      	strb	r1, [r0, #10]
    4c8e:	6a20      	ldr	r0, [r4, #32]
    4c90:	f04f 0900 	mov.w	r9, #0
    4c94:	4649      	mov	r1, r9
    4c96:	302c      	adds	r0, #44	; 0x2c
    4c98:	f009 fbce 	bl	e438 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    4c9c:	462a      	mov	r2, r5
    4c9e:	4633      	mov	r3, r6
    4ca0:	2101      	movs	r1, #1
    4ca2:	4640      	mov	r0, r8
    4ca4:	9700      	str	r7, [sp, #0]
    4ca6:	f00a f8ea 	bl	ee7e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    4caa:	6a27      	ldr	r7, [r4, #32]
    4cac:	4606      	mov	r6, r0
    4cae:	460d      	mov	r5, r1
    4cb0:	f8d7 8010 	ldr.w	r8, [r7, #16]
    4cb4:	f002 f994 	bl	6fe0 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    4cb8:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4cbc:	4288      	cmp	r0, r1
    4cbe:	d00b      	beq.n	4cd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    4cc0:	e9cd 6500 	strd	r6, r5, [sp]
    4cc4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    4cc8:	4642      	mov	r2, r8
    4cca:	f00a fc2d 	bl	f528 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4cce:	4540      	cmp	r0, r8
    4cd0:	d903      	bls.n	4cda <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    4cd2:	f240 410c 	movw	r1, #1036	; 0x40c
    4cd6:	e01d      	b.n	4d14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    4cd8:	2000      	movs	r0, #0
    4cda:	4914      	ldr	r1, [pc, #80]	; (4d2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4cdc:	4607      	mov	r7, r0
    4cde:	6809      	ldr	r1, [r1, #0]
    4ce0:	4288      	cmp	r0, r1
    4ce2:	6a20      	ldr	r0, [r4, #32]
    4ce4:	6901      	ldr	r1, [r0, #16]
    4ce6:	d202      	bcs.n	4cee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4ce8:	440f      	add	r7, r1
    4cea:	6201      	str	r1, [r0, #32]
    4cec:	e004      	b.n	4cf8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4cee:	4638      	mov	r0, r7
    4cf0:	f009 f95f 	bl	dfb2 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4cf4:	6a21      	ldr	r1, [r4, #32]
    4cf6:	6208      	str	r0, [r1, #32]
    4cf8:	6a20      	ldr	r0, [r4, #32]
    4cfa:	6901      	ldr	r1, [r0, #16]
    4cfc:	2005      	movs	r0, #5
    4cfe:	f009 f960 	bl	dfc2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4d02:	6a21      	ldr	r1, [r4, #32]
    4d04:	8488      	strh	r0, [r1, #36]	; 0x24
    4d06:	6a21      	ldr	r1, [r4, #32]
    4d08:	6a0a      	ldr	r2, [r1, #32]
    4d0a:	1aba      	subs	r2, r7, r2
    4d0c:	4290      	cmp	r0, r2
    4d0e:	d804      	bhi.n	4d1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4d10:	f640 0145 	movw	r1, #2117	; 0x845
    4d14:	2021      	movs	r0, #33	; 0x21
    4d16:	f7fb fe81 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d1a:	19f2      	adds	r2, r6, r7
    4d1c:	eb45 0509 	adc.w	r5, r5, r9
    4d20:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4d24:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4d28:	20000a98 	.word	0x20000a98
    4d2c:	200000fc 	.word	0x200000fc
    4d30:	b510      	push	{r4, lr}
    4d32:	4c06      	ldr	r4, [pc, #24]	; (4d4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4d34:	7b20      	ldrb	r0, [r4, #12]
    4d36:	2800      	cmp	r0, #0
    4d38:	d006      	beq.n	4d48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4d3a:	f003 fa11 	bl	8160 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4d3e:	f006 f93d 	bl	afbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4d42:	2000      	movs	r0, #0
    4d44:	7320      	strb	r0, [r4, #12]
    4d46:	7360      	strb	r0, [r4, #13]
    4d48:	bd10      	pop	{r4, pc}
    4d4a:	0000      	.short	0x0000
    4d4c:	20000a98 	.word	0x20000a98
    4d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d52:	b087      	sub	sp, #28
    4d54:	460d      	mov	r5, r1
    4d56:	f7fe fba5 	bl	34a4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4d5a:	2701      	movs	r7, #1
    4d5c:	4c3f      	ldr	r4, [pc, #252]	; (4e5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>)
    4d5e:	2d09      	cmp	r5, #9
    4d60:	d278      	bcs.n	4e54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x224>
    4d62:	e8df f005 	tbb	[pc, r5]
    4d66:	3905      	.short	0x3905
    4d68:	774a4f4f 	.word	0x774a4f4f
    4d6c:	00726d64 	.word	0x00726d64
    4d70:	7327      	strb	r7, [r4, #12]
    4d72:	7861      	ldrb	r1, [r4, #1]
    4d74:	2900      	cmp	r1, #0
    4d76:	d12d      	bne.n	4dd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4d78:	7800      	ldrb	r0, [r0, #0]
    4d7a:	f005 f91d 	bl	9fb8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4d7e:	4605      	mov	r5, r0
    4d80:	460e      	mov	r6, r1
    4d82:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4d86:	f000 fb3f 	bl	5408 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4d8a:	b118      	cbz	r0, 4d94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4d8c:	2000      	movs	r0, #0
    4d8e:	f88d 0004 	strb.w	r0, [sp, #4]
    4d92:	e001      	b.n	4d98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4d94:	f88d 7004 	strb.w	r7, [sp, #4]
    4d98:	f000 f950 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4d9c:	4633      	mov	r3, r6
    4d9e:	462a      	mov	r2, r5
    4da0:	f00a f888 	bl	eeb4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    4da4:	6861      	ldr	r1, [r4, #4]
    4da6:	fbb0 f2f1 	udiv	r2, r0, r1
    4daa:	fb01 0012 	mls	r0, r1, r2, r0
    4dae:	b150      	cbz	r0, 4dc6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4db0:	f05f 0000 	movs.w	r0, #0
    4db4:	f88d 0005 	strb.w	r0, [sp, #5]
    4db8:	4668      	mov	r0, sp
    4dba:	f7fe fcab 	bl	3714 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4dbe:	b120      	cbz	r0, 4dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4dc0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    4dc4:	e043      	b.n	4e4e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4dc6:	2001      	movs	r0, #1
    4dc8:	e7f4      	b.n	4db4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4dca:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4dcc:	38e8      	subs	r0, #232	; 0xe8
    4dce:	63a0      	str	r0, [r4, #56]	; 0x38
    4dd0:	f006 f9d0 	bl	b174 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4dd4:	b007      	add	sp, #28
    4dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dd8:	7860      	ldrb	r0, [r4, #1]
    4dda:	b130      	cbz	r0, 4dea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ba>
    4ddc:	f009 fe62 	bl	eaa4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4de0:	b007      	add	sp, #28
    4de2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4de6:	f7ff bfa3 	b.w	4d30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4dea:	7367      	strb	r7, [r4, #13]
    4dec:	f7fe fd22 	bl	3834 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4df0:	2800      	cmp	r0, #0
    4df2:	d0ef      	beq.n	4dd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4df4:	f240 11e1 	movw	r1, #481	; 0x1e1
    4df8:	e029      	b.n	4e4e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4dfa:	b007      	add	sp, #28
    4dfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4e00:	f003 bb82 	b.w	8508 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4e04:	7805      	ldrb	r5, [r0, #0]
    4e06:	2300      	movs	r3, #0
    4e08:	2201      	movs	r2, #1
    4e0a:	4619      	mov	r1, r3
    4e0c:	4668      	mov	r0, sp
    4e0e:	f000 f95b 	bl	50c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4e12:	b140      	cbz	r0, 4e26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f6>
    4e14:	4669      	mov	r1, sp
    4e16:	4628      	mov	r0, r5
    4e18:	f00a f84a 	bl	eeb0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6e>
    4e1c:	2800      	cmp	r0, #0
    4e1e:	d1d9      	bne.n	4dd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4e20:	f240 71d7 	movw	r1, #2007	; 0x7d7
    4e24:	e013      	b.n	4e4e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4e26:	70a7      	strb	r7, [r4, #2]
    4e28:	f000 f81a 	bl	4e60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4e2c:	e7d2      	b.n	4dd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4e2e:	f000 f8ab 	bl	4f88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4e32:	2800      	cmp	r0, #0
    4e34:	d1ce      	bne.n	4dd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4e36:	b007      	add	sp, #28
    4e38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4e3c:	f009 be30 	b.w	eaa0 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4e40:	b007      	add	sp, #28
    4e42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4e46:	f000 b80b 	b.w	4e60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4e4a:	f240 2113 	movw	r1, #531	; 0x213
    4e4e:	2021      	movs	r0, #33	; 0x21
    4e50:	f7fb fde4 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e54:	f240 2117 	movw	r1, #535	; 0x217
    4e58:	e7f9      	b.n	4e4e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4e5a:	0000      	.short	0x0000
    4e5c:	20000a98 	.word	0x20000a98
    4e60:	b510      	push	{r4, lr}
    4e62:	4c0b      	ldr	r4, [pc, #44]	; (4e90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>)
    4e64:	7820      	ldrb	r0, [r4, #0]
    4e66:	b138      	cbz	r0, 4e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    4e68:	f000 fa86 	bl	5378 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4e6c:	78a0      	ldrb	r0, [r4, #2]
    4e6e:	b150      	cbz	r0, 4e86 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4e70:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4e74:	b128      	cbz	r0, 4e82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x252>
    4e76:	e006      	b.n	4e86 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4e78:	f240 117b 	movw	r1, #379	; 0x17b
    4e7c:	2021      	movs	r0, #33	; 0x21
    4e7e:	f7fb fdcd 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e82:	f7fe fcef 	bl	3864 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e8a:	f000 baa1 	b.w	53d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4e8e:	0000      	.short	0x0000
    4e90:	20000a98 	.word	0x20000a98
    4e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e98:	4d11      	ldr	r5, [pc, #68]	; (4ee0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b0>)
    4e9a:	4616      	mov	r6, r2
    4e9c:	460f      	mov	r7, r1
    4e9e:	2400      	movs	r4, #0
    4ea0:	6068      	str	r0, [r5, #4]
    4ea2:	f009 ffce 	bl	ee42 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4ea6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4ee4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4eaa:	2100      	movs	r1, #0
    4eac:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4eb0:	4232      	tst	r2, r6
    4eb2:	d007      	beq.n	4ec4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x294>
    4eb4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4eb8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4ebc:	1a1b      	subs	r3, r3, r0
    4ebe:	1c64      	adds	r4, r4, #1
    4ec0:	b2e4      	uxtb	r4, r4
    4ec2:	6093      	str	r3, [r2, #8]
    4ec4:	1c49      	adds	r1, r1, #1
    4ec6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4eca:	d0ef      	beq.n	4eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27c>
    4ecc:	f016 0f0e 	tst.w	r6, #14
    4ed0:	d004      	beq.n	4edc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ac>
    4ed2:	f240 7103 	movw	r1, #1795	; 0x703
    4ed6:	2021      	movs	r0, #33	; 0x21
    4ed8:	f7fb fda0 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ee0:	20000a98 	.word	0x20000a98
    4ee4:	00010c38 	.word	0x00010c38
    4ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4eec:	b086      	sub	sp, #24
    4eee:	4692      	mov	sl, r2
    4ef0:	4607      	mov	r7, r0
    4ef2:	4689      	mov	r9, r1
    4ef4:	f000 fa94 	bl	5420 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4ef8:	4d22      	ldr	r5, [pc, #136]	; (4f84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    4efa:	f04f 0800 	mov.w	r8, #0
    4efe:	686a      	ldr	r2, [r5, #4]
    4f00:	1886      	adds	r6, r0, r2
    4f02:	eb41 0108 	adc.w	r1, r1, r8
    4f06:	460c      	mov	r4, r1
    4f08:	460b      	mov	r3, r1
    4f0a:	4632      	mov	r2, r6
    4f0c:	4638      	mov	r0, r7
    4f0e:	4649      	mov	r1, r9
    4f10:	f009 ffd0 	bl	eeb4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    4f14:	4607      	mov	r7, r0
    4f16:	f009 ffc4 	bl	eea2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x60>
    4f1a:	4287      	cmp	r7, r0
    4f1c:	da13      	bge.n	4f46 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    4f1e:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4f22:	f000 fa7d 	bl	5420 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4f26:	4632      	mov	r2, r6
    4f28:	4623      	mov	r3, r4
    4f2a:	f009 ffc3 	bl	eeb4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    4f2e:	6869      	ldr	r1, [r5, #4]
    4f30:	fbb0 f1f1 	udiv	r1, r0, r1
    4f34:	f8ca 1000 	str.w	r1, [sl]
    4f38:	6868      	ldr	r0, [r5, #4]
    4f3a:	1980      	adds	r0, r0, r6
    4f3c:	eb48 0104 	adc.w	r1, r8, r4
    4f40:	b006      	add	sp, #24
    4f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f46:	f88d 8000 	strb.w	r8, [sp]
    4f4a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4f4c:	9001      	str	r0, [sp, #4]
    4f4e:	f009 ff61 	bl	ee14 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4f52:	f8ad 0008 	strh.w	r0, [sp, #8]
    4f56:	2001      	movs	r0, #1
    4f58:	f88d 000b 	strb.w	r0, [sp, #11]
    4f5c:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4f60:	f000 fa5e 	bl	5420 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4f68:	f000 f9ec 	bl	5344 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4f6c:	f88d 000a 	strb.w	r0, [sp, #10]
    4f70:	4668      	mov	r0, sp
    4f72:	6869      	ldr	r1, [r5, #4]
    4f74:	f008 ffcc 	bl	df10 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4f78:	f8ca 0000 	str.w	r0, [sl]
    4f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4f80:	e7de      	b.n	4f40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>
    4f82:	0000      	.short	0x0000
    4f84:	20000a98 	.word	0x20000a98
    4f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f8c:	f00b fb78 	bl	10680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4f90:	4c1f      	ldr	r4, [pc, #124]	; (5010 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>)
    4f92:	4606      	mov	r6, r0
    4f94:	460d      	mov	r5, r1
    4f96:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4f9a:	f000 f9d3 	bl	5344 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4f9e:	4607      	mov	r7, r0
    4fa0:	f004 ffb0 	bl	9f04 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4fa4:	4602      	mov	r2, r0
    4fa6:	2867      	cmp	r0, #103	; 0x67
    4fa8:	d323      	bcc.n	4ff2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4faa:	1c50      	adds	r0, r2, #1
    4fac:	d024      	beq.n	4ff8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c8>
    4fae:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4fb2:	1888      	adds	r0, r1, r2
    4fb4:	4283      	cmp	r3, r0
    4fb6:	d800      	bhi.n	4fba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38a>
    4fb8:	1a5a      	subs	r2, r3, r1
    4fba:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    4fbe:	1830      	adds	r0, r6, r0
    4fc0:	f145 31ff 	adc.w	r1, r5, #4294967295
    4fc4:	f000 fa42 	bl	544c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4fc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4fca:	4408      	add	r0, r1
    4fcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4fce:	1a45      	subs	r5, r0, r1
    4fd0:	f241 3088 	movw	r0, #5000	; 0x1388
    4fd4:	4285      	cmp	r5, r0
    4fd6:	d900      	bls.n	4fda <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3aa>
    4fd8:	4605      	mov	r5, r0
    4fda:	f00b fb51 	bl	10680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4fde:	1b80      	subs	r0, r0, r6
    4fe0:	f100 00a1 	add.w	r0, r0, #161	; 0xa1
    4fe4:	4285      	cmp	r5, r0
    4fe6:	d304      	bcc.n	4ff2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4fe8:	4639      	mov	r1, r7
    4fea:	4628      	mov	r0, r5
    4fec:	f004 fe9a 	bl	9d24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4ff0:	b120      	cbz	r0, 4ffc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>
    4ff2:	2000      	movs	r0, #0
    4ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ff8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4ffa:	e7e7      	b.n	4fcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x39c>
    4ffc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4ffe:	4428      	add	r0, r5
    5000:	6320      	str	r0, [r4, #48]	; 0x30
    5002:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5004:	4428      	add	r0, r5
    5006:	63a0      	str	r0, [r4, #56]	; 0x38
    5008:	f006 f8b4 	bl	b174 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    500c:	2001      	movs	r0, #1
    500e:	e7f1      	b.n	4ff4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    5010:	20000a98 	.word	0x20000a98
    5014:	b510      	push	{r4, lr}
    5016:	2400      	movs	r4, #0
    5018:	f009 ff13 	bl	ee42 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    501c:	4a06      	ldr	r2, [pc, #24]	; (5038 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x408>)
    501e:	2100      	movs	r1, #0
    5020:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    5024:	4404      	add	r4, r0
    5026:	689b      	ldr	r3, [r3, #8]
    5028:	1c49      	adds	r1, r1, #1
    502a:	441c      	add	r4, r3
    502c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    5030:	d0f6      	beq.n	5020 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    5032:	4620      	mov	r0, r4
    5034:	bd10      	pop	{r4, pc}
    5036:	0000      	.short	0x0000
    5038:	20000a98 	.word	0x20000a98
    503c:	4901      	ldr	r1, [pc, #4]	; (5044 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>)
    503e:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    5042:	4770      	bx	lr
    5044:	20000a98 	.word	0x20000a98
    5048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    504c:	4606      	mov	r6, r0
    504e:	481d      	ldr	r0, [pc, #116]	; (50c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    5050:	4688      	mov	r8, r1
    5052:	4615      	mov	r5, r2
    5054:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    5058:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    505c:	2701      	movs	r7, #1
    505e:	4050      	eors	r0, r2
    5060:	b086      	sub	sp, #24
    5062:	ea70 0101 	orns	r1, r0, r1
    5066:	d021      	beq.n	50ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47c>
    5068:	2400      	movs	r4, #0
    506a:	f88d 4000 	strb.w	r4, [sp]
    506e:	9501      	str	r5, [sp, #4]
    5070:	f009 fed0 	bl	ee14 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    5074:	f8ad 0008 	strh.w	r0, [sp, #8]
    5078:	f88d 700b 	strb.w	r7, [sp, #11]
    507c:	f009 ff11 	bl	eea2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x60>
    5080:	1982      	adds	r2, r0, r6
    5082:	eb44 0008 	adc.w	r0, r4, r8
    5086:	e9cd 2004 	strd	r2, r0, [sp, #16]
    508a:	2002      	movs	r0, #2
    508c:	f88d 000a 	strb.w	r0, [sp, #10]
    5090:	4668      	mov	r0, sp
    5092:	f005 fb33 	bl	a6fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    5096:	b168      	cbz	r0, 50b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    5098:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    509c:	194a      	adds	r2, r1, r5
    509e:	4909      	ldr	r1, [pc, #36]	; (50c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    50a0:	4160      	adcs	r0, r4
    50a2:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    50a6:	1a9a      	subs	r2, r3, r2
    50a8:	4181      	sbcs	r1, r0
    50aa:	d408      	bmi.n	50be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    50ac:	2001      	movs	r0, #1
    50ae:	b006      	add	sp, #24
    50b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50b4:	f240 5135 	movw	r1, #1333	; 0x535
    50b8:	2021      	movs	r0, #33	; 0x21
    50ba:	f7fb fcaf 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50be:	2000      	movs	r0, #0
    50c0:	e7f5      	b.n	50ae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47e>
    50c2:	0000      	.short	0x0000
    50c4:	20000a98 	.word	0x20000a98
    50c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50cc:	b087      	sub	sp, #28
    50ce:	4614      	mov	r4, r2
    50d0:	4606      	mov	r6, r0
    50d2:	f00b fad5 	bl	10680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    50d6:	4d99      	ldr	r5, [pc, #612]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    50d8:	4680      	mov	r8, r0
    50da:	4689      	mov	r9, r1
    50dc:	68a8      	ldr	r0, [r5, #8]
    50de:	f04f 0a00 	mov.w	sl, #0
    50e2:	9002      	str	r0, [sp, #8]
    50e4:	f7ff ff96 	bl	5014 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    50e8:	6869      	ldr	r1, [r5, #4]
    50ea:	4288      	cmp	r0, r1
    50ec:	d101      	bne.n	50f2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    50ee:	2001      	movs	r0, #1
    50f0:	e000      	b.n	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c4>
    50f2:	2000      	movs	r0, #0
    50f4:	9004      	str	r0, [sp, #16]
    50f6:	4020      	ands	r0, r4
    50f8:	9003      	str	r0, [sp, #12]
    50fa:	9808      	ldr	r0, [sp, #32]
    50fc:	2800      	cmp	r0, #0
    50fe:	d07f      	beq.n	5200 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    5100:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    5104:	eb18 0b02 	adds.w	fp, r8, r2
    5108:	f149 0400 	adc.w	r4, r9, #0
    510c:	f001 ff6e 	bl	6fec <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    5110:	9000      	str	r0, [sp, #0]
    5112:	488a      	ldr	r0, [pc, #552]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5114:	7800      	ldrb	r0, [r0, #0]
    5116:	4f89      	ldr	r7, [pc, #548]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5118:	3740      	adds	r7, #64	; 0x40
    511a:	2805      	cmp	r0, #5
    511c:	d135      	bne.n	518a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    511e:	4887      	ldr	r0, [pc, #540]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5120:	6a00      	ldr	r0, [r0, #32]
    5122:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    5126:	f001 ff41 	bl	6fac <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    512a:	9900      	ldr	r1, [sp, #0]
    512c:	4605      	mov	r5, r0
    512e:	4288      	cmp	r0, r1
    5130:	d009      	beq.n	5146 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x516>
    5132:	4882      	ldr	r0, [pc, #520]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5134:	4629      	mov	r1, r5
    5136:	6a00      	ldr	r0, [r0, #32]
    5138:	f500 700a 	add.w	r0, r0, #552	; 0x228
    513c:	f001 feea 	bl	6f14 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    5140:	2000      	movs	r0, #0
    5142:	61b8      	str	r0, [r7, #24]
    5144:	e00c      	b.n	5160 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>
    5146:	497d      	ldr	r1, [pc, #500]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5148:	6a08      	ldr	r0, [r1, #32]
    514a:	f500 700a 	add.w	r0, r0, #552	; 0x228
    514e:	61b8      	str	r0, [r7, #24]
    5150:	6a08      	ldr	r0, [r1, #32]
    5152:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    5154:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    5158:	4282      	cmp	r2, r0
    515a:	d300      	bcc.n	515e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    515c:	4610      	mov	r0, r2
    515e:	6488      	str	r0, [r1, #72]	; 0x48
    5160:	4876      	ldr	r0, [pc, #472]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5162:	6a00      	ldr	r0, [r0, #32]
    5164:	b158      	cbz	r0, 517e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54e>
    5166:	b16d      	cbz	r5, 5184 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x554>
    5168:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    516c:	f8d5 c000 	ldr.w	ip, [r5]
    5170:	eb1c 0303 	adds.w	r3, ip, r3
    5174:	eb41 010a 	adc.w	r1, r1, sl
    5178:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    517c:	e005      	b.n	518a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    517e:	f240 7193 	movw	r1, #1939	; 0x793
    5182:	e01a      	b.n	51ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    5184:	2100      	movs	r1, #0
    5186:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    518a:	4638      	mov	r0, r7
    518c:	9900      	ldr	r1, [sp, #0]
    518e:	f001 fec1 	bl	6f14 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    5192:	486a      	ldr	r0, [pc, #424]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5194:	9a00      	ldr	r2, [sp, #0]
    5196:	6845      	ldr	r5, [r0, #4]
    5198:	b192      	cbz	r2, 51c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    519a:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    519e:	6817      	ldr	r7, [r2, #0]
    51a0:	e9cd b400 	strd	fp, r4, [sp]
    51a4:	18f8      	adds	r0, r7, r3
    51a6:	eb41 010a 	adc.w	r1, r1, sl
    51aa:	462a      	mov	r2, r5
    51ac:	f00a f9bc 	bl	f528 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    51b0:	4601      	mov	r1, r0
    51b2:	42a8      	cmp	r0, r5
    51b4:	d905      	bls.n	51c2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x592>
    51b6:	f240 31f9 	movw	r1, #1017	; 0x3f9
    51ba:	2021      	movs	r0, #33	; 0x21
    51bc:	f7fb fc2e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51c0:	2100      	movs	r1, #0
    51c2:	eb1b 0501 	adds.w	r5, fp, r1
    51c6:	495d      	ldr	r1, [pc, #372]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    51c8:	4650      	mov	r0, sl
    51ca:	4144      	adcs	r4, r0
    51cc:	684a      	ldr	r2, [r1, #4]
    51ce:	1aab      	subs	r3, r5, r2
    51d0:	eb64 020a 	sbc.w	r2, r4, sl
    51d4:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    51d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    51da:	3128      	adds	r1, #40	; 0x28
    51dc:	b152      	cbz	r2, 51f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c4>
    51de:	f242 7310 	movw	r3, #10000	; 0x2710
    51e2:	435a      	muls	r2, r3
    51e4:	18aa      	adds	r2, r5, r2
    51e6:	eb44 000a 	adc.w	r0, r4, sl
    51ea:	e9c1 2000 	strd	r2, r0, [r1]
    51ee:	2001      	movs	r0, #1
    51f0:	e051      	b.n	5296 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    51f2:	e005      	b.n	5200 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    51f4:	f04f 30ff 	mov.w	r0, #4294967295
    51f8:	0842      	lsrs	r2, r0, #1
    51fa:	e9c1 0200 	strd	r0, r2, [r1]
    51fe:	e7f6      	b.n	51ee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5be>
    5200:	9803      	ldr	r0, [sp, #12]
    5202:	b1d8      	cbz	r0, 523c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    5204:	2001      	movs	r0, #1
    5206:	f009 fe27 	bl	ee58 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    520a:	4604      	mov	r4, r0
    520c:	2001      	movs	r0, #1
    520e:	f003 f891 	bl	8334 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5212:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    5216:	4401      	add	r1, r0
    5218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    521c:	fbb1 f0f0 	udiv	r0, r1, r0
    5220:	1822      	adds	r2, r4, r0
    5222:	4640      	mov	r0, r8
    5224:	4649      	mov	r1, r9
    5226:	32f9      	adds	r2, #249	; 0xf9
    5228:	f7ff ff0e 	bl	5048 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    522c:	b908      	cbnz	r0, 5232 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    522e:	2000      	movs	r0, #0
    5230:	9002      	str	r0, [sp, #8]
    5232:	4645      	mov	r5, r8
    5234:	464c      	mov	r4, r9
    5236:	f8cd a014 	str.w	sl, [sp, #20]
    523a:	e02d      	b.n	5298 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    523c:	b13c      	cbz	r4, 524e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61e>
    523e:	aa05      	add	r2, sp, #20
    5240:	4640      	mov	r0, r8
    5242:	4649      	mov	r1, r9
    5244:	f7ff fe50 	bl	4ee8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>
    5248:	4605      	mov	r5, r0
    524a:	460c      	mov	r4, r1
    524c:	e024      	b.n	5298 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    524e:	4640      	mov	r0, r8
    5250:	4649      	mov	r1, r9
    5252:	f000 f8e5 	bl	5420 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    5256:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>
    525a:	4602      	mov	r2, r0
    525c:	4608      	mov	r0, r1
    525e:	f8db 1008 	ldr.w	r1, [fp, #8]
    5262:	9102      	str	r1, [sp, #8]
    5264:	f8db 3004 	ldr.w	r3, [fp, #4]
    5268:	4657      	mov	r7, sl
    526a:	189d      	adds	r5, r3, r2
    526c:	eb4a 0400 	adc.w	r4, sl, r0
    5270:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    5274:	f000 f8c8 	bl	5408 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    5278:	f8db 1004 	ldr.w	r1, [fp, #4]
    527c:	4348      	muls	r0, r1
    527e:	9000      	str	r0, [sp, #0]
    5280:	f7ff fedc 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5284:	9a00      	ldr	r2, [sp, #0]
    5286:	1880      	adds	r0, r0, r2
    5288:	4179      	adcs	r1, r7
    528a:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    528e:	4621      	mov	r1, r4
    5290:	4628      	mov	r0, r5
    5292:	f000 f8b9 	bl	5408 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    5296:	9005      	str	r0, [sp, #20]
    5298:	2001      	movs	r0, #1
    529a:	f009 fddd 	bl	ee58 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    529e:	4607      	mov	r7, r0
    52a0:	2001      	movs	r0, #1
    52a2:	f003 f847 	bl	8334 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    52a6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    52aa:	4401      	add	r1, r0
    52ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    52b0:	fbb1 f0f0 	udiv	r0, r1, r0
    52b4:	4407      	add	r7, r0
    52b6:	4628      	mov	r0, r5
    52b8:	4621      	mov	r1, r4
    52ba:	37f9      	adds	r7, #249	; 0xf9
    52bc:	9a02      	ldr	r2, [sp, #8]
    52be:	f000 f8c5 	bl	544c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    52c2:	491e      	ldr	r1, [pc, #120]	; (533c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    52c4:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    52c8:	6892      	ldr	r2, [r2, #8]
    52ca:	4282      	cmp	r2, r0
    52cc:	d800      	bhi.n	52d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    52ce:	4610      	mov	r0, r2
    52d0:	6348      	str	r0, [r1, #52]	; 0x34
    52d2:	9a08      	ldr	r2, [sp, #32]
    52d4:	b10a      	cbz	r2, 52da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6aa>
    52d6:	e9c1 5404 	strd	r5, r4, [r1, #16]
    52da:	e9c1 5406 	strd	r5, r4, [r1, #24]
    52de:	468b      	mov	fp, r1
    52e0:	9904      	ldr	r1, [sp, #16]
    52e2:	b111      	cbz	r1, 52ea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6ba>
    52e4:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    52e8:	e001      	b.n	52ee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    52ea:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    52ee:	2001      	movs	r0, #1
    52f0:	72f0      	strb	r0, [r6, #11]
    52f2:	f009 fd8f 	bl	ee14 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    52f6:	8130      	strh	r0, [r6, #8]
    52f8:	4628      	mov	r0, r5
    52fa:	4621      	mov	r1, r4
    52fc:	f000 f822 	bl	5344 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    5300:	72b0      	strb	r0, [r6, #10]
    5302:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    5306:	6070      	str	r0, [r6, #4]
    5308:	9803      	ldr	r0, [sp, #12]
    530a:	b148      	cbz	r0, 5320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f0>
    530c:	2001      	movs	r0, #1
    530e:	7030      	strb	r0, [r6, #0]
    5310:	4a0b      	ldr	r2, [pc, #44]	; (5340 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>)
    5312:	4640      	mov	r0, r8
    5314:	4649      	mov	r1, r9
    5316:	f000 f899 	bl	544c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    531a:	1bc0      	subs	r0, r0, r7
    531c:	6130      	str	r0, [r6, #16]
    531e:	e003      	b.n	5328 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f8>
    5320:	f886 a000 	strb.w	sl, [r6]
    5324:	e9c6 5404 	strd	r5, r4, [r6, #16]
    5328:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    532c:	42b8      	cmp	r0, r7
    532e:	d303      	bcc.n	5338 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x708>
    5330:	2001      	movs	r0, #1
    5332:	b00b      	add	sp, #44	; 0x2c
    5334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5338:	2000      	movs	r0, #0
    533a:	e7fa      	b.n	5332 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    533c:	20000a98 	.word	0x20000a98
    5340:	0f424000 	.word	0x0f424000
    5344:	b570      	push	{r4, r5, r6, lr}
    5346:	4604      	mov	r4, r0
    5348:	480a      	ldr	r0, [pc, #40]	; (5374 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>)
    534a:	460d      	mov	r5, r1
    534c:	7801      	ldrb	r1, [r0, #0]
    534e:	2904      	cmp	r1, #4
    5350:	d10d      	bne.n	536e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    5352:	6840      	ldr	r0, [r0, #4]
    5354:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5358:	0046      	lsls	r6, r0, #1
    535a:	f7ff fe6f 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    535e:	4622      	mov	r2, r4
    5360:	462b      	mov	r3, r5
    5362:	f009 fda7 	bl	eeb4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    5366:	42b0      	cmp	r0, r6
    5368:	d201      	bcs.n	536e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    536a:	2002      	movs	r0, #2
    536c:	bd70      	pop	{r4, r5, r6, pc}
    536e:	2001      	movs	r0, #1
    5370:	bd70      	pop	{r4, r5, r6, pc}
    5372:	0000      	.short	0x0000
    5374:	20000a98 	.word	0x20000a98
    5378:	b570      	push	{r4, r5, r6, lr}
    537a:	4d14      	ldr	r5, [pc, #80]	; (53cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    537c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5380:	f105 0440 	add.w	r4, r5, #64	; 0x40
    5384:	2800      	cmp	r0, #0
    5386:	7828      	ldrb	r0, [r5, #0]
    5388:	d00f      	beq.n	53aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    538a:	2805      	cmp	r0, #5
    538c:	d004      	beq.n	5398 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    538e:	f240 2157 	movw	r1, #599	; 0x257
    5392:	2021      	movs	r0, #33	; 0x21
    5394:	f7fb fb42 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5398:	4620      	mov	r0, r4
    539a:	f009 fd58 	bl	ee4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    539e:	b178      	cbz	r0, 53c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    53a0:	4620      	mov	r0, r4
    53a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53a6:	f001 bd93 	b.w	6ed0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    53aa:	2805      	cmp	r0, #5
    53ac:	d108      	bne.n	53c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    53ae:	4620      	mov	r0, r4
    53b0:	f009 fd4d 	bl	ee4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    53b4:	b920      	cbnz	r0, 53c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    53b6:	6a28      	ldr	r0, [r5, #32]
    53b8:	f500 700a 	add.w	r0, r0, #552	; 0x228
    53bc:	f001 fdd8 	bl	6f70 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    53c0:	4620      	mov	r0, r4
    53c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53c6:	f001 bdd3 	b.w	6f70 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    53ca:	0000      	.short	0x0000
    53cc:	20000a98 	.word	0x20000a98
    53d0:	b510      	push	{r4, lr}
    53d2:	f7fe f8d9 	bl	3588 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    53d6:	490b      	ldr	r1, [pc, #44]	; (5404 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>)
    53d8:	2000      	movs	r0, #0
    53da:	7088      	strb	r0, [r1, #2]
    53dc:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    53e0:	6208      	str	r0, [r1, #32]
    53e2:	7008      	strb	r0, [r1, #0]
    53e4:	f7fe f85e 	bl	34a4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    53e8:	4604      	mov	r4, r0
    53ea:	7800      	ldrb	r0, [r0, #0]
    53ec:	f005 fc88 	bl	ad00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    53f0:	b110      	cbz	r0, 53f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>
    53f2:	2020      	movs	r0, #32
    53f4:	7020      	strb	r0, [r4, #0]
    53f6:	bd10      	pop	{r4, pc}
    53f8:	f240 3192 	movw	r1, #914	; 0x392
    53fc:	2021      	movs	r0, #33	; 0x21
    53fe:	f7fb fb0d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5402:	0000      	.short	0x0000
    5404:	20000a98 	.word	0x20000a98
    5408:	b510      	push	{r4, lr}
    540a:	4604      	mov	r4, r0
    540c:	f7ff fe16 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5410:	4902      	ldr	r1, [pc, #8]	; (541c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ec>)
    5412:	1a20      	subs	r0, r4, r0
    5414:	6849      	ldr	r1, [r1, #4]
    5416:	fbb0 f0f1 	udiv	r0, r0, r1
    541a:	bd10      	pop	{r4, pc}
    541c:	20000a98 	.word	0x20000a98
    5420:	b570      	push	{r4, r5, r6, lr}
    5422:	4604      	mov	r4, r0
    5424:	460d      	mov	r5, r1
    5426:	f7ff fe09 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    542a:	4622      	mov	r2, r4
    542c:	462b      	mov	r3, r5
    542e:	f009 fd41 	bl	eeb4 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    5432:	4905      	ldr	r1, [pc, #20]	; (5448 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    5434:	684c      	ldr	r4, [r1, #4]
    5436:	fbb0 f0f4 	udiv	r0, r0, r4
    543a:	4344      	muls	r4, r0
    543c:	f7ff fdfe 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5440:	1900      	adds	r0, r0, r4
    5442:	f141 0100 	adc.w	r1, r1, #0
    5446:	bd70      	pop	{r4, r5, r6, pc}
    5448:	20000a98 	.word	0x20000a98
    544c:	4b0a      	ldr	r3, [pc, #40]	; (5478 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>)
    544e:	b510      	push	{r4, lr}
    5450:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    5454:	1a20      	subs	r0, r4, r0
    5456:	eb63 0301 	sbc.w	r3, r3, r1
    545a:	2400      	movs	r4, #0
    545c:	4621      	mov	r1, r4
    545e:	1a24      	subs	r4, r4, r0
    5460:	4199      	sbcs	r1, r3
    5462:	da06      	bge.n	5472 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x842>
    5464:	2100      	movs	r1, #0
    5466:	1a14      	subs	r4, r2, r0
    5468:	eb71 0403 	sbcs.w	r4, r1, r3
    546c:	da00      	bge.n	5470 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x840>
    546e:	4610      	mov	r0, r2
    5470:	bd10      	pop	{r4, pc}
    5472:	2000      	movs	r0, #0
    5474:	bd10      	pop	{r4, pc}
    5476:	0000      	.short	0x0000
    5478:	20000a98 	.word	0x20000a98

0000547c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    547c:	b510      	push	{r4, lr}
    547e:	f002 fe63 	bl	8148 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    5482:	4905      	ldr	r1, [pc, #20]	; (5498 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x1c>)
    5484:	684a      	ldr	r2, [r1, #4]
    5486:	4282      	cmp	r2, r0
    5488:	d301      	bcc.n	548e <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x12>
    548a:	7808      	ldrb	r0, [r1, #0]
    548c:	b108      	cbz	r0, 5492 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x16>
    548e:	2000      	movs	r0, #0
    5490:	bd10      	pop	{r4, pc}
    5492:	2001      	movs	r0, #1
    5494:	bd10      	pop	{r4, pc}
    5496:	0000      	.short	0x0000
    5498:	20000100 	.word	0x20000100

0000549c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    549c:	4902      	ldr	r1, [pc, #8]	; (54a8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0xc>)
    549e:	2000      	movs	r0, #0
    54a0:	6008      	str	r0, [r1, #0]
    54a2:	6048      	str	r0, [r1, #4]
    54a4:	f000 b844 	b.w	5530 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    54a8:	20000100 	.word	0x20000100

000054ac <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    54ac:	b510      	push	{r4, lr}
    54ae:	0004      	movs	r4, r0
    54b0:	d005      	beq.n	54be <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x12>
    54b2:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    54b6:	b128      	cbz	r0, 54c4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x18>
    54b8:	f240 11a3 	movw	r1, #419	; 0x1a3
    54bc:	e008      	b.n	54d0 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x24>
    54be:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    54c2:	e005      	b.n	54d0 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x24>
    54c4:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    54c8:	2820      	cmp	r0, #32
    54ca:	d004      	beq.n	54d6 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x2a>
    54cc:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    54d0:	2035      	movs	r0, #53	; 0x35
    54d2:	f7fb faa3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54d6:	4621      	mov	r1, r4
    54d8:	4805      	ldr	r0, [pc, #20]	; (54f0 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x44>)
    54da:	f005 fd4b 	bl	af74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    54de:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    54e2:	2820      	cmp	r0, #32
    54e4:	d001      	beq.n	54ea <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x3e>
    54e6:	2000      	movs	r0, #0
    54e8:	bd10      	pop	{r4, pc}
    54ea:	200d      	movs	r0, #13
    54ec:	bd10      	pop	{r4, pc}
    54ee:	0000      	.short	0x0000
    54f0:	0000efa5 	.word	0x0000efa5

000054f4 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    54f4:	4901      	ldr	r1, [pc, #4]	; (54fc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    54f6:	7048      	strb	r0, [r1, #1]
    54f8:	4770      	bx	lr
    54fa:	0000      	.short	0x0000
    54fc:	20000100 	.word	0x20000100

00005500 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    5500:	b570      	push	{r4, r5, r6, lr}
    5502:	4605      	mov	r5, r0
    5504:	4809      	ldr	r0, [pc, #36]	; (552c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    5506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    550a:	fbb0 f4f1 	udiv	r4, r0, r1
    550e:	f009 fc98 	bl	ee42 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5512:	1901      	adds	r1, r0, r4
    5514:	4628      	mov	r0, r5
    5516:	f201 113f 	addw	r1, r1, #319	; 0x13f
    551a:	f008 ffa6 	bl	e46a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    551e:	f640 0148 	movw	r1, #2120	; 0x848
    5522:	4288      	cmp	r0, r1
    5524:	d300      	bcc.n	5528 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    5526:	4608      	mov	r0, r1
    5528:	b280      	uxth	r0, r0
    552a:	bd70      	pop	{r4, r5, r6, pc}
    552c:	000122f9 	.word	0x000122f9
    5530:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    5534:	4e1c      	ldr	r6, [pc, #112]	; (55a8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa8>)
    5536:	2001      	movs	r0, #1
    5538:	7030      	strb	r0, [r6, #0]
    553a:	2400      	movs	r4, #0
    553c:	f64f 77ff 	movw	r7, #65535	; 0xffff
    5540:	e016      	b.n	5570 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x70>
    5542:	2100      	movs	r1, #0
    5544:	f7fb fd4c 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5548:	0005      	movs	r5, r0
    554a:	d014      	beq.n	5576 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x76>
    554c:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    5550:	f005 fbf8 	bl	ad44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    5554:	f885 4248 	strb.w	r4, [r5, #584]	; 0x248
    5558:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    555c:	f005 fbd0 	bl	ad00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    5560:	b160      	cbz	r0, 557c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    5562:	2020      	movs	r0, #32
    5564:	f885 0249 	strb.w	r0, [r5, #585]	; 0x249
    5568:	f505 700a 	add.w	r0, r5, #552	; 0x228
    556c:	f001 fd00 	bl	6f70 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    5570:	9400      	str	r4, [sp, #0]
    5572:	9401      	str	r4, [sp, #4]
    5574:	e010      	b.n	5598 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x98>
    5576:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    557a:	e001      	b.n	5580 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x80>
    557c:	f240 11bf 	movw	r1, #447	; 0x1bf
    5580:	2035      	movs	r0, #53	; 0x35
    5582:	f7fb fa4b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5586:	9800      	ldr	r0, [sp, #0]
    5588:	b130      	cbz	r0, 5598 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x98>
    558a:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    558e:	b119      	cbz	r1, 5598 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x98>
    5590:	8800      	ldrh	r0, [r0, #0]
    5592:	42b8      	cmp	r0, r7
    5594:	d1d5      	bne.n	5542 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    5596:	e004      	b.n	55a2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa2>
    5598:	4668      	mov	r0, sp
    559a:	f7fb fd67 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    559e:	2800      	cmp	r0, #0
    55a0:	d0f1      	beq.n	5586 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    55a2:	7034      	strb	r4, [r6, #0]
    55a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    55a8:	20000100 	.word	0x20000100
    55ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55b0:	4606      	mov	r6, r0
    55b2:	f009 fc46 	bl	ee42 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    55b6:	f500 70a0 	add.w	r0, r0, #320	; 0x140
    55ba:	b284      	uxth	r4, r0
    55bc:	f896 006b 	ldrb.w	r0, [r6, #107]	; 0x6b
    55c0:	2128      	movs	r1, #40	; 0x28
    55c2:	f009 fcdf 	bl	ef84 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x50>
    55c6:	4f1a      	ldr	r7, [pc, #104]	; (5630 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x130>)
    55c8:	eb04 0800 	add.w	r8, r4, r0
    55cc:	7878      	ldrb	r0, [r7, #1]
    55ce:	b108      	cbz	r0, 55d4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xd4>
    55d0:	6934      	ldr	r4, [r6, #16]
    55d2:	e004      	b.n	55de <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xde>
    55d4:	6af4      	ldr	r4, [r6, #44]	; 0x2c
    55d6:	6930      	ldr	r0, [r6, #16]
    55d8:	42a0      	cmp	r0, r4
    55da:	d200      	bcs.n	55de <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xde>
    55dc:	4604      	mov	r4, r0
    55de:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    55e2:	f008 ff4d 	bl	e480 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    55e6:	4605      	mov	r5, r0
    55e8:	f009 fc2b 	bl	ee42 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    55ec:	4405      	add	r5, r0
    55ee:	1b64      	subs	r4, r4, r5
    55f0:	2c00      	cmp	r4, #0
    55f2:	dc00      	bgt.n	55f6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xf6>
    55f4:	2400      	movs	r4, #0
    55f6:	2002      	movs	r0, #2
    55f8:	f004 fc84 	bl	9f04 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    55fc:	4284      	cmp	r4, r0
    55fe:	d300      	bcc.n	5602 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x102>
    5600:	4604      	mov	r4, r0
    5602:	2102      	movs	r1, #2
    5604:	4620      	mov	r0, r4
    5606:	f004 fb8d 	bl	9d24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    560a:	b900      	cbnz	r0, 560e <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x10e>
    560c:	4425      	add	r5, r4
    560e:	f009 fc18 	bl	ee42 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5612:	1a2c      	subs	r4, r5, r0
    5614:	4642      	mov	r2, r8
    5616:	4629      	mov	r1, r5
    5618:	4630      	mov	r0, r6
    561a:	f2a4 142f 	subw	r4, r4, #303	; 0x12f
    561e:	f008 fed0 	bl	e3c2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5622:	6078      	str	r0, [r7, #4]
    5624:	4620      	mov	r0, r4
    5626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    562a:	f005 bda3 	b.w	b174 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    562e:	0000      	.short	0x0000
    5630:	20000100 	.word	0x20000100
    5634:	b510      	push	{r4, lr}
    5636:	4604      	mov	r4, r0
    5638:	2901      	cmp	r1, #1
    563a:	d102      	bne.n	5642 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x142>
    563c:	480a      	ldr	r0, [pc, #40]	; (5668 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x168>)
    563e:	7800      	ldrb	r0, [r0, #0]
    5640:	b140      	cbz	r0, 5654 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x154>
    5642:	2004      	movs	r0, #4
    5644:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    5648:	f002 fd8a 	bl	8160 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    564c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5650:	f005 bcb4 	b.w	afbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    5654:	2200      	movs	r2, #0
    5656:	2101      	movs	r1, #1
    5658:	4620      	mov	r0, r4
    565a:	f009 fda0 	bl	f19e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x26a>
    565e:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    5662:	1c40      	adds	r0, r0, #1
    5664:	8020      	strh	r0, [r4, #0]
    5666:	e7ef      	b.n	5648 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x148>
    5668:	20000100 	.word	0x20000100
    566c:	b510      	push	{r4, lr}
    566e:	4604      	mov	r4, r0
    5670:	4608      	mov	r0, r1
    5672:	f002 fe5f 	bl	8334 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5676:	4906      	ldr	r1, [pc, #24]	; (5690 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x190>)
    5678:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    567c:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    5680:	4408      	add	r0, r1
    5682:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5686:	fbb0 f0f1 	udiv	r0, r0, r1
    568a:	f200 103f 	addw	r0, r0, #319	; 0x13f
    568e:	bd10      	pop	{r4, pc}
    5690:	0000f1d0 	.word	0x0000f1d0

00005694 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    5694:	4806      	ldr	r0, [pc, #24]	; (56b0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    5696:	4905      	ldr	r1, [pc, #20]	; (56ac <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    5698:	6501      	str	r1, [r0, #80]	; 0x50
    569a:	4906      	ldr	r1, [pc, #24]	; (56b4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    569c:	6541      	str	r1, [r0, #84]	; 0x54
    569e:	4807      	ldr	r0, [pc, #28]	; (56bc <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    56a0:	4905      	ldr	r1, [pc, #20]	; (56b8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    56a2:	6501      	str	r1, [r0, #80]	; 0x50
    56a4:	4906      	ldr	r1, [pc, #24]	; (56c0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    56a6:	6541      	str	r1, [r0, #84]	; 0x54
    56a8:	4770      	bx	lr
    56aa:	0000      	.short	0x0000
    56ac:	000067e5 	.word	0x000067e5
    56b0:	2000011c 	.word	0x2000011c
    56b4:	000068bd 	.word	0x000068bd
    56b8:	0000e755 	.word	0x0000e755
    56bc:	200001c8 	.word	0x200001c8
    56c0:	0000f39f 	.word	0x0000f39f

000056c4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    56c4:	b570      	push	{r4, r5, r6, lr}
    56c6:	4605      	mov	r5, r0
    56c8:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    56cc:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    56d0:	b1c9      	cbz	r1, 5706 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    56d2:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    56d6:	1a0c      	subs	r4, r1, r0
    56d8:	f1b4 0404 	subs.w	r4, r4, #4
    56dc:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    56e0:	b140      	cbz	r0, 56f4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    56e2:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    56e6:	2300      	movs	r3, #0
    56e8:	2109      	movs	r1, #9
    56ea:	f105 0088 	add.w	r0, r5, #136	; 0x88
    56ee:	f008 faff 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56f2:	b160      	cbz	r0, 570e <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    56f4:	4628      	mov	r0, r5
    56f6:	f009 ff08 	bl	f50a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2da>
    56fa:	b138      	cbz	r0, 570c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    56fc:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    5700:	1a40      	subs	r0, r0, r1
    5702:	1f00      	subs	r0, r0, #4
    5704:	e003      	b.n	570e <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    5706:	f1c0 0402 	rsb	r4, r0, #2
    570a:	e7e7      	b.n	56dc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    570c:	4620      	mov	r0, r4
    570e:	42a0      	cmp	r0, r4
    5710:	da00      	bge.n	5714 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    5712:	4604      	mov	r4, r0
    5714:	2c00      	cmp	r4, #0
    5716:	dc01      	bgt.n	571c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    5718:	2000      	movs	r0, #0
    571a:	bd70      	pop	{r4, r5, r6, pc}
    571c:	b2a0      	uxth	r0, r4
    571e:	bd70      	pop	{r4, r5, r6, pc}

00005720 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    5720:	481d      	ldr	r0, [pc, #116]	; (5798 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    5722:	491c      	ldr	r1, [pc, #112]	; (5794 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    5724:	6081      	str	r1, [r0, #8]
    5726:	491d      	ldr	r1, [pc, #116]	; (579c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    5728:	61c1      	str	r1, [r0, #28]
    572a:	491d      	ldr	r1, [pc, #116]	; (57a0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    572c:	62c1      	str	r1, [r0, #44]	; 0x2c
    572e:	491d      	ldr	r1, [pc, #116]	; (57a4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    5730:	6101      	str	r1, [r0, #16]
    5732:	491d      	ldr	r1, [pc, #116]	; (57a8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    5734:	6141      	str	r1, [r0, #20]
    5736:	491d      	ldr	r1, [pc, #116]	; (57ac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    5738:	6441      	str	r1, [r0, #68]	; 0x44
    573a:	491d      	ldr	r1, [pc, #116]	; (57b0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    573c:	6181      	str	r1, [r0, #24]
    573e:	491d      	ldr	r1, [pc, #116]	; (57b4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    5740:	6301      	str	r1, [r0, #48]	; 0x30
    5742:	491d      	ldr	r1, [pc, #116]	; (57b8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    5744:	6241      	str	r1, [r0, #36]	; 0x24
    5746:	491d      	ldr	r1, [pc, #116]	; (57bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    5748:	64c1      	str	r1, [r0, #76]	; 0x4c
    574a:	491d      	ldr	r1, [pc, #116]	; (57c0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    574c:	6481      	str	r1, [r0, #72]	; 0x48
    574e:	491d      	ldr	r1, [pc, #116]	; (57c4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    5750:	6341      	str	r1, [r0, #52]	; 0x34
    5752:	491d      	ldr	r1, [pc, #116]	; (57c8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    5754:	6381      	str	r1, [r0, #56]	; 0x38
    5756:	481e      	ldr	r0, [pc, #120]	; (57d0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    5758:	491c      	ldr	r1, [pc, #112]	; (57cc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    575a:	6081      	str	r1, [r0, #8]
    575c:	491d      	ldr	r1, [pc, #116]	; (57d4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    575e:	61c1      	str	r1, [r0, #28]
    5760:	491d      	ldr	r1, [pc, #116]	; (57d8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    5762:	6201      	str	r1, [r0, #32]
    5764:	491d      	ldr	r1, [pc, #116]	; (57dc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    5766:	6041      	str	r1, [r0, #4]
    5768:	491d      	ldr	r1, [pc, #116]	; (57e0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    576a:	6001      	str	r1, [r0, #0]
    576c:	491d      	ldr	r1, [pc, #116]	; (57e4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    576e:	6281      	str	r1, [r0, #40]	; 0x28
    5770:	491d      	ldr	r1, [pc, #116]	; (57e8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    5772:	62c1      	str	r1, [r0, #44]	; 0x2c
    5774:	491d      	ldr	r1, [pc, #116]	; (57ec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    5776:	60c1      	str	r1, [r0, #12]
    5778:	491d      	ldr	r1, [pc, #116]	; (57f0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    577a:	6181      	str	r1, [r0, #24]
    577c:	491d      	ldr	r1, [pc, #116]	; (57f4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    577e:	6301      	str	r1, [r0, #48]	; 0x30
    5780:	491d      	ldr	r1, [pc, #116]	; (57f8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    5782:	6481      	str	r1, [r0, #72]	; 0x48
    5784:	491d      	ldr	r1, [pc, #116]	; (57fc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    5786:	64c1      	str	r1, [r0, #76]	; 0x4c
    5788:	491d      	ldr	r1, [pc, #116]	; (5800 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    578a:	6441      	str	r1, [r0, #68]	; 0x44
    578c:	491d      	ldr	r1, [pc, #116]	; (5804 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    578e:	6241      	str	r1, [r0, #36]	; 0x24
    5790:	4770      	bx	lr
    5792:	0000      	.short	0x0000
    5794:	00006b79 	.word	0x00006b79
    5798:	2000011c 	.word	0x2000011c
    579c:	00006b85 	.word	0x00006b85
    57a0:	0000f2ad 	.word	0x0000f2ad
    57a4:	00006725 	.word	0x00006725
    57a8:	0000f2cd 	.word	0x0000f2cd
    57ac:	00006a7d 	.word	0x00006a7d
    57b0:	00006afd 	.word	0x00006afd
    57b4:	00006bcd 	.word	0x00006bcd
    57b8:	00006761 	.word	0x00006761
    57bc:	0000e92d 	.word	0x0000e92d
    57c0:	0000e8d7 	.word	0x0000e8d7
    57c4:	00006ab1 	.word	0x00006ab1
    57c8:	000068c9 	.word	0x000068c9
    57cc:	0000e715 	.word	0x0000e715
    57d0:	200001c8 	.word	0x200001c8
    57d4:	0000f4e9 	.word	0x0000f4e9
    57d8:	0000f39b 	.word	0x0000f39b
    57dc:	0000f30d 	.word	0x0000f30d
    57e0:	0000f337 	.word	0x0000f337
    57e4:	0000f3d7 	.word	0x0000f3d7
    57e8:	0000f409 	.word	0x0000f409
    57ec:	0000f361 	.word	0x0000f361
    57f0:	0000f4cb 	.word	0x0000f4cb
    57f4:	0000f507 	.word	0x0000f507
    57f8:	0000e909 	.word	0x0000e909
    57fc:	0000e953 	.word	0x0000e953
    5800:	0000f4a9 	.word	0x0000f4a9
    5804:	0000f3d3 	.word	0x0000f3d3

00005808 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    5808:	4806      	ldr	r0, [pc, #24]	; (5824 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    580a:	4905      	ldr	r1, [pc, #20]	; (5820 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    580c:	6581      	str	r1, [r0, #88]	; 0x58
    580e:	4906      	ldr	r1, [pc, #24]	; (5828 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    5810:	65c1      	str	r1, [r0, #92]	; 0x5c
    5812:	4807      	ldr	r0, [pc, #28]	; (5830 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    5814:	4905      	ldr	r1, [pc, #20]	; (582c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    5816:	6581      	str	r1, [r0, #88]	; 0x58
    5818:	4906      	ldr	r1, [pc, #24]	; (5834 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    581a:	6601      	str	r1, [r0, #96]	; 0x60
    581c:	4770      	bx	lr
    581e:	0000      	.short	0x0000
    5820:	000068d5 	.word	0x000068d5
    5824:	2000011c 	.word	0x2000011c
    5828:	00006a0d 	.word	0x00006a0d
    582c:	000104f9 	.word	0x000104f9
    5830:	200001c8 	.word	0x200001c8
    5834:	0000f42f 	.word	0x0000f42f

00005838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    5838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    583a:	4d38      	ldr	r5, [pc, #224]	; (591c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    583c:	2600      	movs	r6, #0
    583e:	f1a5 070c 	sub.w	r7, r5, #12
    5842:	702e      	strb	r6, [r5, #0]
    5844:	6068      	str	r0, [r5, #4]
    5846:	807e      	strh	r6, [r7, #2]
    5848:	707e      	strb	r6, [r7, #1]
    584a:	4604      	mov	r4, r0
    584c:	703e      	strb	r6, [r7, #0]
    584e:	8800      	ldrh	r0, [r0, #0]
    5850:	f7fb ff38 	bl	16c4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    5854:	6868      	ldr	r0, [r5, #4]
    5856:	8800      	ldrh	r0, [r0, #0]
    5858:	f7fb fedc 	bl	1614 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    585c:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5860:	1c40      	adds	r0, r0, #1
    5862:	b282      	uxth	r2, r0
    5864:	6868      	ldr	r0, [r5, #4]
    5866:	f100 0388 	add.w	r3, r0, #136	; 0x88
    586a:	4601      	mov	r1, r0
    586c:	4618      	mov	r0, r3
    586e:	f008 fc05 	bl	e07c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    5872:	b120      	cbz	r0, 587e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    5874:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    5878:	2036      	movs	r0, #54	; 0x36
    587a:	f7fb f8cf 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    587e:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    5882:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    5886:	2825      	cmp	r0, #37	; 0x25
    5888:	d10a      	bne.n	58a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    588a:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    588e:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5892:	1a40      	subs	r0, r0, r1
    5894:	b200      	sxth	r0, r0
    5896:	2800      	cmp	r0, #0
    5898:	db02      	blt.n	58a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    589a:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    589e:	e011      	b.n	58c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    58a0:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    58a4:	2825      	cmp	r0, #37	; 0x25
    58a6:	d003      	beq.n	58b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    58a8:	2826      	cmp	r0, #38	; 0x26
    58aa:	d001      	beq.n	58b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    58ac:	2827      	cmp	r0, #39	; 0x27
    58ae:	d10c      	bne.n	58ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    58b0:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    58b4:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    58b8:	1a40      	subs	r0, r0, r1
    58ba:	b200      	sxth	r0, r0
    58bc:	2800      	cmp	r0, #0
    58be:	db04      	blt.n	58ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    58c0:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    58c4:	f000 fea6 	bl	6614 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    58c8:	b118      	cbz	r0, 58d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9a>
    58ca:	f000 fd2b 	bl	6324 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9f8>
    58ce:	b130      	cbz	r0, 58de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa6>
    58d0:	e022      	b.n	5918 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>
    58d2:	2100      	movs	r1, #0
    58d4:	4608      	mov	r0, r1
    58d6:	f000 fccd 	bl	6274 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x948>
    58da:	2000      	movs	r0, #0
    58dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58de:	6868      	ldr	r0, [r5, #4]
    58e0:	3088      	adds	r0, #136	; 0x88
    58e2:	f009 fcb3 	bl	f24c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    58e6:	b120      	cbz	r0, 58f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba>
    58e8:	6868      	ldr	r0, [r5, #4]
    58ea:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    58ee:	f000 fbbd 	bl	606c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x740>
    58f2:	480b      	ldr	r0, [pc, #44]	; (5920 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    58f4:	9000      	str	r0, [sp, #0]
    58f6:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    58fa:	4b0a      	ldr	r3, [pc, #40]	; (5924 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    58fc:	4a0a      	ldr	r2, [pc, #40]	; (5928 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    58fe:	f7fb ff63 	bl	17c8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    5902:	6868      	ldr	r0, [r5, #4]
    5904:	2300      	movs	r3, #0
    5906:	2105      	movs	r1, #5
    5908:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    590c:	3088      	adds	r0, #136	; 0x88
    590e:	f008 f9ef 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5912:	b108      	cbz	r0, 5918 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>
    5914:	f7fb ff52 	bl	17bc <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    5918:	2001      	movs	r0, #1
    591a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    591c:	20000114 	.word	0x20000114
    5920:	00006275 	.word	0x00006275
    5924:	00005b09 	.word	0x00005b09
    5928:	0000658d 	.word	0x0000658d

0000592c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    592e:	460d      	mov	r5, r1
    5930:	4604      	mov	r4, r0
    5932:	2600      	movs	r6, #0
    5934:	e051      	b.n	59da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    5936:	bf00      	nop
    5938:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    593c:	1c40      	adds	r0, r0, #1
    593e:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    5942:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    5946:	1c40      	adds	r0, r0, #1
    5948:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    594c:	4620      	mov	r0, r4
    594e:	f009 fddc 	bl	f50a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2da>
    5952:	b198      	cbz	r0, 597c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    5954:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    5958:	1c40      	adds	r0, r0, #1
    595a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    595e:	4620      	mov	r0, r4
    5960:	f009 fc95 	bl	f28e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    5964:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    5968:	4288      	cmp	r0, r1
    596a:	d307      	bcc.n	597c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    596c:	2202      	movs	r2, #2
    596e:	491d      	ldr	r1, [pc, #116]	; (59e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    5970:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    5974:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    5978:	f008 fcff 	bl	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    597c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    5980:	b120      	cbz	r0, 598c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    5982:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    5986:	1c40      	adds	r0, r0, #1
    5988:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    598c:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    5990:	b120      	cbz	r0, 599c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    5992:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    5996:	1c40      	adds	r0, r0, #1
    5998:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    599c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    59a0:	f88d 0000 	strb.w	r0, [sp]
    59a4:	9800      	ldr	r0, [sp, #0]
    59a6:	9000      	str	r0, [sp, #0]
    59a8:	f89d 0000 	ldrb.w	r0, [sp]
    59ac:	b940      	cbnz	r0, 59c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    59ae:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    59b2:	2300      	movs	r3, #0
    59b4:	2101      	movs	r1, #1
    59b6:	f104 0088 	add.w	r0, r4, #136	; 0x88
    59ba:	f008 f999 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    59be:	b120      	cbz	r0, 59ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    59c0:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    59c4:	1c40      	adds	r0, r0, #1
    59c6:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    59ca:	4620      	mov	r0, r4
    59cc:	f000 fa18 	bl	5e00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d4>
    59d0:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    59d4:	1c40      	adds	r0, r0, #1
    59d6:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    59da:	1e6d      	subs	r5, r5, #1
    59dc:	b2ad      	uxth	r5, r5
    59de:	d2ab      	bcs.n	5938 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    59e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59e2:	0000      	.short	0x0000
    59e4:	0000e8c5 	.word	0x0000e8c5
    59e8:	4411      	add	r1, r2
    59ea:	78c2      	ldrb	r2, [r0, #3]
    59ec:	480c      	ldr	r0, [pc, #48]	; (5a20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    59ee:	1d89      	adds	r1, r1, #6
    59f0:	b289      	uxth	r1, r1
    59f2:	6840      	ldr	r0, [r0, #4]
    59f4:	2a01      	cmp	r2, #1
    59f6:	d006      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    59f8:	b142      	cbz	r2, 5a0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    59fa:	2a18      	cmp	r2, #24
    59fc:	d105      	bne.n	5a0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    59fe:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    5a02:	b132      	cbz	r2, 5a12 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    5a04:	e009      	b.n	5a1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    5a06:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    5a0a:	4770      	bx	lr
    5a0c:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    5a10:	4770      	bx	lr
    5a12:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    5a16:	b902      	cbnz	r2, 5a1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    5a18:	2100      	movs	r1, #0
    5a1a:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    5a1e:	4770      	bx	lr
    5a20:	20000114 	.word	0x20000114
    5a24:	490b      	ldr	r1, [pc, #44]	; (5a54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    5a26:	78c2      	ldrb	r2, [r0, #3]
    5a28:	6849      	ldr	r1, [r1, #4]
    5a2a:	2a01      	cmp	r2, #1
    5a2c:	d006      	beq.n	5a3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    5a2e:	b15a      	cbz	r2, 5a48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    5a30:	2a18      	cmp	r2, #24
    5a32:	d108      	bne.n	5a46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    5a34:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    5a38:	f008 bc35 	b.w	e2a6 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    5a3c:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    5a40:	7241      	strb	r1, [r0, #9]
    5a42:	0a09      	lsrs	r1, r1, #8
    5a44:	7281      	strb	r1, [r0, #10]
    5a46:	4770      	bx	lr
    5a48:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    5a4c:	7341      	strb	r1, [r0, #13]
    5a4e:	0a09      	lsrs	r1, r1, #8
    5a50:	7381      	strb	r1, [r0, #14]
    5a52:	4770      	bx	lr
    5a54:	20000114 	.word	0x20000114
    5a58:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5a5a:	4c2a      	ldr	r4, [pc, #168]	; (5b04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    5a5c:	2300      	movs	r3, #0
    5a5e:	4619      	mov	r1, r3
    5a60:	6860      	ldr	r0, [r4, #4]
    5a62:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5a66:	3088      	adds	r0, #136	; 0x88
    5a68:	f008 f942 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a6c:	2800      	cmp	r0, #0
    5a6e:	d048      	beq.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5a70:	6860      	ldr	r0, [r4, #4]
    5a72:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    5a76:	f88d 1000 	strb.w	r1, [sp]
    5a7a:	9900      	ldr	r1, [sp, #0]
    5a7c:	9100      	str	r1, [sp, #0]
    5a7e:	f89d 1000 	ldrb.w	r1, [sp]
    5a82:	2500      	movs	r5, #0
    5a84:	2900      	cmp	r1, #0
    5a86:	d03c      	beq.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5a88:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    5a8c:	f008 f993 	bl	ddb6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5a90:	2800      	cmp	r0, #0
    5a92:	d136      	bne.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5a94:	6860      	ldr	r0, [r4, #4]
    5a96:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    5a9a:	280a      	cmp	r0, #10
    5a9c:	d931      	bls.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5a9e:	4668      	mov	r0, sp
    5aa0:	f7fc fe64 	bl	276c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5aa4:	2800      	cmp	r0, #0
    5aa6:	d02c      	beq.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5aa8:	6861      	ldr	r1, [r4, #4]
    5aaa:	2205      	movs	r2, #5
    5aac:	4668      	mov	r0, sp
    5aae:	31ae      	adds	r1, #174	; 0xae
    5ab0:	f00a ff78 	bl	109a4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5ab4:	b310      	cbz	r0, 5afc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5ab6:	6860      	ldr	r0, [r4, #4]
    5ab8:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5abc:	7808      	ldrb	r0, [r1, #0]
    5abe:	b158      	cbz	r0, 5ad8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    5ac0:	2205      	movs	r2, #5
    5ac2:	4668      	mov	r0, sp
    5ac4:	1c49      	adds	r1, r1, #1
    5ac6:	f00a ff6d 	bl	109a4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5aca:	2800      	cmp	r0, #0
    5acc:	d119      	bne.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5ace:	6860      	ldr	r0, [r4, #4]
    5ad0:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5ad4:	7800      	ldrb	r0, [r0, #0]
    5ad6:	b940      	cbnz	r0, 5aea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    5ad8:	6860      	ldr	r0, [r4, #4]
    5ada:	9900      	ldr	r1, [sp, #0]
    5adc:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5ae0:	f8c0 1001 	str.w	r1, [r0, #1]
    5ae4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5ae8:	7141      	strb	r1, [r0, #5]
    5aea:	6860      	ldr	r0, [r4, #4]
    5aec:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5af0:	7801      	ldrb	r1, [r0, #0]
    5af2:	1c49      	adds	r1, r1, #1
    5af4:	7001      	strb	r1, [r0, #0]
    5af6:	2001      	movs	r0, #1
    5af8:	f000 fddc 	bl	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5afc:	6860      	ldr	r0, [r4, #4]
    5afe:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    5b02:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5b04:	20000114 	.word	0x20000114
    5b08:	4a0c      	ldr	r2, [pc, #48]	; (5b3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    5b0a:	7851      	ldrb	r1, [r2, #1]
    5b0c:	b9a1      	cbnz	r1, 5b38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5b0e:	f102 010c 	add.w	r1, r2, #12
    5b12:	2801      	cmp	r0, #1
    5b14:	6849      	ldr	r1, [r1, #4]
    5b16:	d008      	beq.n	5b2a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    5b18:	7890      	ldrb	r0, [r2, #2]
    5b1a:	0740      	lsls	r0, r0, #29
    5b1c:	d503      	bpl.n	5b26 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    5b1e:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    5b22:	2806      	cmp	r0, #6
    5b24:	d008      	beq.n	5b38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5b26:	2001      	movs	r0, #1
    5b28:	4770      	bx	lr
    5b2a:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    5b2e:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    5b30:	4288      	cmp	r0, r1
    5b32:	d801      	bhi.n	5b38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5b34:	f7ff bca2 	b.w	547c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    5b38:	2000      	movs	r0, #0
    5b3a:	4770      	bx	lr
    5b3c:	20000108 	.word	0x20000108
    5b40:	b538      	push	{r3, r4, r5, lr}
    5b42:	4c91      	ldr	r4, [pc, #580]	; (5d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x45c>)
    5b44:	6860      	ldr	r0, [r4, #4]
    5b46:	3088      	adds	r0, #136	; 0x88
    5b48:	f009 fb80 	bl	f24c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5b4c:	2800      	cmp	r0, #0
    5b4e:	d162      	bne.n	5c16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ea>
    5b50:	6860      	ldr	r0, [r4, #4]
    5b52:	2300      	movs	r3, #0
    5b54:	2101      	movs	r1, #1
    5b56:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5b5a:	3088      	adds	r0, #136	; 0x88
    5b5c:	f008 f8c8 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b60:	2800      	cmp	r0, #0
    5b62:	d158      	bne.n	5c16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ea>
    5b64:	6860      	ldr	r0, [r4, #4]
    5b66:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    5b6a:	f88d 1000 	strb.w	r1, [sp]
    5b6e:	9900      	ldr	r1, [sp, #0]
    5b70:	9100      	str	r1, [sp, #0]
    5b72:	f89d 1000 	ldrb.w	r1, [sp]
    5b76:	b109      	cbz	r1, 5b7c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5b78:	2002      	movs	r0, #2
    5b7a:	e042      	b.n	5c02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d6>
    5b7c:	2500      	movs	r5, #0
    5b7e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5b82:	462b      	mov	r3, r5
    5b84:	4629      	mov	r1, r5
    5b86:	3088      	adds	r0, #136	; 0x88
    5b88:	f008 f8b2 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b8c:	b128      	cbz	r0, 5b9a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5b8e:	6860      	ldr	r0, [r4, #4]
    5b90:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5b94:	b108      	cbz	r0, 5b9a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5b96:	2012      	movs	r0, #18
    5b98:	e033      	b.n	5c02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d6>
    5b9a:	6860      	ldr	r0, [r4, #4]
    5b9c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ba0:	2a19      	cmp	r2, #25
    5ba2:	d027      	beq.n	5bf4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5ba4:	dc06      	bgt.n	5bb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5ba6:	2a03      	cmp	r2, #3
    5ba8:	d026      	beq.n	5bf8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2cc>
    5baa:	2a12      	cmp	r2, #18
    5bac:	d01e      	beq.n	5bec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    5bae:	2a13      	cmp	r2, #19
    5bb0:	d104      	bne.n	5bbc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    5bb2:	e019      	b.n	5be8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5bb4:	2a24      	cmp	r2, #36	; 0x24
    5bb6:	d028      	beq.n	5c0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2de>
    5bb8:	2a2f      	cmp	r2, #47	; 0x2f
    5bba:	d02d      	beq.n	5c18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ec>
    5bbc:	2300      	movs	r3, #0
    5bbe:	2104      	movs	r1, #4
    5bc0:	3088      	adds	r0, #136	; 0x88
    5bc2:	f008 f895 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bc6:	2800      	cmp	r0, #0
    5bc8:	d125      	bne.n	5c16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ea>
    5bca:	6860      	ldr	r0, [r4, #4]
    5bcc:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    5bd0:	291e      	cmp	r1, #30
    5bd2:	d046      	beq.n	5c62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    5bd4:	dc27      	bgt.n	5c26 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fa>
    5bd6:	2901      	cmp	r1, #1
    5bd8:	d034      	beq.n	5c44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x318>
    5bda:	2902      	cmp	r1, #2
    5bdc:	d03f      	beq.n	5c5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x332>
    5bde:	2903      	cmp	r1, #3
    5be0:	d02a      	beq.n	5c38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x30c>
    5be2:	2904      	cmp	r1, #4
    5be4:	d13a      	bne.n	5c5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x330>
    5be6:	e0b2      	b.n	5d4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x422>
    5be8:	200b      	movs	r0, #11
    5bea:	e00a      	b.n	5c02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d6>
    5bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5bf0:	f000 bc8c 	b.w	650c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    5bf4:	2006      	movs	r0, #6
    5bf6:	e004      	b.n	5c02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d6>
    5bf8:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    5bfc:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5c00:	2007      	movs	r0, #7
    5c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5c06:	f000 bd55 	b.w	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5c0a:	2018      	movs	r0, #24
    5c0c:	f000 fd52 	bl	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5c10:	6860      	ldr	r0, [r4, #4]
    5c12:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    5c16:	bd38      	pop	{r3, r4, r5, pc}
    5c18:	2001      	movs	r0, #1
    5c1a:	f000 fd53 	bl	66c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>
    5c1e:	6860      	ldr	r0, [r4, #4]
    5c20:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    5c24:	bd38      	pop	{r3, r4, r5, pc}
    5c26:	291f      	cmp	r1, #31
    5c28:	d01b      	beq.n	5c62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    5c2a:	2922      	cmp	r1, #34	; 0x22
    5c2c:	d05e      	beq.n	5cec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5c2e:	2928      	cmp	r1, #40	; 0x28
    5c30:	d073      	beq.n	5d1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    5c32:	292f      	cmp	r1, #47	; 0x2f
    5c34:	d17a      	bne.n	5d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5c36:	e086      	b.n	5d46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x41a>
    5c38:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    5c3c:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5c40:	2007      	movs	r0, #7
    5c42:	e087      	b.n	5d54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x428>
    5c44:	200c      	movs	r0, #12
    5c46:	f000 fd35 	bl	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5c4a:	6860      	ldr	r0, [r4, #4]
    5c4c:	f820 5fe2 	strh.w	r5, [r0, #226]!
    5c50:	7941      	ldrb	r1, [r0, #5]
    5c52:	f041 0101 	orr.w	r1, r1, #1
    5c56:	7141      	strb	r1, [r0, #5]
    5c58:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5c5c:	e066      	b.n	5d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5c5e:	2013      	movs	r0, #19
    5c60:	e036      	b.n	5cd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3a4>
    5c62:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5c66:	f88d 2000 	strb.w	r2, [sp]
    5c6a:	9a00      	ldr	r2, [sp, #0]
    5c6c:	9200      	str	r2, [sp, #0]
    5c6e:	f89d 2000 	ldrb.w	r2, [sp]
    5c72:	bbaa      	cbnz	r2, 5ce0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b4>
    5c74:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5c78:	f88d 2000 	strb.w	r2, [sp]
    5c7c:	9a00      	ldr	r2, [sp, #0]
    5c7e:	9200      	str	r2, [sp, #0]
    5c80:	f89d 2000 	ldrb.w	r2, [sp]
    5c84:	b36a      	cbz	r2, 5ce2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b6>
    5c86:	2925      	cmp	r1, #37	; 0x25
    5c88:	d02e      	beq.n	5ce8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5c8a:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5c8e:	2925      	cmp	r1, #37	; 0x25
    5c90:	d02a      	beq.n	5ce8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5c92:	2926      	cmp	r1, #38	; 0x26
    5c94:	d028      	beq.n	5ce8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5c96:	2300      	movs	r3, #0
    5c98:	f200 2262 	addw	r2, r0, #610	; 0x262
    5c9c:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5ca0:	f008 fb81 	bl	e3a6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5ca4:	6860      	ldr	r0, [r4, #4]
    5ca6:	211f      	movs	r1, #31
    5ca8:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5cac:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5cb0:	6860      	ldr	r0, [r4, #4]
    5cb2:	f008 fb93 	bl	e3dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5cb6:	4834      	ldr	r0, [pc, #208]	; (5d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x45c>)
    5cb8:	f008 fd9c 	bl	e7f4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    5cbc:	6861      	ldr	r1, [r4, #4]
    5cbe:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5cc2:	8bc2      	ldrh	r2, [r0, #30]
    5cc4:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5cc8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5cca:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5cce:	2015      	movs	r0, #21
    5cd0:	f000 fcf0 	bl	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5cd4:	6860      	ldr	r0, [r4, #4]
    5cd6:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5cda:	bf00      	nop
    5cdc:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5ce0:	e024      	b.n	5d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5ce2:	291f      	cmp	r1, #31
    5ce4:	d0e4      	beq.n	5cb0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x384>
    5ce6:	e021      	b.n	5d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5ce8:	2301      	movs	r3, #1
    5cea:	e7d5      	b.n	5c98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x36c>
    5cec:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5cf0:	2901      	cmp	r1, #1
    5cf2:	d108      	bne.n	5d06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3da>
    5cf4:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5cf8:	f88d 1000 	strb.w	r1, [sp]
    5cfc:	9900      	ldr	r1, [sp, #0]
    5cfe:	9100      	str	r1, [sp, #0]
    5d00:	f89d 1000 	ldrb.w	r1, [sp]
    5d04:	b121      	cbz	r1, 5d10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5d06:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5d0a:	2902      	cmp	r1, #2
    5d0c:	d006      	beq.n	5d1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5d0e:	e00d      	b.n	5d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5d10:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5d14:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5d18:	e003      	b.n	5d22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f6>
    5d1a:	e01a      	b.n	5d52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x426>
    5d1c:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5d20:	6840      	ldr	r0, [r0, #4]
    5d22:	f000 fcd9 	bl	66d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdac>
    5d26:	2018      	movs	r0, #24
    5d28:	f000 fcc4 	bl	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5d2c:	6860      	ldr	r0, [r4, #4]
    5d2e:	3088      	adds	r0, #136	; 0x88
    5d30:	f009 fa8c 	bl	f24c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5d34:	2800      	cmp	r0, #0
    5d36:	f47f af75 	bne.w	5c24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f8>
    5d3a:	6860      	ldr	r0, [r4, #4]
    5d3c:	3088      	adds	r0, #136	; 0x88
    5d3e:	f009 fa85 	bl	f24c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5d42:	b158      	cbz	r0, 5d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5d44:	e015      	b.n	5d72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x446>
    5d46:	2000      	movs	r0, #0
    5d48:	f000 fcbc 	bl	66c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>
    5d4c:	e004      	b.n	5d58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    5d4e:	2009      	movs	r0, #9
    5d50:	e000      	b.n	5d54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x428>
    5d52:	2024      	movs	r0, #36	; 0x24
    5d54:	f000 fcae 	bl	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5d58:	6860      	ldr	r0, [r4, #4]
    5d5a:	e7bf      	b.n	5cdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b0>
    5d5c:	6860      	ldr	r0, [r4, #4]
    5d5e:	2300      	movs	r3, #0
    5d60:	4619      	mov	r1, r3
    5d62:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d66:	3088      	adds	r0, #136	; 0x88
    5d68:	f007 ffc2 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d6c:	b108      	cbz	r0, 5d72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x446>
    5d6e:	f000 fb03 	bl	6378 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    5d72:	6860      	ldr	r0, [r4, #4]
    5d74:	3088      	adds	r0, #136	; 0x88
    5d76:	f009 fa69 	bl	f24c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5d7a:	2800      	cmp	r0, #0
    5d7c:	d1db      	bne.n	5d36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5d82:	f7ff be69 	b.w	5a58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5d86:	0000      	.short	0x0000
    5d88:	20000114 	.word	0x20000114
    5d8c:	b538      	push	{r3, r4, r5, lr}
    5d8e:	4d1a      	ldr	r5, [pc, #104]	; (5df8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4cc>)
    5d90:	686b      	ldr	r3, [r5, #4]
    5d92:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5d96:	2917      	cmp	r1, #23
    5d98:	d001      	beq.n	5d9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x472>
    5d9a:	2914      	cmp	r1, #20
    5d9c:	d102      	bne.n	5da4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x478>
    5d9e:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5da2:	b109      	cbz	r1, 5da8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x47c>
    5da4:	2002      	movs	r0, #2
    5da6:	bd38      	pop	{r3, r4, r5, pc}
    5da8:	2400      	movs	r4, #0
    5daa:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5dae:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5db2:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5db6:	f88d 1000 	strb.w	r1, [sp]
    5dba:	9900      	ldr	r1, [sp, #0]
    5dbc:	9100      	str	r1, [sp, #0]
    5dbe:	f89d 1000 	ldrb.w	r1, [sp]
    5dc2:	b121      	cbz	r1, 5dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5dc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5dc8:	2036      	movs	r0, #54	; 0x36
    5dca:	f7fa fe27 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dce:	8819      	ldrh	r1, [r3, #0]
    5dd0:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5dd4:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5dd8:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5ddc:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5de0:	f203 2012 	addw	r0, r3, #530	; 0x212
    5de4:	2202      	movs	r2, #2
    5de6:	4905      	ldr	r1, [pc, #20]	; (5dfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d0>)
    5de8:	f008 fab3 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5dec:	6868      	ldr	r0, [r5, #4]
    5dee:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5df2:	2000      	movs	r0, #0
    5df4:	bd38      	pop	{r3, r4, r5, pc}
    5df6:	0000      	.short	0x0000
    5df8:	20000114 	.word	0x20000114
    5dfc:	0000e815 	.word	0x0000e815
    5e00:	b570      	push	{r4, r5, r6, lr}
    5e02:	4604      	mov	r4, r0
    5e04:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5e08:	2500      	movs	r5, #0
    5e0a:	280b      	cmp	r0, #11
    5e0c:	d001      	beq.n	5e12 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4e6>
    5e0e:	280c      	cmp	r0, #12
    5e10:	d108      	bne.n	5e24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4f8>
    5e12:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5e16:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5e1a:	1a89      	subs	r1, r1, r2
    5e1c:	1c49      	adds	r1, r1, #1
    5e1e:	0409      	lsls	r1, r1, #16
    5e20:	0c09      	lsrs	r1, r1, #16
    5e22:	d032      	beq.n	5e8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x55e>
    5e24:	280d      	cmp	r0, #13
    5e26:	d001      	beq.n	5e2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>
    5e28:	280e      	cmp	r0, #14
    5e2a:	d12d      	bne.n	5e88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x55c>
    5e2c:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5e30:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5e34:	1a40      	subs	r0, r0, r1
    5e36:	1c40      	adds	r0, r0, #1
    5e38:	0400      	lsls	r0, r0, #16
    5e3a:	0c00      	lsrs	r0, r0, #16
    5e3c:	d124      	bne.n	5e88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x55c>
    5e3e:	8820      	ldrh	r0, [r4, #0]
    5e40:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5e44:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5e48:	f007 ff4c 	bl	dce4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5e4c:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5e50:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5e54:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5e58:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5e5c:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5e60:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5e64:	2202      	movs	r2, #2
    5e66:	4919      	ldr	r1, [pc, #100]	; (5ecc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5a0>)
    5e68:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5e6c:	f008 fa85 	bl	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5e70:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5e74:	2102      	movs	r1, #2
    5e76:	4620      	mov	r0, r4
    5e78:	f7fc fbcc 	bl	2614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5e7c:	2103      	movs	r1, #3
    5e7e:	4620      	mov	r0, r4
    5e80:	f009 f81a 	bl	eeb8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5e84:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5e88:	bd70      	pop	{r4, r5, r6, pc}
    5e8a:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5e8e:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5e92:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5e96:	7940      	ldrb	r0, [r0, #5]
    5e98:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5e9c:	2103      	movs	r1, #3
    5e9e:	4620      	mov	r0, r4
    5ea0:	f7fc fbb8 	bl	2614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5ea4:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5ea8:	7800      	ldrb	r0, [r0, #0]
    5eaa:	b148      	cbz	r0, 5ec0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x594>
    5eac:	2101      	movs	r1, #1
    5eae:	20fe      	movs	r0, #254	; 0xfe
    5eb0:	f000 ffd8 	bl	6e64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    5eb4:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5eb8:	20ff      	movs	r0, #255	; 0xff
    5eba:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5ebe:	bd70      	pop	{r4, r5, r6, pc}
    5ec0:	f240 2152 	movw	r1, #594	; 0x252
    5ec4:	2036      	movs	r0, #54	; 0x36
    5ec6:	f7fa fda9 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eca:	0000      	.short	0x0000
    5ecc:	0000e733 	.word	0x0000e733
    5ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ed2:	4d28      	ldr	r5, [pc, #160]	; (5f74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>)
    5ed4:	f04f 0600 	mov.w	r6, #0
    5ed8:	f105 040c 	add.w	r4, r5, #12
    5edc:	8869      	ldrh	r1, [r5, #2]
    5ede:	0748      	lsls	r0, r1, #29
    5ee0:	d510      	bpl.n	5f04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d8>
    5ee2:	6860      	ldr	r0, [r4, #4]
    5ee4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ee8:	2a03      	cmp	r2, #3
    5eea:	d004      	beq.n	5ef6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5ca>
    5eec:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5ef0:	2a06      	cmp	r2, #6
    5ef2:	d107      	bne.n	5f04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d8>
    5ef4:	e002      	b.n	5efc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>
    5ef6:	f240 6191 	movw	r1, #1681	; 0x691
    5efa:	e025      	b.n	5f48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x61c>
    5efc:	2201      	movs	r2, #1
    5efe:	702a      	strb	r2, [r5, #0]
    5f00:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5f04:	0788      	lsls	r0, r1, #30
    5f06:	d50a      	bpl.n	5f1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5f2>
    5f08:	6868      	ldr	r0, [r5, #4]
    5f0a:	78c0      	ldrb	r0, [r0, #3]
    5f0c:	282b      	cmp	r0, #43	; 0x2b
    5f0e:	d219      	bcs.n	5f44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x618>
    5f10:	4919      	ldr	r1, [pc, #100]	; (5f78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>)
    5f12:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5f16:	b1a9      	cbz	r1, 5f44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x618>
    5f18:	4816      	ldr	r0, [pc, #88]	; (5f74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>)
    5f1a:	300c      	adds	r0, #12
    5f1c:	4788      	blx	r1
    5f1e:	f000 f86d 	bl	5ffc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6d0>
    5f22:	f000 f82b 	bl	5f7c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x650>
    5f26:	4607      	mov	r7, r0
    5f28:	7868      	ldrb	r0, [r5, #1]
    5f2a:	0700      	lsls	r0, r0, #28
    5f2c:	d51c      	bpl.n	5f68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x63c>
    5f2e:	6860      	ldr	r0, [r4, #4]
    5f30:	2300      	movs	r3, #0
    5f32:	2105      	movs	r1, #5
    5f34:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5f38:	3088      	adds	r0, #136	; 0x88
    5f3a:	f007 fed9 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f3e:	b130      	cbz	r0, 5f4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5f40:	2708      	movs	r7, #8
    5f42:	e011      	b.n	5f68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x63c>
    5f44:	f240 719d 	movw	r1, #1949	; 0x79d
    5f48:	2036      	movs	r0, #54	; 0x36
    5f4a:	f7fa fd67 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f4e:	4669      	mov	r1, sp
    5f50:	2003      	movs	r0, #3
    5f52:	9600      	str	r6, [sp, #0]
    5f54:	f7fb fd0e 	bl	1974 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5f58:	9800      	ldr	r0, [sp, #0]
    5f5a:	b128      	cbz	r0, 5f68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x63c>
    5f5c:	7206      	strb	r6, [r0, #8]
    5f5e:	2210      	movs	r2, #16
    5f60:	6861      	ldr	r1, [r4, #4]
    5f62:	9800      	ldr	r0, [sp, #0]
    5f64:	f008 f9f5 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5f68:	6860      	ldr	r0, [r4, #4]
    5f6a:	f7ff ff49 	bl	5e00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d4>
    5f6e:	4638      	mov	r0, r7
    5f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f72:	0000      	.short	0x0000
    5f74:	20000108 	.word	0x20000108
    5f78:	200001c8 	.word	0x200001c8
    5f7c:	b570      	push	{r4, r5, r6, lr}
    5f7e:	4c1d      	ldr	r4, [pc, #116]	; (5ff4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>)
    5f80:	2000      	movs	r0, #0
    5f82:	78a1      	ldrb	r1, [r4, #2]
    5f84:	07c9      	lsls	r1, r1, #31
    5f86:	d01d      	beq.n	5fc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x698>
    5f88:	68a0      	ldr	r0, [r4, #8]
    5f8a:	2300      	movs	r3, #0
    5f8c:	2105      	movs	r1, #5
    5f8e:	78c5      	ldrb	r5, [r0, #3]
    5f90:	f104 000c 	add.w	r0, r4, #12
    5f94:	6840      	ldr	r0, [r0, #4]
    5f96:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5f9a:	3088      	adds	r0, #136	; 0x88
    5f9c:	f007 fea8 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5fa0:	b188      	cbz	r0, 5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5fa2:	2d06      	cmp	r5, #6
    5fa4:	d00f      	beq.n	5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5fa6:	dc06      	bgt.n	5fb6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x68a>
    5fa8:	2d02      	cmp	r5, #2
    5faa:	d00c      	beq.n	5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5fac:	2d04      	cmp	r5, #4
    5fae:	d00a      	beq.n	5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5fb0:	2d05      	cmp	r5, #5
    5fb2:	d106      	bne.n	5fc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x696>
    5fb4:	e007      	b.n	5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5fb6:	2d0b      	cmp	r5, #11
    5fb8:	d005      	beq.n	5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5fba:	2d0d      	cmp	r5, #13
    5fbc:	d003      	beq.n	5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5fbe:	2d11      	cmp	r5, #17
    5fc0:	d001      	beq.n	5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5fc2:	2008      	movs	r0, #8
    5fc4:	bd70      	pop	{r4, r5, r6, pc}
    5fc6:	68a0      	ldr	r0, [r4, #8]
    5fc8:	f7fc fc62 	bl	2890 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5fcc:	b160      	cbz	r0, 5fe8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6bc>
    5fce:	68a0      	ldr	r0, [r4, #8]
    5fd0:	78c0      	ldrb	r0, [r0, #3]
    5fd2:	282b      	cmp	r0, #43	; 0x2b
    5fd4:	d208      	bcs.n	5fe8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6bc>
    5fd6:	4908      	ldr	r1, [pc, #32]	; (5ff8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6cc>)
    5fd8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5fdc:	b121      	cbz	r1, 5fe8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6bc>
    5fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5fe2:	4804      	ldr	r0, [pc, #16]	; (5ff4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>)
    5fe4:	300c      	adds	r0, #12
    5fe6:	4708      	bx	r1
    5fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5fec:	2000      	movs	r0, #0
    5fee:	f000 bbbd 	b.w	676c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe40>
    5ff2:	0000      	.short	0x0000
    5ff4:	20000108 	.word	0x20000108
    5ff8:	2000011c 	.word	0x2000011c
    5ffc:	b570      	push	{r4, r5, r6, lr}
    5ffe:	4d1a      	ldr	r5, [pc, #104]	; (6068 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73c>)
    6000:	78a8      	ldrb	r0, [r5, #2]
    6002:	0700      	lsls	r0, r0, #28
    6004:	d52e      	bpl.n	6064 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x738>
    6006:	f105 040c 	add.w	r4, r5, #12
    600a:	2100      	movs	r1, #0
    600c:	6860      	ldr	r0, [r4, #4]
    600e:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    6012:	f000 ff27 	bl	6e64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    6016:	6860      	ldr	r0, [r4, #4]
    6018:	3088      	adds	r0, #136	; 0x88
    601a:	f009 f917 	bl	f24c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    601e:	b160      	cbz	r0, 603a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70e>
    6020:	6860      	ldr	r0, [r4, #4]
    6022:	21fe      	movs	r1, #254	; 0xfe
    6024:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    6028:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    602c:	290b      	cmp	r1, #11
    602e:	d009      	beq.n	6044 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x718>
    6030:	290d      	cmp	r1, #13
    6032:	d009      	beq.n	6048 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x71c>
    6034:	2925      	cmp	r1, #37	; 0x25
    6036:	d10c      	bne.n	6052 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x726>
    6038:	e008      	b.n	604c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x720>
    603a:	f240 71a9 	movw	r1, #1961	; 0x7a9
    603e:	2036      	movs	r0, #54	; 0x36
    6040:	f7fa fcec 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6044:	210c      	movs	r1, #12
    6046:	e002      	b.n	604e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x722>
    6048:	210e      	movs	r1, #14
    604a:	e000      	b.n	604e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x722>
    604c:	2126      	movs	r1, #38	; 0x26
    604e:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    6052:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    6056:	2907      	cmp	r1, #7
    6058:	d104      	bne.n	6064 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x738>
    605a:	2102      	movs	r1, #2
    605c:	7029      	strb	r1, [r5, #0]
    605e:	2100      	movs	r1, #0
    6060:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    6064:	bd70      	pop	{r4, r5, r6, pc}
    6066:	0000      	.short	0x0000
    6068:	20000108 	.word	0x20000108
    606c:	b538      	push	{r3, r4, r5, lr}
    606e:	4605      	mov	r5, r0
    6070:	4668      	mov	r0, sp
    6072:	f7fb fb11 	bl	1698 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    6076:	b348      	cbz	r0, 60cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7a0>
    6078:	2222      	movs	r2, #34	; 0x22
    607a:	2100      	movs	r1, #0
    607c:	9800      	ldr	r0, [sp, #0]
    607e:	f00a fd1d 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6082:	2103      	movs	r1, #3
    6084:	9800      	ldr	r0, [sp, #0]
    6086:	f008 f928 	bl	e2da <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    608a:	9800      	ldr	r0, [sp, #0]
    608c:	7801      	ldrb	r1, [r0, #0]
    608e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6092:	7001      	strb	r1, [r0, #0]
    6094:	4629      	mov	r1, r5
    6096:	f7fc fc0b 	bl	28b0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    609a:	2100      	movs	r1, #0
    609c:	4c73      	ldr	r4, [pc, #460]	; (626c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x940>)
    609e:	2d26      	cmp	r5, #38	; 0x26
    60a0:	d276      	bcs.n	6190 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x864>
    60a2:	e8df f005 	tbb	[pc, r5]
    60a6:	2129      	.short	0x2129
    60a8:	dbdb5116 	.word	0xdbdb5116
    60ac:	7a761bd4 	.word	0x7a761bd4
    60b0:	db6ad4d4 	.word	0xdb6ad4d4
    60b4:	bcdbdbdb 	.word	0xbcdbdbdb
    60b8:	7f7fd4d4 	.word	0x7f7fd4d4
    60bc:	dba2db98 	.word	0xdba2db98
    60c0:	dbdbdbdb 	.word	0xdbdbdbdb
    60c4:	dbdbdbdb 	.word	0xdbdbdbdb
    60c8:	b5b5b5db 	.word	0xb5b5b5db
    60cc:	f640 2114 	movw	r1, #2580	; 0xa14
    60d0:	e0c9      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93a>
    60d2:	6861      	ldr	r1, [r4, #4]
    60d4:	9800      	ldr	r0, [sp, #0]
    60d6:	f891 1139 	ldrb.w	r1, [r1, #313]	; 0x139
    60da:	e003      	b.n	60e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7b8>
    60dc:	6861      	ldr	r1, [r4, #4]
    60de:	9800      	ldr	r0, [sp, #0]
    60e0:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    60e4:	7101      	strb	r1, [r0, #4]
    60e6:	e0b2      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    60e8:	6860      	ldr	r0, [r4, #4]
    60ea:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    60ee:	9800      	ldr	r0, [sp, #0]
    60f0:	1c49      	adds	r1, r1, #1
    60f2:	f008 f883 	bl	e1fc <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    60f6:	e0aa      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    60f8:	6860      	ldr	r0, [r4, #4]
    60fa:	9d00      	ldr	r5, [sp, #0]
    60fc:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    6100:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    6104:	f007 ff66 	bl	dfd4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6108:	7128      	strb	r0, [r5, #4]
    610a:	6860      	ldr	r0, [r4, #4]
    610c:	9d00      	ldr	r5, [sp, #0]
    610e:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    6112:	c803      	ldmia	r0, {r0, r1}
    6114:	f007 ff47 	bl	dfa6 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6118:	7168      	strb	r0, [r5, #5]
    611a:	0a00      	lsrs	r0, r0, #8
    611c:	71a8      	strb	r0, [r5, #6]
    611e:	6860      	ldr	r0, [r4, #4]
    6120:	9d00      	ldr	r5, [sp, #0]
    6122:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    6126:	f007 fddd 	bl	dce4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    612a:	71e8      	strb	r0, [r5, #7]
    612c:	0a00      	lsrs	r0, r0, #8
    612e:	7228      	strb	r0, [r5, #8]
    6130:	6862      	ldr	r2, [r4, #4]
    6132:	9800      	ldr	r0, [sp, #0]
    6134:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    6138:	7241      	strb	r1, [r0, #9]
    613a:	0a09      	lsrs	r1, r1, #8
    613c:	7281      	strb	r1, [r0, #10]
    613e:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    6142:	f008 f860 	bl	e206 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    6146:	e082      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    6148:	6861      	ldr	r1, [r4, #4]
    614a:	9800      	ldr	r0, [sp, #0]
    614c:	f201 2179 	addw	r1, r1, #633	; 0x279
    6150:	f008 f86e 	bl	e230 <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    6154:	6861      	ldr	r1, [r4, #4]
    6156:	9800      	ldr	r0, [sp, #0]
    6158:	f201 2181 	addw	r1, r1, #641	; 0x281
    615c:	f008 f861 	bl	e222 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    6160:	6861      	ldr	r1, [r4, #4]
    6162:	9800      	ldr	r0, [sp, #0]
    6164:	f201 2193 	addw	r1, r1, #659	; 0x293
    6168:	f008 f867 	bl	e23a <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    616c:	6861      	ldr	r1, [r4, #4]
    616e:	9800      	ldr	r0, [sp, #0]
    6170:	f501 7190 	add.w	r1, r1, #288	; 0x120
    6174:	f008 f858 	bl	e228 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    6178:	e069      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    617a:	9800      	ldr	r0, [sp, #0]
    617c:	220d      	movs	r2, #13
    617e:	7102      	strb	r2, [r0, #4]
    6180:	2259      	movs	r2, #89	; 0x59
    6182:	7142      	strb	r2, [r0, #5]
    6184:	7181      	strb	r1, [r0, #6]
    6186:	2177      	movs	r1, #119	; 0x77
    6188:	71c1      	strb	r1, [r0, #7]
    618a:	2110      	movs	r1, #16
    618c:	7201      	strb	r1, [r0, #8]
    618e:	e05e      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    6190:	e064      	b.n	625c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x930>
    6192:	9800      	ldr	r0, [sp, #0]
    6194:	f7fc ff2e 	bl	2ff4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    6198:	e059      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    619a:	4834      	ldr	r0, [pc, #208]	; (626c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x940>)
    619c:	9900      	ldr	r1, [sp, #0]
    619e:	f7fc ff83 	bl	30a8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    61a2:	e054      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    61a4:	6860      	ldr	r0, [r4, #4]
    61a6:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    61aa:	9800      	ldr	r0, [sp, #0]
    61ac:	f008 f8a5 	bl	e2fa <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    61b0:	6860      	ldr	r0, [r4, #4]
    61b2:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    61b6:	9800      	ldr	r0, [sp, #0]
    61b8:	f008 f8a3 	bl	e302 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    61bc:	6860      	ldr	r0, [r4, #4]
    61be:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    61c2:	9800      	ldr	r0, [sp, #0]
    61c4:	f008 f891 	bl	e2ea <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    61c8:	6860      	ldr	r0, [r4, #4]
    61ca:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    61ce:	9800      	ldr	r0, [sp, #0]
    61d0:	f008 f88f 	bl	e2f2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    61d4:	e03b      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    61d6:	6861      	ldr	r1, [r4, #4]
    61d8:	9800      	ldr	r0, [sp, #0]
    61da:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    61de:	7101      	strb	r1, [r0, #4]
    61e0:	6861      	ldr	r1, [r4, #4]
    61e2:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    61e6:	7141      	strb	r1, [r0, #5]
    61e8:	e031      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    61ea:	6860      	ldr	r0, [r4, #4]
    61ec:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    61f0:	f007 fe33 	bl	de5a <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    61f4:	4601      	mov	r1, r0
    61f6:	9800      	ldr	r0, [sp, #0]
    61f8:	f008 f85b 	bl	e2b2 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    61fc:	6860      	ldr	r0, [r4, #4]
    61fe:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    6202:	f007 fe2a 	bl	de5a <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    6206:	4601      	mov	r1, r0
    6208:	9800      	ldr	r0, [sp, #0]
    620a:	f008 f850 	bl	e2ae <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    620e:	e01e      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    6210:	4b17      	ldr	r3, [pc, #92]	; (6270 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x944>)
    6212:	4a16      	ldr	r2, [pc, #88]	; (626c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x940>)
    6214:	4628      	mov	r0, r5
    6216:	681b      	ldr	r3, [r3, #0]
    6218:	9900      	ldr	r1, [sp, #0]
    621a:	4798      	blx	r3
    621c:	e017      	b.n	624e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    621e:	6860      	ldr	r0, [r4, #4]
    6220:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6224:	b141      	cbz	r1, 6238 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90c>
    6226:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    622a:	9800      	ldr	r0, [sp, #0]
    622c:	f008 f84f 	bl	e2ce <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6230:	6860      	ldr	r0, [r4, #4]
    6232:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    6236:	e007      	b.n	6248 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x91c>
    6238:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    623c:	9800      	ldr	r0, [sp, #0]
    623e:	f008 f846 	bl	e2ce <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6242:	6860      	ldr	r0, [r4, #4]
    6244:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    6248:	9800      	ldr	r0, [sp, #0]
    624a:	f008 f844 	bl	e2d6 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    624e:	f7fb f9fd 	bl	164c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    6252:	b130      	cbz	r0, 6262 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x936>
    6254:	9800      	ldr	r0, [sp, #0]
    6256:	f7ff fbe5 	bl	5a24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    625a:	bd38      	pop	{r3, r4, r5, pc}
    625c:	f640 21ea 	movw	r1, #2794	; 0xaea
    6260:	e001      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93a>
    6262:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    6266:	2036      	movs	r0, #54	; 0x36
    6268:	f7fa fbd8 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    626c:	20000114 	.word	0x20000114
    6270:	20000274 	.word	0x20000274
    6274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6278:	4e28      	ldr	r6, [pc, #160]	; (631c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9f0>)
    627a:	4680      	mov	r8, r0
    627c:	460d      	mov	r5, r1
    627e:	8870      	ldrh	r0, [r6, #2]
    6280:	f106 040c 	add.w	r4, r6, #12
    6284:	05c1      	lsls	r1, r0, #23
    6286:	6860      	ldr	r0, [r4, #4]
    6288:	f04f 0700 	mov.w	r7, #0
    628c:	d502      	bpl.n	6294 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x968>
    628e:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    6292:	e004      	b.n	629e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x972>
    6294:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    6298:	1c49      	adds	r1, r1, #1
    629a:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    629e:	f009 f934 	bl	f50a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2da>
    62a2:	b1f0      	cbz	r0, 62e2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b6>
    62a4:	8870      	ldrh	r0, [r6, #2]
    62a6:	0500      	lsls	r0, r0, #20
    62a8:	d506      	bpl.n	62b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x98c>
    62aa:	6860      	ldr	r0, [r4, #4]
    62ac:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    62b0:	b111      	cbz	r1, 62b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x98c>
    62b2:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    62b6:	e014      	b.n	62e2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b6>
    62b8:	6860      	ldr	r0, [r4, #4]
    62ba:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    62be:	1c49      	adds	r1, r1, #1
    62c0:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    62c4:	f008 ffe3 	bl	f28e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    62c8:	6860      	ldr	r0, [r4, #4]
    62ca:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    62ce:	4291      	cmp	r1, r2
    62d0:	d307      	bcc.n	62e2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b6>
    62d2:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    62d6:	2202      	movs	r2, #2
    62d8:	4911      	ldr	r1, [pc, #68]	; (6320 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9f4>)
    62da:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    62de:	f008 f84c 	bl	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    62e2:	8870      	ldrh	r0, [r6, #2]
    62e4:	f410 7f40 	tst.w	r0, #768	; 0x300
    62e8:	d008      	beq.n	62fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9d0>
    62ea:	6860      	ldr	r0, [r4, #4]
    62ec:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    62f0:	b921      	cbnz	r1, 62fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9d0>
    62f2:	2101      	movs	r1, #1
    62f4:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    62f8:	f008 fdde 	bl	eeb8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    62fc:	ea58 0005 	orrs.w	r0, r8, r5
    6300:	d104      	bne.n	630c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e0>
    6302:	f7ff fde5 	bl	5ed0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5a4>
    6306:	4605      	mov	r5, r0
    6308:	f7ff fc1a 	bl	5b40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    630c:	4629      	mov	r1, r5
    630e:	4640      	mov	r0, r8
    6310:	f000 fcb0 	bl	6c74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1348>
    6314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6318:	f7fb b982 	b.w	1620 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    631c:	20000108 	.word	0x20000108
    6320:	0000e8c5 	.word	0x0000e8c5
    6324:	4813      	ldr	r0, [pc, #76]	; (6374 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa48>)
    6326:	6840      	ldr	r0, [r0, #4]
    6328:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    632c:	b129      	cbz	r1, 633a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0e>
    632e:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    6332:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6336:	4291      	cmp	r1, r2
    6338:	d215      	bcs.n	6366 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    633a:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    633e:	b129      	cbz	r1, 634c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>
    6340:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    6344:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6348:	4291      	cmp	r1, r2
    634a:	d20c      	bcs.n	6366 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    634c:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    6350:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6354:	428a      	cmp	r2, r1
    6356:	d206      	bcs.n	6366 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    6358:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    635c:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    6360:	b11a      	cbz	r2, 636a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3e>
    6362:	4288      	cmp	r0, r1
    6364:	d303      	bcc.n	636e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa42>
    6366:	2001      	movs	r0, #1
    6368:	4770      	bx	lr
    636a:	2806      	cmp	r0, #6
    636c:	d2fb      	bcs.n	6366 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    636e:	2000      	movs	r0, #0
    6370:	4770      	bx	lr
    6372:	0000      	.short	0x0000
    6374:	20000114 	.word	0x20000114
    6378:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    637a:	4c63      	ldr	r4, [pc, #396]	; (6508 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbdc>)
    637c:	6860      	ldr	r0, [r4, #4]
    637e:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    6382:	f88d 1000 	strb.w	r1, [sp]
    6386:	9900      	ldr	r1, [sp, #0]
    6388:	9100      	str	r1, [sp, #0]
    638a:	f89d 1000 	ldrb.w	r1, [sp]
    638e:	2500      	movs	r5, #0
    6390:	b129      	cbz	r1, 639e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa72>
    6392:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    6396:	f007 fd0e 	bl	ddb6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    639a:	2800      	cmp	r0, #0
    639c:	d07d      	beq.n	649a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    639e:	6860      	ldr	r0, [r4, #4]
    63a0:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    63a4:	b181      	cbz	r1, 63c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9c>
    63a6:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    63aa:	b149      	cbz	r1, 63c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa94>
    63ac:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    63b0:	b108      	cbz	r0, 63b6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa8a>
    63b2:	200a      	movs	r0, #10
    63b4:	e071      	b.n	649a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    63b6:	f44f 6103 	mov.w	r1, #2096	; 0x830
    63ba:	2036      	movs	r0, #54	; 0x36
    63bc:	f7fa fb2e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63c0:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    63c4:	f000 b8a2 	b.w	650c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    63c8:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    63cc:	b109      	cbz	r1, 63d2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa6>
    63ce:	2008      	movs	r0, #8
    63d0:	e063      	b.n	649a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    63d2:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    63d6:	b179      	cbz	r1, 63f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xacc>
    63d8:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    63dc:	0780      	lsls	r0, r0, #30
    63de:	d10a      	bne.n	63f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaca>
    63e0:	200c      	movs	r0, #12
    63e2:	f000 f967 	bl	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    63e6:	6860      	ldr	r0, [r4, #4]
    63e8:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    63ec:	f041 0101 	orr.w	r1, r1, #1
    63f0:	7001      	strb	r1, [r0, #0]
    63f2:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    63f6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    63f8:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    63fc:	f88d 1004 	strb.w	r1, [sp, #4]
    6400:	9901      	ldr	r1, [sp, #4]
    6402:	9101      	str	r1, [sp, #4]
    6404:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6408:	b141      	cbz	r1, 641c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf0>
    640a:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    640e:	f88d 1000 	strb.w	r1, [sp]
    6412:	9900      	ldr	r1, [sp, #0]
    6414:	9100      	str	r1, [sp, #0]
    6416:	f89d 1000 	ldrb.w	r1, [sp]
    641a:	b121      	cbz	r1, 6426 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xafa>
    641c:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    6420:	2901      	cmp	r1, #1
    6422:	d021      	beq.n	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    6424:	e02e      	b.n	6484 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb58>
    6426:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    642a:	2925      	cmp	r1, #37	; 0x25
    642c:	d01a      	beq.n	6464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb38>
    642e:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6432:	2925      	cmp	r1, #37	; 0x25
    6434:	d016      	beq.n	6464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb38>
    6436:	2926      	cmp	r1, #38	; 0x26
    6438:	d014      	beq.n	6464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb38>
    643a:	2300      	movs	r3, #0
    643c:	f200 2262 	addw	r2, r0, #610	; 0x262
    6440:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    6444:	f007 ffaf 	bl	e3a6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6448:	6860      	ldr	r0, [r4, #4]
    644a:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    644e:	6861      	ldr	r1, [r4, #4]
    6450:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6454:	8bc2      	ldrh	r2, [r0, #30]
    6456:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    645a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    645c:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    6460:	2014      	movs	r0, #20
    6462:	e01a      	b.n	649a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    6464:	2301      	movs	r3, #1
    6466:	e7e9      	b.n	643c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb10>
    6468:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    646c:	f88d 1000 	strb.w	r1, [sp]
    6470:	9900      	ldr	r1, [sp, #0]
    6472:	9100      	str	r1, [sp, #0]
    6474:	f89d 1000 	ldrb.w	r1, [sp]
    6478:	b921      	cbnz	r1, 6484 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb58>
    647a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    647e:	f007 fc9a 	bl	ddb6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    6482:	b170      	cbz	r0, 64a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb76>
    6484:	6860      	ldr	r0, [r4, #4]
    6486:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    648a:	f88d 1000 	strb.w	r1, [sp]
    648e:	9900      	ldr	r1, [sp, #0]
    6490:	9100      	str	r1, [sp, #0]
    6492:	f89d 1000 	ldrb.w	r1, [sp]
    6496:	b329      	cbz	r1, 64e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbb8>
    6498:	2023      	movs	r0, #35	; 0x23
    649a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    649e:	f000 b909 	b.w	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    64a2:	6860      	ldr	r0, [r4, #4]
    64a4:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    64a8:	f008 fed8 	bl	f25c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    64ac:	4605      	mov	r5, r0
    64ae:	6860      	ldr	r0, [r4, #4]
    64b0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    64b4:	f008 fed2 	bl	f25c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    64b8:	4606      	mov	r6, r0
    64ba:	6860      	ldr	r0, [r4, #4]
    64bc:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    64c0:	4628      	mov	r0, r5
    64c2:	f008 fed6 	bl	f272 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    64c6:	b158      	cbz	r0, 64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbb4>
    64c8:	6860      	ldr	r0, [r4, #4]
    64ca:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    64ce:	4630      	mov	r0, r6
    64d0:	f008 fecf 	bl	f272 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    64d4:	b120      	cbz	r0, 64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbb4>
    64d6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    64da:	2000      	movs	r0, #0
    64dc:	f000 b8e4 	b.w	66a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    64e0:	2016      	movs	r0, #22
    64e2:	e7da      	b.n	649a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    64e4:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    64e8:	f88d 0000 	strb.w	r0, [sp]
    64ec:	9800      	ldr	r0, [sp, #0]
    64ee:	9000      	str	r0, [sp, #0]
    64f0:	f89d 0000 	ldrb.w	r0, [sp]
    64f4:	2800      	cmp	r0, #0
    64f6:	f43f af7e 	beq.w	63f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaca>
    64fa:	2025      	movs	r0, #37	; 0x25
    64fc:	f000 f8da 	bl	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    6500:	6860      	ldr	r0, [r4, #4]
    6502:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    6506:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6508:	20000114 	.word	0x20000114
    650c:	b510      	push	{r4, lr}
    650e:	4c1e      	ldr	r4, [pc, #120]	; (6588 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5c>)
    6510:	6862      	ldr	r2, [r4, #4]
    6512:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    6516:	2808      	cmp	r0, #8
    6518:	d20d      	bcs.n	6536 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0a>
    651a:	f1c0 0108 	rsb	r1, r0, #8
    651e:	f200 2093 	addw	r0, r0, #659	; 0x293
    6522:	b2c9      	uxtb	r1, r1
    6524:	4410      	add	r0, r2
    6526:	f7fa fb0d 	bl	b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    652a:	6861      	ldr	r1, [r4, #4]
    652c:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6530:	4410      	add	r0, r2
    6532:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    6536:	6862      	ldr	r2, [r4, #4]
    6538:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    653c:	3808      	subs	r0, #8
    653e:	2804      	cmp	r0, #4
    6540:	d20d      	bcs.n	655e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc32>
    6542:	f1c0 0104 	rsb	r1, r0, #4
    6546:	f500 7090 	add.w	r0, r0, #288	; 0x120
    654a:	b2c9      	uxtb	r1, r1
    654c:	4410      	add	r0, r2
    654e:	f7fa faf9 	bl	b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    6552:	6861      	ldr	r1, [r4, #4]
    6554:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6558:	4410      	add	r0, r2
    655a:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    655e:	6860      	ldr	r0, [r4, #4]
    6560:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    6564:	290c      	cmp	r1, #12
    6566:	d30e      	bcc.n	6586 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5a>
    6568:	d005      	beq.n	6576 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc4a>
    656a:	f640 3161 	movw	r1, #2913	; 0xb61
    656e:	f04f 0036 	mov.w	r0, #54	; 0x36
    6572:	f7fa fa53 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6576:	2100      	movs	r1, #0
    6578:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6580:	2003      	movs	r0, #3
    6582:	f000 b897 	b.w	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    6586:	bd10      	pop	{r4, pc}
    6588:	20000114 	.word	0x20000114
    658c:	b570      	push	{r4, r5, r6, lr}
    658e:	4b20      	ldr	r3, [pc, #128]	; (6610 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce4>)
    6590:	4602      	mov	r2, r0
    6592:	460c      	mov	r4, r1
    6594:	8858      	ldrh	r0, [r3, #2]
    6596:	4310      	orrs	r0, r2
    6598:	8058      	strh	r0, [r3, #2]
    659a:	f103 000c 	add.w	r0, r3, #12
    659e:	0791      	lsls	r1, r2, #30
    65a0:	6840      	ldr	r0, [r0, #4]
    65a2:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    65a6:	d507      	bpl.n	65b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc8c>
    65a8:	b121      	cbz	r1, 65b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>
    65aa:	f640 416f 	movw	r1, #3183	; 0xc6f
    65ae:	2036      	movs	r0, #54	; 0x36
    65b0:	f7fa fa34 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65b4:	605c      	str	r4, [r3, #4]
    65b6:	e003      	b.n	65c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    65b8:	b101      	cbz	r1, 65bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc90>
    65ba:	609c      	str	r4, [r3, #8]
    65bc:	0791      	lsls	r1, r2, #30
    65be:	d515      	bpl.n	65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    65c0:	78e1      	ldrb	r1, [r4, #3]
    65c2:	2906      	cmp	r1, #6
    65c4:	d002      	beq.n	65cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xca0>
    65c6:	290b      	cmp	r1, #11
    65c8:	d110      	bne.n	65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    65ca:	e008      	b.n	65de <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb2>
    65cc:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    65d0:	2919      	cmp	r1, #25
    65d2:	d10b      	bne.n	65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    65d4:	2100      	movs	r1, #0
    65d6:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    65da:	2101      	movs	r1, #1
    65dc:	e004      	b.n	65e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    65de:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    65e2:	2913      	cmp	r1, #19
    65e4:	d102      	bne.n	65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    65e6:	2100      	movs	r1, #0
    65e8:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    65ec:	0691      	lsls	r1, r2, #26
    65ee:	d501      	bpl.n	65f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc8>
    65f0:	2108      	movs	r1, #8
    65f2:	7059      	strb	r1, [r3, #1]
    65f4:	0611      	lsls	r1, r2, #24
    65f6:	d50a      	bpl.n	660e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce2>
    65f8:	8b02      	ldrh	r2, [r0, #24]
    65fa:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    65fe:	4620      	mov	r0, r4
    6600:	f7ff f9f2 	bl	59e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    6604:	4620      	mov	r0, r4
    6606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    660a:	f7ff ba0b 	b.w	5a24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    660e:	bd70      	pop	{r4, r5, r6, pc}
    6610:	20000108 	.word	0x20000108
    6614:	b570      	push	{r4, r5, r6, lr}
    6616:	4c22      	ldr	r4, [pc, #136]	; (66a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd74>)
    6618:	2501      	movs	r5, #1
    661a:	6863      	ldr	r3, [r4, #4]
    661c:	f893 1262 	ldrb.w	r1, [r3, #610]	; 0x262
    6620:	b909      	cbnz	r1, 6626 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcfa>
    6622:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    6626:	f893 2263 	ldrb.w	r2, [r3, #611]	; 0x263
    662a:	b90a      	cbnz	r2, 6630 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd04>
    662c:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
    6630:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    6634:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    6638:	f103 0062 	add.w	r0, r3, #98	; 0x62
    663c:	22ff      	movs	r2, #255	; 0xff
    663e:	7282      	strb	r2, [r0, #10]
    6640:	4818      	ldr	r0, [pc, #96]	; (66a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd78>)
    6642:	6802      	ldr	r2, [r0, #0]
    6644:	b10a      	cbz	r2, 664a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd1e>
    6646:	4618      	mov	r0, r3
    6648:	4790      	blx	r2
    664a:	2000      	movs	r0, #0
    664c:	f000 f82c 	bl	66a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    6650:	6860      	ldr	r0, [r4, #4]
    6652:	302c      	adds	r0, #44	; 0x2c
    6654:	f007 ff14 	bl	e480 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    6658:	4606      	mov	r6, r0
    665a:	6860      	ldr	r0, [r4, #4]
    665c:	f007 febe 	bl	e3dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6660:	b130      	cbz	r0, 6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd44>
    6662:	6861      	ldr	r1, [r4, #4]
    6664:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    6668:	f831 0b2c 	ldrh.w	r0, [r1], #44
    666c:	f7fc fb6a 	bl	2d44 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6670:	2104      	movs	r1, #4
    6672:	6860      	ldr	r0, [r4, #4]
    6674:	f008 fc20 	bl	eeb8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6678:	6860      	ldr	r0, [r4, #4]
    667a:	302c      	adds	r0, #44	; 0x2c
    667c:	f007 ff00 	bl	e480 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    6680:	4604      	mov	r4, r0
    6682:	42a6      	cmp	r6, r4
    6684:	d20a      	bcs.n	669c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd70>
    6686:	f003 fc87 	bl	9f98 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    668a:	4601      	mov	r1, r0
    668c:	1ba0      	subs	r0, r4, r6
    668e:	2867      	cmp	r0, #103	; 0x67
    6690:	d200      	bcs.n	6694 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    6692:	2067      	movs	r0, #103	; 0x67
    6694:	f003 fb46 	bl	9d24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    6698:	b100      	cbz	r0, 669c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd70>
    669a:	2500      	movs	r5, #0
    669c:	4628      	mov	r0, r5
    669e:	bd70      	pop	{r4, r5, r6, pc}
    66a0:	20000114 	.word	0x20000114
    66a4:	2000027c 	.word	0x2000027c
    66a8:	4601      	mov	r1, r0
    66aa:	4801      	ldr	r0, [pc, #4]	; (66b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd84>)
    66ac:	f001 b994 	b.w	79d8 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    66b0:	20000114 	.word	0x20000114
    66b4:	4902      	ldr	r1, [pc, #8]	; (66c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>)
    66b6:	6849      	ldr	r1, [r1, #4]
    66b8:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    66bc:	f000 bab0 	b.w	6c20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12f4>
    66c0:	20000114 	.word	0x20000114
    66c4:	4903      	ldr	r1, [pc, #12]	; (66d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda8>)
    66c6:	6849      	ldr	r1, [r1, #4]
    66c8:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    66cc:	2011      	movs	r0, #17
    66ce:	f7ff bff1 	b.w	66b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    66d2:	0000      	.short	0x0000
    66d4:	20000114 	.word	0x20000114
    66d8:	b538      	push	{r3, r4, r5, lr}
    66da:	4c11      	ldr	r4, [pc, #68]	; (6720 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    66dc:	6862      	ldr	r2, [r4, #4]
    66de:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    66e2:	f8ad 2000 	strh.w	r2, [sp]
    66e6:	f007 fbe3 	bl	deb0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    66ea:	f89d 3000 	ldrb.w	r3, [sp]
    66ee:	b2c2      	uxtb	r2, r0
    66f0:	2100      	movs	r1, #0
    66f2:	4293      	cmp	r3, r2
    66f4:	d003      	beq.n	66fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdd2>
    66f6:	6863      	ldr	r3, [r4, #4]
    66f8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    66fc:	e002      	b.n	6704 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdd8>
    66fe:	6862      	ldr	r2, [r4, #4]
    6700:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    6704:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6708:	f3c0 2007 	ubfx	r0, r0, #8, #8
    670c:	4282      	cmp	r2, r0
    670e:	d003      	beq.n	6718 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdec>
    6710:	6861      	ldr	r1, [r4, #4]
    6712:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    6716:	bd38      	pop	{r3, r4, r5, pc}
    6718:	6860      	ldr	r0, [r4, #4]
    671a:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    671e:	bd38      	pop	{r3, r4, r5, pc}
    6720:	20000114 	.word	0x20000114
    6724:	b570      	push	{r4, r5, r6, lr}
    6726:	6841      	ldr	r1, [r0, #4]
    6728:	4604      	mov	r4, r0
    672a:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    672e:	2814      	cmp	r0, #20
    6730:	d001      	beq.n	6736 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0a>
    6732:	2002      	movs	r0, #2
    6734:	bd70      	pop	{r4, r5, r6, pc}
    6736:	4d09      	ldr	r5, [pc, #36]	; (675c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe30>)
    6738:	f201 219b 	addw	r1, r1, #667	; 0x29b
    673c:	68a8      	ldr	r0, [r5, #8]
    673e:	f007 fd85 	bl	e24c <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    6742:	6861      	ldr	r1, [r4, #4]
    6744:	68a8      	ldr	r0, [r5, #8]
    6746:	f501 7192 	add.w	r1, r1, #292	; 0x124
    674a:	f007 fd7c 	bl	e246 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    674e:	6861      	ldr	r1, [r4, #4]
    6750:	2017      	movs	r0, #23
    6752:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6756:	2000      	movs	r0, #0
    6758:	bd70      	pop	{r4, r5, r6, pc}
    675a:	0000      	.short	0x0000
    675c:	20000108 	.word	0x20000108
    6760:	4901      	ldr	r1, [pc, #4]	; (6768 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe3c>)
    6762:	6889      	ldr	r1, [r1, #8]
    6764:	f7fc bc54 	b.w	3010 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    6768:	20000108 	.word	0x20000108
    676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6770:	4e1b      	ldr	r6, [pc, #108]	; (67e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>)
    6772:	2500      	movs	r5, #0
    6774:	f106 010c 	add.w	r1, r6, #12
    6778:	2703      	movs	r7, #3
    677a:	f8d1 c004 	ldr.w	ip, [r1, #4]
    677e:	2401      	movs	r4, #1
    6780:	b1a0      	cbz	r0, 67ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe80>
    6782:	68b0      	ldr	r0, [r6, #8]
    6784:	78c0      	ldrb	r0, [r0, #3]
    6786:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    678a:	fa04 f000 	lsl.w	r0, r4, r0
    678e:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    6792:	b130      	cbz	r0, 67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe76>
    6794:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    6798:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    679c:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    67a0:	e019      	b.n	67d6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeaa>
    67a2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
    67a6:	2036      	movs	r0, #54	; 0x36
    67a8:	f7fa f938 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67ac:	4688      	mov	r8, r1
    67ae:	2300      	movs	r3, #0
    67b0:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    67b4:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    67b8:	4619      	mov	r1, r3
    67ba:	f007 fa99 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    67be:	b168      	cbz	r0, 67dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>
    67c0:	68b0      	ldr	r0, [r6, #8]
    67c2:	78c1      	ldrb	r1, [r0, #3]
    67c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    67c8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    67cc:	f800 7fa6 	strb.w	r7, [r0, #166]!
    67d0:	8785      	strh	r5, [r0, #60]	; 0x3c
    67d2:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    67d6:	2000      	movs	r0, #0
    67d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67dc:	2001      	movs	r0, #1
    67de:	e7fb      	b.n	67d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeac>
    67e0:	20000108 	.word	0x20000108
    67e4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67e8:	4604      	mov	r4, r0
    67ea:	6840      	ldr	r0, [r0, #4]
    67ec:	2300      	movs	r3, #0
    67ee:	4619      	mov	r1, r3
    67f0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    67f4:	3088      	adds	r0, #136	; 0x88
    67f6:	f007 fa7b 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    67fa:	b310      	cbz	r0, 6842 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf16>
    67fc:	4d2e      	ldr	r5, [pc, #184]	; (68b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>)
    67fe:	68a8      	ldr	r0, [r5, #8]
    6800:	f007 fd35 	bl	e26e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6804:	b300      	cbz	r0, 6848 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1c>
    6806:	68a8      	ldr	r0, [r5, #8]
    6808:	f007 fd2b 	bl	e262 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    680c:	4607      	mov	r7, r0
    680e:	68a8      	ldr	r0, [r5, #8]
    6810:	f007 fd2b 	bl	e26a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6814:	4680      	mov	r8, r0
    6816:	68a8      	ldr	r0, [r5, #8]
    6818:	f007 fd21 	bl	e25e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    681c:	4606      	mov	r6, r0
    681e:	68a8      	ldr	r0, [r5, #8]
    6820:	f007 fd21 	bl	e266 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6824:	4601      	mov	r1, r0
    6826:	9700      	str	r7, [sp, #0]
    6828:	6860      	ldr	r0, [r4, #4]
    682a:	4643      	mov	r3, r8
    682c:	4632      	mov	r2, r6
    682e:	302c      	adds	r0, #44	; 0x2c
    6830:	f007 fe30 	bl	e494 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6834:	6860      	ldr	r0, [r4, #4]
    6836:	2501      	movs	r5, #1
    6838:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    683c:	291d      	cmp	r1, #29
    683e:	d008      	beq.n	6852 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf26>
    6840:	e009      	b.n	6856 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf2a>
    6842:	2001      	movs	r0, #1
    6844:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6848:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    684c:	2000      	movs	r0, #0
    684e:	f7ff bf8d 	b.w	676c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe40>
    6852:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    6856:	6860      	ldr	r0, [r4, #4]
    6858:	2600      	movs	r6, #0
    685a:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    685e:	2901      	cmp	r1, #1
    6860:	d011      	beq.n	6886 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf5a>
    6862:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    6866:	f88d 1004 	strb.w	r1, [sp, #4]
    686a:	9901      	ldr	r1, [sp, #4]
    686c:	9101      	str	r1, [sp, #4]
    686e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6872:	b941      	cbnz	r1, 6886 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf5a>
    6874:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    6878:	f88d 1000 	strb.w	r1, [sp]
    687c:	9900      	ldr	r1, [sp, #0]
    687e:	9100      	str	r1, [sp, #0]
    6880:	f89d 1000 	ldrb.w	r1, [sp]
    6884:	b151      	cbz	r1, 689c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf70>
    6886:	211f      	movs	r1, #31
    6888:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    688c:	6860      	ldr	r0, [r4, #4]
    688e:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6892:	6860      	ldr	r0, [r4, #4]
    6894:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6898:	2000      	movs	r0, #0
    689a:	e7d3      	b.n	6844 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf18>
    689c:	211e      	movs	r1, #30
    689e:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    68a2:	4805      	ldr	r0, [pc, #20]	; (68b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>)
    68a4:	300c      	adds	r0, #12
    68a6:	6843      	ldr	r3, [r0, #4]
    68a8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    68ac:	8818      	ldrh	r0, [r3, #0]
    68ae:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    68b2:	f7fc fa6f 	bl	2d94 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    68b6:	e7e9      	b.n	688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf60>
    68b8:	20000108 	.word	0x20000108
    68bc:	4901      	ldr	r1, [pc, #4]	; (68c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf98>)
    68be:	6889      	ldr	r1, [r1, #8]
    68c0:	f007 bf5a 	b.w	e778 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    68c4:	20000108 	.word	0x20000108
    68c8:	4901      	ldr	r1, [pc, #4]	; (68d0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfa4>)
    68ca:	6889      	ldr	r1, [r1, #8]
    68cc:	f7fc bb68 	b.w	2fa0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    68d0:	20000108 	.word	0x20000108
    68d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68d8:	4604      	mov	r4, r0
    68da:	6840      	ldr	r0, [r0, #4]
    68dc:	f04f 0800 	mov.w	r8, #0
    68e0:	b086      	sub	sp, #24
    68e2:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    68e6:	4643      	mov	r3, r8
    68e8:	4641      	mov	r1, r8
    68ea:	3088      	adds	r0, #136	; 0x88
    68ec:	f007 fa00 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68f0:	b190      	cbz	r0, 6918 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfec>
    68f2:	6860      	ldr	r0, [r4, #4]
    68f4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    68f8:	2824      	cmp	r0, #36	; 0x24
    68fa:	d011      	beq.n	6920 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xff4>
    68fc:	2825      	cmp	r0, #37	; 0x25
    68fe:	d00f      	beq.n	6920 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xff4>
    6900:	2826      	cmp	r0, #38	; 0x26
    6902:	d00d      	beq.n	6920 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xff4>
    6904:	4668      	mov	r0, sp
    6906:	f7fa feb5 	bl	1674 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    690a:	b158      	cbz	r0, 6924 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xff8>
    690c:	9800      	ldr	r0, [sp, #0]
    690e:	a903      	add	r1, sp, #12
    6910:	78c0      	ldrb	r0, [r0, #3]
    6912:	f88d 000c 	strb.w	r0, [sp, #12]
    6916:	e006      	b.n	6926 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xffa>
    6918:	2001      	movs	r0, #1
    691a:	b006      	add	sp, #24
    691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6920:	2020      	movs	r0, #32
    6922:	e7fa      	b.n	691a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfee>
    6924:	2100      	movs	r1, #0
    6926:	6860      	ldr	r0, [r4, #4]
    6928:	ab02      	add	r3, sp, #8
    692a:	2216      	movs	r2, #22
    692c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6930:	f007 fa9d 	bl	de6e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    6934:	2501      	movs	r5, #1
    6936:	2600      	movs	r6, #0
    6938:	b188      	cbz	r0, 695e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1032>
    693a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    693e:	2116      	movs	r1, #22
    6940:	4830      	ldr	r0, [pc, #192]	; (6a04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d8>)
    6942:	f007 fea0 	bl	e686 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    6946:	6861      	ldr	r1, [r4, #4]
    6948:	202f      	movs	r0, #47	; 0x2f
    694a:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    694e:	6860      	ldr	r0, [r4, #4]
    6950:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6954:	6860      	ldr	r0, [r4, #4]
    6956:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    695a:	2000      	movs	r0, #0
    695c:	e7dd      	b.n	691a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfee>
    695e:	4f29      	ldr	r7, [pc, #164]	; (6a04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d8>)
    6960:	3f0c      	subs	r7, #12
    6962:	68b8      	ldr	r0, [r7, #8]
    6964:	f007 fc95 	bl	e292 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    6968:	b1b8      	cbz	r0, 699a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x106e>
    696a:	68b8      	ldr	r0, [r7, #8]
    696c:	6862      	ldr	r2, [r4, #4]
    696e:	7901      	ldrb	r1, [r0, #4]
    6970:	f001 0107 	and.w	r1, r1, #7
    6974:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    6978:	7940      	ldrb	r0, [r0, #5]
    697a:	f000 0107 	and.w	r1, r0, #7
    697e:	6860      	ldr	r0, [r4, #4]
    6980:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    6984:	6860      	ldr	r0, [r4, #4]
    6986:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    698a:	f88d 200c 	strb.w	r2, [sp, #12]
    698e:	9a03      	ldr	r2, [sp, #12]
    6990:	9203      	str	r2, [sp, #12]
    6992:	f89d 200c 	ldrb.w	r2, [sp, #12]
    6996:	bb4a      	cbnz	r2, 69ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10c0>
    6998:	e004      	b.n	69a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1078>
    699a:	2000      	movs	r0, #0
    699c:	f7ff fee6 	bl	676c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe40>
    69a0:	4680      	mov	r8, r0
    69a2:	e02d      	b.n	6a00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    69a4:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    69a8:	2a01      	cmp	r2, #1
    69aa:	d01f      	beq.n	69ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10c0>
    69ac:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    69b0:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    69b4:	7857      	ldrb	r7, [r2, #1]
    69b6:	429f      	cmp	r7, r3
    69b8:	d106      	bne.n	69c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x109c>
    69ba:	7812      	ldrb	r2, [r2, #0]
    69bc:	428a      	cmp	r2, r1
    69be:	d103      	bne.n	69c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x109c>
    69c0:	2102      	movs	r1, #2
    69c2:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    69c6:	e011      	b.n	69ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10c0>
    69c8:	480e      	ldr	r0, [pc, #56]	; (6a04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d8>)
    69ca:	6841      	ldr	r1, [r0, #4]
    69cc:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    69d0:	880a      	ldrh	r2, [r1, #0]
    69d2:	f820 2b02 	strh.w	r2, [r0], #2
    69d6:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    69da:	f800 2b01 	strb.w	r2, [r0], #1
    69de:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    69e2:	f800 190d 	strb.w	r1, [r0], #-13
    69e6:	4908      	ldr	r1, [pc, #32]	; (6a08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>)
    69e8:	f007 fcaa 	bl	e340 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    69ec:	6861      	ldr	r1, [r4, #4]
    69ee:	2022      	movs	r0, #34	; 0x22
    69f0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    69f4:	6860      	ldr	r0, [r4, #4]
    69f6:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    69fa:	6860      	ldr	r0, [r4, #4]
    69fc:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6a00:	4640      	mov	r0, r8
    6a02:	e78a      	b.n	691a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfee>
    6a04:	20000114 	.word	0x20000114
    6a08:	00007a19 	.word	0x00007a19
    6a0c:	b570      	push	{r4, r5, r6, lr}
    6a0e:	4604      	mov	r4, r0
    6a10:	6840      	ldr	r0, [r0, #4]
    6a12:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6a16:	2820      	cmp	r0, #32
    6a18:	d001      	beq.n	6a1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10f2>
    6a1a:	2001      	movs	r0, #1
    6a1c:	bd70      	pop	{r4, r5, r6, pc}
    6a1e:	4e16      	ldr	r6, [pc, #88]	; (6a78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x114c>)
    6a20:	68b0      	ldr	r0, [r6, #8]
    6a22:	f007 fc48 	bl	e2b6 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    6a26:	b1f0      	cbz	r0, 6a66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x113a>
    6a28:	68b0      	ldr	r0, [r6, #8]
    6a2a:	6862      	ldr	r2, [r4, #4]
    6a2c:	7901      	ldrb	r1, [r0, #4]
    6a2e:	7940      	ldrb	r0, [r0, #5]
    6a30:	f001 0107 	and.w	r1, r1, #7
    6a34:	f361 0507 	bfi	r5, r1, #0, #8
    6a38:	4629      	mov	r1, r5
    6a3a:	f000 0007 	and.w	r0, r0, #7
    6a3e:	f360 210f 	bfi	r1, r0, #8, #8
    6a42:	2001      	movs	r0, #1
    6a44:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    6a48:	6862      	ldr	r2, [r4, #4]
    6a4a:	2000      	movs	r0, #0
    6a4c:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    6a50:	6862      	ldr	r2, [r4, #4]
    6a52:	2024      	movs	r0, #36	; 0x24
    6a54:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    6a58:	6860      	ldr	r0, [r4, #4]
    6a5a:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    6a5e:	f7ff fe3b 	bl	66d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdac>
    6a62:	2000      	movs	r0, #0
    6a64:	bd70      	pop	{r4, r5, r6, pc}
    6a66:	2001      	movs	r0, #1
    6a68:	f7ff fe80 	bl	676c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe40>
    6a6c:	4604      	mov	r4, r0
    6a6e:	201e      	movs	r0, #30
    6a70:	f7ff fe1a 	bl	66a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    6a74:	4620      	mov	r0, r4
    6a76:	bd70      	pop	{r4, r5, r6, pc}
    6a78:	20000108 	.word	0x20000108
    6a7c:	b570      	push	{r4, r5, r6, lr}
    6a7e:	4604      	mov	r4, r0
    6a80:	6840      	ldr	r0, [r0, #4]
    6a82:	4d0a      	ldr	r5, [pc, #40]	; (6aac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>)
    6a84:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    6a88:	f041 0104 	orr.w	r1, r1, #4
    6a8c:	7001      	strb	r1, [r0, #0]
    6a8e:	68a8      	ldr	r0, [r5, #8]
    6a90:	f007 fc1b 	bl	e2ca <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6a94:	4606      	mov	r6, r0
    6a96:	68a8      	ldr	r0, [r5, #8]
    6a98:	f007 fc1b 	bl	e2d2 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6a9c:	4601      	mov	r1, r0
    6a9e:	4622      	mov	r2, r4
    6aa0:	4630      	mov	r0, r6
    6aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6aa6:	f000 b897 	b.w	6bd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ac>
    6aaa:	0000      	.short	0x0000
    6aac:	20000108 	.word	0x20000108
    6ab0:	4a11      	ldr	r2, [pc, #68]	; (6af8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11cc>)
    6ab2:	4911      	ldr	r1, [pc, #68]	; (6af8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11cc>)
    6ab4:	320c      	adds	r2, #12
    6ab6:	6852      	ldr	r2, [r2, #4]
    6ab8:	6889      	ldr	r1, [r1, #8]
    6aba:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6abe:	7909      	ldrb	r1, [r1, #4]
    6ac0:	f1a3 0210 	sub.w	r2, r3, #16
    6ac4:	2a0c      	cmp	r2, #12
    6ac6:	d801      	bhi.n	6acc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a0>
    6ac8:	2303      	movs	r3, #3
    6aca:	e008      	b.n	6ade <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6acc:	2b28      	cmp	r3, #40	; 0x28
    6ace:	d00a      	beq.n	6ae6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11ba>
    6ad0:	2b1d      	cmp	r3, #29
    6ad2:	d00a      	beq.n	6aea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11be>
    6ad4:	2b05      	cmp	r3, #5
    6ad6:	d00a      	beq.n	6aee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c2>
    6ad8:	2b20      	cmp	r3, #32
    6ada:	d00a      	beq.n	6af2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c6>
    6adc:	23fe      	movs	r3, #254	; 0xfe
    6ade:	4602      	mov	r2, r0
    6ae0:	4618      	mov	r0, r3
    6ae2:	f000 b879 	b.w	6bd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ac>
    6ae6:	2323      	movs	r3, #35	; 0x23
    6ae8:	e7f9      	b.n	6ade <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6aea:	2314      	movs	r3, #20
    6aec:	e7f7      	b.n	6ade <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6aee:	2312      	movs	r3, #18
    6af0:	e7f5      	b.n	6ade <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6af2:	2316      	movs	r3, #22
    6af4:	e7f3      	b.n	6ade <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6af6:	0000      	.short	0x0000
    6af8:	20000108 	.word	0x20000108
    6afc:	b570      	push	{r4, r5, r6, lr}
    6afe:	4604      	mov	r4, r0
    6b00:	6840      	ldr	r0, [r0, #4]
    6b02:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6b06:	291b      	cmp	r1, #27
    6b08:	d001      	beq.n	6b0e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11e2>
    6b0a:	2002      	movs	r0, #2
    6b0c:	bd70      	pop	{r4, r5, r6, pc}
    6b0e:	2500      	movs	r5, #0
    6b10:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    6b14:	6860      	ldr	r0, [r4, #4]
    6b16:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    6b1a:	6860      	ldr	r0, [r4, #4]
    6b1c:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    6b20:	6860      	ldr	r0, [r4, #4]
    6b22:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    6b26:	b161      	cbz	r1, 6b42 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1216>
    6b28:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    6b2c:	6860      	ldr	r0, [r4, #4]
    6b2e:	2202      	movs	r2, #2
    6b30:	8801      	ldrh	r1, [r0, #0]
    6b32:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    6b36:	6860      	ldr	r0, [r4, #4]
    6b38:	490d      	ldr	r1, [pc, #52]	; (6b70 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1244>)
    6b3a:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6b3e:	6860      	ldr	r0, [r4, #4]
    6b40:	e00c      	b.n	6b5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1230>
    6b42:	8801      	ldrh	r1, [r0, #0]
    6b44:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    6b48:	6860      	ldr	r0, [r4, #4]
    6b4a:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6b4e:	6861      	ldr	r1, [r4, #4]
    6b50:	2001      	movs	r0, #1
    6b52:	2202      	movs	r2, #2
    6b54:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    6b58:	4906      	ldr	r1, [pc, #24]	; (6b74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1248>)
    6b5a:	6860      	ldr	r0, [r4, #4]
    6b5c:	f200 2012 	addw	r0, r0, #530	; 0x212
    6b60:	f007 fbf7 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6b64:	6860      	ldr	r0, [r4, #4]
    6b66:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    6b6a:	2000      	movs	r0, #0
    6b6c:	bd70      	pop	{r4, r5, r6, pc}
    6b6e:	0000      	.short	0x0000
    6b70:	0000e833 	.word	0x0000e833
    6b74:	0000e815 	.word	0x0000e815
    6b78:	4901      	ldr	r1, [pc, #4]	; (6b80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1254>)
    6b7a:	6889      	ldr	r1, [r1, #8]
    6b7c:	f007 bdb4 	b.w	e6e8 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6b80:	20000108 	.word	0x20000108
    6b84:	4602      	mov	r2, r0
    6b86:	480f      	ldr	r0, [pc, #60]	; (6bc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1298>)
    6b88:	b510      	push	{r4, lr}
    6b8a:	6880      	ldr	r0, [r0, #8]
    6b8c:	6851      	ldr	r1, [r2, #4]
    6b8e:	2400      	movs	r4, #0
    6b90:	7900      	ldrb	r0, [r0, #4]
    6b92:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6b96:	2812      	cmp	r0, #18
    6b98:	d006      	beq.n	6ba8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x127c>
    6b9a:	2814      	cmp	r0, #20
    6b9c:	d004      	beq.n	6ba8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x127c>
    6b9e:	2816      	cmp	r0, #22
    6ba0:	d002      	beq.n	6ba8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x127c>
    6ba2:	2823      	cmp	r0, #35	; 0x23
    6ba4:	d10c      	bne.n	6bc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1294>
    6ba6:	e004      	b.n	6bb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1286>
    6ba8:	2101      	movs	r1, #1
    6baa:	f000 f911 	bl	6dd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14a4>
    6bae:	4604      	mov	r4, r0
    6bb0:	e006      	b.n	6bc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1294>
    6bb2:	2928      	cmp	r1, #40	; 0x28
    6bb4:	d104      	bne.n	6bc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1294>
    6bb6:	4804      	ldr	r0, [pc, #16]	; (6bc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129c>)
    6bb8:	6801      	ldr	r1, [r0, #0]
    6bba:	b109      	cbz	r1, 6bc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1294>
    6bbc:	4610      	mov	r0, r2
    6bbe:	4788      	blx	r1
    6bc0:	4620      	mov	r0, r4
    6bc2:	bd10      	pop	{r4, pc}
    6bc4:	20000108 	.word	0x20000108
    6bc8:	20000280 	.word	0x20000280
    6bcc:	4901      	ldr	r1, [pc, #4]	; (6bd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a8>)
    6bce:	6889      	ldr	r1, [r1, #8]
    6bd0:	f7fc ba7e 	b.w	30d0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6bd4:	20000108 	.word	0x20000108
    6bd8:	4603      	mov	r3, r0
    6bda:	2000      	movs	r0, #0
    6bdc:	2b23      	cmp	r3, #35	; 0x23
    6bde:	d017      	beq.n	6c10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12e4>
    6be0:	dc0b      	bgt.n	6bfa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ce>
    6be2:	2b03      	cmp	r3, #3
    6be4:	d011      	beq.n	6c0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12de>
    6be6:	2b12      	cmp	r3, #18
    6be8:	d003      	beq.n	6bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c6>
    6bea:	2b14      	cmp	r3, #20
    6bec:	d001      	beq.n	6bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c6>
    6bee:	2b16      	cmp	r3, #22
    6bf0:	d10a      	bne.n	6c08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12dc>
    6bf2:	2100      	movs	r1, #0
    6bf4:	4618      	mov	r0, r3
    6bf6:	f000 b8eb 	b.w	6dd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14a4>
    6bfa:	2b24      	cmp	r3, #36	; 0x24
    6bfc:	d008      	beq.n	6c10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12e4>
    6bfe:	2b25      	cmp	r3, #37	; 0x25
    6c00:	d006      	beq.n	6c10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12e4>
    6c02:	2bfe      	cmp	r3, #254	; 0xfe
    6c04:	d100      	bne.n	6c08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12dc>
    6c06:	2002      	movs	r0, #2
    6c08:	4770      	bx	lr
    6c0a:	4608      	mov	r0, r1
    6c0c:	f7ff b8be 	b.w	5d8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x460>
    6c10:	4a02      	ldr	r2, [pc, #8]	; (6c1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12f0>)
    6c12:	6812      	ldr	r2, [r2, #0]
    6c14:	2a00      	cmp	r2, #0
    6c16:	d0f7      	beq.n	6c08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12dc>
    6c18:	4618      	mov	r0, r3
    6c1a:	4710      	bx	r2
    6c1c:	20000278 	.word	0x20000278
    6c20:	280c      	cmp	r0, #12
    6c22:	d01a      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c24:	2813      	cmp	r0, #19
    6c26:	d018      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c28:	2818      	cmp	r0, #24
    6c2a:	d016      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c2c:	4910      	ldr	r1, [pc, #64]	; (6c70 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1344>)
    6c2e:	2200      	movs	r2, #0
    6c30:	2811      	cmp	r0, #17
    6c32:	6849      	ldr	r1, [r1, #4]
    6c34:	d012      	beq.n	6c5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>
    6c36:	2807      	cmp	r0, #7
    6c38:	d00f      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c3a:	2809      	cmp	r0, #9
    6c3c:	d00d      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c3e:	2815      	cmp	r0, #21
    6c40:	d012      	beq.n	6c68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x133c>
    6c42:	2824      	cmp	r0, #36	; 0x24
    6c44:	d009      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c46:	2801      	cmp	r0, #1
    6c48:	d007      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c4a:	2800      	cmp	r0, #0
    6c4c:	d005      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c4e:	2802      	cmp	r0, #2
    6c50:	d003      	beq.n	6c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c52:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6c56:	2001      	movs	r0, #1
    6c58:	7108      	strb	r0, [r1, #4]
    6c5a:	4770      	bx	lr
    6c5c:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6c60:	b110      	cbz	r0, 6c68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x133c>
    6c62:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6c66:	4770      	bx	lr
    6c68:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6c6c:	4770      	bx	lr
    6c6e:	0000      	.short	0x0000
    6c70:	20000114 	.word	0x20000114
    6c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c78:	4d53      	ldr	r5, [pc, #332]	; (6dc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x149c>)
    6c7a:	4680      	mov	r8, r0
    6c7c:	460f      	mov	r7, r1
    6c7e:	6868      	ldr	r0, [r5, #4]
    6c80:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6c84:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6c88:	f88d 0000 	strb.w	r0, [sp]
    6c8c:	9800      	ldr	r0, [sp, #0]
    6c8e:	9000      	str	r0, [sp, #0]
    6c90:	f89d 0000 	ldrb.w	r0, [sp]
    6c94:	2600      	movs	r6, #0
    6c96:	b930      	cbnz	r0, 6ca6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x137a>
    6c98:	7fe2      	ldrb	r2, [r4, #31]
    6c9a:	2300      	movs	r3, #0
    6c9c:	2101      	movs	r1, #1
    6c9e:	4620      	mov	r0, r4
    6ca0:	f007 f826 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6ca4:	b120      	cbz	r0, 6cb0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1384>
    6ca6:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6caa:	1c40      	adds	r0, r0, #1
    6cac:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6cb0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6cb4:	b121      	cbz	r1, 6cc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1394>
    6cb6:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6cba:	1c40      	adds	r0, r0, #1
    6cbc:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6cc0:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6cc4:	b120      	cbz	r0, 6cd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a4>
    6cc6:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6cca:	1c52      	adds	r2, r2, #1
    6ccc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6cd0:	f1b8 0f00 	cmp.w	r8, #0
    6cd4:	d114      	bne.n	6d00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13d4>
    6cd6:	4a3c      	ldr	r2, [pc, #240]	; (6dc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x149c>)
    6cd8:	3a0c      	subs	r2, #12
    6cda:	7812      	ldrb	r2, [r2, #0]
    6cdc:	2a02      	cmp	r2, #2
    6cde:	d006      	beq.n	6cee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c2>
    6ce0:	2a01      	cmp	r2, #1
    6ce2:	d006      	beq.n	6cf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c6>
    6ce4:	b1df      	cbz	r7, 6d1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13f2>
    6ce6:	06f8      	lsls	r0, r7, #27
    6ce8:	d508      	bpl.n	6cfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13d0>
    6cea:	201e      	movs	r0, #30
    6cec:	e043      	b.n	6d76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6cee:	2016      	movs	r0, #22
    6cf0:	e041      	b.n	6d76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6cf2:	6868      	ldr	r0, [r5, #4]
    6cf4:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6cf8:	bba0      	cbnz	r0, 6d64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1438>
    6cfa:	e05e      	b.n	6dba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x148e>
    6cfc:	0738      	lsls	r0, r7, #28
    6cfe:	d501      	bpl.n	6d04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13d8>
    6d00:	203d      	movs	r0, #61	; 0x3d
    6d02:	e038      	b.n	6d76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d04:	07b8      	lsls	r0, r7, #30
    6d06:	d001      	beq.n	6d0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e0>
    6d08:	202a      	movs	r0, #42	; 0x2a
    6d0a:	e034      	b.n	6d76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d0c:	06b8      	lsls	r0, r7, #26
    6d0e:	d404      	bmi.n	6d1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6d10:	f640 5101 	movw	r1, #3329	; 0xd01
    6d14:	2036      	movs	r0, #54	; 0x36
    6d16:	f7f9 fe81 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d1a:	2023      	movs	r0, #35	; 0x23
    6d1c:	e02b      	b.n	6d76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d1e:	b129      	cbz	r1, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1400>
    6d20:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6d24:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6d28:	4291      	cmp	r1, r2
    6d2a:	d81a      	bhi.n	6d62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1436>
    6d2c:	b128      	cbz	r0, 6d3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x140e>
    6d2e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6d32:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6d36:	4288      	cmp	r0, r1
    6d38:	d813      	bhi.n	6d62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1436>
    6d3a:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6d3e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6d42:	4281      	cmp	r1, r0
    6d44:	d309      	bcc.n	6d5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x142e>
    6d46:	686a      	ldr	r2, [r5, #4]
    6d48:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6d4c:	f88d 2000 	strb.w	r2, [sp]
    6d50:	9a00      	ldr	r2, [sp, #0]
    6d52:	9200      	str	r2, [sp, #0]
    6d54:	f89d 2000 	ldrb.w	r2, [sp]
    6d58:	b91a      	cbnz	r2, 6d62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1436>
    6d5a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6d5e:	4291      	cmp	r1, r2
    6d60:	d301      	bcc.n	6d66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x143a>
    6d62:	2022      	movs	r0, #34	; 0x22
    6d64:	e007      	b.n	6d76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d66:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6d6a:	b301      	cbz	r1, 6dae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1482>
    6d6c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6d70:	4281      	cmp	r1, r0
    6d72:	d322      	bcc.n	6dba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x148e>
    6d74:	2008      	movs	r0, #8
    6d76:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    6d7a:	2202      	movs	r2, #2
    6d7c:	4913      	ldr	r1, [pc, #76]	; (6dcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14a0>)
    6d7e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6d82:	f007 fae6 	bl	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6d86:	7766      	strb	r6, [r4, #29]
    6d88:	77a6      	strb	r6, [r4, #30]
    6d8a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6d8e:	2102      	movs	r1, #2
    6d90:	6868      	ldr	r0, [r5, #4]
    6d92:	f008 f891 	bl	eeb8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6d96:	6868      	ldr	r0, [r5, #4]
    6d98:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6d9c:	2901      	cmp	r1, #1
    6d9e:	d104      	bne.n	6daa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147e>
    6da0:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6da4:	7801      	ldrb	r1, [r0, #0]
    6da6:	1e49      	subs	r1, r1, #1
    6da8:	7001      	strb	r1, [r0, #0]
    6daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6dae:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6db2:	2806      	cmp	r0, #6
    6db4:	d301      	bcc.n	6dba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x148e>
    6db6:	203e      	movs	r0, #62	; 0x3e
    6db8:	e7dd      	b.n	6d76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6dba:	6868      	ldr	r0, [r5, #4]
    6dbc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6dc0:	2100      	movs	r1, #0
    6dc2:	f008 b879 	b.w	eeb8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6dc6:	0000      	.short	0x0000
    6dc8:	20000114 	.word	0x20000114
    6dcc:	0000e6a5 	.word	0x0000e6a5
    6dd0:	b570      	push	{r4, r5, r6, lr}
    6dd2:	460e      	mov	r6, r1
    6dd4:	4601      	mov	r1, r0
    6dd6:	6850      	ldr	r0, [r2, #4]
    6dd8:	4614      	mov	r4, r2
    6dda:	2500      	movs	r5, #0
    6ddc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6de0:	481f      	ldr	r0, [pc, #124]	; (6e60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1534>)
    6de2:	6840      	ldr	r0, [r0, #4]
    6de4:	3088      	adds	r0, #136	; 0x88
    6de6:	2912      	cmp	r1, #18
    6de8:	d008      	beq.n	6dfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14d0>
    6dea:	2914      	cmp	r1, #20
    6dec:	d010      	beq.n	6e10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14e4>
    6dee:	2916      	cmp	r1, #22
    6df0:	d020      	beq.n	6e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1508>
    6df2:	f240 51c9 	movw	r1, #1481	; 0x5c9
    6df6:	2036      	movs	r0, #54	; 0x36
    6df8:	f7f9 fe10 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dfc:	2109      	movs	r1, #9
    6dfe:	2300      	movs	r3, #0
    6e00:	f006 ff76 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e04:	b348      	cbz	r0, 6e5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152e>
    6e06:	4620      	mov	r0, r4
    6e08:	f007 fd90 	bl	e92c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6e0c:	4605      	mov	r5, r0
    6e0e:	e024      	b.n	6e5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152e>
    6e10:	210a      	movs	r1, #10
    6e12:	2300      	movs	r3, #0
    6e14:	f006 ff6c 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e18:	b1f8      	cbz	r0, 6e5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152e>
    6e1a:	4811      	ldr	r0, [pc, #68]	; (6e60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1534>)
    6e1c:	f007 fc39 	bl	e692 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6e20:	b126      	cbz	r6, 6e2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1500>
    6e22:	6860      	ldr	r0, [r4, #4]
    6e24:	2105      	movs	r1, #5
    6e26:	30f6      	adds	r0, #246	; 0xf6
    6e28:	f008 f9d5 	bl	f1d6 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x2a2>
    6e2c:	480c      	ldr	r0, [pc, #48]	; (6e60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1534>)
    6e2e:	f007 fce1 	bl	e7f4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    6e32:	e012      	b.n	6e5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152e>
    6e34:	2a20      	cmp	r2, #32
    6e36:	d110      	bne.n	6e5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152e>
    6e38:	4809      	ldr	r0, [pc, #36]	; (6e60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1534>)
    6e3a:	f007 fc2a 	bl	e692 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6e3e:	b14e      	cbz	r6, 6e54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1528>
    6e40:	6860      	ldr	r0, [r4, #4]
    6e42:	2108      	movs	r1, #8
    6e44:	30f6      	adds	r0, #246	; 0xf6
    6e46:	f008 f9c6 	bl	f1d6 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x2a2>
    6e4a:	6860      	ldr	r0, [r4, #4]
    6e4c:	210b      	movs	r1, #11
    6e4e:	30f6      	adds	r0, #246	; 0xf6
    6e50:	f008 f9c1 	bl	f1d6 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x2a2>
    6e54:	201a      	movs	r0, #26
    6e56:	f7ff fc27 	bl	66a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    6e5a:	4628      	mov	r0, r5
    6e5c:	bd70      	pop	{r4, r5, r6, pc}
    6e5e:	0000      	.short	0x0000
    6e60:	20000114 	.word	0x20000114
    6e64:	4a19      	ldr	r2, [pc, #100]	; (6ecc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15a0>)
    6e66:	2901      	cmp	r1, #1
    6e68:	6852      	ldr	r2, [r2, #4]
    6e6a:	d010      	beq.n	6e8e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1562>
    6e6c:	2100      	movs	r1, #0
    6e6e:	b1c8      	cbz	r0, 6ea4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1578>
    6e70:	2801      	cmp	r0, #1
    6e72:	d022      	beq.n	6eba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x158e>
    6e74:	2803      	cmp	r0, #3
    6e76:	d109      	bne.n	6e8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1560>
    6e78:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6e7c:	2814      	cmp	r0, #20
    6e7e:	d005      	beq.n	6e8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1560>
    6e80:	2817      	cmp	r0, #23
    6e82:	d003      	beq.n	6e8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1560>
    6e84:	2819      	cmp	r0, #25
    6e86:	d001      	beq.n	6e8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1560>
    6e88:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6e8c:	4770      	bx	lr
    6e8e:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6e92:	2801      	cmp	r0, #1
    6e94:	d0fa      	beq.n	6e8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1560>
    6e96:	bf00      	nop
    6e98:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6e9c:	7801      	ldrb	r1, [r0, #0]
    6e9e:	1e49      	subs	r1, r1, #1
    6ea0:	7001      	strb	r1, [r0, #0]
    6ea2:	4770      	bx	lr
    6ea4:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6ea8:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6eac:	1ac0      	subs	r0, r0, r3
    6eae:	b200      	sxth	r0, r0
    6eb0:	2800      	cmp	r0, #0
    6eb2:	dbf6      	blt.n	6ea2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1576>
    6eb4:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6eb8:	4770      	bx	lr
    6eba:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6ebe:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6ec2:	1a40      	subs	r0, r0, r1
    6ec4:	b200      	sxth	r0, r0
    6ec6:	2800      	cmp	r0, #0
    6ec8:	dae6      	bge.n	6e98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156c>
    6eca:	4770      	bx	lr
    6ecc:	20000114 	.word	0x20000114

00006ed0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6ed0:	b510      	push	{r4, lr}
    6ed2:	6981      	ldr	r1, [r0, #24]
    6ed4:	b119      	cbz	r1, 6ede <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6ed6:	6882      	ldr	r2, [r0, #8]
    6ed8:	688b      	ldr	r3, [r1, #8]
    6eda:	429a      	cmp	r2, r3
    6edc:	d203      	bcs.n	6ee6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6ede:	21c6      	movs	r1, #198	; 0xc6
    6ee0:	2037      	movs	r0, #55	; 0x37
    6ee2:	f7f9 fd9b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ee6:	6942      	ldr	r2, [r0, #20]
    6ee8:	614a      	str	r2, [r1, #20]
    6eea:	6903      	ldr	r3, [r0, #16]
    6eec:	610b      	str	r3, [r1, #16]
    6eee:	b10a      	cbz	r2, 6ef4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6ef0:	6111      	str	r1, [r2, #16]
    6ef2:	e001      	b.n	6ef8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6ef4:	4a06      	ldr	r2, [pc, #24]	; (6f10 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6ef6:	6011      	str	r1, [r2, #0]
    6ef8:	690a      	ldr	r2, [r1, #16]
    6efa:	b132      	cbz	r2, 6f0a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6efc:	6151      	str	r1, [r2, #20]
    6efe:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6f02:	4410      	add	r0, r2
    6f04:	688a      	ldr	r2, [r1, #8]
    6f06:	1a80      	subs	r0, r0, r2
    6f08:	e000      	b.n	6f0c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6f0a:	2000      	movs	r0, #0
    6f0c:	60c8      	str	r0, [r1, #12]
    6f0e:	bd10      	pop	{r4, pc}
    6f10:	20000284 	.word	0x20000284

00006f14 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6f14:	b510      	push	{r4, lr}
    6f16:	2200      	movs	r2, #0
    6f18:	6141      	str	r1, [r0, #20]
    6f1a:	b189      	cbz	r1, 6f40 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6f1c:	690b      	ldr	r3, [r1, #16]
    6f1e:	6108      	str	r0, [r1, #16]
    6f20:	6103      	str	r3, [r0, #16]
    6f22:	b103      	cbz	r3, 6f26 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6f24:	6158      	str	r0, [r3, #20]
    6f26:	6941      	ldr	r1, [r0, #20]
    6f28:	60c2      	str	r2, [r0, #12]
    6f2a:	2900      	cmp	r1, #0
    6f2c:	d00f      	beq.n	6f4e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6f2e:	68cb      	ldr	r3, [r1, #12]
    6f30:	b163      	cbz	r3, 6f4c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6f32:	6884      	ldr	r4, [r0, #8]
    6f34:	42a3      	cmp	r3, r4
    6f36:	d207      	bcs.n	6f48 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6f38:	212b      	movs	r1, #43	; 0x2b
    6f3a:	2037      	movs	r0, #55	; 0x37
    6f3c:	f7f9 fd6e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f40:	4903      	ldr	r1, [pc, #12]	; (6f50 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6f42:	6102      	str	r2, [r0, #16]
    6f44:	6008      	str	r0, [r1, #0]
    6f46:	e7ee      	b.n	6f26 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6f48:	1b1b      	subs	r3, r3, r4
    6f4a:	60c3      	str	r3, [r0, #12]
    6f4c:	60ca      	str	r2, [r1, #12]
    6f4e:	bd10      	pop	{r4, pc}
    6f50:	20000284 	.word	0x20000284

00006f54 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>:
    6f54:	6941      	ldr	r1, [r0, #20]
    6f56:	b929      	cbnz	r1, 6f64 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    6f58:	6901      	ldr	r1, [r0, #16]
    6f5a:	b919      	cbnz	r1, 6f64 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    6f5c:	4903      	ldr	r1, [pc, #12]	; (6f6c <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x18>)
    6f5e:	6809      	ldr	r1, [r1, #0]
    6f60:	4281      	cmp	r1, r0
    6f62:	d101      	bne.n	6f68 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x14>
    6f64:	2001      	movs	r0, #1
    6f66:	4770      	bx	lr
    6f68:	2000      	movs	r0, #0
    6f6a:	4770      	bx	lr
    6f6c:	20000284 	.word	0x20000284

00006f70 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6f70:	6941      	ldr	r1, [r0, #20]
    6f72:	b149      	cbz	r1, 6f88 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6f74:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6f78:	441a      	add	r2, r3
    6f7a:	68cb      	ldr	r3, [r1, #12]
    6f7c:	441a      	add	r2, r3
    6f7e:	60ca      	str	r2, [r1, #12]
    6f80:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6f84:	6111      	str	r1, [r2, #16]
    6f86:	e002      	b.n	6f8e <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6f88:	4a07      	ldr	r2, [pc, #28]	; (6fa8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x38>)
    6f8a:	6901      	ldr	r1, [r0, #16]
    6f8c:	6011      	str	r1, [r2, #0]
    6f8e:	6902      	ldr	r2, [r0, #16]
    6f90:	2100      	movs	r1, #0
    6f92:	b112      	cbz	r2, 6f9a <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x2a>
    6f94:	6943      	ldr	r3, [r0, #20]
    6f96:	6153      	str	r3, [r2, #20]
    6f98:	e002      	b.n	6fa0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    6f9a:	6942      	ldr	r2, [r0, #20]
    6f9c:	b102      	cbz	r2, 6fa0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    6f9e:	60d1      	str	r1, [r2, #12]
    6fa0:	6101      	str	r1, [r0, #16]
    6fa2:	6141      	str	r1, [r0, #20]
    6fa4:	4770      	bx	lr
    6fa6:	0000      	.short	0x0000
    6fa8:	20000284 	.word	0x20000284

00006fac <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    6fac:	b510      	push	{r4, lr}
    6fae:	4604      	mov	r4, r0
    6fb0:	490a      	ldr	r1, [pc, #40]	; (6fdc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    6fb2:	2000      	movs	r0, #0
    6fb4:	4602      	mov	r2, r0
    6fb6:	6809      	ldr	r1, [r1, #0]
    6fb8:	1e43      	subs	r3, r0, #1
    6fba:	e008      	b.n	6fce <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    6fbc:	68ca      	ldr	r2, [r1, #12]
    6fbe:	42a2      	cmp	r2, r4
    6fc0:	d303      	bcc.n	6fca <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6fc2:	429a      	cmp	r2, r3
    6fc4:	d201      	bcs.n	6fca <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6fc6:	4613      	mov	r3, r2
    6fc8:	4608      	mov	r0, r1
    6fca:	460a      	mov	r2, r1
    6fcc:	6909      	ldr	r1, [r1, #16]
    6fce:	2900      	cmp	r1, #0
    6fd0:	d1f4      	bne.n	6fbc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    6fd2:	2800      	cmp	r0, #0
    6fd4:	d100      	bne.n	6fd8 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    6fd6:	4610      	mov	r0, r2
    6fd8:	bd10      	pop	{r4, pc}
    6fda:	0000      	.short	0x0000
    6fdc:	20000284 	.word	0x20000284

00006fe0 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    6fe0:	4801      	ldr	r0, [pc, #4]	; (6fe8 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    6fe2:	6800      	ldr	r0, [r0, #0]
    6fe4:	4770      	bx	lr
    6fe6:	0000      	.short	0x0000
    6fe8:	20000284 	.word	0x20000284

00006fec <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    6fec:	4804      	ldr	r0, [pc, #16]	; (7000 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    6fee:	6801      	ldr	r1, [r0, #0]
    6ff0:	2000      	movs	r0, #0
    6ff2:	e001      	b.n	6ff8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    6ff4:	4608      	mov	r0, r1
    6ff6:	6909      	ldr	r1, [r1, #16]
    6ff8:	2900      	cmp	r1, #0
    6ffa:	d1fb      	bne.n	6ff4 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    6ffc:	4770      	bx	lr
    6ffe:	0000      	.short	0x0000
    7000:	20000284 	.word	0x20000284

00007004 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    7004:	4801      	ldr	r0, [pc, #4]	; (700c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    7006:	2100      	movs	r1, #0
    7008:	6001      	str	r1, [r0, #0]
    700a:	4770      	bx	lr
    700c:	20000284 	.word	0x20000284

00007010 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    7010:	4903      	ldr	r1, [pc, #12]	; (7020 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    7012:	2000      	movs	r0, #0
    7014:	6809      	ldr	r1, [r1, #0]
    7016:	2900      	cmp	r1, #0
    7018:	d000      	beq.n	701c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    701a:	200c      	movs	r0, #12
    701c:	4770      	bx	lr
    701e:	0000      	.short	0x0000
    7020:	20000284 	.word	0x20000284

00007024 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    7024:	b570      	push	{r4, r5, r6, lr}
    7026:	6844      	ldr	r4, [r0, #4]
    7028:	220d      	movs	r2, #13
    702a:	f504 759c 	add.w	r5, r4, #312	; 0x138
    702e:	2100      	movs	r1, #0
    7030:	f104 0078 	add.w	r0, r4, #120	; 0x78
    7034:	f009 fd42 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7038:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    703c:	2100      	movs	r1, #0
    703e:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    7042:	5501      	strb	r1, [r0, r4]
    7044:	f8a5 1017 	strh.w	r1, [r5, #23]
    7048:	7669      	strb	r1, [r5, #25]
    704a:	4608      	mov	r0, r1
    704c:	f05f 017f 	movs.w	r1, #127	; 0x7f
    7050:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    7054:	1c40      	adds	r0, r0, #1
    7056:	b2c0      	uxtb	r0, r0
    7058:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    705c:	2802      	cmp	r0, #2
    705e:	d3f7      	bcc.n	7050 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    7060:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    7064:	4620      	mov	r0, r4
    7066:	f008 fae1 	bl	f62c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    706a:	2000      	movs	r0, #0
    706c:	21ff      	movs	r1, #255	; 0xff
    706e:	1822      	adds	r2, r4, r0
    7070:	1c40      	adds	r0, r0, #1
    7072:	b2c0      	uxtb	r0, r0
    7074:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    7078:	2802      	cmp	r0, #2
    707a:	d3f8      	bcc.n	706e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    707c:	bd70      	pop	{r4, r5, r6, pc}
	...

00007080 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    7080:	b500      	push	{lr}
    7082:	7941      	ldrb	r1, [r0, #5]
    7084:	b095      	sub	sp, #84	; 0x54
    7086:	b141      	cbz	r1, 709a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    7088:	2901      	cmp	r1, #1
    708a:	d006      	beq.n	709a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    708c:	2902      	cmp	r1, #2
    708e:	d004      	beq.n	709a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    7090:	2903      	cmp	r1, #3
    7092:	d002      	beq.n	709a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    7094:	2012      	movs	r0, #18
    7096:	b015      	add	sp, #84	; 0x54
    7098:	bd00      	pop	{pc}
    709a:	7901      	ldrb	r1, [r0, #4]
    709c:	f88d 1000 	strb.w	r1, [sp]
    70a0:	7b01      	ldrb	r1, [r0, #12]
    70a2:	f88d 1001 	strb.w	r1, [sp, #1]
    70a6:	7942      	ldrb	r2, [r0, #5]
    70a8:	2100      	movs	r1, #0
    70aa:	2301      	movs	r3, #1
    70ac:	b3f2      	cbz	r2, 712c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xac>
    70ae:	2a02      	cmp	r2, #2
    70b0:	d03d      	beq.n	712e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    70b2:	f88d 3002 	strb.w	r3, [sp, #2]
    70b6:	bf00      	nop
    70b8:	f8d0 2006 	ldr.w	r2, [r0, #6]
    70bc:	f8cd 2003 	str.w	r2, [sp, #3]
    70c0:	8942      	ldrh	r2, [r0, #10]
    70c2:	f8ad 2007 	strh.w	r2, [sp, #7]
    70c6:	f88d 3009 	strb.w	r3, [sp, #9]
    70ca:	f830 2b01 	ldrh.w	r2, [r0], #1
    70ce:	f240 2371 	movw	r3, #625	; 0x271
    70d2:	435a      	muls	r2, r3
    70d4:	9203      	str	r2, [sp, #12]
    70d6:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    70da:	435a      	muls	r2, r3
    70dc:	9206      	str	r2, [sp, #24]
    70de:	8982      	ldrh	r2, [r0, #12]
    70e0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    70e4:	89c2      	ldrh	r2, [r0, #14]
    70e6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    70ea:	8a02      	ldrh	r2, [r0, #16]
    70ec:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    70f0:	8a42      	ldrh	r2, [r0, #18]
    70f2:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    70f6:	8a82      	ldrh	r2, [r0, #20]
    70f8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    70fc:	8ac0      	ldrh	r0, [r0, #22]
    70fe:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    7102:	2007      	movs	r0, #7
    7104:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    7108:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    710c:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    7110:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    7114:	9806      	ldr	r0, [sp, #24]
    7116:	f000 fa0d 	bl	7534 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    711a:	b158      	cbz	r0, 7134 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    711c:	9803      	ldr	r0, [sp, #12]
    711e:	f000 f9fd 	bl	751c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x78>
    7122:	b138      	cbz	r0, 7134 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    7124:	4668      	mov	r0, sp
    7126:	f008 fd56 	bl	fbd6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    712a:	e7b4      	b.n	7096 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    712c:	e7ff      	b.n	712e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    712e:	f88d 1002 	strb.w	r1, [sp, #2]
    7132:	e7c1      	b.n	70b8 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    7134:	2030      	movs	r0, #48	; 0x30
    7136:	e7ae      	b.n	7096 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

00007138 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    7138:	4903      	ldr	r1, [pc, #12]	; (7148 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    713a:	884a      	ldrh	r2, [r1, #2]
    713c:	8002      	strh	r2, [r0, #0]
    713e:	7809      	ldrb	r1, [r1, #0]
    7140:	7081      	strb	r1, [r0, #2]
    7142:	2000      	movs	r0, #0
    7144:	4770      	bx	lr
    7146:	0000      	.short	0x0000
    7148:	200011fc 	.word	0x200011fc

0000714c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    714c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    714e:	460c      	mov	r4, r1
    7150:	4605      	mov	r5, r0
    7152:	8800      	ldrh	r0, [r0, #0]
    7154:	4669      	mov	r1, sp
    7156:	f006 fdb5 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    715a:	2200      	movs	r2, #0
    715c:	b128      	cbz	r0, 716a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    715e:	f8c4 2002 	str.w	r2, [r4, #2]
    7162:	71a2      	strb	r2, [r4, #6]
    7164:	8022      	strh	r2, [r4, #0]
    7166:	2002      	movs	r0, #2
    7168:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    716a:	9901      	ldr	r1, [sp, #4]
    716c:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    7170:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    7174:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    7178:	f8c4 0002 	str.w	r0, [r4, #2]
    717c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7180:	71a0      	strb	r0, [r4, #6]
    7182:	8828      	ldrh	r0, [r5, #0]
    7184:	8020      	strh	r0, [r4, #0]
    7186:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    718a:	f88d 0008 	strb.w	r0, [sp, #8]
    718e:	9802      	ldr	r0, [sp, #8]
    7190:	9002      	str	r0, [sp, #8]
    7192:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7196:	2800      	cmp	r0, #0
    7198:	d1ea      	bne.n	7170 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    719a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000719c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    719c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    719e:	460d      	mov	r5, r1
    71a0:	4606      	mov	r6, r0
    71a2:	8800      	ldrh	r0, [r0, #0]
    71a4:	4669      	mov	r1, sp
    71a6:	f006 fd8d 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71aa:	2800      	cmp	r0, #0
    71ac:	d11a      	bne.n	71e4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    71ae:	f8dd 4004 	ldr.w	r4, [sp, #4]
    71b2:	2700      	movs	r7, #0
    71b4:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    71b8:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    71bc:	f008 ff11 	bl	ffe2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>
    71c0:	70a8      	strb	r0, [r5, #2]
    71c2:	7860      	ldrb	r0, [r4, #1]
    71c4:	f008 ff0d 	bl	ffe2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>
    71c8:	70e8      	strb	r0, [r5, #3]
    71ca:	78a0      	ldrb	r0, [r4, #2]
    71cc:	f88d 0008 	strb.w	r0, [sp, #8]
    71d0:	9802      	ldr	r0, [sp, #8]
    71d2:	9002      	str	r0, [sp, #8]
    71d4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    71d8:	3c6a      	subs	r4, #106	; 0x6a
    71da:	2800      	cmp	r0, #0
    71dc:	d1ea      	bne.n	71b4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    71de:	8830      	ldrh	r0, [r6, #0]
    71e0:	8028      	strh	r0, [r5, #0]
    71e2:	2000      	movs	r0, #0
    71e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000071e8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    71e8:	4903      	ldr	r1, [pc, #12]	; (71f8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    71ea:	888a      	ldrh	r2, [r1, #4]
    71ec:	8002      	strh	r2, [r0, #0]
    71ee:	88c9      	ldrh	r1, [r1, #6]
    71f0:	8041      	strh	r1, [r0, #2]
    71f2:	2000      	movs	r0, #0
    71f4:	4770      	bx	lr
    71f6:	0000      	.short	0x0000
    71f8:	20000296 	.word	0x20000296

000071fc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    71fc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    71fe:	2400      	movs	r4, #0
    7200:	a902      	add	r1, sp, #8
    7202:	f88d 4004 	strb.w	r4, [sp, #4]
    7206:	f88d 4008 	strb.w	r4, [sp, #8]
    720a:	9100      	str	r1, [sp, #0]
    720c:	7882      	ldrb	r2, [r0, #2]
    720e:	7841      	ldrb	r1, [r0, #1]
    7210:	7800      	ldrb	r0, [r0, #0]
    7212:	ab01      	add	r3, sp, #4
    7214:	f009 f8eb 	bl	103ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x458>
    7218:	2800      	cmp	r0, #0
    721a:	d112      	bne.n	7242 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    721c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7220:	f008 fef6 	bl	10010 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7a>
    7224:	b170      	cbz	r0, 7244 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7226:	f89d 0008 	ldrb.w	r0, [sp, #8]
    722a:	f008 fef1 	bl	10010 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7a>
    722e:	b148      	cbz	r0, 7244 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7230:	4805      	ldr	r0, [pc, #20]	; (7248 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    7232:	f89d 1004 	ldrb.w	r1, [sp, #4]
    7236:	7381      	strb	r1, [r0, #14]
    7238:	f89d 1008 	ldrb.w	r1, [sp, #8]
    723c:	73c1      	strb	r1, [r0, #15]
    723e:	8204      	strh	r4, [r0, #16]
    7240:	2000      	movs	r0, #0
    7242:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7244:	2011      	movs	r0, #17
    7246:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7248:	200011fc 	.word	0x200011fc

0000724c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    724c:	b51c      	push	{r2, r3, r4, lr}
    724e:	4604      	mov	r4, r0
    7250:	f006 fd22 	bl	dc98 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    7254:	b148      	cbz	r0, 726a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    7256:	4620      	mov	r0, r4
    7258:	f7fb fa9e 	bl	2798 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    725c:	4909      	ldr	r1, [pc, #36]	; (7284 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    725e:	24ff      	movs	r4, #255	; 0xff
    7260:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7264:	e9cd 0100 	strd	r0, r1, [sp]
    7268:	e004      	b.n	7274 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    726a:	2012      	movs	r0, #18
    726c:	bd1c      	pop	{r2, r3, r4, pc}
    726e:	9800      	ldr	r0, [sp, #0]
    7270:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    7274:	4668      	mov	r0, sp
    7276:	f7f9 fef9 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    727a:	2800      	cmp	r0, #0
    727c:	d0f7      	beq.n	726e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    727e:	2000      	movs	r0, #0
    7280:	bd1c      	pop	{r2, r3, r4, pc}
    7282:	0000      	.short	0x0000
    7284:	00007868 	.word	0x00007868

00007288 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7288:	7801      	ldrb	r1, [r0, #0]
    728a:	b171      	cbz	r1, 72aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    728c:	7841      	ldrb	r1, [r0, #1]
    728e:	b161      	cbz	r1, 72aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7290:	8841      	ldrh	r1, [r0, #2]
    7292:	291b      	cmp	r1, #27
    7294:	d309      	bcc.n	72aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7296:	8881      	ldrh	r1, [r0, #4]
    7298:	291b      	cmp	r1, #27
    729a:	d306      	bcc.n	72aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    729c:	4904      	ldr	r1, [pc, #16]	; (72b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    729e:	6802      	ldr	r2, [r0, #0]
    72a0:	600a      	str	r2, [r1, #0]
    72a2:	8880      	ldrh	r0, [r0, #4]
    72a4:	8088      	strh	r0, [r1, #4]
    72a6:	2000      	movs	r0, #0
    72a8:	4770      	bx	lr
    72aa:	2012      	movs	r0, #18
    72ac:	4770      	bx	lr
    72ae:	0000      	.short	0x0000
    72b0:	200011fc 	.word	0x200011fc

000072b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    72b4:	6800      	ldr	r0, [r0, #0]
    72b6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    72ba:	4288      	cmp	r0, r1
    72bc:	d303      	bcc.n	72c6 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    72be:	4903      	ldr	r1, [pc, #12]	; (72cc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    72c0:	6088      	str	r0, [r1, #8]
    72c2:	2000      	movs	r0, #0
    72c4:	4770      	bx	lr
    72c6:	2012      	movs	r0, #18
    72c8:	4770      	bx	lr
    72ca:	0000      	.short	0x0000
    72cc:	200011fc 	.word	0x200011fc

000072d0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    72d0:	b510      	push	{r4, lr}
    72d2:	b086      	sub	sp, #24
    72d4:	4604      	mov	r4, r0
    72d6:	f008 ff76 	bl	101c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x230>
    72da:	2800      	cmp	r0, #0
    72dc:	d103      	bne.n	72e6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    72de:	f009 f873 	bl	103c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    72e2:	b110      	cbz	r0, 72ea <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    72e4:	200c      	movs	r0, #12
    72e6:	b006      	add	sp, #24
    72e8:	bd10      	pop	{r4, pc}
    72ea:	2102      	movs	r1, #2
    72ec:	f104 0010 	add.w	r0, r4, #16
    72f0:	f000 f92c 	bl	754c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    72f4:	78a0      	ldrb	r0, [r4, #2]
    72f6:	f88d 0008 	strb.w	r0, [sp, #8]
    72fa:	78a0      	ldrb	r0, [r4, #2]
    72fc:	f88d 0000 	strb.w	r0, [sp]
    7300:	7860      	ldrb	r0, [r4, #1]
    7302:	f88d 0003 	strb.w	r0, [sp, #3]
    7306:	7820      	ldrb	r0, [r4, #0]
    7308:	f88d 0002 	strb.w	r0, [sp, #2]
    730c:	7e20      	ldrb	r0, [r4, #24]
    730e:	f88d 0004 	strb.w	r0, [sp, #4]
    7312:	78a0      	ldrb	r0, [r4, #2]
    7314:	07c0      	lsls	r0, r0, #31
    7316:	d00b      	beq.n	7330 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    7318:	78e0      	ldrb	r0, [r4, #3]
    731a:	2801      	cmp	r0, #1
    731c:	d011      	beq.n	7342 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    731e:	b190      	cbz	r0, 7346 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    7320:	f05f 0000 	movs.w	r0, #0
    7324:	f88d 0001 	strb.w	r0, [sp, #1]
    7328:	68a0      	ldr	r0, [r4, #8]
    732a:	9003      	str	r0, [sp, #12]
    732c:	6920      	ldr	r0, [r4, #16]
    732e:	9004      	str	r0, [sp, #16]
    7330:	a802      	add	r0, sp, #8
    7332:	f7fd fc7d 	bl	4c30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    7336:	2800      	cmp	r0, #0
    7338:	d1d5      	bne.n	72e6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    733a:	4668      	mov	r0, sp
    733c:	f7fc fa5e 	bl	37fc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    7340:	e7d1      	b.n	72e6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    7342:	2002      	movs	r0, #2
    7344:	e7ee      	b.n	7324 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    7346:	2001      	movs	r0, #1
    7348:	e7ec      	b.n	7324 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000734c <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    734c:	4801      	ldr	r0, [pc, #4]	; (7354 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    734e:	f990 0000 	ldrsb.w	r0, [r0]
    7352:	4770      	bx	lr
    7354:	20000288 	.word	0x20000288

00007358 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7358:	4a03      	ldr	r2, [pc, #12]	; (7368 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    735a:	e9d2 1200 	ldrd	r1, r2, [r2]
    735e:	6001      	str	r1, [r0, #0]
    7360:	6042      	str	r2, [r0, #4]
    7362:	2000      	movs	r0, #0
    7364:	4770      	bx	lr
    7366:	0000      	.short	0x0000
    7368:	00007868 	.word	0x00007868

0000736c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    736c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    736e:	8800      	ldrh	r0, [r0, #0]
    7370:	4669      	mov	r1, sp
    7372:	f006 fca7 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7376:	b968      	cbnz	r0, 7394 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7378:	2401      	movs	r4, #1
    737a:	9801      	ldr	r0, [sp, #4]
    737c:	f009 f807 	bl	1038e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f8>
    7380:	b140      	cbz	r0, 7394 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7382:	9801      	ldr	r0, [sp, #4]
    7384:	4601      	mov	r1, r0
    7386:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    738a:	3088      	adds	r0, #136	; 0x88
    738c:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    7390:	b95a      	cbnz	r2, 73aa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7392:	e001      	b.n	7398 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    7394:	2002      	movs	r0, #2
    7396:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7398:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    739c:	f88d 2008 	strb.w	r2, [sp, #8]
    73a0:	9a02      	ldr	r2, [sp, #8]
    73a2:	9202      	str	r2, [sp, #8]
    73a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    73a8:	b10a      	cbz	r2, 73ae <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    73aa:	203a      	movs	r0, #58	; 0x3a
    73ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    73ae:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    73b2:	0792      	lsls	r2, r2, #30
    73b4:	d006      	beq.n	73c4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    73b6:	2202      	movs	r2, #2
    73b8:	4903      	ldr	r1, [pc, #12]	; (73c8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    73ba:	3060      	adds	r0, #96	; 0x60
    73bc:	f006 ffdd 	bl	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    73c0:	2000      	movs	r0, #0
    73c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    73c4:	700c      	strb	r4, [r1, #0]
    73c6:	e7fb      	b.n	73c0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    73c8:	0000e95d 	.word	0x0000e95d

000073cc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    73cc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    73d0:	4613      	mov	r3, r2
    73d2:	4a33      	ldr	r2, [pc, #204]	; (74a0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    73d4:	460f      	mov	r7, r1
    73d6:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    73da:	8814      	ldrh	r4, [r2, #0]
    73dc:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    73e0:	428c      	cmp	r4, r1
    73e2:	d200      	bcs.n	73e6 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    73e4:	4621      	mov	r1, r4
    73e6:	4688      	mov	r8, r1
    73e8:	8891      	ldrh	r1, [r2, #4]
    73ea:	42b1      	cmp	r1, r6
    73ec:	d200      	bcs.n	73f0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    73ee:	460e      	mov	r6, r1
    73f0:	8851      	ldrh	r1, [r2, #2]
    73f2:	f640 0448 	movw	r4, #2120	; 0x848
    73f6:	42a1      	cmp	r1, r4
    73f8:	d300      	bcc.n	73fc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    73fa:	4621      	mov	r1, r4
    73fc:	88d5      	ldrh	r5, [r2, #6]
    73fe:	42a5      	cmp	r5, r4
    7400:	d300      	bcc.n	7404 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    7402:	4625      	mov	r5, r4
    7404:	42a1      	cmp	r1, r4
    7406:	d200      	bcs.n	740a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    7408:	460c      	mov	r4, r1
    740a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    740e:	2e1b      	cmp	r6, #27
    7410:	d001      	beq.n	7416 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    7412:	4295      	cmp	r5, r2
    7414:	d104      	bne.n	7420 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    7416:	f1b8 0f1b 	cmp.w	r8, #27
    741a:	d03e      	beq.n	749a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    741c:	4294      	cmp	r4, r2
    741e:	d03c      	beq.n	749a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7420:	466a      	mov	r2, sp
    7422:	4619      	mov	r1, r3
    7424:	f008 ff5a 	bl	102dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x346>
    7428:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    742c:	4641      	mov	r1, r8
    742e:	4540      	cmp	r0, r8
    7430:	d900      	bls.n	7434 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    7432:	4608      	mov	r0, r1
    7434:	80f8      	strh	r0, [r7, #6]
    7436:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    743a:	42a1      	cmp	r1, r4
    743c:	d800      	bhi.n	7440 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    743e:	460c      	mov	r4, r1
    7440:	813c      	strh	r4, [r7, #8]
    7442:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7446:	42b1      	cmp	r1, r6
    7448:	d800      	bhi.n	744c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    744a:	460e      	mov	r6, r1
    744c:	807e      	strh	r6, [r7, #2]
    744e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7452:	42a9      	cmp	r1, r5
    7454:	d800      	bhi.n	7458 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    7456:	460d      	mov	r5, r1
    7458:	80bd      	strh	r5, [r7, #4]
    745a:	21ff      	movs	r1, #255	; 0xff
    745c:	7039      	strb	r1, [r7, #0]
    745e:	381b      	subs	r0, #27
    7460:	28e0      	cmp	r0, #224	; 0xe0
    7462:	d902      	bls.n	746a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    7464:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    7468:	e014      	b.n	7494 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    746a:	3e1b      	subs	r6, #27
    746c:	2ee0      	cmp	r6, #224	; 0xe0
    746e:	d902      	bls.n	7476 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    7470:	f240 51b2 	movw	r1, #1458	; 0x5b2
    7474:	e00e      	b.n	7494 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7476:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    747a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    747e:	4284      	cmp	r4, r0
    7480:	d902      	bls.n	7488 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    7482:	f240 51b4 	movw	r1, #1460	; 0x5b4
    7486:	e005      	b.n	7494 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7488:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    748c:	4285      	cmp	r5, r0
    748e:	d904      	bls.n	749a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7490:	f240 51b6 	movw	r1, #1462	; 0x5b6
    7494:	2039      	movs	r0, #57	; 0x39
    7496:	f7f9 fac1 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    749a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    749e:	0000      	.short	0x0000
    74a0:	20000296 	.word	0x20000296

000074a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    74a4:	b510      	push	{r4, lr}
    74a6:	2005      	movs	r0, #5
    74a8:	f000 fa52 	bl	7950 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    74ac:	f7fe f8f2 	bl	5694 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    74b0:	4902      	ldr	r1, [pc, #8]	; (74bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    74b2:	4801      	ldr	r0, [pc, #4]	; (74b8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    74b4:	6048      	str	r0, [r1, #4]
    74b6:	bd10      	pop	{r4, pc}
    74b8:	000073cd 	.word	0x000073cd
    74bc:	20000288 	.word	0x20000288
    74c0:	b510      	push	{r4, lr}
    74c2:	480e      	ldr	r0, [pc, #56]	; (74fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x58>)
    74c4:	2100      	movs	r1, #0
    74c6:	4b0e      	ldr	r3, [pc, #56]	; (7500 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5c>)
    74c8:	74c1      	strb	r1, [r0, #19]
    74ca:	8281      	strh	r1, [r0, #20]
    74cc:	221b      	movs	r2, #27
    74ce:	801a      	strh	r2, [r3, #0]
    74d0:	f44f 74a4 	mov.w	r4, #328	; 0x148
    74d4:	805c      	strh	r4, [r3, #2]
    74d6:	809a      	strh	r2, [r3, #4]
    74d8:	80dc      	strh	r4, [r3, #6]
    74da:	7381      	strb	r1, [r0, #14]
    74dc:	73c1      	strb	r1, [r0, #15]
    74de:	2303      	movs	r3, #3
    74e0:	7003      	strb	r3, [r0, #0]
    74e2:	2302      	movs	r3, #2
    74e4:	7043      	strb	r3, [r0, #1]
    74e6:	8042      	strh	r2, [r0, #2]
    74e8:	8082      	strh	r2, [r0, #4]
    74ea:	f640 62a6 	movw	r2, #3750	; 0xea6
    74ee:	6082      	str	r2, [r0, #8]
    74f0:	7481      	strb	r1, [r0, #18]
    74f2:	7301      	strb	r1, [r0, #12]
    74f4:	4802      	ldr	r0, [pc, #8]	; (7500 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5c>)
    74f6:	1f80      	subs	r0, r0, #6
    74f8:	7001      	strb	r1, [r0, #0]
    74fa:	bd10      	pop	{r4, pc}
    74fc:	200011fc 	.word	0x200011fc
    7500:	20000296 	.word	0x20000296
    7504:	4904      	ldr	r1, [pc, #16]	; (7518 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x74>)
    7506:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    750a:	4288      	cmp	r0, r1
    750c:	d301      	bcc.n	7512 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x6e>
    750e:	2000      	movs	r0, #0
    7510:	4770      	bx	lr
    7512:	2001      	movs	r0, #1
    7514:	4770      	bx	lr
    7516:	0000      	.short	0x0000
    7518:	0270f3cc 	.word	0x0270f3cc
    751c:	4904      	ldr	r1, [pc, #16]	; (7530 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x8c>)
    751e:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    7522:	4288      	cmp	r0, r1
    7524:	d301      	bcc.n	752a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x86>
    7526:	2000      	movs	r0, #0
    7528:	4770      	bx	lr
    752a:	2001      	movs	r0, #1
    752c:	4770      	bx	lr
    752e:	0000      	.short	0x0000
    7530:	009c363d 	.word	0x009c363d
    7534:	4904      	ldr	r1, [pc, #16]	; (7548 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa4>)
    7536:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    753a:	4288      	cmp	r0, r1
    753c:	d301      	bcc.n	7542 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9e>
    753e:	2000      	movs	r0, #0
    7540:	4770      	bx	lr
    7542:	2001      	movs	r0, #1
    7544:	4770      	bx	lr
    7546:	0000      	.short	0x0000
    7548:	009c363d 	.word	0x009c363d
    754c:	b530      	push	{r4, r5, lr}
    754e:	2200      	movs	r2, #0
    7550:	4d07      	ldr	r5, [pc, #28]	; (7570 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xcc>)
    7552:	e009      	b.n	7568 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc4>
    7554:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7558:	462b      	mov	r3, r5
    755a:	429c      	cmp	r4, r3
    755c:	d800      	bhi.n	7560 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xbc>
    755e:	4623      	mov	r3, r4
    7560:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    7564:	1c52      	adds	r2, r2, #1
    7566:	b2d2      	uxtb	r2, r2
    7568:	428a      	cmp	r2, r1
    756a:	d3f3      	bcc.n	7554 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xb0>
    756c:	bd30      	pop	{r4, r5, pc}
    756e:	0000      	.short	0x0000
    7570:	00f42400 	.word	0x00f42400
    7574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7578:	4604      	mov	r4, r0
    757a:	a05c      	add	r0, pc, #368	; (adr r0, 76ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>)
    757c:	4688      	mov	r8, r1
    757e:	e9d0 7600 	ldrd	r7, r6, [r0]
    7582:	b087      	sub	sp, #28
    7584:	4699      	mov	r9, r3
    7586:	4615      	mov	r5, r2
    7588:	2100      	movs	r1, #0
    758a:	4620      	mov	r0, r4
    758c:	f7fb f842 	bl	2614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7590:	f8a4 8000 	strh.w	r8, [r4]
    7594:	4857      	ldr	r0, [pc, #348]	; (76f4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x250>)
    7596:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    759a:	f000 f9e5 	bl	7968 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    759e:	0940      	lsrs	r0, r0, #5
    75a0:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    75a4:	07c1      	lsls	r1, r0, #31
    75a6:	f8df 8150 	ldr.w	r8, [pc, #336]	; 76f8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x254>
    75aa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    75ae:	d006      	beq.n	75be <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x11a>
    75b0:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    75b4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    75b8:	84c2      	strh	r2, [r0, #38]	; 0x26
    75ba:	8501      	strh	r1, [r0, #40]	; 0x28
    75bc:	e002      	b.n	75c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x120>
    75be:	211b      	movs	r1, #27
    75c0:	84c1      	strh	r1, [r0, #38]	; 0x26
    75c2:	8501      	strh	r1, [r0, #40]	; 0x28
    75c4:	f000 f9d0 	bl	7968 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    75c8:	0788      	lsls	r0, r1, #30
    75ca:	d506      	bpl.n	75da <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x136>
    75cc:	2000      	movs	r0, #0
    75ce:	f88d 0000 	strb.w	r0, [sp]
    75d2:	4668      	mov	r0, sp
    75d4:	9401      	str	r4, [sp, #4]
    75d6:	f7ff fd25 	bl	7024 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    75da:	f898 1001 	ldrb.w	r1, [r8, #1]
    75de:	9100      	str	r1, [sp, #0]
    75e0:	f898 3000 	ldrb.w	r3, [r8]
    75e4:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    75e8:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    75ec:	8820      	ldrh	r0, [r4, #0]
    75ee:	f7f9 fdb9 	bl	1164 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    75f2:	b120      	cbz	r0, 75fe <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15a>
    75f4:	f241 010f 	movw	r1, #4111	; 0x100f
    75f8:	2039      	movs	r0, #57	; 0x39
    75fa:	f7f9 fa0f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75fe:	f006 ffc3 	bl	e588 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    7602:	6160      	str	r0, [r4, #20]
    7604:	f1b9 0f00 	cmp.w	r9, #0
    7608:	d004      	beq.n	7614 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x170>
    760a:	f7fb fca9 	bl	2f60 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    760e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7612:	61e0      	str	r0, [r4, #28]
    7614:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7618:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    761c:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    761e:	f006 fb5d 	bl	dcdc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7622:	6120      	str	r0, [r4, #16]
    7624:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7628:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    762c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    762e:	8320      	strh	r0, [r4, #24]
    7630:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7634:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    7638:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    763a:	8360      	strh	r0, [r4, #26]
    763c:	7a68      	ldrb	r0, [r5, #9]
    763e:	f008 fcc6 	bl	ffce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    7642:	f8d8 1008 	ldr.w	r1, [r8, #8]
    7646:	4645      	mov	r5, r8
    7648:	4620      	mov	r0, r4
    764a:	62e1      	str	r1, [r4, #44]	; 0x2c
    764c:	f007 fc6f 	bl	ef2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    7650:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    7654:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    7658:	20ff      	movs	r0, #255	; 0xff
    765a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    765e:	4825      	ldr	r0, [pc, #148]	; (76f4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x250>)
    7660:	3808      	subs	r0, #8
    7662:	6843      	ldr	r3, [r0, #4]
    7664:	b123      	cbz	r3, 7670 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1cc>
    7666:	2201      	movs	r2, #1
    7668:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    766c:	4620      	mov	r0, r4
    766e:	4798      	blx	r3
    7670:	8821      	ldrh	r1, [r4, #0]
    7672:	f8ad 1004 	strh.w	r1, [sp, #4]
    7676:	7ba9      	ldrb	r1, [r5, #14]
    7678:	f88d 1006 	strb.w	r1, [sp, #6]
    767c:	7be9      	ldrb	r1, [r5, #15]
    767e:	f88d 1007 	strb.w	r1, [sp, #7]
    7682:	8a29      	ldrh	r1, [r5, #16]
    7684:	f8ad 1008 	strh.w	r1, [sp, #8]
    7688:	a904      	add	r1, sp, #16
    768a:	9100      	str	r1, [sp, #0]
    768c:	2000      	movs	r0, #0
    768e:	ab03      	add	r3, sp, #12
    7690:	aa01      	add	r2, sp, #4
    7692:	4621      	mov	r1, r4
    7694:	f008 fe58 	bl	10348 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3b2>
    7698:	0005      	movs	r5, r0
    769a:	d10f      	bne.n	76bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x218>
    769c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    76a0:	f88d 0014 	strb.w	r0, [sp, #20]
    76a4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    76a8:	f88d 0015 	strb.w	r0, [sp, #21]
    76ac:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    76b0:	f8ad 0016 	strh.w	r0, [sp, #22]
    76b4:	a905      	add	r1, sp, #20
    76b6:	4620      	mov	r0, r4
    76b8:	f006 fbcb 	bl	de52 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    76bc:	f7fb fc50 	bl	2f60 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    76c0:	210c      	movs	r1, #12
    76c2:	fbb0 f2f1 	udiv	r2, r0, r1
    76c6:	fb01 0012 	mls	r0, r1, r2, r0
    76ca:	1d40      	adds	r0, r0, #5
    76cc:	b2c0      	uxtb	r0, r0
    76ce:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    76d2:	2809      	cmp	r0, #9
    76d4:	d202      	bcs.n	76dc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x238>
    76d6:	3008      	adds	r0, #8
    76d8:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    76dc:	2101      	movs	r1, #1
    76de:	4620      	mov	r0, r4
    76e0:	f7fa ff98 	bl	2614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    76e4:	b007      	add	sp, #28
    76e6:	4628      	mov	r0, r5
    76e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    76ec:	ffffffff 	.word	0xffffffff
    76f0:	0000001f 	.word	0x0000001f
    76f4:	20000290 	.word	0x20000290
    76f8:	200011fc 	.word	0x200011fc
    76fc:	4a09      	ldr	r2, [pc, #36]	; (7724 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x280>)
    76fe:	4290      	cmp	r0, r2
    7700:	d80b      	bhi.n	771a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x276>
    7702:	2901      	cmp	r1, #1
    7704:	d002      	beq.n	770c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x268>
    7706:	2904      	cmp	r1, #4
    7708:	d003      	beq.n	7712 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x26e>
    770a:	e008      	b.n	771e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x27a>
    770c:	f240 7153 	movw	r1, #1875	; 0x753
    7710:	e001      	b.n	7716 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x272>
    7712:	f640 11c4 	movw	r1, #2500	; 0x9c4
    7716:	4288      	cmp	r0, r1
    7718:	d201      	bcs.n	771e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x27a>
    771a:	2000      	movs	r0, #0
    771c:	4770      	bx	lr
    771e:	2001      	movs	r0, #1
    7720:	4770      	bx	lr
    7722:	0000      	.short	0x0000
    7724:	0270fd8f 	.word	0x0270fd8f
    7728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    772c:	b088      	sub	sp, #32
    772e:	4604      	mov	r4, r0
    7730:	8800      	ldrh	r0, [r0, #0]
    7732:	a906      	add	r1, sp, #24
    7734:	f006 fac6 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7738:	2800      	cmp	r0, #0
    773a:	d147      	bne.n	77cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    773c:	9807      	ldr	r0, [sp, #28]
    773e:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    7742:	f88d 1008 	strb.w	r1, [sp, #8]
    7746:	9902      	ldr	r1, [sp, #8]
    7748:	9102      	str	r1, [sp, #8]
    774a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    774e:	3088      	adds	r0, #136	; 0x88
    7750:	b101      	cbz	r1, 7754 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2b0>
    7752:	2101      	movs	r1, #1
    7754:	f88d 100c 	strb.w	r1, [sp, #12]
    7758:	7f81      	ldrb	r1, [r0, #30]
    775a:	f04f 0801 	mov.w	r8, #1
    775e:	291e      	cmp	r1, #30
    7760:	d102      	bne.n	7768 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2c4>
    7762:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7766:	b149      	cbz	r1, 777c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2d8>
    7768:	f05f 0100 	movs.w	r1, #0
    776c:	f88d 1004 	strb.w	r1, [sp, #4]
    7770:	2105      	movs	r1, #5
    7772:	306e      	adds	r0, #110	; 0x6e
    7774:	f007 ffab 	bl	f6ce <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    7778:	b110      	cbz	r0, 7780 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2dc>
    777a:	e004      	b.n	7786 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2e2>
    777c:	2101      	movs	r1, #1
    777e:	e7f5      	b.n	776c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2c8>
    7780:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7784:	b308      	cbz	r0, 77ca <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x326>
    7786:	8921      	ldrh	r1, [r4, #8]
    7788:	88e0      	ldrh	r0, [r4, #6]
    778a:	f008 fc56 	bl	1003a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    778e:	2800      	cmp	r0, #0
    7790:	d11c      	bne.n	77cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    7792:	88a1      	ldrh	r1, [r4, #4]
    7794:	8860      	ldrh	r0, [r4, #2]
    7796:	f008 fc50 	bl	1003a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    779a:	2800      	cmp	r0, #0
    779c:	d116      	bne.n	77cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    779e:	8921      	ldrh	r1, [r4, #8]
    77a0:	88e0      	ldrh	r0, [r4, #6]
    77a2:	f008 fc40 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x90>
    77a6:	2800      	cmp	r0, #0
    77a8:	d110      	bne.n	77cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    77aa:	88a1      	ldrh	r1, [r4, #4]
    77ac:	8860      	ldrh	r0, [r4, #2]
    77ae:	f008 fc3a 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x90>
    77b2:	0006      	movs	r6, r0
    77b4:	d10a      	bne.n	77cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    77b6:	9807      	ldr	r0, [sp, #28]
    77b8:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    77bc:	27ff      	movs	r7, #255	; 0xff
    77be:	706f      	strb	r7, [r5, #1]
    77c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    77c4:	b129      	cbz	r1, 77d2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32e>
    77c6:	263a      	movs	r6, #58	; 0x3a
    77c8:	e02e      	b.n	7828 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x384>
    77ca:	201a      	movs	r0, #26
    77cc:	b008      	add	sp, #32
    77ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77d2:	4641      	mov	r1, r8
    77d4:	aa03      	add	r2, sp, #12
    77d6:	f008 fd81 	bl	102dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x346>
    77da:	8861      	ldrh	r1, [r4, #2]
    77dc:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    77e0:	4281      	cmp	r1, r0
    77e2:	d200      	bcs.n	77e6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x342>
    77e4:	4608      	mov	r0, r1
    77e6:	80e8      	strh	r0, [r5, #6]
    77e8:	88a1      	ldrh	r1, [r4, #4]
    77ea:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    77ee:	4281      	cmp	r1, r0
    77f0:	d200      	bcs.n	77f4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x350>
    77f2:	4608      	mov	r0, r1
    77f4:	8128      	strh	r0, [r5, #8]
    77f6:	88e2      	ldrh	r2, [r4, #6]
    77f8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    77fc:	428a      	cmp	r2, r1
    77fe:	d200      	bcs.n	7802 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35e>
    7800:	4611      	mov	r1, r2
    7802:	8069      	strh	r1, [r5, #2]
    7804:	8922      	ldrh	r2, [r4, #8]
    7806:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    780a:	428a      	cmp	r2, r1
    780c:	d200      	bcs.n	7810 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36c>
    780e:	4611      	mov	r1, r2
    7810:	f640 0248 	movw	r2, #2120	; 0x848
    7814:	80a9      	strh	r1, [r5, #4]
    7816:	4291      	cmp	r1, r2
    7818:	d300      	bcc.n	781c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x378>
    781a:	4611      	mov	r1, r2
    781c:	80a9      	strh	r1, [r5, #4]
    781e:	4290      	cmp	r0, r2
    7820:	d200      	bcs.n	7824 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x380>
    7822:	4602      	mov	r2, r0
    7824:	812a      	strh	r2, [r5, #8]
    7826:	702f      	strb	r7, [r5, #0]
    7828:	2000      	movs	r0, #0
    782a:	7068      	strb	r0, [r5, #1]
    782c:	4630      	mov	r0, r6
    782e:	e7cd      	b.n	77cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    7830:	b510      	push	{r4, lr}
    7832:	4604      	mov	r4, r0
    7834:	88c1      	ldrh	r1, [r0, #6]
    7836:	8880      	ldrh	r0, [r0, #4]
    7838:	f008 fbff 	bl	1003a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    783c:	2800      	cmp	r0, #0
    783e:	d10f      	bne.n	7860 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3bc>
    7840:	8861      	ldrh	r1, [r4, #2]
    7842:	8820      	ldrh	r0, [r4, #0]
    7844:	f008 fbf9 	bl	1003a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    7848:	2800      	cmp	r0, #0
    784a:	d109      	bne.n	7860 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3bc>
    784c:	4805      	ldr	r0, [pc, #20]	; (7864 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3c0>)
    784e:	88a1      	ldrh	r1, [r4, #4]
    7850:	8081      	strh	r1, [r0, #4]
    7852:	8821      	ldrh	r1, [r4, #0]
    7854:	8001      	strh	r1, [r0, #0]
    7856:	88e1      	ldrh	r1, [r4, #6]
    7858:	80c1      	strh	r1, [r0, #6]
    785a:	8861      	ldrh	r1, [r4, #2]
    785c:	8041      	strh	r1, [r0, #2]
    785e:	2000      	movs	r0, #0
    7860:	bd10      	pop	{r4, pc}
    7862:	0000      	.short	0x0000
    7864:	20000296 	.word	0x20000296
    7868:	0d10770d 	.word	0x0d10770d
    786c:	10770059 	.word	0x10770059
	...

00007878 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7878:	b570      	push	{r4, r5, r6, lr}
    787a:	460d      	mov	r5, r1
    787c:	f7fb f98a 	bl	2b94 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7880:	4c05      	ldr	r4, [pc, #20]	; (7898 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    7882:	6065      	str	r5, [r4, #4]
    7884:	68a0      	ldr	r0, [r4, #8]
    7886:	f008 fde1 	bl	1044c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b6>
    788a:	f008 faf7 	bl	fe7c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    788e:	f7fb fb5b 	bl	2f48 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7892:	2001      	movs	r0, #1
    7894:	7020      	strb	r0, [r4, #0]
    7896:	bd70      	pop	{r4, r5, r6, pc}
    7898:	200002a0 	.word	0x200002a0

0000789c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    789c:	4801      	ldr	r0, [pc, #4]	; (78a4 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    789e:	7800      	ldrb	r0, [r0, #0]
    78a0:	4770      	bx	lr
    78a2:	0000      	.short	0x0000
    78a4:	200002a0 	.word	0x200002a0

000078a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    78a8:	b510      	push	{r4, lr}
    78aa:	4c06      	ldr	r4, [pc, #24]	; (78c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    78ac:	68e0      	ldr	r0, [r4, #12]
    78ae:	f008 fdcd 	bl	1044c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b6>
    78b2:	6920      	ldr	r0, [r4, #16]
    78b4:	f008 fdca 	bl	1044c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b6>
    78b8:	f008 fb6d 	bl	ff96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    78bc:	2000      	movs	r0, #0
    78be:	7020      	strb	r0, [r4, #0]
    78c0:	bd10      	pop	{r4, pc}
    78c2:	0000      	.short	0x0000
    78c4:	200002a0 	.word	0x200002a0

000078c8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    78c8:	b510      	push	{r4, lr}
    78ca:	4908      	ldr	r1, [pc, #32]	; (78ec <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    78cc:	4808      	ldr	r0, [pc, #32]	; (78f0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    78ce:	f008 fdb0 	bl	10432 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
    78d2:	4807      	ldr	r0, [pc, #28]	; (78f0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    78d4:	4907      	ldr	r1, [pc, #28]	; (78f4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    78d6:	1d00      	adds	r0, r0, #4
    78d8:	f008 fdab 	bl	10432 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
    78dc:	4804      	ldr	r0, [pc, #16]	; (78f0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    78de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78e2:	4905      	ldr	r1, [pc, #20]	; (78f8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    78e4:	3008      	adds	r0, #8
    78e6:	f008 bda4 	b.w	10432 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
    78ea:	0000      	.short	0x0000
    78ec:	200002bc 	.word	0x200002bc
    78f0:	200002a8 	.word	0x200002a8
    78f4:	200002c4 	.word	0x200002c4
    78f8:	200002b4 	.word	0x200002b4
    78fc:	b510      	push	{r4, lr}
    78fe:	f7fb fef9 	bl	36f4 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    7902:	f000 f813 	bl	792c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    7906:	f006 f8ca 	bl	da9e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    790a:	4907      	ldr	r1, [pc, #28]	; (7928 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    790c:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    7910:	f7f9 ff3e 	bl	1790 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    7914:	2000      	movs	r0, #0
    7916:	f006 f833 	bl	d980 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    791a:	f7fd ff01 	bl	5720 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    791e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7922:	f7fb b93d 	b.w	2ba0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    7926:	0000      	.short	0x0000
    7928:	200015b9 	.word	0x200015b9
    792c:	b510      	push	{r4, lr}
    792e:	f7ff fb69 	bl	7004 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    7932:	f7fd f955 	bl	4be0 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    7936:	f7fd fdb1 	bl	549c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    793a:	f7ff fd07 	bl	734c <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    793e:	4601      	mov	r1, r0
    7940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7944:	4801      	ldr	r0, [pc, #4]	; (794c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    7946:	f7fb be39 	b.w	35bc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    794a:	0000      	.short	0x0000
    794c:	200014b7 	.word	0x200014b7

00007950 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7950:	4a04      	ldr	r2, [pc, #16]	; (7964 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    7952:	08c1      	lsrs	r1, r0, #3
    7954:	f000 0307 	and.w	r3, r0, #7
    7958:	2001      	movs	r0, #1
    795a:	4098      	lsls	r0, r3
    795c:	5c53      	ldrb	r3, [r2, r1]
    795e:	4303      	orrs	r3, r0
    7960:	5453      	strb	r3, [r2, r1]
    7962:	4770      	bx	lr
    7964:	20000020 	.word	0x20000020

00007968 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7968:	4901      	ldr	r1, [pc, #4]	; (7970 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    796a:	e9d1 0100 	ldrd	r0, r1, [r1]
    796e:	4770      	bx	lr
    7970:	20000020 	.word	0x20000020

00007974 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7974:	4806      	ldr	r0, [pc, #24]	; (7990 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7976:	8801      	ldrh	r1, [r0, #0]
    7978:	7900      	ldrb	r0, [r0, #4]
    797a:	0602      	lsls	r2, r0, #24
    797c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7980:	f000 0001 	and.w	r0, r0, #1
    7984:	1800      	adds	r0, r0, r0
    7986:	b2c0      	uxtb	r0, r0
    7988:	f040 0001 	orr.w	r0, r0, #1
    798c:	4770      	bx	lr
    798e:	0000      	.short	0x0000
    7990:	20000020 	.word	0x20000020

00007994 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7994:	b510      	push	{r4, lr}
    7996:	f004 fcfd 	bl	c394 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    799a:	2200      	movs	r2, #0
    799c:	4b08      	ldr	r3, [pc, #32]	; (79c0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    799e:	4611      	mov	r1, r2
    79a0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    79a4:	4284      	cmp	r4, r0
    79a6:	d303      	bcc.n	79b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    79a8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    79ac:	7882      	ldrb	r2, [r0, #2]
    79ae:	e003      	b.n	79b8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    79b0:	1c49      	adds	r1, r1, #1
    79b2:	b2c9      	uxtb	r1, r1
    79b4:	290c      	cmp	r1, #12
    79b6:	d3f3      	bcc.n	79a0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    79b8:	4802      	ldr	r0, [pc, #8]	; (79c4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    79ba:	7002      	strb	r2, [r0, #0]
    79bc:	bd10      	pop	{r4, pc}
    79be:	0000      	.short	0x0000
    79c0:	000104c8 	.word	0x000104c8
    79c4:	20000369 	.word	0x20000369

000079c8 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    79c8:	4802      	ldr	r0, [pc, #8]	; (79d4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    79ca:	7800      	ldrb	r0, [r0, #0]
    79cc:	f000 0007 	and.w	r0, r0, #7
    79d0:	4770      	bx	lr
    79d2:	0000      	.short	0x0000
    79d4:	20000369 	.word	0x20000369

000079d8 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    79d8:	b570      	push	{r4, r5, r6, lr}
    79da:	6845      	ldr	r5, [r0, #4]
    79dc:	f505 76d7 	add.w	r6, r5, #430	; 0x1ae
    79e0:	8828      	ldrh	r0, [r5, #0]
    79e2:	f826 0902 	strh.w	r0, [r6], #-2
    79e6:	f505 749c 	add.w	r4, r5, #312	; 0x138
    79ea:	7031      	strb	r1, [r6, #0]
    79ec:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    79f0:	f008 fd9e 	bl	10530 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    79f4:	7130      	strb	r0, [r6, #4]
    79f6:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    79fa:	f008 fd99 	bl	10530 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    79fe:	f806 0f05 	strb.w	r0, [r6, #5]!
    7a02:	2202      	movs	r2, #2
    7a04:	4903      	ldr	r1, [pc, #12]	; (7a14 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    7a06:	f1a6 000f 	sub.w	r0, r6, #15
    7a0a:	f006 fcb6 	bl	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7a0e:	2000      	movs	r0, #0
    7a10:	7320      	strb	r0, [r4, #12]
    7a12:	bd70      	pop	{r4, r5, r6, pc}
    7a14:	0001051d 	.word	0x0001051d

00007a18 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    7a18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7a1a:	460e      	mov	r6, r1
    7a1c:	4604      	mov	r4, r0
    7a1e:	f7fa ff71 	bl	2904 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    7a22:	2500      	movs	r5, #0
    7a24:	b320      	cbz	r0, 7a70 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    7a26:	f5a4 74ca 	sub.w	r4, r4, #404	; 0x194
    7a2a:	a902      	add	r1, sp, #8
    7a2c:	8820      	ldrh	r0, [r4, #0]
    7a2e:	f8ad 0000 	strh.w	r0, [sp]
    7a32:	f006 f947 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7a36:	b108      	cbz	r0, 7a3c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7a38:	2126      	movs	r1, #38	; 0x26
    7a3a:	e010      	b.n	7a5e <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7a3c:	9803      	ldr	r0, [sp, #12]
    7a3e:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    7a42:	f88d 1002 	strb.w	r1, [sp, #2]
    7a46:	7841      	ldrb	r1, [r0, #1]
    7a48:	f88d 1003 	strb.w	r1, [sp, #3]
    7a4c:	8840      	ldrh	r0, [r0, #2]
    7a4e:	f8ad 0004 	strh.w	r0, [sp, #4]
    7a52:	2102      	movs	r1, #2
    7a54:	4668      	mov	r0, sp
    7a56:	f008 fa13 	bl	fe80 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7a5a:	b118      	cbz	r0, 7a64 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7a5c:	213c      	movs	r1, #60	; 0x3c
    7a5e:	207e      	movs	r0, #126	; 0x7e
    7a60:	f7f8 ffdc 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a64:	f8cd 5000 	str.w	r5, [sp]
    7a68:	f8bd 0000 	ldrh.w	r0, [sp]
    7a6c:	b004      	add	sp, #16
    7a6e:	bd70      	pop	{r4, r5, r6, pc}
    7a70:	2020      	movs	r0, #32
    7a72:	7030      	strb	r0, [r6, #0]
    7a74:	7075      	strb	r5, [r6, #1]
    7a76:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7a7a:	6070      	str	r0, [r6, #4]
    7a7c:	4801      	ldr	r0, [pc, #4]	; (7a84 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7a7e:	6800      	ldr	r0, [r0, #0]
    7a80:	9000      	str	r0, [sp, #0]
    7a82:	e7f1      	b.n	7a68 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    7a84:	00007a88 	.word	0x00007a88
    7a88:	00000004 	.word	0x00000004

00007a8c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7a8c:	b570      	push	{r4, r5, r6, lr}
    7a8e:	4605      	mov	r5, r0
    7a90:	4616      	mov	r6, r2
    7a92:	460c      	mov	r4, r1
    7a94:	2002      	movs	r0, #2
    7a96:	f000 f9b7 	bl	7e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7a9a:	4906      	ldr	r1, [pc, #24]	; (7ab4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7a9c:	2001      	movs	r0, #1
    7a9e:	1ef6      	subs	r6, r6, #3
    7aa0:	7008      	strb	r0, [r1, #0]
    7aa2:	4805      	ldr	r0, [pc, #20]	; (7ab8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7aa4:	6006      	str	r6, [r0, #0]
    7aa6:	4804      	ldr	r0, [pc, #16]	; (7ab8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7aa8:	3808      	subs	r0, #8
    7aaa:	6005      	str	r5, [r0, #0]
    7aac:	1f00      	subs	r0, r0, #4
    7aae:	6004      	str	r4, [r0, #0]
    7ab0:	bd70      	pop	{r4, r5, r6, pc}
    7ab2:	0000      	.short	0x0000
    7ab4:	2000036a 	.word	0x2000036a
    7ab8:	4000f510 	.word	0x4000f510

00007abc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7abc:	b510      	push	{r4, lr}
    7abe:	4c0c      	ldr	r4, [pc, #48]	; (7af0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7ac0:	7820      	ldrb	r0, [r4, #0]
    7ac2:	b180      	cbz	r0, 7ae6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7ac4:	490b      	ldr	r1, [pc, #44]	; (7af4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7ac6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7aca:	6008      	str	r0, [r1, #0]
    7acc:	f000 f86a 	bl	7ba4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7ad0:	2100      	movs	r1, #0
    7ad2:	b120      	cbz	r0, 7ade <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7ad4:	2001      	movs	r0, #1
    7ad6:	7060      	strb	r0, [r4, #1]
    7ad8:	4807      	ldr	r0, [pc, #28]	; (7af8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7ada:	6800      	ldr	r0, [r0, #0]
    7adc:	e001      	b.n	7ae2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7ade:	7061      	strb	r1, [r4, #1]
    7ae0:	2010      	movs	r0, #16
    7ae2:	70a0      	strb	r0, [r4, #2]
    7ae4:	7021      	strb	r1, [r4, #0]
    7ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7aea:	2000      	movs	r0, #0
    7aec:	f000 b98c 	b.w	7e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7af0:	2000036a 	.word	0x2000036a
    7af4:	4001f508 	.word	0x4001f508
    7af8:	4000f400 	.word	0x4000f400

00007afc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7afc:	b510      	push	{r4, lr}
    7afe:	2002      	movs	r0, #2
    7b00:	f000 f982 	bl	7e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b04:	4904      	ldr	r1, [pc, #16]	; (7b18 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7b06:	2001      	movs	r0, #1
    7b08:	7008      	strb	r0, [r1, #0]
    7b0a:	f000 f859 	bl	7bc0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7b0e:	4903      	ldr	r1, [pc, #12]	; (7b1c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7b10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b14:	6008      	str	r0, [r1, #0]
    7b16:	bd10      	pop	{r4, pc}
    7b18:	2000036a 	.word	0x2000036a
    7b1c:	4001f504 	.word	0x4001f504

00007b20 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7b20:	4803      	ldr	r0, [pc, #12]	; (7b30 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7b22:	2100      	movs	r1, #0
    7b24:	7001      	strb	r1, [r0, #0]
    7b26:	7041      	strb	r1, [r0, #1]
    7b28:	2110      	movs	r1, #16
    7b2a:	7081      	strb	r1, [r0, #2]
    7b2c:	4770      	bx	lr
    7b2e:	0000      	.short	0x0000
    7b30:	2000036a 	.word	0x2000036a

00007b34 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7b34:	4807      	ldr	r0, [pc, #28]	; (7b54 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7b36:	b510      	push	{r4, lr}
    7b38:	7801      	ldrb	r1, [r0, #0]
    7b3a:	b141      	cbz	r1, 7b4e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7b3c:	f000 f832 	bl	7ba4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7b40:	b118      	cbz	r0, 7b4a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7b42:	4805      	ldr	r0, [pc, #20]	; (7b58 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7b44:	6800      	ldr	r0, [r0, #0]
    7b46:	b2c0      	uxtb	r0, r0
    7b48:	bd10      	pop	{r4, pc}
    7b4a:	2010      	movs	r0, #16
    7b4c:	bd10      	pop	{r4, pc}
    7b4e:	7880      	ldrb	r0, [r0, #2]
    7b50:	bd10      	pop	{r4, pc}
    7b52:	0000      	.short	0x0000
    7b54:	2000036a 	.word	0x2000036a
    7b58:	4000f400 	.word	0x4000f400

00007b5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7b5c:	4808      	ldr	r0, [pc, #32]	; (7b80 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7b5e:	b510      	push	{r4, lr}
    7b60:	7801      	ldrb	r1, [r0, #0]
    7b62:	b159      	cbz	r1, 7b7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7b64:	4807      	ldr	r0, [pc, #28]	; (7b84 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7b66:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7b6a:	b128      	cbz	r0, 7b78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7b6c:	f000 f80c 	bl	7b88 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7b70:	2800      	cmp	r0, #0
    7b72:	d000      	beq.n	7b76 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7b74:	2001      	movs	r0, #1
    7b76:	bd10      	pop	{r4, pc}
    7b78:	2002      	movs	r0, #2
    7b7a:	bd10      	pop	{r4, pc}
    7b7c:	7840      	ldrb	r0, [r0, #1]
    7b7e:	bd10      	pop	{r4, pc}
    7b80:	2000036a 	.word	0x2000036a
    7b84:	4000f000 	.word	0x4000f000
    7b88:	4805      	ldr	r0, [pc, #20]	; (7ba0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7b8a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7b8e:	b111      	cbz	r1, 7b96 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7b90:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7b94:	b108      	cbz	r0, 7b9a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7b96:	2000      	movs	r0, #0
    7b98:	4770      	bx	lr
    7b9a:	2001      	movs	r0, #1
    7b9c:	4770      	bx	lr
    7b9e:	0000      	.short	0x0000
    7ba0:	4000f000 	.word	0x4000f000
    7ba4:	4805      	ldr	r0, [pc, #20]	; (7bbc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7ba6:	b510      	push	{r4, lr}
    7ba8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7bac:	b120      	cbz	r0, 7bb8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7bae:	f7ff ffeb 	bl	7b88 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7bb2:	b108      	cbz	r0, 7bb8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7bb4:	2001      	movs	r0, #1
    7bb6:	bd10      	pop	{r4, pc}
    7bb8:	2000      	movs	r0, #0
    7bba:	bd10      	pop	{r4, pc}
    7bbc:	4000f000 	.word	0x4000f000
    7bc0:	4804      	ldr	r0, [pc, #16]	; (7bd4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7bc2:	2100      	movs	r1, #0
    7bc4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7bc8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7bcc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7bd0:	4770      	bx	lr
    7bd2:	0000      	.short	0x0000
    7bd4:	4000f000 	.word	0x4000f000

00007bd8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bdc:	4604      	mov	r4, r0
    7bde:	461e      	mov	r6, r3
    7be0:	4690      	mov	r8, r2
    7be2:	460f      	mov	r7, r1
    7be4:	2001      	movs	r0, #1
    7be6:	f000 f90f 	bl	7e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7bea:	4d1e      	ldr	r5, [pc, #120]	; (7c64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7bec:	481e      	ldr	r0, [pc, #120]	; (7c68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7bee:	f004 0103 	and.w	r1, r4, #3
    7bf2:	712e      	strb	r6, [r5, #4]
    7bf4:	6800      	ldr	r0, [r0, #0]
    7bf6:	0432      	lsls	r2, r6, #16
    7bf8:	f361 0007 	bfi	r0, r1, #0, #8
    7bfc:	f366 200f 	bfi	r0, r6, #8, #8
    7c00:	0c00      	lsrs	r0, r0, #16
    7c02:	4e1a      	ldr	r6, [pc, #104]	; (7c6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c04:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7c08:	4308      	orrs	r0, r1
    7c0a:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7c0e:	4818      	ldr	r0, [pc, #96]	; (7c70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c10:	6007      	str	r7, [r0, #0]
    7c12:	f008 fe2d 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7c16:	b938      	cbnz	r0, 7c28 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7c18:	4815      	ldr	r0, [pc, #84]	; (7c70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c1a:	3010      	adds	r0, #16
    7c1c:	6801      	ldr	r1, [r0, #0]
    7c1e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7c22:	ea41 0108 	orr.w	r1, r1, r8
    7c26:	6001      	str	r1, [r0, #0]
    7c28:	f000 f8e4 	bl	7df4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7c2c:	b10c      	cbz	r4, 7c32 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7c2e:	2c04      	cmp	r4, #4
    7c30:	d107      	bne.n	7c42 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7c32:	4811      	ldr	r0, [pc, #68]	; (7c78 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7c34:	490d      	ldr	r1, [pc, #52]	; (7c6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c36:	4a0f      	ldr	r2, [pc, #60]	; (7c74 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7c38:	1d09      	adds	r1, r1, #4
    7c3a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7c3e:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7c42:	2001      	movs	r0, #1
    7c44:	7068      	strb	r0, [r5, #1]
    7c46:	70ec      	strb	r4, [r5, #3]
    7c48:	b11c      	cbz	r4, 7c52 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7c4a:	2c01      	cmp	r4, #1
    7c4c:	d001      	beq.n	7c52 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7c4e:	2c02      	cmp	r4, #2
    7c50:	d106      	bne.n	7c60 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7c52:	7028      	strb	r0, [r5, #0]
    7c54:	2100      	movs	r1, #0
    7c56:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7c5a:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7c5e:	6030      	str	r0, [r6, #0]
    7c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c64:	2000036d 	.word	0x2000036d
    7c68:	00007e04 	.word	0x00007e04
    7c6c:	4000f000 	.word	0x4000f000
    7c70:	4000f508 	.word	0x4000f508
    7c74:	4000f100 	.word	0x4000f100
    7c78:	4001f088 	.word	0x4001f088

00007c7c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7c7c:	b570      	push	{r4, r5, r6, lr}
    7c7e:	4a1c      	ldr	r2, [pc, #112]	; (7cf0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7c80:	7853      	ldrb	r3, [r2, #1]
    7c82:	b1a3      	cbz	r3, 7cae <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7c84:	4b1b      	ldr	r3, [pc, #108]	; (7cf4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7c86:	6019      	str	r1, [r3, #0]
    7c88:	1d19      	adds	r1, r3, #4
    7c8a:	6008      	str	r0, [r1, #0]
    7c8c:	2501      	movs	r5, #1
    7c8e:	7095      	strb	r5, [r2, #2]
    7c90:	4610      	mov	r0, r2
    7c92:	78d6      	ldrb	r6, [r2, #3]
    7c94:	4b18      	ldr	r3, [pc, #96]	; (7cf8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7c96:	7800      	ldrb	r0, [r0, #0]
    7c98:	4c18      	ldr	r4, [pc, #96]	; (7cfc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7c9a:	2100      	movs	r1, #0
    7c9c:	b156      	cbz	r6, 7cb4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7c9e:	2e04      	cmp	r6, #4
    7ca0:	d01b      	beq.n	7cda <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7ca2:	b308      	cbz	r0, 7ce8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7ca4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ca8:	0668      	lsls	r0, r5, #25
    7caa:	6018      	str	r0, [r3, #0]
    7cac:	bd70      	pop	{r4, r5, r6, pc}
    7cae:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    7cb2:	e01a      	b.n	7cea <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7cb4:	b178      	cbz	r0, 7cd6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7cb6:	4620      	mov	r0, r4
    7cb8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7cbc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7cc0:	601e      	str	r6, [r3, #0]
    7cc2:	1271      	asrs	r1, r6, #9
    7cc4:	f008 fc5c 	bl	10580 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7cc8:	2800      	cmp	r0, #0
    7cca:	d0ef      	beq.n	7cac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7ccc:	6065      	str	r5, [r4, #4]
    7cce:	480a      	ldr	r0, [pc, #40]	; (7cf8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7cd0:	1d00      	adds	r0, r0, #4
    7cd2:	6006      	str	r6, [r0, #0]
    7cd4:	bd70      	pop	{r4, r5, r6, pc}
    7cd6:	21d5      	movs	r1, #213	; 0xd5
    7cd8:	e007      	b.n	7cea <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7cda:	7015      	strb	r5, [r2, #0]
    7cdc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ce0:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7ce4:	6025      	str	r5, [r4, #0]
    7ce6:	bd70      	pop	{r4, r5, r6, pc}
    7ce8:	21e8      	movs	r1, #232	; 0xe8
    7cea:	203c      	movs	r0, #60	; 0x3c
    7cec:	f7f8 fe96 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cf0:	2000036d 	.word	0x2000036d
    7cf4:	4000f50c 	.word	0x4000f50c
    7cf8:	4001f504 	.word	0x4001f504
    7cfc:	4000f000 	.word	0x4000f000

00007d00 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7d00:	b570      	push	{r4, r5, r6, lr}
    7d02:	4d05      	ldr	r5, [pc, #20]	; (7d18 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7d04:	2400      	movs	r4, #0
    7d06:	7828      	ldrb	r0, [r5, #0]
    7d08:	b110      	cbz	r0, 7d10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7d0a:	f000 f873 	bl	7df4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7d0e:	702c      	strb	r4, [r5, #0]
    7d10:	706c      	strb	r4, [r5, #1]
    7d12:	70ac      	strb	r4, [r5, #2]
    7d14:	bd70      	pop	{r4, r5, r6, pc}
    7d16:	0000      	.short	0x0000
    7d18:	2000036d 	.word	0x2000036d

00007d1c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7d1c:	4802      	ldr	r0, [pc, #8]	; (7d28 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7d1e:	2100      	movs	r1, #0
    7d20:	7001      	strb	r1, [r0, #0]
    7d22:	7041      	strb	r1, [r0, #1]
    7d24:	7081      	strb	r1, [r0, #2]
    7d26:	4770      	bx	lr
    7d28:	2000036d 	.word	0x2000036d

00007d2c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7d2c:	480b      	ldr	r0, [pc, #44]	; (7d5c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7d2e:	b510      	push	{r4, lr}
    7d30:	7800      	ldrb	r0, [r0, #0]
    7d32:	b158      	cbz	r0, 7d4c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7d34:	f44f 7182 	mov.w	r1, #260	; 0x104
    7d38:	4809      	ldr	r0, [pc, #36]	; (7d60 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7d3a:	f008 fc21 	bl	10580 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d3e:	b140      	cbz	r0, 7d52 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7d40:	4808      	ldr	r0, [pc, #32]	; (7d64 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7d42:	6800      	ldr	r0, [r0, #0]
    7d44:	2800      	cmp	r0, #0
    7d46:	d000      	beq.n	7d4a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7d48:	2001      	movs	r0, #1
    7d4a:	bd10      	pop	{r4, pc}
    7d4c:	f240 215e 	movw	r1, #606	; 0x25e
    7d50:	e001      	b.n	7d56 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7d52:	f240 215f 	movw	r1, #607	; 0x25f
    7d56:	203c      	movs	r0, #60	; 0x3c
    7d58:	f7f8 fe60 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d5c:	2000036d 	.word	0x2000036d
    7d60:	4000f000 	.word	0x4000f000
    7d64:	4000f400 	.word	0x4000f400

00007d68 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7d68:	4801      	ldr	r0, [pc, #4]	; (7d70 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7d6a:	2101      	movs	r1, #1
    7d6c:	6081      	str	r1, [r0, #8]
    7d6e:	4770      	bx	lr
    7d70:	4000f000 	.word	0x4000f000

00007d74 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d78:	481b      	ldr	r0, [pc, #108]	; (7de8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7d7a:	7800      	ldrb	r0, [r0, #0]
    7d7c:	b1d8      	cbz	r0, 7db6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7d7e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7dec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7d82:	f44f 7682 	mov.w	r6, #260	; 0x104
    7d86:	4631      	mov	r1, r6
    7d88:	4640      	mov	r0, r8
    7d8a:	f008 fbf9 	bl	10580 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d8e:	2800      	cmp	r0, #0
    7d90:	d128      	bne.n	7de4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7d92:	2002      	movs	r0, #2
    7d94:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7d98:	4c15      	ldr	r4, [pc, #84]	; (7df0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7d9a:	6820      	ldr	r0, [r4, #0]
    7d9c:	43c0      	mvns	r0, r0
    7d9e:	f340 1500 	sbfx	r5, r0, #4, #1
    7da2:	6820      	ldr	r0, [r4, #0]
    7da4:	f040 0010 	orr.w	r0, r0, #16
    7da8:	6020      	str	r0, [r4, #0]
    7daa:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7dae:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7db2:	1c6d      	adds	r5, r5, #1
    7db4:	e008      	b.n	7dc8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7db6:	f240 216a 	movw	r1, #618	; 0x26a
    7dba:	203c      	movs	r0, #60	; 0x3c
    7dbc:	f7f8 fe2e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dc0:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7dc4:	f008 fd94 	bl	108f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7dc8:	4631      	mov	r1, r6
    7dca:	4640      	mov	r0, r8
    7dcc:	f008 fbd8 	bl	10580 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7dd0:	2800      	cmp	r0, #0
    7dd2:	d0f5      	beq.n	7dc0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7dd4:	b91d      	cbnz	r5, 7dde <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7dd6:	6820      	ldr	r0, [r4, #0]
    7dd8:	f020 0010 	bic.w	r0, r0, #16
    7ddc:	6020      	str	r0, [r4, #0]
    7dde:	2002      	movs	r0, #2
    7de0:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7de8:	2000036d 	.word	0x2000036d
    7dec:	4000f000 	.word	0x4000f000
    7df0:	e000ed10 	.word	0xe000ed10
    7df4:	4902      	ldr	r1, [pc, #8]	; (7e00 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7df6:	4801      	ldr	r0, [pc, #4]	; (7dfc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7df8:	6008      	str	r0, [r1, #0]
    7dfa:	4770      	bx	lr
    7dfc:	02020000 	.word	0x02020000
    7e00:	4001f508 	.word	0x4001f508
    7e04:	00010000 	.word	0x00010000

00007e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7e08:	b510      	push	{r4, lr}
    7e0a:	4604      	mov	r4, r0
    7e0c:	f000 f820 	bl	7e50 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7e10:	2c00      	cmp	r4, #0
    7e12:	d00e      	beq.n	7e32 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7e14:	4a0b      	ldr	r2, [pc, #44]	; (7e44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e16:	480b      	ldr	r0, [pc, #44]	; (7e44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e18:	490b      	ldr	r1, [pc, #44]	; (7e48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7e1a:	3214      	adds	r2, #20
    7e1c:	2c01      	cmp	r4, #1
    7e1e:	d005      	beq.n	7e2c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7e20:	2c02      	cmp	r4, #2
    7e22:	d007      	beq.n	7e34 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7e24:	2182      	movs	r1, #130	; 0x82
    7e26:	203d      	movs	r0, #61	; 0x3d
    7e28:	f7f8 fdf8 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e2c:	2302      	movs	r3, #2
    7e2e:	6003      	str	r3, [r0, #0]
    7e30:	6011      	str	r1, [r2, #0]
    7e32:	bd10      	pop	{r4, pc}
    7e34:	2303      	movs	r3, #3
    7e36:	6003      	str	r3, [r0, #0]
    7e38:	6011      	str	r1, [r2, #0]
    7e3a:	4904      	ldr	r1, [pc, #16]	; (7e4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7e3c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7e40:	6008      	str	r0, [r1, #0]
    7e42:	bd10      	pop	{r4, pc}
    7e44:	4000f500 	.word	0x4000f500
    7e48:	200016bb 	.word	0x200016bb
    7e4c:	4001f504 	.word	0x4001f504
    7e50:	4805      	ldr	r0, [pc, #20]	; (7e68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7e52:	b510      	push	{r4, lr}
    7e54:	2100      	movs	r1, #0
    7e56:	6001      	str	r1, [r0, #0]
    7e58:	6001      	str	r1, [r0, #0]
    7e5a:	f7ff ff51 	bl	7d00 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7e5e:	4903      	ldr	r1, [pc, #12]	; (7e6c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7e60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7e64:	6008      	str	r0, [r1, #0]
    7e66:	bd10      	pop	{r4, pc}
    7e68:	4000f500 	.word	0x4000f500
    7e6c:	4001f508 	.word	0x4001f508

00007e70 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7e70:	4805      	ldr	r0, [pc, #20]	; (7e88 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7e72:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7e76:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7e7a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7e7e:	2100      	movs	r1, #0
    7e80:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7e84:	4770      	bx	lr
    7e86:	0000      	.short	0x0000
    7e88:	40001000 	.word	0x40001000

00007e8c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7e8c:	4904      	ldr	r1, [pc, #16]	; (7ea0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7e8e:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7e92:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7e96:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7e9a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7e9e:	4770      	bx	lr
    7ea0:	40001000 	.word	0x40001000

00007ea4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7ea4:	4902      	ldr	r1, [pc, #8]	; (7eb0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7ea6:	5c08      	ldrb	r0, [r1, r0]
    7ea8:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7eac:	4770      	bx	lr
    7eae:	0000      	.short	0x0000
    7eb0:	00008ac2 	.word	0x00008ac2

00007eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eb6:	4c24      	ldr	r4, [pc, #144]	; (7f48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7eb8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7ebc:	f010 0f10 	tst.w	r0, #16
    7ec0:	d001      	beq.n	7ec6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7ec2:	2701      	movs	r7, #1
    7ec4:	e000      	b.n	7ec8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7ec6:	2700      	movs	r7, #0
    7ec8:	2010      	movs	r0, #16
    7eca:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7ece:	2002      	movs	r0, #2
    7ed0:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7ed4:	481d      	ldr	r0, [pc, #116]	; (7f4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7ed6:	2500      	movs	r5, #0
    7ed8:	491d      	ldr	r1, [pc, #116]	; (7f50 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7eda:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    7ede:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7ee2:	6008      	str	r0, [r1, #0]
    7ee4:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7ee8:	f44f 7688 	mov.w	r6, #272	; 0x110
    7eec:	f010 0fff 	tst.w	r0, #255	; 0xff
    7ef0:	d019      	beq.n	7f26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7ef2:	20ff      	movs	r0, #255	; 0xff
    7ef4:	f88d 0000 	strb.w	r0, [sp]
    7ef8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7efc:	2001      	movs	r0, #1
    7efe:	6120      	str	r0, [r4, #16]
    7f00:	e005      	b.n	7f0e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7f02:	bf00      	nop
    7f04:	f89d 0000 	ldrb.w	r0, [sp]
    7f08:	1e40      	subs	r0, r0, #1
    7f0a:	f88d 0000 	strb.w	r0, [sp]
    7f0e:	f89d 0000 	ldrb.w	r0, [sp]
    7f12:	b128      	cbz	r0, 7f20 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7f14:	4631      	mov	r1, r6
    7f16:	4620      	mov	r0, r4
    7f18:	f008 fb61 	bl	105de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7f1c:	2800      	cmp	r0, #0
    7f1e:	d0f1      	beq.n	7f04 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7f20:	f89d 0000 	ldrb.w	r0, [sp]
    7f24:	b158      	cbz	r0, 7f3e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7f26:	f000 fbe1 	bl	86ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    7f2a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7f2e:	f000 fd49 	bl	89c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7f32:	2f00      	cmp	r7, #0
    7f34:	d002      	beq.n	7f3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7f36:	2010      	movs	r0, #16
    7f38:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f3e:	f640 0194 	movw	r1, #2196	; 0x894
    7f42:	203e      	movs	r0, #62	; 0x3e
    7f44:	f7f8 fd6a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f48:	40001000 	.word	0x40001000
    7f4c:	2000124c 	.word	0x2000124c
    7f50:	4001f508 	.word	0x4001f508

00007f54 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f58:	4d18      	ldr	r5, [pc, #96]	; (7fbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7f5a:	4607      	mov	r7, r0
    7f5c:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    7f60:	07c2      	lsls	r2, r0, #31
    7f62:	d00f      	beq.n	7f84 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7f64:	4c16      	ldr	r4, [pc, #88]	; (7fc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7f66:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7f6a:	f042 0201 	orr.w	r2, r2, #1
    7f6e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7f72:	f040 0002 	orr.w	r0, r0, #2
    7f76:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7f7a:	2601      	movs	r6, #1
    7f7c:	b13f      	cbz	r7, 7f8e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7f7e:	2f01      	cmp	r7, #1
    7f80:	d00b      	beq.n	7f9a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7f82:	e010      	b.n	7fa6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7f84:	f240 716f 	movw	r1, #1903	; 0x76f
    7f88:	203e      	movs	r0, #62	; 0x3e
    7f8a:	f7f8 fd47 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f8e:	4608      	mov	r0, r1
    7f90:	f000 fd72 	bl	8a78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7f94:	726e      	strb	r6, [r5, #9]
    7f96:	6026      	str	r6, [r4, #0]
    7f98:	e005      	b.n	7fa6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7f9a:	4608      	mov	r0, r1
    7f9c:	f000 fd52 	bl	8a44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7fa0:	2002      	movs	r0, #2
    7fa2:	7268      	strb	r0, [r5, #9]
    7fa4:	6066      	str	r6, [r4, #4]
    7fa6:	4807      	ldr	r0, [pc, #28]	; (7fc4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7fa8:	64c6      	str	r6, [r0, #76]	; 0x4c
    7faa:	4806      	ldr	r0, [pc, #24]	; (7fc4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7fac:	300c      	adds	r0, #12
    7fae:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7fb2:	4638      	mov	r0, r7
    7fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7fb8:	f000 bcd6 	b.w	8968 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7fbc:	2000124c 	.word	0x2000124c
    7fc0:	40001000 	.word	0x40001000
    7fc4:	40008000 	.word	0x40008000

00007fc8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7fcc:	4c2c      	ldr	r4, [pc, #176]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7fce:	0006      	movs	r6, r0
    7fd0:	4d2c      	ldr	r5, [pc, #176]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7fd2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    7fd6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    7fda:	f040 0002 	orr.w	r0, r0, #2
    7fde:	4689      	mov	r9, r1
    7fe0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    7fe4:	f04f 0700 	mov.w	r7, #0
    7fe8:	d002      	beq.n	7ff0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7fea:	2e01      	cmp	r6, #1
    7fec:	d020      	beq.n	8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    7fee:	e036      	b.n	805e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e>
    7ff0:	4608      	mov	r0, r1
    7ff2:	f000 fd41 	bl	8a78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7ff6:	2001      	movs	r0, #1
    7ff8:	7260      	strb	r0, [r4, #9]
    7ffa:	79e0      	ldrb	r0, [r4, #7]
    7ffc:	2801      	cmp	r0, #1
    7ffe:	d105      	bne.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    8000:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8004:	f040 0008 	orr.w	r0, r0, #8
    8008:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    800c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    800e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    8012:	6260      	str	r0, [r4, #36]	; 0x24
    8014:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    8018:	f8c8 0000 	str.w	r0, [r8]
    801c:	491b      	ldr	r1, [pc, #108]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    801e:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    8022:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8026:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    802a:	fbb0 f7f1 	udiv	r7, r0, r1
    802e:	e016      	b.n	805e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e>
    8030:	4608      	mov	r0, r1
    8032:	f000 fd07 	bl	8a44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8036:	2002      	movs	r0, #2
    8038:	7260      	strb	r0, [r4, #9]
    803a:	79e0      	ldrb	r0, [r4, #7]
    803c:	2801      	cmp	r0, #1
    803e:	d105      	bne.n	804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>
    8040:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8044:	f040 0004 	orr.w	r0, r0, #4
    8048:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    804c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    804e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    8052:	6260      	str	r0, [r4, #36]	; 0x24
    8054:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    8058:	f8c8 0000 	str.w	r0, [r8]
    805c:	2729      	movs	r7, #41	; 0x29
    805e:	f000 fbb1 	bl	87c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    8062:	f008 fb04 	bl	1066e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    8066:	b120      	cbz	r0, 8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    8068:	f7ff ff24 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    806c:	2000      	movs	r0, #0
    806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8072:	2100      	movs	r1, #0
    8074:	4630      	mov	r0, r6
    8076:	f000 fc77 	bl	8968 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    807a:	4638      	mov	r0, r7
    807c:	e7f7      	b.n	806e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e>
    807e:	0000      	.short	0x0000
    8080:	2000124c 	.word	0x2000124c
    8084:	40001000 	.word	0x40001000
    8088:	4001f504 	.word	0x4001f504
    808c:	00008abc 	.word	0x00008abc

00008090 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    8090:	b510      	push	{r4, lr}
    8092:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    8094:	4901      	ldr	r1, [pc, #4]	; (809c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    8096:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    809a:	bd10      	pop	{r4, pc}
    809c:	2000123c 	.word	0x2000123c

000080a0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    80a0:	b570      	push	{r4, r5, r6, lr}
    80a2:	4c0f      	ldr	r4, [pc, #60]	; (80e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    80a4:	4603      	mov	r3, r0
    80a6:	2002      	movs	r0, #2
    80a8:	7320      	strb	r0, [r4, #12]
    80aa:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    80ae:	2096      	movs	r0, #150	; 0x96
    80b0:	f894 1020 	ldrb.w	r1, [r4, #32]
    80b4:	7d22      	ldrb	r2, [r4, #20]
    80b6:	2d01      	cmp	r5, #1
    80b8:	d00e      	beq.n	80d8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    80ba:	f000 fd3b 	bl	8b34 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    80be:	6120      	str	r0, [r4, #16]
    80c0:	4808      	ldr	r0, [pc, #32]	; (80e4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    80c2:	2100      	movs	r1, #0
    80c4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    80c8:	6921      	ldr	r1, [r4, #16]
    80ca:	69e0      	ldr	r0, [r4, #28]
    80cc:	4408      	add	r0, r1
    80ce:	4905      	ldr	r1, [pc, #20]	; (80e4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    80d0:	1d09      	adds	r1, r1, #4
    80d2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    80d6:	bd70      	pop	{r4, r5, r6, pc}
    80d8:	f000 fd4a 	bl	8b70 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    80dc:	e7ef      	b.n	80be <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    80de:	0000      	.short	0x0000
    80e0:	2000124c 	.word	0x2000124c
    80e4:	40008000 	.word	0x40008000

000080e8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    80e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80ec:	2234      	movs	r2, #52	; 0x34
    80ee:	2100      	movs	r1, #0
    80f0:	4813      	ldr	r0, [pc, #76]	; (8140 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    80f2:	f008 fce3 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80f6:	f000 fc65 	bl	89c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    80fa:	f008 fb8e 	bl	1081a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    80fe:	4d11      	ldr	r5, [pc, #68]	; (8144 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8100:	4e10      	ldr	r6, [pc, #64]	; (8144 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8102:	2400      	movs	r4, #0
    8104:	4f0f      	ldr	r7, [pc, #60]	; (8144 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8106:	3508      	adds	r5, #8
    8108:	3610      	adds	r6, #16
    810a:	b928      	cbnz	r0, 8118 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    810c:	f008 fb9c 	bl	10848 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8110:	b910      	cbnz	r0, 8118 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8112:	f008 fba3 	bl	1085c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8116:	b108      	cbz	r0, 811c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    8118:	2224      	movs	r2, #36	; 0x24
    811a:	e006      	b.n	812a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    811c:	f008 fbde 	bl	108dc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8120:	b910      	cbnz	r0, 8128 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    8122:	f008 fbd1 	bl	108c8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8126:	b140      	cbz	r0, 813a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    8128:	2240      	movs	r2, #64	; 0x40
    812a:	21ff      	movs	r1, #255	; 0xff
    812c:	4638      	mov	r0, r7
    812e:	f008 fcc5 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8132:	602c      	str	r4, [r5, #0]
    8134:	6034      	str	r4, [r6, #0]
    8136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    813a:	2238      	movs	r2, #56	; 0x38
    813c:	e7f5      	b.n	812a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    813e:	0000      	.short	0x0000
    8140:	2000124c 	.word	0x2000124c
    8144:	40000e00 	.word	0x40000e00

00008148 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    8148:	4801      	ldr	r0, [pc, #4]	; (8150 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    814a:	69c0      	ldr	r0, [r0, #28]
    814c:	4770      	bx	lr
    814e:	0000      	.short	0x0000
    8150:	2000124c 	.word	0x2000124c

00008154 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    8154:	4801      	ldr	r0, [pc, #4]	; (815c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    8156:	f890 0020 	ldrb.w	r0, [r0, #32]
    815a:	4770      	bx	lr
    815c:	2000124c 	.word	0x2000124c

00008160 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    8160:	b510      	push	{r4, lr}
    8162:	f000 fbe3 	bl	892c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    8166:	f7ff fea5 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    816a:	f004 fb8f 	bl	c88c <mpsl_fem_disable>
    816e:	b130      	cbz	r0, 817e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8170:	1c40      	adds	r0, r0, #1
    8172:	d004      	beq.n	817e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8174:	f240 5165 	movw	r1, #1381	; 0x565
    8178:	203e      	movs	r0, #62	; 0x3e
    817a:	f7f8 fc4f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    817e:	480f      	ldr	r0, [pc, #60]	; (81bc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    8180:	4a0f      	ldr	r2, [pc, #60]	; (81c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    8182:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8184:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    8188:	6011      	str	r1, [r2, #0]
    818a:	2400      	movs	r4, #0
    818c:	6244      	str	r4, [r0, #36]	; 0x24
    818e:	7304      	strb	r4, [r0, #12]
    8190:	61c4      	str	r4, [r0, #28]
    8192:	6184      	str	r4, [r0, #24]
    8194:	f000 fbca 	bl	892c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    8198:	480a      	ldr	r0, [pc, #40]	; (81c4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    819a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    819e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    81a2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    81a6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    81aa:	2001      	movs	r0, #1
    81ac:	f008 fa06 	bl	105bc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    81b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81b4:	2001      	movs	r0, #1
    81b6:	f008 b9f4 	b.w	105a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    81ba:	0000      	.short	0x0000
    81bc:	2000124c 	.word	0x2000124c
    81c0:	4001f508 	.word	0x4001f508
    81c4:	40008000 	.word	0x40008000

000081c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    81c8:	b570      	push	{r4, r5, r6, lr}
    81ca:	2001      	movs	r0, #1
    81cc:	f008 f9f6 	bl	105bc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    81d0:	4c37      	ldr	r4, [pc, #220]	; (82b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    81d2:	2000      	movs	r0, #0
    81d4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    81d8:	2001      	movs	r0, #1
    81da:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    81de:	f008 fb53 	bl	10888 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    81e2:	4d34      	ldr	r5, [pc, #208]	; (82b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81e4:	b118      	cbz	r0, 81ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    81e6:	6828      	ldr	r0, [r5, #0]
    81e8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    81ec:	6028      	str	r0, [r5, #0]
    81ee:	f008 fb3f 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    81f2:	b128      	cbz	r0, 8200 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    81f4:	6828      	ldr	r0, [r5, #0]
    81f6:	4930      	ldr	r1, [pc, #192]	; (82b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    81f8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    81fc:	4308      	orrs	r0, r1
    81fe:	6028      	str	r0, [r5, #0]
    8200:	f008 fb52 	bl	108a8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8204:	b138      	cbz	r0, 8216 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    8206:	482b      	ldr	r0, [pc, #172]	; (82b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8208:	1d00      	adds	r0, r0, #4
    820a:	6801      	ldr	r1, [r0, #0]
    820c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8210:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8214:	6001      	str	r1, [r0, #0]
    8216:	4927      	ldr	r1, [pc, #156]	; (82b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8218:	4828      	ldr	r0, [pc, #160]	; (82bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    821a:	313c      	adds	r1, #60	; 0x3c
    821c:	6008      	str	r0, [r1, #0]
    821e:	f004 fb6f 	bl	c900 <mpsl_fem_device_config_254_apply_get>
    8222:	b140      	cbz	r0, 8236 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8224:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8228:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    822c:	1c41      	adds	r1, r0, #1
    822e:	d002      	beq.n	8236 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8230:	4920      	ldr	r1, [pc, #128]	; (82b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8232:	3110      	adds	r1, #16
    8234:	6008      	str	r0, [r1, #0]
    8236:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    823a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    823c:	1c41      	adds	r1, r0, #1
    823e:	d004      	beq.n	824a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    8240:	491f      	ldr	r1, [pc, #124]	; (82c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    8242:	680a      	ldr	r2, [r1, #0]
    8244:	f360 4217 	bfi	r2, r0, #16, #8
    8248:	600a      	str	r2, [r1, #0]
    824a:	f240 1103 	movw	r1, #259	; 0x103
    824e:	f240 605b 	movw	r0, #1627	; 0x65b
    8252:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8256:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    825a:	2001      	movs	r0, #1
    825c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8260:	f000 f842 	bl	82e8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8264:	f240 2001 	movw	r0, #513	; 0x201
    8268:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    826c:	2002      	movs	r0, #2
    826e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8272:	4914      	ldr	r1, [pc, #80]	; (82c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    8274:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8278:	6008      	str	r0, [r1, #0]
    827a:	4913      	ldr	r1, [pc, #76]	; (82c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    827c:	2000      	movs	r0, #0
    827e:	8608      	strh	r0, [r1, #48]	; 0x30
    8280:	3110      	adds	r1, #16
    8282:	61c8      	str	r0, [r1, #28]
    8284:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    8288:	2001      	movs	r0, #1
    828a:	f008 f98a 	bl	105a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    828e:	2010      	movs	r0, #16
    8290:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8294:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8298:	2002      	movs	r0, #2
    829a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    829e:	480b      	ldr	r0, [pc, #44]	; (82cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    82a0:	6800      	ldr	r0, [r0, #0]
    82a2:	2800      	cmp	r0, #0
    82a4:	d002      	beq.n	82ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    82a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82aa:	4700      	bx	r0
    82ac:	bd70      	pop	{r4, r5, r6, pc}
    82ae:	0000      	.short	0x0000
    82b0:	40001000 	.word	0x40001000
    82b4:	4000173c 	.word	0x4000173c
    82b8:	80000096 	.word	0x80000096
    82bc:	8900002c 	.word	0x8900002c
    82c0:	4000158c 	.word	0x4000158c
    82c4:	4001f504 	.word	0x4001f504
    82c8:	2000123c 	.word	0x2000123c
    82cc:	200002cc 	.word	0x200002cc

000082d0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    82d0:	4901      	ldr	r1, [pc, #4]	; (82d8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    82d2:	7548      	strb	r0, [r1, #21]
    82d4:	4770      	bx	lr
    82d6:	0000      	.short	0x0000
    82d8:	2000124c 	.word	0x2000124c

000082dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    82dc:	4901      	ldr	r1, [pc, #4]	; (82e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    82de:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    82e2:	4770      	bx	lr
    82e4:	00008b10 	.word	0x00008b10

000082e8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    82e8:	4908      	ldr	r1, [pc, #32]	; (830c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    82ea:	b510      	push	{r4, lr}
    82ec:	7508      	strb	r0, [r1, #20]
    82ee:	4908      	ldr	r1, [pc, #32]	; (8310 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    82f0:	2801      	cmp	r0, #1
    82f2:	d006      	beq.n	8302 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    82f4:	2802      	cmp	r0, #2
    82f6:	d006      	beq.n	8306 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    82f8:	f640 516c 	movw	r1, #3436	; 0xd6c
    82fc:	203e      	movs	r0, #62	; 0x3e
    82fe:	f7f8 fb8d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8302:	2003      	movs	r0, #3
    8304:	e000      	b.n	8308 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    8306:	2004      	movs	r0, #4
    8308:	6008      	str	r0, [r1, #0]
    830a:	bd10      	pop	{r4, pc}
    830c:	2000124c 	.word	0x2000124c
    8310:	40001510 	.word	0x40001510

00008314 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8314:	4905      	ldr	r1, [pc, #20]	; (832c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8316:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    831a:	4805      	ldr	r0, [pc, #20]	; (8330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    831c:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    8320:	f041 0101 	orr.w	r1, r1, #1
    8324:	7001      	strb	r1, [r0, #0]
    8326:	f000 ba13 	b.w	8750 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    832a:	0000      	.short	0x0000
    832c:	40001000 	.word	0x40001000
    8330:	2000124c 	.word	0x2000124c

00008334 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8334:	4901      	ldr	r1, [pc, #4]	; (833c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8336:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    833a:	4770      	bx	lr
    833c:	00008b1c 	.word	0x00008b1c

00008340 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8344:	4e30      	ldr	r6, [pc, #192]	; (8408 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8346:	4c31      	ldr	r4, [pc, #196]	; (840c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8348:	4688      	mov	r8, r1
    834a:	0007      	movs	r7, r0
    834c:	4615      	mov	r5, r2
    834e:	f04f 0901 	mov.w	r9, #1
    8352:	d006      	beq.n	8362 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8354:	2f01      	cmp	r7, #1
    8356:	d012      	beq.n	837e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8358:	f640 0117 	movw	r1, #2071	; 0x817
    835c:	203e      	movs	r0, #62	; 0x3e
    835e:	f7f8 fb5d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8362:	4610      	mov	r0, r2
    8364:	f000 fb88 	bl	8a78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    8368:	4829      	ldr	r0, [pc, #164]	; (8410 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    836a:	f884 9009 	strb.w	r9, [r4, #9]
    836e:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    8372:	4640      	mov	r0, r8
    8374:	f000 fb2e 	bl	89d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    8378:	4605      	mov	r5, r0
    837a:	4630      	mov	r0, r6
    837c:	e00c      	b.n	8398 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    837e:	4610      	mov	r0, r2
    8380:	f000 fb60 	bl	8a44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8384:	2002      	movs	r0, #2
    8386:	7260      	strb	r0, [r4, #9]
    8388:	f649 71ba 	movw	r1, #40890	; 0x9fba
    838c:	4640      	mov	r0, r8
    838e:	f000 fb21 	bl	89d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    8392:	4605      	mov	r5, r0
    8394:	481c      	ldr	r0, [pc, #112]	; (8408 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8396:	1d00      	adds	r0, r0, #4
    8398:	f000 fada 	bl	8950 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    839c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8414 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    83a0:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    83a4:	f8df a074 	ldr.w	sl, [pc, #116]	; 841c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    83a8:	481b      	ldr	r0, [pc, #108]	; (8418 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    83aa:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    83ae:	2010      	movs	r0, #16
    83b0:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    83b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    83b6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    83ba:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    83be:	6260      	str	r0, [r4, #36]	; 0x24
    83c0:	4817      	ldr	r0, [pc, #92]	; (8420 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    83c2:	6006      	str	r6, [r0, #0]
    83c4:	f000 f9fe 	bl	87c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    83c8:	4641      	mov	r1, r8
    83ca:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    83ce:	4811      	ldr	r0, [pc, #68]	; (8414 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    83d0:	300c      	adds	r0, #12
    83d2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    83d6:	42a8      	cmp	r0, r5
    83d8:	d310      	bcc.n	83fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    83da:	2000      	movs	r0, #0
    83dc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    83e0:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    83e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    83e6:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    83ea:	6260      	str	r0, [r4, #36]	; 0x24
    83ec:	480c      	ldr	r0, [pc, #48]	; (8420 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    83ee:	1d00      	adds	r0, r0, #4
    83f0:	6006      	str	r6, [r0, #0]
    83f2:	f7ff fd5f 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    83f6:	2000      	movs	r0, #0
    83f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83fc:	4629      	mov	r1, r5
    83fe:	4638      	mov	r0, r7
    8400:	f000 fab2 	bl	8968 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    8404:	2001      	movs	r0, #1
    8406:	e7f7      	b.n	83f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    8408:	40001000 	.word	0x40001000
    840c:	2000124c 	.word	0x2000124c
    8410:	00008abc 	.word	0x00008abc
    8414:	40008000 	.word	0x40008000
    8418:	40008140 	.word	0x40008140
    841c:	4001f098 	.word	0x4001f098
    8420:	4001f504 	.word	0x4001f504

00008424 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8424:	4b0d      	ldr	r3, [pc, #52]	; (845c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8426:	b510      	push	{r4, lr}
    8428:	71d8      	strb	r0, [r3, #7]
    842a:	729a      	strb	r2, [r3, #10]
    842c:	b151      	cbz	r1, 8444 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    842e:	2002      	movs	r0, #2
    8430:	7218      	strb	r0, [r3, #8]
    8432:	2801      	cmp	r0, #1
    8434:	d008      	beq.n	8448 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8436:	2802      	cmp	r0, #2
    8438:	d00f      	beq.n	845a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    843a:	f640 2144 	movw	r1, #2628	; 0xa44
    843e:	203e      	movs	r0, #62	; 0x3e
    8440:	f7f8 faec 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8444:	2001      	movs	r0, #1
    8446:	e7f3      	b.n	8430 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8448:	7a58      	ldrb	r0, [r3, #9]
    844a:	2802      	cmp	r0, #2
    844c:	d105      	bne.n	845a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    844e:	f000 f943 	bl	86d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    8452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8456:	f000 ba51 	b.w	88fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    845a:	bd10      	pop	{r4, pc}
    845c:	2000124c 	.word	0x2000124c

00008460 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8460:	4902      	ldr	r1, [pc, #8]	; (846c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8462:	2000      	movs	r0, #0
    8464:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8468:	4770      	bx	lr
    846a:	0000      	.short	0x0000
    846c:	40008000 	.word	0x40008000

00008470 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8470:	4904      	ldr	r1, [pc, #16]	; (8484 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    8472:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8476:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    847a:	4249      	negs	r1, r1
    847c:	7001      	strb	r1, [r0, #0]
    847e:	2001      	movs	r0, #1
    8480:	4770      	bx	lr
    8482:	0000      	.short	0x0000
    8484:	40001000 	.word	0x40001000

00008488 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8488:	4903      	ldr	r1, [pc, #12]	; (8498 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    848a:	0e02      	lsrs	r2, r0, #24
    848c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8490:	0200      	lsls	r0, r0, #8
    8492:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8496:	4770      	bx	lr
    8498:	40001000 	.word	0x40001000

0000849c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    849c:	4901      	ldr	r1, [pc, #4]	; (84a4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    849e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    84a2:	4770      	bx	lr
    84a4:	40001000 	.word	0x40001000

000084a8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    84a8:	b510      	push	{r4, lr}
    84aa:	2200      	movs	r2, #0
    84ac:	2901      	cmp	r1, #1
    84ae:	d006      	beq.n	84be <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    84b0:	2902      	cmp	r1, #2
    84b2:	d002      	beq.n	84ba <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    84b4:	f240 21d2 	movw	r1, #722	; 0x2d2
    84b8:	e014      	b.n	84e4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    84ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    84be:	490b      	ldr	r1, [pc, #44]	; (84ec <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    84c0:	430a      	orrs	r2, r1
    84c2:	490b      	ldr	r1, [pc, #44]	; (84f0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    84c4:	600a      	str	r2, [r1, #0]
    84c6:	490b      	ldr	r1, [pc, #44]	; (84f4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    84c8:	4308      	orrs	r0, r1
    84ca:	4909      	ldr	r1, [pc, #36]	; (84f0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    84cc:	1d09      	adds	r1, r1, #4
    84ce:	6008      	str	r0, [r1, #0]
    84d0:	4809      	ldr	r0, [pc, #36]	; (84f8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    84d2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    84d6:	b2c0      	uxtb	r0, r0
    84d8:	2803      	cmp	r0, #3
    84da:	d001      	beq.n	84e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    84dc:	280b      	cmp	r0, #11
    84de:	d104      	bne.n	84ea <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    84e0:	f240 21ea 	movw	r1, #746	; 0x2ea
    84e4:	203e      	movs	r0, #62	; 0x3e
    84e6:	f7f8 fa99 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84ea:	bd10      	pop	{r4, pc}
    84ec:	00100108 	.word	0x00100108
    84f0:	40001514 	.word	0x40001514
    84f4:	02030000 	.word	0x02030000
    84f8:	40001000 	.word	0x40001000

000084fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    84fc:	4901      	ldr	r1, [pc, #4]	; (8504 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    84fe:	7588      	strb	r0, [r1, #22]
    8500:	4770      	bx	lr
    8502:	0000      	.short	0x0000
    8504:	2000124c 	.word	0x2000124c

00008508 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    850c:	4851      	ldr	r0, [pc, #324]	; (8654 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    850e:	f04f 0a01 	mov.w	sl, #1
    8512:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8516:	484f      	ldr	r0, [pc, #316]	; (8654 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8518:	300c      	adds	r0, #12
    851a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    851e:	f008 f8a4 	bl	1066a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8522:	4c4d      	ldr	r4, [pc, #308]	; (8658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8524:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    8528:	f000 f8e0 	bl	86ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    852c:	494b      	ldr	r1, [pc, #300]	; (865c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    852e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8530:	6008      	str	r0, [r1, #0]
    8532:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8660 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    8536:	2000      	movs	r0, #0
    8538:	6260      	str	r0, [r4, #36]	; 0x24
    853a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    853e:	f240 131d 	movw	r3, #285	; 0x11d
    8542:	439a      	bics	r2, r3
    8544:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8548:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    854c:	f000 f94e 	bl	87ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    8550:	4605      	mov	r5, r0
    8552:	4840      	ldr	r0, [pc, #256]	; (8654 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8554:	3008      	adds	r0, #8
    8556:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    855a:	4e3e      	ldr	r6, [pc, #248]	; (8654 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    855c:	61e0      	str	r0, [r4, #28]
    855e:	1d36      	adds	r6, r6, #4
    8560:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8564:	61a0      	str	r0, [r4, #24]
    8566:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    856a:	7d21      	ldrb	r1, [r4, #20]
    856c:	f884 1020 	strb.w	r1, [r4, #32]
    8570:	7a61      	ldrb	r1, [r4, #9]
    8572:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    8576:	46a1      	mov	r9, r4
    8578:	2400      	movs	r4, #0
    857a:	4639      	mov	r1, r7
    857c:	4628      	mov	r0, r5
    857e:	f000 f983 	bl	8888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    8582:	b910      	cbnz	r0, 858a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8584:	f8c8 a010 	str.w	sl, [r8, #16]
    8588:	2401      	movs	r4, #1
    858a:	4f33      	ldr	r7, [pc, #204]	; (8658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    858c:	07e8      	lsls	r0, r5, #31
    858e:	f1a7 0710 	sub.w	r7, r7, #16
    8592:	d120      	bne.n	85d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    8594:	07a8      	lsls	r0, r5, #30
    8596:	d527      	bpl.n	85e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    8598:	f008 f986 	bl	108a8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    859c:	b9f0      	cbnz	r0, 85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    859e:	f008 f973 	bl	10888 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    85a2:	b9d8      	cbnz	r0, 85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    85a4:	482f      	ldr	r0, [pc, #188]	; (8664 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    85a6:	6800      	ldr	r0, [r0, #0]
    85a8:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    85ac:	f3c0 6300 	ubfx	r3, r0, #24, #1
    85b0:	f000 020f 	and.w	r2, r0, #15
    85b4:	f3c0 1103 	ubfx	r1, r0, #4, #4
    85b8:	f3c0 2803 	ubfx	r8, r0, #8, #4
    85bc:	b173      	cbz	r3, 85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    85be:	b11a      	cbz	r2, 85c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    85c0:	b111      	cbz	r1, 85c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    85c2:	f1b8 0f00 	cmp.w	r8, #0
    85c6:	d109      	bne.n	85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    85c8:	f3c0 4004 	ubfx	r0, r0, #16, #5
    85cc:	2801      	cmp	r0, #1
    85ce:	d105      	bne.n	85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    85d0:	f1bc 0f03 	cmp.w	ip, #3
    85d4:	d202      	bcs.n	85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    85d6:	6838      	ldr	r0, [r7, #0]
    85d8:	4780      	blx	r0
    85da:	e00e      	b.n	85fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    85dc:	f345 0080 	sbfx	r0, r5, #2, #1
    85e0:	4621      	mov	r1, r4
    85e2:	1c40      	adds	r0, r0, #1
    85e4:	687a      	ldr	r2, [r7, #4]
    85e6:	e007      	b.n	85f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    85e8:	f015 0f28 	tst.w	r5, #40	; 0x28
    85ec:	d005      	beq.n	85fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    85ee:	f345 1140 	sbfx	r1, r5, #5, #1
    85f2:	68ba      	ldr	r2, [r7, #8]
    85f4:	4620      	mov	r0, r4
    85f6:	1c49      	adds	r1, r1, #1
    85f8:	4790      	blx	r2
    85fa:	06e8      	lsls	r0, r5, #27
    85fc:	d501      	bpl.n	8602 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    85fe:	68f8      	ldr	r0, [r7, #12]
    8600:	4780      	blx	r0
    8602:	f899 1009 	ldrb.w	r1, [r9, #9]
    8606:	4648      	mov	r0, r9
    8608:	2902      	cmp	r1, #2
    860a:	d120      	bne.n	864e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    860c:	7b01      	ldrb	r1, [r0, #12]
    860e:	2900      	cmp	r1, #0
    8610:	d01d      	beq.n	864e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    8612:	2902      	cmp	r1, #2
    8614:	d004      	beq.n	8620 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    8616:	2901      	cmp	r1, #1
    8618:	d009      	beq.n	862e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    861a:	f640 4156 	movw	r1, #3158	; 0xc56
    861e:	e00d      	b.n	863c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    8620:	69c1      	ldr	r1, [r0, #28]
    8622:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8626:	4408      	add	r0, r1
    8628:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    862c:	e00b      	b.n	8646 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    862e:	6901      	ldr	r1, [r0, #16]
    8630:	f8d9 001c 	ldr.w	r0, [r9, #28]
    8634:	4281      	cmp	r1, r0
    8636:	d804      	bhi.n	8642 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    8638:	f640 4157 	movw	r1, #3159	; 0xc57
    863c:	203e      	movs	r0, #62	; 0x3e
    863e:	f7f8 f9ed 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8642:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    8646:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    864a:	f000 b961 	b.w	8910 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    864e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8652:	0000      	.short	0x0000
    8654:	40008000 	.word	0x40008000
    8658:	2000124c 	.word	0x2000124c
    865c:	4001f508 	.word	0x4001f508
    8660:	40001000 	.word	0x40001000
    8664:	40001450 	.word	0x40001450
    8668:	480b      	ldr	r0, [pc, #44]	; (8698 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    866a:	7d81      	ldrb	r1, [r0, #22]
    866c:	480b      	ldr	r0, [pc, #44]	; (869c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    866e:	5c40      	ldrb	r0, [r0, r1]
    8670:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8674:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    8678:	d204      	bcs.n	8684 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    867a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    867e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8682:	e001      	b.n	8688 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    8684:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    8688:	4a05      	ldr	r2, [pc, #20]	; (86a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    868a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    868e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    8692:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    8696:	4770      	bx	lr
    8698:	2000124c 	.word	0x2000124c
    869c:	00008ac2 	.word	0x00008ac2
    86a0:	40001000 	.word	0x40001000
    86a4:	b508      	push	{r3, lr}
    86a6:	490b      	ldr	r1, [pc, #44]	; (86d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    86a8:	466b      	mov	r3, sp
    86aa:	f991 2015 	ldrsb.w	r2, [r1, #21]
    86ae:	7d89      	ldrb	r1, [r1, #22]
    86b0:	f000 faaa 	bl	8c08 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    86b4:	f99d 0000 	ldrsb.w	r0, [sp]
    86b8:	f000 fa7a 	bl	8bb0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    86bc:	f10d 0001 	add.w	r0, sp, #1
    86c0:	f004 f908 	bl	c8d4 <mpsl_fem_pa_gain_set>
    86c4:	2800      	cmp	r0, #0
    86c6:	d004      	beq.n	86d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    86c8:	f240 51e6 	movw	r1, #1510	; 0x5e6
    86cc:	203e      	movs	r0, #62	; 0x3e
    86ce:	f7f8 f9a5 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86d2:	bd08      	pop	{r3, pc}
    86d4:	2000124c 	.word	0x2000124c
    86d8:	4803      	ldr	r0, [pc, #12]	; (86e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    86da:	7a01      	ldrb	r1, [r0, #8]
    86dc:	2901      	cmp	r1, #1
    86de:	d102      	bne.n	86e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    86e0:	7a80      	ldrb	r0, [r0, #10]
    86e2:	f7ff bfdf 	b.w	86a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    86e6:	4770      	bx	lr
    86e8:	2000124c 	.word	0x2000124c
    86ec:	480d      	ldr	r0, [pc, #52]	; (8724 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    86ee:	b510      	push	{r4, lr}
    86f0:	7a40      	ldrb	r0, [r0, #9]
    86f2:	2801      	cmp	r0, #1
    86f4:	d00c      	beq.n	8710 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    86f6:	2802      	cmp	r0, #2
    86f8:	d113      	bne.n	8722 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    86fa:	f004 f8cd 	bl	c898 <mpsl_fem_lna_configuration_clear>
    86fe:	2800      	cmp	r0, #0
    8700:	d00f      	beq.n	8722 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8702:	1c40      	adds	r0, r0, #1
    8704:	d00d      	beq.n	8722 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8706:	f640 01ab 	movw	r1, #2219	; 0x8ab
    870a:	203e      	movs	r0, #62	; 0x3e
    870c:	f7f8 f986 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8710:	f004 f8d4 	bl	c8bc <mpsl_fem_pa_configuration_clear>
    8714:	2800      	cmp	r0, #0
    8716:	d004      	beq.n	8722 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8718:	1c40      	adds	r0, r0, #1
    871a:	d002      	beq.n	8722 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    871c:	f640 01a5 	movw	r1, #2213	; 0x8a5
    8720:	e7f3      	b.n	870a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    8722:	bd10      	pop	{r4, pc}
    8724:	2000124c 	.word	0x2000124c
    8728:	4808      	ldr	r0, [pc, #32]	; (874c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    872a:	2100      	movs	r1, #0
    872c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8730:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8734:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8738:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    873c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8740:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8744:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8748:	4770      	bx	lr
    874a:	0000      	.short	0x0000
    874c:	40001000 	.word	0x40001000
    8750:	4818      	ldr	r0, [pc, #96]	; (87b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    8752:	b510      	push	{r4, lr}
    8754:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    8758:	07c1      	lsls	r1, r0, #31
    875a:	d029      	beq.n	87b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    875c:	0781      	lsls	r1, r0, #30
    875e:	d514      	bpl.n	878a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    8760:	4815      	ldr	r0, [pc, #84]	; (87b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    8762:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8766:	f041 0101 	orr.w	r1, r1, #1
    876a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    876e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8772:	b2c0      	uxtb	r0, r0
    8774:	280b      	cmp	r0, #11
    8776:	d005      	beq.n	8784 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    8778:	280a      	cmp	r0, #10
    877a:	d003      	beq.n	8784 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    877c:	2803      	cmp	r0, #3
    877e:	d001      	beq.n	8784 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    8780:	2802      	cmp	r0, #2
    8782:	d115      	bne.n	87b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8784:	f240 610f 	movw	r1, #1551	; 0x60f
    8788:	e00f      	b.n	87aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    878a:	0740      	lsls	r0, r0, #29
    878c:	d510      	bpl.n	87b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    878e:	480a      	ldr	r0, [pc, #40]	; (87b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    8790:	490a      	ldr	r1, [pc, #40]	; (87bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    8792:	3008      	adds	r0, #8
    8794:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8798:	f44f 71a0 	mov.w	r1, #320	; 0x140
    879c:	4808      	ldr	r0, [pc, #32]	; (87c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    879e:	f007 ff23 	bl	105e8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    87a2:	2800      	cmp	r0, #0
    87a4:	d004      	beq.n	87b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    87a6:	f240 6117 	movw	r1, #1559	; 0x617
    87aa:	203e      	movs	r0, #62	; 0x3e
    87ac:	f7f8 f936 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87b0:	bd10      	pop	{r4, pc}
    87b2:	0000      	.short	0x0000
    87b4:	2000124c 	.word	0x2000124c
    87b8:	40001000 	.word	0x40001000
    87bc:	4001f098 	.word	0x4001f098
    87c0:	40008000 	.word	0x40008000
    87c4:	4808      	ldr	r0, [pc, #32]	; (87e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    87c6:	4601      	mov	r1, r0
    87c8:	79c2      	ldrb	r2, [r0, #7]
    87ca:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    87ce:	b112      	cbz	r2, 87d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    87d0:	2a01      	cmp	r2, #1
    87d2:	d003      	beq.n	87dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    87d4:	e006      	b.n	87e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    87d6:	f041 0102 	orr.w	r1, r1, #2
    87da:	e001      	b.n	87e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    87dc:	f041 0104 	orr.w	r1, r1, #4
    87e0:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    87e4:	f7ff bfb4 	b.w	8750 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    87e8:	2000124c 	.word	0x2000124c
    87ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87f0:	4d22      	ldr	r5, [pc, #136]	; (887c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    87f2:	2400      	movs	r4, #0
    87f4:	7b28      	ldrb	r0, [r5, #12]
    87f6:	b138      	cbz	r0, 8808 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    87f8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    87fc:	4820      	ldr	r0, [pc, #128]	; (8880 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    87fe:	f007 fef3 	bl	105e8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8802:	b108      	cbz	r0, 8808 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8804:	2701      	movs	r7, #1
    8806:	e000      	b.n	880a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    8808:	2700      	movs	r7, #0
    880a:	7a68      	ldrb	r0, [r5, #9]
    880c:	4e1d      	ldr	r6, [pc, #116]	; (8884 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    880e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8812:	2801      	cmp	r0, #1
    8814:	d002      	beq.n	881c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    8816:	2802      	cmp	r0, #2
    8818:	d006      	beq.n	8828 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    881a:	e016      	b.n	884a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    881c:	4630      	mov	r0, r6
    881e:	f007 fede 	bl	105de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8822:	b190      	cbz	r0, 884a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8824:	2408      	movs	r4, #8
    8826:	e010      	b.n	884a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8828:	4630      	mov	r0, r6
    882a:	f007 fed8 	bl	105de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    882e:	b100      	cbz	r0, 8832 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    8830:	2402      	movs	r4, #2
    8832:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    8836:	43c0      	mvns	r0, r0
    8838:	f340 0000 	sbfx	r0, r0, #0, #1
    883c:	1c40      	adds	r0, r0, #1
    883e:	d101      	bne.n	8844 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    8840:	f044 0404 	orr.w	r4, r4, #4
    8844:	b10f      	cbz	r7, 884a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8846:	f044 0401 	orr.w	r4, r4, #1
    884a:	f014 0f0b 	tst.w	r4, #11
    884e:	d107      	bne.n	8860 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    8850:	f44f 7188 	mov.w	r1, #272	; 0x110
    8854:	4630      	mov	r0, r6
    8856:	f007 fec2 	bl	105de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    885a:	b108      	cbz	r0, 8860 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    885c:	f044 0410 	orr.w	r4, r4, #16
    8860:	f7ff ff62 	bl	8728 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    8864:	06e0      	lsls	r0, r4, #27
    8866:	d506      	bpl.n	8876 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    8868:	0720      	lsls	r0, r4, #28
    886a:	d404      	bmi.n	8876 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    886c:	7a68      	ldrb	r0, [r5, #9]
    886e:	2801      	cmp	r0, #1
    8870:	d101      	bne.n	8876 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    8872:	f044 0420 	orr.w	r4, r4, #32
    8876:	4620      	mov	r0, r4
    8878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    887c:	2000124c 	.word	0x2000124c
    8880:	40008000 	.word	0x40008000
    8884:	40001000 	.word	0x40001000
    8888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    888c:	4c1a      	ldr	r4, [pc, #104]	; (88f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    888e:	460d      	mov	r5, r1
    8890:	7a21      	ldrb	r1, [r4, #8]
    8892:	b129      	cbz	r1, 88a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    8894:	f010 0f11 	tst.w	r0, #17
    8898:	d007      	beq.n	88aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    889a:	f7ff fb0b 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    889e:	e024      	b.n	88ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    88a0:	f000 f890 	bl	89c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    88a4:	2000      	movs	r0, #0
    88a6:	7320      	strb	r0, [r4, #12]
    88a8:	e01f      	b.n	88ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    88aa:	2901      	cmp	r1, #1
    88ac:	d001      	beq.n	88b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    88ae:	2601      	movs	r6, #1
    88b0:	e000      	b.n	88b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    88b2:	2600      	movs	r6, #0
    88b4:	79e0      	ldrb	r0, [r4, #7]
    88b6:	2801      	cmp	r0, #1
    88b8:	d00e      	beq.n	88d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    88ba:	2700      	movs	r7, #0
    88bc:	f000 f882 	bl	89c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    88c0:	2196      	movs	r1, #150	; 0x96
    88c2:	4630      	mov	r0, r6
    88c4:	f000 f894 	bl	89f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    88c8:	4601      	mov	r1, r0
    88ca:	b14f      	cbz	r7, 88e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    88cc:	353b      	adds	r5, #59	; 0x3b
    88ce:	428d      	cmp	r5, r1
    88d0:	d904      	bls.n	88dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    88d2:	2000      	movs	r0, #0
    88d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88d8:	2701      	movs	r7, #1
    88da:	e7ef      	b.n	88bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    88dc:	2001      	movs	r0, #1
    88de:	71e0      	strb	r0, [r4, #7]
    88e0:	7aa2      	ldrb	r2, [r4, #10]
    88e2:	4630      	mov	r0, r6
    88e4:	f7ff fd2c 	bl	8340 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    88e8:	b108      	cbz	r0, 88ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    88ea:	2001      	movs	r0, #1
    88ec:	e7f2      	b.n	88d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    88ee:	f640 21a5 	movw	r1, #2725	; 0xaa5
    88f2:	203e      	movs	r0, #62	; 0x3e
    88f4:	f7f8 f892 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88f8:	2000124c 	.word	0x2000124c
    88fc:	4803      	ldr	r0, [pc, #12]	; (890c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    88fe:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8902:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8906:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    890a:	4770      	bx	lr
    890c:	40001000 	.word	0x40001000
    8910:	4804      	ldr	r0, [pc, #16]	; (8924 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    8912:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8914:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8918:	6241      	str	r1, [r0, #36]	; 0x24
    891a:	4903      	ldr	r1, [pc, #12]	; (8928 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    891c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8920:	6008      	str	r0, [r1, #0]
    8922:	4770      	bx	lr
    8924:	2000124c 	.word	0x2000124c
    8928:	4001f504 	.word	0x4001f504
    892c:	4a07      	ldr	r2, [pc, #28]	; (894c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    892e:	2000      	movs	r0, #0
    8930:	3208      	adds	r2, #8
    8932:	4906      	ldr	r1, [pc, #24]	; (894c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8934:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8938:	1d0a      	adds	r2, r1, #4
    893a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    893e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8942:	4902      	ldr	r1, [pc, #8]	; (894c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8944:	310c      	adds	r1, #12
    8946:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    894a:	4770      	bx	lr
    894c:	40008000 	.word	0x40008000
    8950:	4903      	ldr	r1, [pc, #12]	; (8960 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    8952:	79c9      	ldrb	r1, [r1, #7]
    8954:	2900      	cmp	r1, #0
    8956:	d102      	bne.n	895e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    8958:	4902      	ldr	r1, [pc, #8]	; (8964 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    895a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    895e:	4770      	bx	lr
    8960:	2000124c 	.word	0x2000124c
    8964:	4001f098 	.word	0x4001f098
    8968:	b510      	push	{r4, lr}
    896a:	4a14      	ldr	r2, [pc, #80]	; (89bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    896c:	b120      	cbz	r0, 8978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    896e:	2801      	cmp	r0, #1
    8970:	d011      	beq.n	8996 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    8972:	f240 7153 	movw	r1, #1875	; 0x753
    8976:	e01c      	b.n	89b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    8978:	f101 0028 	add.w	r0, r1, #40	; 0x28
    897c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8980:	490f      	ldr	r1, [pc, #60]	; (89c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    8982:	480e      	ldr	r0, [pc, #56]	; (89bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    8984:	f003 ffa0 	bl	c8c8 <mpsl_fem_pa_configuration_set>
    8988:	2800      	cmp	r0, #0
    898a:	d015      	beq.n	89b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    898c:	1c40      	adds	r0, r0, #1
    898e:	d013      	beq.n	89b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8990:	f240 7142 	movw	r1, #1858	; 0x742
    8994:	e00d      	b.n	89b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    8996:	f101 0029 	add.w	r0, r1, #41	; 0x29
    899a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    899e:	4908      	ldr	r1, [pc, #32]	; (89c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    89a0:	4806      	ldr	r0, [pc, #24]	; (89bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    89a2:	f003 ff7f 	bl	c8a4 <mpsl_fem_lna_configuration_set>
    89a6:	2800      	cmp	r0, #0
    89a8:	d006      	beq.n	89b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    89aa:	1c40      	adds	r0, r0, #1
    89ac:	d004      	beq.n	89b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    89ae:	f240 714f 	movw	r1, #1871	; 0x74f
    89b2:	203e      	movs	r0, #62	; 0x3e
    89b4:	f7f8 f832 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89b8:	bd10      	pop	{r4, pc}
    89ba:	0000      	.short	0x0000
    89bc:	200002d0 	.word	0x200002d0
    89c0:	00008aec 	.word	0x00008aec
    89c4:	4802      	ldr	r0, [pc, #8]	; (89d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    89c6:	2100      	movs	r1, #0
    89c8:	71c1      	strb	r1, [r0, #7]
    89ca:	7201      	strb	r1, [r0, #8]
    89cc:	7241      	strb	r1, [r0, #9]
    89ce:	4770      	bx	lr
    89d0:	2000124c 	.word	0x2000124c
    89d4:	4a05      	ldr	r2, [pc, #20]	; (89ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    89d6:	79d2      	ldrb	r2, [r2, #7]
    89d8:	2a01      	cmp	r2, #1
    89da:	d006      	beq.n	89ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    89dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    89e0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    89e4:	fbb1 f1f2 	udiv	r1, r1, r2
    89e8:	1a40      	subs	r0, r0, r1
    89ea:	4770      	bx	lr
    89ec:	2000124c 	.word	0x2000124c
    89f0:	b570      	push	{r4, r5, r6, lr}
    89f2:	4c13      	ldr	r4, [pc, #76]	; (8a40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    89f4:	4603      	mov	r3, r0
    89f6:	460d      	mov	r5, r1
    89f8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    89fc:	2000      	movs	r0, #0
    89fe:	b15a      	cbz	r2, 8a18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    8a00:	4621      	mov	r1, r4
    8a02:	f891 1020 	ldrb.w	r1, [r1, #32]
    8a06:	b163      	cbz	r3, 8a22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    8a08:	2b01      	cmp	r3, #1
    8a0a:	d111      	bne.n	8a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8a0c:	2a01      	cmp	r2, #1
    8a0e:	4628      	mov	r0, r5
    8a10:	d012      	beq.n	8a38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    8a12:	f007 fdee 	bl	105f2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8a16:	e009      	b.n	8a2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8a18:	f640 0158 	movw	r1, #2136	; 0x858
    8a1c:	203e      	movs	r0, #62	; 0x3e
    8a1e:	f7f7 fffd 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a22:	2a01      	cmp	r2, #1
    8a24:	4628      	mov	r0, r5
    8a26:	d004      	beq.n	8a32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    8a28:	f007 fdf1 	bl	1060e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8a2c:	69e1      	ldr	r1, [r4, #28]
    8a2e:	4408      	add	r0, r1
    8a30:	bd70      	pop	{r4, r5, r6, pc}
    8a32:	f000 f8d1 	bl	8bd8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8a36:	e7f9      	b.n	8a2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8a38:	f000 f8c0 	bl	8bbc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8a3c:	e7f6      	b.n	8a2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8a3e:	0000      	.short	0x0000
    8a40:	2000124c 	.word	0x2000124c
    8a44:	b510      	push	{r4, lr}
    8a46:	f7ff fc4f 	bl	82e8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8a4a:	f7ff fe0d 	bl	8668 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8a4e:	f7ff fe43 	bl	86d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    8a52:	f7ff ff53 	bl	88fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    8a56:	f007 ff27 	bl	108a8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8a5a:	2800      	cmp	r0, #0
    8a5c:	d108      	bne.n	8a70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    8a5e:	f007 ff13 	bl	10888 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8a62:	2800      	cmp	r0, #0
    8a64:	d104      	bne.n	8a70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    8a66:	4803      	ldr	r0, [pc, #12]	; (8a74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    8a68:	6801      	ldr	r1, [r0, #0]
    8a6a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8a6e:	6001      	str	r1, [r0, #0]
    8a70:	bd10      	pop	{r4, pc}
    8a72:	0000      	.short	0x0000
    8a74:	40001568 	.word	0x40001568
    8a78:	b510      	push	{r4, lr}
    8a7a:	4604      	mov	r4, r0
    8a7c:	f7ff fc34 	bl	82e8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8a80:	f7ff fdf2 	bl	8668 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8a84:	4620      	mov	r0, r4
    8a86:	f7ff fe0d 	bl	86a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8a8a:	f007 ff0d 	bl	108a8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8a8e:	2800      	cmp	r0, #0
    8a90:	d00d      	beq.n	8aae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    8a92:	4a09      	ldr	r2, [pc, #36]	; (8ab8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    8a94:	6811      	ldr	r1, [r2, #0]
    8a96:	0650      	lsls	r0, r2, #25
    8a98:	2c02      	cmp	r4, #2
    8a9a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8a9e:	d007      	beq.n	8ab0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    8aa0:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8aa4:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8aa8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8aac:	6010      	str	r0, [r2, #0]
    8aae:	bd10      	pop	{r4, pc}
    8ab0:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8ab4:	e7f6      	b.n	8aa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    8ab6:	0000      	.short	0x0000
    8ab8:	40001588 	.word	0x40001588
    8abc:	a62c0000 	.word	0xa62c0000
    8ac0:	0604a1e0 	.word	0x0604a1e0
    8ac4:	0e0c0a08 	.word	0x0e0c0a08
    8ac8:	16141210 	.word	0x16141210
    8acc:	201e1c18 	.word	0x201e1c18
    8ad0:	28262422 	.word	0x28262422
    8ad4:	302e2c2a 	.word	0x302e2c2a
    8ad8:	38363432 	.word	0x38363432
    8adc:	403e3c3a 	.word	0x403e3c3a
    8ae0:	48464442 	.word	0x48464442
    8ae4:	024e4c4a 	.word	0x024e4c4a
    8ae8:	0000501a 	.word	0x0000501a
    8aec:	00000001 	.word	0x00000001
    8af0:	40001110 	.word	0x40001110
	...
    8b08:	00001e14 	.word	0x00001e14
    8b0c:	00001130 	.word	0x00001130
    8b10:	00000000 	.word	0x00000000
    8b14:	00000028 	.word	0x00000028
    8b18:	00000018 	.word	0x00000018
    8b1c:	00000000 	.word	0x00000000
    8b20:	00001e14 	.word	0x00001e14
    8b24:	00001130 	.word	0x00001130
    8b28:	00000000 	.word	0x00000000
    8b2c:	00001770 	.word	0x00001770
    8b30:	00000fa0 	.word	0x00000fa0

00008b34 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8b34:	b570      	push	{r4, r5, r6, lr}
    8b36:	4605      	mov	r5, r0
    8b38:	4614      	mov	r4, r2
    8b3a:	4608      	mov	r0, r1
    8b3c:	f7ff fbfa 	bl	8334 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8b40:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8b44:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8b48:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8b4c:	4807      	ldr	r0, [pc, #28]	; (8b6c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8b4e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8b52:	4408      	add	r0, r1
    8b54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8b58:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8b5c:	fbb0 f5f1 	udiv	r5, r0, r1
    8b60:	4620      	mov	r0, r4
    8b62:	f7ff fbbb 	bl	82dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8b66:	4428      	add	r0, r5
    8b68:	1d40      	adds	r0, r0, #5
    8b6a:	bd70      	pop	{r4, r5, r6, pc}
    8b6c:	00008bfc 	.word	0x00008bfc

00008b70 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8b70:	b570      	push	{r4, r5, r6, lr}
    8b72:	4d0e      	ldr	r5, [pc, #56]	; (8bac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8b74:	461c      	mov	r4, r3
    8b76:	3d08      	subs	r5, #8
    8b78:	4b0c      	ldr	r3, [pc, #48]	; (8bac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8b7a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8b7e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b86:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8b8a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8b8e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8b92:	4418      	add	r0, r3
    8b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8b98:	fbb0 f5f1 	udiv	r5, r0, r1
    8b9c:	4610      	mov	r0, r2
    8b9e:	f7ff fb9d 	bl	82dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8ba2:	4428      	add	r0, r5
    8ba4:	4420      	add	r0, r4
    8ba6:	1d40      	adds	r0, r0, #5
    8ba8:	bd70      	pop	{r4, r5, r6, pc}
    8baa:	0000      	.short	0x0000
    8bac:	00008bfc 	.word	0x00008bfc

00008bb0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8bb0:	4901      	ldr	r1, [pc, #4]	; (8bb8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8bb2:	b2c0      	uxtb	r0, r0
    8bb4:	6008      	str	r0, [r1, #0]
    8bb6:	4770      	bx	lr
    8bb8:	4000150c 	.word	0x4000150c

00008bbc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8bbc:	4a05      	ldr	r2, [pc, #20]	; (8bd4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8bbe:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8bc6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8bca:	fbb1 f1f2 	udiv	r1, r1, r2
    8bce:	4408      	add	r0, r1
    8bd0:	1e80      	subs	r0, r0, #2
    8bd2:	4770      	bx	lr
    8bd4:	00008bf4 	.word	0x00008bf4

00008bd8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8bd8:	4a05      	ldr	r2, [pc, #20]	; (8bf0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8bda:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8be2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8be6:	fbb1 f1f2 	udiv	r1, r1, r2
    8bea:	4408      	add	r0, r1
    8bec:	4770      	bx	lr
    8bee:	0000      	.short	0x0000
    8bf0:	00008bf4 	.word	0x00008bf4
    8bf4:	05dc0000 	.word	0x05dc0000
    8bf8:	000003e8 	.word	0x000003e8
    8bfc:	00000000 	.word	0x00000000
    8c00:	00001e14 	.word	0x00001e14
    8c04:	00001130 	.word	0x00001130

00008c08 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c0c:	461e      	mov	r6, r3
    8c0e:	4617      	mov	r7, r2
    8c10:	460c      	mov	r4, r1
    8c12:	4605      	mov	r5, r0
    8c14:	f000 f856 	bl	8cc4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8c18:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8cc0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8c1c:	4680      	mov	r8, r0
    8c1e:	f899 0000 	ldrb.w	r0, [r9]
    8c22:	42a8      	cmp	r0, r5
    8c24:	d110      	bne.n	8c48 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c26:	f899 1001 	ldrb.w	r1, [r9, #1]
    8c2a:	4648      	mov	r0, r9
    8c2c:	42a1      	cmp	r1, r4
    8c2e:	d10b      	bne.n	8c48 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c30:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8c34:	42b9      	cmp	r1, r7
    8c36:	d107      	bne.n	8c48 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c38:	78c2      	ldrb	r2, [r0, #3]
    8c3a:	4542      	cmp	r2, r8
    8c3c:	d104      	bne.n	8c48 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c3e:	8881      	ldrh	r1, [r0, #4]
    8c40:	8031      	strh	r1, [r6, #0]
    8c42:	7980      	ldrb	r0, [r0, #6]
    8c44:	70b0      	strb	r0, [r6, #2]
    8c46:	e037      	b.n	8cb8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8c48:	463a      	mov	r2, r7
    8c4a:	4621      	mov	r1, r4
    8c4c:	2d01      	cmp	r5, #1
    8c4e:	d009      	beq.n	8c64 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8c50:	2d02      	cmp	r5, #2
    8c52:	d009      	beq.n	8c68 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8c54:	2d04      	cmp	r5, #4
    8c56:	d009      	beq.n	8c6c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8c58:	2d08      	cmp	r5, #8
    8c5a:	d009      	beq.n	8c70 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8c5c:	f240 4161 	movw	r1, #1121	; 0x461
    8c60:	2006      	movs	r0, #6
    8c62:	e00c      	b.n	8c7e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8c64:	2000      	movs	r0, #0
    8c66:	e004      	b.n	8c72 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8c68:	2001      	movs	r0, #1
    8c6a:	e002      	b.n	8c72 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8c6c:	2003      	movs	r0, #3
    8c6e:	e000      	b.n	8c72 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8c70:	2002      	movs	r0, #2
    8c72:	466b      	mov	r3, sp
    8c74:	f000 f89e 	bl	8db4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8c78:	b118      	cbz	r0, 8c82 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8c7a:	213d      	movs	r1, #61	; 0x3d
    8c7c:	2075      	movs	r0, #117	; 0x75
    8c7e:	f7f7 fecd 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c82:	4620      	mov	r0, r4
    8c84:	f7ff f90e 	bl	7ea4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8c88:	4602      	mov	r2, r0
    8c8a:	2300      	movs	r3, #0
    8c8c:	4631      	mov	r1, r6
    8c8e:	f99d 0000 	ldrsb.w	r0, [sp]
    8c92:	f003 fe2b 	bl	c8ec <mpsl_fem_tx_power_split>
    8c96:	4601      	mov	r1, r0
    8c98:	f889 1007 	strb.w	r1, [r9, #7]
    8c9c:	8831      	ldrh	r1, [r6, #0]
    8c9e:	f8a9 1004 	strh.w	r1, [r9, #4]
    8ca2:	78b1      	ldrb	r1, [r6, #2]
    8ca4:	f889 1006 	strb.w	r1, [r9, #6]
    8ca8:	f889 5000 	strb.w	r5, [r9]
    8cac:	f889 4001 	strb.w	r4, [r9, #1]
    8cb0:	f889 7002 	strb.w	r7, [r9, #2]
    8cb4:	f889 8003 	strb.w	r8, [r9, #3]
    8cb8:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8cc0:	20000372 	.word	0x20000372

00008cc4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8cc4:	4801      	ldr	r0, [pc, #4]	; (8ccc <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8cc6:	7800      	ldrb	r0, [r0, #0]
    8cc8:	4770      	bx	lr
    8cca:	0000      	.short	0x0000
    8ccc:	200002e8 	.word	0x200002e8

00008cd0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8cd0:	b570      	push	{r4, r5, r6, lr}
    8cd2:	4c17      	ldr	r4, [pc, #92]	; (8d30 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8cd4:	7860      	ldrb	r0, [r4, #1]
    8cd6:	2800      	cmp	r0, #0
    8cd8:	d123      	bne.n	8d22 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8cda:	2001      	movs	r0, #1
    8cdc:	7060      	strb	r0, [r4, #1]
    8cde:	f007 fdbd 	bl	1085c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8ce2:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8ce6:	b928      	cbnz	r0, 8cf4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8ce8:	f007 fdee 	bl	108c8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8cec:	b910      	cbnz	r0, 8cf4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8cee:	f007 fdf5 	bl	108dc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8cf2:	b120      	cbz	r0, 8cfe <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8cf4:	480f      	ldr	r0, [pc, #60]	; (8d34 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8cf6:	6060      	str	r0, [r4, #4]
    8cf8:	70a5      	strb	r5, [r4, #2]
    8cfa:	2008      	movs	r0, #8
    8cfc:	e010      	b.n	8d20 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8cfe:	f007 fd82 	bl	10806 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8d02:	b940      	cbnz	r0, 8d16 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d04:	f007 fd89 	bl	1081a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8d08:	b928      	cbnz	r0, 8d16 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d0a:	f007 fd9d 	bl	10848 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8d0e:	b910      	cbnz	r0, 8d16 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d10:	f007 fdae 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8d14:	b130      	cbz	r0, 8d24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8d16:	4807      	ldr	r0, [pc, #28]	; (8d34 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d18:	3031      	adds	r0, #49	; 0x31
    8d1a:	6060      	str	r0, [r4, #4]
    8d1c:	70a5      	strb	r5, [r4, #2]
    8d1e:	2004      	movs	r0, #4
    8d20:	70e0      	strb	r0, [r4, #3]
    8d22:	bd70      	pop	{r4, r5, r6, pc}
    8d24:	f240 113f 	movw	r1, #319	; 0x13f
    8d28:	2074      	movs	r0, #116	; 0x74
    8d2a:	f003 fc21 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d2e:	0000      	.short	0x0000
    8d30:	200002e8 	.word	0x200002e8
    8d34:	00010c47 	.word	0x00010c47

00008d38 <mpsl_tx_power_radio_supported_power_adjust>:
    8d38:	4a06      	ldr	r2, [pc, #24]	; (8d54 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8d3a:	b500      	push	{lr}
    8d3c:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8d40:	4290      	cmp	r0, r2
    8d42:	db01      	blt.n	8d48 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8d44:	4610      	mov	r0, r2
    8d46:	bd00      	pop	{pc}
    8d48:	f000 f808 	bl	8d5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8d4c:	4902      	ldr	r1, [pc, #8]	; (8d58 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8d4e:	5608      	ldrsb	r0, [r1, r0]
    8d50:	bd00      	pop	{pc}
    8d52:	0000      	.short	0x0000
    8d54:	200002e8 	.word	0x200002e8
    8d58:	00010c39 	.word	0x00010c39

00008d5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8d5c:	4602      	mov	r2, r0
    8d5e:	4813      	ldr	r0, [pc, #76]	; (8dac <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8d60:	b510      	push	{r4, lr}
    8d62:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8d66:	429a      	cmp	r2, r3
    8d68:	db01      	blt.n	8d6e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8d6a:	200d      	movs	r0, #13
    8d6c:	bd10      	pop	{r4, pc}
    8d6e:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8d72:	429a      	cmp	r2, r3
    8d74:	dc01      	bgt.n	8d7a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8d76:	2000      	movs	r0, #0
    8d78:	bd10      	pop	{r4, pc}
    8d7a:	b101      	cbz	r1, 8d7e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8d7c:	2101      	movs	r1, #1
    8d7e:	1ad4      	subs	r4, r2, r3
    8d80:	6843      	ldr	r3, [r0, #4]
    8d82:	5d18      	ldrb	r0, [r3, r4]
    8d84:	4c0a      	ldr	r4, [pc, #40]	; (8db0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8d86:	5624      	ldrsb	r4, [r4, r0]
    8d88:	4294      	cmp	r4, r2
    8d8a:	d0f5      	beq.n	8d78 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8d8c:	4c08      	ldr	r4, [pc, #32]	; (8db0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8d8e:	4408      	add	r0, r1
    8d90:	343f      	adds	r4, #63	; 0x3f
    8d92:	b2c0      	uxtb	r0, r0
    8d94:	b2d2      	uxtb	r2, r2
    8d96:	42a3      	cmp	r3, r4
    8d98:	d1ee      	bne.n	8d78 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8d9a:	2900      	cmp	r1, #0
    8d9c:	d0ec      	beq.n	8d78 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8d9e:	2a01      	cmp	r2, #1
    8da0:	d001      	beq.n	8da6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8da2:	2a02      	cmp	r2, #2
    8da4:	d1e8      	bne.n	8d78 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8da6:	1c40      	adds	r0, r0, #1
    8da8:	b2c0      	uxtb	r0, r0
    8daa:	bd10      	pop	{r4, pc}
    8dac:	200002e8 	.word	0x200002e8
    8db0:	00010c39 	.word	0x00010c39

00008db4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8db8:	461c      	mov	r4, r3
    8dba:	4690      	mov	r8, r2
    8dbc:	460d      	mov	r5, r1
    8dbe:	4606      	mov	r6, r0
    8dc0:	f06f 0715 	mvn.w	r7, #21
    8dc4:	2804      	cmp	r0, #4
    8dc6:	d804      	bhi.n	8dd2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8dc8:	b11c      	cbz	r4, 8dd2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8dca:	f007 fc2b 	bl	10624 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8dce:	42a8      	cmp	r0, r5
    8dd0:	d802      	bhi.n	8dd8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8dd2:	4638      	mov	r0, r7
    8dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dd8:	4805      	ldr	r0, [pc, #20]	; (8df0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8dda:	4642      	mov	r2, r8
    8ddc:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8de0:	b118      	cbz	r0, 8dea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8de2:	5740      	ldrsb	r0, [r0, r5]
    8de4:	4282      	cmp	r2, r0
    8de6:	dd00      	ble.n	8dea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8de8:	4602      	mov	r2, r0
    8dea:	7022      	strb	r2, [r4, #0]
    8dec:	2000      	movs	r0, #0
    8dee:	e7f1      	b.n	8dd4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8df0:	20001280 	.word	0x20001280

00008df4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8df4:	4801      	ldr	r0, [pc, #4]	; (8dfc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8df6:	7800      	ldrb	r0, [r0, #0]
    8df8:	4770      	bx	lr
    8dfa:	0000      	.short	0x0000
    8dfc:	200002f0 	.word	0x200002f0

00008e00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8e00:	4905      	ldr	r1, [pc, #20]	; (8e18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8e02:	780a      	ldrb	r2, [r1, #0]
    8e04:	4290      	cmp	r0, r2
    8e06:	d301      	bcc.n	8e0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8e08:	2000      	movs	r0, #0
    8e0a:	4770      	bx	lr
    8e0c:	6849      	ldr	r1, [r1, #4]
    8e0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8e12:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8e16:	4770      	bx	lr
    8e18:	200002f0 	.word	0x200002f0

00008e1c <MPSL_IRQ_RADIO_Handler>:
    8e1c:	490d      	ldr	r1, [pc, #52]	; (8e54 <MPSL_IRQ_RADIO_Handler+0x38>)
    8e1e:	b510      	push	{r4, lr}
    8e20:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8e24:	2820      	cmp	r0, #32
    8e26:	d00f      	beq.n	8e48 <MPSL_IRQ_RADIO_Handler+0x2c>
    8e28:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8e2c:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    8e30:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    8e34:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    8e38:	6840      	ldr	r0, [r0, #4]
    8e3a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    8e3e:	680a      	ldr	r2, [r1, #0]
    8e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e44:	2104      	movs	r1, #4
    8e46:	4710      	bx	r2
    8e48:	f640 017f 	movw	r1, #2175	; 0x87f
    8e4c:	2070      	movs	r0, #112	; 0x70
    8e4e:	f003 fb8f 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e52:	0000      	.short	0x0000
    8e54:	20000f78 	.word	0x20000f78
    8e58:	b570      	push	{r4, r5, r6, lr}
    8e5a:	4605      	mov	r5, r0
    8e5c:	2a20      	cmp	r2, #32
    8e5e:	d028      	beq.n	8eb2 <MPSL_IRQ_RADIO_Handler+0x96>
    8e60:	4819      	ldr	r0, [pc, #100]	; (8ec8 <MPSL_IRQ_RADIO_Handler+0xac>)
    8e62:	4c1a      	ldr	r4, [pc, #104]	; (8ecc <MPSL_IRQ_RADIO_Handler+0xb0>)
    8e64:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8e68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8e6c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8e70:	4423      	add	r3, r4
    8e72:	2920      	cmp	r1, #32
    8e74:	d022      	beq.n	8ebc <MPSL_IRQ_RADIO_Handler+0xa0>
    8e76:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8e7a:	7840      	ldrb	r0, [r0, #1]
    8e7c:	784c      	ldrb	r4, [r1, #1]
    8e7e:	7048      	strb	r0, [r1, #1]
    8e80:	4620      	mov	r0, r4
    8e82:	4601      	mov	r1, r0
    8e84:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8e88:	4291      	cmp	r1, r2
    8e8a:	7005      	strb	r5, [r0, #0]
    8e8c:	7840      	ldrb	r0, [r0, #1]
    8e8e:	d1f8      	bne.n	8e82 <MPSL_IRQ_RADIO_Handler+0x66>
    8e90:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    8e94:	2a20      	cmp	r2, #32
    8e96:	bf1a      	itte	ne
    8e98:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8e9c:	7054      	strbne	r4, [r2, #1]
    8e9e:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    8ea2:	2220      	movs	r2, #32
    8ea4:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8ea8:	f88c 2001 	strb.w	r2, [ip, #1]
    8eac:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    8eb0:	bd70      	pop	{r4, r5, r6, pc}
    8eb2:	f240 2186 	movw	r1, #646	; 0x286
    8eb6:	2070      	movs	r0, #112	; 0x70
    8eb8:	f003 fb5a 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8ebc:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    8ec0:	7840      	ldrb	r0, [r0, #1]
    8ec2:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    8ec6:	e7db      	b.n	8e80 <MPSL_IRQ_RADIO_Handler+0x64>
    8ec8:	20000ef8 	.word	0x20000ef8
    8ecc:	20000f78 	.word	0x20000f78
    8ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ed4:	b08f      	sub	sp, #60	; 0x3c
    8ed6:	4615      	mov	r5, r2
    8ed8:	461e      	mov	r6, r3
    8eda:	460c      	mov	r4, r1
    8edc:	f002 fa9c 	bl	b418 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8ee0:	1828      	adds	r0, r5, r0
    8ee2:	f146 0100 	adc.w	r1, r6, #0
    8ee6:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8eea:	e9d4 2300 	ldrd	r2, r3, [r4]
    8eee:	1a80      	subs	r0, r0, r2
    8ef0:	eb71 0003 	sbcs.w	r0, r1, r3
    8ef4:	f0c0 80e5 	bcc.w	90c2 <MPSL_IRQ_RADIO_Handler+0x2a6>
    8ef8:	a808      	add	r0, sp, #32
    8efa:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    8efe:	900a      	str	r0, [sp, #40]	; 0x28
    8f00:	48bc      	ldr	r0, [pc, #752]	; (91f4 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    8f02:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8f06:	4408      	add	r0, r1
    8f08:	9009      	str	r0, [sp, #36]	; 0x24
    8f0a:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8f0e:	2020      	movs	r0, #32
    8f10:	f10d 091c 	add.w	r9, sp, #28
    8f14:	f88d 001c 	strb.w	r0, [sp, #28]
    8f18:	2d20      	cmp	r5, #32
    8f1a:	d036      	beq.n	8f8a <MPSL_IRQ_RADIO_Handler+0x16e>
    8f1c:	48b6      	ldr	r0, [pc, #728]	; (91f8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8f1e:	2600      	movs	r6, #0
    8f20:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    8f24:	48b5      	ldr	r0, [pc, #724]	; (91fc <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8f26:	e9d4 7300 	ldrd	r7, r3, [r4]
    8f2a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    8f2e:	f850 8f08 	ldr.w	r8, [r0, #8]!
    8f32:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    8f36:	eb18 0101 	adds.w	r1, r8, r1
    8f3a:	4172      	adcs	r2, r6
    8f3c:	1a79      	subs	r1, r7, r1
    8f3e:	eb73 0102 	sbcs.w	r1, r3, r2
    8f42:	d322      	bcc.n	8f8a <MPSL_IRQ_RADIO_Handler+0x16e>
    8f44:	89e1      	ldrh	r1, [r4, #14]
    8f46:	b1c9      	cbz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x160>
    8f48:	89c0      	ldrh	r0, [r0, #14]
    8f4a:	b9b8      	cbnz	r0, 8f7c <MPSL_IRQ_RADIO_Handler+0x160>
    8f4c:	f003 f970 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f50:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f54:	bf08      	it	eq
    8f56:	200d      	moveq	r0, #13
    8f58:	d00b      	beq.n	8f72 <MPSL_IRQ_RADIO_Handler+0x156>
    8f5a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f5e:	3856      	subs	r0, #86	; 0x56
    8f60:	bf08      	it	eq
    8f62:	201c      	moveq	r0, #28
    8f64:	d005      	beq.n	8f72 <MPSL_IRQ_RADIO_Handler+0x156>
    8f66:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f6a:	389f      	subs	r0, #159	; 0x9f
    8f6c:	bf14      	ite	ne
    8f6e:	4630      	movne	r0, r6
    8f70:	2032      	moveq	r0, #50	; 0x32
    8f72:	1c40      	adds	r0, r0, #1
    8f74:	ebb7 0108 	subs.w	r1, r7, r8
    8f78:	4281      	cmp	r1, r0
    8f7a:	db06      	blt.n	8f8a <MPSL_IRQ_RADIO_Handler+0x16e>
    8f7c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8f80:	f889 5000 	strb.w	r5, [r9]
    8f84:	7845      	ldrb	r5, [r0, #1]
    8f86:	2d20      	cmp	r5, #32
    8f88:	d1cc      	bne.n	8f24 <MPSL_IRQ_RADIO_Handler+0x108>
    8f8a:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f8c:	f899 1000 	ldrb.w	r1, [r9]
    8f90:	2d20      	cmp	r5, #32
    8f92:	7001      	strb	r1, [r0, #0]
    8f94:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    8f98:	f000 8128 	beq.w	91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    8f9c:	4896      	ldr	r0, [pc, #600]	; (91f8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8f9e:	4f97      	ldr	r7, [pc, #604]	; (91fc <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8fa0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    8fa4:	2600      	movs	r6, #0
    8fa6:	9004      	str	r0, [sp, #16]
    8fa8:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    8fac:	f10a 0008 	add.w	r0, sl, #8
    8fb0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8fb4:	f8d4 b000 	ldr.w	fp, [r4]
    8fb8:	e9d0 8300 	ldrd	r8, r3, [r0]
    8fbc:	eb1b 0202 	adds.w	r2, fp, r2
    8fc0:	4171      	adcs	r1, r6
    8fc2:	ebb8 0202 	subs.w	r2, r8, r2
    8fc6:	eb73 0101 	sbcs.w	r1, r3, r1
    8fca:	d320      	bcc.n	900e <MPSL_IRQ_RADIO_Handler+0x1f2>
    8fcc:	89c0      	ldrh	r0, [r0, #14]
    8fce:	2800      	cmp	r0, #0
    8fd0:	f000 810c 	beq.w	91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    8fd4:	89e0      	ldrh	r0, [r4, #14]
    8fd6:	2800      	cmp	r0, #0
    8fd8:	f040 8108 	bne.w	91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    8fdc:	f003 f928 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8fe0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8fe4:	bf08      	it	eq
    8fe6:	200d      	moveq	r0, #13
    8fe8:	d00b      	beq.n	9002 <MPSL_IRQ_RADIO_Handler+0x1e6>
    8fea:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8fee:	3856      	subs	r0, #86	; 0x56
    8ff0:	bf08      	it	eq
    8ff2:	201c      	moveq	r0, #28
    8ff4:	d005      	beq.n	9002 <MPSL_IRQ_RADIO_Handler+0x1e6>
    8ff6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8ffa:	389f      	subs	r0, #159	; 0x9f
    8ffc:	bf14      	ite	ne
    8ffe:	4630      	movne	r0, r6
    9000:	2032      	moveq	r0, #50	; 0x32
    9002:	1c41      	adds	r1, r0, #1
    9004:	ebb8 000b 	subs.w	r0, r8, fp
    9008:	4288      	cmp	r0, r1
    900a:	f280 80ef 	bge.w	91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    900e:	f889 5000 	strb.w	r5, [r9]
    9012:	f89a 0018 	ldrb.w	r0, [sl, #24]
    9016:	7c21      	ldrb	r1, [r4, #16]
    9018:	4281      	cmp	r1, r0
    901a:	d207      	bcs.n	902c <MPSL_IRQ_RADIO_Handler+0x210>
    901c:	9804      	ldr	r0, [sp, #16]
    901e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9022:	7845      	ldrb	r5, [r0, #1]
    9024:	2d20      	cmp	r5, #32
    9026:	d1bf      	bne.n	8fa8 <MPSL_IRQ_RADIO_Handler+0x18c>
    9028:	f000 b8e0 	b.w	91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    902c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9030:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    9034:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    9038:	f8d0 9008 	ldr.w	r9, [r0, #8]
    903c:	8ac0      	ldrh	r0, [r0, #22]
    903e:	eb19 0502 	adds.w	r5, r9, r2
    9042:	eb41 0806 	adc.w	r8, r1, r6
    9046:	bbb0      	cbnz	r0, 90b6 <MPSL_IRQ_RADIO_Handler+0x29a>
    9048:	89e0      	ldrh	r0, [r4, #14]
    904a:	b3a0      	cbz	r0, 90b6 <MPSL_IRQ_RADIO_Handler+0x29a>
    904c:	f003 f8f0 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9050:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9054:	bf08      	it	eq
    9056:	200d      	moveq	r0, #13
    9058:	d00b      	beq.n	9072 <MPSL_IRQ_RADIO_Handler+0x256>
    905a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    905e:	3856      	subs	r0, #86	; 0x56
    9060:	bf08      	it	eq
    9062:	201c      	moveq	r0, #28
    9064:	d005      	beq.n	9072 <MPSL_IRQ_RADIO_Handler+0x256>
    9066:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    906a:	389f      	subs	r0, #159	; 0x9f
    906c:	bf14      	ite	ne
    906e:	4630      	movne	r0, r6
    9070:	2032      	moveq	r0, #50	; 0x32
    9072:	1c41      	adds	r1, r0, #1
    9074:	ebb5 0009 	subs.w	r0, r5, r9
    9078:	4288      	cmp	r0, r1
    907a:	da1c      	bge.n	90b6 <MPSL_IRQ_RADIO_Handler+0x29a>
    907c:	f003 f8d8 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9080:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9084:	bf08      	it	eq
    9086:	200d      	moveq	r0, #13
    9088:	d00b      	beq.n	90a2 <MPSL_IRQ_RADIO_Handler+0x286>
    908a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    908e:	3856      	subs	r0, #86	; 0x56
    9090:	bf08      	it	eq
    9092:	201c      	moveq	r0, #28
    9094:	d005      	beq.n	90a2 <MPSL_IRQ_RADIO_Handler+0x286>
    9096:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    909a:	389f      	subs	r0, #159	; 0x9f
    909c:	bf14      	ite	ne
    909e:	4630      	movne	r0, r6
    90a0:	2032      	moveq	r0, #50	; 0x32
    90a2:	f89d 1020 	ldrb.w	r1, [sp, #32]
    90a6:	1c40      	adds	r0, r0, #1
    90a8:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    90ac:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    90b0:	1815      	adds	r5, r2, r0
    90b2:	eb43 0806 	adc.w	r8, r3, r6
    90b6:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    90ba:	1b49      	subs	r1, r1, r5
    90bc:	eb70 0008 	sbcs.w	r0, r0, r8
    90c0:	d203      	bcs.n	90ca <MPSL_IRQ_RADIO_Handler+0x2ae>
    90c2:	b00f      	add	sp, #60	; 0x3c
    90c4:	2000      	movs	r0, #0
    90c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90ca:	e9c4 5800 	strd	r5, r8, [r4]
    90ce:	9818      	ldr	r0, [sp, #96]	; 0x60
    90d0:	900b      	str	r0, [sp, #44]	; 0x2c
    90d2:	a808      	add	r0, sp, #32
    90d4:	900a      	str	r0, [sp, #40]	; 0x28
    90d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    90d8:	f10d 0a1c 	add.w	sl, sp, #28
    90dc:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    90e0:	2020      	movs	r0, #32
    90e2:	f88d 001c 	strb.w	r0, [sp, #28]
    90e6:	2d20      	cmp	r5, #32
    90e8:	d037      	beq.n	915a <MPSL_IRQ_RADIO_Handler+0x33e>
    90ea:	4843      	ldr	r0, [pc, #268]	; (91f8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    90ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
    90ee:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    90f2:	bf00      	nop
    90f4:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    90f8:	e9d4 8300 	ldrd	r8, r3, [r4]
    90fc:	f850 9f08 	ldr.w	r9, [r0, #8]!
    9100:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    9104:	eb19 0202 	adds.w	r2, r9, r2
    9108:	4171      	adcs	r1, r6
    910a:	ebb8 0202 	subs.w	r2, r8, r2
    910e:	eb73 0101 	sbcs.w	r1, r3, r1
    9112:	d322      	bcc.n	915a <MPSL_IRQ_RADIO_Handler+0x33e>
    9114:	89e1      	ldrh	r1, [r4, #14]
    9116:	b1c9      	cbz	r1, 914c <MPSL_IRQ_RADIO_Handler+0x330>
    9118:	89c0      	ldrh	r0, [r0, #14]
    911a:	b9b8      	cbnz	r0, 914c <MPSL_IRQ_RADIO_Handler+0x330>
    911c:	f003 f888 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9120:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9124:	bf08      	it	eq
    9126:	200d      	moveq	r0, #13
    9128:	d00b      	beq.n	9142 <MPSL_IRQ_RADIO_Handler+0x326>
    912a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    912e:	3856      	subs	r0, #86	; 0x56
    9130:	bf08      	it	eq
    9132:	201c      	moveq	r0, #28
    9134:	d005      	beq.n	9142 <MPSL_IRQ_RADIO_Handler+0x326>
    9136:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    913a:	389f      	subs	r0, #159	; 0x9f
    913c:	bf14      	ite	ne
    913e:	4630      	movne	r0, r6
    9140:	2032      	moveq	r0, #50	; 0x32
    9142:	1c41      	adds	r1, r0, #1
    9144:	ebb8 0009 	subs.w	r0, r8, r9
    9148:	4288      	cmp	r0, r1
    914a:	db06      	blt.n	915a <MPSL_IRQ_RADIO_Handler+0x33e>
    914c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9150:	f88a 5000 	strb.w	r5, [sl]
    9154:	7845      	ldrb	r5, [r0, #1]
    9156:	2d20      	cmp	r5, #32
    9158:	d1cc      	bne.n	90f4 <MPSL_IRQ_RADIO_Handler+0x2d8>
    915a:	980a      	ldr	r0, [sp, #40]	; 0x28
    915c:	f89a 1000 	ldrb.w	r1, [sl]
    9160:	2d20      	cmp	r5, #32
    9162:	7001      	strb	r1, [r0, #0]
    9164:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    9168:	d040      	beq.n	91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    916a:	4923      	ldr	r1, [pc, #140]	; (91f8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    916c:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9170:	f8cd 000c 	str.w	r0, [sp, #12]
    9174:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    9178:	f109 0008 	add.w	r0, r9, #8
    917c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9180:	f8d4 b000 	ldr.w	fp, [r4]
    9184:	e9d0 a300 	ldrd	sl, r3, [r0]
    9188:	eb1b 0202 	adds.w	r2, fp, r2
    918c:	4171      	adcs	r1, r6
    918e:	ebba 0202 	subs.w	r2, sl, r2
    9192:	eb73 0101 	sbcs.w	r1, r3, r1
    9196:	d31b      	bcc.n	91d0 <MPSL_IRQ_RADIO_Handler+0x3b4>
    9198:	89c0      	ldrh	r0, [r0, #14]
    919a:	b338      	cbz	r0, 91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    919c:	89e0      	ldrh	r0, [r4, #14]
    919e:	bb28      	cbnz	r0, 91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    91a0:	f003 f846 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91a4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91a8:	bf08      	it	eq
    91aa:	200d      	moveq	r0, #13
    91ac:	d00b      	beq.n	91c6 <MPSL_IRQ_RADIO_Handler+0x3aa>
    91ae:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91b2:	3856      	subs	r0, #86	; 0x56
    91b4:	bf08      	it	eq
    91b6:	201c      	moveq	r0, #28
    91b8:	d005      	beq.n	91c6 <MPSL_IRQ_RADIO_Handler+0x3aa>
    91ba:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91be:	389f      	subs	r0, #159	; 0x9f
    91c0:	bf14      	ite	ne
    91c2:	4630      	movne	r0, r6
    91c4:	2032      	moveq	r0, #50	; 0x32
    91c6:	1c41      	adds	r1, r0, #1
    91c8:	ebba 000b 	subs.w	r0, sl, fp
    91cc:	4288      	cmp	r0, r1
    91ce:	da0d      	bge.n	91ec <MPSL_IRQ_RADIO_Handler+0x3d0>
    91d0:	f888 5000 	strb.w	r5, [r8]
    91d4:	f899 1018 	ldrb.w	r1, [r9, #24]
    91d8:	7c20      	ldrb	r0, [r4, #16]
    91da:	4288      	cmp	r0, r1
    91dc:	f4bf af26 	bcs.w	902c <MPSL_IRQ_RADIO_Handler+0x210>
    91e0:	9803      	ldr	r0, [sp, #12]
    91e2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    91e6:	7845      	ldrb	r5, [r0, #1]
    91e8:	2d20      	cmp	r5, #32
    91ea:	d1c3      	bne.n	9174 <MPSL_IRQ_RADIO_Handler+0x358>
    91ec:	b00f      	add	sp, #60	; 0x3c
    91ee:	2001      	movs	r0, #1
    91f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91f4:	20000f78 	.word	0x20000f78
    91f8:	20000ef8 	.word	0x20000ef8
    91fc:	20000af8 	.word	0x20000af8
    9200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9204:	b083      	sub	sp, #12
    9206:	4691      	mov	r9, r2
    9208:	4604      	mov	r4, r0
    920a:	460d      	mov	r5, r1
    920c:	4698      	mov	r8, r3
    920e:	aa01      	add	r2, sp, #4
    9210:	4669      	mov	r1, sp
    9212:	4618      	mov	r0, r3
    9214:	f002 f91c 	bl	b450 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9218:	f002 fe32 	bl	be80 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    921c:	f002 f8fc 	bl	b418 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9220:	4607      	mov	r7, r0
    9222:	481e      	ldr	r0, [pc, #120]	; (929c <MPSL_IRQ_RADIO_Handler+0x480>)
    9224:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    9228:	2600      	movs	r6, #0
    922a:	2920      	cmp	r1, #32
    922c:	d009      	beq.n	9242 <MPSL_IRQ_RADIO_Handler+0x426>
    922e:	6882      	ldr	r2, [r0, #8]
    9230:	68c1      	ldr	r1, [r0, #12]
    9232:	6900      	ldr	r0, [r0, #16]
    9234:	1d83      	adds	r3, r0, #6
    9236:	f146 0000 	adc.w	r0, r6, #0
    923a:	18d4      	adds	r4, r2, r3
    923c:	eb41 0500 	adc.w	r5, r1, r0
    9240:	e026      	b.n	9290 <MPSL_IRQ_RADIO_Handler+0x474>
    9242:	340a      	adds	r4, #10
    9244:	f145 0500 	adc.w	r5, r5, #0
    9248:	f1b8 0f00 	cmp.w	r8, #0
    924c:	d017      	beq.n	927e <MPSL_IRQ_RADIO_Handler+0x462>
    924e:	f003 f917 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9252:	b9a0      	cbnz	r0, 927e <MPSL_IRQ_RADIO_Handler+0x462>
    9254:	f002 ffec 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9258:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    925c:	bf08      	it	eq
    925e:	200d      	moveq	r0, #13
    9260:	d00b      	beq.n	927a <MPSL_IRQ_RADIO_Handler+0x45e>
    9262:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9266:	3856      	subs	r0, #86	; 0x56
    9268:	bf08      	it	eq
    926a:	201c      	moveq	r0, #28
    926c:	d005      	beq.n	927a <MPSL_IRQ_RADIO_Handler+0x45e>
    926e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9272:	389f      	subs	r0, #159	; 0x9f
    9274:	bf14      	ite	ne
    9276:	4630      	movne	r0, r6
    9278:	2032      	moveq	r0, #50	; 0x32
    927a:	1904      	adds	r4, r0, r4
    927c:	4175      	adcs	r5, r6
    927e:	f1b9 0f00 	cmp.w	r9, #0
    9282:	d105      	bne.n	9290 <MPSL_IRQ_RADIO_Handler+0x474>
    9284:	9800      	ldr	r0, [sp, #0]
    9286:	4287      	cmp	r7, r0
    9288:	d902      	bls.n	9290 <MPSL_IRQ_RADIO_Handler+0x474>
    928a:	1a38      	subs	r0, r7, r0
    928c:	1904      	adds	r4, r0, r4
    928e:	4175      	adcs	r5, r6
    9290:	b003      	add	sp, #12
    9292:	4620      	mov	r0, r4
    9294:	4629      	mov	r1, r5
    9296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    929a:	0000      	.short	0x0000
    929c:	20000f78 	.word	0x20000f78
    92a0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92a4:	b081      	sub	sp, #4
    92a6:	4605      	mov	r5, r0
    92a8:	9802      	ldr	r0, [sp, #8]
    92aa:	494a      	ldr	r1, [pc, #296]	; (93d4 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    92ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    92b0:	4408      	add	r0, r1
    92b2:	2600      	movs	r6, #0
    92b4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    92b8:	2020      	movs	r0, #32
    92ba:	4692      	mov	sl, r2
    92bc:	7010      	strb	r0, [r2, #0]
    92be:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    92c2:	2c20      	cmp	r4, #32
    92c4:	d036      	beq.n	9334 <MPSL_IRQ_RADIO_Handler+0x518>
    92c6:	9902      	ldr	r1, [sp, #8]
    92c8:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    92cc:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    92d0:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    92d4:	e9d5 7300 	ldrd	r7, r3, [r5]
    92d8:	f850 8f08 	ldr.w	r8, [r0, #8]!
    92dc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    92e0:	eb18 0202 	adds.w	r2, r8, r2
    92e4:	4171      	adcs	r1, r6
    92e6:	1aba      	subs	r2, r7, r2
    92e8:	eb73 0101 	sbcs.w	r1, r3, r1
    92ec:	d322      	bcc.n	9334 <MPSL_IRQ_RADIO_Handler+0x518>
    92ee:	89e9      	ldrh	r1, [r5, #14]
    92f0:	b1c9      	cbz	r1, 9326 <MPSL_IRQ_RADIO_Handler+0x50a>
    92f2:	89c0      	ldrh	r0, [r0, #14]
    92f4:	b9b8      	cbnz	r0, 9326 <MPSL_IRQ_RADIO_Handler+0x50a>
    92f6:	f002 ff9b 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92fa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92fe:	bf08      	it	eq
    9300:	200d      	moveq	r0, #13
    9302:	d00b      	beq.n	931c <MPSL_IRQ_RADIO_Handler+0x500>
    9304:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9308:	3856      	subs	r0, #86	; 0x56
    930a:	bf08      	it	eq
    930c:	201c      	moveq	r0, #28
    930e:	d005      	beq.n	931c <MPSL_IRQ_RADIO_Handler+0x500>
    9310:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9314:	389f      	subs	r0, #159	; 0x9f
    9316:	bf14      	ite	ne
    9318:	4630      	movne	r0, r6
    931a:	2032      	moveq	r0, #50	; 0x32
    931c:	1c41      	adds	r1, r0, #1
    931e:	ebb7 0008 	subs.w	r0, r7, r8
    9322:	4288      	cmp	r0, r1
    9324:	db06      	blt.n	9334 <MPSL_IRQ_RADIO_Handler+0x518>
    9326:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    932a:	f88a 4000 	strb.w	r4, [sl]
    932e:	7844      	ldrb	r4, [r0, #1]
    9330:	2c20      	cmp	r4, #32
    9332:	d1cd      	bne.n	92d0 <MPSL_IRQ_RADIO_Handler+0x4b4>
    9334:	9804      	ldr	r0, [sp, #16]
    9336:	f89a 1000 	ldrb.w	r1, [sl]
    933a:	2c20      	cmp	r4, #32
    933c:	7001      	strb	r1, [r0, #0]
    933e:	9f04      	ldr	r7, [sp, #16]
    9340:	9802      	ldr	r0, [sp, #8]
    9342:	d042      	beq.n	93ca <MPSL_IRQ_RADIO_Handler+0x5ae>
    9344:	4924      	ldr	r1, [pc, #144]	; (93d8 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    9346:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    934a:	9000      	str	r0, [sp, #0]
    934c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    9350:	f8d5 b000 	ldr.w	fp, [r5]
    9354:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    9358:	f108 0008 	add.w	r0, r8, #8
    935c:	eb1b 0201 	adds.w	r2, fp, r1
    9360:	eb43 0106 	adc.w	r1, r3, r6
    9364:	e9d0 a300 	ldrd	sl, r3, [r0]
    9368:	ebba 0202 	subs.w	r2, sl, r2
    936c:	eb73 0101 	sbcs.w	r1, r3, r1
    9370:	d31b      	bcc.n	93aa <MPSL_IRQ_RADIO_Handler+0x58e>
    9372:	89c0      	ldrh	r0, [r0, #14]
    9374:	b348      	cbz	r0, 93ca <MPSL_IRQ_RADIO_Handler+0x5ae>
    9376:	89e8      	ldrh	r0, [r5, #14]
    9378:	bb38      	cbnz	r0, 93ca <MPSL_IRQ_RADIO_Handler+0x5ae>
    937a:	f002 ff59 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    937e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9382:	bf08      	it	eq
    9384:	200d      	moveq	r0, #13
    9386:	d00b      	beq.n	93a0 <MPSL_IRQ_RADIO_Handler+0x584>
    9388:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    938c:	3856      	subs	r0, #86	; 0x56
    938e:	bf08      	it	eq
    9390:	201c      	moveq	r0, #28
    9392:	d005      	beq.n	93a0 <MPSL_IRQ_RADIO_Handler+0x584>
    9394:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9398:	389f      	subs	r0, #159	; 0x9f
    939a:	bf14      	ite	ne
    939c:	4630      	movne	r0, r6
    939e:	2032      	moveq	r0, #50	; 0x32
    93a0:	1c41      	adds	r1, r0, #1
    93a2:	ebba 000b 	subs.w	r0, sl, fp
    93a6:	4288      	cmp	r0, r1
    93a8:	da0f      	bge.n	93ca <MPSL_IRQ_RADIO_Handler+0x5ae>
    93aa:	703c      	strb	r4, [r7, #0]
    93ac:	f898 1018 	ldrb.w	r1, [r8, #24]
    93b0:	7c28      	ldrb	r0, [r5, #16]
    93b2:	4288      	cmp	r0, r1
    93b4:	d303      	bcc.n	93be <MPSL_IRQ_RADIO_Handler+0x5a2>
    93b6:	b005      	add	sp, #20
    93b8:	2000      	movs	r0, #0
    93ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93be:	9800      	ldr	r0, [sp, #0]
    93c0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    93c4:	7844      	ldrb	r4, [r0, #1]
    93c6:	2c20      	cmp	r4, #32
    93c8:	d1c0      	bne.n	934c <MPSL_IRQ_RADIO_Handler+0x530>
    93ca:	b005      	add	sp, #20
    93cc:	2001      	movs	r0, #1
    93ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93d2:	0000      	.short	0x0000
    93d4:	20000f78 	.word	0x20000f78
    93d8:	20000ef8 	.word	0x20000ef8
    93dc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    93e0:	b09c      	sub	sp, #112	; 0x70
    93e2:	461f      	mov	r7, r3
    93e4:	f002 fa84 	bl	b8f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    93e8:	4604      	mov	r4, r0
    93ea:	460d      	mov	r5, r1
    93ec:	f002 fd48 	bl	be80 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    93f0:	4606      	mov	r6, r0
    93f2:	981e      	ldr	r0, [sp, #120]	; 0x78
    93f4:	2801      	cmp	r0, #1
    93f6:	bf18      	it	ne
    93f8:	2802      	cmpne	r0, #2
    93fa:	d005      	beq.n	9408 <MPSL_IRQ_RADIO_Handler+0x5ec>
    93fc:	f640 1156 	movw	r1, #2390	; 0x956
    9400:	f04f 0070 	mov.w	r0, #112	; 0x70
    9404:	f003 f8b4 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9408:	49fe      	ldr	r1, [pc, #1016]	; (9804 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    940a:	2001      	movs	r0, #1
    940c:	6008      	str	r0, [r1, #0]
    940e:	49fe      	ldr	r1, [pc, #1016]	; (9808 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    9410:	6889      	ldr	r1, [r1, #8]
    9412:	6008      	str	r0, [r1, #0]
    9414:	2000      	movs	r0, #0
    9416:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    941a:	900c      	str	r0, [sp, #48]	; 0x30
    941c:	1e40      	subs	r0, r0, #1
    941e:	900d      	str	r0, [sp, #52]	; 0x34
    9420:	48fa      	ldr	r0, [pc, #1000]	; (980c <MPSL_IRQ_RADIO_Handler+0x9f0>)
    9422:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    9426:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    942a:	f100 0108 	add.w	r1, r0, #8
    942e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    9432:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    9436:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    943a:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    943e:	980e      	ldr	r0, [sp, #56]	; 0x38
    9440:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9444:	f007 f91e 	bl	10684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9448:	4602      	mov	r2, r0
    944a:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    944e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9452:	4bef      	ldr	r3, [pc, #956]	; (9810 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    9454:	4440      	add	r0, r8
    9456:	1c41      	adds	r1, r0, #1
    9458:	1850      	adds	r0, r2, r1
    945a:	429a      	cmp	r2, r3
    945c:	d856      	bhi.n	950c <MPSL_IRQ_RADIO_Handler+0x6f0>
    945e:	4aed      	ldr	r2, [pc, #948]	; (9814 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9460:	4291      	cmp	r1, r2
    9462:	dc5b      	bgt.n	951c <MPSL_IRQ_RADIO_Handler+0x700>
    9464:	4252      	negs	r2, r2
    9466:	4291      	cmp	r1, r2
    9468:	db60      	blt.n	952c <MPSL_IRQ_RADIO_Handler+0x710>
    946a:	1c59      	adds	r1, r3, #1
    946c:	4281      	cmp	r1, r0
    946e:	bfdc      	itt	le
    9470:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9474:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9478:	dd05      	ble.n	9486 <MPSL_IRQ_RADIO_Handler+0x66a>
    947a:	2800      	cmp	r0, #0
    947c:	bfbc      	itt	lt
    947e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9482:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9486:	9017      	str	r0, [sp, #92]	; 0x5c
    9488:	48e3      	ldr	r0, [pc, #908]	; (9818 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    948a:	f1b8 0f00 	cmp.w	r8, #0
    948e:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    9492:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    9496:	bf14      	ite	ne
    9498:	f04f 0a01 	movne.w	sl, #1
    949c:	f04f 0a00 	moveq.w	sl, #0
    94a0:	f002 ffee 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    94a4:	9019      	str	r0, [sp, #100]	; 0x64
    94a6:	f1ba 0f00 	cmp.w	sl, #0
    94aa:	d00b      	beq.n	94c4 <MPSL_IRQ_RADIO_Handler+0x6a8>
    94ac:	49db      	ldr	r1, [pc, #876]	; (981c <MPSL_IRQ_RADIO_Handler+0xa00>)
    94ae:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    94b2:	ea6f 0200 	mvn.w	r2, r0
    94b6:	ea72 0001 	orns	r0, r2, r1
    94ba:	bf02      	ittt	eq
    94bc:	9819      	ldreq	r0, [sp, #100]	; 0x64
    94be:	2800      	cmpeq	r0, #0
    94c0:	2701      	moveq	r7, #1
    94c2:	d001      	beq.n	94c8 <MPSL_IRQ_RADIO_Handler+0x6ac>
    94c4:	f04f 0700 	mov.w	r7, #0
    94c8:	f002 feb2 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94cc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94d0:	bf08      	it	eq
    94d2:	200d      	moveq	r0, #13
    94d4:	d00b      	beq.n	94ee <MPSL_IRQ_RADIO_Handler+0x6d2>
    94d6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94da:	3856      	subs	r0, #86	; 0x56
    94dc:	bf08      	it	eq
    94de:	201c      	moveq	r0, #28
    94e0:	d005      	beq.n	94ee <MPSL_IRQ_RADIO_Handler+0x6d2>
    94e2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94e6:	389f      	subs	r0, #159	; 0x9f
    94e8:	bf14      	ite	ne
    94ea:	2000      	movne	r0, #0
    94ec:	2032      	moveq	r0, #50	; 0x32
    94ee:	f04f 0900 	mov.w	r9, #0
    94f2:	46cb      	mov	fp, r9
    94f4:	9016      	str	r0, [sp, #88]	; 0x58
    94f6:	4546      	cmp	r6, r8
    94f8:	d936      	bls.n	9568 <MPSL_IRQ_RADIO_Handler+0x74c>
    94fa:	9917      	ldr	r1, [sp, #92]	; 0x5c
    94fc:	43f3      	mvns	r3, r6
    94fe:	f8df c310 	ldr.w	ip, [pc, #784]	; 9810 <MPSL_IRQ_RADIO_Handler+0x9f4>
    9502:	18c8      	adds	r0, r1, r3
    9504:	46e9      	mov	r9, sp
    9506:	aa1a      	add	r2, sp, #104	; 0x68
    9508:	4561      	cmp	r1, ip
    950a:	d904      	bls.n	9516 <MPSL_IRQ_RADIO_Handler+0x6fa>
    950c:	f240 517f 	movw	r1, #1407	; 0x57f
    9510:	2070      	movs	r0, #112	; 0x70
    9512:	f003 f82d 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9516:	49bf      	ldr	r1, [pc, #764]	; (9814 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9518:	428b      	cmp	r3, r1
    951a:	dd04      	ble.n	9526 <MPSL_IRQ_RADIO_Handler+0x70a>
    951c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    9520:	2070      	movs	r0, #112	; 0x70
    9522:	f003 f825 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9526:	49be      	ldr	r1, [pc, #760]	; (9820 <MPSL_IRQ_RADIO_Handler+0xa04>)
    9528:	428b      	cmp	r3, r1
    952a:	da04      	bge.n	9536 <MPSL_IRQ_RADIO_Handler+0x71a>
    952c:	f240 5181 	movw	r1, #1409	; 0x581
    9530:	2070      	movs	r0, #112	; 0x70
    9532:	f003 f81d 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9536:	49bb      	ldr	r1, [pc, #748]	; (9824 <MPSL_IRQ_RADIO_Handler+0xa08>)
    9538:	4281      	cmp	r1, r0
    953a:	bfdc      	itt	le
    953c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9540:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9544:	dd05      	ble.n	9552 <MPSL_IRQ_RADIO_Handler+0x736>
    9546:	2800      	cmp	r0, #0
    9548:	bfbc      	itt	lt
    954a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    954e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9552:	4649      	mov	r1, r9
    9554:	f001 ff7c 	bl	b450 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9558:	9800      	ldr	r0, [sp, #0]
    955a:	990e      	ldr	r1, [sp, #56]	; 0x38
    955c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9560:	9000      	str	r0, [sp, #0]
    9562:	1a08      	subs	r0, r1, r0
    9564:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    9568:	2f00      	cmp	r7, #0
    956a:	bf18      	it	ne
    956c:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    9570:	d105      	bne.n	957e <MPSL_IRQ_RADIO_Handler+0x762>
    9572:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9576:	2800      	cmp	r0, #0
    9578:	bf18      	it	ne
    957a:	f04f 0b02 	movne.w	fp, #2
    957e:	43e0      	mvns	r0, r4
    9580:	ea70 0005 	orns	r0, r0, r5
    9584:	d022      	beq.n	95cc <MPSL_IRQ_RADIO_Handler+0x7b0>
    9586:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    958a:	1a22      	subs	r2, r4, r0
    958c:	eb75 0201 	sbcs.w	r2, r5, r1
    9590:	d20c      	bcs.n	95ac <MPSL_IRQ_RADIO_Handler+0x790>
    9592:	1b02      	subs	r2, r0, r4
    9594:	eb61 0105 	sbc.w	r1, r1, r5
    9598:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    959c:	f171 0100 	sbcs.w	r1, r1, #0
    95a0:	d311      	bcc.n	95c6 <MPSL_IRQ_RADIO_Handler+0x7aa>
    95a2:	f640 1195 	movw	r1, #2453	; 0x995
    95a6:	2070      	movs	r0, #112	; 0x70
    95a8:	f002 ffe2 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    95ac:	1a22      	subs	r2, r4, r0
    95ae:	eb65 0101 	sbc.w	r1, r5, r1
    95b2:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    95b6:	f171 0100 	sbcs.w	r1, r1, #0
    95ba:	d304      	bcc.n	95c6 <MPSL_IRQ_RADIO_Handler+0x7aa>
    95bc:	f640 1199 	movw	r1, #2457	; 0x999
    95c0:	2070      	movs	r0, #112	; 0x70
    95c2:	f002 ffd5 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    95c6:	1b00      	subs	r0, r0, r4
    95c8:	2801      	cmp	r0, #1
    95ca:	da03      	bge.n	95d4 <MPSL_IRQ_RADIO_Handler+0x7b8>
    95cc:	981c      	ldr	r0, [sp, #112]	; 0x70
    95ce:	901a      	str	r0, [sp, #104]	; 0x68
    95d0:	2003      	movs	r0, #3
    95d2:	e00d      	b.n	95f0 <MPSL_IRQ_RADIO_Handler+0x7d4>
    95d4:	b157      	cbz	r7, 95ec <MPSL_IRQ_RADIO_Handler+0x7d0>
    95d6:	4891      	ldr	r0, [pc, #580]	; (981c <MPSL_IRQ_RADIO_Handler+0xa00>)
    95d8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    95dc:	b130      	cbz	r0, 95ec <MPSL_IRQ_RADIO_Handler+0x7d0>
    95de:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    95e2:	f110 0b00 	adds.w	fp, r0, #0
    95e6:	bf18      	it	ne
    95e8:	f04f 0b02 	movne.w	fp, #2
    95ec:	2000      	movs	r0, #0
    95ee:	941a      	str	r4, [sp, #104]	; 0x68
    95f0:	4483      	add	fp, r0
    95f2:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    95f6:	ebb0 0009 	subs.w	r0, r0, r9
    95fa:	f162 0100 	sbc.w	r1, r2, #0
    95fe:	1e42      	subs	r2, r0, #1
    9600:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9602:	f141 3eff 	adc.w	lr, r1, #4294967295
    9606:	1ad3      	subs	r3, r2, r3
    9608:	455b      	cmp	r3, fp
    960a:	db08      	blt.n	961e <MPSL_IRQ_RADIO_Handler+0x802>
    960c:	f1b9 0f00 	cmp.w	r9, #0
    9610:	d032      	beq.n	9678 <MPSL_IRQ_RADIO_Handler+0x85c>
    9612:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9614:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    9618:	444b      	add	r3, r9
    961a:	9310      	str	r3, [sp, #64]	; 0x40
    961c:	e02c      	b.n	9678 <MPSL_IRQ_RADIO_Handler+0x85c>
    961e:	f1b9 0f00 	cmp.w	r9, #0
    9622:	d005      	beq.n	9630 <MPSL_IRQ_RADIO_Handler+0x814>
    9624:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    9628:	b920      	cbnz	r0, 9634 <MPSL_IRQ_RADIO_Handler+0x818>
    962a:	f002 fc1f 	bl	be6c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    962e:	b108      	cbz	r0, 9634 <MPSL_IRQ_RADIO_Handler+0x818>
    9630:	b9af      	cbnz	r7, 965e <MPSL_IRQ_RADIO_Handler+0x842>
    9632:	e00c      	b.n	964e <MPSL_IRQ_RADIO_Handler+0x832>
    9634:	b92f      	cbnz	r7, 9642 <MPSL_IRQ_RADIO_Handler+0x826>
    9636:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    963a:	2800      	cmp	r0, #0
    963c:	bf18      	it	ne
    963e:	f1ab 0b02 	subne.w	fp, fp, #2
    9642:	f04f 0900 	mov.w	r9, #0
    9646:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    964a:	464e      	mov	r6, r9
    964c:	e007      	b.n	965e <MPSL_IRQ_RADIO_Handler+0x842>
    964e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9652:	b120      	cbz	r0, 965e <MPSL_IRQ_RADIO_Handler+0x842>
    9654:	2000      	movs	r0, #0
    9656:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    965a:	f1ab 0b02 	sub.w	fp, fp, #2
    965e:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    9662:	ebb0 0009 	subs.w	r0, r0, r9
    9666:	f162 0100 	sbc.w	r1, r2, #0
    966a:	1e42      	subs	r2, r0, #1
    966c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    966e:	f141 3eff 	adc.w	lr, r1, #4294967295
    9672:	1ad3      	subs	r3, r2, r3
    9674:	455b      	cmp	r3, fp
    9676:	db7d      	blt.n	9774 <MPSL_IRQ_RADIO_Handler+0x958>
    9678:	9b19      	ldr	r3, [sp, #100]	; 0x64
    967a:	b99b      	cbnz	r3, 96a4 <MPSL_IRQ_RADIO_Handler+0x888>
    967c:	4b67      	ldr	r3, [pc, #412]	; (981c <MPSL_IRQ_RADIO_Handler+0xa00>)
    967e:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    9682:	ea6f 090c 	mvn.w	r9, ip
    9686:	ea79 0903 	orns	r9, r9, r3
    968a:	d00b      	beq.n	96a4 <MPSL_IRQ_RADIO_Handler+0x888>
    968c:	ebb0 0c0c 	subs.w	ip, r0, ip
    9690:	9816      	ldr	r0, [sp, #88]	; 0x58
    9692:	eb61 0303 	sbc.w	r3, r1, r3
    9696:	ebbc 0000 	subs.w	r0, ip, r0
    969a:	f173 0000 	sbcs.w	r0, r3, #0
    969e:	bf38      	it	cc
    96a0:	2000      	movcc	r0, #0
    96a2:	d300      	bcc.n	96a6 <MPSL_IRQ_RADIO_Handler+0x88a>
    96a4:	2001      	movs	r0, #1
    96a6:	ea3a 0000 	bics.w	r0, sl, r0
    96aa:	d163      	bne.n	9774 <MPSL_IRQ_RADIO_Handler+0x958>
    96ac:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    96b0:	e9cd 0107 	strd	r0, r1, [sp, #28]
    96b4:	981e      	ldr	r0, [sp, #120]	; 0x78
    96b6:	4691      	mov	r9, r2
    96b8:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    96bc:	46f3      	mov	fp, lr
    96be:	2700      	movs	r7, #0
    96c0:	f002 fdb6 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    96c4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    96c8:	bf08      	it	eq
    96ca:	200d      	moveq	r0, #13
    96cc:	d00b      	beq.n	96e6 <MPSL_IRQ_RADIO_Handler+0x8ca>
    96ce:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    96d2:	3856      	subs	r0, #86	; 0x56
    96d4:	bf08      	it	eq
    96d6:	201c      	moveq	r0, #28
    96d8:	d005      	beq.n	96e6 <MPSL_IRQ_RADIO_Handler+0x8ca>
    96da:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    96de:	389f      	subs	r0, #159	; 0x9f
    96e0:	bf14      	ite	ne
    96e2:	4638      	movne	r0, r7
    96e4:	2032      	moveq	r0, #50	; 0x32
    96e6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    96ea:	300b      	adds	r0, #11
    96ec:	ebb9 0202 	subs.w	r2, r9, r2
    96f0:	eb6b 0303 	sbc.w	r3, fp, r3
    96f4:	1a10      	subs	r0, r2, r0
    96f6:	f173 0000 	sbcs.w	r0, r3, #0
    96fa:	d22a      	bcs.n	9752 <MPSL_IRQ_RADIO_Handler+0x936>
    96fc:	9819      	ldr	r0, [sp, #100]	; 0x64
    96fe:	2801      	cmp	r0, #1
    9700:	d002      	beq.n	9708 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9702:	9818      	ldr	r0, [sp, #96]	; 0x60
    9704:	b148      	cbz	r0, 971a <MPSL_IRQ_RADIO_Handler+0x8fe>
    9706:	e017      	b.n	9738 <MPSL_IRQ_RADIO_Handler+0x91c>
    9708:	43e0      	mvns	r0, r4
    970a:	ea70 0005 	orns	r0, r0, r5
    970e:	d127      	bne.n	9760 <MPSL_IRQ_RADIO_Handler+0x944>
    9710:	f640 01d7 	movw	r1, #2263	; 0x8d7
    9714:	2070      	movs	r0, #112	; 0x70
    9716:	f002 ff2b 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    971a:	43e0      	mvns	r0, r4
    971c:	ea70 0005 	orns	r0, r0, r5
    9720:	d00a      	beq.n	9738 <MPSL_IRQ_RADIO_Handler+0x91c>
    9722:	d01d      	beq.n	9760 <MPSL_IRQ_RADIO_Handler+0x944>
    9724:	ebb4 0009 	subs.w	r0, r4, r9
    9728:	eb65 010b 	sbc.w	r1, r5, fp
    972c:	2300      	movs	r3, #0
    972e:	f1d0 0204 	rsbs	r2, r0, #4
    9732:	eb73 0201 	sbcs.w	r2, r3, r1
    9736:	da06      	bge.n	9746 <MPSL_IRQ_RADIO_Handler+0x92a>
    9738:	464c      	mov	r4, r9
    973a:	465d      	mov	r5, fp
    973c:	4620      	mov	r0, r4
    973e:	4629      	mov	r1, r5
    9740:	f001 ffb6 	bl	b6b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9744:	e00c      	b.n	9760 <MPSL_IRQ_RADIO_Handler+0x944>
    9746:	2200      	movs	r2, #0
    9748:	1a10      	subs	r0, r2, r0
    974a:	eb72 0001 	sbcs.w	r0, r2, r1
    974e:	db11      	blt.n	9774 <MPSL_IRQ_RADIO_Handler+0x958>
    9750:	e006      	b.n	9760 <MPSL_IRQ_RADIO_Handler+0x944>
    9752:	464c      	mov	r4, r9
    9754:	465d      	mov	r5, fp
    9756:	4620      	mov	r0, r4
    9758:	4629      	mov	r1, r5
    975a:	f001 ffa9 	bl	b6b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    975e:	4657      	mov	r7, sl
    9760:	43e1      	mvns	r1, r4
    9762:	ea71 0005 	orns	r0, r1, r5
    9766:	d071      	beq.n	984c <MPSL_IRQ_RADIO_Handler+0xa30>
    9768:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    976c:	f04f 0b00 	mov.w	fp, #0
    9770:	990e      	ldr	r1, [sp, #56]	; 0x38
    9772:	e000      	b.n	9776 <MPSL_IRQ_RADIO_Handler+0x95a>
    9774:	e06f      	b.n	9856 <MPSL_IRQ_RADIO_Handler+0xa3a>
    9776:	1a0b      	subs	r3, r1, r0
    9778:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    977c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9780:	eb11 010c 	adds.w	r1, r1, ip
    9784:	1a08      	subs	r0, r1, r0
    9786:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    978a:	2b01      	cmp	r3, #1
    978c:	d363      	bcc.n	9856 <MPSL_IRQ_RADIO_Handler+0xa3a>
    978e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    9792:	bf98      	it	ls
    9794:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    9798:	d85d      	bhi.n	9856 <MPSL_IRQ_RADIO_Handler+0xa3a>
    979a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    979e:	f006 ff71 	bl	10684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    97a2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    97a4:	4a1b      	ldr	r2, [pc, #108]	; (9814 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    97a6:	1a0d      	subs	r5, r1, r0
    97a8:	1aaa      	subs	r2, r5, r2
    97aa:	f17b 0200 	sbcs.w	r2, fp, #0
    97ae:	d316      	bcc.n	97de <MPSL_IRQ_RADIO_Handler+0x9c2>
    97b0:	4b18      	ldr	r3, [pc, #96]	; (9814 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    97b2:	1a42      	subs	r2, r0, r1
    97b4:	1ad3      	subs	r3, r2, r3
    97b6:	f17b 0300 	sbcs.w	r3, fp, #0
    97ba:	d310      	bcc.n	97de <MPSL_IRQ_RADIO_Handler+0x9c2>
    97bc:	4b14      	ldr	r3, [pc, #80]	; (9810 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    97be:	42ab      	cmp	r3, r5
    97c0:	bf3e      	ittt	cc
    97c2:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    97c6:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    97ca:	1845      	addcc	r5, r0, r1
    97cc:	d307      	bcc.n	97de <MPSL_IRQ_RADIO_Handler+0x9c2>
    97ce:	4293      	cmp	r3, r2
    97d0:	d245      	bcs.n	985e <MPSL_IRQ_RADIO_Handler+0xa42>
    97d2:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    97d6:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    97da:	4408      	add	r0, r1
    97dc:	4245      	negs	r5, r0
    97de:	f8df 903c 	ldr.w	r9, [pc, #60]	; 981c <MPSL_IRQ_RADIO_Handler+0xa00>
    97e2:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    97e6:	b378      	cbz	r0, 9848 <MPSL_IRQ_RADIO_Handler+0xa2c>
    97e8:	981e      	ldr	r0, [sp, #120]	; 0x78
    97ea:	2801      	cmp	r0, #1
    97ec:	d005      	beq.n	97fa <MPSL_IRQ_RADIO_Handler+0x9de>
    97ee:	2002      	movs	r0, #2
    97f0:	f002 f9ea 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97f4:	2001      	movs	r0, #1
    97f6:	f002 f9e7 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97fa:	45b0      	cmp	r8, r6
    97fc:	d240      	bcs.n	9880 <MPSL_IRQ_RADIO_Handler+0xa64>
    97fe:	eba5 0106 	sub.w	r1, r5, r6
    9802:	e011      	b.n	9828 <MPSL_IRQ_RADIO_Handler+0xa0c>
    9804:	40000508 	.word	0x40000508
    9808:	200002f8 	.word	0x200002f8
    980c:	20000af8 	.word	0x20000af8
    9810:	1e847fff 	.word	0x1e847fff
    9814:	0f424000 	.word	0x0f424000
    9818:	20000ef8 	.word	0x20000ef8
    981c:	20000f78 	.word	0x20000f78
    9820:	f0bdc000 	.word	0xf0bdc000
    9824:	1e848000 	.word	0x1e848000
    9828:	f04f 0002 	mov.w	r0, #2
    982c:	f002 f912 	bl	ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9830:	b398      	cbz	r0, 989a <MPSL_IRQ_RADIO_Handler+0xa7e>
    9832:	f1b8 0f00 	cmp.w	r8, #0
    9836:	bf1c      	itt	ne
    9838:	eba5 0108 	subne.w	r1, r5, r8
    983c:	2001      	movne	r0, #1
    983e:	d035      	beq.n	98ac <MPSL_IRQ_RADIO_Handler+0xa90>
    9840:	f002 f908 	bl	ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9844:	b348      	cbz	r0, 989a <MPSL_IRQ_RADIO_Handler+0xa7e>
    9846:	e031      	b.n	98ac <MPSL_IRQ_RADIO_Handler+0xa90>
    9848:	e00e      	b.n	9868 <MPSL_IRQ_RADIO_Handler+0xa4c>
    984a:	e7ff      	b.n	984c <MPSL_IRQ_RADIO_Handler+0xa30>
    984c:	f640 2103 	movw	r1, #2563	; 0xa03
    9850:	2070      	movs	r0, #112	; 0x70
    9852:	f002 fe8d 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9856:	b020      	add	sp, #128	; 0x80
    9858:	2000      	movs	r0, #0
    985a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    985e:	f640 21d7 	movw	r1, #2775	; 0xad7
    9862:	2070      	movs	r0, #112	; 0x70
    9864:	f002 fe84 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9868:	45b0      	cmp	r8, r6
    986a:	bf34      	ite	cc
    986c:	4630      	movcc	r0, r6
    986e:	4640      	movcs	r0, r8
    9870:	301e      	adds	r0, #30
    9872:	42a8      	cmp	r0, r5
    9874:	dbb8      	blt.n	97e8 <MPSL_IRQ_RADIO_Handler+0x9cc>
    9876:	f640 2117 	movw	r1, #2583	; 0xa17
    987a:	2070      	movs	r0, #112	; 0x70
    987c:	f002 fe78 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9880:	d90c      	bls.n	989c <MPSL_IRQ_RADIO_Handler+0xa80>
    9882:	eba5 0108 	sub.w	r1, r5, r8
    9886:	2001      	movs	r0, #1
    9888:	f002 f8e4 	bl	ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    988c:	b128      	cbz	r0, 989a <MPSL_IRQ_RADIO_Handler+0xa7e>
    988e:	2e00      	cmp	r6, #0
    9890:	bf1c      	itt	ne
    9892:	1ba9      	subne	r1, r5, r6
    9894:	2002      	movne	r0, #2
    9896:	d009      	beq.n	98ac <MPSL_IRQ_RADIO_Handler+0xa90>
    9898:	e7d2      	b.n	9840 <MPSL_IRQ_RADIO_Handler+0xa24>
    989a:	e034      	b.n	9906 <MPSL_IRQ_RADIO_Handler+0xaea>
    989c:	ea56 0008 	orrs.w	r0, r6, r8
    98a0:	d004      	beq.n	98ac <MPSL_IRQ_RADIO_Handler+0xa90>
    98a2:	f640 113a 	movw	r1, #2362	; 0x93a
    98a6:	2070      	movs	r0, #112	; 0x70
    98a8:	f002 fe62 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98ac:	4629      	mov	r1, r5
    98ae:	2000      	movs	r0, #0
    98b0:	f002 f8d0 	bl	ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    98b4:	b338      	cbz	r0, 9906 <MPSL_IRQ_RADIO_Handler+0xaea>
    98b6:	2601      	movs	r6, #1
    98b8:	f1ba 0f00 	cmp.w	sl, #0
    98bc:	bf04      	itt	eq
    98be:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    98c2:	2800      	cmpeq	r0, #0
    98c4:	d000      	beq.n	98c8 <MPSL_IRQ_RADIO_Handler+0xaac>
    98c6:	b347      	cbz	r7, 991a <MPSL_IRQ_RADIO_Handler+0xafe>
    98c8:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    98cc:	ea6f 0101 	mvn.w	r1, r1
    98d0:	ea71 0000 	orns	r0, r1, r0
    98d4:	d006      	beq.n	98e4 <MPSL_IRQ_RADIO_Handler+0xac8>
    98d6:	f002 fcb1 	bl	c23c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    98da:	f04f 30ff 	mov.w	r0, #4294967295
    98de:	4601      	mov	r1, r0
    98e0:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    98e4:	b1ff      	cbz	r7, 9926 <MPSL_IRQ_RADIO_Handler+0xb0a>
    98e6:	9816      	ldr	r0, [sp, #88]	; 0x58
    98e8:	1a20      	subs	r0, r4, r0
    98ea:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    98ee:	f04f 0005 	mov.w	r0, #5
    98f2:	f002 f8af 	bl	ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    98f6:	b370      	cbz	r0, 9956 <MPSL_IRQ_RADIO_Handler+0xb3a>
    98f8:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    98fc:	2800      	cmp	r0, #0
    98fe:	bf08      	it	eq
    9900:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    9904:	e017      	b.n	9936 <MPSL_IRQ_RADIO_Handler+0xb1a>
    9906:	2002      	movs	r0, #2
    9908:	f002 f95e 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    990c:	2001      	movs	r0, #1
    990e:	f002 f95b 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9912:	b020      	add	sp, #128	; 0x80
    9914:	2000      	movs	r0, #0
    9916:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    991a:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    991e:	43c0      	mvns	r0, r0
    9920:	ea70 0001 	orns	r0, r0, r1
    9924:	d012      	beq.n	994c <MPSL_IRQ_RADIO_Handler+0xb30>
    9926:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    992a:	b120      	cbz	r0, 9936 <MPSL_IRQ_RADIO_Handler+0xb1a>
    992c:	2005      	movs	r0, #5
    992e:	f002 f94b 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9932:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    9936:	eba5 0008 	sub.w	r0, r5, r8
    993a:	f1a0 0119 	sub.w	r1, r0, #25
    993e:	2900      	cmp	r1, #0
    9940:	dc0f      	bgt.n	9962 <MPSL_IRQ_RADIO_Handler+0xb46>
    9942:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    9946:	2070      	movs	r0, #112	; 0x70
    9948:	f002 fe12 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    994c:	f002 fc92 	bl	c274 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9950:	f002 f85e 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9954:	e7c4      	b.n	98e0 <MPSL_IRQ_RADIO_Handler+0xac4>
    9956:	e7ff      	b.n	9958 <MPSL_IRQ_RADIO_Handler+0xb3c>
    9958:	f240 21e6 	movw	r1, #742	; 0x2e6
    995c:	2070      	movs	r0, #112	; 0x70
    995e:	f002 fe07 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9962:	2003      	movs	r0, #3
    9964:	f002 f876 	bl	ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9968:	b338      	cbz	r0, 99ba <MPSL_IRQ_RADIO_Handler+0xb9e>
    996a:	4816      	ldr	r0, [pc, #88]	; (99c4 <MPSL_IRQ_RADIO_Handler+0xba8>)
    996c:	6880      	ldr	r0, [r0, #8]
    996e:	f8c0 b000 	str.w	fp, [r0]
    9972:	4815      	ldr	r0, [pc, #84]	; (99c8 <MPSL_IRQ_RADIO_Handler+0xbac>)
    9974:	f8c0 b000 	str.w	fp, [r0]
    9978:	ac0c      	add	r4, sp, #48	; 0x30
    997a:	4814      	ldr	r0, [pc, #80]	; (99cc <MPSL_IRQ_RADIO_Handler+0xbb0>)
    997c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9980:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9984:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    9988:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    998c:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    9990:	ac10      	add	r4, sp, #64	; 0x40
    9992:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9996:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    999a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    999e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    99a2:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    99a6:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    99aa:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    99ae:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    99b2:	b020      	add	sp, #128	; 0x80
    99b4:	2001      	movs	r0, #1
    99b6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    99ba:	f640 2148 	movw	r1, #2632	; 0xa48
    99be:	2070      	movs	r0, #112	; 0x70
    99c0:	f002 fdd6 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    99c4:	200002f8 	.word	0x200002f8
    99c8:	40000508 	.word	0x40000508
    99cc:	20000ef8 	.word	0x20000ef8
    99d0:	b570      	push	{r4, r5, r6, lr}
    99d2:	4d1d      	ldr	r5, [pc, #116]	; (9a48 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    99d4:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    99d8:	2820      	cmp	r0, #32
    99da:	bf18      	it	ne
    99dc:	bd70      	popne	{r4, r5, r6, pc}
    99de:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    99e2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    99e6:	4428      	add	r0, r5
    99e8:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    99ec:	2c20      	cmp	r4, #32
    99ee:	d026      	beq.n	9a3e <MPSL_IRQ_RADIO_Handler+0xc22>
    99f0:	4b16      	ldr	r3, [pc, #88]	; (9a4c <MPSL_IRQ_RADIO_Handler+0xc30>)
    99f2:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    99f6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    99fa:	7849      	ldrb	r1, [r1, #1]
    99fc:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    9a00:	20ff      	movs	r0, #255	; 0xff
    9a02:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9a06:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    9a0a:	4621      	mov	r1, r4
    9a0c:	2002      	movs	r0, #2
    9a0e:	f000 f88b 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9a12:	2000      	movs	r0, #0
    9a14:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    9a18:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    9a1c:	480c      	ldr	r0, [pc, #48]	; (9a50 <MPSL_IRQ_RADIO_Handler+0xc34>)
    9a1e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9a22:	7e00      	ldrb	r0, [r0, #24]
    9a24:	2800      	cmp	r0, #0
    9a26:	bf08      	it	eq
    9a28:	f002 ff0a 	bleq	c840 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9a2c:	2000      	movs	r0, #0
    9a2e:	4909      	ldr	r1, [pc, #36]	; (9a54 <MPSL_IRQ_RADIO_Handler+0xc38>)
    9a30:	6849      	ldr	r1, [r1, #4]
    9a32:	2900      	cmp	r1, #0
    9a34:	bf08      	it	eq
    9a36:	bd70      	popeq	{r4, r5, r6, pc}
    9a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a3c:	4708      	bx	r1
    9a3e:	f240 311d 	movw	r1, #797	; 0x31d
    9a42:	2070      	movs	r0, #112	; 0x70
    9a44:	f002 fd94 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a48:	20000f78 	.word	0x20000f78
    9a4c:	20000ef8 	.word	0x20000ef8
    9a50:	20000af8 	.word	0x20000af8
    9a54:	200002f8 	.word	0x200002f8
    9a58:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9a5c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9b18 <MPSL_IRQ_RADIO_Handler+0xcfc>
    9a60:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9a64:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9a68:	4440      	add	r0, r8
    9a6a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9a6e:	2c20      	cmp	r4, #32
    9a70:	bf08      	it	eq
    9a72:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9a76:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 9b1c <MPSL_IRQ_RADIO_Handler+0xd00>
    9a7a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 9b20 <MPSL_IRQ_RADIO_Handler+0xd04>
    9a7e:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    9a82:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    9a86:	2607      	movs	r6, #7
    9a88:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9a8c:	2801      	cmp	r0, #1
    9a8e:	d00e      	beq.n	9aae <MPSL_IRQ_RADIO_Handler+0xc92>
    9a90:	2804      	cmp	r0, #4
    9a92:	bf08      	it	eq
    9a94:	2602      	moveq	r6, #2
    9a96:	d00a      	beq.n	9aae <MPSL_IRQ_RADIO_Handler+0xc92>
    9a98:	2805      	cmp	r0, #5
    9a9a:	bf0c      	ite	eq
    9a9c:	2603      	moveq	r6, #3
    9a9e:	2806      	cmpne	r0, #6
    9aa0:	d005      	beq.n	9aae <MPSL_IRQ_RADIO_Handler+0xc92>
    9aa2:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    9aa6:	f04f 0070 	mov.w	r0, #112	; 0x70
    9aaa:	f002 fd61 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9aae:	f1bb 0f00 	cmp.w	fp, #0
    9ab2:	bf18      	it	ne
    9ab4:	f3af 8000 	nopne.w
    9ab8:	f3ef 8010 	mrs	r0, PRIMASK
    9abc:	b672      	cpsid	i
    9abe:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9ac2:	784a      	ldrb	r2, [r1, #1]
    9ac4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9ac8:	4441      	add	r1, r8
    9aca:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    9ace:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    9ad2:	42a2      	cmp	r2, r4
    9ad4:	bf04      	itt	eq
    9ad6:	2220      	moveq	r2, #32
    9ad8:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    9adc:	b1a8      	cbz	r0, 9b0a <MPSL_IRQ_RADIO_Handler+0xcee>
    9ade:	462a      	mov	r2, r5
    9ae0:	4621      	mov	r1, r4
    9ae2:	2001      	movs	r0, #1
    9ae4:	f000 f820 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9ae8:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    9aec:	e9d1 2000 	ldrd	r2, r0, [r1]
    9af0:	4631      	mov	r1, r6
    9af2:	4790      	blx	r2
    9af4:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9af8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9afc:	4440      	add	r0, r8
    9afe:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9b02:	2c20      	cmp	r4, #32
    9b04:	d1bd      	bne.n	9a82 <MPSL_IRQ_RADIO_Handler+0xc66>
    9b06:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b0a:	4806      	ldr	r0, [pc, #24]	; (9b24 <MPSL_IRQ_RADIO_Handler+0xd08>)
    9b0c:	2800      	cmp	r0, #0
    9b0e:	bf18      	it	ne
    9b10:	f3af 8000 	nopne.w
    9b14:	b662      	cpsie	i
    9b16:	e7e2      	b.n	9ade <MPSL_IRQ_RADIO_Handler+0xcc2>
    9b18:	20000f78 	.word	0x20000f78
    9b1c:	00000000 	.word	0x00000000
    9b20:	20000ef8 	.word	0x20000ef8
    9b24:	00000000 	.word	0x00000000
    9b28:	f8df c058 	ldr.w	ip, [pc, #88]	; 9b84 <MPSL_IRQ_RADIO_Handler+0xd68>
    9b2c:	b510      	push	{r4, lr}
    9b2e:	2300      	movs	r3, #0
    9b30:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9b34:	2807      	cmp	r0, #7
    9b36:	d21f      	bcs.n	9b78 <MPSL_IRQ_RADIO_Handler+0xd5c>
    9b38:	e8df f000 	tbb	[pc, r0]
    9b3c:	05050505 	.word	0x05050505
    9b40:	00040404 	.word	0x00040404
    9b44:	2301      	movs	r3, #1
    9b46:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	bf08      	it	eq
    9b4e:	bd10      	popeq	{r4, pc}
    9b50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9b54:	480c      	ldr	r0, [pc, #48]	; (9b88 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    9b56:	4402      	add	r2, r0
    9b58:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    9b5c:	2820      	cmp	r0, #32
    9b5e:	bf0e      	itee	eq
    9b60:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    9b64:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9b68:	7041      	strbne	r1, [r0, #1]
    9b6a:	2020      	movs	r0, #32
    9b6c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9b70:	7058      	strb	r0, [r3, #1]
    9b72:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    9b76:	bd10      	pop	{r4, pc}
    9b78:	f44f 7117 	mov.w	r1, #604	; 0x25c
    9b7c:	2070      	movs	r0, #112	; 0x70
    9b7e:	f002 fcf7 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b82:	0000      	.short	0x0000
    9b84:	20000ef8 	.word	0x20000ef8
    9b88:	20000f78 	.word	0x20000f78
    9b8c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9b90:	460f      	mov	r7, r1
    9b92:	4680      	mov	r8, r0
    9b94:	f8df b154 	ldr.w	fp, [pc, #340]	; 9cec <MPSL_IRQ_RADIO_Handler+0xed0>
    9b98:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9b9c:	4458      	add	r0, fp
    9b9e:	f1b8 0f01 	cmp.w	r8, #1
    9ba2:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9ba6:	4625      	mov	r5, r4
    9ba8:	bf18      	it	ne
    9baa:	f1b8 0f02 	cmpne.w	r8, #2
    9bae:	d005      	beq.n	9bbc <MPSL_IRQ_RADIO_Handler+0xda0>
    9bb0:	f640 217e 	movw	r1, #2686	; 0xa7e
    9bb4:	f04f 0070 	mov.w	r0, #112	; 0x70
    9bb8:	f002 fcda 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bbc:	2d20      	cmp	r5, #32
    9bbe:	d041      	beq.n	9c44 <MPSL_IRQ_RADIO_Handler+0xe28>
    9bc0:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    9bc4:	2600      	movs	r6, #0
    9bc6:	2800      	cmp	r0, #0
    9bc8:	bf08      	it	eq
    9bca:	2602      	moveq	r6, #2
    9bcc:	f001 fd6a 	bl	b6a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9bd0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 9cf0 <MPSL_IRQ_RADIO_Handler+0xed4>
    9bd4:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9bd8:	6899      	ldr	r1, [r3, #8]
    9bda:	691b      	ldr	r3, [r3, #16]
    9bdc:	1a0a      	subs	r2, r1, r0
    9bde:	18c9      	adds	r1, r1, r3
    9be0:	1a09      	subs	r1, r1, r0
    9be2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9bea:	4296      	cmp	r6, r2
    9bec:	bf99      	ittee	ls
    9bee:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9bf2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9bf6:	4a3f      	ldrhi	r2, [pc, #252]	; (9cf4 <MPSL_IRQ_RADIO_Handler+0xed8>)
    9bf8:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9bfc:	d920      	bls.n	9c40 <MPSL_IRQ_RADIO_Handler+0xe24>
    9bfe:	4622      	mov	r2, r4
    9c00:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9c04:	784c      	ldrb	r4, [r1, #1]
    9c06:	2c20      	cmp	r4, #32
    9c08:	d012      	beq.n	9c30 <MPSL_IRQ_RADIO_Handler+0xe14>
    9c0a:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9c0e:	6899      	ldr	r1, [r3, #8]
    9c10:	691b      	ldr	r3, [r3, #16]
    9c12:	ebb1 0c00 	subs.w	ip, r1, r0
    9c16:	18c9      	adds	r1, r1, r3
    9c18:	1a09      	subs	r1, r1, r0
    9c1a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    9c1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c22:	4566      	cmp	r6, ip
    9c24:	bf9c      	itt	ls
    9c26:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9c2a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9c2e:	d8e6      	bhi.n	9bfe <MPSL_IRQ_RADIO_Handler+0xde2>
    9c30:	2a20      	cmp	r2, #32
    9c32:	d005      	beq.n	9c40 <MPSL_IRQ_RADIO_Handler+0xe24>
    9c34:	463b      	mov	r3, r7
    9c36:	2120      	movs	r1, #32
    9c38:	2004      	movs	r0, #4
    9c3a:	f7ff f90d 	bl	8e58 <MPSL_IRQ_RADIO_Handler+0x3c>
    9c3e:	4604      	mov	r4, r0
    9c40:	42ac      	cmp	r4, r5
    9c42:	d113      	bne.n	9c6c <MPSL_IRQ_RADIO_Handler+0xe50>
    9c44:	482c      	ldr	r0, [pc, #176]	; (9cf8 <MPSL_IRQ_RADIO_Handler+0xedc>)
    9c46:	2800      	cmp	r0, #0
    9c48:	bf18      	it	ne
    9c4a:	f3af 8000 	nopne.w
    9c4e:	f001 fedf 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9c52:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    9c56:	2a20      	cmp	r2, #32
    9c58:	d00b      	beq.n	9c72 <MPSL_IRQ_RADIO_Handler+0xe56>
    9c5a:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    9c5e:	1c84      	adds	r4, r0, #2
    9c60:	f141 0c00 	adc.w	ip, r1, #0
    9c64:	1b1b      	subs	r3, r3, r4
    9c66:	eb72 020c 	sbcs.w	r2, r2, ip
    9c6a:	d202      	bcs.n	9c72 <MPSL_IRQ_RADIO_Handler+0xe56>
    9c6c:	2000      	movs	r0, #0
    9c6e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9c72:	2d20      	cmp	r5, #32
    9c74:	d013      	beq.n	9c9e <MPSL_IRQ_RADIO_Handler+0xe82>
    9c76:	462b      	mov	r3, r5
    9c78:	4642      	mov	r2, r8
    9c7a:	f7ff fbaf 	bl	93dc <MPSL_IRQ_RADIO_Handler+0x5c0>
    9c7e:	2800      	cmp	r0, #0
    9c80:	bf1e      	ittt	ne
    9c82:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    9c86:	2002      	movne	r0, #2
    9c88:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9c8c:	463b      	mov	r3, r7
    9c8e:	462a      	mov	r2, r5
    9c90:	2120      	movs	r1, #32
    9c92:	2004      	movs	r0, #4
    9c94:	f7ff f8e0 	bl	8e58 <MPSL_IRQ_RADIO_Handler+0x3c>
    9c98:	2000      	movs	r0, #0
    9c9a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9c9e:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    9ca2:	43c0      	mvns	r0, r0
    9ca4:	ea70 0001 	orns	r0, r0, r1
    9ca8:	d005      	beq.n	9cb6 <MPSL_IRQ_RADIO_Handler+0xe9a>
    9caa:	f002 fac7 	bl	c23c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9cae:	f04f 30ff 	mov.w	r0, #4294967295
    9cb2:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    9cb6:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    9cba:	b128      	cbz	r0, 9cc8 <MPSL_IRQ_RADIO_Handler+0xeac>
    9cbc:	2005      	movs	r0, #5
    9cbe:	f001 ff83 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9cc2:	2000      	movs	r0, #0
    9cc4:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    9cc8:	2004      	movs	r0, #4
    9cca:	f001 ff7d 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9cce:	f001 ffe3 	bl	bc98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9cd2:	490a      	ldr	r1, [pc, #40]	; (9cfc <MPSL_IRQ_RADIO_Handler+0xee0>)
    9cd4:	2020      	movs	r0, #32
    9cd6:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    9cda:	6889      	ldr	r1, [r1, #8]
    9cdc:	2000      	movs	r0, #0
    9cde:	6008      	str	r0, [r1, #0]
    9ce0:	4907      	ldr	r1, [pc, #28]	; (9d00 <MPSL_IRQ_RADIO_Handler+0xee4>)
    9ce2:	6008      	str	r0, [r1, #0]
    9ce4:	2001      	movs	r0, #1
    9ce6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cea:	0000      	.short	0x0000
    9cec:	20000f78 	.word	0x20000f78
    9cf0:	20000af8 	.word	0x20000af8
    9cf4:	20000ef8 	.word	0x20000ef8
    9cf8:	00000000 	.word	0x00000000
    9cfc:	200002f8 	.word	0x200002f8
    9d00:	40000508 	.word	0x40000508

00009d04 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9d04:	4906      	ldr	r1, [pc, #24]	; (9d20 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9d06:	b510      	push	{r4, lr}
    9d08:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    9d0c:	2a20      	cmp	r2, #32
    9d0e:	bf1c      	itt	ne
    9d10:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    9d14:	bd10      	popne	{r4, pc}
    9d16:	f240 3177 	movw	r1, #887	; 0x377
    9d1a:	2070      	movs	r0, #112	; 0x70
    9d1c:	f002 fc28 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d20:	20000f78 	.word	0x20000f78

00009d24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d28:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 9ef0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    9d2c:	4606      	mov	r6, r0
    9d2e:	b08f      	sub	sp, #60	; 0x3c
    9d30:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    9d34:	468a      	mov	sl, r1
    9d36:	2820      	cmp	r0, #32
    9d38:	d061      	beq.n	9dfe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    9d3a:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    9d3e:	f10b 0408 	add.w	r4, fp, #8
    9d42:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    9d46:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    9d4a:	2120      	movs	r1, #32
    9d4c:	f88d 1018 	strb.w	r1, [sp, #24]
    9d50:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    9d54:	f8db 2008 	ldr.w	r2, [fp, #8]
    9d58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9d5c:	4459      	add	r1, fp
    9d5e:	2700      	movs	r7, #0
    9d60:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    9d64:	f8db 1010 	ldr.w	r1, [fp, #16]
    9d68:	1851      	adds	r1, r2, r1
    9d6a:	910a      	str	r1, [sp, #40]	; 0x28
    9d6c:	f8db 0000 	ldr.w	r0, [fp]
    9d70:	aa09      	add	r2, sp, #36	; 0x24
    9d72:	4430      	add	r0, r6
    9d74:	a907      	add	r1, sp, #28
    9d76:	f001 fb6b 	bl	b450 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9d7a:	f8d9 0010 	ldr.w	r0, [r9, #16]
    9d7e:	9907      	ldr	r1, [sp, #28]
    9d80:	f8d9 2008 	ldr.w	r2, [r9, #8]
    9d84:	1840      	adds	r0, r0, r1
    9d86:	1810      	adds	r0, r2, r0
    9d88:	2e67      	cmp	r6, #103	; 0x67
    9d8a:	d33d      	bcc.n	9e08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9d8c:	4959      	ldr	r1, [pc, #356]	; (9ef4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    9d8e:	2200      	movs	r2, #0
    9d90:	1b89      	subs	r1, r1, r6
    9d92:	eb72 0107 	sbcs.w	r1, r2, r7
    9d96:	d337      	bcc.n	9e08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9d98:	6821      	ldr	r1, [r4, #0]
    9d9a:	4694      	mov	ip, r2
    9d9c:	1a40      	subs	r0, r0, r1
    9d9e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9da2:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    9da6:	eb7c 010c 	sbcs.w	r1, ip, ip
    9daa:	d32d      	bcc.n	9e08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9dac:	60a0      	str	r0, [r4, #8]
    9dae:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    9db2:	f884 a010 	strb.w	sl, [r4, #16]
    9db6:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    9dba:	f10d 0b18 	add.w	fp, sp, #24
    9dbe:	2d20      	cmp	r5, #32
    9dc0:	d055      	beq.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9dc2:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    9dc6:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9dca:	9001      	str	r0, [sp, #4]
    9dcc:	484a      	ldr	r0, [pc, #296]	; (9ef8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    9dce:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9dd2:	f8d4 a000 	ldr.w	sl, [r4]
    9dd6:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    9dda:	f108 0008 	add.w	r0, r8, #8
    9dde:	eb1a 0201 	adds.w	r2, sl, r1
    9de2:	eb43 0107 	adc.w	r1, r3, r7
    9de6:	e9d0 9300 	ldrd	r9, r3, [r0]
    9dea:	ebb9 0202 	subs.w	r2, r9, r2
    9dee:	eb73 0101 	sbcs.w	r1, r3, r1
    9df2:	d325      	bcc.n	9e40 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    9df4:	89c0      	ldrh	r0, [r0, #14]
    9df6:	b398      	cbz	r0, 9e60 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    9df8:	89e0      	ldrh	r0, [r4, #14]
    9dfa:	b148      	cbz	r0, 9e10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    9dfc:	e037      	b.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9dfe:	f640 3135 	movw	r1, #2869	; 0xb35
    9e02:	2070      	movs	r0, #112	; 0x70
    9e04:	f002 fbb4 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e08:	b00f      	add	sp, #60	; 0x3c
    9e0a:	2001      	movs	r0, #1
    9e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e10:	f002 fa0e 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9e14:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9e18:	bf08      	it	eq
    9e1a:	200d      	moveq	r0, #13
    9e1c:	d00b      	beq.n	9e36 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9e1e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9e22:	3856      	subs	r0, #86	; 0x56
    9e24:	bf08      	it	eq
    9e26:	201c      	moveq	r0, #28
    9e28:	d005      	beq.n	9e36 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9e2a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9e2e:	389f      	subs	r0, #159	; 0x9f
    9e30:	bf14      	ite	ne
    9e32:	4638      	movne	r0, r7
    9e34:	2032      	moveq	r0, #50	; 0x32
    9e36:	1c41      	adds	r1, r0, #1
    9e38:	ebb9 000a 	subs.w	r0, r9, sl
    9e3c:	4288      	cmp	r0, r1
    9e3e:	da16      	bge.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9e40:	f88b 5000 	strb.w	r5, [fp]
    9e44:	f898 0018 	ldrb.w	r0, [r8, #24]
    9e48:	7c21      	ldrb	r1, [r4, #16]
    9e4a:	4281      	cmp	r1, r0
    9e4c:	d309      	bcc.n	9e62 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    9e4e:	6821      	ldr	r1, [r4, #0]
    9e50:	980a      	ldr	r0, [sp, #40]	; 0x28
    9e52:	1a40      	subs	r0, r0, r1
    9e54:	60a0      	str	r0, [r4, #8]
    9e56:	b00f      	add	sp, #60	; 0x3c
    9e58:	f04f 0002 	mov.w	r0, #2
    9e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e60:	e005      	b.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9e62:	9801      	ldr	r0, [sp, #4]
    9e64:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9e68:	7845      	ldrb	r5, [r0, #1]
    9e6a:	2d20      	cmp	r5, #32
    9e6c:	d1ae      	bne.n	9dcc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    9e6e:	2005      	movs	r0, #5
    9e70:	f001 feaa 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9e74:	4d1e      	ldr	r5, [pc, #120]	; (9ef0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    9e76:	f04f 30ff 	mov.w	r0, #4294967295
    9e7a:	6068      	str	r0, [r5, #4]
    9e7c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    9e80:	f89d 2018 	ldrb.w	r2, [sp, #24]
    9e84:	2120      	movs	r1, #32
    9e86:	2a20      	cmp	r2, #32
    9e88:	d003      	beq.n	9e92 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    9e8a:	2005      	movs	r0, #5
    9e8c:	f7fe ffe4 	bl	8e58 <MPSL_IRQ_RADIO_Handler+0x3c>
    9e90:	e004      	b.n	9e9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    9e92:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9e96:	4428      	add	r0, r5
    9e98:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    9e9c:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9ea0:	4916      	ldr	r1, [pc, #88]	; (9efc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    9ea2:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9ea6:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    9eaa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9eae:	7048      	strb	r0, [r1, #1]
    9eb0:	6828      	ldr	r0, [r5, #0]
    9eb2:	4430      	add	r0, r6
    9eb4:	6028      	str	r0, [r5, #0]
    9eb6:	20ff      	movs	r0, #255	; 0xff
    9eb8:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9ebc:	7e68      	ldrb	r0, [r5, #25]
    9ebe:	2801      	cmp	r0, #1
    9ec0:	d10a      	bne.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    9ec2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    9ec6:	6823      	ldr	r3, [r4, #0]
    9ec8:	1818      	adds	r0, r3, r0
    9eca:	f142 0100 	adc.w	r1, r2, #0
    9ece:	1e40      	subs	r0, r0, #1
    9ed0:	f141 31ff 	adc.w	r1, r1, #4294967295
    9ed4:	f001 fc9a 	bl	b80c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9ed8:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9edc:	2820      	cmp	r0, #32
    9ede:	d003      	beq.n	9ee8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    9ee0:	4807      	ldr	r0, [pc, #28]	; (9f00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    9ee2:	7840      	ldrb	r0, [r0, #1]
    9ee4:	f002 fc16 	bl	c714 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9ee8:	b00f      	add	sp, #60	; 0x3c
    9eea:	2000      	movs	r0, #0
    9eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ef0:	20000f78 	.word	0x20000f78
    9ef4:	0f424000 	.word	0x0f424000
    9ef8:	20000af8 	.word	0x20000af8
    9efc:	20000ef8 	.word	0x20000ef8
    9f00:	200002f8 	.word	0x200002f8

00009f04 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9f04:	b570      	push	{r4, r5, r6, lr}
    9f06:	4a23      	ldr	r2, [pc, #140]	; (9f94 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    9f08:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9f0c:	2920      	cmp	r1, #32
    9f0e:	d039      	beq.n	9f84 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    9f10:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9f14:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    9f18:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    9f1c:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    9f20:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    9f24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9f28:	4411      	add	r1, r2
    9f2a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    9f2e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9f32:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9f36:	2920      	cmp	r1, #32
    9f38:	d029      	beq.n	9f8e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    9f3a:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    9f3e:	7e2d      	ldrb	r5, [r5, #24]
    9f40:	42a8      	cmp	r0, r5
    9f42:	bf3c      	itt	cc
    9f44:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    9f48:	7849      	ldrbcc	r1, [r1, #1]
    9f4a:	d3f4      	bcc.n	9f36 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    9f4c:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    9f50:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9f54:	f8dc 5008 	ldr.w	r5, [ip, #8]
    9f58:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    9f5c:	6814      	ldr	r4, [r2, #0]
    9f5e:	1828      	adds	r0, r5, r0
    9f60:	f146 0200 	adc.w	r2, r6, #0
    9f64:	ebb1 0c00 	subs.w	ip, r1, r0
    9f68:	eb73 0202 	sbcs.w	r2, r3, r2
    9f6c:	d308      	bcc.n	9f80 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    9f6e:	1a08      	subs	r0, r1, r0
    9f70:	f006 fb88 	bl	10684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9f74:	f104 0167 	add.w	r1, r4, #103	; 0x67
    9f78:	4281      	cmp	r1, r0
    9f7a:	bf9c      	itt	ls
    9f7c:	1b00      	subls	r0, r0, r4
    9f7e:	bd70      	popls	{r4, r5, r6, pc}
    9f80:	2000      	movs	r0, #0
    9f82:	bd70      	pop	{r4, r5, r6, pc}
    9f84:	f640 3108 	movw	r1, #2824	; 0xb08
    9f88:	2070      	movs	r0, #112	; 0x70
    9f8a:	f002 faf1 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f8e:	f04f 30ff 	mov.w	r0, #4294967295
    9f92:	bd70      	pop	{r4, r5, r6, pc}
    9f94:	20000f78 	.word	0x20000f78

00009f98 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9f98:	4806      	ldr	r0, [pc, #24]	; (9fb4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9f9a:	b510      	push	{r4, lr}
    9f9c:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    9fa0:	2920      	cmp	r1, #32
    9fa2:	bf1c      	itt	ne
    9fa4:	7e00      	ldrbne	r0, [r0, #24]
    9fa6:	bd10      	popne	{r4, pc}
    9fa8:	f640 312f 	movw	r1, #2863	; 0xb2f
    9fac:	2070      	movs	r0, #112	; 0x70
    9fae:	f002 fadf 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fb2:	0000      	.short	0x0000
    9fb4:	20000f78 	.word	0x20000f78

00009fb8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    9fb8:	490a      	ldr	r1, [pc, #40]	; (9fe4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    9fba:	b510      	push	{r4, lr}
    9fbc:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    9fc0:	f100 0408 	add.w	r4, r0, #8
    9fc4:	e9d4 0100 	ldrd	r0, r1, [r4]
    9fc8:	f001 f9c4 	bl	b354 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    9fcc:	89e3      	ldrh	r3, [r4, #14]
    9fce:	2200      	movs	r2, #0
    9fd0:	18c3      	adds	r3, r0, r3
    9fd2:	7b20      	ldrb	r0, [r4, #12]
    9fd4:	4151      	adcs	r1, r2
    9fd6:	1818      	adds	r0, r3, r0
    9fd8:	4151      	adcs	r1, r2
    9fda:	1c40      	adds	r0, r0, #1
    9fdc:	f141 0100 	adc.w	r1, r1, #0
    9fe0:	bd10      	pop	{r4, pc}
    9fe2:	0000      	.short	0x0000
    9fe4:	20000af8 	.word	0x20000af8

00009fe8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    9fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fea:	4d6f      	ldr	r5, [pc, #444]	; (a1a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    9fec:	2600      	movs	r6, #0
    9fee:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    9ff2:	2701      	movs	r7, #1
    9ff4:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    9ff8:	4b6c      	ldr	r3, [pc, #432]	; (a1ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    9ffa:	2808      	cmp	r0, #8
    9ffc:	d273      	bcs.n	a0e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    9ffe:	e8df f000 	tbb	[pc, r0]
    a002:	7804      	.short	0x7804
    a004:	47ceb3a0 	.word	0x47ceb3a0
    a008:	bdb8      	.short	0xbdb8
    a00a:	43c8      	mvns	r0, r1
    a00c:	ea70 0002 	orns	r0, r0, r2
    a010:	d105      	bne.n	a01e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    a012:	f002 f92f 	bl	c274 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a016:	f001 fcfb 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a01a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a01e:	8ae0      	ldrh	r0, [r4, #22]
    a020:	b110      	cbz	r0, a028 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    a022:	f002 fa2d 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a026:	b180      	cbz	r0, a04a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    a028:	f7ff fcd2 	bl	99d0 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a02c:	20ff      	movs	r0, #255	; 0xff
    a02e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    a032:	6861      	ldr	r1, [r4, #4]
    a034:	f1b1 3fff 	cmp.w	r1, #4294967295
    a038:	d003      	beq.n	a042 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a03a:	2005      	movs	r0, #5
    a03c:	f001 fd0a 	bl	ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a040:	b140      	cbz	r0, a054 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    a042:	7e60      	ldrb	r0, [r4, #25]
    a044:	2801      	cmp	r0, #1
    a046:	d114      	bne.n	a072 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    a048:	e009      	b.n	a05e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    a04a:	f640 012c 	movw	r1, #2092	; 0x82c
    a04e:	2070      	movs	r0, #112	; 0x70
    a050:	f002 fa8e 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a054:	f640 0131 	movw	r1, #2097	; 0x831
    a058:	2070      	movs	r0, #112	; 0x70
    a05a:	f002 fa89 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a05e:	68a2      	ldr	r2, [r4, #8]
    a060:	6920      	ldr	r0, [r4, #16]
    a062:	68e1      	ldr	r1, [r4, #12]
    a064:	1810      	adds	r0, r2, r0
    a066:	4171      	adcs	r1, r6
    a068:	1e40      	subs	r0, r0, #1
    a06a:	f141 31ff 	adc.w	r1, r1, #4294967295
    a06e:	f001 fbcd 	bl	b80c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a072:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a076:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a07a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a07e:	6840      	ldr	r0, [r0, #4]
    a080:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a084:	680a      	ldr	r2, [r1, #0]
    a086:	b001      	add	sp, #4
    a088:	2101      	movs	r1, #1
    a08a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a08e:	4710      	bx	r2
    a090:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    a094:	b160      	cbz	r0, a0b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    a096:	43c8      	mvns	r0, r1
    a098:	ea70 0002 	orns	r0, r0, r2
    a09c:	d105      	bne.n	a0aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    a09e:	f002 f8e9 	bl	c274 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a0a2:	f001 fcb5 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a0a6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a0aa:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    a0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0b0:	f7ff fc8e 	bl	99d0 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a0b4:	f04f 30ff 	mov.w	r0, #4294967295
    a0b8:	6060      	str	r0, [r4, #4]
    a0ba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    a0be:	f88d 0000 	strb.w	r0, [sp]
    a0c2:	f89d 0000 	ldrb.w	r0, [sp]
    a0c6:	b178      	cbz	r0, a0e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    a0c8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a0cc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a0d0:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a0d4:	6840      	ldr	r0, [r0, #4]
    a0d6:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a0da:	680a      	ldr	r2, [r1, #0]
    a0dc:	b001      	add	sp, #4
    a0de:	2106      	movs	r1, #6
    a0e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a0e4:	4710      	bx	r2
    a0e6:	e05a      	b.n	a19e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    a0e8:	f640 0148 	movw	r1, #2120	; 0x848
    a0ec:	2070      	movs	r0, #112	; 0x70
    a0ee:	f002 fa3f 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0f2:	f7ff fc6d 	bl	99d0 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a0f6:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    a0fa:	f002 f9c1 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a0fe:	b130      	cbz	r0, a10e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a100:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    a104:	43c9      	mvns	r1, r1
    a106:	ea71 0000 	orns	r0, r1, r0
    a10a:	d005      	beq.n	a118 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a10c:	e00a      	b.n	a124 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    a10e:	f640 0156 	movw	r1, #2134	; 0x856
    a112:	2070      	movs	r0, #112	; 0x70
    a114:	f002 fa2c 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a118:	f002 f8ac 	bl	c274 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a11c:	f001 fc78 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a120:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a124:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a128:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a12c:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a130:	6840      	ldr	r0, [r0, #4]
    a132:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a136:	680a      	ldr	r2, [r1, #0]
    a138:	b001      	add	sp, #4
    a13a:	2100      	movs	r1, #0
    a13c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a140:	4710      	bx	r2
    a142:	f001 fe7f 	bl	be44 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a146:	8ae0      	ldrh	r0, [r4, #22]
    a148:	b110      	cbz	r0, a150 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    a14a:	f002 f999 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a14e:	b130      	cbz	r0, a15e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    a150:	f001 fe8c 	bl	be6c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a154:	2800      	cmp	r0, #0
    a156:	bf18      	it	ne
    a158:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    a15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a15e:	f44f 6106 	mov.w	r1, #2144	; 0x860
    a162:	2070      	movs	r0, #112	; 0x70
    a164:	f002 fa04 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a168:	4811      	ldr	r0, [pc, #68]	; (a1b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a16a:	6007      	str	r7, [r0, #0]
    a16c:	6898      	ldr	r0, [r3, #8]
    a16e:	6007      	str	r7, [r0, #0]
    a170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a172:	7818      	ldrb	r0, [r3, #0]
    a174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a178:	f002 bacc 	b.w	c714 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a17c:	f7ff fc28 	bl	99d0 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a180:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a184:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a188:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a18c:	6840      	ldr	r0, [r0, #4]
    a18e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a192:	680a      	ldr	r2, [r1, #0]
    a194:	b001      	add	sp, #4
    a196:	2105      	movs	r1, #5
    a198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a19c:	4710      	bx	r2
    a19e:	f640 0173 	movw	r1, #2163	; 0x873
    a1a2:	2070      	movs	r0, #112	; 0x70
    a1a4:	f002 f9e4 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1a8:	20000af8 	.word	0x20000af8
    a1ac:	200002f8 	.word	0x200002f8
    a1b0:	40000508 	.word	0x40000508

0000a1b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a1b4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1b8:	48f7      	ldr	r0, [pc, #988]	; (a598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    a1ba:	b097      	sub	sp, #92	; 0x5c
    a1bc:	460c      	mov	r4, r1
    a1be:	6800      	ldr	r0, [r0, #0]
    a1c0:	4ff6      	ldr	r7, [pc, #984]	; (a59c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    a1c2:	05c0      	lsls	r0, r0, #23
    a1c4:	0dc0      	lsrs	r0, r0, #23
    a1c6:	d00e      	beq.n	a1e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a1c8:	3810      	subs	r0, #16
    a1ca:	b240      	sxtb	r0, r0
    a1cc:	2800      	cmp	r0, #0
    a1ce:	bfb8      	it	lt
    a1d0:	f000 000f 	andlt.w	r0, r0, #15
    a1d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a1d8:	bfac      	ite	ge
    a1da:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a1de:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a1e2:	0940      	lsrs	r0, r0, #5
    a1e4:	d00c      	beq.n	a200 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    a1e6:	7820      	ldrb	r0, [r4, #0]
    a1e8:	f04f 0a00 	mov.w	sl, #0
    a1ec:	2800      	cmp	r0, #0
    a1ee:	bf18      	it	ne
    a1f0:	2801      	cmpne	r0, #1
    a1f2:	d017      	beq.n	a224 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a1f4:	f240 61f9 	movw	r1, #1785	; 0x6f9
    a1f8:	f04f 0070 	mov.w	r0, #112	; 0x70
    a1fc:	f002 f9b8 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a200:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a204:	f04f 0a01 	mov.w	sl, #1
    a208:	2820      	cmp	r0, #32
    a20a:	d006      	beq.n	a21a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    a20c:	7820      	ldrb	r0, [r4, #0]
    a20e:	b148      	cbz	r0, a224 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a210:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a214:	2070      	movs	r0, #112	; 0x70
    a216:	f002 f9ab 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a21a:	f240 61f2 	movw	r1, #1778	; 0x6f2
    a21e:	2070      	movs	r0, #112	; 0x70
    a220:	f002 f9a6 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a224:	f8df b378 	ldr.w	fp, [pc, #888]	; a5a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    a228:	f1bb 0f00 	cmp.w	fp, #0
    a22c:	d004      	beq.n	a238 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    a22e:	2100      	movs	r1, #0
    a230:	f240 60fc 	movw	r0, #1788	; 0x6fc
    a234:	f3af 8000 	nop.w
    a238:	2000      	movs	r0, #0
    a23a:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a23e:	a905      	add	r1, sp, #20
    a240:	9112      	str	r1, [sp, #72]	; 0x48
    a242:	49d8      	ldr	r1, [pc, #864]	; (a5a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    a244:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a246:	f04f 0801 	mov.w	r8, #1
    a24a:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    a24e:	9001      	str	r0, [sp, #4]
    a250:	f1bb 0f00 	cmp.w	fp, #0
    a254:	d004      	beq.n	a260 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a256:	2100      	movs	r1, #0
    a258:	f240 7007 	movw	r0, #1799	; 0x707
    a25c:	f3af 8000 	nop.w
    a260:	f1b8 0f00 	cmp.w	r8, #0
    a264:	d009      	beq.n	a27a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    a266:	bf00      	nop
    a268:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    a26c:	2500      	movs	r5, #0
    a26e:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    a272:	f1ba 0f00 	cmp.w	sl, #0
    a276:	d007      	beq.n	a288 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    a278:	e03e      	b.n	a2f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    a27a:	48cb      	ldr	r0, [pc, #812]	; (a5a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    a27c:	2800      	cmp	r0, #0
    a27e:	bf18      	it	ne
    a280:	f3af 8000 	nopne.w
    a284:	b662      	cpsie	i
    a286:	e7ef      	b.n	a268 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    a288:	46b1      	mov	r9, r6
    a28a:	2001      	movs	r0, #1
    a28c:	ea20 0609 	bic.w	r6, r0, r9
    a290:	48c6      	ldr	r0, [pc, #792]	; (a5ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a292:	2240      	movs	r2, #64	; 0x40
    a294:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    a298:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a29c:	f006 fb94 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a2a0:	f1bb 0f00 	cmp.w	fp, #0
    a2a4:	d004      	beq.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    a2a6:	2100      	movs	r1, #0
    a2a8:	f240 503c 	movw	r0, #1340	; 0x53c
    a2ac:	f3af 8000 	nop.w
    a2b0:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    a2b4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a2b8:	4439      	add	r1, r7
    a2ba:	4438      	add	r0, r7
    a2bc:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a2be:	8502      	strh	r2, [r0, #40]	; 0x28
    a2c0:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a2c4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a2c8:	f1bb 0f00 	cmp.w	fp, #0
    a2cc:	d004      	beq.n	a2d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    a2ce:	2100      	movs	r1, #0
    a2d0:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a2d4:	f3af 8000 	nop.w
    a2d8:	f1bb 0f00 	cmp.w	fp, #0
    a2dc:	d004      	beq.n	a2e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    a2de:	2100      	movs	r1, #0
    a2e0:	f240 7011 	movw	r0, #1809	; 0x711
    a2e4:	f3af 8000 	nop.w
    a2e8:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a2ec:	f88d 0020 	strb.w	r0, [sp, #32]
    a2f0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a2f4:	2800      	cmp	r0, #0
    a2f6:	d1ab      	bne.n	a250 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a2f8:	f1bb 0f00 	cmp.w	fp, #0
    a2fc:	d004      	beq.n	a308 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    a2fe:	2100      	movs	r1, #0
    a300:	f240 701b 	movw	r0, #1819	; 0x71b
    a304:	f3af 8000 	nop.w
    a308:	f001 fb82 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a30c:	4681      	mov	r9, r0
    a30e:	a802      	add	r0, sp, #8
    a310:	900a      	str	r0, [sp, #40]	; 0x28
    a312:	4688      	mov	r8, r1
    a314:	8921      	ldrh	r1, [r4, #8]
    a316:	4628      	mov	r0, r5
    a318:	f361 401f 	bfi	r0, r1, #16, #16
    a31c:	4601      	mov	r1, r0
    a31e:	7aa2      	ldrb	r2, [r4, #10]
    a320:	4628      	mov	r0, r5
    a322:	f362 0007 	bfi	r0, r2, #0, #8
    a326:	7ae2      	ldrb	r2, [r4, #11]
    a328:	f362 200f 	bfi	r0, r2, #8, #8
    a32c:	7822      	ldrb	r2, [r4, #0]
    a32e:	9502      	str	r5, [sp, #8]
    a330:	f362 4017 	bfi	r0, r2, #16, #8
    a334:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a338:	e9cd 0506 	strd	r0, r5, [sp, #24]
    a33c:	9503      	str	r5, [sp, #12]
    a33e:	7820      	ldrb	r0, [r4, #0]
    a340:	b380      	cbz	r0, a3a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    a342:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    a346:	499a      	ldr	r1, [pc, #616]	; (a5b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    a348:	1a08      	subs	r0, r1, r0
    a34a:	990a      	ldr	r1, [sp, #40]	; 0x28
    a34c:	f101 020c 	add.w	r2, r1, #12
    a350:	a914      	add	r1, sp, #80	; 0x50
    a352:	f001 f87d 	bl	b450 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a356:	2200      	movs	r2, #0
    a358:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a35c:	4648      	mov	r0, r9
    a35e:	4641      	mov	r1, r8
    a360:	f7fe ff4e 	bl	9200 <MPSL_IRQ_RADIO_Handler+0x3e4>
    a364:	468c      	mov	ip, r1
    a366:	7ae1      	ldrb	r1, [r4, #11]
    a368:	2900      	cmp	r1, #0
    a36a:	bf0c      	ite	eq
    a36c:	217a      	moveq	r1, #122	; 0x7a
    a36e:	214a      	movne	r1, #74	; 0x4a
    a370:	6862      	ldr	r2, [r4, #4]
    a372:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a376:	4411      	add	r1, r2
    a378:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a37c:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    a380:	441a      	add	r2, r3
    a382:	4411      	add	r1, r2
    a384:	1c88      	adds	r0, r1, #2
    a386:	f001 f847 	bl	b418 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a38a:	9600      	str	r6, [sp, #0]
    a38c:	9004      	str	r0, [sp, #16]
    a38e:	464a      	mov	r2, r9
    a390:	4643      	mov	r3, r8
    a392:	6920      	ldr	r0, [r4, #16]
    a394:	990a      	ldr	r1, [sp, #40]	; 0x28
    a396:	f7fe fd9b 	bl	8ed0 <MPSL_IRQ_RADIO_Handler+0xb4>
    a39a:	2800      	cmp	r0, #0
    a39c:	bf08      	it	eq
    a39e:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    a3a2:	e046      	b.n	a432 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    a3a4:	e7ff      	b.n	a3a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    a3a6:	4648      	mov	r0, r9
    a3a8:	4641      	mov	r1, r8
    a3aa:	f000 ffd3 	bl	b354 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a3ae:	f8df c204 	ldr.w	ip, [pc, #516]	; a5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    a3b2:	4602      	mov	r2, r0
    a3b4:	eb10 0c0c 	adds.w	ip, r0, ip
    a3b8:	460b      	mov	r3, r1
    a3ba:	f141 0e00 	adc.w	lr, r1, #0
    a3be:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a3c2:	ebb0 0c0c 	subs.w	ip, r0, ip
    a3c6:	eb71 0c0e 	sbcs.w	ip, r1, lr
    a3ca:	d229      	bcs.n	a420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    a3cc:	3229      	adds	r2, #41	; 0x29
    a3ce:	f143 0300 	adc.w	r3, r3, #0
    a3d2:	1a82      	subs	r2, r0, r2
    a3d4:	eb71 0203 	sbcs.w	r2, r1, r3
    a3d8:	d322      	bcc.n	a420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    a3da:	8922      	ldrh	r2, [r4, #8]
    a3dc:	ab0a      	add	r3, sp, #40	; 0x28
    a3de:	1a80      	subs	r0, r0, r2
    a3e0:	eb61 0105 	sbc.w	r1, r1, r5
    a3e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a3e6:	1e40      	subs	r0, r0, #1
    a3e8:	9200      	str	r2, [sp, #0]
    a3ea:	f141 31ff 	adc.w	r1, r1, #4294967295
    a3ee:	aa0d      	add	r2, sp, #52	; 0x34
    a3f0:	f000 ffd4 	bl	b39c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a3f4:	7ae0      	ldrb	r0, [r4, #11]
    a3f6:	2800      	cmp	r0, #0
    a3f8:	bf0c      	ite	eq
    a3fa:	207a      	moveq	r0, #122	; 0x7a
    a3fc:	204a      	movne	r0, #74	; 0x4a
    a3fe:	990d      	ldr	r1, [sp, #52]	; 0x34
    a400:	8922      	ldrh	r2, [r4, #8]
    a402:	4408      	add	r0, r1
    a404:	6861      	ldr	r1, [r4, #4]
    a406:	4411      	add	r1, r2
    a408:	4408      	add	r0, r1
    a40a:	1c80      	adds	r0, r0, #2
    a40c:	f001 f804 	bl	b418 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a410:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    a414:	e9cd 1202 	strd	r1, r2, [sp, #8]
    a418:	1a40      	subs	r0, r0, r1
    a41a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a41e:	e007      	b.n	a430 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    a420:	f1b9 0101 	subs.w	r1, r9, #1
    a424:	f148 30ff 	adc.w	r0, r8, #4294967295
    a428:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a42c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a430:	9004      	str	r0, [sp, #16]
    a432:	f1bb 0f00 	cmp.w	fp, #0
    a436:	d004      	beq.n	a442 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    a438:	2100      	movs	r1, #0
    a43a:	f240 7022 	movw	r0, #1826	; 0x722
    a43e:	f3af 8000 	nop.w
    a442:	495a      	ldr	r1, [pc, #360]	; (a5ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a444:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    a448:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    a44c:	9108      	str	r1, [sp, #32]
    a44e:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    a452:	a802      	add	r0, sp, #8
    a454:	2901      	cmp	r1, #1
    a456:	bf18      	it	ne
    a458:	2902      	cmpne	r1, #2
    a45a:	d141      	bne.n	a4e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a45c:	9511      	str	r5, [sp, #68]	; 0x44
    a45e:	9a02      	ldr	r2, [sp, #8]
    a460:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    a464:	1a53      	subs	r3, r2, r1
    a466:	f8dd c010 	ldr.w	ip, [sp, #16]
    a46a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a46e:	eb12 020c 	adds.w	r2, r2, ip
    a472:	1a51      	subs	r1, r2, r1
    a474:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a478:	2b02      	cmp	r3, #2
    a47a:	d374      	bcc.n	a566 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a47c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a480:	bf98      	it	ls
    a482:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a486:	d86e      	bhi.n	a566 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a488:	2501      	movs	r5, #1
    a48a:	ab14      	add	r3, sp, #80	; 0x50
    a48c:	aa0e      	add	r2, sp, #56	; 0x38
    a48e:	4631      	mov	r1, r6
    a490:	f7fe ff06 	bl	92a0 <MPSL_IRQ_RADIO_Handler+0x484>
    a494:	2800      	cmp	r0, #0
    a496:	d06d      	beq.n	a574 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    a498:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    a49c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a4a0:	4633      	mov	r3, r6
    a4a2:	428a      	cmp	r2, r1
    a4a4:	d06a      	beq.n	a57c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    a4a6:	2005      	movs	r0, #5
    a4a8:	f7fe fcd6 	bl	8e58 <MPSL_IRQ_RADIO_Handler+0x3c>
    a4ac:	9908      	ldr	r1, [sp, #32]
    a4ae:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    a4b2:	7048      	strb	r0, [r1, #1]
    a4b4:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    a4b8:	2820      	cmp	r0, #32
    a4ba:	bf01      	itttt	eq
    a4bc:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a4c0:	4438      	addeq	r0, r7
    a4c2:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    a4c6:	9511      	streq	r5, [sp, #68]	; 0x44
    a4c8:	bf1e      	ittt	ne
    a4ca:	9908      	ldrne	r1, [sp, #32]
    a4cc:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    a4d0:	f880 8001 	strbne.w	r8, [r0, #1]
    a4d4:	4632      	mov	r2, r6
    a4d6:	4641      	mov	r1, r8
    a4d8:	f05f 0003 	movs.w	r0, #3
    a4dc:	f7ff fb24 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a4e0:	f1bb 0f00 	cmp.w	fp, #0
    a4e4:	d004      	beq.n	a4f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    a4e6:	2100      	movs	r1, #0
    a4e8:	f240 7027 	movw	r0, #1831	; 0x727
    a4ec:	f3af 8000 	nop.w
    a4f0:	4831      	ldr	r0, [pc, #196]	; (a5b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    a4f2:	2800      	cmp	r0, #0
    a4f4:	bf18      	it	ne
    a4f6:	f3af 8000 	nopne.w
    a4fa:	f3ef 8810 	mrs	r8, PRIMASK
    a4fe:	b672      	cpsid	i
    a500:	f1bb 0f00 	cmp.w	fp, #0
    a504:	d004      	beq.n	a510 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a506:	2100      	movs	r1, #0
    a508:	f240 702d 	movw	r0, #1837	; 0x72d
    a50c:	f3af 8000 	nop.w
    a510:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a514:	f88d 0020 	strb.w	r0, [sp, #32]
    a518:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a51c:	2800      	cmp	r0, #0
    a51e:	f47f ae97 	bne.w	a250 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a522:	f1bb 0f00 	cmp.w	fp, #0
    a526:	d004      	beq.n	a532 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    a528:	2100      	movs	r1, #0
    a52a:	f240 7035 	movw	r0, #1845	; 0x735
    a52e:	f3af 8000 	nop.w
    a532:	f10d 0e04 	add.w	lr, sp, #4
    a536:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    a53a:	f100 0e08 	add.w	lr, r0, #8
    a53e:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    a542:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    a546:	e9c0 1206 	strd	r1, r2, [r0, #24]
    a54a:	b325      	cbz	r5, a596 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    a54c:	f1bb 0f00 	cmp.w	fp, #0
    a550:	d004      	beq.n	a55c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    a552:	2100      	movs	r1, #0
    a554:	f240 7042 	movw	r0, #1858	; 0x742
    a558:	f3af 8000 	nop.w
    a55c:	f1ba 0f00 	cmp.w	sl, #0
    a560:	d146      	bne.n	a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a562:	e02b      	b.n	a5bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    a564:	e7ff      	b.n	a566 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a566:	4632      	mov	r2, r6
    a568:	4641      	mov	r1, r8
    a56a:	2004      	movs	r0, #4
    a56c:	f7ff fadc 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a570:	2501      	movs	r5, #1
    a572:	e7b5      	b.n	a4e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a574:	4632      	mov	r2, r6
    a576:	4641      	mov	r1, r8
    a578:	2004      	movs	r0, #4
    a57a:	e7af      	b.n	a4dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a57c:	2920      	cmp	r1, #32
    a57e:	bf1d      	ittte	ne
    a580:	9808      	ldrne	r0, [sp, #32]
    a582:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    a586:	7840      	ldrbne	r0, [r0, #1]
    a588:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a58c:	bf04      	itt	eq
    a58e:	4438      	addeq	r0, r7
    a590:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    a594:	e78a      	b.n	a4ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    a596:	e03b      	b.n	a610 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a598:	e000ed04 	.word	0xe000ed04
    a59c:	20000f78 	.word	0x20000f78
    a5a0:	00000000 	.word	0x00000000
    a5a4:	20000af8 	.word	0x20000af8
    a5a8:	00000000 	.word	0x00000000
    a5ac:	20000ef8 	.word	0x20000ef8
    a5b0:	1e847fff 	.word	0x1e847fff
    a5b4:	0f424000 	.word	0x0f424000
    a5b8:	00000000 	.word	0x00000000
    a5bc:	9811      	ldr	r0, [sp, #68]	; 0x44
    a5be:	f010 0fff 	tst.w	r0, #255	; 0xff
    a5c2:	d015      	beq.n	a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a5c4:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a5c8:	2820      	cmp	r0, #32
    a5ca:	d111      	bne.n	a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a5cc:	f1bb 0f00 	cmp.w	fp, #0
    a5d0:	d004      	beq.n	a5dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    a5d2:	2100      	movs	r1, #0
    a5d4:	f240 7047 	movw	r0, #1863	; 0x747
    a5d8:	f3af 8000 	nop.w
    a5dc:	4631      	mov	r1, r6
    a5de:	2002      	movs	r0, #2
    a5e0:	f7ff fad4 	bl	9b8c <MPSL_IRQ_RADIO_Handler+0xd70>
    a5e4:	9010      	str	r0, [sp, #64]	; 0x40
    a5e6:	b918      	cbnz	r0, a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a5e8:	7820      	ldrb	r0, [r4, #0]
    a5ea:	b300      	cbz	r0, a62e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    a5ec:	2801      	cmp	r0, #1
    a5ee:	d02e      	beq.n	a64e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    a5f0:	f1bb 0f00 	cmp.w	fp, #0
    a5f4:	d004      	beq.n	a600 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    a5f6:	2100      	movs	r1, #0
    a5f8:	f240 7064 	movw	r0, #1892	; 0x764
    a5fc:	f3af 8000 	nop.w
    a600:	20ff      	movs	r0, #255	; 0xff
    a602:	f1ba 0f00 	cmp.w	sl, #0
    a606:	bf18      	it	ne
    a608:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    a60c:	d029      	beq.n	a662 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    a60e:	2501      	movs	r5, #1
    a610:	f1bb 0f00 	cmp.w	fp, #0
    a614:	d004      	beq.n	a620 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    a616:	2100      	movs	r1, #0
    a618:	f240 7075 	movw	r0, #1909	; 0x775
    a61c:	f3af 8000 	nop.w
    a620:	9810      	ldr	r0, [sp, #64]	; 0x40
    a622:	4c34      	ldr	r4, [pc, #208]	; (a6f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    a624:	2802      	cmp	r0, #2
    a626:	d025      	beq.n	a674 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    a628:	2801      	cmp	r0, #1
    a62a:	d02b      	beq.n	a684 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    a62c:	e02f      	b.n	a68e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a62e:	f1bb 0f00 	cmp.w	fp, #0
    a632:	d004      	beq.n	a63e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    a634:	2100      	movs	r1, #0
    a636:	f240 704f 	movw	r0, #1871	; 0x74f
    a63a:	f3af 8000 	nop.w
    a63e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a642:	2004      	movs	r0, #4
    a644:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a646:	f7ff fa6f 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a64a:	2501      	movs	r5, #1
    a64c:	e7e0      	b.n	a610 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a64e:	f1bb 0f00 	cmp.w	fp, #0
    a652:	f43f adfd 	beq.w	a250 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a656:	2100      	movs	r1, #0
    a658:	f240 705a 	movw	r0, #1882	; 0x75a
    a65c:	f3af 8000 	nop.w
    a660:	e5f6      	b.n	a250 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a662:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a666:	2101      	movs	r1, #1
    a668:	4391      	bics	r1, r2
    a66a:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    a66e:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    a672:	e7cc      	b.n	a60e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    a674:	68b8      	ldr	r0, [r7, #8]
    a676:	ebb0 0009 	subs.w	r0, r0, r9
    a67a:	f006 f803 	bl	10684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a67e:	6861      	ldr	r1, [r4, #4]
    a680:	b921      	cbnz	r1, a68c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    a682:	e004      	b.n	a68e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a684:	6861      	ldr	r1, [r4, #4]
    a686:	f04f 30ff 	mov.w	r0, #4294967295
    a68a:	b101      	cbz	r1, a68e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a68c:	4788      	blx	r1
    a68e:	f1b8 0f00 	cmp.w	r8, #0
    a692:	d028      	beq.n	a6e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    a694:	f1bb 0f00 	cmp.w	fp, #0
    a698:	d004      	beq.n	a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    a69a:	2100      	movs	r1, #0
    a69c:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    a6a0:	f3af 8000 	nop.w
    a6a4:	b19d      	cbz	r5, a6ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a6a6:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    a6aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a6ae:	4438      	add	r0, r7
    a6b0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    a6b4:	2820      	cmp	r0, #32
    a6b6:	d00a      	beq.n	a6ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a6b8:	f1bb 0f00 	cmp.w	fp, #0
    a6bc:	d004      	beq.n	a6c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    a6be:	2100      	movs	r1, #0
    a6c0:	f240 708f 	movw	r0, #1935	; 0x78f
    a6c4:	f3af 8000 	nop.w
    a6c8:	7860      	ldrb	r0, [r4, #1]
    a6ca:	f002 f823 	bl	c714 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a6ce:	f1bb 0f00 	cmp.w	fp, #0
    a6d2:	d004      	beq.n	a6de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    a6d4:	2100      	movs	r1, #0
    a6d6:	f240 7094 	movw	r0, #1940	; 0x794
    a6da:	f3af 8000 	nop.w
    a6de:	b019      	add	sp, #100	; 0x64
    a6e0:	4628      	mov	r0, r5
    a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6e6:	4804      	ldr	r0, [pc, #16]	; (a6f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    a6e8:	2800      	cmp	r0, #0
    a6ea:	bf18      	it	ne
    a6ec:	f3af 8000 	nopne.w
    a6f0:	b662      	cpsie	i
    a6f2:	e7cf      	b.n	a694 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    a6f4:	200002f8 	.word	0x200002f8
    a6f8:	00000000 	.word	0x00000000

0000a6fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a700:	4604      	mov	r4, r0
    a702:	7800      	ldrb	r0, [r0, #0]
    a704:	b095      	sub	sp, #84	; 0x54
    a706:	b118      	cbz	r0, a710 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a708:	b015      	add	sp, #84	; 0x54
    a70a:	2000      	movs	r0, #0
    a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a710:	48d1      	ldr	r0, [pc, #836]	; (aa58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    a712:	6800      	ldr	r0, [r0, #0]
    a714:	05c0      	lsls	r0, r0, #23
    a716:	0dc0      	lsrs	r0, r0, #23
    a718:	d00e      	beq.n	a738 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a71a:	3810      	subs	r0, #16
    a71c:	b240      	sxtb	r0, r0
    a71e:	2800      	cmp	r0, #0
    a720:	bfb8      	it	lt
    a722:	f000 000f 	andlt.w	r0, r0, #15
    a726:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a72a:	bfac      	ite	ge
    a72c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a730:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a734:	0940      	lsrs	r0, r0, #5
    a736:	d0e7      	beq.n	a708 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a738:	a80d      	add	r0, sp, #52	; 0x34
    a73a:	f8df 9320 	ldr.w	r9, [pc, #800]	; aa5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    a73e:	9009      	str	r0, [sp, #36]	; 0x24
    a740:	f1b9 0f00 	cmp.w	r9, #0
    a744:	d004      	beq.n	a750 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a746:	2100      	movs	r1, #0
    a748:	f240 50c5 	movw	r0, #1477	; 0x5c5
    a74c:	f3af 8000 	nop.w
    a750:	f8df 830c 	ldr.w	r8, [pc, #780]	; aa60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    a754:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    a758:	2500      	movs	r5, #0
    a75a:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    a75e:	9503      	str	r5, [sp, #12]
    a760:	f1b9 0f00 	cmp.w	r9, #0
    a764:	d004      	beq.n	a770 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a766:	2100      	movs	r1, #0
    a768:	f240 50ca 	movw	r0, #1482	; 0x5ca
    a76c:	f3af 8000 	nop.w
    a770:	2001      	movs	r0, #1
    a772:	ea20 0a06 	bic.w	sl, r0, r6
    a776:	48bb      	ldr	r0, [pc, #748]	; (aa64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a778:	2240      	movs	r2, #64	; 0x40
    a77a:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a77e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    a782:	f006 f921 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a786:	f1b9 0f00 	cmp.w	r9, #0
    a78a:	d004      	beq.n	a796 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a78c:	2100      	movs	r1, #0
    a78e:	f240 503c 	movw	r0, #1340	; 0x53c
    a792:	f3af 8000 	nop.w
    a796:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a79a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    a79e:	eb01 0208 	add.w	r2, r1, r8
    a7a2:	4440      	add	r0, r8
    a7a4:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    a7a6:	8501      	strh	r1, [r0, #40]	; 0x28
    a7a8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    a7ac:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a7b0:	f1b9 0f00 	cmp.w	r9, #0
    a7b4:	d004      	beq.n	a7c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a7b6:	2100      	movs	r1, #0
    a7b8:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a7bc:	f3af 8000 	nop.w
    a7c0:	f1b9 0f00 	cmp.w	r9, #0
    a7c4:	d004      	beq.n	a7d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a7c6:	2100      	movs	r1, #0
    a7c8:	f240 50cf 	movw	r0, #1487	; 0x5cf
    a7cc:	f3af 8000 	nop.w
    a7d0:	f001 f91e 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a7d4:	460f      	mov	r7, r1
    a7d6:	4606      	mov	r6, r0
    a7d8:	8921      	ldrh	r1, [r4, #8]
    a7da:	4628      	mov	r0, r5
    a7dc:	f361 401f 	bfi	r0, r1, #16, #16
    a7e0:	4601      	mov	r1, r0
    a7e2:	7aa2      	ldrb	r2, [r4, #10]
    a7e4:	4628      	mov	r0, r5
    a7e6:	f362 0007 	bfi	r0, r2, #0, #8
    a7ea:	7ae2      	ldrb	r2, [r4, #11]
    a7ec:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    a7f0:	f362 200f 	bfi	r0, r2, #8, #8
    a7f4:	7822      	ldrb	r2, [r4, #0]
    a7f6:	950a      	str	r5, [sp, #40]	; 0x28
    a7f8:	f362 4017 	bfi	r0, r2, #16, #8
    a7fc:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    a800:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    a804:	950b      	str	r5, [sp, #44]	; 0x2c
    a806:	7820      	ldrb	r0, [r4, #0]
    a808:	b388      	cbz	r0, a86e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    a80a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a80e:	4896      	ldr	r0, [pc, #600]	; (aa68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    a810:	f10b 020c 	add.w	r2, fp, #12
    a814:	1a40      	subs	r0, r0, r1
    a816:	a911      	add	r1, sp, #68	; 0x44
    a818:	f000 fe1a 	bl	b450 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a81c:	2200      	movs	r2, #0
    a81e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    a822:	4630      	mov	r0, r6
    a824:	4639      	mov	r1, r7
    a826:	f7fe fceb 	bl	9200 <MPSL_IRQ_RADIO_Handler+0x3e4>
    a82a:	4684      	mov	ip, r0
    a82c:	7ae0      	ldrb	r0, [r4, #11]
    a82e:	460b      	mov	r3, r1
    a830:	2800      	cmp	r0, #0
    a832:	bf0c      	ite	eq
    a834:	207a      	moveq	r0, #122	; 0x7a
    a836:	204a      	movne	r0, #74	; 0x4a
    a838:	6861      	ldr	r1, [r4, #4]
    a83a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a83e:	4408      	add	r0, r1
    a840:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a844:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    a848:	4411      	add	r1, r2
    a84a:	4408      	add	r0, r1
    a84c:	1c80      	adds	r0, r0, #2
    a84e:	f000 fde3 	bl	b418 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a852:	f8cd a000 	str.w	sl, [sp]
    a856:	900c      	str	r0, [sp, #48]	; 0x30
    a858:	4632      	mov	r2, r6
    a85a:	463b      	mov	r3, r7
    a85c:	4659      	mov	r1, fp
    a85e:	6920      	ldr	r0, [r4, #16]
    a860:	f7fe fb36 	bl	8ed0 <MPSL_IRQ_RADIO_Handler+0xb4>
    a864:	2800      	cmp	r0, #0
    a866:	bf08      	it	eq
    a868:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    a86c:	e045      	b.n	a8fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    a86e:	e7ff      	b.n	a870 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    a870:	4630      	mov	r0, r6
    a872:	4639      	mov	r1, r7
    a874:	f000 fd6e 	bl	b354 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a878:	4b7c      	ldr	r3, [pc, #496]	; (aa6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a87a:	4602      	mov	r2, r0
    a87c:	eb10 0c03 	adds.w	ip, r0, r3
    a880:	468b      	mov	fp, r1
    a882:	f141 0300 	adc.w	r3, r1, #0
    a886:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a88a:	ebb0 0c0c 	subs.w	ip, r0, ip
    a88e:	eb71 0303 	sbcs.w	r3, r1, r3
    a892:	d22a      	bcs.n	a8ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a894:	3229      	adds	r2, #41	; 0x29
    a896:	f14b 0300 	adc.w	r3, fp, #0
    a89a:	1a82      	subs	r2, r0, r2
    a89c:	eb71 0203 	sbcs.w	r2, r1, r3
    a8a0:	d323      	bcc.n	a8ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a8a2:	8922      	ldrh	r2, [r4, #8]
    a8a4:	ab12      	add	r3, sp, #72	; 0x48
    a8a6:	1a80      	subs	r0, r0, r2
    a8a8:	eb61 0105 	sbc.w	r1, r1, r5
    a8ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a8ae:	1e40      	subs	r0, r0, #1
    a8b0:	9200      	str	r2, [sp, #0]
    a8b2:	f141 31ff 	adc.w	r1, r1, #4294967295
    a8b6:	aa07      	add	r2, sp, #28
    a8b8:	f000 fd70 	bl	b39c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a8bc:	7ae0      	ldrb	r0, [r4, #11]
    a8be:	2800      	cmp	r0, #0
    a8c0:	bf0c      	ite	eq
    a8c2:	207a      	moveq	r0, #122	; 0x7a
    a8c4:	204a      	movne	r0, #74	; 0x4a
    a8c6:	9907      	ldr	r1, [sp, #28]
    a8c8:	8922      	ldrh	r2, [r4, #8]
    a8ca:	4408      	add	r0, r1
    a8cc:	6861      	ldr	r1, [r4, #4]
    a8ce:	4411      	add	r1, r2
    a8d0:	4408      	add	r0, r1
    a8d2:	1c80      	adds	r0, r0, #2
    a8d4:	f000 fda0 	bl	b418 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a8d8:	4601      	mov	r1, r0
    a8da:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    a8de:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    a8e2:	1a08      	subs	r0, r1, r0
    a8e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a8e8:	e006      	b.n	a8f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a8ea:	1e70      	subs	r0, r6, #1
    a8ec:	f147 31ff 	adc.w	r1, r7, #4294967295
    a8f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a8f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a8f8:	900c      	str	r0, [sp, #48]	; 0x30
    a8fa:	f1b9 0f00 	cmp.w	r9, #0
    a8fe:	d004      	beq.n	a90a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    a900:	2100      	movs	r1, #0
    a902:	f240 50d5 	movw	r0, #1493	; 0x5d5
    a906:	f3af 8000 	nop.w
    a90a:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a90e:	f8d8 1008 	ldr.w	r1, [r8, #8]
    a912:	1808      	adds	r0, r1, r0
    a914:	eb42 0105 	adc.w	r1, r2, r5
    a918:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    a91c:	2a20      	cmp	r2, #32
    a91e:	d009      	beq.n	a934 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a920:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a924:	1a12      	subs	r2, r2, r0
    a926:	eb73 0201 	sbcs.w	r2, r3, r1
    a92a:	d203      	bcs.n	a934 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a92c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a930:	2001      	movs	r0, #1
    a932:	9003      	str	r0, [sp, #12]
    a934:	f1b9 0f00 	cmp.w	r9, #0
    a938:	d004      	beq.n	a944 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    a93a:	2100      	movs	r1, #0
    a93c:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    a940:	f3af 8000 	nop.w
    a944:	990a      	ldr	r1, [sp, #40]	; 0x28
    a946:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    a94a:	1a0a      	subs	r2, r1, r0
    a94c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a94e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a952:	18c9      	adds	r1, r1, r3
    a954:	1a08      	subs	r0, r1, r0
    a956:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a95a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a95e:	bf98      	it	ls
    a960:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a964:	d80b      	bhi.n	a97e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    a966:	4632      	mov	r2, r6
    a968:	463b      	mov	r3, r7
    a96a:	a90a      	add	r1, sp, #40	; 0x28
    a96c:	483f      	ldr	r0, [pc, #252]	; (aa6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a96e:	f8cd a000 	str.w	sl, [sp]
    a972:	f7fe faad 	bl	8ed0 <MPSL_IRQ_RADIO_Handler+0xb4>
    a976:	9903      	ldr	r1, [sp, #12]
    a978:	4308      	orrs	r0, r1
    a97a:	d145      	bne.n	aa08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    a97c:	e05f      	b.n	aa3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a97e:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    a982:	aa05      	add	r2, sp, #20
    a984:	a903      	add	r1, sp, #12
    a986:	4658      	mov	r0, fp
    a988:	f000 fd62 	bl	b450 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a98c:	f001 fa78 	bl	be80 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a990:	f000 fd42 	bl	b418 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a994:	4682      	mov	sl, r0
    a996:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    a99a:	2820      	cmp	r0, #32
    a99c:	d00a      	beq.n	a9b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    a99e:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a9a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a9a6:	1d80      	adds	r0, r0, #6
    a9a8:	f145 0100 	adc.w	r1, r5, #0
    a9ac:	181e      	adds	r6, r3, r0
    a9ae:	eb42 0701 	adc.w	r7, r2, r1
    a9b2:	e024      	b.n	a9fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a9b4:	360a      	adds	r6, #10
    a9b6:	f147 0700 	adc.w	r7, r7, #0
    a9ba:	f1bb 0f00 	cmp.w	fp, #0
    a9be:	d017      	beq.n	a9f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a9c0:	f001 fd5e 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a9c4:	b9a0      	cbnz	r0, a9f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a9c6:	f001 fc33 	bl	c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a9ca:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a9ce:	bf08      	it	eq
    a9d0:	200d      	moveq	r0, #13
    a9d2:	d00b      	beq.n	a9ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a9d4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a9d8:	3856      	subs	r0, #86	; 0x56
    a9da:	bf08      	it	eq
    a9dc:	201c      	moveq	r0, #28
    a9de:	d005      	beq.n	a9ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a9e0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a9e4:	389f      	subs	r0, #159	; 0x9f
    a9e6:	bf14      	ite	ne
    a9e8:	4628      	movne	r0, r5
    a9ea:	2032      	moveq	r0, #50	; 0x32
    a9ec:	1986      	adds	r6, r0, r6
    a9ee:	416f      	adcs	r7, r5
    a9f0:	9803      	ldr	r0, [sp, #12]
    a9f2:	4582      	cmp	sl, r0
    a9f4:	d903      	bls.n	a9fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a9f6:	ebaa 0000 	sub.w	r0, sl, r0
    a9fa:	1986      	adds	r6, r0, r6
    a9fc:	416f      	adcs	r7, r5
    a9fe:	201f      	movs	r0, #31
    aa00:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    aa04:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    aa08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    aa0c:	f000 fca2 	bl	b354 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    aa10:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    aa14:	1880      	adds	r0, r0, r2
    aa16:	eb41 0205 	adc.w	r2, r1, r5
    aa1a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    aa1e:	1840      	adds	r0, r0, r1
    aa20:	eb42 0105 	adc.w	r1, r2, r5
    aa24:	1c40      	adds	r0, r0, #1
    aa26:	f141 0100 	adc.w	r1, r1, #0
    aa2a:	f1b9 0f00 	cmp.w	r9, #0
    aa2e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    aa32:	d004      	beq.n	aa3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    aa34:	2100      	movs	r1, #0
    aa36:	f240 50fa 	movw	r0, #1530	; 0x5fa
    aa3a:	f3af 8000 	nop.w
    aa3e:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    aa42:	f88d 0000 	strb.w	r0, [sp]
    aa46:	f89d 0000 	ldrb.w	r0, [sp]
    aa4a:	2800      	cmp	r0, #0
    aa4c:	f47f ae78 	bne.w	a740 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    aa50:	b015      	add	sp, #84	; 0x54
    aa52:	2001      	movs	r0, #1
    aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa58:	e000ed04 	.word	0xe000ed04
    aa5c:	00000000 	.word	0x00000000
    aa60:	20000f78 	.word	0x20000f78
    aa64:	20000ef8 	.word	0x20000ef8
    aa68:	1e847fff 	.word	0x1e847fff
    aa6c:	0f424000 	.word	0x0f424000

0000aa70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    aa70:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa74:	4d9d      	ldr	r5, [pc, #628]	; (acec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    aa76:	b08c      	sub	sp, #48	; 0x30
    aa78:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    aa7c:	2000      	movs	r0, #0
    aa7e:	9007      	str	r0, [sp, #28]
    aa80:	9008      	str	r0, [sp, #32]
    aa82:	2001      	movs	r0, #1
    aa84:	4c9a      	ldr	r4, [pc, #616]	; (acf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    aa86:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    aa8a:	f04f 0800 	mov.w	r8, #0
    aa8e:	4607      	mov	r7, r0
    aa90:	9006      	str	r0, [sp, #24]
    aa92:	b124      	cbz	r4, aa9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    aa94:	2100      	movs	r1, #0
    aa96:	f240 70a5 	movw	r0, #1957	; 0x7a5
    aa9a:	f3af 8000 	nop.w
    aa9e:	9806      	ldr	r0, [sp, #24]
    aaa0:	2800      	cmp	r0, #0
    aaa2:	d03c      	beq.n	ab1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    aaa4:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    aaa8:	b124      	cbz	r4, aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    aaaa:	2100      	movs	r1, #0
    aaac:	f240 70aa 	movw	r0, #1962	; 0x7aa
    aab0:	f3af 8000 	nop.w
    aab4:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    aab8:	2240      	movs	r2, #64	; 0x40
    aaba:	ea27 060a 	bic.w	r6, r7, sl
    aabe:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    aac2:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    aac6:	4683      	mov	fp, r0
    aac8:	f005 ff7e 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    aacc:	b124      	cbz	r4, aad8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    aace:	2100      	movs	r1, #0
    aad0:	f240 503c 	movw	r0, #1340	; 0x53c
    aad4:	f3af 8000 	nop.w
    aad8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    aadc:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    aae0:	4428      	add	r0, r5
    aae2:	4429      	add	r1, r5
    aae4:	9000      	str	r0, [sp, #0]
    aae6:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    aae8:	8502      	strh	r2, [r0, #40]	; 0x28
    aaea:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    aaee:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    aaf2:	b124      	cbz	r4, aafe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    aaf4:	2100      	movs	r1, #0
    aaf6:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    aafa:	f3af 8000 	nop.w
    aafe:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    ab02:	f88d 0008 	strb.w	r0, [sp, #8]
    ab06:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ab0a:	b178      	cbz	r0, ab2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    ab0c:	2c00      	cmp	r4, #0
    ab0e:	bf1c      	itt	ne
    ab10:	2100      	movne	r1, #0
    ab12:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    ab16:	d0bc      	beq.n	aa92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ab18:	f3af 8000 	nop.w
    ab1c:	e7b9      	b.n	aa92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ab1e:	4875      	ldr	r0, [pc, #468]	; (acf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    ab20:	2800      	cmp	r0, #0
    ab22:	bf18      	it	ne
    ab24:	f3af 8000 	nopne.w
    ab28:	b662      	cpsie	i
    ab2a:	e7bb      	b.n	aaa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    ab2c:	b124      	cbz	r4, ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    ab2e:	2100      	movs	r1, #0
    ab30:	f240 70b4 	movw	r0, #1972	; 0x7b4
    ab34:	f3af 8000 	nop.w
    ab38:	980c      	ldr	r0, [sp, #48]	; 0x30
    ab3a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    ab3e:	2803      	cmp	r0, #3
    ab40:	d17e      	bne.n	ac40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    ab42:	9a00      	ldr	r2, [sp, #0]
    ab44:	990c      	ldr	r1, [sp, #48]	; 0x30
    ab46:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    ab4a:	4288      	cmp	r0, r1
    ab4c:	bf14      	ite	ne
    ab4e:	f04f 0a00 	movne.w	sl, #0
    ab52:	f04f 0a01 	moveq.w	sl, #1
    ab56:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    ab5a:	4683      	mov	fp, r0
    ab5c:	2220      	movs	r2, #32
    ab5e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    ab62:	e003      	b.n	ab6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    ab64:	4602      	mov	r2, r0
    ab66:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    ab6a:	7840      	ldrb	r0, [r0, #1]
    ab6c:	4288      	cmp	r0, r1
    ab6e:	d002      	beq.n	ab76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    ab70:	2820      	cmp	r0, #32
    ab72:	d00a      	beq.n	ab8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ab74:	e7f6      	b.n	ab64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    ab76:	2820      	cmp	r0, #32
    ab78:	d007      	beq.n	ab8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ab7a:	4583      	cmp	fp, r0
    ab7c:	d107      	bne.n	ab8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    ab7e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    ab82:	7840      	ldrb	r0, [r0, #1]
    ab84:	f88c 0000 	strb.w	r0, [ip]
    ab88:	e007      	b.n	ab9a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    ab8a:	4640      	mov	r0, r8
    ab8c:	e00c      	b.n	aba8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    ab8e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ab92:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    ab96:	7840      	ldrb	r0, [r0, #1]
    ab98:	7048      	strb	r0, [r1, #1]
    ab9a:	b124      	cbz	r4, aba6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    ab9c:	2100      	movs	r1, #0
    ab9e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    aba2:	f3af 8000 	nop.w
    aba6:	4638      	mov	r0, r7
    aba8:	46c3      	mov	fp, r8
    abaa:	ea10 0f0a 	tst.w	r0, sl
    abae:	bf18      	it	ne
    abb0:	46bb      	movne	fp, r7
    abb2:	2800      	cmp	r0, #0
    abb4:	d04e      	beq.n	ac54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    abb6:	b124      	cbz	r4, abc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    abb8:	2100      	movs	r1, #0
    abba:	f240 70b9 	movw	r0, #1977	; 0x7b9
    abbe:	f3af 8000 	nop.w
    abc2:	4632      	mov	r2, r6
    abc4:	2001      	movs	r0, #1
    abc6:	990c      	ldr	r1, [sp, #48]	; 0x30
    abc8:	f7fe ffae 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    abcc:	b124      	cbz	r4, abd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    abce:	2100      	movs	r1, #0
    abd0:	f240 70c2 	movw	r0, #1986	; 0x7c2
    abd4:	f3af 8000 	nop.w
    abd8:	4847      	ldr	r0, [pc, #284]	; (acf8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    abda:	2800      	cmp	r0, #0
    abdc:	bf18      	it	ne
    abde:	f3af 8000 	nopne.w
    abe2:	f3ef 8010 	mrs	r0, PRIMASK
    abe6:	b672      	cpsid	i
    abe8:	9006      	str	r0, [sp, #24]
    abea:	b124      	cbz	r4, abf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    abec:	2100      	movs	r1, #0
    abee:	f240 70c7 	movw	r0, #1991	; 0x7c7
    abf2:	f3af 8000 	nop.w
    abf6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    abfa:	f88d 0008 	strb.w	r0, [sp, #8]
    abfe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ac02:	b138      	cbz	r0, ac14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    ac04:	2c00      	cmp	r4, #0
    ac06:	bf1c      	itt	ne
    ac08:	2100      	movne	r1, #0
    ac0a:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    ac0e:	f43f af40 	beq.w	aa92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ac12:	e781      	b.n	ab18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    ac14:	f1bb 0f00 	cmp.w	fp, #0
    ac18:	d009      	beq.n	ac2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    ac1a:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    ac1e:	2820      	cmp	r0, #32
    ac20:	d105      	bne.n	ac2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    ac22:	4631      	mov	r1, r6
    ac24:	2002      	movs	r0, #2
    ac26:	f7fe ffb1 	bl	9b8c <MPSL_IRQ_RADIO_Handler+0xd70>
    ac2a:	9008      	str	r0, [sp, #32]
    ac2c:	b1f8      	cbz	r0, ac6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    ac2e:	b124      	cbz	r4, ac3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    ac30:	2100      	movs	r1, #0
    ac32:	f240 70df 	movw	r0, #2015	; 0x7df
    ac36:	f3af 8000 	nop.w
    ac3a:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    ac3e:	e000      	b.n	ac42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    ac40:	e008      	b.n	ac54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ac42:	ea27 0000 	bic.w	r0, r7, r0
    ac46:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    ac4a:	20ff      	movs	r0, #255	; 0xff
    ac4c:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    ac50:	2001      	movs	r0, #1
    ac52:	9007      	str	r0, [sp, #28]
    ac54:	b124      	cbz	r4, ac60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    ac56:	2100      	movs	r1, #0
    ac58:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    ac5c:	f3af 8000 	nop.w
    ac60:	9808      	ldr	r0, [sp, #32]
    ac62:	4e26      	ldr	r6, [pc, #152]	; (acfc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    ac64:	2802      	cmp	r0, #2
    ac66:	d009      	beq.n	ac7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    ac68:	2801      	cmp	r0, #1
    ac6a:	d027      	beq.n	acbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    ac6c:	e02b      	b.n	acc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ac6e:	b354      	cbz	r4, acc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ac70:	2100      	movs	r1, #0
    ac72:	f240 70da 	movw	r0, #2010	; 0x7da
    ac76:	f3af 8000 	nop.w
    ac7a:	e7ec      	b.n	ac56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ac7c:	f000 fec8 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ac80:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    ac84:	ebb3 0c00 	subs.w	ip, r3, r0
    ac88:	eb72 0c01 	sbcs.w	ip, r2, r1
    ac8c:	d204      	bcs.n	ac98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ac8e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    ac92:	2070      	movs	r0, #112	; 0x70
    ac94:	f001 fc6c 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ac98:	1a18      	subs	r0, r3, r0
    ac9a:	eb62 0101 	sbc.w	r1, r2, r1
    ac9e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    aca2:	f171 0100 	sbcs.w	r1, r1, #0
    aca6:	d304      	bcc.n	acb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    aca8:	f240 71ef 	movw	r1, #2031	; 0x7ef
    acac:	2070      	movs	r0, #112	; 0x70
    acae:	f001 fc5f 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    acb2:	f005 fce7 	bl	10684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    acb6:	6871      	ldr	r1, [r6, #4]
    acb8:	b129      	cbz	r1, acc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    acba:	e003      	b.n	acc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    acbc:	6871      	ldr	r1, [r6, #4]
    acbe:	f04f 30ff 	mov.w	r0, #4294967295
    acc2:	b101      	cbz	r1, acc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    acc4:	4788      	blx	r1
    acc6:	9806      	ldr	r0, [sp, #24]
    acc8:	b148      	cbz	r0, acde <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    acca:	b124      	cbz	r4, acd6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    accc:	2100      	movs	r1, #0
    acce:	f240 70ff 	movw	r0, #2047	; 0x7ff
    acd2:	f3af 8000 	nop.w
    acd6:	9807      	ldr	r0, [sp, #28]
    acd8:	b00d      	add	sp, #52	; 0x34
    acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acde:	4805      	ldr	r0, [pc, #20]	; (acf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    ace0:	2800      	cmp	r0, #0
    ace2:	bf18      	it	ne
    ace4:	f3af 8000 	nopne.w
    ace8:	b662      	cpsie	i
    acea:	e7ee      	b.n	acca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    acec:	20000f78 	.word	0x20000f78
	...
    acfc:	200002f8 	.word	0x200002f8

0000ad00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ad00:	b510      	push	{r4, lr}
    ad02:	2820      	cmp	r0, #32
    ad04:	d211      	bcs.n	ad2a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ad06:	490e      	ldr	r1, [pc, #56]	; (ad40 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ad08:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    ad0c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    ad10:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    ad14:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    ad18:	b13b      	cbz	r3, ad2a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ad1a:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    ad1e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    ad22:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ad26:	2a01      	cmp	r2, #1
    ad28:	d001      	beq.n	ad2e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ad2a:	2000      	movs	r0, #0
    ad2c:	bd10      	pop	{r4, pc}
    ad2e:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    ad32:	4601      	mov	r1, r0
    ad34:	2000      	movs	r0, #0
    ad36:	f7fe fef7 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    ad3a:	2001      	movs	r0, #1
    ad3c:	bd10      	pop	{r4, pc}
    ad3e:	0000      	.short	0x0000
    ad40:	20000f78 	.word	0x20000f78

0000ad44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ad44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad48:	4e86      	ldr	r6, [pc, #536]	; (af64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ad4a:	4680      	mov	r8, r0
    ad4c:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    ad50:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ad54:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ad58:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ad5c:	2800      	cmp	r0, #0
    ad5e:	d071      	beq.n	ae44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ad60:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    ad64:	4d80      	ldr	r5, [pc, #512]	; (af68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ad66:	b125      	cbz	r5, ad72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ad68:	2100      	movs	r1, #0
    ad6a:	f640 307b 	movw	r0, #2939	; 0xb7b
    ad6e:	f3af 8000 	nop.w
    ad72:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ad76:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ad7a:	2801      	cmp	r0, #1
    ad7c:	d018      	beq.n	adb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ad7e:	b2c0      	uxtb	r0, r0
    ad80:	2804      	cmp	r0, #4
    ad82:	bf1c      	itt	ne
    ad84:	2805      	cmpne	r0, #5
    ad86:	2806      	cmpne	r0, #6
    ad88:	d061      	beq.n	ae4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ad8a:	b12d      	cbz	r5, ad98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ad8c:	f04f 0100 	mov.w	r1, #0
    ad90:	f640 3087 	movw	r0, #2951	; 0xb87
    ad94:	f3af 8000 	nop.w
    ad98:	f005 fdaa 	bl	108f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ad9c:	b125      	cbz	r5, ada8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ad9e:	2100      	movs	r1, #0
    ada0:	f640 308b 	movw	r0, #2955	; 0xb8b
    ada4:	f3af 8000 	nop.w
    ada8:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    adac:	2801      	cmp	r0, #1
    adae:	d1e6      	bne.n	ad7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    adb0:	2401      	movs	r4, #1
    adb2:	b125      	cbz	r5, adbe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    adb4:	2100      	movs	r1, #0
    adb6:	f640 3092 	movw	r0, #2962	; 0xb92
    adba:	f3af 8000 	nop.w
    adbe:	2c00      	cmp	r4, #0
    adc0:	d04b      	beq.n	ae5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    adc2:	2000      	movs	r0, #0
    adc4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    adc8:	b125      	cbz	r5, add4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    adca:	2100      	movs	r1, #0
    adcc:	f640 3097 	movw	r0, #2967	; 0xb97
    add0:	f3af 8000 	nop.w
    add4:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    add8:	2001      	movs	r0, #1
    adda:	ea20 090b 	bic.w	r9, r0, fp
    adde:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ade2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ade6:	2240      	movs	r2, #64	; 0x40
    ade8:	f005 fdee 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    adec:	b125      	cbz	r5, adf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    adee:	2100      	movs	r1, #0
    adf0:	f240 503c 	movw	r0, #1340	; 0x53c
    adf4:	f3af 8000 	nop.w
    adf8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    adfc:	eb00 0a06 	add.w	sl, r0, r6
    ae00:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    ae04:	4430      	add	r0, r6
    ae06:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    ae08:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    ae0c:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    ae10:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    ae14:	b125      	cbz	r5, ae20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    ae16:	2100      	movs	r1, #0
    ae18:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    ae1c:	f3af 8000 	nop.w
    ae20:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ae24:	f88d 0000 	strb.w	r0, [sp]
    ae28:	f89d 0000 	ldrb.w	r0, [sp]
    ae2c:	b1e0      	cbz	r0, ae68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    ae2e:	2d00      	cmp	r5, #0
    ae30:	bf1c      	itt	ne
    ae32:	2100      	movne	r1, #0
    ae34:	f640 309d 	movwne	r0, #2973	; 0xb9d
    ae38:	d0bb      	beq.n	adb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ae3a:	bf00      	nop
    ae3c:	f3af 8000 	nop.w
    ae40:	e7b7      	b.n	adb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ae42:	e7ff      	b.n	ae44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ae44:	f640 3172 	movw	r1, #2930	; 0xb72
    ae48:	2070      	movs	r0, #112	; 0x70
    ae4a:	f001 fb91 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae4e:	464a      	mov	r2, r9
    ae50:	4641      	mov	r1, r8
    ae52:	2001      	movs	r0, #1
    ae54:	f7fe fe68 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    ae58:	e7a0      	b.n	ad9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ae5a:	4844      	ldr	r0, [pc, #272]	; (af6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ae5c:	2800      	cmp	r0, #0
    ae5e:	bf18      	it	ne
    ae60:	f3af 8000 	nopne.w
    ae64:	b662      	cpsie	i
    ae66:	e7ac      	b.n	adc2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ae68:	b125      	cbz	r5, ae74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ae6a:	2100      	movs	r1, #0
    ae6c:	f640 30a1 	movw	r0, #2977	; 0xba1
    ae70:	f3af 8000 	nop.w
    ae74:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    ae78:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    ae7c:	4640      	mov	r0, r8
    ae7e:	461c      	mov	r4, r3
    ae80:	f04f 0b20 	mov.w	fp, #32
    ae84:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ae88:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    ae8c:	e004      	b.n	ae98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ae8e:	46a3      	mov	fp, r4
    ae90:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ae94:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ae98:	4284      	cmp	r4, r0
    ae9a:	d002      	beq.n	aea2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ae9c:	2c20      	cmp	r4, #32
    ae9e:	d02b      	beq.n	aef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    aea0:	e7f5      	b.n	ae8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    aea2:	2c20      	cmp	r4, #32
    aea4:	d028      	beq.n	aef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    aea6:	42a3      	cmp	r3, r4
    aea8:	d104      	bne.n	aeb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    aeaa:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    aeae:	7840      	ldrb	r0, [r0, #1]
    aeb0:	7008      	strb	r0, [r1, #0]
    aeb2:	e005      	b.n	aec0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    aeb4:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    aeb8:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    aebc:	7840      	ldrb	r0, [r0, #1]
    aebe:	7048      	strb	r0, [r1, #1]
    aec0:	f1ba 0f00 	cmp.w	sl, #0
    aec4:	d011      	beq.n	aeea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    aec6:	b125      	cbz	r5, aed2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    aec8:	2100      	movs	r1, #0
    aeca:	f240 409c 	movw	r0, #1180	; 0x49c
    aece:	f3af 8000 	nop.w
    aed2:	f89a 0000 	ldrb.w	r0, [sl]
    aed6:	42a0      	cmp	r0, r4
    aed8:	d107      	bne.n	aeea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    aeda:	b125      	cbz	r5, aee6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    aedc:	2100      	movs	r1, #0
    aede:	f240 409f 	movw	r0, #1183	; 0x49f
    aee2:	f3af 8000 	nop.w
    aee6:	f88a b000 	strb.w	fp, [sl]
    aeea:	b15d      	cbz	r5, af04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    aeec:	2100      	movs	r1, #0
    aeee:	f240 40a4 	movw	r0, #1188	; 0x4a4
    aef2:	f3af 8000 	nop.w
    aef6:	e000      	b.n	aefa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    aef8:	b125      	cbz	r5, af04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    aefa:	2100      	movs	r1, #0
    aefc:	f640 30a5 	movw	r0, #2981	; 0xba5
    af00:	f3af 8000 	nop.w
    af04:	481a      	ldr	r0, [pc, #104]	; (af70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    af06:	2800      	cmp	r0, #0
    af08:	bf18      	it	ne
    af0a:	f3af 8000 	nopne.w
    af0e:	f3ef 8410 	mrs	r4, PRIMASK
    af12:	b672      	cpsid	i
    af14:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    af18:	f88d 0000 	strb.w	r0, [sp]
    af1c:	f89d 0000 	ldrb.w	r0, [sp]
    af20:	b138      	cbz	r0, af32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    af22:	2d00      	cmp	r5, #0
    af24:	bf1c      	itt	ne
    af26:	2100      	movne	r1, #0
    af28:	f640 30ab 	movwne	r0, #2987	; 0xbab
    af2c:	f43f af41 	beq.w	adb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    af30:	e784      	b.n	ae3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    af32:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    af36:	20ff      	movs	r0, #255	; 0xff
    af38:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    af3c:	b154      	cbz	r4, af54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    af3e:	2d00      	cmp	r5, #0
    af40:	bf08      	it	eq
    af42:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af46:	2100      	movs	r1, #0
    af48:	f640 30b8 	movw	r0, #3000	; 0xbb8
    af4c:	f3af 8000 	nop.w
    af50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af54:	4805      	ldr	r0, [pc, #20]	; (af6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    af56:	2800      	cmp	r0, #0
    af58:	bf18      	it	ne
    af5a:	f3af 8000 	nopne.w
    af5e:	b662      	cpsie	i
    af60:	e7ed      	b.n	af3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    af62:	0000      	.short	0x0000
    af64:	20000f78 	.word	0x20000f78
	...

0000af74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    af74:	b570      	push	{r4, r5, r6, lr}
    af76:	460d      	mov	r5, r1
    af78:	4606      	mov	r6, r0
    af7a:	f001 fa6f 	bl	c45c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    af7e:	480d      	ldr	r0, [pc, #52]	; (afb4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    af80:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    af84:	2400      	movs	r4, #0
    af86:	3880      	subs	r0, #128	; 0x80
    af88:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    af8c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    af90:	b129      	cbz	r1, af9e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    af92:	1c61      	adds	r1, r4, #1
    af94:	b2cc      	uxtb	r4, r1
    af96:	2c20      	cmp	r4, #32
    af98:	d3f8      	bcc.n	af8c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    af9a:	2020      	movs	r0, #32
    af9c:	bd70      	pop	{r4, r5, r6, pc}
    af9e:	4806      	ldr	r0, [pc, #24]	; (afb8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    afa0:	4621      	mov	r1, r4
    afa2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    afa6:	e9c0 6500 	strd	r6, r5, [r0]
    afaa:	2001      	movs	r0, #1
    afac:	f7fe fdbc 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    afb0:	4620      	mov	r0, r4
    afb2:	bd70      	pop	{r4, r5, r6, pc}
    afb4:	20000f78 	.word	0x20000f78
    afb8:	20000af8 	.word	0x20000af8

0000afbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    afbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afc0:	f000 fd26 	bl	ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    afc4:	4606      	mov	r6, r0
    afc6:	460f      	mov	r7, r1
    afc8:	f000 fe66 	bl	bc98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    afcc:	4c65      	ldr	r4, [pc, #404]	; (b164 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    afce:	6860      	ldr	r0, [r4, #4]
    afd0:	f1b0 3fff 	cmp.w	r0, #4294967295
    afd4:	bf1c      	itt	ne
    afd6:	f04f 30ff 	movne.w	r0, #4294967295
    afda:	6060      	strne	r0, [r4, #4]
    afdc:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    afe0:	f8df b184 	ldr.w	fp, [pc, #388]	; b168 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    afe4:	2500      	movs	r5, #0
    afe6:	bb10      	cbnz	r0, b02e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    afe8:	f44f 710c 	mov.w	r1, #560	; 0x230
    afec:	6920      	ldr	r0, [r4, #16]
    afee:	f001 fa21 	bl	c434 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    aff2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    aff6:	68a1      	ldr	r1, [r4, #8]
    aff8:	1818      	adds	r0, r3, r0
    affa:	eb45 0305 	adc.w	r3, r5, r5
    affe:	1809      	adds	r1, r1, r0
    b000:	eb42 0003 	adc.w	r0, r2, r3
    b004:	1a71      	subs	r1, r6, r1
    b006:	eb77 0000 	sbcs.w	r0, r7, r0
    b00a:	d310      	bcc.n	b02e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    b00c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b010:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    b014:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    b018:	6840      	ldr	r0, [r0, #4]
    b01a:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    b01e:	680a      	ldr	r2, [r1, #0]
    b020:	2108      	movs	r1, #8
    b022:	4790      	blx	r2
    b024:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    b028:	2070      	movs	r0, #112	; 0x70
    b02a:	f001 faa1 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b02e:	7e60      	ldrb	r0, [r4, #25]
    b030:	b180      	cbz	r0, b054 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    b032:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b036:	f88d 0000 	strb.w	r0, [sp]
    b03a:	f89d 0000 	ldrb.w	r0, [sp]
    b03e:	b148      	cbz	r0, b054 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    b040:	f000 fc5c 	bl	b8fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    b044:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    b048:	b150      	cbz	r0, b060 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    b04a:	f240 31cd 	movw	r1, #973	; 0x3cd
    b04e:	2070      	movs	r0, #112	; 0x70
    b050:	f001 fa8e 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b054:	1cf0      	adds	r0, r6, #3
    b056:	f147 0100 	adc.w	r1, r7, #0
    b05a:	f000 fb29 	bl	b6b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b05e:	e7f1      	b.n	b044 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    b060:	2001      	movs	r0, #1
    b062:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b066:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b06a:	2820      	cmp	r0, #32
    b06c:	d020      	beq.n	b0b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    b06e:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    b072:	2020      	movs	r0, #32
    b074:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    b078:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b07c:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    b080:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    b084:	6025      	str	r5, [r4, #0]
    b086:	f000 ff01 	bl	be8c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    b08a:	f884 0020 	strb.w	r0, [r4, #32]
    b08e:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    b092:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    b096:	eb00 0a04 	add.w	sl, r0, r4
    b09a:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    b09e:	2820      	cmp	r0, #32
    b0a0:	d01c      	beq.n	b0dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b0a2:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    b0a6:	f89b 001a 	ldrb.w	r0, [fp, #26]
    b0aa:	2801      	cmp	r0, #1
    b0ac:	d005      	beq.n	b0ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    b0ae:	e015      	b.n	b0dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b0b0:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b0b4:	2070      	movs	r0, #112	; 0x70
    b0b6:	f001 fa5b 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0ba:	2201      	movs	r2, #1
    b0bc:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    b0c0:	4630      	mov	r0, r6
    b0c2:	4639      	mov	r1, r7
    b0c4:	f7fe f89c 	bl	9200 <MPSL_IRQ_RADIO_Handler+0x3e4>
    b0c8:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    b0cc:	1a12      	subs	r2, r2, r0
    b0ce:	eb73 0201 	sbcs.w	r2, r3, r1
    b0d2:	bf24      	itt	cs
    b0d4:	f10b 0208 	addcs.w	r2, fp, #8
    b0d8:	e9c2 0100 	strdcs	r0, r1, [r2]
    b0dc:	4641      	mov	r1, r8
    b0de:	2001      	movs	r0, #1
    b0e0:	f7fe fd54 	bl	9b8c <MPSL_IRQ_RADIO_Handler+0xd70>
    b0e4:	0007      	movs	r7, r0
    b0e6:	d0f9      	beq.n	b0dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b0e8:	4820      	ldr	r0, [pc, #128]	; (b16c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    b0ea:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    b0ee:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    b0f2:	2802      	cmp	r0, #2
    b0f4:	d104      	bne.n	b100 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    b0f6:	4642      	mov	r2, r8
    b0f8:	4649      	mov	r1, r9
    b0fa:	2006      	movs	r0, #6
    b0fc:	f7fe fd14 	bl	9b28 <MPSL_IRQ_RADIO_Handler+0xd0c>
    b100:	20ff      	movs	r0, #255	; 0xff
    b102:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b106:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    b10a:	f8df 8064 	ldr.w	r8, [pc, #100]	; b170 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    b10e:	2820      	cmp	r0, #32
    b110:	bf1c      	itt	ne
    b112:	f898 0001 	ldrbne.w	r0, [r8, #1]
    b116:	f001 fafd 	blne	c714 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b11a:	f894 0020 	ldrb.w	r0, [r4, #32]
    b11e:	b128      	cbz	r0, b12c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    b120:	f000 fe90 	bl	be44 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b124:	f884 5020 	strb.w	r5, [r4, #32]
    b128:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    b12c:	2f02      	cmp	r7, #2
    b12e:	d00f      	beq.n	b150 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    b130:	2f01      	cmp	r7, #1
    b132:	bf18      	it	ne
    b134:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b138:	f04f 30ff 	mov.w	r0, #4294967295
    b13c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b140:	2900      	cmp	r1, #0
    b142:	bf08      	it	eq
    b144:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b148:	b001      	add	sp, #4
    b14a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b14e:	4708      	bx	r1
    b150:	68a0      	ldr	r0, [r4, #8]
    b152:	1b80      	subs	r0, r0, r6
    b154:	f005 fa96 	bl	10684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b158:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b15c:	2900      	cmp	r1, #0
    b15e:	d1f3      	bne.n	b148 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    b160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b164:	20000f78 	.word	0x20000f78
    b168:	20000af8 	.word	0x20000af8
    b16c:	20000ef8 	.word	0x20000ef8
    b170:	200002f8 	.word	0x200002f8

0000b174 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b174:	b570      	push	{r4, r5, r6, lr}
    b176:	4c42      	ldr	r4, [pc, #264]	; (b280 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b178:	4605      	mov	r5, r0
    b17a:	b082      	sub	sp, #8
    b17c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b180:	2820      	cmp	r0, #32
    b182:	d008      	beq.n	b196 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b184:	6860      	ldr	r0, [r4, #4]
    b186:	f1b0 3fff 	cmp.w	r0, #4294967295
    b18a:	d009      	beq.n	b1a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b18c:	f640 21b6 	movw	r1, #2742	; 0xab6
    b190:	2070      	movs	r0, #112	; 0x70
    b192:	f001 f9ed 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b196:	f640 21b5 	movw	r1, #2741	; 0xab5
    b19a:	2070      	movs	r0, #112	; 0x70
    b19c:	f001 f9e8 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b1a0:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b1a4:	4937      	ldr	r1, [pc, #220]	; (b284 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b1a6:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    b1aa:	68b0      	ldr	r0, [r6, #8]
    b1ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b1b0:	f005 fa68 	bl	10684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1b4:	4602      	mov	r2, r0
    b1b6:	8af0      	ldrh	r0, [r6, #22]
    b1b8:	7d31      	ldrb	r1, [r6, #20]
    b1ba:	4b33      	ldr	r3, [pc, #204]	; (b288 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b1bc:	4408      	add	r0, r1
    b1be:	1c40      	adds	r0, r0, #1
    b1c0:	1811      	adds	r1, r2, r0
    b1c2:	429a      	cmp	r2, r3
    b1c4:	d817      	bhi.n	b1f6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b1c6:	4a31      	ldr	r2, [pc, #196]	; (b28c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b1c8:	4290      	cmp	r0, r2
    b1ca:	dc1b      	bgt.n	b204 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b1cc:	f1c2 0c00 	rsb	ip, r2, #0
    b1d0:	4560      	cmp	r0, ip
    b1d2:	db1e      	blt.n	b212 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b1d4:	0056      	lsls	r6, r2, #1
    b1d6:	428e      	cmp	r6, r1
    b1d8:	bfdc      	itt	le
    b1da:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b1de:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b1e2:	dd05      	ble.n	b1f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b1e4:	2900      	cmp	r1, #0
    b1e6:	bfbc      	itt	lt
    b1e8:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b1ec:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b1f0:	1948      	adds	r0, r1, r5
    b1f2:	4299      	cmp	r1, r3
    b1f4:	d904      	bls.n	b200 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b1f6:	f240 517f 	movw	r1, #1407	; 0x57f
    b1fa:	2070      	movs	r0, #112	; 0x70
    b1fc:	f001 f9b8 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b200:	4295      	cmp	r5, r2
    b202:	dd04      	ble.n	b20e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b204:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    b208:	2070      	movs	r0, #112	; 0x70
    b20a:	f001 f9b1 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b20e:	4565      	cmp	r5, ip
    b210:	da04      	bge.n	b21c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b212:	f240 5181 	movw	r1, #1409	; 0x581
    b216:	2070      	movs	r0, #112	; 0x70
    b218:	f001 f9aa 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b21c:	4286      	cmp	r6, r0
    b21e:	bfdc      	itt	le
    b220:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b224:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b228:	dd05      	ble.n	b236 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b22a:	2800      	cmp	r0, #0
    b22c:	bfbc      	itt	lt
    b22e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b232:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b236:	aa01      	add	r2, sp, #4
    b238:	4669      	mov	r1, sp
    b23a:	f000 f909 	bl	b450 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b23e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b242:	280f      	cmp	r0, #15
    b244:	bf8c      	ite	hi
    b246:	2001      	movhi	r0, #1
    b248:	2000      	movls	r0, #0
    b24a:	9900      	ldr	r1, [sp, #0]
    b24c:	4408      	add	r0, r1
    b24e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b252:	6061      	str	r1, [r4, #4]
    b254:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b258:	f88d 0000 	strb.w	r0, [sp]
    b25c:	f89d 0000 	ldrb.w	r0, [sp]
    b260:	2800      	cmp	r0, #0
    b262:	bf04      	itt	eq
    b264:	b002      	addeq	sp, #8
    b266:	bd70      	popeq	{r4, r5, r6, pc}
    b268:	2005      	movs	r0, #5
    b26a:	f000 fbf3 	bl	ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b26e:	2800      	cmp	r0, #0
    b270:	bf1c      	itt	ne
    b272:	b002      	addne	sp, #8
    b274:	bd70      	popne	{r4, r5, r6, pc}
    b276:	f640 21bd 	movw	r1, #2749	; 0xabd
    b27a:	2070      	movs	r0, #112	; 0x70
    b27c:	f001 f978 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b280:	20000f78 	.word	0x20000f78
    b284:	20000af8 	.word	0x20000af8
    b288:	1e847fff 	.word	0x1e847fff
    b28c:	0f424000 	.word	0x0f424000

0000b290 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b290:	b570      	push	{r4, r5, r6, lr}
    b292:	4c1e      	ldr	r4, [pc, #120]	; (b30c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b294:	2120      	movs	r1, #32
    b296:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    b29a:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    b29e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    b2a2:	2000      	movs	r0, #0
    b2a4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    b2a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    b2ac:	1e42      	subs	r2, r0, #1
    b2ae:	e9c4 0200 	strd	r0, r2, [r4]
    b2b2:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    b2b6:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    b2ba:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    b2be:	f884 0020 	strb.w	r0, [r4, #32]
    b2c2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b2c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    b2ca:	1e41      	subs	r1, r0, #1
    b2cc:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    b2d0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    b2d4:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b2d8:	2210      	movs	r2, #16
    b2da:	7088      	strb	r0, [r1, #2]
    b2dc:	f801 0f04 	strb.w	r0, [r1, #4]!
    b2e0:	1e52      	subs	r2, r2, #1
    b2e2:	d1fa      	bne.n	b2da <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    b2e4:	f000 fddc 	bl	bea0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b2e8:	4d09      	ldr	r5, [pc, #36]	; (b310 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    b2ea:	2601      	movs	r6, #1
    b2ec:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    b2f0:	20ff      	movs	r0, #255	; 0xff
    b2f2:	7028      	strb	r0, [r5, #0]
    b2f4:	4807      	ldr	r0, [pc, #28]	; (b314 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    b2f6:	f001 f9ef 	bl	c6d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b2fa:	7068      	strb	r0, [r5, #1]
    b2fc:	f001 fa5a 	bl	c7b4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b300:	60a8      	str	r0, [r5, #8]
    b302:	f000 fd5f 	bl	bdc4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b306:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    b30a:	bd70      	pop	{r4, r5, r6, pc}
    b30c:	20000f78 	.word	0x20000f78
    b310:	200002f8 	.word	0x200002f8
    b314:	00009a59 	.word	0x00009a59

0000b318 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b318:	b570      	push	{r4, r5, r6, lr}
    b31a:	4605      	mov	r5, r0
    b31c:	2001      	movs	r0, #1
    b31e:	fa00 f405 	lsl.w	r4, r0, r5
    b322:	460e      	mov	r6, r1
    b324:	2a00      	cmp	r2, #0
    b326:	bf08      	it	eq
    b328:	4808      	ldreq	r0, [pc, #32]	; (b34c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b32a:	d00c      	beq.n	b346 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b32c:	2000      	movs	r0, #0
    b32e:	f000 fd2f 	bl	bd90 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b332:	00e9      	lsls	r1, r5, #3
    b334:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b338:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b33c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b340:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b344:	4802      	ldr	r0, [pc, #8]	; (b350 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b346:	6004      	str	r4, [r0, #0]
    b348:	bd70      	pop	{r4, r5, r6, pc}
    b34a:	0000      	.short	0x0000
    b34c:	4001f508 	.word	0x4001f508
    b350:	4001f504 	.word	0x4001f504

0000b354 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    b354:	0e03      	lsrs	r3, r0, #24
    b356:	b430      	push	{r4, r5}
    b358:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b35c:	f8df c038 	ldr.w	ip, [pc, #56]	; b398 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    b360:	0e09      	lsrs	r1, r1, #24
    b362:	fba3 250c 	umull	r2, r5, r3, ip
    b366:	fb01 510c 	mla	r1, r1, ip, r5
    b36a:	2400      	movs	r4, #0
    b36c:	fb03 1104 	mla	r1, r3, r4, r1
    b370:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b374:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    b378:	f643 5c09 	movw	ip, #15625	; 0x3d09
    b37c:	fb13 f30c 	smulbb	r3, r3, ip
    b380:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b384:	fb10 f00c 	smulbb	r0, r0, ip
    b388:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b38c:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    b390:	1880      	adds	r0, r0, r2
    b392:	4161      	adcs	r1, r4
    b394:	bc30      	pop	{r4, r5}
    b396:	4770      	bx	lr
    b398:	1e848000 	.word	0x1e848000

0000b39c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    b39c:	b570      	push	{r4, r5, r6, lr}
    b39e:	b084      	sub	sp, #16
    b3a0:	4615      	mov	r5, r2
    b3a2:	aa01      	add	r2, sp, #4
    b3a4:	461c      	mov	r4, r3
    b3a6:	9200      	str	r2, [sp, #0]
    b3a8:	9e08      	ldr	r6, [sp, #32]
    b3aa:	ab02      	add	r3, sp, #8
    b3ac:	4a17      	ldr	r2, [pc, #92]	; (b40c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    b3ae:	f005 faea 	bl	10986 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    b3b2:	9801      	ldr	r0, [sp, #4]
    b3b4:	f248 6237 	movw	r2, #34359	; 0x8637
    b3b8:	0b41      	lsrs	r1, r0, #13
    b3ba:	4351      	muls	r1, r2
    b3bc:	0c09      	lsrs	r1, r1, #16
    b3be:	4a14      	ldr	r2, [pc, #80]	; (b410 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    b3c0:	024b      	lsls	r3, r1, #9
    b3c2:	fb01 0102 	mla	r1, r1, r2, r0
    b3c6:	4813      	ldr	r0, [pc, #76]	; (b414 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    b3c8:	4348      	muls	r0, r1
    b3ca:	0d42      	lsrs	r2, r0, #21
    b3cc:	1898      	adds	r0, r3, r2
    b3ce:	f643 5309 	movw	r3, #15625	; 0x3d09
    b3d2:	fb12 f303 	smulbb	r3, r2, r3
    b3d6:	f503 7280 	add.w	r2, r3, #256	; 0x100
    b3da:	f643 5c08 	movw	ip, #15624	; 0x3d08
    b3de:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    b3e2:	4463      	add	r3, ip
    b3e4:	b2d2      	uxtb	r2, r2
    b3e6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    b3ea:	bf84      	itt	hi
    b3ec:	2200      	movhi	r2, #0
    b3ee:	1c40      	addhi	r0, r0, #1
    b3f0:	7032      	strb	r2, [r6, #0]
    b3f2:	9b02      	ldr	r3, [sp, #8]
    b3f4:	0a19      	lsrs	r1, r3, #8
    b3f6:	061b      	lsls	r3, r3, #24
    b3f8:	1818      	adds	r0, r3, r0
    b3fa:	f141 0100 	adc.w	r1, r1, #0
    b3fe:	e9c4 0100 	strd	r0, r1, [r4]
    b402:	9801      	ldr	r0, [sp, #4]
    b404:	6028      	str	r0, [r5, #0]
    b406:	b004      	add	sp, #16
    b408:	bd70      	pop	{r4, r5, r6, pc}
    b40a:	0000      	.short	0x0000
    b40c:	1e848000 	.word	0x1e848000
    b410:	ffffc2f7 	.word	0xffffc2f7
    b414:	00010c6f 	.word	0x00010c6f

0000b418 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b418:	0b41      	lsrs	r1, r0, #13
    b41a:	f248 6237 	movw	r2, #34359	; 0x8637
    b41e:	4351      	muls	r1, r2
    b420:	0c0a      	lsrs	r2, r1, #16
    b422:	4b09      	ldr	r3, [pc, #36]	; (b448 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b424:	0251      	lsls	r1, r2, #9
    b426:	fb02 0203 	mla	r2, r2, r3, r0
    b42a:	4808      	ldr	r0, [pc, #32]	; (b44c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b42c:	4350      	muls	r0, r2
    b42e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b432:	306e      	adds	r0, #110	; 0x6e
    b434:	0d40      	lsrs	r0, r0, #21
    b436:	425b      	negs	r3, r3
    b438:	fb10 f303 	smulbb	r3, r0, r3
    b43c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b440:	bf88      	it	hi
    b442:	1c49      	addhi	r1, r1, #1
    b444:	4408      	add	r0, r1
    b446:	4770      	bx	lr
    b448:	ffffc2f7 	.word	0xffffc2f7
    b44c:	00010c6f 	.word	0x00010c6f

0000b450 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b450:	0b43      	lsrs	r3, r0, #13
    b452:	f248 6c37 	movw	ip, #34359	; 0x8637
    b456:	fb03 f30c 	mul.w	r3, r3, ip
    b45a:	b430      	push	{r4, r5}
    b45c:	0c1b      	lsrs	r3, r3, #16
    b45e:	f8df c044 	ldr.w	ip, [pc, #68]	; b4a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b462:	025c      	lsls	r4, r3, #9
    b464:	fb03 030c 	mla	r3, r3, ip, r0
    b468:	480f      	ldr	r0, [pc, #60]	; (b4a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b46a:	4358      	muls	r0, r3
    b46c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b470:	eb04 000c 	add.w	r0, r4, ip
    b474:	f643 5409 	movw	r4, #15625	; 0x3d09
    b478:	fb1c f404 	smulbb	r4, ip, r4
    b47c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b480:	f643 5508 	movw	r5, #15624	; 0x3d08
    b484:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b488:	442c      	add	r4, r5
    b48a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b48e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b492:	bf84      	itt	hi
    b494:	f04f 0c00 	movhi.w	ip, #0
    b498:	1c40      	addhi	r0, r0, #1
    b49a:	6008      	str	r0, [r1, #0]
    b49c:	f882 c000 	strb.w	ip, [r2]
    b4a0:	bc30      	pop	{r4, r5}
    b4a2:	4770      	bx	lr
    b4a4:	ffffc2f7 	.word	0xffffc2f7
    b4a8:	00010c6f 	.word	0x00010c6f

0000b4ac <MPSL_IRQ_RTC0_Handler>:
    b4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4b0:	2400      	movs	r4, #0
    b4b2:	f8df 9080 	ldr.w	r9, [pc, #128]	; b534 <MPSL_IRQ_RTC0_Handler+0x88>
    b4b6:	4d20      	ldr	r5, [pc, #128]	; (b538 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b4b8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    b4bc:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b4c0:	ea4f 0604 	mov.w	r6, r4
    b4c4:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    b4c8:	fa07 f004 	lsl.w	r0, r7, r4
    b4cc:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    b4d0:	4202      	tst	r2, r0
    b4d2:	d01a      	beq.n	b50a <MPSL_IRQ_RTC0_Handler+0x5e>
    b4d4:	4a18      	ldr	r2, [pc, #96]	; (b538 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b4d6:	5852      	ldr	r2, [r2, r1]
    b4d8:	b1ba      	cbz	r2, b50a <MPSL_IRQ_RTC0_Handler+0x5e>
    b4da:	506e      	str	r6, [r5, r1]
    b4dc:	00a1      	lsls	r1, r4, #2
    b4de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b4e2:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    b4e6:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b4ea:	f8d9 2000 	ldr.w	r2, [r9]
    b4ee:	1a89      	subs	r1, r1, r2
    b4f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b4f4:	2902      	cmp	r1, #2
    b4f6:	d302      	bcc.n	b4fe <MPSL_IRQ_RTC0_Handler+0x52>
    b4f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    b4fc:	d905      	bls.n	b50a <MPSL_IRQ_RTC0_Handler+0x5e>
    b4fe:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b502:	1d20      	adds	r0, r4, #4
    b504:	b2c0      	uxtb	r0, r0
    b506:	f7fe fd6f 	bl	9fe8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b50a:	1c60      	adds	r0, r4, #1
    b50c:	b2c4      	uxtb	r4, r0
    b50e:	2c03      	cmp	r4, #3
    b510:	d3d8      	bcc.n	b4c4 <MPSL_IRQ_RTC0_Handler+0x18>
    b512:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b516:	b128      	cbz	r0, b524 <MPSL_IRQ_RTC0_Handler+0x78>
    b518:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b51c:	4807      	ldr	r0, [pc, #28]	; (b53c <MPSL_IRQ_RTC0_Handler+0x90>)
    b51e:	6881      	ldr	r1, [r0, #8]
    b520:	1c49      	adds	r1, r1, #1
    b522:	6081      	str	r1, [r0, #8]
    b524:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b528:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b52c:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    b530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b534:	4000b504 	.word	0x4000b504
    b538:	4000b000 	.word	0x4000b000
    b53c:	20000028 	.word	0x20000028

0000b540 <MPSL_IRQ_TIMER0_Handler>:
    b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b544:	4d38      	ldr	r5, [pc, #224]	; (b628 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b546:	7828      	ldrb	r0, [r5, #0]
    b548:	2804      	cmp	r0, #4
    b54a:	d068      	beq.n	b61e <MPSL_IRQ_TIMER0_Handler+0xde>
    b54c:	1ca8      	adds	r0, r5, #2
    b54e:	2201      	movs	r2, #1
    b550:	7801      	ldrb	r1, [r0, #0]
    b552:	b159      	cbz	r1, b56c <MPSL_IRQ_TIMER0_Handler+0x2c>
    b554:	2901      	cmp	r1, #1
    b556:	bf08      	it	eq
    b558:	706a      	strbeq	r2, [r5, #1]
    b55a:	d002      	beq.n	b562 <MPSL_IRQ_TIMER0_Handler+0x22>
    b55c:	7869      	ldrb	r1, [r5, #1]
    b55e:	2900      	cmp	r1, #0
    b560:	d058      	beq.n	b614 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b562:	2102      	movs	r1, #2
    b564:	7001      	strb	r1, [r0, #0]
    b566:	7840      	ldrb	r0, [r0, #1]
    b568:	f000 fb2e 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b56c:	4c2f      	ldr	r4, [pc, #188]	; (b62c <MPSL_IRQ_TIMER0_Handler+0xec>)
    b56e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b572:	f04f 0800 	mov.w	r8, #0
    b576:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b57a:	f44f 7780 	mov.w	r7, #256	; 0x100
    b57e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b582:	d00a      	beq.n	b59a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b584:	482a      	ldr	r0, [pc, #168]	; (b630 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b586:	6800      	ldr	r0, [r0, #0]
    b588:	b138      	cbz	r0, b59a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b58a:	2003      	movs	r0, #3
    b58c:	f000 fb1c 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b590:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b594:	2003      	movs	r0, #3
    b596:	f7fe fd27 	bl	9fe8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b59a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b59e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b5a2:	d00a      	beq.n	b5ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    b5a4:	4823      	ldr	r0, [pc, #140]	; (b634 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b5a6:	6800      	ldr	r0, [r0, #0]
    b5a8:	b138      	cbz	r0, b5ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    b5aa:	2002      	movs	r0, #2
    b5ac:	f000 fb0c 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b5b0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b5b4:	2002      	movs	r0, #2
    b5b6:	f7fe fd17 	bl	9fe8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b5ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b5be:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b5c2:	d00a      	beq.n	b5da <MPSL_IRQ_TIMER0_Handler+0x9a>
    b5c4:	481c      	ldr	r0, [pc, #112]	; (b638 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b5c6:	6800      	ldr	r0, [r0, #0]
    b5c8:	b138      	cbz	r0, b5da <MPSL_IRQ_TIMER0_Handler+0x9a>
    b5ca:	2001      	movs	r0, #1
    b5cc:	f000 fafc 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b5d0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b5d4:	2001      	movs	r0, #1
    b5d6:	f7fe fd07 	bl	9fe8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b5da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b5de:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b5e2:	bf08      	it	eq
    b5e4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5e8:	4814      	ldr	r0, [pc, #80]	; (b63c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b5ea:	6800      	ldr	r0, [r0, #0]
    b5ec:	2800      	cmp	r0, #0
    b5ee:	bf08      	it	eq
    b5f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5f4:	2000      	movs	r0, #0
    b5f6:	f000 fae7 	bl	bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b5fa:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b5fe:	2004      	movs	r0, #4
    b600:	7028      	strb	r0, [r5, #0]
    b602:	f8c5 8004 	str.w	r8, [r5, #4]
    b606:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b60e:	2000      	movs	r0, #0
    b610:	f7fe bcea 	b.w	9fe8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b614:	f240 5169 	movw	r1, #1385	; 0x569
    b618:	206c      	movs	r0, #108	; 0x6c
    b61a:	f000 ffa9 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b61e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b622:	2007      	movs	r0, #7
    b624:	f7fe bce0 	b.w	9fe8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b628:	20000028 	.word	0x20000028
    b62c:	40008000 	.word	0x40008000
    b630:	4000814c 	.word	0x4000814c
    b634:	40008148 	.word	0x40008148
    b638:	40008144 	.word	0x40008144
    b63c:	40008140 	.word	0x40008140
    b640:	2201      	movs	r2, #1
    b642:	0211      	lsls	r1, r2, #8
    b644:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b648:	2000      	movs	r0, #0
    b64a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b64e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b652:	f3bf 8f4f 	dsb	sy
    b656:	f3bf 8f6f 	isb	sy
    b65a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b65e:	490e      	ldr	r1, [pc, #56]	; (b698 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b660:	f841 2f04 	str.w	r2, [r1, #4]!
    b664:	1e43      	subs	r3, r0, #1
    b666:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b66a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b66e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b672:	4b0a      	ldr	r3, [pc, #40]	; (b69c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b674:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b678:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b67c:	1d1b      	adds	r3, r3, #4
    b67e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b682:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b686:	1d1b      	adds	r3, r3, #4
    b688:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b68c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b690:	60ca      	str	r2, [r1, #12]
    b692:	4903      	ldr	r1, [pc, #12]	; (b6a0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b694:	7048      	strb	r0, [r1, #1]
    b696:	4770      	bx	lr
    b698:	40008000 	.word	0x40008000
    b69c:	40008004 	.word	0x40008004
    b6a0:	20000028 	.word	0x20000028

0000b6a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b6a4:	4801      	ldr	r0, [pc, #4]	; (b6ac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b6a6:	6800      	ldr	r0, [r0, #0]
    b6a8:	4770      	bx	lr
    b6aa:	0000      	.short	0x0000
    b6ac:	4000b504 	.word	0x4000b504

0000b6b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b6b0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b6b4:	f8df 8130 	ldr.w	r8, [pc, #304]	; b7e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    b6b8:	4604      	mov	r4, r0
    b6ba:	f1a8 0702 	sub.w	r7, r8, #2
    b6be:	460e      	mov	r6, r1
    b6c0:	f898 c000 	ldrb.w	ip, [r8]
    b6c4:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    b6c8:	f1bc 0f01 	cmp.w	ip, #1
    b6cc:	d106      	bne.n	b6dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    b6ce:	ea81 0204 	eor.w	r2, r1, r4
    b6d2:	4070      	eors	r0, r6
    b6d4:	4310      	orrs	r0, r2
    b6d6:	bf08      	it	eq
    b6d8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b6dc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b6e0:	4a42      	ldr	r2, [pc, #264]	; (b7ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    b6e2:	6010      	str	r0, [r2, #0]
    b6e4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    b6e8:	f1bc 0f00 	cmp.w	ip, #0
    b6ec:	bf07      	ittee	eq
    b6ee:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    b6f2:	2200      	moveq	r2, #0
    b6f4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    b6f8:	2201      	movne	r2, #1
    b6fa:	483d      	ldr	r0, [pc, #244]	; (b7f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b6fc:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    b700:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    b704:	2500      	movs	r5, #0
    b706:	f44f 79a0 	mov.w	r9, #320	; 0x140
    b70a:	2a02      	cmp	r2, #2
    b70c:	d207      	bcs.n	b71e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    b70e:	bf00      	nop
    b710:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    b714:	50c5      	str	r5, [r0, r3]
    b716:	1c52      	adds	r2, r2, #1
    b718:	b2d2      	uxtb	r2, r2
    b71a:	2a02      	cmp	r2, #2
    b71c:	d3f8      	bcc.n	b710 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    b71e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    b722:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    b726:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    b72a:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    b72e:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    b732:	4a30      	ldr	r2, [pc, #192]	; (b7f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b734:	f8d2 9000 	ldr.w	r9, [r2]
    b738:	eba3 0909 	sub.w	r9, r3, r9
    b73c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    b740:	f04f 0901 	mov.w	r9, #1
    b744:	f1ba 0f02 	cmp.w	sl, #2
    b748:	d32e      	bcc.n	b7a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b74a:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    b74e:	d82b      	bhi.n	b7a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b750:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    b754:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    b758:	f1bc 0f00 	cmp.w	ip, #0
    b75c:	d005      	beq.n	b76a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    b75e:	6810      	ldr	r0, [r2, #0]
    b760:	1a08      	subs	r0, r1, r0
    b762:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b766:	2802      	cmp	r0, #2
    b768:	d3f9      	bcc.n	b75e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    b76a:	f8c7 9004 	str.w	r9, [r7, #4]
    b76e:	703d      	strb	r5, [r7, #0]
    b770:	f7ff ff66 	bl	b640 <MPSL_IRQ_TIMER0_Handler+0x100>
    b774:	4820      	ldr	r0, [pc, #128]	; (b7f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b776:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b77a:	f365 0101 	bfi	r1, r5, #0, #2
    b77e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b782:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b786:	2102      	movs	r1, #2
    b788:	f361 0201 	bfi	r2, r1, #0, #2
    b78c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b790:	2110      	movs	r1, #16
    b792:	fa91 f1a1 	rbit	r1, r1
    b796:	fab1 f181 	clz	r1, r1
    b79a:	2909      	cmp	r1, #9
    b79c:	d909      	bls.n	b7b2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    b79e:	f240 3155 	movw	r1, #853	; 0x355
    b7a2:	a016      	add	r0, pc, #88	; (adr r0, b7fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b7a4:	f000 feb8 	bl	c518 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b7a8:	f240 31b2 	movw	r1, #946	; 0x3b2
    b7ac:	206c      	movs	r0, #108	; 0x6c
    b7ae:	f000 fedf 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7b2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b7b6:	f8c0 900c 	str.w	r9, [r0, #12]
    b7ba:	6879      	ldr	r1, [r7, #4]
    b7bc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b7c0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b7c4:	f44f 7180 	mov.w	r1, #256	; 0x100
    b7c8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b7cc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b7d0:	490d      	ldr	r1, [pc, #52]	; (b808 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b7d2:	0480      	lsls	r0, r0, #18
    b7d4:	6008      	str	r0, [r1, #0]
    b7d6:	e9c7 4604 	strd	r4, r6, [r7, #16]
    b7da:	2004      	movs	r0, #4
    b7dc:	f888 0001 	strb.w	r0, [r8, #1]
    b7e0:	f888 9000 	strb.w	r9, [r8]
    b7e4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b7e8:	2000002a 	.word	0x2000002a
    b7ec:	4001f508 	.word	0x4001f508
    b7f0:	4000b000 	.word	0x4000b000
    b7f4:	4000b504 	.word	0x4000b504
    b7f8:	40008000 	.word	0x40008000
    b7fc:	5f66726e 	.word	0x5f66726e
    b800:	656d6974 	.word	0x656d6974
    b804:	00682e72 	.word	0x00682e72
    b808:	4001f504 	.word	0x4001f504

0000b80c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b810:	4c31      	ldr	r4, [pc, #196]	; (b8d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    b812:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b816:	ea82 0c00 	eor.w	ip, r2, r0
    b81a:	404b      	eors	r3, r1
    b81c:	ea5c 0303 	orrs.w	r3, ip, r3
    b820:	bf14      	ite	ne
    b822:	2301      	movne	r3, #1
    b824:	2300      	moveq	r3, #0
    b826:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b8dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    b82a:	f89c 8000 	ldrb.w	r8, [ip]
    b82e:	f1b8 0f02 	cmp.w	r8, #2
    b832:	d002      	beq.n	b83a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    b834:	2b00      	cmp	r3, #0
    b836:	d03f      	beq.n	b8b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    b838:	e003      	b.n	b842 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    b83a:	2b00      	cmp	r3, #0
    b83c:	bf08      	it	eq
    b83e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b842:	7863      	ldrb	r3, [r4, #1]
    b844:	b3bb      	cbz	r3, b8b6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    b846:	4d26      	ldr	r5, [pc, #152]	; (b8e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    b848:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    b84c:	602b      	str	r3, [r5, #0]
    b84e:	4e25      	ldr	r6, [pc, #148]	; (b8e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    b850:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    b854:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b858:	462f      	mov	r7, r5
    b85a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    b85e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    b862:	2500      	movs	r5, #0
    b864:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    b868:	4d1f      	ldr	r5, [pc, #124]	; (b8e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    b86a:	f8d5 9000 	ldr.w	r9, [r5]
    b86e:	eba3 0909 	sub.w	r9, r3, r9
    b872:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    b876:	f1b9 0f02 	cmp.w	r9, #2
    b87a:	d327      	bcc.n	b8cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b87c:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    b880:	d824      	bhi.n	b8cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b882:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    b886:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    b88a:	f1b8 0f00 	cmp.w	r8, #0
    b88e:	d005      	beq.n	b89c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    b890:	682b      	ldr	r3, [r5, #0]
    b892:	1ad3      	subs	r3, r2, r3
    b894:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b898:	2b02      	cmp	r3, #2
    b89a:	d3f9      	bcc.n	b890 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    b89c:	4d13      	ldr	r5, [pc, #76]	; (b8ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    b89e:	2202      	movs	r2, #2
    b8a0:	0753      	lsls	r3, r2, #29
    b8a2:	602b      	str	r3, [r5, #0]
    b8a4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b8a8:	2004      	movs	r0, #4
    b8aa:	f88c 0001 	strb.w	r0, [ip, #1]
    b8ae:	f88c 2000 	strb.w	r2, [ip]
    b8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8b6:	e004      	b.n	b8c2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    b8b8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    b8bc:	206c      	movs	r0, #108	; 0x6c
    b8be:	f000 fe57 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8c2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    b8c6:	206c      	movs	r0, #108	; 0x6c
    b8c8:	f000 fe52 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8cc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b8d0:	206c      	movs	r0, #108	; 0x6c
    b8d2:	f000 fe4d 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8d6:	0000      	.short	0x0000
    b8d8:	20000028 	.word	0x20000028
    b8dc:	2000002a 	.word	0x2000002a
    b8e0:	4001f508 	.word	0x4001f508
    b8e4:	4000b000 	.word	0x4000b000
    b8e8:	4000b504 	.word	0x4000b504
    b8ec:	4001f504 	.word	0x4001f504

0000b8f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b8f0:	4901      	ldr	r1, [pc, #4]	; (b8f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b8f2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    b8f6:	4770      	bx	lr
    b8f8:	20000028 	.word	0x20000028

0000b8fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b900:	f8df c0f4 	ldr.w	ip, [pc, #244]	; b9f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    b904:	f89c 4000 	ldrb.w	r4, [ip]
    b908:	2c00      	cmp	r4, #0
    b90a:	bf07      	ittee	eq
    b90c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    b910:	2100      	moveq	r1, #0
    b912:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    b916:	2101      	movne	r1, #1
    b918:	4838      	ldr	r0, [pc, #224]	; (b9fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    b91a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b91e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b922:	2300      	movs	r3, #0
    b924:	2902      	cmp	r1, #2
    b926:	bf38      	it	cc
    b928:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    b92c:	d207      	bcs.n	b93e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    b92e:	bf00      	nop
    b930:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    b934:	5083      	str	r3, [r0, r2]
    b936:	1c49      	adds	r1, r1, #1
    b938:	b2c9      	uxtb	r1, r1
    b93a:	2902      	cmp	r1, #2
    b93c:	d3f8      	bcc.n	b930 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    b93e:	2c02      	cmp	r4, #2
    b940:	d004      	beq.n	b94c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    b942:	f240 31db 	movw	r1, #987	; 0x3db
    b946:	206c      	movs	r0, #108	; 0x6c
    b948:	f000 fe12 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b94c:	f3ef 8210 	mrs	r2, PRIMASK
    b950:	b672      	cpsid	i
    b952:	4c2b      	ldr	r4, [pc, #172]	; (ba00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    b954:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b958:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    b95c:	b12d      	cbz	r5, b96a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    b95e:	68a1      	ldr	r1, [r4, #8]
    b960:	1c49      	adds	r1, r1, #1
    b962:	60a1      	str	r1, [r4, #8]
    b964:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    b968:	e7f4      	b.n	b954 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    b96a:	68a0      	ldr	r0, [r4, #8]
    b96c:	b902      	cbnz	r2, b970 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    b96e:	b662      	cpsie	i
    b970:	0a02      	lsrs	r2, r0, #8
    b972:	0600      	lsls	r0, r0, #24
    b974:	1840      	adds	r0, r0, r1
    b976:	eb42 0103 	adc.w	r1, r2, r3
    b97a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    b97e:	1cc0      	adds	r0, r0, #3
    b980:	f141 0100 	adc.w	r1, r1, #0
    b984:	4f1f      	ldr	r7, [pc, #124]	; (ba04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    b986:	2601      	movs	r6, #1
    b988:	4d1f      	ldr	r5, [pc, #124]	; (ba08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    b98a:	ea80 0902 	eor.w	r9, r0, r2
    b98e:	ea81 0808 	eor.w	r8, r1, r8
    b992:	ea59 0808 	orrs.w	r8, r9, r8
    b996:	d00e      	beq.n	b9b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b998:	f8d7 8000 	ldr.w	r8, [r7]
    b99c:	eba2 0808 	sub.w	r8, r2, r8
    b9a0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    b9a4:	f1b8 0f04 	cmp.w	r8, #4
    b9a8:	d305      	bcc.n	b9b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b9aa:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    b9ae:	d802      	bhi.n	b9b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b9b0:	f7ff fe7e 	bl	b6b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b9b4:	e01b      	b.n	b9ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b9b6:	6838      	ldr	r0, [r7, #0]
    b9b8:	1a10      	subs	r0, r2, r0
    b9ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b9be:	2802      	cmp	r0, #2
    b9c0:	d313      	bcc.n	b9ea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b9c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b9c6:	d810      	bhi.n	b9ea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b9c8:	4910      	ldr	r1, [pc, #64]	; (ba0c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    b9ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b9ce:	6008      	str	r0, [r1, #0]
    b9d0:	6066      	str	r6, [r4, #4]
    b9d2:	7023      	strb	r3, [r4, #0]
    b9d4:	606e      	str	r6, [r5, #4]
    b9d6:	60ee      	str	r6, [r5, #12]
    b9d8:	0040      	lsls	r0, r0, #1
    b9da:	1f09      	subs	r1, r1, #4
    b9dc:	6008      	str	r0, [r1, #0]
    b9de:	2004      	movs	r0, #4
    b9e0:	f88c 0001 	strb.w	r0, [ip, #1]
    b9e4:	f88c 6000 	strb.w	r6, [ip]
    b9e8:	e001      	b.n	b9ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b9ea:	6066      	str	r6, [r4, #4]
    b9ec:	7023      	strb	r3, [r4, #0]
    b9ee:	6860      	ldr	r0, [r4, #4]
    b9f0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9f8:	2000002a 	.word	0x2000002a
    b9fc:	4000b000 	.word	0x4000b000
    ba00:	20000028 	.word	0x20000028
    ba04:	4000b504 	.word	0x4000b504
    ba08:	40008000 	.word	0x40008000
    ba0c:	4001f508 	.word	0x4001f508

0000ba10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    ba10:	b410      	push	{r4}
    ba12:	f3ef 8410 	mrs	r4, PRIMASK
    ba16:	b672      	cpsid	i
    ba18:	4a0c      	ldr	r2, [pc, #48]	; (ba4c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    ba1a:	490d      	ldr	r1, [pc, #52]	; (ba50 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    ba1c:	f04f 0c00 	mov.w	ip, #0
    ba20:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    ba24:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    ba28:	b12b      	cbz	r3, ba36 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    ba2a:	6888      	ldr	r0, [r1, #8]
    ba2c:	1c40      	adds	r0, r0, #1
    ba2e:	6088      	str	r0, [r1, #8]
    ba30:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    ba34:	e7f4      	b.n	ba20 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    ba36:	6889      	ldr	r1, [r1, #8]
    ba38:	b904      	cbnz	r4, ba3c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    ba3a:	b662      	cpsie	i
    ba3c:	0a0a      	lsrs	r2, r1, #8
    ba3e:	0609      	lsls	r1, r1, #24
    ba40:	1808      	adds	r0, r1, r0
    ba42:	bc10      	pop	{r4}
    ba44:	eb42 010c 	adc.w	r1, r2, ip
    ba48:	4770      	bx	lr
    ba4a:	0000      	.short	0x0000
    ba4c:	4000b000 	.word	0x4000b000
    ba50:	20000028 	.word	0x20000028

0000ba54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    ba54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba58:	4a56      	ldr	r2, [pc, #344]	; (bbb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    ba5a:	2501      	movs	r5, #1
    ba5c:	2400      	movs	r4, #0
    ba5e:	f892 c000 	ldrb.w	ip, [r2]
    ba62:	7852      	ldrb	r2, [r2, #1]
    ba64:	f44f 76a0 	mov.w	r6, #320	; 0x140
    ba68:	2807      	cmp	r0, #7
    ba6a:	d27d      	bcs.n	bb68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    ba6c:	e8df f000 	tbb	[pc, r0]
    ba70:	04040404 	.word	0x04040404
    ba74:	00606060 	.word	0x00606060
    ba78:	4b4f      	ldr	r3, [pc, #316]	; (bbb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    ba7a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    ba7e:	43ff      	mvns	r7, r7
    ba80:	ea77 0708 	orns	r7, r7, r8
    ba84:	bf04      	itt	eq
    ba86:	785b      	ldrbeq	r3, [r3, #1]
    ba88:	2b00      	cmpeq	r3, #0
    ba8a:	d003      	beq.n	ba94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    ba8c:	f1bc 0f02 	cmp.w	ip, #2
    ba90:	d005      	beq.n	ba9e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    ba92:	e026      	b.n	bae2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    ba94:	f44f 6186 	mov.w	r1, #1072	; 0x430
    ba98:	206c      	movs	r0, #108	; 0x6c
    ba9a:	f000 fd69 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba9e:	1f13      	subs	r3, r2, #4
    baa0:	b2db      	uxtb	r3, r3
    baa2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    baa6:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    baaa:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    baae:	2300      	movs	r3, #0
    bab0:	f1bc 0f01 	cmp.w	ip, #1
    bab4:	d003      	beq.n	babe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    bab6:	f1bc 0f02 	cmp.w	ip, #2
    baba:	d008      	beq.n	bace <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    babc:	e00e      	b.n	badc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    babe:	2a04      	cmp	r2, #4
    bac0:	bf24      	itt	cs
    bac2:	6837      	ldrcs	r7, [r6, #0]
    bac4:	2f00      	cmpcs	r7, #0
    bac6:	bf08      	it	eq
    bac8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    bacc:	e006      	b.n	badc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    bace:	2a04      	cmp	r2, #4
    bad0:	bf24      	itt	cs
    bad2:	6837      	ldrcs	r7, [r6, #0]
    bad4:	2f00      	cmpcs	r7, #0
    bad6:	bf08      	it	eq
    bad8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    badc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    bae0:	d1e5      	bne.n	baae <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    bae2:	4b36      	ldr	r3, [pc, #216]	; (bbbc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    bae4:	f100 0210 	add.w	r2, r0, #16
    bae8:	fa05 f202 	lsl.w	r2, r5, r2
    baec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    baf0:	f04f 0c40 	mov.w	ip, #64	; 0x40
    baf4:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    baf8:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    bafc:	449c      	add	ip, r3
    bafe:	f8cc 5000 	str.w	r5, [ip]
    bb02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    bb06:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    bb0a:	eba1 0c0c 	sub.w	ip, r1, ip
    bb0e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    bb12:	f1bc 0f03 	cmp.w	ip, #3
    bb16:	bf3e      	ittt	cc
    bb18:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    bb1c:	2000      	movcc	r0, #0
    bb1e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb22:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bb26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    bb2a:	2001      	movs	r0, #1
    bb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb30:	f1bc 0f00 	cmp.w	ip, #0
    bb34:	d006      	beq.n	bb44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    bb36:	4282      	cmp	r2, r0
    bb38:	d104      	bne.n	bb44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    bb3a:	f44f 618a 	mov.w	r1, #1104	; 0x450
    bb3e:	206c      	movs	r0, #108	; 0x6c
    bb40:	f000 fd16 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb44:	1f00      	subs	r0, r0, #4
    bb46:	b2c2      	uxtb	r2, r0
    bb48:	2a03      	cmp	r2, #3
    bb4a:	d304      	bcc.n	bb56 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    bb4c:	f44f 7127 	mov.w	r1, #668	; 0x29c
    bb50:	206c      	movs	r0, #108	; 0x6c
    bb52:	f000 fd0d 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb56:	4b1a      	ldr	r3, [pc, #104]	; (bbc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    bb58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bb5c:	4090      	lsls	r0, r2
    bb5e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    bb62:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    bb66:	e000      	b.n	bb6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    bb68:	e01f      	b.n	bbaa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    bb6a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    bb6e:	f843 400c 	str.w	r4, [r3, ip]
    bb72:	f8df c050 	ldr.w	ip, [pc, #80]	; bbc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    bb76:	f8dc c000 	ldr.w	ip, [ip]
    bb7a:	eba1 0c0c 	sub.w	ip, r1, ip
    bb7e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    bb82:	f1bc 0f02 	cmp.w	ip, #2
    bb86:	d30d      	bcc.n	bba4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    bb88:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    bb8c:	d80a      	bhi.n	bba4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    bb8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    bb92:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb96:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    bb9a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    bb9e:	4628      	mov	r0, r5
    bba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bba4:	4620      	mov	r0, r4
    bba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbaa:	f240 4154 	movw	r1, #1108	; 0x454
    bbae:	206c      	movs	r0, #108	; 0x6c
    bbb0:	f000 fcde 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bbb4:	2000002a 	.word	0x2000002a
    bbb8:	20000028 	.word	0x20000028
    bbbc:	40008000 	.word	0x40008000
    bbc0:	4000b000 	.word	0x4000b000
    bbc4:	4000b504 	.word	0x4000b504

0000bbc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbca:	2101      	movs	r1, #1
    bbcc:	2600      	movs	r6, #0
    bbce:	f44f 77a0 	mov.w	r7, #320	; 0x140
    bbd2:	2807      	cmp	r0, #7
    bbd4:	d24a      	bcs.n	bc6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    bbd6:	e8df f000 	tbb	[pc, r0]
    bbda:	0404      	.short	0x0404
    bbdc:	18180404 	.word	0x18180404
    bbe0:	0018      	.short	0x0018
    bbe2:	f100 0210 	add.w	r2, r0, #16
    bbe6:	fa01 f202 	lsl.w	r2, r1, r2
    bbea:	4923      	ldr	r1, [pc, #140]	; (bc78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    bbec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bbf0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bbf4:	2200      	movs	r2, #0
    bbf6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bbfa:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    bbfe:	508e      	str	r6, [r1, r2]
    bc00:	491e      	ldr	r1, [pc, #120]	; (bc7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    bc02:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bc06:	9000      	str	r0, [sp, #0]
    bc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc0a:	4d1d      	ldr	r5, [pc, #116]	; (bc80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    bc0c:	1f01      	subs	r1, r0, #4
    bc0e:	b2cc      	uxtb	r4, r1
    bc10:	7829      	ldrb	r1, [r5, #0]
    bc12:	b181      	cbz	r1, bc36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bc14:	786a      	ldrb	r2, [r5, #1]
    bc16:	4282      	cmp	r2, r0
    bc18:	d10d      	bne.n	bc36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bc1a:	4a1a      	ldr	r2, [pc, #104]	; (bc84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    bc1c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bc20:	6010      	str	r0, [r2, #0]
    bc22:	2901      	cmp	r1, #1
    bc24:	bf08      	it	eq
    bc26:	f7ff fd0b 	bleq	b640 <MPSL_IRQ_TIMER0_Handler+0x100>
    bc2a:	702e      	strb	r6, [r5, #0]
    bc2c:	4a16      	ldr	r2, [pc, #88]	; (bc88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bc2e:	f04f 30ff 	mov.w	r0, #4294967295
    bc32:	e9c2 0004 	strd	r0, r0, [r2, #16]
    bc36:	4915      	ldr	r1, [pc, #84]	; (bc8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bc38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bc3c:	40a0      	lsls	r0, r4
    bc3e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bc42:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bc46:	00a0      	lsls	r0, r4, #2
    bc48:	4408      	add	r0, r1
    bc4a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bc4e:	4a10      	ldr	r2, [pc, #64]	; (bc90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bc50:	6812      	ldr	r2, [r2, #0]
    bc52:	1a80      	subs	r0, r0, r2
    bc54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bc58:	2802      	cmp	r0, #2
    bc5a:	bf24      	itt	cs
    bc5c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    bc60:	500e      	strcs	r6, [r1, r0]
    bc62:	480c      	ldr	r0, [pc, #48]	; (bc94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bc64:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bc68:	9000      	str	r0, [sp, #0]
    bc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc6c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bc70:	206c      	movs	r0, #108	; 0x6c
    bc72:	f000 fc7d 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc76:	0000      	.short	0x0000
    bc78:	40008000 	.word	0x40008000
    bc7c:	40008140 	.word	0x40008140
    bc80:	2000002a 	.word	0x2000002a
    bc84:	4001f508 	.word	0x4001f508
    bc88:	20000028 	.word	0x20000028
    bc8c:	4000b000 	.word	0x4000b000
    bc90:	4000b504 	.word	0x4000b504
    bc94:	4000b140 	.word	0x4000b140

0000bc98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bc98:	481a      	ldr	r0, [pc, #104]	; (bd04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    bc9a:	7800      	ldrb	r0, [r0, #0]
    bc9c:	2800      	cmp	r0, #0
    bc9e:	bf07      	ittee	eq
    bca0:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    bca4:	2100      	moveq	r1, #0
    bca6:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    bcaa:	2101      	movne	r1, #1
    bcac:	4a16      	ldr	r2, [pc, #88]	; (bd08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    bcae:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    bcb2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bcb6:	2000      	movs	r0, #0
    bcb8:	2902      	cmp	r1, #2
    bcba:	bf38      	it	cc
    bcbc:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    bcc0:	d207      	bcs.n	bcd2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bcc2:	bf00      	nop
    bcc4:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    bcc8:	50d0      	str	r0, [r2, r3]
    bcca:	1c49      	adds	r1, r1, #1
    bccc:	b2c9      	uxtb	r1, r1
    bcce:	2902      	cmp	r1, #2
    bcd0:	d3f8      	bcc.n	bcc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    bcd2:	490e      	ldr	r1, [pc, #56]	; (bd0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    bcd4:	f04f 32ff 	mov.w	r2, #4294967295
    bcd8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bcdc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bce0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    bce4:	1d0a      	adds	r2, r1, #4
    bce6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bcea:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    bcee:	1d12      	adds	r2, r2, #4
    bcf0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bcf4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    bcf8:	1d12      	adds	r2, r2, #4
    bcfa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bcfe:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    bd02:	4770      	bx	lr
    bd04:	2000002a 	.word	0x2000002a
    bd08:	4000b000 	.word	0x4000b000
    bd0c:	40008000 	.word	0x40008000

0000bd10 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    bd10:	b570      	push	{r4, r5, r6, lr}
    bd12:	f3ef 8110 	mrs	r1, PRIMASK
    bd16:	b672      	cpsid	i
    bd18:	2400      	movs	r4, #0
    bd1a:	4b0d      	ldr	r3, [pc, #52]	; (bd50 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    bd1c:	4a0d      	ldr	r2, [pc, #52]	; (bd54 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    bd1e:	bf00      	nop
    bd20:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    bd24:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    bd28:	f1bc 0f00 	cmp.w	ip, #0
    bd2c:	d005      	beq.n	bd3a <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    bd2e:	6890      	ldr	r0, [r2, #8]
    bd30:	1c40      	adds	r0, r0, #1
    bd32:	6090      	str	r0, [r2, #8]
    bd34:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    bd38:	e7f2      	b.n	bd20 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    bd3a:	6895      	ldr	r5, [r2, #8]
    bd3c:	b901      	cbnz	r1, bd40 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    bd3e:	b662      	cpsie	i
    bd40:	f004 fca0 	bl	10684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    bd44:	4a04      	ldr	r2, [pc, #16]	; (bd58 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    bd46:	4621      	mov	r1, r4
    bd48:	fbe5 0102 	umlal	r0, r1, r5, r2
    bd4c:	bd70      	pop	{r4, r5, r6, pc}
    bd4e:	0000      	.short	0x0000
    bd50:	4000b000 	.word	0x4000b000
    bd54:	20000028 	.word	0x20000028
    bd58:	1e848000 	.word	0x1e848000

0000bd5c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bd5c:	b510      	push	{r4, lr}
    bd5e:	2807      	cmp	r0, #7
    bd60:	d20d      	bcs.n	bd7e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bd62:	e8df f000 	tbb	[pc, r0]
    bd66:	0404      	.short	0x0404
    bd68:	06060404 	.word	0x06060404
    bd6c:	0006      	.short	0x0006
    bd6e:	4906      	ldr	r1, [pc, #24]	; (bd88 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bd70:	e002      	b.n	bd78 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bd72:	1f00      	subs	r0, r0, #4
    bd74:	4905      	ldr	r1, [pc, #20]	; (bd8c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bd76:	b2c0      	uxtb	r0, r0
    bd78:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bd7c:	bd10      	pop	{r4, pc}
    bd7e:	f240 417b 	movw	r1, #1147	; 0x47b
    bd82:	206c      	movs	r0, #108	; 0x6c
    bd84:	f000 fbf4 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd88:	40008140 	.word	0x40008140
    bd8c:	4000b140 	.word	0x4000b140

0000bd90 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    bd90:	b510      	push	{r4, lr}
    bd92:	2807      	cmp	r0, #7
    bd94:	d20d      	bcs.n	bdb2 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    bd96:	e8df f000 	tbb	[pc, r0]
    bd9a:	0404      	.short	0x0404
    bd9c:	06060404 	.word	0x06060404
    bda0:	0006      	.short	0x0006
    bda2:	4906      	ldr	r1, [pc, #24]	; (bdbc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    bda4:	e002      	b.n	bdac <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    bda6:	1f00      	subs	r0, r0, #4
    bda8:	4905      	ldr	r1, [pc, #20]	; (bdc0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    bdaa:	b2c0      	uxtb	r0, r0
    bdac:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bdb0:	bd10      	pop	{r4, pc}
    bdb2:	f240 417b 	movw	r1, #1147	; 0x47b
    bdb6:	206c      	movs	r0, #108	; 0x6c
    bdb8:	f000 fbda 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bdbc:	40008140 	.word	0x40008140
    bdc0:	4000b140 	.word	0x4000b140

0000bdc4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bdc4:	b570      	push	{r4, r5, r6, lr}
    bdc6:	481b      	ldr	r0, [pc, #108]	; (be34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    bdc8:	2400      	movs	r4, #0
    bdca:	2104      	movs	r1, #4
    bdcc:	7004      	strb	r4, [r0, #0]
    bdce:	1e80      	subs	r0, r0, #2
    bdd0:	7001      	strb	r1, [r0, #0]
    bdd2:	1f49      	subs	r1, r1, #5
    bdd4:	e9c0 1104 	strd	r1, r1, [r0, #16]
    bdd8:	6084      	str	r4, [r0, #8]
    bdda:	f7ff fc31 	bl	b640 <MPSL_IRQ_TIMER0_Handler+0x100>
    bdde:	2501      	movs	r5, #1
    bde0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bde4:	02eb      	lsls	r3, r5, #11
    bde6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bdea:	f3bf 8f4f 	dsb	sy
    bdee:	f3bf 8f6f 	isb	sy
    bdf2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bdf6:	4a10      	ldr	r2, [pc, #64]	; (be38 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    bdf8:	6055      	str	r5, [r2, #4]
    bdfa:	6095      	str	r5, [r2, #8]
    bdfc:	480f      	ldr	r0, [pc, #60]	; (be3c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    bdfe:	6801      	ldr	r1, [r0, #0]
    be00:	2900      	cmp	r1, #0
    be02:	d1fc      	bne.n	bdfe <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    be04:	480e      	ldr	r0, [pc, #56]	; (be40 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    be06:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    be0a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    be0e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    be12:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    be16:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    be1a:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    be1e:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    be22:	6015      	str	r5, [r2, #0]
    be24:	f44f 7082 	mov.w	r0, #260	; 0x104
    be28:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    be2c:	2002      	movs	r0, #2
    be2e:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    be32:	bd70      	pop	{r4, r5, r6, pc}
    be34:	2000002a 	.word	0x2000002a
    be38:	4000b000 	.word	0x4000b000
    be3c:	4000b504 	.word	0x4000b504
    be40:	00070002 	.word	0x00070002

0000be44 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    be44:	4808      	ldr	r0, [pc, #32]	; (be68 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    be46:	f990 0000 	ldrsb.w	r0, [r0]
    be4a:	2800      	cmp	r0, #0
    be4c:	bfb8      	it	lt
    be4e:	4770      	bxlt	lr
    be50:	f000 011f 	and.w	r1, r0, #31
    be54:	2201      	movs	r2, #1
    be56:	fa02 f101 	lsl.w	r1, r2, r1
    be5a:	0940      	lsrs	r0, r0, #5
    be5c:	0080      	lsls	r0, r0, #2
    be5e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    be62:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    be66:	4770      	bx	lr
    be68:	2000037a 	.word	0x2000037a

0000be6c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    be6c:	4803      	ldr	r0, [pc, #12]	; (be7c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    be6e:	7800      	ldrb	r0, [r0, #0]
    be70:	2803      	cmp	r0, #3
    be72:	bf0c      	ite	eq
    be74:	2001      	moveq	r0, #1
    be76:	2000      	movne	r0, #0
    be78:	4770      	bx	lr
    be7a:	0000      	.short	0x0000
    be7c:	2000034c 	.word	0x2000034c

0000be80 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    be80:	4801      	ldr	r0, [pc, #4]	; (be88 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    be82:	8840      	ldrh	r0, [r0, #2]
    be84:	4770      	bx	lr
    be86:	0000      	.short	0x0000
    be88:	2000034c 	.word	0x2000034c

0000be8c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    be8c:	4803      	ldr	r0, [pc, #12]	; (be9c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    be8e:	7800      	ldrb	r0, [r0, #0]
    be90:	2802      	cmp	r0, #2
    be92:	bf16      	itet	ne
    be94:	2803      	cmpne	r0, #3
    be96:	2001      	moveq	r0, #1
    be98:	2000      	movne	r0, #0
    be9a:	4770      	bx	lr
    be9c:	2000034c 	.word	0x2000034c

0000bea0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bea0:	4802      	ldr	r0, [pc, #8]	; (beac <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bea2:	2100      	movs	r1, #0
    bea4:	7001      	strb	r1, [r0, #0]
    bea6:	8041      	strh	r1, [r0, #2]
    bea8:	4770      	bx	lr
    beaa:	0000      	.short	0x0000
    beac:	2000034c 	.word	0x2000034c

0000beb0 <MPSL_IRQ_CLOCK_Handler>:
    beb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    beb4:	4c16      	ldr	r4, [pc, #88]	; (bf10 <MPSL_IRQ_CLOCK_Handler+0x60>)
    beb6:	7a60      	ldrb	r0, [r4, #9]
    beb8:	2800      	cmp	r0, #0
    beba:	d027      	beq.n	bf0c <MPSL_IRQ_CLOCK_Handler+0x5c>
    bebc:	f44f 7180 	mov.w	r1, #256	; 0x100
    bec0:	058d      	lsls	r5, r1, #22
    bec2:	4628      	mov	r0, r5
    bec4:	f004 fc09 	bl	106da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bec8:	4680      	mov	r8, r0
    beca:	f44f 7182 	mov.w	r1, #260	; 0x104
    bece:	4628      	mov	r0, r5
    bed0:	f004 fc03 	bl	106da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bed4:	2600      	movs	r6, #0
    bed6:	4607      	mov	r7, r0
    bed8:	f1b8 0f00 	cmp.w	r8, #0
    bedc:	d009      	beq.n	bef2 <MPSL_IRQ_CLOCK_Handler+0x42>
    bede:	2001      	movs	r0, #1
    bee0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bee4:	7920      	ldrb	r0, [r4, #4]
    bee6:	b120      	cbz	r0, bef2 <MPSL_IRQ_CLOCK_Handler+0x42>
    bee8:	7126      	strb	r6, [r4, #4]
    beea:	69e0      	ldr	r0, [r4, #28]
    beec:	b108      	cbz	r0, bef2 <MPSL_IRQ_CLOCK_Handler+0x42>
    beee:	4780      	blx	r0
    bef0:	61e6      	str	r6, [r4, #28]
    bef2:	b137      	cbz	r7, bf02 <MPSL_IRQ_CLOCK_Handler+0x52>
    bef4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bef8:	2002      	movs	r0, #2
    befa:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    befe:	f000 fa57 	bl	c3b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bf02:	4640      	mov	r0, r8
    bf04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf08:	f000 b858 	b.w	bfbc <MPSL_IRQ_CLOCK_Handler+0x10c>
    bf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf10:	20000304 	.word	0x20000304
    bf14:	b510      	push	{r4, lr}
    bf16:	f004 fc8a 	bl	1082e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bf1a:	b930      	cbnz	r0, bf2a <MPSL_IRQ_CLOCK_Handler+0x7a>
    bf1c:	f004 fca8 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf20:	b918      	cbnz	r0, bf2a <MPSL_IRQ_CLOCK_Handler+0x7a>
    bf22:	f004 fcdb 	bl	108dc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bf26:	2800      	cmp	r0, #0
    bf28:	d002      	beq.n	bf30 <MPSL_IRQ_CLOCK_Handler+0x80>
    bf2a:	4902      	ldr	r1, [pc, #8]	; (bf34 <MPSL_IRQ_CLOCK_Handler+0x84>)
    bf2c:	2002      	movs	r0, #2
    bf2e:	6008      	str	r0, [r1, #0]
    bf30:	bd10      	pop	{r4, pc}
    bf32:	0000      	.short	0x0000
    bf34:	40000c34 	.word	0x40000c34
    bf38:	b570      	push	{r4, r5, r6, lr}
    bf3a:	f000 f99b 	bl	c274 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bf3e:	f000 fa9f 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bf42:	4c09      	ldr	r4, [pc, #36]	; (bf68 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bf44:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bf48:	b130      	cbz	r0, bf58 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bf4a:	f7ff ffe3 	bl	bf14 <MPSL_IRQ_CLOCK_Handler+0x64>
    bf4e:	2001      	movs	r0, #1
    bf50:	6128      	str	r0, [r5, #16]
    bf52:	2004      	movs	r0, #4
    bf54:	72a0      	strb	r0, [r4, #10]
    bf56:	e004      	b.n	bf62 <MPSL_IRQ_CLOCK_Handler+0xb2>
    bf58:	2003      	movs	r0, #3
    bf5a:	72a0      	strb	r0, [r4, #10]
    bf5c:	2001      	movs	r0, #1
    bf5e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bf62:	2000      	movs	r0, #0
    bf64:	71e0      	strb	r0, [r4, #7]
    bf66:	bd70      	pop	{r4, r5, r6, pc}
    bf68:	20000304 	.word	0x20000304
    bf6c:	b570      	push	{r4, r5, r6, lr}
    bf6e:	4c12      	ldr	r4, [pc, #72]	; (bfb8 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bf70:	79a0      	ldrb	r0, [r4, #6]
    bf72:	b1e0      	cbz	r0, bfae <MPSL_IRQ_CLOCK_Handler+0xfe>
    bf74:	79e1      	ldrb	r1, [r4, #7]
    bf76:	1e40      	subs	r0, r0, #1
    bf78:	4281      	cmp	r1, r0
    bf7a:	da18      	bge.n	bfae <MPSL_IRQ_CLOCK_Handler+0xfe>
    bf7c:	f000 fa80 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bf80:	4605      	mov	r5, r0
    bf82:	f000 fb69 	bl	c658 <mpsl_temperature_get>
    bf86:	79a1      	ldrb	r1, [r4, #6]
    bf88:	2901      	cmp	r1, #1
    bf8a:	d902      	bls.n	bf92 <MPSL_IRQ_CLOCK_Handler+0xe2>
    bf8c:	79e1      	ldrb	r1, [r4, #7]
    bf8e:	1c49      	adds	r1, r1, #1
    bf90:	71e1      	strb	r1, [r4, #7]
    bf92:	b10d      	cbz	r5, bf98 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bf94:	6961      	ldr	r1, [r4, #20]
    bf96:	e000      	b.n	bf9a <MPSL_IRQ_CLOCK_Handler+0xea>
    bf98:	6921      	ldr	r1, [r4, #16]
    bf9a:	1a41      	subs	r1, r0, r1
    bf9c:	2902      	cmp	r1, #2
    bf9e:	da02      	bge.n	bfa6 <MPSL_IRQ_CLOCK_Handler+0xf6>
    bfa0:	f111 0f02 	cmn.w	r1, #2
    bfa4:	dc07      	bgt.n	bfb6 <MPSL_IRQ_CLOCK_Handler+0x106>
    bfa6:	b10d      	cbz	r5, bfac <MPSL_IRQ_CLOCK_Handler+0xfc>
    bfa8:	6160      	str	r0, [r4, #20]
    bfaa:	e000      	b.n	bfae <MPSL_IRQ_CLOCK_Handler+0xfe>
    bfac:	6120      	str	r0, [r4, #16]
    bfae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bfb2:	f7ff bfc1 	b.w	bf38 <MPSL_IRQ_CLOCK_Handler+0x88>
    bfb6:	bd70      	pop	{r4, r5, r6, pc}
    bfb8:	20000304 	.word	0x20000304
    bfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfc0:	4606      	mov	r6, r0
    bfc2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bfc6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bfca:	4628      	mov	r0, r5
    bfcc:	f004 fb85 	bl	106da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfd0:	4680      	mov	r8, r0
    bfd2:	f44f 7188 	mov.w	r1, #272	; 0x110
    bfd6:	4628      	mov	r0, r5
    bfd8:	f004 fb7f 	bl	106da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfdc:	4c27      	ldr	r4, [pc, #156]	; (c07c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bfde:	4682      	mov	sl, r0
    bfe0:	7827      	ldrb	r7, [r4, #0]
    bfe2:	f104 0008 	add.w	r0, r4, #8
    bfe6:	f004 fbec 	bl	107c2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bfea:	b110      	cbz	r0, bff2 <MPSL_IRQ_CLOCK_Handler+0x142>
    bfec:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bff0:	e016      	b.n	c020 <MPSL_IRQ_CLOCK_Handler+0x170>
    bff2:	f04f 0901 	mov.w	r9, #1
    bff6:	b146      	cbz	r6, c00a <MPSL_IRQ_CLOCK_Handler+0x15a>
    bff8:	7aa0      	ldrb	r0, [r4, #10]
    bffa:	2803      	cmp	r0, #3
    bffc:	d105      	bne.n	c00a <MPSL_IRQ_CLOCK_Handler+0x15a>
    bffe:	2004      	movs	r0, #4
    c000:	72a0      	strb	r0, [r4, #10]
    c002:	f7ff ff87 	bl	bf14 <MPSL_IRQ_CLOCK_Handler+0x64>
    c006:	f8c5 9010 	str.w	r9, [r5, #16]
    c00a:	2600      	movs	r6, #0
    c00c:	f1b8 0f00 	cmp.w	r8, #0
    c010:	d018      	beq.n	c044 <MPSL_IRQ_CLOCK_Handler+0x194>
    c012:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    c016:	7aa0      	ldrb	r0, [r4, #10]
    c018:	2804      	cmp	r0, #4
    c01a:	d004      	beq.n	c026 <MPSL_IRQ_CLOCK_Handler+0x176>
    c01c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    c020:	206d      	movs	r0, #109	; 0x6d
    c022:	f000 faa5 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c026:	f004 fc02 	bl	1082e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c02a:	b928      	cbnz	r0, c038 <MPSL_IRQ_CLOCK_Handler+0x188>
    c02c:	f004 fc20 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c030:	b910      	cbnz	r0, c038 <MPSL_IRQ_CLOCK_Handler+0x188>
    c032:	f004 fc53 	bl	108dc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c036:	b108      	cbz	r0, c03c <MPSL_IRQ_CLOCK_Handler+0x18c>
    c038:	4811      	ldr	r0, [pc, #68]	; (c080 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    c03a:	6006      	str	r6, [r0, #0]
    c03c:	2002      	movs	r0, #2
    c03e:	72a0      	strb	r0, [r4, #10]
    c040:	f000 f8fc 	bl	c23c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c044:	f1ba 0f00 	cmp.w	sl, #0
    c048:	d008      	beq.n	c05c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    c04a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    c04e:	7aa0      	ldrb	r0, [r4, #10]
    c050:	2802      	cmp	r0, #2
    c052:	d101      	bne.n	c058 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    c054:	f7ff ff8a 	bl	bf6c <MPSL_IRQ_CLOCK_Handler+0xbc>
    c058:	f8c5 9014 	str.w	r9, [r5, #20]
    c05c:	b13f      	cbz	r7, c06e <MPSL_IRQ_CLOCK_Handler+0x1be>
    c05e:	7026      	strb	r6, [r4, #0]
    c060:	7aa0      	ldrb	r0, [r4, #10]
    c062:	2802      	cmp	r0, #2
    c064:	d101      	bne.n	c06a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    c066:	f7ff ff67 	bl	bf38 <MPSL_IRQ_CLOCK_Handler+0x88>
    c06a:	f000 f8e7 	bl	c23c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c06e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c072:	4802      	ldr	r0, [pc, #8]	; (c07c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c074:	3008      	adds	r0, #8
    c076:	f004 bbbb 	b.w	107f0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c07a:	0000      	.short	0x0000
    c07c:	20000304 	.word	0x20000304
    c080:	40000c34 	.word	0x40000c34
    c084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c088:	4c49      	ldr	r4, [pc, #292]	; (c1b0 <MPSL_IRQ_CLOCK_Handler+0x300>)
    c08a:	2700      	movs	r7, #0
    c08c:	4606      	mov	r6, r0
    c08e:	61a7      	str	r7, [r4, #24]
    c090:	7842      	ldrb	r2, [r0, #1]
    c092:	7881      	ldrb	r1, [r0, #2]
    c094:	7800      	ldrb	r0, [r0, #0]
    c096:	72e0      	strb	r0, [r4, #11]
    c098:	7162      	strb	r2, [r4, #5]
    c09a:	71a1      	strb	r1, [r4, #6]
    c09c:	71e7      	strb	r7, [r4, #7]
    c09e:	f04f 0801 	mov.w	r8, #1
    c0a2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c0a6:	2805      	cmp	r0, #5
    c0a8:	d225      	bcs.n	c0f6 <MPSL_IRQ_CLOCK_Handler+0x246>
    c0aa:	e8df f000 	tbb	[pc, r0]
    c0ae:	0310      	.short	0x0310
    c0b0:	00222006 	.word	0x00222006
    c0b4:	f8c4 8018 	str.w	r8, [r4, #24]
    c0b8:	e009      	b.n	c0ce <MPSL_IRQ_CLOCK_Handler+0x21e>
    c0ba:	f000 f8db 	bl	c274 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c0be:	2101      	movs	r1, #1
    c0c0:	4628      	mov	r0, r5
    c0c2:	f004 fb0f 	bl	106e4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c0c6:	2800      	cmp	r0, #0
    c0c8:	d0f9      	beq.n	c0be <MPSL_IRQ_CLOCK_Handler+0x20e>
    c0ca:	2002      	movs	r0, #2
    c0cc:	61a0      	str	r0, [r4, #24]
    c0ce:	f004 fb35 	bl	1073c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    c0d2:	b1c0      	cbz	r0, c106 <MPSL_IRQ_CLOCK_Handler+0x256>
    c0d4:	f000 f9ee 	bl	c4b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    c0d8:	7e21      	ldrb	r1, [r4, #24]
    c0da:	f001 0103 	and.w	r1, r1, #3
    c0de:	4288      	cmp	r0, r1
    c0e0:	d111      	bne.n	c106 <MPSL_IRQ_CLOCK_Handler+0x256>
    c0e2:	79b0      	ldrb	r0, [r6, #6]
    c0e4:	b160      	cbz	r0, c100 <MPSL_IRQ_CLOCK_Handler+0x250>
    c0e6:	2002      	movs	r0, #2
    c0e8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c0ec:	e044      	b.n	c178 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c0ee:	4831      	ldr	r0, [pc, #196]	; (c1b4 <MPSL_IRQ_CLOCK_Handler+0x304>)
    c0f0:	e7ec      	b.n	c0cc <MPSL_IRQ_CLOCK_Handler+0x21c>
    c0f2:	4831      	ldr	r0, [pc, #196]	; (c1b8 <MPSL_IRQ_CLOCK_Handler+0x308>)
    c0f4:	e7ea      	b.n	c0cc <MPSL_IRQ_CLOCK_Handler+0x21c>
    c0f6:	f240 313d 	movw	r1, #829	; 0x33d
    c0fa:	206d      	movs	r0, #109	; 0x6d
    c0fc:	f000 fa38 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c100:	f000 f9ac 	bl	c45c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c104:	e038      	b.n	c178 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c106:	f8c5 800c 	str.w	r8, [r5, #12]
    c10a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c10e:	69a0      	ldr	r0, [r4, #24]
    c110:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c114:	f004 fb77 	bl	10806 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c118:	b940      	cbnz	r0, c12c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c11a:	f004 fb7e 	bl	1081a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c11e:	b928      	cbnz	r0, c12c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c120:	f004 fb92 	bl	10848 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c124:	b910      	cbnz	r0, c12c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c126:	f004 fba3 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c12a:	b138      	cbz	r0, c13c <MPSL_IRQ_CLOCK_Handler+0x28c>
    c12c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c130:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c134:	4921      	ldr	r1, [pc, #132]	; (c1bc <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c136:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c13a:	6008      	str	r0, [r1, #0]
    c13c:	f004 fb63 	bl	10806 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c140:	b940      	cbnz	r0, c154 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c142:	f004 fb6a 	bl	1081a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c146:	b928      	cbnz	r0, c154 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c148:	f004 fb7e 	bl	10848 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c14c:	b910      	cbnz	r0, c154 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c14e:	f004 fb8f 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c152:	b118      	cbz	r0, c15c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c154:	4919      	ldr	r1, [pc, #100]	; (c1bc <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c156:	3110      	adds	r1, #16
    c158:	f8c1 8000 	str.w	r8, [r1]
    c15c:	f8c5 8008 	str.w	r8, [r5, #8]
    c160:	2002      	movs	r0, #2
    c162:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c166:	79b0      	ldrb	r0, [r6, #6]
    c168:	b930      	cbnz	r0, c178 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c16a:	f000 f829 	bl	c1c0 <MPSL_IRQ_CLOCK_Handler+0x310>
    c16e:	2002      	movs	r0, #2
    c170:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c174:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c178:	79a0      	ldrb	r0, [r4, #6]
    c17a:	b170      	cbz	r0, c19a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c17c:	7830      	ldrb	r0, [r6, #0]
    c17e:	b960      	cbnz	r0, c19a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c180:	f000 f97e 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c184:	4606      	mov	r6, r0
    c186:	f000 fa67 	bl	c658 <mpsl_temperature_get>
    c18a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c18e:	b116      	cbz	r6, c196 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c190:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c194:	e001      	b.n	c19a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c196:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c19a:	2101      	movs	r1, #1
    c19c:	4628      	mov	r0, r5
    c19e:	f004 faa1 	bl	106e4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c1a2:	b108      	cbz	r0, c1a8 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c1a4:	f000 f966 	bl	c474 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c1a8:	72a7      	strb	r7, [r4, #10]
    c1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1ae:	0000      	.short	0x0000
    c1b0:	20000304 	.word	0x20000304
    c1b4:	00020001 	.word	0x00020001
    c1b8:	00030001 	.word	0x00030001
    c1bc:	4000053c 	.word	0x4000053c
    c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1c4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c1c8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c1cc:	f010 0f02 	tst.w	r0, #2
    c1d0:	d011      	beq.n	c1f6 <MPSL_IRQ_CLOCK_Handler+0x346>
    c1d2:	4c16      	ldr	r4, [pc, #88]	; (c22c <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c1d4:	6820      	ldr	r0, [r4, #0]
    c1d6:	43c0      	mvns	r0, r0
    c1d8:	f340 1600 	sbfx	r6, r0, #4, #1
    c1dc:	6820      	ldr	r0, [r4, #0]
    c1de:	f040 0010 	orr.w	r0, r0, #16
    c1e2:	6020      	str	r0, [r4, #0]
    c1e4:	f44f 7782 	mov.w	r7, #260	; 0x104
    c1e8:	4639      	mov	r1, r7
    c1ea:	4628      	mov	r0, r5
    c1ec:	1c76      	adds	r6, r6, #1
    c1ee:	f004 fa74 	bl	106da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c1f2:	b128      	cbz	r0, c200 <MPSL_IRQ_CLOCK_Handler+0x350>
    c1f4:	e00a      	b.n	c20c <MPSL_IRQ_CLOCK_Handler+0x35c>
    c1f6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c1fa:	206d      	movs	r0, #109	; 0x6d
    c1fc:	f000 f9b8 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c200:	f004 fb78 	bl	108f4 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c204:	e002      	b.n	c20c <MPSL_IRQ_CLOCK_Handler+0x35c>
    c206:	bf00      	nop
    c208:	f004 fb72 	bl	108f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c20c:	4639      	mov	r1, r7
    c20e:	4628      	mov	r0, r5
    c210:	f004 fa63 	bl	106da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c214:	2800      	cmp	r0, #0
    c216:	d0f7      	beq.n	c208 <MPSL_IRQ_CLOCK_Handler+0x358>
    c218:	f000 f920 	bl	c45c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c21c:	2e00      	cmp	r6, #0
    c21e:	d103      	bne.n	c228 <MPSL_IRQ_CLOCK_Handler+0x378>
    c220:	6820      	ldr	r0, [r4, #0]
    c222:	f020 0010 	bic.w	r0, r0, #16
    c226:	6020      	str	r0, [r4, #0]
    c228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c22c:	e000ed10 	.word	0xe000ed10

0000c230 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c230:	4801      	ldr	r0, [pc, #4]	; (c238 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c232:	89c0      	ldrh	r0, [r0, #14]
    c234:	4770      	bx	lr
    c236:	0000      	.short	0x0000
    c238:	20000304 	.word	0x20000304

0000c23c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c23c:	b510      	push	{r4, lr}
    c23e:	f3ef 8410 	mrs	r4, PRIMASK
    c242:	b672      	cpsid	i
    c244:	480a      	ldr	r0, [pc, #40]	; (c270 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c246:	7841      	ldrb	r1, [r0, #1]
    c248:	b129      	cbz	r1, c256 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c24a:	7841      	ldrb	r1, [r0, #1]
    c24c:	1e49      	subs	r1, r1, #1
    c24e:	7041      	strb	r1, [r0, #1]
    c250:	7841      	ldrb	r1, [r0, #1]
    c252:	b129      	cbz	r1, c260 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c254:	e008      	b.n	c268 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c256:	f240 1119 	movw	r1, #281	; 0x119
    c25a:	206d      	movs	r0, #109	; 0x6d
    c25c:	f000 f988 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c260:	7880      	ldrb	r0, [r0, #2]
    c262:	b908      	cbnz	r0, c268 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c264:	f000 f91a 	bl	c49c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c268:	2c00      	cmp	r4, #0
    c26a:	d100      	bne.n	c26e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c26c:	b662      	cpsie	i
    c26e:	bd10      	pop	{r4, pc}
    c270:	20000304 	.word	0x20000304

0000c274 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c274:	b510      	push	{r4, lr}
    c276:	f3ef 8410 	mrs	r4, PRIMASK
    c27a:	b672      	cpsid	i
    c27c:	4806      	ldr	r0, [pc, #24]	; (c298 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c27e:	7841      	ldrb	r1, [r0, #1]
    c280:	1c49      	adds	r1, r1, #1
    c282:	7041      	strb	r1, [r0, #1]
    c284:	7840      	ldrb	r0, [r0, #1]
    c286:	2801      	cmp	r0, #1
    c288:	d101      	bne.n	c28e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c28a:	f004 fa42 	bl	10712 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c28e:	2c00      	cmp	r4, #0
    c290:	d100      	bne.n	c294 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c292:	b662      	cpsie	i
    c294:	bd10      	pop	{r4, pc}
    c296:	0000      	.short	0x0000
    c298:	20000304 	.word	0x20000304

0000c29c <mpsl_clock_hfclk_release>:
    c29c:	4805      	ldr	r0, [pc, #20]	; (c2b4 <mpsl_clock_hfclk_release+0x18>)
    c29e:	b510      	push	{r4, lr}
    c2a0:	78c1      	ldrb	r1, [r0, #3]
    c2a2:	b121      	cbz	r1, c2ae <mpsl_clock_hfclk_release+0x12>
    c2a4:	2100      	movs	r1, #0
    c2a6:	7101      	strb	r1, [r0, #4]
    c2a8:	70c1      	strb	r1, [r0, #3]
    c2aa:	f7ff ffc7 	bl	c23c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c2ae:	2000      	movs	r0, #0
    c2b0:	bd10      	pop	{r4, pc}
    c2b2:	0000      	.short	0x0000
    c2b4:	20000304 	.word	0x20000304

0000c2b8 <mpsl_clock_hfclk_request>:
    c2b8:	b570      	push	{r4, r5, r6, lr}
    c2ba:	4c0c      	ldr	r4, [pc, #48]	; (c2ec <mpsl_clock_hfclk_request+0x34>)
    c2bc:	78e1      	ldrb	r1, [r4, #3]
    c2be:	b961      	cbnz	r1, c2da <mpsl_clock_hfclk_request+0x22>
    c2c0:	2501      	movs	r5, #1
    c2c2:	70e5      	strb	r5, [r4, #3]
    c2c4:	61e0      	str	r0, [r4, #28]
    c2c6:	f7ff ffd5 	bl	c274 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c2ca:	f000 f8d9 	bl	c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c2ce:	b130      	cbz	r0, c2de <mpsl_clock_hfclk_request+0x26>
    c2d0:	69e0      	ldr	r0, [r4, #28]
    c2d2:	b110      	cbz	r0, c2da <mpsl_clock_hfclk_request+0x22>
    c2d4:	4780      	blx	r0
    c2d6:	2000      	movs	r0, #0
    c2d8:	61e0      	str	r0, [r4, #28]
    c2da:	2000      	movs	r0, #0
    c2dc:	bd70      	pop	{r4, r5, r6, pc}
    c2de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2e2:	7125      	strb	r5, [r4, #4]
    c2e4:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c2e8:	e7f7      	b.n	c2da <mpsl_clock_hfclk_request+0x22>
    c2ea:	0000      	.short	0x0000
    c2ec:	20000304 	.word	0x20000304

0000c2f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2f4:	0005      	movs	r5, r0
    c2f6:	f06f 0015 	mvn.w	r0, #21
    c2fa:	d03f      	beq.n	c37c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c2fc:	7829      	ldrb	r1, [r5, #0]
    c2fe:	2904      	cmp	r1, #4
    c300:	d83c      	bhi.n	c37c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c302:	2900      	cmp	r1, #0
    c304:	7869      	ldrb	r1, [r5, #1]
    c306:	d03b      	beq.n	c380 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c308:	2900      	cmp	r1, #0
    c30a:	d137      	bne.n	c37c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c30c:	78a9      	ldrb	r1, [r5, #2]
    c30e:	2900      	cmp	r1, #0
    c310:	d134      	bne.n	c37c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c312:	2000      	movs	r0, #0
    c314:	f004 f9d0 	bl	106b8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c318:	2000      	movs	r0, #0
    c31a:	f004 f9c0 	bl	1069e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c31e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c322:	f04f 31ff 	mov.w	r1, #4294967295
    c326:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c32a:	2600      	movs	r6, #0
    c32c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c330:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c334:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c338:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c33c:	4c14      	ldr	r4, [pc, #80]	; (c390 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c33e:	7066      	strb	r6, [r4, #1]
    c340:	88a8      	ldrh	r0, [r5, #4]
    c342:	81a0      	strh	r0, [r4, #12]
    c344:	f004 f9dc 	bl	10700 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c348:	2701      	movs	r7, #1
    c34a:	b108      	cbz	r0, c350 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c34c:	70e7      	strb	r7, [r4, #3]
    c34e:	7067      	strb	r7, [r4, #1]
    c350:	2101      	movs	r1, #1
    c352:	4640      	mov	r0, r8
    c354:	f004 f9c6 	bl	106e4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c358:	b108      	cbz	r0, c35e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c35a:	f000 f88b 	bl	c474 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c35e:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c362:	81e0      	strh	r0, [r4, #14]
    c364:	4628      	mov	r0, r5
    c366:	f7ff fe8d 	bl	c084 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c36a:	7267      	strb	r7, [r4, #9]
    c36c:	2000      	movs	r0, #0
    c36e:	f004 f996 	bl	1069e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c372:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c376:	4630      	mov	r0, r6
    c378:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c380:	2900      	cmp	r1, #0
    c382:	d0fb      	beq.n	c37c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c384:	2920      	cmp	r1, #32
    c386:	d8f9      	bhi.n	c37c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c388:	78a9      	ldrb	r1, [r5, #2]
    c38a:	2921      	cmp	r1, #33	; 0x21
    c38c:	d9c1      	bls.n	c312 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c38e:	e7f5      	b.n	c37c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c390:	20000304 	.word	0x20000304

0000c394 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c394:	4801      	ldr	r0, [pc, #4]	; (c39c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c396:	8980      	ldrh	r0, [r0, #12]
    c398:	4770      	bx	lr
    c39a:	0000      	.short	0x0000
    c39c:	20000304 	.word	0x20000304

0000c3a0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c3a0:	4802      	ldr	r0, [pc, #8]	; (c3ac <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c3a2:	7a80      	ldrb	r0, [r0, #10]
    c3a4:	2800      	cmp	r0, #0
    c3a6:	d000      	beq.n	c3aa <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c3a8:	2001      	movs	r0, #1
    c3aa:	4770      	bx	lr
    c3ac:	20000304 	.word	0x20000304

0000c3b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3b2:	4d1f      	ldr	r5, [pc, #124]	; (c430 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c3b4:	7ae8      	ldrb	r0, [r5, #11]
    c3b6:	2800      	cmp	r0, #0
    c3b8:	d10f      	bne.n	c3da <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c3ba:	7e28      	ldrb	r0, [r5, #24]
    c3bc:	f000 0003 	and.w	r0, r0, #3
    c3c0:	f004 f9ac 	bl	1071c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c3c4:	2800      	cmp	r0, #0
    c3c6:	d008      	beq.n	c3da <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c3c8:	f3ef 8110 	mrs	r1, PRIMASK
    c3cc:	b672      	cpsid	i
    c3ce:	f7ff ffe7 	bl	c3a0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c3d2:	b118      	cbz	r0, c3dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c3d4:	2900      	cmp	r1, #0
    c3d6:	d100      	bne.n	c3da <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c3d8:	b662      	cpsie	i
    c3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3dc:	2601      	movs	r6, #1
    c3de:	72ae      	strb	r6, [r5, #10]
    c3e0:	b901      	cbnz	r1, c3e4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c3e2:	b662      	cpsie	i
    c3e4:	2018      	movs	r0, #24
    c3e6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c3ea:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c3ee:	61a6      	str	r6, [r4, #24]
    c3f0:	f44f 7020 	mov.w	r0, #640	; 0x280
    c3f4:	f8ad 0000 	strh.w	r0, [sp]
    c3f8:	f8bd 0000 	ldrh.w	r0, [sp]
    c3fc:	1e41      	subs	r1, r0, #1
    c3fe:	f8ad 1000 	strh.w	r1, [sp]
    c402:	d2f9      	bcs.n	c3f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c404:	2700      	movs	r7, #0
    c406:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c40a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c40e:	4808      	ldr	r0, [pc, #32]	; (c430 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c410:	3008      	adds	r0, #8
    c412:	f004 f9e9 	bl	107e8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c416:	702f      	strb	r7, [r5, #0]
    c418:	f7ff fd8e 	bl	bf38 <MPSL_IRQ_CLOCK_Handler+0x88>
    c41c:	6166      	str	r6, [r4, #20]
    c41e:	7968      	ldrb	r0, [r5, #5]
    c420:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c424:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c428:	2018      	movs	r0, #24
    c42a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c430:	20000304 	.word	0x20000304

0000c434 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c434:	4602      	mov	r2, r0
    c436:	b510      	push	{r4, lr}
    c438:	2000      	movs	r0, #0
    c43a:	2900      	cmp	r1, #0
    c43c:	d00a      	beq.n	c454 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c43e:	2a00      	cmp	r2, #0
    c440:	d008      	beq.n	c454 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c442:	fba2 0101 	umull	r0, r1, r2, r1
    c446:	1e40      	subs	r0, r0, #1
    c448:	4a03      	ldr	r2, [pc, #12]	; (c458 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c44a:	f141 31ff 	adc.w	r1, r1, #4294967295
    c44e:	f004 fa53 	bl	108f8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c452:	1c40      	adds	r0, r0, #1
    c454:	bd10      	pop	{r4, pc}
    c456:	0000      	.short	0x0000
    c458:	000f4240 	.word	0x000f4240

0000c45c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c45c:	b510      	push	{r4, lr}
    c45e:	4c04      	ldr	r4, [pc, #16]	; (c470 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c460:	7e20      	ldrb	r0, [r4, #24]
    c462:	f000 0003 	and.w	r0, r0, #3
    c466:	f004 f959 	bl	1071c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c46a:	2800      	cmp	r0, #0
    c46c:	d0f8      	beq.n	c460 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c46e:	bd10      	pop	{r4, pc}
    c470:	20000304 	.word	0x20000304

0000c474 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c474:	4901      	ldr	r1, [pc, #4]	; (c47c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c476:	2001      	movs	r0, #1
    c478:	7008      	strb	r0, [r1, #0]
    c47a:	4770      	bx	lr
    c47c:	2000037b 	.word	0x2000037b

0000c480 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c480:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c484:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c488:	b918      	cbnz	r0, c492 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c48a:	4803      	ldr	r0, [pc, #12]	; (c498 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c48c:	7800      	ldrb	r0, [r0, #0]
    c48e:	2800      	cmp	r0, #0
    c490:	d000      	beq.n	c494 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c492:	2001      	movs	r0, #1
    c494:	4770      	bx	lr
    c496:	0000      	.short	0x0000
    c498:	2000037b 	.word	0x2000037b

0000c49c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c49c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c4a0:	2101      	movs	r1, #1
    c4a2:	6041      	str	r1, [r0, #4]
    c4a4:	2100      	movs	r1, #0
    c4a6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c4aa:	4801      	ldr	r0, [pc, #4]	; (c4b0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c4ac:	7001      	strb	r1, [r0, #0]
    c4ae:	4770      	bx	lr
    c4b0:	2000037b 	.word	0x2000037b

0000c4b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c4b4:	4802      	ldr	r0, [pc, #8]	; (c4c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c4b6:	6800      	ldr	r0, [r0, #0]
    c4b8:	f000 0003 	and.w	r0, r0, #3
    c4bc:	4770      	bx	lr
    c4be:	0000      	.short	0x0000
    c4c0:	4000041c 	.word	0x4000041c
    c4c4:	b510      	push	{r4, lr}
    c4c6:	b131      	cbz	r1, c4d6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c4c8:	2901      	cmp	r1, #1
    c4ca:	d007      	beq.n	c4dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c4cc:	f240 3102 	movw	r1, #770	; 0x302
    c4d0:	a005      	add	r0, pc, #20	; (adr r0, c4e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c4d2:	f000 f821 	bl	c518 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c4d6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c4da:	e001      	b.n	c4e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c4dc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c4e0:	f000 0001 	and.w	r0, r0, #1
    c4e4:	bd10      	pop	{r4, pc}
    c4e6:	0000      	.short	0x0000
    c4e8:	5f66726e 	.word	0x5f66726e
    c4ec:	636f6c63 	.word	0x636f6c63
    c4f0:	00682e6b 	.word	0x00682e6b
    c4f4:	f3bf 8f4f 	dsb	sy
    c4f8:	4805      	ldr	r0, [pc, #20]	; (c510 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c4fa:	6801      	ldr	r1, [r0, #0]
    c4fc:	4a05      	ldr	r2, [pc, #20]	; (c514 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c4fe:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c502:	4311      	orrs	r1, r2
    c504:	6001      	str	r1, [r0, #0]
    c506:	f3bf 8f4f 	dsb	sy
    c50a:	bf00      	nop
    c50c:	e7fd      	b.n	c50a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c50e:	0000      	.short	0x0000
    c510:	e000ed0c 	.word	0xe000ed0c
    c514:	05fa0004 	.word	0x05fa0004

0000c518 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c518:	b672      	cpsid	i
    c51a:	4a03      	ldr	r2, [pc, #12]	; (c528 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c51c:	6852      	ldr	r2, [r2, #4]
    c51e:	b102      	cbz	r2, c522 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c520:	4790      	blx	r2
    c522:	f7ff ffe7 	bl	c4f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c526:	0000      	.short	0x0000
    c528:	20000324 	.word	0x20000324
    c52c:	4806      	ldr	r0, [pc, #24]	; (c548 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c52e:	b510      	push	{r4, lr}
    c530:	2100      	movs	r1, #0
    c532:	6001      	str	r1, [r0, #0]
    c534:	2101      	movs	r1, #1
    c536:	6001      	str	r1, [r0, #0]
    c538:	4608      	mov	r0, r1
    c53a:	f004 f916 	bl	1076a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c542:	2001      	movs	r0, #1
    c544:	f004 b904 	b.w	10750 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c548:	40001ffc 	.word	0x40001ffc
    c54c:	4807      	ldr	r0, [pc, #28]	; (c56c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c54e:	b510      	push	{r4, lr}
    c550:	2101      	movs	r1, #1
    c552:	6041      	str	r1, [r0, #4]
    c554:	1e89      	subs	r1, r1, #2
    c556:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c55a:	200c      	movs	r0, #12
    c55c:	f004 f905 	bl	1076a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c564:	200c      	movs	r0, #12
    c566:	f004 b8f3 	b.w	10750 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c56a:	0000      	.short	0x0000
    c56c:	4000c000 	.word	0x4000c000

0000c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c570:	b50e      	push	{r1, r2, r3, lr}
    c572:	b672      	cpsid	i
    c574:	4a0f      	ldr	r2, [pc, #60]	; (c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c576:	6855      	ldr	r5, [r2, #4]
    c578:	b1d5      	cbz	r5, c5b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c57a:	2200      	movs	r2, #0
    c57c:	4603      	mov	r3, r0
    c57e:	466e      	mov	r6, sp
    c580:	240a      	movs	r4, #10
    c582:	e003      	b.n	c58c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c584:	fbb0 f0f4 	udiv	r0, r0, r4
    c588:	1c52      	adds	r2, r2, #1
    c58a:	b2d2      	uxtb	r2, r2
    c58c:	2800      	cmp	r0, #0
    c58e:	d1f9      	bne.n	c584 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c590:	54b0      	strb	r0, [r6, r2]
    c592:	e009      	b.n	c5a8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c594:	fbb3 f0f4 	udiv	r0, r3, r4
    c598:	fb04 3010 	mls	r0, r4, r0, r3
    c59c:	fbb3 f3f4 	udiv	r3, r3, r4
    c5a0:	1e52      	subs	r2, r2, #1
    c5a2:	b2d2      	uxtb	r2, r2
    c5a4:	3030      	adds	r0, #48	; 0x30
    c5a6:	54b0      	strb	r0, [r6, r2]
    c5a8:	2a00      	cmp	r2, #0
    c5aa:	d1f3      	bne.n	c594 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c5ac:	4630      	mov	r0, r6
    c5ae:	47a8      	blx	r5
    c5b0:	f7ff ffa0 	bl	c4f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c5b4:	20000324 	.word	0x20000324

0000c5b8 <mpsl_init>:
    c5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5bc:	4c18      	ldr	r4, [pc, #96]	; (c620 <mpsl_init+0x68>)
    c5be:	4606      	mov	r6, r0
    c5c0:	4617      	mov	r7, r2
    c5c2:	7860      	ldrb	r0, [r4, #1]
    c5c4:	460d      	mov	r5, r1
    c5c6:	b118      	cbz	r0, c5d0 <mpsl_init+0x18>
    c5c8:	f04f 30ff 	mov.w	r0, #4294967295
    c5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5d0:	f7fc fb7e 	bl	8cd0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c5d4:	b906      	cbnz	r6, c5d8 <mpsl_init+0x20>
    c5d6:	4e13      	ldr	r6, [pc, #76]	; (c624 <mpsl_init+0x6c>)
    c5d8:	6067      	str	r7, [r4, #4]
    c5da:	7025      	strb	r5, [r4, #0]
    c5dc:	f7ff ffa6 	bl	c52c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c5e0:	f7ff ffb4 	bl	c54c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c5e4:	4630      	mov	r0, r6
    c5e6:	f7ff fe83 	bl	c2f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c5ea:	0006      	movs	r6, r0
    c5ec:	d1ee      	bne.n	c5cc <mpsl_init+0x14>
    c5ee:	f7fe fe4f 	bl	b290 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c5f2:	f7ff fedd 	bl	c3b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c5f6:	f004 f828 	bl	1064a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c5fa:	4628      	mov	r0, r5
    c5fc:	f004 f8a8 	bl	10750 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c600:	2001      	movs	r0, #1
    c602:	2d00      	cmp	r5, #0
    c604:	db09      	blt.n	c61a <mpsl_init+0x62>
    c606:	f005 011f 	and.w	r1, r5, #31
    c60a:	fa00 f101 	lsl.w	r1, r0, r1
    c60e:	096a      	lsrs	r2, r5, #5
    c610:	0092      	lsls	r2, r2, #2
    c612:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c616:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c61a:	7060      	strb	r0, [r4, #1]
    c61c:	4630      	mov	r0, r6
    c61e:	e7d5      	b.n	c5cc <mpsl_init+0x14>
    c620:	20000324 	.word	0x20000324
    c624:	0001078c 	.word	0x0001078c

0000c628 <mpsl_is_initialized>:
    c628:	4801      	ldr	r0, [pc, #4]	; (c630 <mpsl_is_initialized+0x8>)
    c62a:	7840      	ldrb	r0, [r0, #1]
    c62c:	4770      	bx	lr
    c62e:	0000      	.short	0x0000
    c630:	20000324 	.word	0x20000324

0000c634 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c634:	4807      	ldr	r0, [pc, #28]	; (c654 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c636:	f990 0000 	ldrsb.w	r0, [r0]
    c63a:	2800      	cmp	r0, #0
    c63c:	db09      	blt.n	c652 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c63e:	f000 021f 	and.w	r2, r0, #31
    c642:	2101      	movs	r1, #1
    c644:	4091      	lsls	r1, r2
    c646:	0940      	lsrs	r0, r0, #5
    c648:	0080      	lsls	r0, r0, #2
    c64a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c64e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c652:	4770      	bx	lr
    c654:	20000324 	.word	0x20000324

0000c658 <mpsl_temperature_get>:
    c658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c65c:	2501      	movs	r5, #1
    c65e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c662:	0329      	lsls	r1, r5, #12
    c664:	f04f 0800 	mov.w	r8, #0
    c668:	4640      	mov	r0, r8
    c66a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c66e:	f3bf 8f4f 	dsb	sy
    c672:	f3bf 8f6f 	isb	sy
    c676:	4c16      	ldr	r4, [pc, #88]	; (c6d0 <mpsl_temperature_get+0x78>)
    c678:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c67c:	200c      	movs	r0, #12
    c67e:	f004 f893 	bl	107a8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c682:	4e14      	ldr	r6, [pc, #80]	; (c6d4 <mpsl_temperature_get+0x7c>)
    c684:	6830      	ldr	r0, [r6, #0]
    c686:	43c0      	mvns	r0, r0
    c688:	f340 1700 	sbfx	r7, r0, #4, #1
    c68c:	6830      	ldr	r0, [r6, #0]
    c68e:	f040 0010 	orr.w	r0, r0, #16
    c692:	6030      	str	r0, [r6, #0]
    c694:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    c698:	6025      	str	r5, [r4, #0]
    c69a:	1c7f      	adds	r7, r7, #1
    c69c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c6a0:	b108      	cbz	r0, c6a6 <mpsl_temperature_get+0x4e>
    c6a2:	b11f      	cbz	r7, c6ac <mpsl_temperature_get+0x54>
    c6a4:	e006      	b.n	c6b4 <mpsl_temperature_get+0x5c>
    c6a6:	f004 f923 	bl	108f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c6aa:	e7f7      	b.n	c69c <mpsl_temperature_get+0x44>
    c6ac:	6830      	ldr	r0, [r6, #0]
    c6ae:	f020 0010 	bic.w	r0, r0, #16
    c6b2:	6030      	str	r0, [r6, #0]
    c6b4:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c6b8:	6065      	str	r5, [r4, #4]
    c6ba:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c6be:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c6c2:	200c      	movs	r0, #12
    c6c4:	f004 f870 	bl	107a8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c6c8:	4630      	mov	r0, r6
    c6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6ce:	0000      	.short	0x0000
    c6d0:	4000c000 	.word	0x4000c000
    c6d4:	e000ed10 	.word	0xe000ed10

0000c6d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c6d8:	b510      	push	{r4, lr}
    c6da:	4602      	mov	r2, r0
    c6dc:	2005      	movs	r0, #5
    c6de:	490c      	ldr	r1, [pc, #48]	; (c710 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c6e0:	e004      	b.n	c6ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c6e2:	bf00      	nop
    c6e4:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c6e8:	791b      	ldrb	r3, [r3, #4]
    c6ea:	b133      	cbz	r3, c6fa <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c6ec:	1e40      	subs	r0, r0, #1
    c6ee:	b2c0      	uxtb	r0, r0
    c6f0:	d2f8      	bcs.n	c6e4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c6f2:	2148      	movs	r1, #72	; 0x48
    c6f4:	2069      	movs	r0, #105	; 0x69
    c6f6:	f7ff ff3b 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c6fa:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c6fe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c702:	2200      	movs	r2, #0
    c704:	714a      	strb	r2, [r1, #5]
    c706:	718a      	strb	r2, [r1, #6]
    c708:	2201      	movs	r2, #1
    c70a:	710a      	strb	r2, [r1, #4]
    c70c:	bd10      	pop	{r4, pc}
    c70e:	0000      	.short	0x0000
    c710:	20001294 	.word	0x20001294

0000c714 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c714:	b510      	push	{r4, lr}
    c716:	2805      	cmp	r0, #5
    c718:	d301      	bcc.n	c71e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c71a:	2158      	movs	r1, #88	; 0x58
    c71c:	e006      	b.n	c72c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c71e:	490a      	ldr	r1, [pc, #40]	; (c748 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c720:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c724:	7901      	ldrb	r1, [r0, #4]
    c726:	2901      	cmp	r1, #1
    c728:	d003      	beq.n	c732 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c72a:	2159      	movs	r1, #89	; 0x59
    c72c:	2069      	movs	r0, #105	; 0x69
    c72e:	f7ff ff1f 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c732:	7941      	ldrb	r1, [r0, #5]
    c734:	7982      	ldrb	r2, [r0, #6]
    c736:	1c49      	adds	r1, r1, #1
    c738:	b2c9      	uxtb	r1, r1
    c73a:	428a      	cmp	r2, r1
    c73c:	d000      	beq.n	c740 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c73e:	7141      	strb	r1, [r0, #5]
    c740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c744:	f7ff bf76 	b.w	c634 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c748:	20001294 	.word	0x20001294

0000c74c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c74c:	b510      	push	{r4, lr}
    c74e:	2805      	cmp	r0, #5
    c750:	d303      	bcc.n	c75a <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c752:	214f      	movs	r1, #79	; 0x4f
    c754:	2069      	movs	r0, #105	; 0x69
    c756:	f7ff ff0b 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c75a:	4a03      	ldr	r2, [pc, #12]	; (c768 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c75c:	2100      	movs	r1, #0
    c75e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c762:	7101      	strb	r1, [r0, #4]
    c764:	bd10      	pop	{r4, pc}
    c766:	0000      	.short	0x0000
    c768:	20001294 	.word	0x20001294

0000c76c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c76c:	b570      	push	{r4, r5, r6, lr}
    c76e:	2505      	movs	r5, #5
    c770:	4e0e      	ldr	r6, [pc, #56]	; (c7ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c772:	4c0f      	ldr	r4, [pc, #60]	; (c7b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c774:	e016      	b.n	c7a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c776:	7821      	ldrb	r1, [r4, #0]
    c778:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c77c:	7902      	ldrb	r2, [r0, #4]
    c77e:	2a01      	cmp	r2, #1
    c780:	d108      	bne.n	c794 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c782:	7942      	ldrb	r2, [r0, #5]
    c784:	7983      	ldrb	r3, [r0, #6]
    c786:	429a      	cmp	r2, r3
    c788:	d004      	beq.n	c794 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c78a:	7942      	ldrb	r2, [r0, #5]
    c78c:	7182      	strb	r2, [r0, #6]
    c78e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c792:	4780      	blx	r0
    c794:	7820      	ldrb	r0, [r4, #0]
    c796:	1c40      	adds	r0, r0, #1
    c798:	b2c0      	uxtb	r0, r0
    c79a:	7020      	strb	r0, [r4, #0]
    c79c:	2805      	cmp	r0, #5
    c79e:	d301      	bcc.n	c7a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c7a0:	2000      	movs	r0, #0
    c7a2:	7020      	strb	r0, [r4, #0]
    c7a4:	1e6d      	subs	r5, r5, #1
    c7a6:	b2ed      	uxtb	r5, r5
    c7a8:	d2e5      	bcs.n	c776 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c7aa:	bd70      	pop	{r4, r5, r6, pc}
    c7ac:	20001294 	.word	0x20001294
    c7b0:	2000037c 	.word	0x2000037c

0000c7b4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c7b4:	b500      	push	{lr}
    c7b6:	f004 f826 	bl	10806 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c7ba:	b940      	cbnz	r0, c7ce <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c7bc:	f004 f82d 	bl	1081a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c7c0:	b928      	cbnz	r0, c7ce <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c7c2:	f004 f841 	bl	10848 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c7c6:	b910      	cbnz	r0, c7ce <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c7c8:	f004 f852 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c7cc:	b108      	cbz	r0, c7d2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c7ce:	4802      	ldr	r0, [pc, #8]	; (c7d8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c7d0:	bd00      	pop	{pc}
    c7d2:	4802      	ldr	r0, [pc, #8]	; (c7dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c7d4:	bd00      	pop	{pc}
    c7d6:	0000      	.short	0x0000
    c7d8:	4000050c 	.word	0x4000050c
    c7dc:	4001e700 	.word	0x4001e700
    c7e0:	b510      	push	{r4, lr}
    c7e2:	f004 f845 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c7e6:	b330      	cbz	r0, c836 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c7e8:	f3ef 8010 	mrs	r0, PRIMASK
    c7ec:	b1c8      	cbz	r0, c822 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c7ee:	2100      	movs	r1, #0
    c7f0:	b672      	cpsid	i
    c7f2:	4812      	ldr	r0, [pc, #72]	; (c83c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c7f4:	6802      	ldr	r2, [r0, #0]
    c7f6:	6803      	ldr	r3, [r0, #0]
    c7f8:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c7fc:	f043 0310 	orr.w	r3, r3, #16
    c800:	6003      	str	r3, [r0, #0]
    c802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c806:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c80a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c80e:	431c      	orrs	r4, r3
    c810:	d000      	beq.n	c814 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c812:	bf40      	sev
    c814:	bf20      	wfe
    c816:	bf00      	nop
    c818:	bf00      	nop
    c81a:	bf00      	nop
    c81c:	bf00      	nop
    c81e:	b112      	cbz	r2, c826 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c820:	e005      	b.n	c82e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c822:	2101      	movs	r1, #1
    c824:	e7e4      	b.n	c7f0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c826:	6802      	ldr	r2, [r0, #0]
    c828:	f022 0210 	bic.w	r2, r2, #16
    c82c:	6002      	str	r2, [r0, #0]
    c82e:	2900      	cmp	r1, #0
    c830:	d000      	beq.n	c834 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c832:	b662      	cpsie	i
    c834:	bd10      	pop	{r4, pc}
    c836:	bf20      	wfe
    c838:	bd10      	pop	{r4, pc}
    c83a:	0000      	.short	0x0000
    c83c:	e000ed10 	.word	0xe000ed10

0000c840 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c840:	4901      	ldr	r1, [pc, #4]	; (c848 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c842:	2001      	movs	r0, #1
    c844:	7088      	strb	r0, [r1, #2]
    c846:	4770      	bx	lr
    c848:	2000032c 	.word	0x2000032c

0000c84c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c84c:	00010b95 00010bcd 00010bb7 00010ba5     ................
    c85c:	00010bb1 00010b9f 00010b93 00010b91     ................
    c86c:	00010bc9 00010bbd 00010bab 00010b99     ................
    c87c:	00010b8b 00010b83 00010b87 00010b7d     ............}...

0000c88c <mpsl_fem_disable>:
    c88c:	4801      	ldr	r0, [pc, #4]	; (c894 <mpsl_fem_disable+0x8>)
    c88e:	6800      	ldr	r0, [r0, #0]
    c890:	6800      	ldr	r0, [r0, #0]
    c892:	4700      	bx	r0
    c894:	20000340 	.word	0x20000340

0000c898 <mpsl_fem_lna_configuration_clear>:
    c898:	4801      	ldr	r0, [pc, #4]	; (c8a0 <mpsl_fem_lna_configuration_clear+0x8>)
    c89a:	6800      	ldr	r0, [r0, #0]
    c89c:	6940      	ldr	r0, [r0, #20]
    c89e:	4700      	bx	r0
    c8a0:	20000340 	.word	0x20000340

0000c8a4 <mpsl_fem_lna_configuration_set>:
    c8a4:	4a01      	ldr	r2, [pc, #4]	; (c8ac <mpsl_fem_lna_configuration_set+0x8>)
    c8a6:	6812      	ldr	r2, [r2, #0]
    c8a8:	68d2      	ldr	r2, [r2, #12]
    c8aa:	4710      	bx	r2
    c8ac:	20000340 	.word	0x20000340

0000c8b0 <mpsl_fem_lna_is_configured>:
    c8b0:	4901      	ldr	r1, [pc, #4]	; (c8b8 <mpsl_fem_lna_is_configured+0x8>)
    c8b2:	6809      	ldr	r1, [r1, #0]
    c8b4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c8b6:	4708      	bx	r1
    c8b8:	20000340 	.word	0x20000340

0000c8bc <mpsl_fem_pa_configuration_clear>:
    c8bc:	4801      	ldr	r0, [pc, #4]	; (c8c4 <mpsl_fem_pa_configuration_clear+0x8>)
    c8be:	6800      	ldr	r0, [r0, #0]
    c8c0:	6900      	ldr	r0, [r0, #16]
    c8c2:	4700      	bx	r0
    c8c4:	20000340 	.word	0x20000340

0000c8c8 <mpsl_fem_pa_configuration_set>:
    c8c8:	4a01      	ldr	r2, [pc, #4]	; (c8d0 <mpsl_fem_pa_configuration_set+0x8>)
    c8ca:	6812      	ldr	r2, [r2, #0]
    c8cc:	6892      	ldr	r2, [r2, #8]
    c8ce:	4710      	bx	r2
    c8d0:	20000340 	.word	0x20000340

0000c8d4 <mpsl_fem_pa_gain_set>:
    c8d4:	4901      	ldr	r1, [pc, #4]	; (c8dc <mpsl_fem_pa_gain_set+0x8>)
    c8d6:	6809      	ldr	r1, [r1, #0]
    c8d8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c8da:	4708      	bx	r1
    c8dc:	20000340 	.word	0x20000340

0000c8e0 <mpsl_fem_pa_is_configured>:
    c8e0:	4901      	ldr	r1, [pc, #4]	; (c8e8 <mpsl_fem_pa_is_configured+0x8>)
    c8e2:	6809      	ldr	r1, [r1, #0]
    c8e4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c8e6:	4708      	bx	r1
    c8e8:	20000340 	.word	0x20000340

0000c8ec <mpsl_fem_tx_power_split>:
    c8ec:	b430      	push	{r4, r5}
    c8ee:	4c03      	ldr	r4, [pc, #12]	; (c8fc <mpsl_fem_tx_power_split+0x10>)
    c8f0:	6824      	ldr	r4, [r4, #0]
    c8f2:	6864      	ldr	r4, [r4, #4]
    c8f4:	46a4      	mov	ip, r4
    c8f6:	bc30      	pop	{r4, r5}
    c8f8:	4760      	bx	ip
    c8fa:	0000      	.short	0x0000
    c8fc:	20000340 	.word	0x20000340

0000c900 <mpsl_fem_device_config_254_apply_get>:
    c900:	4801      	ldr	r0, [pc, #4]	; (c908 <mpsl_fem_device_config_254_apply_get+0x8>)
    c902:	7800      	ldrb	r0, [r0, #0]
    c904:	4770      	bx	lr
    c906:	0000      	.short	0x0000
    c908:	2000037d 	.word	0x2000037d

0000c90c <__udivmoddi4>:
    c90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c910:	4686      	mov	lr, r0
    c912:	468c      	mov	ip, r1
    c914:	4608      	mov	r0, r1
    c916:	9e08      	ldr	r6, [sp, #32]
    c918:	4615      	mov	r5, r2
    c91a:	4674      	mov	r4, lr
    c91c:	4619      	mov	r1, r3
    c91e:	2b00      	cmp	r3, #0
    c920:	f040 80c2 	bne.w	caa8 <__udivmoddi4+0x19c>
    c924:	4285      	cmp	r5, r0
    c926:	fab2 f282 	clz	r2, r2
    c92a:	d945      	bls.n	c9b8 <__udivmoddi4+0xac>
    c92c:	b14a      	cbz	r2, c942 <__udivmoddi4+0x36>
    c92e:	f1c2 0320 	rsb	r3, r2, #32
    c932:	fa00 fc02 	lsl.w	ip, r0, r2
    c936:	fa2e f303 	lsr.w	r3, lr, r3
    c93a:	4095      	lsls	r5, r2
    c93c:	ea43 0c0c 	orr.w	ip, r3, ip
    c940:	4094      	lsls	r4, r2
    c942:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c946:	b2a8      	uxth	r0, r5
    c948:	fbbc f8fe 	udiv	r8, ip, lr
    c94c:	0c23      	lsrs	r3, r4, #16
    c94e:	fb0e cc18 	mls	ip, lr, r8, ip
    c952:	fb08 f900 	mul.w	r9, r8, r0
    c956:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c95a:	4599      	cmp	r9, r3
    c95c:	d928      	bls.n	c9b0 <__udivmoddi4+0xa4>
    c95e:	18eb      	adds	r3, r5, r3
    c960:	f108 37ff 	add.w	r7, r8, #4294967295
    c964:	d204      	bcs.n	c970 <__udivmoddi4+0x64>
    c966:	4599      	cmp	r9, r3
    c968:	d902      	bls.n	c970 <__udivmoddi4+0x64>
    c96a:	f1a8 0702 	sub.w	r7, r8, #2
    c96e:	442b      	add	r3, r5
    c970:	eba3 0309 	sub.w	r3, r3, r9
    c974:	b2a4      	uxth	r4, r4
    c976:	fbb3 fcfe 	udiv	ip, r3, lr
    c97a:	fb0e 331c 	mls	r3, lr, ip, r3
    c97e:	fb0c f000 	mul.w	r0, ip, r0
    c982:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c986:	42a0      	cmp	r0, r4
    c988:	d914      	bls.n	c9b4 <__udivmoddi4+0xa8>
    c98a:	192c      	adds	r4, r5, r4
    c98c:	f10c 33ff 	add.w	r3, ip, #4294967295
    c990:	d204      	bcs.n	c99c <__udivmoddi4+0x90>
    c992:	42a0      	cmp	r0, r4
    c994:	d902      	bls.n	c99c <__udivmoddi4+0x90>
    c996:	f1ac 0302 	sub.w	r3, ip, #2
    c99a:	442c      	add	r4, r5
    c99c:	1a24      	subs	r4, r4, r0
    c99e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c9a2:	b11e      	cbz	r6, c9ac <__udivmoddi4+0xa0>
    c9a4:	40d4      	lsrs	r4, r2
    c9a6:	2300      	movs	r3, #0
    c9a8:	6034      	str	r4, [r6, #0]
    c9aa:	6073      	str	r3, [r6, #4]
    c9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9b0:	4647      	mov	r7, r8
    c9b2:	e7dd      	b.n	c970 <__udivmoddi4+0x64>
    c9b4:	4663      	mov	r3, ip
    c9b6:	e7f1      	b.n	c99c <__udivmoddi4+0x90>
    c9b8:	bb92      	cbnz	r2, ca20 <__udivmoddi4+0x114>
    c9ba:	1b43      	subs	r3, r0, r5
    c9bc:	2101      	movs	r1, #1
    c9be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c9c2:	b2af      	uxth	r7, r5
    c9c4:	fbb3 fcfe 	udiv	ip, r3, lr
    c9c8:	0c20      	lsrs	r0, r4, #16
    c9ca:	fb0e 331c 	mls	r3, lr, ip, r3
    c9ce:	fb0c f807 	mul.w	r8, ip, r7
    c9d2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c9d6:	4598      	cmp	r8, r3
    c9d8:	d962      	bls.n	caa0 <__udivmoddi4+0x194>
    c9da:	18eb      	adds	r3, r5, r3
    c9dc:	f10c 30ff 	add.w	r0, ip, #4294967295
    c9e0:	d204      	bcs.n	c9ec <__udivmoddi4+0xe0>
    c9e2:	4598      	cmp	r8, r3
    c9e4:	d902      	bls.n	c9ec <__udivmoddi4+0xe0>
    c9e6:	f1ac 0002 	sub.w	r0, ip, #2
    c9ea:	442b      	add	r3, r5
    c9ec:	eba3 0308 	sub.w	r3, r3, r8
    c9f0:	b2a4      	uxth	r4, r4
    c9f2:	fbb3 fcfe 	udiv	ip, r3, lr
    c9f6:	fb0e 331c 	mls	r3, lr, ip, r3
    c9fa:	fb0c f707 	mul.w	r7, ip, r7
    c9fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ca02:	42a7      	cmp	r7, r4
    ca04:	d94e      	bls.n	caa4 <__udivmoddi4+0x198>
    ca06:	192c      	adds	r4, r5, r4
    ca08:	f10c 33ff 	add.w	r3, ip, #4294967295
    ca0c:	d204      	bcs.n	ca18 <__udivmoddi4+0x10c>
    ca0e:	42a7      	cmp	r7, r4
    ca10:	d902      	bls.n	ca18 <__udivmoddi4+0x10c>
    ca12:	f1ac 0302 	sub.w	r3, ip, #2
    ca16:	442c      	add	r4, r5
    ca18:	1be4      	subs	r4, r4, r7
    ca1a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ca1e:	e7c0      	b.n	c9a2 <__udivmoddi4+0x96>
    ca20:	f1c2 0320 	rsb	r3, r2, #32
    ca24:	fa20 f103 	lsr.w	r1, r0, r3
    ca28:	4095      	lsls	r5, r2
    ca2a:	4090      	lsls	r0, r2
    ca2c:	fa2e f303 	lsr.w	r3, lr, r3
    ca30:	4303      	orrs	r3, r0
    ca32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ca36:	b2af      	uxth	r7, r5
    ca38:	fbb1 fcfe 	udiv	ip, r1, lr
    ca3c:	fb0e 101c 	mls	r0, lr, ip, r1
    ca40:	0c19      	lsrs	r1, r3, #16
    ca42:	fb0c f807 	mul.w	r8, ip, r7
    ca46:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    ca4a:	4588      	cmp	r8, r1
    ca4c:	fa04 f402 	lsl.w	r4, r4, r2
    ca50:	d922      	bls.n	ca98 <__udivmoddi4+0x18c>
    ca52:	1869      	adds	r1, r5, r1
    ca54:	f10c 30ff 	add.w	r0, ip, #4294967295
    ca58:	d204      	bcs.n	ca64 <__udivmoddi4+0x158>
    ca5a:	4588      	cmp	r8, r1
    ca5c:	d902      	bls.n	ca64 <__udivmoddi4+0x158>
    ca5e:	f1ac 0002 	sub.w	r0, ip, #2
    ca62:	4429      	add	r1, r5
    ca64:	eba1 0108 	sub.w	r1, r1, r8
    ca68:	b29b      	uxth	r3, r3
    ca6a:	fbb1 fcfe 	udiv	ip, r1, lr
    ca6e:	fb0e 111c 	mls	r1, lr, ip, r1
    ca72:	fb0c f707 	mul.w	r7, ip, r7
    ca76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ca7a:	429f      	cmp	r7, r3
    ca7c:	d90e      	bls.n	ca9c <__udivmoddi4+0x190>
    ca7e:	18eb      	adds	r3, r5, r3
    ca80:	f10c 31ff 	add.w	r1, ip, #4294967295
    ca84:	d204      	bcs.n	ca90 <__udivmoddi4+0x184>
    ca86:	429f      	cmp	r7, r3
    ca88:	d902      	bls.n	ca90 <__udivmoddi4+0x184>
    ca8a:	f1ac 0102 	sub.w	r1, ip, #2
    ca8e:	442b      	add	r3, r5
    ca90:	1bdb      	subs	r3, r3, r7
    ca92:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    ca96:	e792      	b.n	c9be <__udivmoddi4+0xb2>
    ca98:	4660      	mov	r0, ip
    ca9a:	e7e3      	b.n	ca64 <__udivmoddi4+0x158>
    ca9c:	4661      	mov	r1, ip
    ca9e:	e7f7      	b.n	ca90 <__udivmoddi4+0x184>
    caa0:	4660      	mov	r0, ip
    caa2:	e7a3      	b.n	c9ec <__udivmoddi4+0xe0>
    caa4:	4663      	mov	r3, ip
    caa6:	e7b7      	b.n	ca18 <__udivmoddi4+0x10c>
    caa8:	4283      	cmp	r3, r0
    caaa:	d906      	bls.n	caba <__udivmoddi4+0x1ae>
    caac:	b916      	cbnz	r6, cab4 <__udivmoddi4+0x1a8>
    caae:	2100      	movs	r1, #0
    cab0:	4608      	mov	r0, r1
    cab2:	e77b      	b.n	c9ac <__udivmoddi4+0xa0>
    cab4:	e9c6 e000 	strd	lr, r0, [r6]
    cab8:	e7f9      	b.n	caae <__udivmoddi4+0x1a2>
    caba:	fab3 f783 	clz	r7, r3
    cabe:	b98f      	cbnz	r7, cae4 <__udivmoddi4+0x1d8>
    cac0:	4283      	cmp	r3, r0
    cac2:	d301      	bcc.n	cac8 <__udivmoddi4+0x1bc>
    cac4:	4572      	cmp	r2, lr
    cac6:	d808      	bhi.n	cada <__udivmoddi4+0x1ce>
    cac8:	ebbe 0402 	subs.w	r4, lr, r2
    cacc:	eb60 0303 	sbc.w	r3, r0, r3
    cad0:	2001      	movs	r0, #1
    cad2:	469c      	mov	ip, r3
    cad4:	b91e      	cbnz	r6, cade <__udivmoddi4+0x1d2>
    cad6:	2100      	movs	r1, #0
    cad8:	e768      	b.n	c9ac <__udivmoddi4+0xa0>
    cada:	4638      	mov	r0, r7
    cadc:	e7fa      	b.n	cad4 <__udivmoddi4+0x1c8>
    cade:	e9c6 4c00 	strd	r4, ip, [r6]
    cae2:	e7f8      	b.n	cad6 <__udivmoddi4+0x1ca>
    cae4:	f1c7 0c20 	rsb	ip, r7, #32
    cae8:	40bb      	lsls	r3, r7
    caea:	fa22 f40c 	lsr.w	r4, r2, ip
    caee:	431c      	orrs	r4, r3
    caf0:	fa2e f10c 	lsr.w	r1, lr, ip
    caf4:	fa20 f30c 	lsr.w	r3, r0, ip
    caf8:	40b8      	lsls	r0, r7
    cafa:	4301      	orrs	r1, r0
    cafc:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cb00:	fa0e f507 	lsl.w	r5, lr, r7
    cb04:	fbb3 f8f9 	udiv	r8, r3, r9
    cb08:	fa1f fe84 	uxth.w	lr, r4
    cb0c:	fb09 3018 	mls	r0, r9, r8, r3
    cb10:	0c0b      	lsrs	r3, r1, #16
    cb12:	fb08 fa0e 	mul.w	sl, r8, lr
    cb16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    cb1a:	459a      	cmp	sl, r3
    cb1c:	fa02 f207 	lsl.w	r2, r2, r7
    cb20:	d940      	bls.n	cba4 <__udivmoddi4+0x298>
    cb22:	18e3      	adds	r3, r4, r3
    cb24:	f108 30ff 	add.w	r0, r8, #4294967295
    cb28:	d204      	bcs.n	cb34 <__udivmoddi4+0x228>
    cb2a:	459a      	cmp	sl, r3
    cb2c:	d902      	bls.n	cb34 <__udivmoddi4+0x228>
    cb2e:	f1a8 0002 	sub.w	r0, r8, #2
    cb32:	4423      	add	r3, r4
    cb34:	eba3 030a 	sub.w	r3, r3, sl
    cb38:	b289      	uxth	r1, r1
    cb3a:	fbb3 f8f9 	udiv	r8, r3, r9
    cb3e:	fb09 3318 	mls	r3, r9, r8, r3
    cb42:	fb08 fe0e 	mul.w	lr, r8, lr
    cb46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cb4a:	458e      	cmp	lr, r1
    cb4c:	d92c      	bls.n	cba8 <__udivmoddi4+0x29c>
    cb4e:	1861      	adds	r1, r4, r1
    cb50:	f108 33ff 	add.w	r3, r8, #4294967295
    cb54:	d204      	bcs.n	cb60 <__udivmoddi4+0x254>
    cb56:	458e      	cmp	lr, r1
    cb58:	d902      	bls.n	cb60 <__udivmoddi4+0x254>
    cb5a:	f1a8 0302 	sub.w	r3, r8, #2
    cb5e:	4421      	add	r1, r4
    cb60:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cb64:	fba0 9802 	umull	r9, r8, r0, r2
    cb68:	eba1 010e 	sub.w	r1, r1, lr
    cb6c:	4541      	cmp	r1, r8
    cb6e:	46ce      	mov	lr, r9
    cb70:	4643      	mov	r3, r8
    cb72:	d302      	bcc.n	cb7a <__udivmoddi4+0x26e>
    cb74:	d106      	bne.n	cb84 <__udivmoddi4+0x278>
    cb76:	454d      	cmp	r5, r9
    cb78:	d204      	bcs.n	cb84 <__udivmoddi4+0x278>
    cb7a:	ebb9 0e02 	subs.w	lr, r9, r2
    cb7e:	eb68 0304 	sbc.w	r3, r8, r4
    cb82:	3801      	subs	r0, #1
    cb84:	2e00      	cmp	r6, #0
    cb86:	d0a6      	beq.n	cad6 <__udivmoddi4+0x1ca>
    cb88:	ebb5 020e 	subs.w	r2, r5, lr
    cb8c:	eb61 0103 	sbc.w	r1, r1, r3
    cb90:	fa01 fc0c 	lsl.w	ip, r1, ip
    cb94:	fa22 f307 	lsr.w	r3, r2, r7
    cb98:	ea4c 0303 	orr.w	r3, ip, r3
    cb9c:	40f9      	lsrs	r1, r7
    cb9e:	e9c6 3100 	strd	r3, r1, [r6]
    cba2:	e798      	b.n	cad6 <__udivmoddi4+0x1ca>
    cba4:	4640      	mov	r0, r8
    cba6:	e7c5      	b.n	cb34 <__udivmoddi4+0x228>
    cba8:	4643      	mov	r3, r8
    cbaa:	e7d9      	b.n	cb60 <__udivmoddi4+0x254>
    cbac:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    cbb0:	4681      	mov	r9, r0
    cbb2:	ea5f 0802 	movs.w	r8, r2
    cbb6:	f100 0007 	add.w	r0, r0, #7
    cbba:	f020 0007 	bic.w	r0, r0, #7
    cbbe:	f04f 0200 	mov.w	r2, #0
    cbc2:	e9cd 0200 	strd	r0, r2, [sp]
    cbc6:	780a      	ldrb	r2, [r1, #0]
    cbc8:	460c      	mov	r4, r1
    cbca:	f88d 2005 	strb.w	r2, [sp, #5]
    cbce:	d000      	beq.n	cbd2 <__udivmoddi4+0x2c6>
    cbd0:	2000      	movs	r0, #0
    cbd2:	a901      	add	r1, sp, #4
    cbd4:	f7f4 fa18 	bl	1008 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cbd8:	9900      	ldr	r1, [sp, #0]
    cbda:	2600      	movs	r6, #0
    cbdc:	4408      	add	r0, r1
    cbde:	9000      	str	r0, [sp, #0]
    cbe0:	7820      	ldrb	r0, [r4, #0]
    cbe2:	7861      	ldrb	r1, [r4, #1]
    cbe4:	4635      	mov	r5, r6
    cbe6:	4408      	add	r0, r1
    cbe8:	b2c7      	uxtb	r7, r0
    cbea:	e008      	b.n	cbfe <__udivmoddi4+0x2f2>
    cbec:	7a23      	ldrb	r3, [r4, #8]
    cbee:	79e2      	ldrb	r2, [r4, #7]
    cbf0:	79a1      	ldrb	r1, [r4, #6]
    cbf2:	7960      	ldrb	r0, [r4, #5]
    cbf4:	f000 fedd 	bl	d9b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cbf8:	1c6d      	adds	r5, r5, #1
    cbfa:	4406      	add	r6, r0
    cbfc:	b2ed      	uxtb	r5, r5
    cbfe:	42bd      	cmp	r5, r7
    cc00:	d3f4      	bcc.n	cbec <__udivmoddi4+0x2e0>
    cc02:	9800      	ldr	r0, [sp, #0]
    cc04:	1cc0      	adds	r0, r0, #3
    cc06:	f020 0003 	bic.w	r0, r0, #3
    cc0a:	9000      	str	r0, [sp, #0]
    cc0c:	f1b8 0f00 	cmp.w	r8, #0
    cc10:	d000      	beq.n	cc14 <__udivmoddi4+0x308>
    cc12:	2000      	movs	r0, #0
    cc14:	4632      	mov	r2, r6
    cc16:	4639      	mov	r1, r7
    cc18:	f7f4 fb1e 	bl	1258 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cc1c:	9900      	ldr	r1, [sp, #0]
    cc1e:	4642      	mov	r2, r8
    cc20:	4408      	add	r0, r1
    cc22:	9000      	str	r0, [sp, #0]
    cc24:	4621      	mov	r1, r4
    cc26:	4668      	mov	r0, sp
    cc28:	f7f3 fde4 	bl	7f4 <__data_size+0x8a>
    cc2c:	9900      	ldr	r1, [sp, #0]
    cc2e:	eba1 0009 	sub.w	r0, r1, r9
    cc32:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

0000cc36 <sdc_soc_ecb_block_encrypt>:
    cc36:	b530      	push	{r4, r5, lr}
    cc38:	460d      	mov	r5, r1
    cc3a:	b08d      	sub	sp, #52	; 0x34
    cc3c:	4614      	mov	r4, r2
    cc3e:	4601      	mov	r1, r0
    cc40:	2210      	movs	r2, #16
    cc42:	4668      	mov	r0, sp
    cc44:	f003 fec0 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc48:	2210      	movs	r2, #16
    cc4a:	4629      	mov	r1, r5
    cc4c:	a804      	add	r0, sp, #16
    cc4e:	f003 febb 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc52:	4668      	mov	r0, sp
    cc54:	f000 ff0f 	bl	da76 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    cc58:	b118      	cbz	r0, cc62 <sdc_soc_ecb_block_encrypt+0x2c>
    cc5a:	f06f 0015 	mvn.w	r0, #21
    cc5e:	b00d      	add	sp, #52	; 0x34
    cc60:	bd30      	pop	{r4, r5, pc}
    cc62:	2210      	movs	r2, #16
    cc64:	4620      	mov	r0, r4
    cc66:	a908      	add	r1, sp, #32
    cc68:	f003 feae 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc6c:	2000      	movs	r0, #0
    cc6e:	e7f6      	b.n	cc5e <sdc_soc_ecb_block_encrypt+0x28>

0000cc70 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cc70:	b50e      	push	{r1, r2, r3, lr}
    cc72:	4601      	mov	r1, r0
    cc74:	4668      	mov	r0, sp
    cc76:	f000 f804 	bl	cc82 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cc7a:	4668      	mov	r0, sp
    cc7c:	f001 fb49 	bl	e312 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cc80:	bd0e      	pop	{r1, r2, r3, pc}

0000cc82 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cc82:	880a      	ldrh	r2, [r1, #0]
    cc84:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cc88:	8082      	strh	r2, [r0, #4]
    cc8a:	884a      	ldrh	r2, [r1, #2]
    cc8c:	80c2      	strh	r2, [r0, #6]
    cc8e:	784a      	ldrb	r2, [r1, #1]
    cc90:	0993      	lsrs	r3, r2, #6
    cc92:	2200      	movs	r2, #0
    cc94:	7242      	strb	r2, [r0, #9]
    cc96:	784b      	ldrb	r3, [r1, #1]
    cc98:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cc9c:	b11b      	cbz	r3, cca6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cc9e:	2b01      	cmp	r3, #1
    cca0:	d005      	beq.n	ccae <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cca2:	2b02      	cmp	r3, #2
    cca4:	d005      	beq.n	ccb2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cca6:	7202      	strb	r2, [r0, #8]
    cca8:	1d09      	adds	r1, r1, #4
    ccaa:	6001      	str	r1, [r0, #0]
    ccac:	4770      	bx	lr
    ccae:	2201      	movs	r2, #1
    ccb0:	e7f9      	b.n	cca6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ccb2:	2202      	movs	r2, #2
    ccb4:	e7f7      	b.n	cca6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ccb6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ccb6:	b510      	push	{r4, lr}
    ccb8:	460c      	mov	r4, r1
    ccba:	7909      	ldrb	r1, [r1, #4]
    ccbc:	7001      	strb	r1, [r0, #0]
    ccbe:	7841      	ldrb	r1, [r0, #1]
    ccc0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    ccc4:	7041      	strb	r1, [r0, #1]
    ccc6:	88a2      	ldrh	r2, [r4, #4]
    ccc8:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cccc:	4311      	orrs	r1, r2
    ccce:	7041      	strb	r1, [r0, #1]
    ccd0:	79a2      	ldrb	r2, [r4, #6]
    ccd2:	7082      	strb	r2, [r0, #2]
    ccd4:	88e2      	ldrh	r2, [r4, #6]
    ccd6:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ccda:	0a12      	lsrs	r2, r2, #8
    ccdc:	70c2      	strb	r2, [r0, #3]
    ccde:	7041      	strb	r1, [r0, #1]
    cce0:	7a22      	ldrb	r2, [r4, #8]
    cce2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cce6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ccea:	7041      	strb	r1, [r0, #1]
    ccec:	7a62      	ldrb	r2, [r4, #9]
    ccee:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ccf2:	7041      	strb	r1, [r0, #1]
    ccf4:	6821      	ldr	r1, [r4, #0]
    ccf6:	1d02      	adds	r2, r0, #4
    ccf8:	4291      	cmp	r1, r2
    ccfa:	d006      	beq.n	cd0a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ccfc:	88e2      	ldrh	r2, [r4, #6]
    ccfe:	2afb      	cmp	r2, #251	; 0xfb
    cd00:	d300      	bcc.n	cd04 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    cd02:	22fb      	movs	r2, #251	; 0xfb
    cd04:	1d00      	adds	r0, r0, #4
    cd06:	f003 fe5f 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd0a:	79a0      	ldrb	r0, [r4, #6]
    cd0c:	1d00      	adds	r0, r0, #4
    cd0e:	b2c0      	uxtb	r0, r0
    cd10:	bd10      	pop	{r4, pc}

0000cd12 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cd12:	b430      	push	{r4, r5}
    cd14:	790a      	ldrb	r2, [r1, #4]
    cd16:	7002      	strb	r2, [r0, #0]
    cd18:	7842      	ldrb	r2, [r0, #1]
    cd1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cd1e:	7042      	strb	r2, [r0, #1]
    cd20:	888b      	ldrh	r3, [r1, #4]
    cd22:	f3c3 2303 	ubfx	r3, r3, #8, #4
    cd26:	431a      	orrs	r2, r3
    cd28:	7042      	strb	r2, [r0, #1]
    cd2a:	798b      	ldrb	r3, [r1, #6]
    cd2c:	7083      	strb	r3, [r0, #2]
    cd2e:	78c3      	ldrb	r3, [r0, #3]
    cd30:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cd34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cd38:	70c3      	strb	r3, [r0, #3]
    cd3a:	88cc      	ldrh	r4, [r1, #6]
    cd3c:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cd40:	4323      	orrs	r3, r4
    cd42:	70c3      	strb	r3, [r0, #3]
    cd44:	7042      	strb	r2, [r0, #1]
    cd46:	7a0c      	ldrb	r4, [r1, #8]
    cd48:	f004 0403 	and.w	r4, r4, #3
    cd4c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cd50:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cd54:	7042      	strb	r2, [r0, #1]
    cd56:	7a4c      	ldrb	r4, [r1, #9]
    cd58:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    cd5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cd60:	7042      	strb	r2, [r0, #1]
    cd62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cd66:	70c2      	strb	r2, [r0, #3]
    cd68:	680b      	ldr	r3, [r1, #0]
    cd6a:	1d02      	adds	r2, r0, #4
    cd6c:	4293      	cmp	r3, r2
    cd6e:	d005      	beq.n	cd7c <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    cd70:	88ca      	ldrh	r2, [r1, #6]
    cd72:	bc30      	pop	{r4, r5}
    cd74:	4619      	mov	r1, r3
    cd76:	1d00      	adds	r0, r0, #4
    cd78:	f003 be26 	b.w	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd7c:	bc30      	pop	{r4, r5}
    cd7e:	4770      	bx	lr

0000cd80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cd80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd84:	4604      	mov	r4, r0
    cd86:	f891 c000 	ldrb.w	ip, [r1]
    cd8a:	460d      	mov	r5, r1
    cd8c:	2000      	movs	r0, #0
    cd8e:	2711      	movs	r7, #17
    cd90:	263e      	movs	r6, #62	; 0x3e
    cd92:	2312      	movs	r3, #18
    cd94:	22ff      	movs	r2, #255	; 0xff
    cd96:	f04f 0b0c 	mov.w	fp, #12
    cd9a:	f04f 0905 	mov.w	r9, #5
    cd9e:	f04f 0a03 	mov.w	sl, #3
    cda2:	f104 010d 	add.w	r1, r4, #13
    cda6:	f04f 0e14 	mov.w	lr, #20
    cdaa:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    cdae:	d26f      	bcs.n	ce90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x110>
    cdb0:	e8df f00c 	tbb	[pc, ip]
    cdb4:	47452d6e 	.word	0x47452d6e
    cdb8:	a76eef4c 	.word	0xa76eef4c
    cdbc:	edf0c2b1 	.word	0xedf0c2b1
    cdc0:	e9eaebec 	.word	0xe9eaebec
    cdc4:	6f6e12e8 	.word	0x6f6e12e8
    cdc8:	e6e78c6e 	.word	0xe6e78c6e
    cdcc:	e2e3e4e5 	.word	0xe2e3e4e5
    cdd0:	dedfe0e1 	.word	0xdedfe0e1
    cdd4:	00dc6edd 	.word	0x00dc6edd
    cdd8:	200e      	movs	r0, #14
    cdda:	7020      	strb	r0, [r4, #0]
    cddc:	7968      	ldrb	r0, [r5, #5]
    cdde:	70e0      	strb	r0, [r4, #3]
    cde0:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cde4:	0a00      	lsrs	r0, r0, #8
    cde6:	7120      	strb	r0, [r4, #4]
    cde8:	7928      	ldrb	r0, [r5, #4]
    cdea:	70a0      	strb	r0, [r4, #2]
    cdec:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cdf0:	3883      	subs	r0, #131	; 0x83
    cdf2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    cdf6:	d003      	beq.n	ce00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x80>
    cdf8:	2136      	movs	r1, #54	; 0x36
    cdfa:	20c7      	movs	r0, #199	; 0xc7
    cdfc:	f7f3 fe0e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce00:	4652      	mov	r2, sl
    ce02:	1de9      	adds	r1, r5, #7
    ce04:	1d60      	adds	r0, r4, #5
    ce06:	f003 fddf 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce0a:	2007      	movs	r0, #7
    ce0c:	e151      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    ce0e:	f884 b000 	strb.w	fp, [r4]
    ce12:	7928      	ldrb	r0, [r5, #4]
    ce14:	70a0      	strb	r0, [r4, #2]
    ce16:	7968      	ldrb	r0, [r5, #5]
    ce18:	70e0      	strb	r0, [r4, #3]
    ce1a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ce1e:	0a00      	lsrs	r0, r0, #8
    ce20:	7120      	strb	r0, [r4, #4]
    ce22:	79e8      	ldrb	r0, [r5, #7]
    ce24:	7160      	strb	r0, [r4, #5]
    ce26:	7a28      	ldrb	r0, [r5, #8]
    ce28:	71a0      	strb	r0, [r4, #6]
    ce2a:	8928      	ldrh	r0, [r5, #8]
    ce2c:	0a00      	lsrs	r0, r0, #8
    ce2e:	71e0      	strb	r0, [r4, #7]
    ce30:	7aa8      	ldrb	r0, [r5, #10]
    ce32:	7220      	strb	r0, [r4, #8]
    ce34:	8968      	ldrh	r0, [r5, #10]
    ce36:	0a00      	lsrs	r0, r0, #8
    ce38:	7260      	strb	r0, [r4, #9]
    ce3a:	2008      	movs	r0, #8
    ce3c:	e139      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    ce3e:	2010      	movs	r0, #16
    ce40:	e000      	b.n	ce44 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc4>
    ce42:	201a      	movs	r0, #26
    ce44:	7020      	strb	r0, [r4, #0]
    ce46:	7928      	ldrb	r0, [r5, #4]
    ce48:	70a0      	strb	r0, [r4, #2]
    ce4a:	e138      	b.n	d0be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33e>
    ce4c:	7026      	strb	r6, [r4, #0]
    ce4e:	2002      	movs	r0, #2
    ce50:	70a0      	strb	r0, [r4, #2]
    ce52:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    ce56:	70e0      	strb	r0, [r4, #3]
    ce58:	7aa8      	ldrb	r0, [r5, #10]
    ce5a:	7120      	strb	r0, [r4, #4]
    ce5c:	7868      	ldrb	r0, [r5, #1]
    ce5e:	7160      	strb	r0, [r4, #5]
    ce60:	f8d5 0002 	ldr.w	r0, [r5, #2]
    ce64:	f8c4 0006 	str.w	r0, [r4, #6]
    ce68:	88e8      	ldrh	r0, [r5, #6]
    ce6a:	8160      	strh	r0, [r4, #10]
    ce6c:	7a28      	ldrb	r0, [r5, #8]
    ce6e:	7320      	strb	r0, [r4, #12]
    ce70:	7a2e      	ldrb	r6, [r5, #8]
    ce72:	2e1f      	cmp	r6, #31
    ce74:	d300      	bcc.n	ce78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xf8>
    ce76:	261f      	movs	r6, #31
    ce78:	4608      	mov	r0, r1
    ce7a:	4632      	mov	r2, r6
    ce7c:	f105 010b 	add.w	r1, r5, #11
    ce80:	f003 fda2 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce84:	360d      	adds	r6, #13
    ce86:	7a69      	ldrb	r1, [r5, #9]
    ce88:	55a1      	strb	r1, [r4, r6]
    ce8a:	1e76      	subs	r6, r6, #1
    ce8c:	b2f0      	uxtb	r0, r6
    ce8e:	e10e      	b.n	d0ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    ce90:	e111      	b.n	d0b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    ce92:	7026      	strb	r6, [r4, #0]
    ce94:	200b      	movs	r0, #11
    ce96:	70a0      	strb	r0, [r4, #2]
    ce98:	7928      	ldrb	r0, [r5, #4]
    ce9a:	70e0      	strb	r0, [r4, #3]
    ce9c:	7968      	ldrb	r0, [r5, #5]
    ce9e:	7120      	strb	r0, [r4, #4]
    cea0:	79a8      	ldrb	r0, [r5, #6]
    cea2:	7160      	strb	r0, [r4, #5]
    cea4:	f8d5 0007 	ldr.w	r0, [r5, #7]
    cea8:	f8c4 0006 	str.w	r0, [r4, #6]
    ceac:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    ceb0:	8160      	strh	r0, [r4, #10]
    ceb2:	7b68      	ldrb	r0, [r5, #13]
    ceb4:	7320      	strb	r0, [r4, #12]
    ceb6:	f8d5 000e 	ldr.w	r0, [r5, #14]
    ceba:	f8c4 000d 	str.w	r0, [r4, #13]
    cebe:	8a68      	ldrh	r0, [r5, #18]
    cec0:	f8a4 0011 	strh.w	r0, [r4, #17]
    cec4:	7d28      	ldrb	r0, [r5, #20]
    cec6:	74e0      	strb	r0, [r4, #19]
    cec8:	4618      	mov	r0, r3
    ceca:	e0f2      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    cecc:	2029      	movs	r0, #41	; 0x29
    cece:	f7f3 ff23 	bl	d18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    ced2:	b148      	cbz	r0, cee8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x168>
    ced4:	7026      	strb	r6, [r4, #0]
    ced6:	2029      	movs	r0, #41	; 0x29
    ced8:	70a0      	strb	r0, [r4, #2]
    ceda:	2221      	movs	r2, #33	; 0x21
    cedc:	1d29      	adds	r1, r5, #4
    cede:	1ce0      	adds	r0, r4, #3
    cee0:	f003 fd72 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cee4:	2022      	movs	r0, #34	; 0x22
    cee6:	e0e4      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    cee8:	200a      	movs	r0, #10
    ceea:	f7f3 ff15 	bl	d18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    ceee:	2800      	cmp	r0, #0
    cef0:	4629      	mov	r1, r5
    cef2:	4620      	mov	r0, r4
    cef4:	d002      	beq.n	cefc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x17c>
    cef6:	f000 f9a1 	bl	d23c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cefa:	e0d8      	b.n	d0ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cefc:	f000 f975 	bl	d1ea <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cf00:	e0d5      	b.n	d0ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cf02:	7026      	strb	r6, [r4, #0]
    cf04:	f884 e002 	strb.w	lr, [r4, #2]
    cf08:	7928      	ldrb	r0, [r5, #4]
    cf0a:	70e0      	strb	r0, [r4, #3]
    cf0c:	88a8      	ldrh	r0, [r5, #4]
    cf0e:	0a00      	lsrs	r0, r0, #8
    cf10:	7120      	strb	r0, [r4, #4]
    cf12:	79a8      	ldrb	r0, [r5, #6]
    cf14:	e106      	b.n	d124 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    cf16:	223e      	movs	r2, #62	; 0x3e
    cf18:	7022      	strb	r2, [r4, #0]
    cf1a:	2204      	movs	r2, #4
    cf1c:	70a2      	strb	r2, [r4, #2]
    cf1e:	6868      	ldr	r0, [r5, #4]
    cf20:	f8c4 0003 	str.w	r0, [r4, #3]
    cf24:	68a8      	ldr	r0, [r5, #8]
    cf26:	f8c4 0007 	str.w	r0, [r4, #7]
    cf2a:	89a8      	ldrh	r0, [r5, #12]
    cf2c:	f8a4 000b 	strh.w	r0, [r4, #11]
    cf30:	7ba8      	ldrb	r0, [r5, #14]
    cf32:	7360      	strb	r0, [r4, #13]
    cf34:	200c      	movs	r0, #12
    cf36:	e0bc      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    cf38:	7026      	strb	r6, [r4, #0]
    cf3a:	f884 a002 	strb.w	sl, [r4, #2]
    cf3e:	7928      	ldrb	r0, [r5, #4]
    cf40:	70e0      	strb	r0, [r4, #3]
    cf42:	79a8      	ldrb	r0, [r5, #6]
    cf44:	7120      	strb	r0, [r4, #4]
    cf46:	88e8      	ldrh	r0, [r5, #6]
    cf48:	0a00      	lsrs	r0, r0, #8
    cf4a:	7160      	strb	r0, [r4, #5]
    cf4c:	7a28      	ldrb	r0, [r5, #8]
    cf4e:	71a0      	strb	r0, [r4, #6]
    cf50:	8928      	ldrh	r0, [r5, #8]
    cf52:	0a00      	lsrs	r0, r0, #8
    cf54:	71e0      	strb	r0, [r4, #7]
    cf56:	7aa8      	ldrb	r0, [r5, #10]
    cf58:	7220      	strb	r0, [r4, #8]
    cf5a:	8968      	ldrh	r0, [r5, #10]
    cf5c:	0a00      	lsrs	r0, r0, #8
    cf5e:	7260      	strb	r0, [r4, #9]
    cf60:	7b28      	ldrb	r0, [r5, #12]
    cf62:	72a0      	strb	r0, [r4, #10]
    cf64:	89a8      	ldrh	r0, [r5, #12]
    cf66:	0a00      	lsrs	r0, r0, #8
    cf68:	72e0      	strb	r0, [r4, #11]
    cf6a:	e118      	b.n	d19e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
    cf6c:	e126      	b.n	d1bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x43c>
    cf6e:	e0fa      	b.n	d166 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    cf70:	e0db      	b.n	d12a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3aa>
    cf72:	e106      	b.n	d182 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    cf74:	e115      	b.n	d1a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x422>
    cf76:	e0cd      	b.n	d114 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x394>
    cf78:	e0b5      	b.n	d0e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x366>
    cf7a:	e0b1      	b.n	d0e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x360>
    cf7c:	e09d      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33a>
    cf7e:	e0a0      	b.n	d0c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    cf80:	e043      	b.n	d00a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28a>
    cf82:	e03f      	b.n	d004 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cf84:	e054      	b.n	d030 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b0>
    cf86:	e04e      	b.n	d026 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a6>
    cf88:	e031      	b.n	cfee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    cf8a:	e025      	b.n	cfd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x258>
    cf8c:	e018      	b.n	cfc0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    cf8e:	e015      	b.n	cfbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23c>
    cf90:	e000      	b.n	cf94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    cf92:	e056      	b.n	d042 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    cf94:	7026      	strb	r6, [r4, #0]
    cf96:	f884 9002 	strb.w	r9, [r4, #2]
    cf9a:	7928      	ldrb	r0, [r5, #4]
    cf9c:	70e0      	strb	r0, [r4, #3]
    cf9e:	88a8      	ldrh	r0, [r5, #4]
    cfa0:	0a00      	lsrs	r0, r0, #8
    cfa2:	7120      	strb	r0, [r4, #4]
    cfa4:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cfa8:	f8c4 0005 	str.w	r0, [r4, #5]
    cfac:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cfb0:	f8c4 0009 	str.w	r0, [r4, #9]
    cfb4:	89e8      	ldrh	r0, [r5, #14]
    cfb6:	f8a4 000d 	strh.w	r0, [r4, #13]
    cfba:	e114      	b.n	d1e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x466>
    cfbc:	7027      	strb	r7, [r4, #0]
    cfbe:	e039      	b.n	d034 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b4>
    cfc0:	f884 9000 	strb.w	r9, [r4]
    cfc4:	7928      	ldrb	r0, [r5, #4]
    cfc6:	70a0      	strb	r0, [r4, #2]
    cfc8:	7968      	ldrb	r0, [r5, #5]
    cfca:	70e0      	strb	r0, [r4, #3]
    cfcc:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cfd0:	0a00      	lsrs	r0, r0, #8
    cfd2:	7120      	strb	r0, [r4, #4]
    cfd4:	79e8      	ldrb	r0, [r5, #7]
    cfd6:	e0a5      	b.n	d124 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    cfd8:	2008      	movs	r0, #8
    cfda:	7020      	strb	r0, [r4, #0]
    cfdc:	7928      	ldrb	r0, [r5, #4]
    cfde:	70a0      	strb	r0, [r4, #2]
    cfe0:	79a8      	ldrb	r0, [r5, #6]
    cfe2:	70e0      	strb	r0, [r4, #3]
    cfe4:	88e8      	ldrh	r0, [r5, #6]
    cfe6:	0a00      	lsrs	r0, r0, #8
    cfe8:	7120      	strb	r0, [r4, #4]
    cfea:	7a28      	ldrb	r0, [r5, #8]
    cfec:	e09a      	b.n	d124 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    cfee:	2030      	movs	r0, #48	; 0x30
    cff0:	7020      	strb	r0, [r4, #0]
    cff2:	7928      	ldrb	r0, [r5, #4]
    cff4:	70a0      	strb	r0, [r4, #2]
    cff6:	79a8      	ldrb	r0, [r5, #6]
    cff8:	70e0      	strb	r0, [r4, #3]
    cffa:	88e8      	ldrh	r0, [r5, #6]
    cffc:	0a00      	lsrs	r0, r0, #8
    cffe:	7120      	strb	r0, [r4, #4]
    d000:	2003      	movs	r0, #3
    d002:	e056      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d004:	7026      	strb	r6, [r4, #0]
    d006:	2007      	movs	r0, #7
    d008:	e091      	b.n	d12e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ae>
    d00a:	7026      	strb	r6, [r4, #0]
    d00c:	f884 b002 	strb.w	fp, [r4, #2]
    d010:	7928      	ldrb	r0, [r5, #4]
    d012:	70e0      	strb	r0, [r4, #3]
    d014:	79a8      	ldrb	r0, [r5, #6]
    d016:	7120      	strb	r0, [r4, #4]
    d018:	88e8      	ldrh	r0, [r5, #6]
    d01a:	0a00      	lsrs	r0, r0, #8
    d01c:	7160      	strb	r0, [r4, #5]
    d01e:	7a28      	ldrb	r0, [r5, #8]
    d020:	71a0      	strb	r0, [r4, #6]
    d022:	7a68      	ldrb	r0, [r5, #9]
    d024:	e059      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    d026:	1d29      	adds	r1, r5, #4
    d028:	4620      	mov	r0, r4
    d02a:	f7f3 fe35 	bl	c98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    d02e:	e03e      	b.n	d0ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d030:	2057      	movs	r0, #87	; 0x57
    d032:	7020      	strb	r0, [r4, #0]
    d034:	7928      	ldrb	r0, [r5, #4]
    d036:	70a0      	strb	r0, [r4, #2]
    d038:	88a8      	ldrh	r0, [r5, #4]
    d03a:	0a00      	lsrs	r0, r0, #8
    d03c:	70e0      	strb	r0, [r4, #3]
    d03e:	2002      	movs	r0, #2
    d040:	e037      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d042:	7026      	strb	r6, [r4, #0]
    d044:	220d      	movs	r2, #13
    d046:	70a2      	strb	r2, [r4, #2]
    d048:	792a      	ldrb	r2, [r5, #4]
    d04a:	70e2      	strb	r2, [r4, #3]
    d04c:	89ea      	ldrh	r2, [r5, #14]
    d04e:	80a2      	strh	r2, [r4, #4]
    d050:	796a      	ldrb	r2, [r5, #5]
    d052:	71a2      	strb	r2, [r4, #6]
    d054:	f8d5 2006 	ldr.w	r2, [r5, #6]
    d058:	f8c4 2007 	str.w	r2, [r4, #7]
    d05c:	896a      	ldrh	r2, [r5, #10]
    d05e:	f8a4 200b 	strh.w	r2, [r4, #11]
    d062:	7c2a      	ldrb	r2, [r5, #16]
    d064:	4620      	mov	r0, r4
    d066:	7362      	strb	r2, [r4, #13]
    d068:	1d29      	adds	r1, r5, #4
    d06a:	7c6a      	ldrb	r2, [r5, #17]
    d06c:	7382      	strb	r2, [r0, #14]
    d06e:	7b8a      	ldrb	r2, [r1, #14]
    d070:	73c2      	strb	r2, [r0, #15]
    d072:	7e8a      	ldrb	r2, [r1, #26]
    d074:	7402      	strb	r2, [r0, #16]
    d076:	7a4a      	ldrb	r2, [r1, #9]
    d078:	7442      	strb	r2, [r0, #17]
    d07a:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d07e:	f8ad 2000 	strh.w	r2, [sp]
    d082:	8242      	strh	r2, [r0, #18]
    d084:	7cca      	ldrb	r2, [r1, #19]
    d086:	7502      	strb	r2, [r0, #20]
    d088:	694a      	ldr	r2, [r1, #20]
    d08a:	f8c0 2015 	str.w	r2, [r0, #21]
    d08e:	8b0a      	ldrh	r2, [r1, #24]
    d090:	f8a0 2019 	strh.w	r2, [r0, #25]
    d094:	7a0a      	ldrb	r2, [r1, #8]
    d096:	76c2      	strb	r2, [r0, #27]
    d098:	7a0d      	ldrb	r5, [r1, #8]
    d09a:	2de5      	cmp	r5, #229	; 0xe5
    d09c:	d300      	bcc.n	d0a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    d09e:	25e5      	movs	r5, #229	; 0xe5
    d0a0:	462a      	mov	r2, r5
    d0a2:	301c      	adds	r0, #28
    d0a4:	311c      	adds	r1, #28
    d0a6:	f003 fc8f 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0aa:	351a      	adds	r5, #26
    d0ac:	b2e8      	uxtb	r0, r5
    d0ae:	2800      	cmp	r0, #0
    d0b0:	d001      	beq.n	d0b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    d0b2:	7060      	strb	r0, [r4, #1]
    d0b4:	1c80      	adds	r0, r0, #2
    d0b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0ba:	7026      	strb	r6, [r4, #0]
    d0bc:	70a7      	strb	r7, [r4, #2]
    d0be:	2001      	movs	r0, #1
    d0c0:	e7f7      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d0c2:	7026      	strb	r6, [r4, #0]
    d0c4:	70a3      	strb	r3, [r4, #2]
    d0c6:	7928      	ldrb	r0, [r5, #4]
    d0c8:	70e0      	strb	r0, [r4, #3]
    d0ca:	7968      	ldrb	r0, [r5, #5]
    d0cc:	7120      	strb	r0, [r4, #4]
    d0ce:	79a8      	ldrb	r0, [r5, #6]
    d0d0:	7160      	strb	r0, [r4, #5]
    d0d2:	88e8      	ldrh	r0, [r5, #6]
    d0d4:	0a00      	lsrs	r0, r0, #8
    d0d6:	71a0      	strb	r0, [r4, #6]
    d0d8:	7a28      	ldrb	r0, [r5, #8]
    d0da:	71e0      	strb	r0, [r4, #7]
    d0dc:	2006      	movs	r0, #6
    d0de:	e7e8      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d0e0:	7026      	strb	r6, [r4, #0]
    d0e2:	2020      	movs	r0, #32
    d0e4:	e041      	b.n	d16a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ea>
    d0e6:	7026      	strb	r6, [r4, #0]
    d0e8:	2021      	movs	r0, #33	; 0x21
    d0ea:	70a0      	strb	r0, [r4, #2]
    d0ec:	7928      	ldrb	r0, [r5, #4]
    d0ee:	70e0      	strb	r0, [r4, #3]
    d0f0:	7968      	ldrb	r0, [r5, #5]
    d0f2:	7120      	strb	r0, [r4, #4]
    d0f4:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d0f8:	0a00      	lsrs	r0, r0, #8
    d0fa:	7160      	strb	r0, [r4, #5]
    d0fc:	79e8      	ldrb	r0, [r5, #7]
    d0fe:	71a0      	strb	r0, [r4, #6]
    d100:	7a28      	ldrb	r0, [r5, #8]
    d102:	71e0      	strb	r0, [r4, #7]
    d104:	7a68      	ldrb	r0, [r5, #9]
    d106:	7220      	strb	r0, [r4, #8]
    d108:	7aa8      	ldrb	r0, [r5, #10]
    d10a:	7260      	strb	r0, [r4, #9]
    d10c:	7ae8      	ldrb	r0, [r5, #11]
    d10e:	72a0      	strb	r0, [r4, #10]
    d110:	2009      	movs	r0, #9
    d112:	e7ce      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d114:	7022      	strb	r2, [r4, #0]
    d116:	20a1      	movs	r0, #161	; 0xa1
    d118:	70a0      	strb	r0, [r4, #2]
    d11a:	7928      	ldrb	r0, [r5, #4]
    d11c:	70e0      	strb	r0, [r4, #3]
    d11e:	7968      	ldrb	r0, [r5, #5]
    d120:	7120      	strb	r0, [r4, #4]
    d122:	2000      	movs	r0, #0
    d124:	7160      	strb	r0, [r4, #5]
    d126:	2004      	movs	r0, #4
    d128:	e7c3      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d12a:	7022      	strb	r2, [r4, #0]
    d12c:	20a2      	movs	r0, #162	; 0xa2
    d12e:	70a0      	strb	r0, [r4, #2]
    d130:	7928      	ldrb	r0, [r5, #4]
    d132:	70e0      	strb	r0, [r4, #3]
    d134:	88a8      	ldrh	r0, [r5, #4]
    d136:	0a00      	lsrs	r0, r0, #8
    d138:	7120      	strb	r0, [r4, #4]
    d13a:	79a8      	ldrb	r0, [r5, #6]
    d13c:	7160      	strb	r0, [r4, #5]
    d13e:	88e8      	ldrh	r0, [r5, #6]
    d140:	0a00      	lsrs	r0, r0, #8
    d142:	71a0      	strb	r0, [r4, #6]
    d144:	7a28      	ldrb	r0, [r5, #8]
    d146:	71e0      	strb	r0, [r4, #7]
    d148:	8928      	ldrh	r0, [r5, #8]
    d14a:	0a00      	lsrs	r0, r0, #8
    d14c:	7220      	strb	r0, [r4, #8]
    d14e:	7aa8      	ldrb	r0, [r5, #10]
    d150:	7260      	strb	r0, [r4, #9]
    d152:	8968      	ldrh	r0, [r5, #10]
    d154:	0a00      	lsrs	r0, r0, #8
    d156:	72a0      	strb	r0, [r4, #10]
    d158:	7b28      	ldrb	r0, [r5, #12]
    d15a:	72e0      	strb	r0, [r4, #11]
    d15c:	89a8      	ldrh	r0, [r5, #12]
    d15e:	0a00      	lsrs	r0, r0, #8
    d160:	7320      	strb	r0, [r4, #12]
    d162:	200b      	movs	r0, #11
    d164:	e7a5      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d166:	7022      	strb	r2, [r4, #0]
    d168:	20a3      	movs	r0, #163	; 0xa3
    d16a:	70a0      	strb	r0, [r4, #2]
    d16c:	7928      	ldrb	r0, [r5, #4]
    d16e:	70e0      	strb	r0, [r4, #3]
    d170:	88a8      	ldrh	r0, [r5, #4]
    d172:	0a00      	lsrs	r0, r0, #8
    d174:	7120      	strb	r0, [r4, #4]
    d176:	79a8      	ldrb	r0, [r5, #6]
    d178:	7160      	strb	r0, [r4, #5]
    d17a:	79e8      	ldrb	r0, [r5, #7]
    d17c:	71a0      	strb	r0, [r4, #6]
    d17e:	2005      	movs	r0, #5
    d180:	e797      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d182:	7026      	strb	r6, [r4, #0]
    d184:	2013      	movs	r0, #19
    d186:	70a0      	strb	r0, [r4, #2]
    d188:	7928      	ldrb	r0, [r5, #4]
    d18a:	70e0      	strb	r0, [r4, #3]
    d18c:	7968      	ldrb	r0, [r5, #5]
    d18e:	7120      	strb	r0, [r4, #4]
    d190:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d194:	f8c4 0005 	str.w	r0, [r4, #5]
    d198:	8968      	ldrh	r0, [r5, #10]
    d19a:	f8a4 0009 	strh.w	r0, [r4, #9]
    d19e:	200a      	movs	r0, #10
    d1a0:	e787      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d1a2:	7022      	strb	r2, [r4, #0]
    d1a4:	20a4      	movs	r0, #164	; 0xa4
    d1a6:	70a0      	strb	r0, [r4, #2]
    d1a8:	7928      	ldrb	r0, [r5, #4]
    d1aa:	70e0      	strb	r0, [r4, #3]
    d1ac:	88a8      	ldrh	r0, [r5, #4]
    d1ae:	0a00      	lsrs	r0, r0, #8
    d1b0:	7120      	strb	r0, [r4, #4]
    d1b2:	79a8      	ldrb	r0, [r5, #6]
    d1b4:	7160      	strb	r0, [r4, #5]
    d1b6:	79e8      	ldrb	r0, [r5, #7]
    d1b8:	71a0      	strb	r0, [r4, #6]
    d1ba:	e626      	b.n	ce0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x8a>
    d1bc:	7022      	strb	r2, [r4, #0]
    d1be:	2080      	movs	r0, #128	; 0x80
    d1c0:	70a0      	strb	r0, [r4, #2]
    d1c2:	88a9      	ldrh	r1, [r5, #4]
    d1c4:	f8a4 1003 	strh.w	r1, [r4, #3]
    d1c8:	88e9      	ldrh	r1, [r5, #6]
    d1ca:	f8a4 1005 	strh.w	r1, [r4, #5]
    d1ce:	7a29      	ldrb	r1, [r5, #8]
    d1d0:	71e1      	strb	r1, [r4, #7]
    d1d2:	8969      	ldrh	r1, [r5, #10]
    d1d4:	8121      	strh	r1, [r4, #8]
    d1d6:	89a9      	ldrh	r1, [r5, #12]
    d1d8:	8161      	strh	r1, [r4, #10]
    d1da:	89e9      	ldrh	r1, [r5, #14]
    d1dc:	81a1      	strh	r1, [r4, #12]
    d1de:	7c29      	ldrb	r1, [r5, #16]
    d1e0:	f001 0101 	and.w	r1, r1, #1
    d1e4:	73a1      	strb	r1, [r4, #14]
    d1e6:	200d      	movs	r0, #13
    d1e8:	e763      	b.n	d0b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>

0000d1ea <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d1ea:	223e      	movs	r2, #62	; 0x3e
    d1ec:	7002      	strb	r2, [r0, #0]
    d1ee:	2201      	movs	r2, #1
    d1f0:	7082      	strb	r2, [r0, #2]
    d1f2:	790a      	ldrb	r2, [r1, #4]
    d1f4:	70c2      	strb	r2, [r0, #3]
    d1f6:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d1fa:	7102      	strb	r2, [r0, #4]
    d1fc:	880a      	ldrh	r2, [r1, #0]
    d1fe:	0a12      	lsrs	r2, r2, #8
    d200:	7142      	strb	r2, [r0, #5]
    d202:	788a      	ldrb	r2, [r1, #2]
    d204:	7182      	strb	r2, [r0, #6]
    d206:	78ca      	ldrb	r2, [r1, #3]
    d208:	71c2      	strb	r2, [r0, #7]
    d20a:	684a      	ldr	r2, [r1, #4]
    d20c:	6082      	str	r2, [r0, #8]
    d20e:	890a      	ldrh	r2, [r1, #8]
    d210:	8182      	strh	r2, [r0, #12]
    d212:	7d8a      	ldrb	r2, [r1, #22]
    d214:	7382      	strb	r2, [r0, #14]
    d216:	8aca      	ldrh	r2, [r1, #22]
    d218:	0a12      	lsrs	r2, r2, #8
    d21a:	73c2      	strb	r2, [r0, #15]
    d21c:	7e0a      	ldrb	r2, [r1, #24]
    d21e:	7402      	strb	r2, [r0, #16]
    d220:	8b0a      	ldrh	r2, [r1, #24]
    d222:	0a12      	lsrs	r2, r2, #8
    d224:	7442      	strb	r2, [r0, #17]
    d226:	7e8a      	ldrb	r2, [r1, #26]
    d228:	7482      	strb	r2, [r0, #18]
    d22a:	8b4a      	ldrh	r2, [r1, #26]
    d22c:	0a12      	lsrs	r2, r2, #8
    d22e:	74c2      	strb	r2, [r0, #19]
    d230:	7f09      	ldrb	r1, [r1, #28]
    d232:	7501      	strb	r1, [r0, #20]
    d234:	2113      	movs	r1, #19
    d236:	7041      	strb	r1, [r0, #1]
    d238:	4608      	mov	r0, r1
    d23a:	4770      	bx	lr
    d23c:	223e      	movs	r2, #62	; 0x3e
    d23e:	7002      	strb	r2, [r0, #0]
    d240:	220a      	movs	r2, #10
    d242:	7082      	strb	r2, [r0, #2]
    d244:	790a      	ldrb	r2, [r1, #4]
    d246:	70c2      	strb	r2, [r0, #3]
    d248:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d24c:	7102      	strb	r2, [r0, #4]
    d24e:	880a      	ldrh	r2, [r1, #0]
    d250:	0a12      	lsrs	r2, r2, #8
    d252:	7142      	strb	r2, [r0, #5]
    d254:	788a      	ldrb	r2, [r1, #2]
    d256:	7182      	strb	r2, [r0, #6]
    d258:	78ca      	ldrb	r2, [r1, #3]
    d25a:	71c2      	strb	r2, [r0, #7]
    d25c:	684a      	ldr	r2, [r1, #4]
    d25e:	6082      	str	r2, [r0, #8]
    d260:	890a      	ldrh	r2, [r1, #8]
    d262:	8182      	strh	r2, [r0, #12]
    d264:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d268:	f8c0 200e 	str.w	r2, [r0, #14]
    d26c:	89ca      	ldrh	r2, [r1, #14]
    d26e:	8242      	strh	r2, [r0, #18]
    d270:	690a      	ldr	r2, [r1, #16]
    d272:	6142      	str	r2, [r0, #20]
    d274:	8a8a      	ldrh	r2, [r1, #20]
    d276:	8302      	strh	r2, [r0, #24]
    d278:	7d8a      	ldrb	r2, [r1, #22]
    d27a:	7682      	strb	r2, [r0, #26]
    d27c:	8aca      	ldrh	r2, [r1, #22]
    d27e:	0a12      	lsrs	r2, r2, #8
    d280:	76c2      	strb	r2, [r0, #27]
    d282:	7e0a      	ldrb	r2, [r1, #24]
    d284:	7702      	strb	r2, [r0, #28]
    d286:	8b0a      	ldrh	r2, [r1, #24]
    d288:	0a12      	lsrs	r2, r2, #8
    d28a:	7742      	strb	r2, [r0, #29]
    d28c:	7e8a      	ldrb	r2, [r1, #26]
    d28e:	7782      	strb	r2, [r0, #30]
    d290:	8b4a      	ldrh	r2, [r1, #26]
    d292:	0a12      	lsrs	r2, r2, #8
    d294:	77c2      	strb	r2, [r0, #31]
    d296:	7f09      	ldrb	r1, [r1, #28]
    d298:	f880 1020 	strb.w	r1, [r0, #32]
    d29c:	211f      	movs	r1, #31
    d29e:	7041      	strb	r1, [r0, #1]
    d2a0:	4608      	mov	r0, r1
    d2a2:	4770      	bx	lr
    d2a4:	094a      	lsrs	r2, r1, #5
    d2a6:	f001 011f 	and.w	r1, r1, #31
    d2aa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d2ae:	40c8      	lsrs	r0, r1
    d2b0:	f000 0001 	and.w	r0, r0, #1
    d2b4:	4770      	bx	lr

0000d2b6 <sdc_hci_data_put>:
    d2b6:	b510      	push	{r4, lr}
    d2b8:	f06f 0415 	mvn.w	r4, #21
    d2bc:	b120      	cbz	r0, d2c8 <sdc_hci_data_put+0x12>
    d2be:	f7ff fcd7 	bl	cc70 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d2c2:	b108      	cbz	r0, d2c8 <sdc_hci_data_put+0x12>
    d2c4:	2000      	movs	r0, #0
    d2c6:	bd10      	pop	{r4, pc}
    d2c8:	4620      	mov	r0, r4
    d2ca:	bd10      	pop	{r4, pc}

0000d2cc <sdc_hci_get>:
    d2cc:	b510      	push	{r4, lr}
    d2ce:	460c      	mov	r4, r1
    d2d0:	b130      	cbz	r0, d2e0 <sdc_hci_get+0x14>
    d2d2:	b12c      	cbz	r4, d2e0 <sdc_hci_get+0x14>
    d2d4:	f7f3 fc90 	bl	bf8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d2d8:	b128      	cbz	r0, d2e6 <sdc_hci_get+0x1a>
    d2da:	7020      	strb	r0, [r4, #0]
    d2dc:	2000      	movs	r0, #0
    d2de:	bd10      	pop	{r4, pc}
    d2e0:	f06f 0015 	mvn.w	r0, #21
    d2e4:	bd10      	pop	{r4, pc}
    d2e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d2ea:	bd10      	pop	{r4, pc}

0000d2ec <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d2ec:	f002 bd68 	b.w	fdc0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d2f0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d2f0:	f002 bd83 	b.w	fdfa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d2f4 <sdc_hci_cmd_cb_set_event_mask>:
    d2f4:	b510      	push	{r4, lr}
    d2f6:	f7f3 fd1f 	bl	d38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d2fa:	2000      	movs	r0, #0
    d2fc:	bd10      	pop	{r4, pc}

0000d2fe <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d2fe:	b510      	push	{r4, lr}
    d300:	f7f3 fd2a 	bl	d58 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d304:	2000      	movs	r0, #0
    d306:	bd10      	pop	{r4, pc}

0000d308 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d308:	f002 bd98 	b.w	fe3c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d30c <sdc_hci_cmd_vs_conn_event_extend>:
    d30c:	b508      	push	{r3, lr}
    d30e:	7800      	ldrb	r0, [r0, #0]
    d310:	f88d 0000 	strb.w	r0, [sp]
    d314:	4668      	mov	r0, sp
    d316:	f002 fd2f 	bl	fd78 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d31a:	bd08      	pop	{r3, pc}

0000d31c <sdc_hci_cmd_vs_conn_update>:
    d31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d31e:	2100      	movs	r1, #0
    d320:	9100      	str	r1, [sp, #0]
    d322:	9101      	str	r1, [sp, #4]
    d324:	9102      	str	r1, [sp, #8]
    d326:	9103      	str	r1, [sp, #12]
    d328:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d32c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d330:	4291      	cmp	r1, r2
    d332:	d304      	bcc.n	d33e <sdc_hci_cmd_vs_conn_update+0x22>
    d334:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d338:	fbb1 f1f2 	udiv	r1, r1, r2
    d33c:	e005      	b.n	d34a <sdc_hci_cmd_vs_conn_update+0x2e>
    d33e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d342:	fbb1 f1f2 	udiv	r1, r1, r2
    d346:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d34a:	8802      	ldrh	r2, [r0, #0]
    d34c:	b289      	uxth	r1, r1
    d34e:	f8ad 2000 	strh.w	r2, [sp]
    d352:	f8ad 1002 	strh.w	r1, [sp, #2]
    d356:	f8ad 1004 	strh.w	r1, [sp, #4]
    d35a:	88c1      	ldrh	r1, [r0, #6]
    d35c:	f8ad 1006 	strh.w	r1, [sp, #6]
    d360:	8900      	ldrh	r0, [r0, #8]
    d362:	f8ad 0008 	strh.w	r0, [sp, #8]
    d366:	4668      	mov	r0, sp
    d368:	f002 fa67 	bl	f83a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d36c:	b004      	add	sp, #16
    d36e:	bd10      	pop	{r4, pc}

0000d370 <sdc_hci_cmd_vs_event_length_set>:
    d370:	f7f9 bfa0 	b.w	72b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d374 <sdc_hci_cmd_vs_llpm_mode_set>:
    d374:	2001      	movs	r0, #1
    d376:	4770      	bx	lr

0000d378 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d378:	7800      	ldrb	r0, [r0, #0]
    d37a:	b100      	cbz	r0, d37e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d37c:	2001      	movs	r0, #1
    d37e:	f002 bc25 	b.w	fbcc <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d382 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d382:	b510      	push	{r4, lr}
    d384:	4604      	mov	r4, r0
    d386:	f7ff f967 	bl	c658 <mpsl_temperature_get>
    d38a:	17c1      	asrs	r1, r0, #31
    d38c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d390:	1080      	asrs	r0, r0, #2
    d392:	287f      	cmp	r0, #127	; 0x7f
    d394:	dd01      	ble.n	d39a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d396:	207f      	movs	r0, #127	; 0x7f
    d398:	e004      	b.n	d3a4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d39a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d39e:	4288      	cmp	r0, r1
    d3a0:	da00      	bge.n	d3a4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d3a2:	4608      	mov	r0, r1
    d3a4:	7020      	strb	r0, [r4, #0]
    d3a6:	2000      	movs	r0, #0
    d3a8:	bd10      	pop	{r4, pc}

0000d3aa <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d3aa:	f002 bcd4 	b.w	fd56 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d3ae <sdc_hci_cmd_ip_read_bd_addr>:
    d3ae:	f002 bd18 	b.w	fde2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d3b2 <sdc_hci_cmd_ip_read_local_version_information>:
    d3b2:	f7f9 bfd1 	b.w	7358 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d3b6 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d3b6:	f002 ba0f 	b.w	f7d8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d3ba <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d3ba:	f002 b9e3 	b.w	f784 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d3be <sdc_hci_cmd_le_clear_filter_accept_list>:
    d3be:	f002 ba2f 	b.w	f820 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d3c2 <sdc_hci_cmd_le_clear_resolving_list>:
    d3c2:	f002 ba20 	b.w	f806 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d3c6 <sdc_hci_cmd_le_conn_update>:
    d3c6:	f002 ba38 	b.w	f83a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d3ca <sdc_hci_cmd_le_create_conn>:
    d3ca:	f7f9 be59 	b.w	7080 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d3ce <sdc_hci_cmd_le_create_conn_cancel>:
    d3ce:	f002 ba77 	b.w	f8c0 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d3d2 <sdc_hci_cmd_le_enable_encryption>:
    d3d2:	f002 bbb8 	b.w	fb46 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d3d6 <sdc_hci_cmd_le_encrypt>:
    d3d6:	f002 ba83 	b.w	f8e0 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d3da <sdc_hci_cmd_le_rand>:
    d3da:	f002 ba8a 	b.w	f8f2 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d3de <sdc_hci_cmd_le_read_buffer_size>:
    d3de:	f7f9 beab 	b.w	7138 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d3e2 <sdc_hci_cmd_le_read_channel_map>:
    d3e2:	f7f9 beb3 	b.w	714c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d3e6 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d3e6:	f002 bac2 	b.w	f96e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d3ea <sdc_hci_cmd_le_read_max_data_length>:
    d3ea:	f002 ba88 	b.w	f8fe <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d3ee <sdc_hci_cmd_le_read_phy>:
    d3ee:	f7f9 bed5 	b.w	719c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d3f2 <sdc_hci_cmd_le_read_remote_features>:
    d3f2:	f002 ba8d 	b.w	f910 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d3f6 <sdc_hci_cmd_le_read_resolving_list_size>:
    d3f6:	f002 baa6 	b.w	f946 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d3fa <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d3fa:	f7f9 bef5 	b.w	71e8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d3fe <sdc_hci_cmd_le_read_transmit_power>:
    d3fe:	f002 baa6 	b.w	f94e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d402 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d402:	f002 bad4 	b.w	f9ae <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d406 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d406:	f002 bab9 	b.w	f97c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d40a <sdc_hci_cmd_le_set_address_resolution_enable>:
    d40a:	f002 bae5 	b.w	f9d8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d40e <sdc_hci_cmd_le_set_data_length>:
    d40e:	f002 baf1 	b.w	f9f4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d412 <sdc_hci_cmd_le_set_default_phy>:
    d412:	f7f9 bef3 	b.w	71fc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d416 <sdc_hci_cmd_le_set_event_mask>:
    d416:	b510      	push	{r4, lr}
    d418:	f7f3 fc86 	bl	d28 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d41c:	2000      	movs	r0, #0
    d41e:	bd10      	pop	{r4, pc}

0000d420 <sdc_hci_cmd_le_set_host_channel_classification>:
    d420:	f7f9 bf14 	b.w	724c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d424 <sdc_hci_cmd_le_set_phy>:
    d424:	f002 bb06 	b.w	fa34 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d428 <sdc_hci_cmd_le_set_privacy_mode>:
    d428:	f002 bb1d 	b.w	fa66 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d42c <sdc_hci_cmd_le_set_random_address>:
    d42c:	f002 bb31 	b.w	fa92 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d430 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d430:	f002 bb3d 	b.w	faae <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d434 <sdc_hci_cmd_le_set_scan_enable>:
    d434:	f002 bb44 	b.w	fac0 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d438 <sdc_hci_cmd_le_set_scan_params>:
    d438:	f002 bb58 	b.w	faec <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d43c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d43c:	f002 bbb5 	b.w	fbaa <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d440 <sdc_hci_cmd_lc_disconnect>:
    d440:	f002 b955 	b.w	f6ee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d444 <sdc_hci_cmd_lc_read_remote_version_information>:
    d444:	f7f9 bf92 	b.w	736c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d448:	b570      	push	{r4, r5, r6, lr}
    d44a:	880b      	ldrh	r3, [r1, #0]
    d44c:	7cc4      	ldrb	r4, [r0, #19]
    d44e:	f100 0518 	add.w	r5, r0, #24
    d452:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d456:	8802      	ldrh	r2, [r0, #0]
    d458:	4435      	add	r5, r6
    d45a:	1d64      	adds	r4, r4, #5
    d45c:	882d      	ldrh	r5, [r5, #0]
    d45e:	4422      	add	r2, r4
    d460:	b292      	uxth	r2, r2
    d462:	4425      	add	r5, r4
    d464:	1e54      	subs	r4, r2, #1
    d466:	442c      	add	r4, r5
    d468:	fb94 f4f2 	sdiv	r4, r4, r2
    d46c:	fb02 6204 	mla	r2, r2, r4, r6
    d470:	8840      	ldrh	r0, [r0, #2]
    d472:	b292      	uxth	r2, r2
    d474:	4290      	cmp	r0, r2
    d476:	d903      	bls.n	d480 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d478:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d47c:	4310      	orrs	r0, r2
    d47e:	e002      	b.n	d486 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d480:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d484:	4398      	bics	r0, r3
    d486:	8008      	strh	r0, [r1, #0]
    d488:	bd70      	pop	{r4, r5, r6, pc}
    d48a:	0442      	lsls	r2, r0, #17
    d48c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d490:	d107      	bne.n	d4a2 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d492:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d496:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d49a:	4288      	cmp	r0, r1
    d49c:	d001      	beq.n	d4a2 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d49e:	2001      	movs	r0, #1
    d4a0:	4770      	bx	lr
    d4a2:	2000      	movs	r0, #0
    d4a4:	4770      	bx	lr

0000d4a6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d4a6:	8881      	ldrh	r1, [r0, #4]
    d4a8:	88c0      	ldrh	r0, [r0, #6]
    d4aa:	4288      	cmp	r0, r1
    d4ac:	d101      	bne.n	d4b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d4ae:	2001      	movs	r0, #1
    d4b0:	4770      	bx	lr
    d4b2:	2000      	movs	r0, #0
    d4b4:	4770      	bx	lr

0000d4b6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4ba:	460f      	mov	r7, r1
    d4bc:	4604      	mov	r4, r0
    d4be:	f100 0118 	add.w	r1, r0, #24
    d4c2:	8880      	ldrh	r0, [r0, #4]
    d4c4:	2600      	movs	r6, #0
    d4c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d4ca:	1845      	adds	r5, r0, r1
    d4cc:	603e      	str	r6, [r7, #0]
    d4ce:	89e0      	ldrh	r0, [r4, #14]
    d4d0:	2800      	cmp	r0, #0
    d4d2:	d016      	beq.n	d502 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d4d4:	8961      	ldrh	r1, [r4, #10]
    d4d6:	4408      	add	r0, r1
    d4d8:	b280      	uxth	r0, r0
    d4da:	8160      	strh	r0, [r4, #10]
    d4dc:	8829      	ldrh	r1, [r5, #0]
    d4de:	4288      	cmp	r0, r1
    d4e0:	d905      	bls.n	d4ee <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d4e2:	f240 1151 	movw	r1, #337	; 0x151
    d4e6:	f04f 0014 	mov.w	r0, #20
    d4ea:	f7f3 fa97 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4ee:	d106      	bne.n	d4fe <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d4f0:	f104 0104 	add.w	r1, r4, #4
    d4f4:	4620      	mov	r0, r4
    d4f6:	f7ff ffa7 	bl	d448 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4fa:	8166      	strh	r6, [r4, #10]
    d4fc:	603d      	str	r5, [r7, #0]
    d4fe:	81e6      	strh	r6, [r4, #14]
    d500:	2001      	movs	r0, #1
    d502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d506 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d50a:	4604      	mov	r4, r0
    d50c:	f100 0318 	add.w	r3, r0, #24
    d510:	88c0      	ldrh	r0, [r0, #6]
    d512:	460e      	mov	r6, r1
    d514:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d518:	8a20      	ldrh	r0, [r4, #16]
    d51a:	19d9      	adds	r1, r3, r7
    d51c:	b108      	cbz	r0, d522 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d51e:	42b0      	cmp	r0, r6
    d520:	d202      	bcs.n	d528 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d522:	2000      	movs	r0, #0
    d524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d528:	89a0      	ldrh	r0, [r4, #12]
    d52a:	2500      	movs	r5, #0
    d52c:	b140      	cbz	r0, d540 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d52e:	f8b1 c000 	ldrh.w	ip, [r1]
    d532:	4560      	cmp	r0, ip
    d534:	d006      	beq.n	d544 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d536:	f44f 7101 	mov.w	r1, #516	; 0x204
    d53a:	2014      	movs	r0, #20
    d53c:	f7f3 fa6e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d540:	800d      	strh	r5, [r1, #0]
    d542:	e00e      	b.n	d562 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d544:	f894 c013 	ldrb.w	ip, [r4, #19]
    d548:	4418      	add	r0, r3
    d54a:	f10c 0c05 	add.w	ip, ip, #5
    d54e:	44bc      	add	ip, r7
    d550:	4460      	add	r0, ip
    d552:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d556:	f820 cc03 	strh.w	ip, [r0, #-3]
    d55a:	f894 c016 	ldrb.w	ip, [r4, #22]
    d55e:	f800 cc01 	strb.w	ip, [r0, #-1]
    d562:	89a0      	ldrh	r0, [r4, #12]
    d564:	4430      	add	r0, r6
    d566:	81a0      	strh	r0, [r4, #12]
    d568:	8808      	ldrh	r0, [r1, #0]
    d56a:	4430      	add	r0, r6
    d56c:	8008      	strh	r0, [r1, #0]
    d56e:	b12a      	cbz	r2, d57c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d570:	1da1      	adds	r1, r4, #6
    d572:	4620      	mov	r0, r4
    d574:	f7ff ff68 	bl	d448 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d578:	81a5      	strh	r5, [r4, #12]
    d57a:	e00a      	b.n	d592 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d57c:	7ce0      	ldrb	r0, [r4, #19]
    d57e:	89a1      	ldrh	r1, [r4, #12]
    d580:	1d40      	adds	r0, r0, #5
    d582:	4438      	add	r0, r7
    d584:	4419      	add	r1, r3
    d586:	4408      	add	r0, r1
    d588:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d58c:	82a1      	strh	r1, [r4, #20]
    d58e:	7880      	ldrb	r0, [r0, #2]
    d590:	75a0      	strb	r0, [r4, #22]
    d592:	8225      	strh	r5, [r4, #16]
    d594:	2001      	movs	r0, #1
    d596:	e7c5      	b.n	d524 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d598 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d598:	1c80      	adds	r0, r0, #2
    d59a:	4770      	bx	lr

0000d59c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d59c:	b510      	push	{r4, lr}
    d59e:	88c2      	ldrh	r2, [r0, #6]
    d5a0:	8903      	ldrh	r3, [r0, #8]
    d5a2:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d5a6:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d5aa:	1a61      	subs	r1, r4, r1
    d5ac:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d5b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d5b4:	429a      	cmp	r2, r3
    d5b6:	d101      	bne.n	d5bc <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d5b8:	8842      	ldrh	r2, [r0, #2]
    d5ba:	4411      	add	r1, r2
    d5bc:	7cc2      	ldrb	r2, [r0, #19]
    d5be:	8800      	ldrh	r0, [r0, #0]
    d5c0:	4410      	add	r0, r2
    d5c2:	1d40      	adds	r0, r0, #5
    d5c4:	b280      	uxth	r0, r0
    d5c6:	fb91 f0f0 	sdiv	r0, r1, r0
    d5ca:	b280      	uxth	r0, r0
    d5cc:	bd10      	pop	{r4, pc}

0000d5ce <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d5ce:	b510      	push	{r4, lr}
    d5d0:	4604      	mov	r4, r0
    d5d2:	88c0      	ldrh	r0, [r0, #6]
    d5d4:	88a1      	ldrh	r1, [r4, #4]
    d5d6:	4281      	cmp	r1, r0
    d5d8:	d003      	beq.n	d5e2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d5da:	8960      	ldrh	r0, [r4, #10]
    d5dc:	b908      	cbnz	r0, d5e2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d5de:	89e0      	ldrh	r0, [r4, #14]
    d5e0:	b108      	cbz	r0, d5e6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d5e2:	2000      	movs	r0, #0
    d5e4:	bd10      	pop	{r4, pc}
    d5e6:	1d21      	adds	r1, r4, #4
    d5e8:	4620      	mov	r0, r4
    d5ea:	f7ff ff2d 	bl	d448 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5ee:	2000      	movs	r0, #0
    d5f0:	81e0      	strh	r0, [r4, #14]
    d5f2:	2001      	movs	r0, #1
    d5f4:	bd10      	pop	{r4, pc}

0000d5f6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d5f6:	b510      	push	{r4, lr}
    d5f8:	4604      	mov	r4, r0
    d5fa:	f100 0218 	add.w	r2, r0, #24
    d5fe:	88c0      	ldrh	r0, [r0, #6]
    d600:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d604:	4402      	add	r2, r0
    d606:	8820      	ldrh	r0, [r4, #0]
    d608:	2845      	cmp	r0, #69	; 0x45
    d60a:	d200      	bcs.n	d60e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d60c:	2045      	movs	r0, #69	; 0x45
    d60e:	4288      	cmp	r0, r1
    d610:	d204      	bcs.n	d61c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d612:	f44f 7182 	mov.w	r1, #260	; 0x104
    d616:	2014      	movs	r0, #20
    d618:	f7f3 fa00 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d61c:	7ca0      	ldrb	r0, [r4, #18]
    d61e:	2800      	cmp	r0, #0
    d620:	d003      	beq.n	d62a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d622:	8810      	ldrh	r0, [r2, #0]
    d624:	4288      	cmp	r0, r1
    d626:	d201      	bcs.n	d62c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d628:	2000      	movs	r0, #0
    d62a:	bd10      	pop	{r4, pc}
    d62c:	8011      	strh	r1, [r2, #0]
    d62e:	1da1      	adds	r1, r4, #6
    d630:	4620      	mov	r0, r4
    d632:	f7ff ff09 	bl	d448 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d636:	2000      	movs	r0, #0
    d638:	74a0      	strb	r0, [r4, #18]
    d63a:	2001      	movs	r0, #1
    d63c:	bd10      	pop	{r4, pc}

0000d63e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d63e:	b510      	push	{r4, lr}
    d640:	88c4      	ldrh	r4, [r0, #6]
    d642:	8883      	ldrh	r3, [r0, #4]
    d644:	4601      	mov	r1, r0
    d646:	f100 0218 	add.w	r2, r0, #24
    d64a:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d64e:	4410      	add	r0, r2
    d650:	42a3      	cmp	r3, r4
    d652:	d002      	beq.n	d65a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d654:	8949      	ldrh	r1, [r1, #10]
    d656:	2900      	cmp	r1, #0
    d658:	d000      	beq.n	d65c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d65a:	2000      	movs	r0, #0
    d65c:	bd10      	pop	{r4, pc}

0000d65e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d65e:	8803      	ldrh	r3, [r0, #0]
    d660:	2b45      	cmp	r3, #69	; 0x45
    d662:	d200      	bcs.n	d666 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d664:	2345      	movs	r3, #69	; 0x45
    d666:	8013      	strh	r3, [r2, #0]
    d668:	88c2      	ldrh	r2, [r0, #6]
    d66a:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d66e:	f100 0218 	add.w	r2, r0, #24
    d672:	441a      	add	r2, r3
    d674:	600a      	str	r2, [r1, #0]
    d676:	8980      	ldrh	r0, [r0, #12]
    d678:	4770      	bx	lr

0000d67a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d67a:	7cc0      	ldrb	r0, [r0, #19]
    d67c:	1d40      	adds	r0, r0, #5
    d67e:	4408      	add	r0, r1
    d680:	1ec0      	subs	r0, r0, #3
    d682:	6010      	str	r0, [r2, #0]
    d684:	8808      	ldrh	r0, [r1, #0]
    d686:	4770      	bx	lr

0000d688 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d68c:	460e      	mov	r6, r1
    d68e:	88c1      	ldrh	r1, [r0, #6]
    d690:	8902      	ldrh	r2, [r0, #8]
    d692:	4604      	mov	r4, r0
    d694:	f100 0818 	add.w	r8, r0, #24
    d698:	8800      	ldrh	r0, [r0, #0]
    d69a:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d69e:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d6a2:	2845      	cmp	r0, #69	; 0x45
    d6a4:	d200      	bcs.n	d6a8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d6a6:	2045      	movs	r0, #69	; 0x45
    d6a8:	42b0      	cmp	r0, r6
    d6aa:	d203      	bcs.n	d6b4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d6ac:	21c6      	movs	r1, #198	; 0xc6
    d6ae:	2014      	movs	r0, #20
    d6b0:	f7f3 f9b4 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6b4:	4610      	mov	r0, r2
    d6b6:	f7ff fee8 	bl	d48a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d6ba:	b110      	cbz	r0, d6c2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d6bc:	2000      	movs	r0, #0
    d6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6c2:	42af      	cmp	r7, r5
    d6c4:	d908      	bls.n	d6d8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d6c6:	7ce1      	ldrb	r1, [r4, #19]
    d6c8:	1b78      	subs	r0, r7, r5
    d6ca:	1a40      	subs	r0, r0, r1
    d6cc:	1f40      	subs	r0, r0, #5
    d6ce:	4286      	cmp	r6, r0
    d6d0:	dd02      	ble.n	d6d8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d6d2:	2000      	movs	r0, #0
    d6d4:	74a0      	strb	r0, [r4, #18]
    d6d6:	e7f1      	b.n	d6bc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d6d8:	eb08 0005 	add.w	r0, r8, r5
    d6dc:	2101      	movs	r1, #1
    d6de:	8006      	strh	r6, [r0, #0]
    d6e0:	74a1      	strb	r1, [r4, #18]
    d6e2:	e7ec      	b.n	d6be <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d6e4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d6e4:	b538      	push	{r3, r4, r5, lr}
    d6e6:	88c4      	ldrh	r4, [r0, #6]
    d6e8:	8881      	ldrh	r1, [r0, #4]
    d6ea:	f100 0218 	add.w	r2, r0, #24
    d6ee:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d6f2:	441a      	add	r2, r3
    d6f4:	42a1      	cmp	r1, r4
    d6f6:	d010      	beq.n	d71a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d6f8:	8943      	ldrh	r3, [r0, #10]
    d6fa:	89c5      	ldrh	r5, [r0, #14]
    d6fc:	8812      	ldrh	r2, [r2, #0]
    d6fe:	442b      	add	r3, r5
    d700:	4293      	cmp	r3, r2
    d702:	d308      	bcc.n	d716 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d704:	f8ad 1000 	strh.w	r1, [sp]
    d708:	4669      	mov	r1, sp
    d70a:	f7ff fe9d 	bl	d448 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d70e:	f8bd 0000 	ldrh.w	r0, [sp]
    d712:	42a0      	cmp	r0, r4
    d714:	d001      	beq.n	d71a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d716:	2001      	movs	r0, #1
    d718:	bd38      	pop	{r3, r4, r5, pc}
    d71a:	2000      	movs	r0, #0
    d71c:	bd38      	pop	{r3, r4, r5, pc}

0000d71e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d71e:	b570      	push	{r4, r5, r6, lr}
    d720:	88c6      	ldrh	r6, [r0, #6]
    d722:	8885      	ldrh	r5, [r0, #4]
    d724:	4603      	mov	r3, r0
    d726:	f100 0418 	add.w	r4, r0, #24
    d72a:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d72e:	4420      	add	r0, r4
    d730:	42b5      	cmp	r5, r6
    d732:	d102      	bne.n	d73a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d734:	2000      	movs	r0, #0
    d736:	81d8      	strh	r0, [r3, #14]
    d738:	bd70      	pop	{r4, r5, r6, pc}
    d73a:	8804      	ldrh	r4, [r0, #0]
    d73c:	895d      	ldrh	r5, [r3, #10]
    d73e:	7cde      	ldrb	r6, [r3, #19]
    d740:	1b64      	subs	r4, r4, r5
    d742:	4435      	add	r5, r6
    d744:	4428      	add	r0, r5
    d746:	880d      	ldrh	r5, [r1, #0]
    d748:	b2a4      	uxth	r4, r4
    d74a:	1c80      	adds	r0, r0, #2
    d74c:	42a5      	cmp	r5, r4
    d74e:	d900      	bls.n	d752 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d750:	800c      	strh	r4, [r1, #0]
    d752:	895c      	ldrh	r4, [r3, #10]
    d754:	b124      	cbz	r4, d760 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d756:	2400      	movs	r4, #0
    d758:	7014      	strb	r4, [r2, #0]
    d75a:	8809      	ldrh	r1, [r1, #0]
    d75c:	81d9      	strh	r1, [r3, #14]
    d75e:	bd70      	pop	{r4, r5, r6, pc}
    d760:	2401      	movs	r4, #1
    d762:	e7f9      	b.n	d758 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d764 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d768:	461d      	mov	r5, r3
    d76a:	4616      	mov	r6, r2
    d76c:	9f06      	ldr	r7, [sp, #24]
    d76e:	460b      	mov	r3, r1
    d770:	4604      	mov	r4, r0
    d772:	463a      	mov	r2, r7
    d774:	4629      	mov	r1, r5
    d776:	4630      	mov	r0, r6
    d778:	f000 f839 	bl	d7ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d77c:	4283      	cmp	r3, r0
    d77e:	d201      	bcs.n	d784 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d780:	219e      	movs	r1, #158	; 0x9e
    d782:	e012      	b.n	d7aa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d784:	07a0      	lsls	r0, r4, #30
    d786:	d001      	beq.n	d78c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d788:	219f      	movs	r1, #159	; 0x9f
    d78a:	e00e      	b.n	d7aa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d78c:	2218      	movs	r2, #24
    d78e:	2100      	movs	r1, #0
    d790:	4620      	mov	r0, r4
    d792:	f003 f993 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d796:	19a8      	adds	r0, r5, r6
    d798:	1d40      	adds	r0, r0, #5
    d79a:	4378      	muls	r0, r7
    d79c:	b280      	uxth	r0, r0
    d79e:	74e5      	strb	r5, [r4, #19]
    d7a0:	8060      	strh	r0, [r4, #2]
    d7a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d7a6:	d903      	bls.n	d7b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d7a8:	21a4      	movs	r1, #164	; 0xa4
    d7aa:	2014      	movs	r0, #20
    d7ac:	f7f3 f936 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7b0:	8026      	strh	r6, [r4, #0]
    d7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d7b6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d7b6:	b570      	push	{r4, r5, r6, lr}
    d7b8:	460b      	mov	r3, r1
    d7ba:	4604      	mov	r4, r0
    d7bc:	f100 0118 	add.w	r1, r0, #24
    d7c0:	8902      	ldrh	r2, [r0, #8]
    d7c2:	8880      	ldrh	r0, [r0, #4]
    d7c4:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d7c8:	440d      	add	r5, r1
    d7ca:	4282      	cmp	r2, r0
    d7cc:	d101      	bne.n	d7d2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d7ce:	2000      	movs	r0, #0
    d7d0:	bd70      	pop	{r4, r5, r6, pc}
    d7d2:	b123      	cbz	r3, d7de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d7d4:	7ce2      	ldrb	r2, [r4, #19]
    d7d6:	1ca9      	adds	r1, r5, #2
    d7d8:	4618      	mov	r0, r3
    d7da:	f003 f8f5 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7de:	882d      	ldrh	r5, [r5, #0]
    d7e0:	f104 0108 	add.w	r1, r4, #8
    d7e4:	4620      	mov	r0, r4
    d7e6:	f7ff fe2f 	bl	d448 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d7ea:	4628      	mov	r0, r5
    d7ec:	bd70      	pop	{r4, r5, r6, pc}

0000d7ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d7ee:	4401      	add	r1, r0
    d7f0:	1d49      	adds	r1, r1, #5
    d7f2:	4351      	muls	r1, r2
    d7f4:	b28a      	uxth	r2, r1
    d7f6:	2100      	movs	r1, #0
    d7f8:	2845      	cmp	r0, #69	; 0x45
    d7fa:	d202      	bcs.n	d802 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d7fc:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d800:	b281      	uxth	r1, r0
    d802:	3218      	adds	r2, #24
    d804:	1850      	adds	r0, r2, r1
    d806:	b280      	uxth	r0, r0
    d808:	4770      	bx	lr

0000d80a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d80a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d80e:	4688      	mov	r8, r1
    d810:	88c1      	ldrh	r1, [r0, #6]
    d812:	4604      	mov	r4, r0
    d814:	8900      	ldrh	r0, [r0, #8]
    d816:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d81a:	f104 0518 	add.w	r5, r4, #24
    d81e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d822:	eb05 0906 	add.w	r9, r5, r6
    d826:	f7ff fe30 	bl	d48a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d82a:	2200      	movs	r2, #0
    d82c:	b998      	cbnz	r0, d856 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d82e:	8820      	ldrh	r0, [r4, #0]
    d830:	2845      	cmp	r0, #69	; 0x45
    d832:	d200      	bcs.n	d836 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d834:	2045      	movs	r0, #69	; 0x45
    d836:	42b7      	cmp	r7, r6
    d838:	d906      	bls.n	d848 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d83a:	7ce3      	ldrb	r3, [r4, #19]
    d83c:	1bb9      	subs	r1, r7, r6
    d83e:	1ac9      	subs	r1, r1, r3
    d840:	1f49      	subs	r1, r1, #5
    d842:	4281      	cmp	r1, r0
    d844:	da00      	bge.n	d848 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d846:	4608      	mov	r0, r1
    d848:	89a1      	ldrh	r1, [r4, #12]
    d84a:	b111      	cbz	r1, d852 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d84c:	f8b9 3000 	ldrh.w	r3, [r9]
    d850:	1ac0      	subs	r0, r0, r3
    d852:	4540      	cmp	r0, r8
    d854:	da03      	bge.n	d85e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d856:	8222      	strh	r2, [r4, #16]
    d858:	2000      	movs	r0, #0
    d85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d85e:	7ce0      	ldrb	r0, [r4, #19]
    d860:	4429      	add	r1, r5
    d862:	1d40      	adds	r0, r0, #5
    d864:	4430      	add	r0, r6
    d866:	4408      	add	r0, r1
    d868:	f8a4 8010 	strh.w	r8, [r4, #16]
    d86c:	1ec0      	subs	r0, r0, #3
    d86e:	e7f4      	b.n	d85a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d870 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d870:	b570      	push	{r4, r5, r6, lr}
    d872:	2300      	movs	r3, #0
    d874:	f1a1 0208 	sub.w	r2, r1, #8
    d878:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d87c:	42a2      	cmp	r2, r4
    d87e:	d304      	bcc.n	d88a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d880:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d884:	2015      	movs	r0, #21
    d886:	f7f3 f8c9 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d88a:	6802      	ldr	r2, [r0, #0]
    d88c:	b90a      	cbnz	r2, d892 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d88e:	e01e      	b.n	d8ce <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d890:	4610      	mov	r0, r2
    d892:	6802      	ldr	r2, [r0, #0]
    d894:	8893      	ldrh	r3, [r2, #4]
    d896:	428b      	cmp	r3, r1
    d898:	d002      	beq.n	d8a0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d89a:	6813      	ldr	r3, [r2, #0]
    d89c:	2b00      	cmp	r3, #0
    d89e:	d1f7      	bne.n	d890 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d8a0:	8894      	ldrh	r4, [r2, #4]
    d8a2:	4613      	mov	r3, r2
    d8a4:	428c      	cmp	r4, r1
    d8a6:	d101      	bne.n	d8ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d8a8:	6811      	ldr	r1, [r2, #0]
    d8aa:	e00d      	b.n	d8c8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d8ac:	f101 0508 	add.w	r5, r1, #8
    d8b0:	b2ae      	uxth	r6, r5
    d8b2:	2500      	movs	r5, #0
    d8b4:	42b4      	cmp	r4, r6
    d8b6:	d309      	bcc.n	d8cc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d8b8:	1a64      	subs	r4, r4, r1
    d8ba:	4411      	add	r1, r2
    d8bc:	600d      	str	r5, [r1, #0]
    d8be:	808c      	strh	r4, [r1, #4]
    d8c0:	6802      	ldr	r2, [r0, #0]
    d8c2:	6812      	ldr	r2, [r2, #0]
    d8c4:	6002      	str	r2, [r0, #0]
    d8c6:	600a      	str	r2, [r1, #0]
    d8c8:	6001      	str	r1, [r0, #0]
    d8ca:	e000      	b.n	d8ce <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d8cc:	2300      	movs	r3, #0
    d8ce:	4618      	mov	r0, r3
    d8d0:	bd70      	pop	{r4, r5, r6, pc}

0000d8d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d8d2:	b510      	push	{r4, lr}
    d8d4:	000c      	movs	r4, r1
    d8d6:	d004      	beq.n	d8e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d8d8:	2c08      	cmp	r4, #8
    d8da:	d207      	bcs.n	d8ec <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d8dc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d8e0:	e00a      	b.n	d8f8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d8e2:	b108      	cbz	r0, d8e8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d8e4:	2100      	movs	r1, #0
    d8e6:	6001      	str	r1, [r0, #0]
    d8e8:	2000      	movs	r0, #0
    d8ea:	bd10      	pop	{r4, pc}
    d8ec:	b158      	cbz	r0, d906 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d8ee:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d8f2:	d304      	bcc.n	d8fe <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d8f4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d8f8:	2015      	movs	r0, #21
    d8fa:	f7f3 f88f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8fe:	b2a1      	uxth	r1, r4
    d900:	6800      	ldr	r0, [r0, #0]
    d902:	f000 f814 	bl	d92e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d906:	1d20      	adds	r0, r4, #4
    d908:	bd10      	pop	{r4, pc}

0000d90a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d90a:	2100      	movs	r1, #0
    d90c:	6802      	ldr	r2, [r0, #0]
    d90e:	e003      	b.n	d918 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d910:	8893      	ldrh	r3, [r2, #4]
    d912:	6812      	ldr	r2, [r2, #0]
    d914:	4419      	add	r1, r3
    d916:	b289      	uxth	r1, r1
    d918:	2a00      	cmp	r2, #0
    d91a:	d1f9      	bne.n	d910 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d91c:	f000 b807 	b.w	d92e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d920 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d920:	2300      	movs	r3, #0
    d922:	600b      	str	r3, [r1, #0]
    d924:	808a      	strh	r2, [r1, #4]
    d926:	6802      	ldr	r2, [r0, #0]
    d928:	600a      	str	r2, [r1, #0]
    d92a:	6001      	str	r1, [r0, #0]
    d92c:	4770      	bx	lr
    d92e:	2300      	movs	r3, #0
    d930:	6043      	str	r3, [r0, #4]
    d932:	1d02      	adds	r2, r0, #4
    d934:	8101      	strh	r1, [r0, #8]
    d936:	6002      	str	r2, [r0, #0]
    d938:	4770      	bx	lr
    d93a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d93e:	8159      	strh	r1, [r3, #10]
    d940:	4611      	mov	r1, r2
    d942:	f000 b814 	b.w	d96e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d946:	b170      	cbz	r0, d966 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d948:	7882      	ldrb	r2, [r0, #2]
    d94a:	fbb1 f3f2 	udiv	r3, r1, r2
    d94e:	fb02 1213 	mls	r2, r2, r3, r1
    d952:	b2d2      	uxtb	r2, r2
    d954:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d958:	895b      	ldrh	r3, [r3, #10]
    d95a:	428b      	cmp	r3, r1
    d95c:	d101      	bne.n	d962 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d95e:	4610      	mov	r0, r2
    d960:	4770      	bx	lr
    d962:	78c3      	ldrb	r3, [r0, #3]
    d964:	b10b      	cbz	r3, d96a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d966:	20ff      	movs	r0, #255	; 0xff
    d968:	4770      	bx	lr
    d96a:	f7f3 bb25 	b.w	fb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d96e:	8802      	ldrh	r2, [r0, #0]
    d970:	fb01 0102 	mla	r1, r1, r2, r0
    d974:	7880      	ldrb	r0, [r0, #2]
    d976:	220a      	movs	r2, #10
    d978:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d97c:	4408      	add	r0, r1
    d97e:	4770      	bx	lr

0000d980 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d980:	b51c      	push	{r2, r3, r4, lr}
    d982:	4604      	mov	r4, r0
    d984:	2000      	movs	r0, #0
    d986:	9001      	str	r0, [sp, #4]
    d988:	9000      	str	r0, [sp, #0]
    d98a:	f88d 4006 	strb.w	r4, [sp, #6]
    d98e:	e00a      	b.n	d9a6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d990:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d994:	4621      	mov	r1, r4
    d996:	f7f3 fbb9 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d99a:	b120      	cbz	r0, d9a6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d99c:	f240 217e 	movw	r1, #638	; 0x27e
    d9a0:	2017      	movs	r0, #23
    d9a2:	f7f3 f83b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9a6:	4668      	mov	r0, sp
    d9a8:	f7f3 fb60 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d9ac:	2800      	cmp	r0, #0
    d9ae:	d0ef      	beq.n	d990 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d9b0:	bd1c      	pop	{r2, r3, r4, pc}

0000d9b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d9b2:	b570      	push	{r4, r5, r6, lr}
    d9b4:	460e      	mov	r6, r1
    d9b6:	461d      	mov	r5, r3
    d9b8:	4611      	mov	r1, r2
    d9ba:	f000 f813 	bl	d9e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d9be:	4604      	mov	r4, r0
    d9c0:	4629      	mov	r1, r5
    d9c2:	4630      	mov	r0, r6
    d9c4:	f000 f804 	bl	d9d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d9c8:	4420      	add	r0, r4
    d9ca:	1d00      	adds	r0, r0, #4
    d9cc:	b280      	uxth	r0, r0
    d9ce:	bd70      	pop	{r4, r5, r6, pc}
    d9d0:	b510      	push	{r4, lr}
    d9d2:	460a      	mov	r2, r1
    d9d4:	2109      	movs	r1, #9
    d9d6:	f7ff ff0a 	bl	d7ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9da:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d9de:	1cc0      	adds	r0, r0, #3
    d9e0:	4008      	ands	r0, r1
    d9e2:	bd10      	pop	{r4, pc}
    d9e4:	b510      	push	{r4, lr}
    d9e6:	460a      	mov	r2, r1
    d9e8:	210a      	movs	r1, #10
    d9ea:	f7ff ff00 	bl	d7ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9ee:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d9f2:	1cc0      	adds	r0, r0, #3
    d9f4:	4008      	ands	r0, r1
    d9f6:	bd10      	pop	{r4, pc}
    d9f8:	2800      	cmp	r0, #0
    d9fa:	db09      	blt.n	da10 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    d9fc:	f000 021f 	and.w	r2, r0, #31
    da00:	2101      	movs	r1, #1
    da02:	4091      	lsls	r1, r2
    da04:	0940      	lsrs	r0, r0, #5
    da06:	0080      	lsls	r0, r0, #2
    da08:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da0c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    da10:	4770      	bx	lr
    da12:	2800      	cmp	r0, #0
    da14:	db0d      	blt.n	da32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    da16:	f000 021f 	and.w	r2, r0, #31
    da1a:	2101      	movs	r1, #1
    da1c:	4091      	lsls	r1, r2
    da1e:	0940      	lsrs	r0, r0, #5
    da20:	0080      	lsls	r0, r0, #2
    da22:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da26:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    da2a:	f3bf 8f4f 	dsb	sy
    da2e:	f3bf 8f6f 	isb	sy
    da32:	4770      	bx	lr
    da34:	b510      	push	{r4, lr}
    da36:	200e      	movs	r0, #14
    da38:	f7ff ffeb 	bl	da12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    da3c:	200e      	movs	r0, #14
    da3e:	f7ff ffdb 	bl	d9f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    da42:	200f      	movs	r0, #15
    da44:	f7ff ffe5 	bl	da12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    da48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da4c:	200f      	movs	r0, #15
    da4e:	f7ff bfd3 	b.w	d9f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    da52:	2800      	cmp	r0, #0
    da54:	db09      	blt.n	da6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    da56:	f000 021f 	and.w	r2, r0, #31
    da5a:	2101      	movs	r1, #1
    da5c:	4091      	lsls	r1, r2
    da5e:	0940      	lsrs	r0, r0, #5
    da60:	0080      	lsls	r0, r0, #2
    da62:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da66:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    da6a:	4770      	bx	lr
    da6c:	5840      	ldr	r0, [r0, r1]
    da6e:	2800      	cmp	r0, #0
    da70:	d000      	beq.n	da74 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    da72:	2001      	movs	r0, #1
    da74:	4770      	bx	lr

0000da76 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    da76:	b510      	push	{r4, lr}
    da78:	4604      	mov	r4, r0
    da7a:	4620      	mov	r0, r4
    da7c:	f7f3 fcda 	bl	1434 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    da80:	2811      	cmp	r0, #17
    da82:	d0fa      	beq.n	da7a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    da84:	bd10      	pop	{r4, pc}

0000da86 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    da86:	b510      	push	{r4, lr}
    da88:	f7ff fff5 	bl	da76 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    da8c:	2800      	cmp	r0, #0
    da8e:	d003      	beq.n	da98 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    da90:	21a9      	movs	r1, #169	; 0xa9
    da92:	201d      	movs	r0, #29
    da94:	f7f2 ffc2 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da98:	bd10      	pop	{r4, pc}

0000da9a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    da9a:	f7f3 be29 	b.w	16f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000da9e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    da9e:	f7f3 be17 	b.w	16d0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000daa2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    daa2:	b510      	push	{r4, lr}
    daa4:	4050      	eors	r0, r2
    daa6:	780a      	ldrb	r2, [r1, #0]
    daa8:	781c      	ldrb	r4, [r3, #0]
    daaa:	4062      	eors	r2, r4
    daac:	4410      	add	r0, r2
    daae:	784a      	ldrb	r2, [r1, #1]
    dab0:	785c      	ldrb	r4, [r3, #1]
    dab2:	4062      	eors	r2, r4
    dab4:	4410      	add	r0, r2
    dab6:	788a      	ldrb	r2, [r1, #2]
    dab8:	789c      	ldrb	r4, [r3, #2]
    daba:	4062      	eors	r2, r4
    dabc:	4410      	add	r0, r2
    dabe:	78ca      	ldrb	r2, [r1, #3]
    dac0:	78dc      	ldrb	r4, [r3, #3]
    dac2:	4062      	eors	r2, r4
    dac4:	4410      	add	r0, r2
    dac6:	790a      	ldrb	r2, [r1, #4]
    dac8:	791c      	ldrb	r4, [r3, #4]
    daca:	7949      	ldrb	r1, [r1, #5]
    dacc:	4062      	eors	r2, r4
    dace:	4410      	add	r0, r2
    dad0:	795a      	ldrb	r2, [r3, #5]
    dad2:	4051      	eors	r1, r2
    dad4:	42c1      	cmn	r1, r0
    dad6:	d101      	bne.n	dadc <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    dad8:	2001      	movs	r0, #1
    dada:	bd10      	pop	{r4, pc}
    dadc:	2000      	movs	r0, #0
    dade:	bd10      	pop	{r4, pc}

0000dae0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dae0:	b510      	push	{r4, lr}
    dae2:	2900      	cmp	r1, #0
    dae4:	4604      	mov	r4, r0
    dae6:	f04f 0106 	mov.w	r1, #6
    daea:	d002      	beq.n	daf2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    daec:	f7f3 f82a 	bl	b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    daf0:	e001      	b.n	daf6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    daf2:	f7f3 f835 	bl	b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    daf6:	7960      	ldrb	r0, [r4, #5]
    daf8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dafc:	7160      	strb	r0, [r4, #5]
    dafe:	bd10      	pop	{r4, pc}

0000db00 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    db00:	4770      	bx	lr

0000db02 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    db02:	b530      	push	{r4, r5, lr}
    db04:	460c      	mov	r4, r1
    db06:	4605      	mov	r5, r0
    db08:	b08d      	sub	sp, #52	; 0x34
    db0a:	f04f 0103 	mov.w	r1, #3
    db0e:	f104 0003 	add.w	r0, r4, #3
    db12:	b112      	cbz	r2, db1a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    db14:	f7f3 f816 	bl	b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    db18:	e001      	b.n	db1e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    db1a:	f7f3 f821 	bl	b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    db1e:	7960      	ldrb	r0, [r4, #5]
    db20:	220d      	movs	r2, #13
    db22:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    db26:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    db2a:	7160      	strb	r0, [r4, #5]
    db2c:	2100      	movs	r1, #0
    db2e:	a804      	add	r0, sp, #16
    db30:	f002 ffc4 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db34:	78e0      	ldrb	r0, [r4, #3]
    db36:	f88d 001f 	strb.w	r0, [sp, #31]
    db3a:	7920      	ldrb	r0, [r4, #4]
    db3c:	f88d 001e 	strb.w	r0, [sp, #30]
    db40:	7960      	ldrb	r0, [r4, #5]
    db42:	f88d 001d 	strb.w	r0, [sp, #29]
    db46:	2210      	movs	r2, #16
    db48:	4629      	mov	r1, r5
    db4a:	4668      	mov	r0, sp
    db4c:	f002 ff3c 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db50:	4668      	mov	r0, sp
    db52:	f7ff ff98 	bl	da86 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    db56:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    db5a:	7020      	strb	r0, [r4, #0]
    db5c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    db60:	7060      	strb	r0, [r4, #1]
    db62:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    db66:	70a0      	strb	r0, [r4, #2]
    db68:	b00d      	add	sp, #52	; 0x34
    db6a:	bd30      	pop	{r4, r5, pc}

0000db6c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    db6c:	b530      	push	{r4, r5, lr}
    db6e:	b08d      	sub	sp, #52	; 0x34
    db70:	460c      	mov	r4, r1
    db72:	4605      	mov	r5, r0
    db74:	220d      	movs	r2, #13
    db76:	2100      	movs	r1, #0
    db78:	a804      	add	r0, sp, #16
    db7a:	f002 ff9f 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db7e:	78e0      	ldrb	r0, [r4, #3]
    db80:	f88d 001f 	strb.w	r0, [sp, #31]
    db84:	7920      	ldrb	r0, [r4, #4]
    db86:	f88d 001e 	strb.w	r0, [sp, #30]
    db8a:	7960      	ldrb	r0, [r4, #5]
    db8c:	f88d 001d 	strb.w	r0, [sp, #29]
    db90:	2210      	movs	r2, #16
    db92:	4629      	mov	r1, r5
    db94:	4668      	mov	r0, sp
    db96:	f002 ff17 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db9a:	4668      	mov	r0, sp
    db9c:	f7ff ff73 	bl	da86 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dba0:	7820      	ldrb	r0, [r4, #0]
    dba2:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    dba6:	4288      	cmp	r0, r1
    dba8:	d10c      	bne.n	dbc4 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    dbaa:	7860      	ldrb	r0, [r4, #1]
    dbac:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    dbb0:	4288      	cmp	r0, r1
    dbb2:	d107      	bne.n	dbc4 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    dbb4:	78a0      	ldrb	r0, [r4, #2]
    dbb6:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    dbba:	4288      	cmp	r0, r1
    dbbc:	d102      	bne.n	dbc4 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    dbbe:	2001      	movs	r0, #1
    dbc0:	b00d      	add	sp, #52	; 0x34
    dbc2:	bd30      	pop	{r4, r5, pc}
    dbc4:	2000      	movs	r0, #0
    dbc6:	e7fb      	b.n	dbc0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000dbc8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    dbc8:	f7f4 b8ea 	b.w	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    dbcc:	b510      	push	{r4, lr}
    dbce:	2801      	cmp	r0, #1
    dbd0:	d008      	beq.n	dbe4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x1c>
    dbd2:	2802      	cmp	r0, #2
    dbd4:	d004      	beq.n	dbe0 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    dbd6:	f240 4121 	movw	r1, #1057	; 0x421
    dbda:	2006      	movs	r0, #6
    dbdc:	f7f2 ff1e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbe0:	2001      	movs	r0, #1
    dbe2:	bd10      	pop	{r4, pc}
    dbe4:	2000      	movs	r0, #0
    dbe6:	bd10      	pop	{r4, pc}
    dbe8:	2900      	cmp	r1, #0
    dbea:	d004      	beq.n	dbf6 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2e>
    dbec:	2801      	cmp	r0, #1
    dbee:	d003      	beq.n	dbf8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    dbf0:	2901      	cmp	r1, #1
    dbf2:	d001      	beq.n	dbf8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    dbf4:	2002      	movs	r0, #2
    dbf6:	4770      	bx	lr
    dbf8:	2001      	movs	r0, #1
    dbfa:	4770      	bx	lr
    dbfc:	f7ff bd8f 	b.w	d71e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dc00 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dc00:	2101      	movs	r1, #1
    dc02:	f7f4 bc39 	b.w	2478 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000dc06 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dc06:	b510      	push	{r4, lr}
    dc08:	f002 fca8 	bl	1055c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dc0c:	b118      	cbz	r0, dc16 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc12:	f7f9 bf8f 	b.w	7b34 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dc16:	20ff      	movs	r0, #255	; 0xff
    dc18:	bd10      	pop	{r4, pc}

0000dc1a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dc1a:	b510      	push	{r4, lr}
    dc1c:	f7f4 fc58 	bl	24d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dc20:	2808      	cmp	r0, #8
    dc22:	d003      	beq.n	dc2c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc28:	f7f4 bc3e 	b.w	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dc2c:	bd10      	pop	{r4, pc}

0000dc2e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    dc2e:	b510      	push	{r4, lr}
    dc30:	f7f4 fc4e 	bl	24d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dc34:	2808      	cmp	r0, #8
    dc36:	d007      	beq.n	dc48 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dc38:	f7f4 fc36 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dc3c:	2808      	cmp	r0, #8
    dc3e:	d003      	beq.n	dc48 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dc40:	f7f4 fca8 	bl	2594 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    dc44:	2001      	movs	r0, #1
    dc46:	bd10      	pop	{r4, pc}
    dc48:	2000      	movs	r0, #0
    dc4a:	bd10      	pop	{r4, pc}

0000dc4c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dc4c:	b570      	push	{r4, r5, r6, lr}
    dc4e:	460e      	mov	r6, r1
    dc50:	b08c      	sub	sp, #48	; 0x30
    dc52:	4614      	mov	r4, r2
    dc54:	4601      	mov	r1, r0
    dc56:	461d      	mov	r5, r3
    dc58:	2210      	movs	r2, #16
    dc5a:	4668      	mov	r0, sp
    dc5c:	f000 f988 	bl	df70 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc60:	2210      	movs	r2, #16
    dc62:	4631      	mov	r1, r6
    dc64:	a804      	add	r0, sp, #16
    dc66:	f000 f983 	bl	df70 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc6a:	4668      	mov	r0, sp
    dc6c:	f7ff ff0b 	bl	da86 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dc70:	a908      	add	r1, sp, #32
    dc72:	f04f 0210 	mov.w	r2, #16
    dc76:	4628      	mov	r0, r5
    dc78:	b11c      	cbz	r4, dc82 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dc7a:	f000 f979 	bl	df70 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc7e:	b00c      	add	sp, #48	; 0x30
    dc80:	bd70      	pop	{r4, r5, r6, pc}
    dc82:	f002 fea1 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc86:	e7fa      	b.n	dc7e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    dc88:	0781      	lsls	r1, r0, #30
    dc8a:	d501      	bpl.n	dc90 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    dc8c:	2002      	movs	r0, #2
    dc8e:	4770      	bx	lr
    dc90:	07c0      	lsls	r0, r0, #31
    dc92:	d0fc      	beq.n	dc8e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    dc94:	2001      	movs	r0, #1
    dc96:	4770      	bx	lr

0000dc98 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    dc98:	b570      	push	{r4, r5, r6, lr}
    dc9a:	4606      	mov	r6, r0
    dc9c:	7900      	ldrb	r0, [r0, #4]
    dc9e:	0940      	lsrs	r0, r0, #5
    dca0:	d10e      	bne.n	dcc0 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    dca2:	2500      	movs	r5, #0
    dca4:	462c      	mov	r4, r5
    dca6:	5d30      	ldrb	r0, [r6, r4]
    dca8:	f000 fcd8 	bl	e65c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dcac:	1c64      	adds	r4, r4, #1
    dcae:	4428      	add	r0, r5
    dcb0:	b2e4      	uxtb	r4, r4
    dcb2:	b2c5      	uxtb	r5, r0
    dcb4:	2c05      	cmp	r4, #5
    dcb6:	d3f6      	bcc.n	dca6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    dcb8:	2d01      	cmp	r5, #1
    dcba:	d901      	bls.n	dcc0 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    dcbc:	2001      	movs	r0, #1
    dcbe:	bd70      	pop	{r4, r5, r6, pc}
    dcc0:	2000      	movs	r0, #0
    dcc2:	bd70      	pop	{r4, r5, r6, pc}

0000dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    dcc4:	b510      	push	{r4, lr}
    dcc6:	460c      	mov	r4, r1
    dcc8:	2100      	movs	r1, #0
    dcca:	f7f3 f989 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dcce:	6060      	str	r0, [r4, #4]
    dcd0:	b110      	cbz	r0, dcd8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    dcd2:	2000      	movs	r0, #0
    dcd4:	7020      	strb	r0, [r4, #0]
    dcd6:	bd10      	pop	{r4, pc}
    dcd8:	2002      	movs	r0, #2
    dcda:	bd10      	pop	{r4, pc}

0000dcdc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dcdc:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dce0:	4348      	muls	r0, r1
    dce2:	4770      	bx	lr

0000dce4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    dce4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dce8:	fbb0 f0f1 	udiv	r0, r0, r1
    dcec:	b280      	uxth	r0, r0
    dcee:	4770      	bx	lr

0000dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dcf0:	b510      	push	{r4, lr}
    dcf2:	f1a2 0310 	sub.w	r3, r2, #16
    dcf6:	290d      	cmp	r1, #13
    dcf8:	d258      	bcs.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dcfa:	e8df f001 	tbb	[pc, r1]
    dcfe:	0907      	.short	0x0907
    dd00:	1d1a150e 	.word	0x1d1a150e
    dd04:	5937342c 	.word	0x5937342c
    dd08:	0053423b 	.word	0x0053423b
    dd0c:	b38a      	cbz	r2, dd72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    dd0e:	e04d      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd10:	2a06      	cmp	r2, #6
    dd12:	d049      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd14:	2a07      	cmp	r2, #7
    dd16:	d047      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd18:	e048      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd1a:	2a0b      	cmp	r2, #11
    dd1c:	d044      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd1e:	2a0c      	cmp	r2, #12
    dd20:	d042      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd22:	2a0a      	cmp	r2, #10
    dd24:	d040      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd26:	e041      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd28:	2a0d      	cmp	r2, #13
    dd2a:	d03d      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd2c:	2a0e      	cmp	r2, #14
    dd2e:	d03b      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd30:	e03c      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd32:	2b0c      	cmp	r3, #12
    dd34:	d938      	bls.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd36:	e039      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd38:	2a13      	cmp	r2, #19
    dd3a:	d035      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd3c:	2a12      	cmp	r2, #18
    dd3e:	d033      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd40:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    dd44:	b120      	cbz	r0, dd50 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    dd46:	2a13      	cmp	r2, #19
    dd48:	d330      	bcc.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd4a:	2a1b      	cmp	r2, #27
    dd4c:	d92c      	bls.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd4e:	e02d      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd50:	2a17      	cmp	r2, #23
    dd52:	d2fa      	bcs.n	dd4a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    dd54:	e02a      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd56:	2b03      	cmp	r3, #3
    dd58:	d926      	bls.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd5a:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    dd5e:	b300      	cbz	r0, dda2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    dd60:	2a1c      	cmp	r2, #28
    dd62:	d921      	bls.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd64:	e022      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd66:	2a04      	cmp	r2, #4
    dd68:	d01e      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd6a:	e01f      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd6c:	2a01      	cmp	r2, #1
    dd6e:	d01b      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd70:	e01c      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd72:	e019      	b.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd74:	2a1d      	cmp	r2, #29
    dd76:	d017      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd78:	2a1e      	cmp	r2, #30
    dd7a:	d015      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd7c:	2a1f      	cmp	r2, #31
    dd7e:	d013      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd80:	e014      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dd82:	2a20      	cmp	r2, #32
    dd84:	d010      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd86:	2a21      	cmp	r2, #33	; 0x21
    dd88:	d00e      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd8a:	2a22      	cmp	r2, #34	; 0x22
    dd8c:	d00c      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd8e:	2a23      	cmp	r2, #35	; 0x23
    dd90:	d00a      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd92:	2a24      	cmp	r2, #36	; 0x24
    dd94:	d008      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd96:	2a25      	cmp	r2, #37	; 0x25
    dd98:	d006      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd9a:	2a26      	cmp	r2, #38	; 0x26
    dd9c:	d004      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dd9e:	2a2e      	cmp	r2, #46	; 0x2e
    dda0:	d002      	beq.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dda2:	e003      	b.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dda4:	2a28      	cmp	r2, #40	; 0x28
    dda6:	d101      	bne.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dda8:	2001      	movs	r0, #1
    ddaa:	bd10      	pop	{r4, pc}
    ddac:	2000      	movs	r0, #0
    ddae:	bd10      	pop	{r4, pc}
    ddb0:	2a05      	cmp	r2, #5
    ddb2:	d1fb      	bne.n	ddac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    ddb4:	e7f8      	b.n	dda8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000ddb6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ddb6:	280b      	cmp	r0, #11
    ddb8:	d019      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddba:	280c      	cmp	r0, #12
    ddbc:	d017      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddbe:	280a      	cmp	r0, #10
    ddc0:	d015      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddc2:	280d      	cmp	r0, #13
    ddc4:	d013      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddc6:	280e      	cmp	r0, #14
    ddc8:	d011      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddca:	2820      	cmp	r0, #32
    ddcc:	d00f      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddce:	2821      	cmp	r0, #33	; 0x21
    ddd0:	d00d      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddd2:	2822      	cmp	r0, #34	; 0x22
    ddd4:	d00b      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddd6:	2823      	cmp	r0, #35	; 0x23
    ddd8:	d009      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddda:	2824      	cmp	r0, #36	; 0x24
    dddc:	d007      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddde:	2825      	cmp	r0, #37	; 0x25
    dde0:	d005      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dde2:	2826      	cmp	r0, #38	; 0x26
    dde4:	d003      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dde6:	282e      	cmp	r0, #46	; 0x2e
    dde8:	d001      	beq.n	ddee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ddea:	2000      	movs	r0, #0
    ddec:	4770      	bx	lr
    ddee:	2001      	movs	r0, #1
    ddf0:	4770      	bx	lr

0000ddf2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ddf2:	f011 0f0c 	tst.w	r1, #12
    ddf6:	d018      	beq.n	de2a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    ddf8:	074a      	lsls	r2, r1, #29
    ddfa:	f44f 7116 	mov.w	r1, #600	; 0x258
    ddfe:	2a00      	cmp	r2, #0
    de00:	da02      	bge.n	de08 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    de02:	f04f 0210 	mov.w	r2, #16
    de06:	e001      	b.n	de0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    de08:	f04f 0240 	mov.w	r2, #64	; 0x40
    de0c:	da01      	bge.n	de12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    de0e:	f04f 0196 	mov.w	r1, #150	; 0x96
    de12:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    de16:	eba0 0301 	sub.w	r3, r0, r1
    de1a:	4288      	cmp	r0, r1
    de1c:	d903      	bls.n	de26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de1e:	fb93 f0f2 	sdiv	r0, r3, r2
    de22:	b280      	uxth	r0, r0
    de24:	4770      	bx	lr
    de26:	2000      	movs	r0, #0
    de28:	4770      	bx	lr
    de2a:	2902      	cmp	r1, #2
    de2c:	d008      	beq.n	de40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    de2e:	2870      	cmp	r0, #112	; 0x70
    de30:	d9f9      	bls.n	de26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de32:	3870      	subs	r0, #112	; 0x70
    de34:	17c1      	asrs	r1, r0, #31
    de36:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    de3a:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    de3e:	4770      	bx	lr
    de40:	283c      	cmp	r0, #60	; 0x3c
    de42:	d9f0      	bls.n	de26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de44:	383c      	subs	r0, #60	; 0x3c
    de46:	17c1      	asrs	r1, r0, #31
    de48:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    de4c:	f3c0 008f 	ubfx	r0, r0, #2, #16
    de50:	4770      	bx	lr

0000de52 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    de52:	6809      	ldr	r1, [r1, #0]
    de54:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    de58:	4770      	bx	lr

0000de5a <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    de5a:	2801      	cmp	r0, #1
    de5c:	d002      	beq.n	de64 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    de5e:	2802      	cmp	r0, #2
    de60:	d000      	beq.n	de64 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    de62:	2000      	movs	r0, #0
    de64:	4770      	bx	lr

0000de66 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    de66:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    de6a:	f001 bbdf 	b.w	f62c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000de6e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    de6e:	b530      	push	{r4, r5, lr}
    de70:	242a      	movs	r4, #42	; 0x2a
    de72:	2523      	movs	r5, #35	; 0x23
    de74:	2a16      	cmp	r2, #22
    de76:	d109      	bne.n	de8c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    de78:	280b      	cmp	r0, #11
    de7a:	d00b      	beq.n	de94 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    de7c:	280c      	cmp	r0, #12
    de7e:	d009      	beq.n	de94 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    de80:	280d      	cmp	r0, #13
    de82:	d007      	beq.n	de94 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    de84:	280e      	cmp	r0, #14
    de86:	d005      	beq.n	de94 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    de88:	2820      	cmp	r0, #32
    de8a:	d005      	beq.n	de98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    de8c:	b171      	cbz	r1, deac <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    de8e:	2a16      	cmp	r2, #22
    de90:	d10c      	bne.n	deac <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    de92:	e004      	b.n	de9e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    de94:	701c      	strb	r4, [r3, #0]
    de96:	e000      	b.n	de9a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    de98:	701d      	strb	r5, [r3, #0]
    de9a:	2001      	movs	r0, #1
    de9c:	bd30      	pop	{r4, r5, pc}
    de9e:	7808      	ldrb	r0, [r1, #0]
    dea0:	2801      	cmp	r0, #1
    dea2:	d0f7      	beq.n	de94 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dea4:	2800      	cmp	r0, #0
    dea6:	d0f5      	beq.n	de94 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dea8:	2816      	cmp	r0, #22
    deaa:	d0f5      	beq.n	de98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    deac:	2000      	movs	r0, #0
    deae:	bd30      	pop	{r4, r5, pc}

0000deb0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    deb2:	b2cf      	uxtb	r7, r1
    deb4:	4606      	mov	r6, r0
    deb6:	f3c1 2407 	ubfx	r4, r1, #8, #8
    deba:	4621      	mov	r1, r4
    debc:	4638      	mov	r0, r7
    debe:	f000 f89e 	bl	dffe <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    dec2:	b2f5      	uxtb	r5, r6
    dec4:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dec8:	b920      	cbnz	r0, ded4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    deca:	4631      	mov	r1, r6
    decc:	4628      	mov	r0, r5
    dece:	f000 f896 	bl	dffe <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    ded2:	b140      	cbz	r0, dee6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    ded4:	4027      	ands	r7, r4
    ded6:	4035      	ands	r5, r6
    ded8:	403d      	ands	r5, r7
    deda:	4644      	mov	r4, r8
    dedc:	f365 0407 	bfi	r4, r5, #0, #8
    dee0:	f365 240f 	bfi	r4, r5, #8, #8
    dee4:	e006      	b.n	def4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dee6:	4025      	ands	r5, r4
    dee8:	4644      	mov	r4, r8
    deea:	f365 0407 	bfi	r4, r5, #0, #8
    deee:	403e      	ands	r6, r7
    def0:	f366 240f 	bfi	r4, r6, #8, #8
    def4:	b2e0      	uxtb	r0, r4
    def6:	f7ff fec7 	bl	dc88 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    defa:	f88d 0000 	strb.w	r0, [sp]
    defe:	f3c4 2007 	ubfx	r0, r4, #8, #8
    df02:	f7ff fec1 	bl	dc88 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    df06:	f88d 0001 	strb.w	r0, [sp, #1]
    df0a:	f8bd 0000 	ldrh.w	r0, [sp]
    df0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000df10 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    df10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df14:	4607      	mov	r7, r0
    df16:	460e      	mov	r6, r1
    df18:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    df1c:	f7fc fbee 	bl	a6fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    df20:	b198      	cbz	r0, df4a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    df22:	b31e      	cbz	r6, df6c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    df28:	1b40      	subs	r0, r0, r5
    df2a:	2300      	movs	r3, #0
    df2c:	eb61 0104 	sbc.w	r1, r1, r4
    df30:	461a      	mov	r2, r3
    df32:	1a1b      	subs	r3, r3, r0
    df34:	418a      	sbcs	r2, r1
    df36:	da19      	bge.n	df6c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df38:	1c42      	adds	r2, r0, #1
    df3a:	f171 0100 	sbcs.w	r1, r1, #0
    df3e:	db07      	blt.n	df50 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    df40:	f240 211a 	movw	r1, #538	; 0x21a
    df44:	2029      	movs	r0, #41	; 0x29
    df46:	f7f2 fd69 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df4a:	f44f 7104 	mov.w	r1, #528	; 0x210
    df4e:	e7f9      	b.n	df44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    df50:	4430      	add	r0, r6
    df52:	1e40      	subs	r0, r0, #1
    df54:	fbb0 f1f6 	udiv	r1, r0, r6
    df58:	fb01 f006 	mul.w	r0, r1, r6
    df5c:	1828      	adds	r0, r5, r0
    df5e:	f144 0400 	adc.w	r4, r4, #0
    df62:	e9c7 0404 	strd	r0, r4, [r7, #16]
    df66:	4608      	mov	r0, r1
    df68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df6c:	2000      	movs	r0, #0
    df6e:	e7fb      	b.n	df68 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000df70 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    df70:	b530      	push	{r4, r5, lr}
    df72:	4613      	mov	r3, r2
    df74:	e006      	b.n	df84 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    df76:	18cc      	adds	r4, r1, r3
    df78:	1ad5      	subs	r5, r2, r3
    df7a:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    df7e:	1e5b      	subs	r3, r3, #1
    df80:	5544      	strb	r4, [r0, r5]
    df82:	b2db      	uxtb	r3, r3
    df84:	2b00      	cmp	r3, #0
    df86:	d1f6      	bne.n	df76 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    df88:	bd30      	pop	{r4, r5, pc}

0000df8a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    df8a:	2300      	movs	r3, #0
    df8c:	6403      	str	r3, [r0, #64]	; 0x40
    df8e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    df92:	f240 2371 	movw	r3, #625	; 0x271
    df96:	435a      	muls	r2, r3
    df98:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    df9c:	1e52      	subs	r2, r2, #1
    df9e:	fbb2 f1f1 	udiv	r1, r2, r1
    dfa2:	6441      	str	r1, [r0, #68]	; 0x44
    dfa4:	4770      	bx	lr

0000dfa6 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    dfa6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dfaa:	fbb0 f0f1 	udiv	r0, r0, r1
    dfae:	b280      	uxth	r0, r0
    dfb0:	4770      	bx	lr

0000dfb2 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    dfb2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dfb6:	fbb0 f2f1 	udiv	r2, r0, r1
    dfba:	fb01 0112 	mls	r1, r1, r2, r0
    dfbe:	1a40      	subs	r0, r0, r1
    dfc0:	4770      	bx	lr

0000dfc2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dfc2:	f240 2171 	movw	r1, #625	; 0x271
    dfc6:	fb10 f001 	smulbb	r0, r0, r1
    dfca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dfce:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    dfd2:	4770      	bx	lr

0000dfd4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    dfd4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dfd8:	fbb0 f0f1 	udiv	r0, r0, r1
    dfdc:	b2c0      	uxtb	r0, r0
    dfde:	4770      	bx	lr

0000dfe0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dfe0:	b510      	push	{r4, lr}
    dfe2:	2300      	movs	r3, #0
    dfe4:	461a      	mov	r2, r3
    dfe6:	e003      	b.n	dff0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dfe8:	5c84      	ldrb	r4, [r0, r2]
    dfea:	4323      	orrs	r3, r4
    dfec:	1c52      	adds	r2, r2, #1
    dfee:	b2d2      	uxtb	r2, r2
    dff0:	428a      	cmp	r2, r1
    dff2:	d3f9      	bcc.n	dfe8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dff4:	b10b      	cbz	r3, dffa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dff6:	2000      	movs	r0, #0
    dff8:	bd10      	pop	{r4, pc}
    dffa:	2001      	movs	r0, #1
    dffc:	bd10      	pop	{r4, pc}
    dffe:	2801      	cmp	r0, #1
    e000:	d002      	beq.n	e008 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    e002:	2802      	cmp	r0, #2
    e004:	d003      	beq.n	e00e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x2e>
    e006:	e004      	b.n	e012 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x32>
    e008:	2901      	cmp	r1, #1
    e00a:	d004      	beq.n	e016 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x36>
    e00c:	e001      	b.n	e012 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x32>
    e00e:	2902      	cmp	r1, #2
    e010:	d001      	beq.n	e016 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x36>
    e012:	2000      	movs	r0, #0
    e014:	4770      	bx	lr
    e016:	2001      	movs	r0, #1
    e018:	4770      	bx	lr

0000e01a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    e01a:	2100      	movs	r1, #0
    e01c:	4608      	mov	r0, r1
    e01e:	f7f4 bb9f 	b.w	2760 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    e022:	4401      	add	r1, r0
    e024:	2914      	cmp	r1, #20
    e026:	dd01      	ble.n	e02c <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    e028:	2014      	movs	r0, #20
    e02a:	4770      	bx	lr
    e02c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e030:	4281      	cmp	r1, r0
    e032:	dbfa      	blt.n	e02a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    e034:	b248      	sxtb	r0, r1
    e036:	4770      	bx	lr

0000e038 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e038:	b570      	push	{r4, r5, r6, lr}
    e03a:	4605      	mov	r5, r0
    e03c:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e040:	b286      	uxth	r6, r0
    e042:	4610      	mov	r0, r2
    e044:	7aec      	ldrb	r4, [r5, #11]
    e046:	4631      	mov	r1, r6
    e048:	f000 f863 	bl	e112 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e04c:	4070      	eors	r0, r6
    e04e:	2125      	movs	r1, #37	; 0x25
    e050:	fbb0 f2f1 	udiv	r2, r0, r1
    e054:	fb01 0112 	mls	r1, r1, r2, r0
    e058:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e05c:	f001 0307 	and.w	r3, r1, #7
    e060:	7852      	ldrb	r2, [r2, #1]
    e062:	2601      	movs	r6, #1
    e064:	409e      	lsls	r6, r3
    e066:	4232      	tst	r2, r6
    e068:	d001      	beq.n	e06e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e06a:	4608      	mov	r0, r1
    e06c:	bd70      	pop	{r4, r5, r6, pc}
    e06e:	4344      	muls	r4, r0
    e070:	0c21      	lsrs	r1, r4, #16
    e072:	4628      	mov	r0, r5
    e074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e078:	f7f4 bbe4 	b.w	2844 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000e07c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e07c:	b510      	push	{r4, lr}
    e07e:	4604      	mov	r4, r0
    e080:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e084:	b108      	cbz	r0, e08a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e086:	2825      	cmp	r0, #37	; 0x25
    e088:	d901      	bls.n	e08e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e08a:	2012      	movs	r0, #18
    e08c:	bd10      	pop	{r4, pc}
    e08e:	b132      	cbz	r2, e09e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e090:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e094:	b128      	cbz	r0, e0a2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e096:	2801      	cmp	r0, #1
    e098:	d009      	beq.n	e0ae <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e09a:	201f      	movs	r0, #31
    e09c:	bd10      	pop	{r4, pc}
    e09e:	2000      	movs	r0, #0
    e0a0:	bd10      	pop	{r4, pc}
    e0a2:	4620      	mov	r0, r4
    e0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0a8:	4611      	mov	r1, r2
    e0aa:	f7f4 bb83 	b.w	27b4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    e0ae:	8aa2      	ldrh	r2, [r4, #20]
    e0b0:	6949      	ldr	r1, [r1, #20]
    e0b2:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e0b6:	f7ff ffbf 	bl	e038 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e0ba:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e0be:	e7ee      	b.n	e09e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e0c0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e0c0:	b570      	push	{r4, r5, r6, lr}
    e0c2:	4604      	mov	r4, r0
    e0c4:	1c40      	adds	r0, r0, #1
    e0c6:	4288      	cmp	r0, r1
    e0c8:	d004      	beq.n	e0d4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e0ca:	6808      	ldr	r0, [r1, #0]
    e0cc:	f8c4 0001 	str.w	r0, [r4, #1]
    e0d0:	7908      	ldrb	r0, [r1, #4]
    e0d2:	7160      	strb	r0, [r4, #5]
    e0d4:	7960      	ldrb	r0, [r4, #5]
    e0d6:	f000 001f 	and.w	r0, r0, #31
    e0da:	7160      	strb	r0, [r4, #5]
    e0dc:	2000      	movs	r0, #0
    e0de:	72e0      	strb	r0, [r4, #11]
    e0e0:	4605      	mov	r5, r0
    e0e2:	1966      	adds	r6, r4, r5
    e0e4:	7870      	ldrb	r0, [r6, #1]
    e0e6:	f000 fab9 	bl	e65c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e0ea:	71b0      	strb	r0, [r6, #6]
    e0ec:	7ae1      	ldrb	r1, [r4, #11]
    e0ee:	1c6d      	adds	r5, r5, #1
    e0f0:	4408      	add	r0, r1
    e0f2:	b2ed      	uxtb	r5, r5
    e0f4:	72e0      	strb	r0, [r4, #11]
    e0f6:	2d05      	cmp	r5, #5
    e0f8:	d3f3      	bcc.n	e0e2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e0fa:	bd70      	pop	{r4, r5, r6, pc}
    e0fc:	b2c1      	uxtb	r1, r0
    e0fe:	fa91 f1a1 	rbit	r1, r1
    e102:	0a00      	lsrs	r0, r0, #8
    e104:	0e09      	lsrs	r1, r1, #24
    e106:	fa90 f0a0 	rbit	r0, r0
    e10a:	0e00      	lsrs	r0, r0, #24
    e10c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e110:	4770      	bx	lr
    e112:	b570      	push	{r4, r5, r6, lr}
    e114:	460d      	mov	r5, r1
    e116:	4048      	eors	r0, r1
    e118:	2400      	movs	r4, #0
    e11a:	f7ff ffef 	bl	e0fc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e11e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e122:	1c64      	adds	r4, r4, #1
    e124:	4428      	add	r0, r5
    e126:	b2e4      	uxtb	r4, r4
    e128:	b280      	uxth	r0, r0
    e12a:	2c03      	cmp	r4, #3
    e12c:	d3f5      	bcc.n	e11a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e12e:	bd70      	pop	{r4, r5, r6, pc}

0000e130 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    e130:	7841      	ldrb	r1, [r0, #1]
    e132:	7800      	ldrb	r0, [r0, #0]
    e134:	f010 000f 	ands.w	r0, r0, #15
    e138:	d005      	beq.n	e146 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    e13a:	2801      	cmp	r0, #1
    e13c:	d007      	beq.n	e14e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    e13e:	2802      	cmp	r0, #2
    e140:	d001      	beq.n	e146 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    e142:	2806      	cmp	r0, #6
    e144:	d105      	bne.n	e152 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    e146:	1f89      	subs	r1, r1, #6
    e148:	291f      	cmp	r1, #31
    e14a:	d904      	bls.n	e156 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    e14c:	e001      	b.n	e152 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    e14e:	290c      	cmp	r1, #12
    e150:	d001      	beq.n	e156 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    e152:	2000      	movs	r0, #0
    e154:	4770      	bx	lr
    e156:	2001      	movs	r0, #1
    e158:	4770      	bx	lr

0000e15a <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    e15a:	7800      	ldrb	r0, [r0, #0]
    e15c:	09c0      	lsrs	r0, r0, #7
    e15e:	4770      	bx	lr

0000e160 <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    e160:	f850 2f03 	ldr.w	r2, [r0, #3]!
    e164:	600a      	str	r2, [r1, #0]
    e166:	8880      	ldrh	r0, [r0, #4]
    e168:	8088      	strh	r0, [r1, #4]
    e16a:	4770      	bx	lr

0000e16c <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    e16c:	7800      	ldrb	r0, [r0, #0]
    e16e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e172:	4770      	bx	lr

0000e174 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    e174:	7801      	ldrb	r1, [r0, #0]
    e176:	f001 010f 	and.w	r1, r1, #15
    e17a:	2904      	cmp	r1, #4
    e17c:	d105      	bne.n	e18a <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    e17e:	7840      	ldrb	r0, [r0, #1]
    e180:	1f80      	subs	r0, r0, #6
    e182:	281f      	cmp	r0, #31
    e184:	d801      	bhi.n	e18a <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    e186:	2001      	movs	r0, #1
    e188:	4770      	bx	lr
    e18a:	2000      	movs	r0, #0
    e18c:	4770      	bx	lr

0000e18e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e18e:	b510      	push	{r4, lr}
    e190:	7802      	ldrb	r2, [r0, #0]
    e192:	f001 030f 	and.w	r3, r1, #15
    e196:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e19a:	431a      	orrs	r2, r3
    e19c:	7002      	strb	r2, [r0, #0]
    e19e:	2907      	cmp	r1, #7
    e1a0:	d20c      	bcs.n	e1bc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e1a2:	e8df f001 	tbb	[pc, r1]
    e1a6:	0604      	.short	0x0604
    e1a8:	08040604 	.word	0x08040604
    e1ac:	0004      	.short	0x0004
    e1ae:	2106      	movs	r1, #6
    e1b0:	e002      	b.n	e1b8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e1b2:	210c      	movs	r1, #12
    e1b4:	e000      	b.n	e1b8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e1b6:	2122      	movs	r1, #34	; 0x22
    e1b8:	7041      	strb	r1, [r0, #1]
    e1ba:	bd10      	pop	{r4, pc}
    e1bc:	21a8      	movs	r1, #168	; 0xa8
    e1be:	202a      	movs	r0, #42	; 0x2a
    e1c0:	f7f2 fc2c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e1c4 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e1c4:	680a      	ldr	r2, [r1, #0]
    e1c6:	f840 2f09 	str.w	r2, [r0, #9]!
    e1ca:	8889      	ldrh	r1, [r1, #4]
    e1cc:	8081      	strh	r1, [r0, #4]
    e1ce:	4770      	bx	lr

0000e1d0 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e1d0:	7802      	ldrb	r2, [r0, #0]
    e1d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e1d6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e1da:	7002      	strb	r2, [r0, #0]
    e1dc:	4770      	bx	lr

0000e1de <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e1de:	680a      	ldr	r2, [r1, #0]
    e1e0:	f840 2f03 	str.w	r2, [r0, #3]!
    e1e4:	8889      	ldrh	r1, [r1, #4]
    e1e6:	8081      	strh	r1, [r0, #4]
    e1e8:	4770      	bx	lr

0000e1ea <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e1ea:	7802      	ldrb	r2, [r0, #0]
    e1ec:	2340      	movs	r3, #64	; 0x40
    e1ee:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e1f2:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e1f6:	430a      	orrs	r2, r1
    e1f8:	7002      	strb	r2, [r0, #0]
    e1fa:	4770      	bx	lr

0000e1fc <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    e1fc:	680a      	ldr	r2, [r1, #0]
    e1fe:	6042      	str	r2, [r0, #4]
    e200:	7909      	ldrb	r1, [r1, #4]
    e202:	7201      	strb	r1, [r0, #8]
    e204:	4770      	bx	lr

0000e206 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    e206:	72c1      	strb	r1, [r0, #11]
    e208:	0a09      	lsrs	r1, r1, #8
    e20a:	7301      	strb	r1, [r0, #12]
    e20c:	4770      	bx	lr

0000e20e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e20e:	b510      	push	{r4, lr}
    e210:	29fb      	cmp	r1, #251	; 0xfb
    e212:	d904      	bls.n	e21e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e214:	f240 61a1 	movw	r1, #1697	; 0x6a1
    e218:	202a      	movs	r0, #42	; 0x2a
    e21a:	f7f2 fbff 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e21e:	7041      	strb	r1, [r0, #1]
    e220:	bd10      	pop	{r4, pc}

0000e222 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e222:	8809      	ldrh	r1, [r1, #0]
    e224:	8181      	strh	r1, [r0, #12]
    e226:	4770      	bx	lr

0000e228 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e228:	6809      	ldr	r1, [r1, #0]
    e22a:	f8c0 1016 	str.w	r1, [r0, #22]
    e22e:	4770      	bx	lr

0000e230 <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e230:	680a      	ldr	r2, [r1, #0]
    e232:	6042      	str	r2, [r0, #4]
    e234:	6849      	ldr	r1, [r1, #4]
    e236:	6081      	str	r1, [r0, #8]
    e238:	4770      	bx	lr

0000e23a <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e23a:	680a      	ldr	r2, [r1, #0]
    e23c:	f840 2f0e 	str.w	r2, [r0, #14]!
    e240:	6849      	ldr	r1, [r1, #4]
    e242:	6041      	str	r1, [r0, #4]
    e244:	4770      	bx	lr

0000e246 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e246:	68c0      	ldr	r0, [r0, #12]
    e248:	6008      	str	r0, [r1, #0]
    e24a:	4770      	bx	lr

0000e24c <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e24c:	6842      	ldr	r2, [r0, #4]
    e24e:	600a      	str	r2, [r1, #0]
    e250:	6880      	ldr	r0, [r0, #8]
    e252:	6048      	str	r0, [r1, #4]
    e254:	4770      	bx	lr

0000e256 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e256:	7800      	ldrb	r0, [r0, #0]
    e258:	f000 0003 	and.w	r0, r0, #3
    e25c:	4770      	bx	lr

0000e25e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e25e:	8880      	ldrh	r0, [r0, #4]
    e260:	4770      	bx	lr

0000e262 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e262:	88c0      	ldrh	r0, [r0, #6]
    e264:	4770      	bx	lr

0000e266 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e266:	8900      	ldrh	r0, [r0, #8]
    e268:	4770      	bx	lr

0000e26a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e26a:	8940      	ldrh	r0, [r0, #10]
    e26c:	4770      	bx	lr

0000e26e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e26e:	8901      	ldrh	r1, [r0, #8]
    e270:	291b      	cmp	r1, #27
    e272:	d30c      	bcc.n	e28e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e274:	8941      	ldrh	r1, [r0, #10]
    e276:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e27a:	4291      	cmp	r1, r2
    e27c:	d307      	bcc.n	e28e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e27e:	8881      	ldrh	r1, [r0, #4]
    e280:	291b      	cmp	r1, #27
    e282:	d304      	bcc.n	e28e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e284:	88c0      	ldrh	r0, [r0, #6]
    e286:	4290      	cmp	r0, r2
    e288:	d301      	bcc.n	e28e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e28a:	2001      	movs	r0, #1
    e28c:	4770      	bx	lr
    e28e:	2000      	movs	r0, #0
    e290:	4770      	bx	lr

0000e292 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e292:	7901      	ldrb	r1, [r0, #4]
    e294:	0749      	lsls	r1, r1, #29
    e296:	d004      	beq.n	e2a2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e298:	7940      	ldrb	r0, [r0, #5]
    e29a:	0740      	lsls	r0, r0, #29
    e29c:	d001      	beq.n	e2a2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e29e:	2001      	movs	r0, #1
    e2a0:	4770      	bx	lr
    e2a2:	2000      	movs	r0, #0
    e2a4:	4770      	bx	lr

0000e2a6 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e2a6:	7181      	strb	r1, [r0, #6]
    e2a8:	0a09      	lsrs	r1, r1, #8
    e2aa:	71c1      	strb	r1, [r0, #7]
    e2ac:	4770      	bx	lr

0000e2ae <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e2ae:	7101      	strb	r1, [r0, #4]
    e2b0:	4770      	bx	lr

0000e2b2 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e2b2:	7141      	strb	r1, [r0, #5]
    e2b4:	4770      	bx	lr

0000e2b6 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e2b6:	7901      	ldrb	r1, [r0, #4]
    e2b8:	0749      	lsls	r1, r1, #29
    e2ba:	d004      	beq.n	e2c6 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e2bc:	7940      	ldrb	r0, [r0, #5]
    e2be:	0740      	lsls	r0, r0, #29
    e2c0:	d001      	beq.n	e2c6 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e2c2:	2001      	movs	r0, #1
    e2c4:	4770      	bx	lr
    e2c6:	2000      	movs	r0, #0
    e2c8:	4770      	bx	lr

0000e2ca <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e2ca:	7900      	ldrb	r0, [r0, #4]
    e2cc:	4770      	bx	lr

0000e2ce <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e2ce:	7101      	strb	r1, [r0, #4]
    e2d0:	4770      	bx	lr

0000e2d2 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e2d2:	7940      	ldrb	r0, [r0, #5]
    e2d4:	4770      	bx	lr

0000e2d6 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e2d6:	7141      	strb	r1, [r0, #5]
    e2d8:	4770      	bx	lr

0000e2da <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e2da:	7802      	ldrb	r2, [r0, #0]
    e2dc:	f001 0103 	and.w	r1, r1, #3
    e2e0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e2e4:	430a      	orrs	r2, r1
    e2e6:	7002      	strb	r2, [r0, #0]
    e2e8:	4770      	bx	lr

0000e2ea <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e2ea:	7101      	strb	r1, [r0, #4]
    e2ec:	0a09      	lsrs	r1, r1, #8
    e2ee:	7141      	strb	r1, [r0, #5]
    e2f0:	4770      	bx	lr

0000e2f2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e2f2:	7181      	strb	r1, [r0, #6]
    e2f4:	0a09      	lsrs	r1, r1, #8
    e2f6:	71c1      	strb	r1, [r0, #7]
    e2f8:	4770      	bx	lr

0000e2fa <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e2fa:	7201      	strb	r1, [r0, #8]
    e2fc:	0a09      	lsrs	r1, r1, #8
    e2fe:	7241      	strb	r1, [r0, #9]
    e300:	4770      	bx	lr

0000e302 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e302:	7281      	strb	r1, [r0, #10]
    e304:	0a09      	lsrs	r1, r1, #8
    e306:	72c1      	strb	r1, [r0, #11]
    e308:	4770      	bx	lr

0000e30a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e30a:	7900      	ldrb	r0, [r0, #4]
    e30c:	4770      	bx	lr

0000e30e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e30e:	7900      	ldrb	r0, [r0, #4]
    e310:	4770      	bx	lr

0000e312 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e312:	b510      	push	{r4, lr}
    e314:	7a01      	ldrb	r1, [r0, #8]
    e316:	b119      	cbz	r1, e320 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e318:	2901      	cmp	r1, #1
    e31a:	d006      	beq.n	e32a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e31c:	2000      	movs	r0, #0
    e31e:	bd10      	pop	{r4, pc}
    e320:	88c2      	ldrh	r2, [r0, #6]
    e322:	6803      	ldr	r3, [r0, #0]
    e324:	8880      	ldrh	r0, [r0, #4]
    e326:	2102      	movs	r1, #2
    e328:	e003      	b.n	e332 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e32a:	88c2      	ldrh	r2, [r0, #6]
    e32c:	6803      	ldr	r3, [r0, #0]
    e32e:	8880      	ldrh	r0, [r0, #4]
    e330:	2101      	movs	r1, #1
    e332:	f7f4 faf1 	bl	2918 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e336:	b908      	cbnz	r0, e33c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e338:	f7f4 fb38 	bl	29ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e33c:	2001      	movs	r0, #1
    e33e:	bd10      	pop	{r4, pc}

0000e340 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    e340:	2203      	movs	r2, #3
    e342:	f000 b806 	b.w	e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000e346 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    e346:	2203      	movs	r2, #3
    e348:	f000 b817 	b.w	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e34c <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    e34c:	2204      	movs	r2, #4
    e34e:	f000 b814 	b.w	e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e352 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e352:	b508      	push	{r3, lr}
    e354:	7a03      	ldrb	r3, [r0, #8]
    e356:	f88d 3000 	strb.w	r3, [sp]
    e35a:	9b00      	ldr	r3, [sp, #0]
    e35c:	9300      	str	r3, [sp, #0]
    e35e:	f89d 3000 	ldrb.w	r3, [sp]
    e362:	b123      	cbz	r3, e36e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e364:	f240 21c2 	movw	r1, #706	; 0x2c2
    e368:	2010      	movs	r0, #16
    e36a:	f7f2 fb57 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e36e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e372:	f7f4 bca3 	b.w	2cbc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x11c>

0000e376 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e376:	f7f4 bccf 	b.w	2d18 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x178>

0000e37a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e37a:	7a03      	ldrb	r3, [r0, #8]
    e37c:	b082      	sub	sp, #8
    e37e:	f88d 3000 	strb.w	r3, [sp]
    e382:	9b00      	ldr	r3, [sp, #0]
    e384:	9300      	str	r3, [sp, #0]
    e386:	f89d 3000 	ldrb.w	r3, [sp]
    e38a:	b113      	cbz	r3, e392 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    e38c:	7202      	strb	r2, [r0, #8]
    e38e:	b002      	add	sp, #8
    e390:	4770      	bx	lr
    e392:	b002      	add	sp, #8
    e394:	f7f4 bc92 	b.w	2cbc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x11c>
    e398:	2000      	movs	r0, #0
    e39a:	7048      	strb	r0, [r1, #1]
    e39c:	2003      	movs	r0, #3
    e39e:	7008      	strb	r0, [r1, #0]
    e3a0:	2001      	movs	r0, #1
    e3a2:	7108      	strb	r0, [r1, #4]
    e3a4:	4770      	bx	lr

0000e3a6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e3a6:	b510      	push	{r4, lr}
    e3a8:	888c      	ldrh	r4, [r1, #4]
    e3aa:	890a      	ldrh	r2, [r1, #8]
    e3ac:	884b      	ldrh	r3, [r1, #2]
    e3ae:	88c9      	ldrh	r1, [r1, #6]
    e3b0:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e3b4:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e3b8:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e3bc:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e3c0:	bd10      	pop	{r4, pc}

0000e3c2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e3c2:	b570      	push	{r4, r5, r6, lr}
    e3c4:	4615      	mov	r5, r2
    e3c6:	460c      	mov	r4, r1
    e3c8:	f000 f8b8 	bl	e53c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e3cc:	3096      	adds	r0, #150	; 0x96
    e3ce:	4428      	add	r0, r5
    e3d0:	42a0      	cmp	r0, r4
    e3d2:	d801      	bhi.n	e3d8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e3d4:	1a20      	subs	r0, r4, r0
    e3d6:	bd70      	pop	{r4, r5, r6, pc}
    e3d8:	2000      	movs	r0, #0
    e3da:	bd70      	pop	{r4, r5, r6, pc}

0000e3dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3e0:	4604      	mov	r4, r0
    e3e2:	f000 f87f 	bl	e4e4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    e3e6:	4680      	mov	r8, r0
    e3e8:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e3ec:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e3f0:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e3f2:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e3f4:	4285      	cmp	r5, r0
    e3f6:	d300      	bcc.n	e3fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    e3f8:	4605      	mov	r5, r0
    e3fa:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e3fe:	4620      	mov	r0, r4
    e400:	f000 f868 	bl	e4d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e404:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e408:	2902      	cmp	r1, #2
    e40a:	d108      	bne.n	e41e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    e40c:	42af      	cmp	r7, r5
    e40e:	d200      	bcs.n	e412 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e410:	463d      	mov	r5, r7
    e412:	4286      	cmp	r6, r0
    e414:	d200      	bcs.n	e418 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e416:	4630      	mov	r0, r6
    e418:	2100      	movs	r1, #0
    e41a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e41e:	86a5      	strh	r5, [r4, #52]	; 0x34
    e420:	8720      	strh	r0, [r4, #56]	; 0x38
    e422:	42bd      	cmp	r5, r7
    e424:	d101      	bne.n	e42a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e426:	42b0      	cmp	r0, r6
    e428:	d001      	beq.n	e42e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e42a:	2001      	movs	r0, #1
    e42c:	e000      	b.n	e430 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    e42e:	2000      	movs	r0, #0
    e430:	ea40 0008 	orr.w	r0, r0, r8
    e434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e438 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e438:	221b      	movs	r2, #27
    e43a:	8402      	strh	r2, [r0, #32]
    e43c:	8382      	strh	r2, [r0, #28]
    e43e:	82c2      	strh	r2, [r0, #22]
    e440:	8282      	strh	r2, [r0, #20]
    e442:	8142      	strh	r2, [r0, #10]
    e444:	8202      	strh	r2, [r0, #16]
    e446:	8102      	strh	r2, [r0, #8]
    e448:	8542      	strh	r2, [r0, #42]	; 0x2a
    e44a:	8582      	strh	r2, [r0, #44]	; 0x2c
    e44c:	8482      	strh	r2, [r0, #36]	; 0x24
    e44e:	2900      	cmp	r1, #0
    e450:	d10a      	bne.n	e468 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e452:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e456:	8441      	strh	r1, [r0, #34]	; 0x22
    e458:	83c1      	strh	r1, [r0, #30]
    e45a:	8341      	strh	r1, [r0, #26]
    e45c:	8301      	strh	r1, [r0, #24]
    e45e:	81c1      	strh	r1, [r0, #14]
    e460:	8241      	strh	r1, [r0, #18]
    e462:	8181      	strh	r1, [r0, #12]
    e464:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e466:	8601      	strh	r1, [r0, #48]	; 0x30
    e468:	4770      	bx	lr

0000e46a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e46a:	6800      	ldr	r0, [r0, #0]
    e46c:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e470:	4290      	cmp	r0, r2
    e472:	d903      	bls.n	e47c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e474:	1a40      	subs	r0, r0, r1
    e476:	389c      	subs	r0, #156	; 0x9c
    e478:	0840      	lsrs	r0, r0, #1
    e47a:	4770      	bx	lr
    e47c:	2000      	movs	r0, #0
    e47e:	4770      	bx	lr

0000e480 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    e480:	6840      	ldr	r0, [r0, #4]
    e482:	4770      	bx	lr

0000e484 <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    e484:	b570      	push	{r4, r5, r6, lr}
    e486:	460c      	mov	r4, r1
    e488:	4605      	mov	r5, r0
    e48a:	f000 f857 	bl	e53c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e48e:	4420      	add	r0, r4
    e490:	6328      	str	r0, [r5, #48]	; 0x30
    e492:	bd70      	pop	{r4, r5, r6, pc}

0000e494 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e494:	b510      	push	{r4, lr}
    e496:	9c02      	ldr	r4, [sp, #8]
    e498:	8281      	strh	r1, [r0, #20]
    e49a:	82c2      	strh	r2, [r0, #22]
    e49c:	8303      	strh	r3, [r0, #24]
    e49e:	8344      	strh	r4, [r0, #26]
    e4a0:	bd10      	pop	{r4, pc}
    e4a2:	1d00      	adds	r0, r0, #4
    e4a4:	b510      	push	{r4, lr}
    e4a6:	b280      	uxth	r0, r0
    e4a8:	2901      	cmp	r1, #1
    e4aa:	d006      	beq.n	e4ba <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e4ac:	2902      	cmp	r1, #2
    e4ae:	d007      	beq.n	e4c0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e4b0:	f240 2123 	movw	r1, #547	; 0x223
    e4b4:	2006      	movs	r0, #6
    e4b6:	f7f2 fab1 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4ba:	00c0      	lsls	r0, r0, #3
    e4bc:	3050      	adds	r0, #80	; 0x50
    e4be:	e001      	b.n	e4c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e4c0:	0080      	lsls	r0, r0, #2
    e4c2:	302c      	adds	r0, #44	; 0x2c
    e4c4:	b280      	uxth	r0, r0
    e4c6:	bd10      	pop	{r4, pc}
    e4c8:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    e4ca:	8b00      	ldrh	r0, [r0, #24]
    e4cc:	4281      	cmp	r1, r0
    e4ce:	d200      	bcs.n	e4d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e4d0:	4608      	mov	r0, r1
    e4d2:	4770      	bx	lr
    e4d4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e4d8:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e4dc:	4281      	cmp	r1, r0
    e4de:	d200      	bcs.n	e4e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e4e0:	4608      	mov	r0, r1
    e4e2:	4770      	bx	lr
    e4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4e8:	4606      	mov	r6, r0
    e4ea:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    e4ee:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    e4f2:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    e4f6:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    e4fa:	42a0      	cmp	r0, r4
    e4fc:	d200      	bcs.n	e500 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    e4fe:	4604      	mov	r4, r0
    e500:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e504:	4605      	mov	r5, r0
    e506:	f7ff ffdf 	bl	e4c8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e50a:	4607      	mov	r7, r0
    e50c:	4628      	mov	r0, r5
    e50e:	f7ff ffdb 	bl	e4c8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e512:	816c      	strh	r4, [r5, #10]
    e514:	81ef      	strh	r7, [r5, #14]
    e516:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    e518:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    e51a:	42a1      	cmp	r1, r4
    e51c:	d200      	bcs.n	e520 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    e51e:	4621      	mov	r1, r4
    e520:	4282      	cmp	r2, r0
    e522:	d300      	bcc.n	e526 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    e524:	4610      	mov	r0, r2
    e526:	8229      	strh	r1, [r5, #16]
    e528:	8268      	strh	r0, [r5, #18]
    e52a:	454c      	cmp	r4, r9
    e52c:	d101      	bne.n	e532 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    e52e:	4547      	cmp	r7, r8
    e530:	d002      	beq.n	e538 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    e532:	2001      	movs	r0, #1
    e534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e538:	2000      	movs	r0, #0
    e53a:	e7fb      	b.n	e534 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    e53c:	2196      	movs	r1, #150	; 0x96
    e53e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e542:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e546:	f000 b800 	b.w	e54a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    e54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e54e:	460d      	mov	r5, r1
    e550:	4606      	mov	r6, r0
    e552:	4698      	mov	r8, r3
    e554:	4617      	mov	r7, r2
    e556:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e558:	4611      	mov	r1, r2
    e55a:	f7ff ffa2 	bl	e4a2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e55e:	4604      	mov	r4, r0
    e560:	4639      	mov	r1, r7
    e562:	4630      	mov	r0, r6
    e564:	f7ff ffb6 	bl	e4d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e568:	42a0      	cmp	r0, r4
    e56a:	d200      	bcs.n	e56e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    e56c:	4604      	mov	r4, r0
    e56e:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e570:	4641      	mov	r1, r8
    e572:	f7ff ff96 	bl	e4a2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e576:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e578:	4281      	cmp	r1, r0
    e57a:	d200      	bcs.n	e57e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e57c:	4608      	mov	r0, r1
    e57e:	4420      	add	r0, r4
    e580:	4428      	add	r0, r5
    e582:	1d80      	adds	r0, r0, #6
    e584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e588 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e588:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e58c:	2700      	movs	r7, #0
    e58e:	463d      	mov	r5, r7
    e590:	2623      	movs	r6, #35	; 0x23
    e592:	46b8      	mov	r8, r7
    e594:	f7f4 fce4 	bl	2f60 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e598:	4604      	mov	r4, r0
    e59a:	f7f4 fca9 	bl	2ef0 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e59e:	b190      	cbz	r0, e5c6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e5a0:	f8cd 8000 	str.w	r8, [sp]
    e5a4:	f8cd 8004 	str.w	r8, [sp, #4]
    e5a8:	e003      	b.n	e5b2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e5aa:	9800      	ldr	r0, [sp, #0]
    e5ac:	6941      	ldr	r1, [r0, #20]
    e5ae:	42a1      	cmp	r1, r4
    e5b0:	d009      	beq.n	e5c6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e5b2:	4668      	mov	r0, sp
    e5b4:	f7f2 fd5a 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e5b8:	2800      	cmp	r0, #0
    e5ba:	d0f6      	beq.n	e5aa <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e5bc:	4625      	mov	r5, r4
    e5be:	4620      	mov	r0, r4
    e5c0:	f7f4 fc60 	bl	2e84 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e5c4:	4607      	mov	r7, r0
    e5c6:	1e76      	subs	r6, r6, #1
    e5c8:	d001      	beq.n	e5ce <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e5ca:	2f00      	cmp	r7, #0
    e5cc:	d0e2      	beq.n	e594 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e5ce:	b115      	cbz	r5, e5d6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e5d0:	4628      	mov	r0, r5
    e5d2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e5d6:	f240 1167 	movw	r1, #359	; 0x167
    e5da:	200f      	movs	r0, #15
    e5dc:	f7f2 fa1e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5e0:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5e4:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5e8:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5ec:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5f0:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5f4:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e5f8:	d001      	beq.n	e5fe <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    e5fa:	2000      	movs	r0, #0
    e5fc:	4770      	bx	lr
    e5fe:	2001      	movs	r0, #1
    e600:	4770      	bx	lr
    e602:	b510      	push	{r4, lr}
    e604:	4604      	mov	r4, r0
    e606:	2108      	movs	r1, #8
    e608:	4620      	mov	r0, r4
    e60a:	f7f2 faa9 	bl	b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e60e:	6820      	ldr	r0, [r4, #0]
    e610:	2800      	cmp	r0, #0
    e612:	d102      	bne.n	e61a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    e614:	6860      	ldr	r0, [r4, #4]
    e616:	2800      	cmp	r0, #0
    e618:	d0f5      	beq.n	e606 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    e61a:	bd10      	pop	{r4, pc}

0000e61c <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    e61c:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    e620:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    e624:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e628:	4408      	add	r0, r1
    e62a:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    e62e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    e632:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e636:	4408      	add	r0, r1
    e638:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    e63c:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    e640:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    e644:	4408      	add	r0, r1
    e646:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    e64a:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    e64e:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    e652:	4408      	add	r0, r1
    e654:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    e658:	b2c0      	uxtb	r0, r0
    e65a:	4770      	bx	lr

0000e65c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e65c:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e660:	2255      	movs	r2, #85	; 0x55
    e662:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e666:	4408      	add	r0, r1
    e668:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e66c:	2233      	movs	r2, #51	; 0x33
    e66e:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e672:	4408      	add	r0, r1
    e674:	f000 010f 	and.w	r1, r0, #15
    e678:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e67c:	4770      	bx	lr

0000e67e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    e67e:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    e682:	f7ff bfcb 	b.w	e61c <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000e686 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e686:	6840      	ldr	r0, [r0, #4]
    e688:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
    e68c:	f880 212a 	strb.w	r2, [r0, #298]	; 0x12a
    e690:	4770      	bx	lr

0000e692 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e692:	6840      	ldr	r0, [r0, #4]
    e694:	2100      	movs	r1, #0
    e696:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    e69a:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    e69e:	f8a0 10dc 	strh.w	r1, [r0, #220]	; 0xdc
    e6a2:	4770      	bx	lr

0000e6a4 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e6a4:	b510      	push	{r4, lr}
    e6a6:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e6aa:	f830 4cbc 	ldrh.w	r4, [r0, #-188]
    e6ae:	2000      	movs	r0, #0
    e6b0:	7048      	strb	r0, [r1, #1]
    e6b2:	230c      	movs	r3, #12
    e6b4:	700b      	strb	r3, [r1, #0]
    e6b6:	7108      	strb	r0, [r1, #4]
    e6b8:	f8a1 4005 	strh.w	r4, [r1, #5]
    e6bc:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e6c0:	71c8      	strb	r0, [r1, #7]
    e6c2:	4620      	mov	r0, r4
    e6c4:	f7f2 fe0e 	bl	12e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e6c8:	f7fe feed 	bl	d4a6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e6cc:	b140      	cbz	r0, e6e0 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e6ce:	4620      	mov	r0, r4
    e6d0:	f7ff f9e3 	bl	da9a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e6d4:	4620      	mov	r0, r4
    e6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6da:	2100      	movs	r1, #0
    e6dc:	f7f2 bd16 	b.w	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e6e0:	2173      	movs	r1, #115	; 0x73
    e6e2:	2063      	movs	r0, #99	; 0x63
    e6e4:	f7f2 f99a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e6e8 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e6e8:	b570      	push	{r4, r5, r6, lr}
    e6ea:	6844      	ldr	r4, [r0, #4]
    e6ec:	460d      	mov	r5, r1
    e6ee:	7803      	ldrb	r3, [r0, #0]
    e6f0:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    e6f4:	3488      	adds	r4, #136	; 0x88
    e6f6:	2101      	movs	r1, #1
    e6f8:	4620      	mov	r0, r4
    e6fa:	f7ff faf9 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6fe:	b108      	cbz	r0, e704 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e700:	2000      	movs	r0, #0
    e702:	bd70      	pop	{r4, r5, r6, pc}
    e704:	4628      	mov	r0, r5
    e706:	f7ff fe00 	bl	e30a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e70a:	f884 0020 	strb.w	r0, [r4, #32]
    e70e:	2006      	movs	r0, #6
    e710:	77e0      	strb	r0, [r4, #31]
    e712:	e7f5      	b.n	e700 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e714 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e714:	b510      	push	{r4, lr}
    e716:	6844      	ldr	r4, [r0, #4]
    e718:	7803      	ldrb	r3, [r0, #0]
    e71a:	2101      	movs	r1, #1
    e71c:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    e720:	3488      	adds	r4, #136	; 0x88
    e722:	4620      	mov	r0, r4
    e724:	f7ff fae4 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e728:	2800      	cmp	r0, #0
    e72a:	d101      	bne.n	e730 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e72c:	2007      	movs	r0, #7
    e72e:	77e0      	strb	r0, [r4, #31]
    e730:	bd10      	pop	{r4, pc}

0000e732 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e732:	2200      	movs	r2, #0
    e734:	704a      	strb	r2, [r1, #1]
    e736:	2309      	movs	r3, #9
    e738:	700b      	strb	r3, [r1, #0]
    e73a:	f100 030a 	add.w	r3, r0, #10
    e73e:	f5a0 70e3 	sub.w	r0, r0, #454	; 0x1c6
    e742:	84c2      	strh	r2, [r0, #38]	; 0x26
    e744:	6818      	ldr	r0, [r3, #0]
    e746:	6048      	str	r0, [r1, #4]
    e748:	6858      	ldr	r0, [r3, #4]
    e74a:	6088      	str	r0, [r1, #8]
    e74c:	8918      	ldrh	r0, [r3, #8]
    e74e:	8188      	strh	r0, [r1, #12]
    e750:	710a      	strb	r2, [r1, #4]
    e752:	4770      	bx	lr

0000e754 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e754:	b510      	push	{r4, lr}
    e756:	6844      	ldr	r4, [r0, #4]
    e758:	7803      	ldrb	r3, [r0, #0]
    e75a:	2100      	movs	r1, #0
    e75c:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e760:	3488      	adds	r4, #136	; 0x88
    e762:	4620      	mov	r0, r4
    e764:	f7ff fac4 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e768:	b110      	cbz	r0, e770 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e76a:	201d      	movs	r0, #29
    e76c:	7760      	strb	r0, [r4, #29]
    e76e:	bd10      	pop	{r4, pc}
    e770:	2122      	movs	r1, #34	; 0x22
    e772:	2045      	movs	r0, #69	; 0x45
    e774:	f7f2 f952 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e778 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e77c:	4606      	mov	r6, r0
    e77e:	7803      	ldrb	r3, [r0, #0]
    e780:	6840      	ldr	r0, [r0, #4]
    e782:	468a      	mov	sl, r1
    e784:	f100 0488 	add.w	r4, r0, #136	; 0x88
    e788:	4605      	mov	r5, r0
    e78a:	7f62      	ldrb	r2, [r4, #29]
    e78c:	210a      	movs	r1, #10
    e78e:	4620      	mov	r0, r4
    e790:	f7ff faae 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e794:	b360      	cbz	r0, e7f0 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e796:	4650      	mov	r0, sl
    e798:	f7ff fd69 	bl	e26e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e79c:	b1f0      	cbz	r0, e7dc <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x64>
    e79e:	4650      	mov	r0, sl
    e7a0:	f7ff fd5f 	bl	e262 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e7a4:	4681      	mov	r9, r0
    e7a6:	4650      	mov	r0, sl
    e7a8:	f7ff fd5f 	bl	e26a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e7ac:	4680      	mov	r8, r0
    e7ae:	4650      	mov	r0, sl
    e7b0:	f7ff fd55 	bl	e25e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e7b4:	4607      	mov	r7, r0
    e7b6:	4650      	mov	r0, sl
    e7b8:	f7ff fd55 	bl	e266 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e7bc:	4601      	mov	r1, r0
    e7be:	4643      	mov	r3, r8
    e7c0:	463a      	mov	r2, r7
    e7c2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e7c6:	f8cd 9000 	str.w	r9, [sp]
    e7ca:	f7ff fe63 	bl	e494 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e7ce:	4628      	mov	r0, r5
    e7d0:	f7ff fe04 	bl	e3dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e7d4:	2104      	movs	r1, #4
    e7d6:	6870      	ldr	r0, [r6, #4]
    e7d8:	f000 fb6e 	bl	eeb8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    e7dc:	2000      	movs	r0, #0
    e7de:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    e7e2:	7760      	strb	r0, [r4, #29]
    e7e4:	4630      	mov	r0, r6
    e7e6:	f000 f805 	bl	e7f4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e7ea:	2000      	movs	r0, #0
    e7ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7f0:	2001      	movs	r0, #1
    e7f2:	e7fb      	b.n	e7ec <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e7f4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e7f4:	6841      	ldr	r1, [r0, #4]
    e7f6:	f501 72a9 	add.w	r2, r1, #338	; 0x152
    e7fa:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e7fe:	2801      	cmp	r0, #1
    e800:	d004      	beq.n	e80c <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e802:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e806:	3218      	adds	r2, #24
    e808:	f7f4 ba9c 	b.w	2d44 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e80c:	2002      	movs	r0, #2
    e80e:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e812:	4770      	bx	lr

0000e814 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e814:	2200      	movs	r2, #0
    e816:	704a      	strb	r2, [r1, #1]
    e818:	220d      	movs	r2, #13
    e81a:	700a      	strb	r2, [r1, #0]
    e81c:	f100 020a 	add.w	r2, r0, #10
    e820:	7a83      	ldrb	r3, [r0, #10]
    e822:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e826:	710b      	strb	r3, [r1, #4]
    e828:	8800      	ldrh	r0, [r0, #0]
    e82a:	80c8      	strh	r0, [r1, #6]
    e82c:	7910      	ldrb	r0, [r2, #4]
    e82e:	7208      	strb	r0, [r1, #8]
    e830:	4770      	bx	lr

0000e832 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e832:	2200      	movs	r2, #0
    e834:	704a      	strb	r2, [r1, #1]
    e836:	220e      	movs	r2, #14
    e838:	700a      	strb	r2, [r1, #0]
    e83a:	7a82      	ldrb	r2, [r0, #10]
    e83c:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e840:	710a      	strb	r2, [r1, #4]
    e842:	8800      	ldrh	r0, [r0, #0]
    e844:	80c8      	strh	r0, [r1, #6]
    e846:	4770      	bx	lr
    e848:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e84c:	f001 0307 	and.w	r3, r1, #7
    e850:	7802      	ldrb	r2, [r0, #0]
    e852:	2101      	movs	r1, #1
    e854:	4099      	lsls	r1, r3
    e856:	430a      	orrs	r2, r1
    e858:	7002      	strb	r2, [r0, #0]
    e85a:	4770      	bx	lr

0000e85c <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e85c:	b510      	push	{r4, lr}
    e85e:	6844      	ldr	r4, [r0, #4]
    e860:	7803      	ldrb	r3, [r0, #0]
    e862:	2100      	movs	r1, #0
    e864:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e868:	3488      	adds	r4, #136	; 0x88
    e86a:	4620      	mov	r0, r4
    e86c:	f7ff fa40 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e870:	b110      	cbz	r0, e878 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e872:	2004      	movs	r0, #4
    e874:	7760      	strb	r0, [r4, #29]
    e876:	bd10      	pop	{r4, pc}
    e878:	21ab      	movs	r1, #171	; 0xab
    e87a:	201c      	movs	r0, #28
    e87c:	f7f2 f8ce 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e880 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e880:	b510      	push	{r4, lr}
    e882:	4604      	mov	r4, r0
    e884:	6840      	ldr	r0, [r0, #4]
    e886:	2300      	movs	r3, #0
    e888:	4619      	mov	r1, r3
    e88a:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    e88e:	3088      	adds	r0, #136	; 0x88
    e890:	f7ff fa2e 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e894:	b120      	cbz	r0, e8a0 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    e896:	6861      	ldr	r1, [r4, #4]
    e898:	2000      	movs	r0, #0
    e89a:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    e89e:	bd10      	pop	{r4, pc}
    e8a0:	21b3      	movs	r1, #179	; 0xb3
    e8a2:	201c      	movs	r0, #28
    e8a4:	f7f2 f8ba 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8a8:	2200      	movs	r2, #0
    e8aa:	704a      	strb	r2, [r1, #1]
    e8ac:	2208      	movs	r2, #8
    e8ae:	700a      	strb	r2, [r1, #0]
    e8b0:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e8b4:	604a      	str	r2, [r1, #4]
    e8b6:	6842      	ldr	r2, [r0, #4]
    e8b8:	608a      	str	r2, [r1, #8]
    e8ba:	8902      	ldrh	r2, [r0, #8]
    e8bc:	818a      	strh	r2, [r1, #12]
    e8be:	7a80      	ldrb	r0, [r0, #10]
    e8c0:	7388      	strb	r0, [r1, #14]
    e8c2:	4770      	bx	lr

0000e8c4 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e8c4:	2200      	movs	r2, #0
    e8c6:	704a      	strb	r2, [r1, #1]
    e8c8:	2210      	movs	r2, #16
    e8ca:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    e8ce:	700a      	strb	r2, [r1, #0]
    e8d0:	8800      	ldrh	r0, [r0, #0]
    e8d2:	8088      	strh	r0, [r1, #4]
    e8d4:	4770      	bx	lr

0000e8d6 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    e8d6:	b570      	push	{r4, r5, r6, lr}
    e8d8:	6844      	ldr	r4, [r0, #4]
    e8da:	7803      	ldrb	r3, [r0, #0]
    e8dc:	2501      	movs	r5, #1
    e8de:	f894 20a6 	ldrb.w	r2, [r4, #166]	; 0xa6
    e8e2:	3488      	adds	r4, #136	; 0x88
    e8e4:	2100      	movs	r1, #0
    e8e6:	4620      	mov	r0, r4
    e8e8:	f7ff fa02 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8ec:	f090 0f01 	teq	r0, #1
    e8f0:	d001      	beq.n	e8f6 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x20>
    e8f2:	2001      	movs	r0, #1
    e8f4:	bd70      	pop	{r4, r5, r6, pc}
    e8f6:	2000      	movs	r0, #0
    e8f8:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
    e8fc:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    e900:	2002      	movs	r0, #2
    e902:	77a0      	strb	r0, [r4, #30]
    e904:	2000      	movs	r0, #0
    e906:	bd70      	pop	{r4, r5, r6, pc}

0000e908 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    e908:	b510      	push	{r4, lr}
    e90a:	6844      	ldr	r4, [r0, #4]
    e90c:	7803      	ldrb	r3, [r0, #0]
    e90e:	2100      	movs	r1, #0
    e910:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e914:	3488      	adds	r4, #136	; 0x88
    e916:	4620      	mov	r0, r4
    e918:	f7ff f9ea 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e91c:	b110      	cbz	r0, e924 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    e91e:	2005      	movs	r0, #5
    e920:	7760      	strb	r0, [r4, #29]
    e922:	bd10      	pop	{r4, pc}
    e924:	216e      	movs	r1, #110	; 0x6e
    e926:	204b      	movs	r0, #75	; 0x4b
    e928:	f7f2 f878 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e92c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    e92c:	b510      	push	{r4, lr}
    e92e:	6844      	ldr	r4, [r0, #4]
    e930:	7803      	ldrb	r3, [r0, #0]
    e932:	2109      	movs	r1, #9
    e934:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e938:	3488      	adds	r4, #136	; 0x88
    e93a:	4620      	mov	r0, r4
    e93c:	f7ff f9d8 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e940:	2800      	cmp	r0, #0
    e942:	d005      	beq.n	e950 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    e944:	2000      	movs	r0, #0
    e946:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    e94a:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    e94e:	7760      	strb	r0, [r4, #29]
    e950:	bd10      	pop	{r4, pc}

0000e952 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    e952:	6840      	ldr	r0, [r0, #4]
    e954:	2100      	movs	r1, #0
    e956:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    e95a:	4770      	bx	lr

0000e95c <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e95c:	b510      	push	{r4, lr}
    e95e:	2300      	movs	r3, #0
    e960:	704b      	strb	r3, [r1, #1]
    e962:	2401      	movs	r4, #1
    e964:	700c      	strb	r4, [r1, #0]
    e966:	f100 0209 	add.w	r2, r0, #9
    e96a:	710b      	strb	r3, [r1, #4]
    e96c:	f830 0ce8 	ldrh.w	r0, [r0, #-232]
    e970:	f8a1 0005 	strh.w	r0, [r1, #5]
    e974:	f812 0b01 	ldrb.w	r0, [r2], #1
    e978:	71c8      	strb	r0, [r1, #7]
    e97a:	8810      	ldrh	r0, [r2, #0]
    e97c:	8108      	strh	r0, [r1, #8]
    e97e:	8850      	ldrh	r0, [r2, #2]
    e980:	8148      	strh	r0, [r1, #10]
    e982:	bd10      	pop	{r4, pc}

0000e984 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e988:	7803      	ldrb	r3, [r0, #0]
    e98a:	6840      	ldr	r0, [r0, #4]
    e98c:	2501      	movs	r5, #1
    e98e:	f100 0488 	add.w	r4, r0, #136	; 0x88
    e992:	f500 779c 	add.w	r7, r0, #312	; 0x138
    e996:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    e99a:	f04f 0600 	mov.w	r6, #0
    e99e:	0780      	lsls	r0, r0, #30
    e9a0:	d410      	bmi.n	e9c4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    e9a2:	7f62      	ldrb	r2, [r4, #29]
    e9a4:	2100      	movs	r1, #0
    e9a6:	4620      	mov	r0, r4
    e9a8:	f7ff f9a2 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e9ac:	b130      	cbz	r0, e9bc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    e9ae:	7765      	strb	r5, [r4, #29]
    e9b0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    e9b4:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    e9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9bc:	216e      	movs	r1, #110	; 0x6e
    e9be:	2040      	movs	r0, #64	; 0x40
    e9c0:	f7f2 f82c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9c4:	2300      	movs	r3, #0
    e9c6:	7fa2      	ldrb	r2, [r4, #30]
    e9c8:	4619      	mov	r1, r3
    e9ca:	4620      	mov	r0, r4
    e9cc:	f7ff f990 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e9d0:	b108      	cbz	r0, e9d6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    e9d2:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    e9d6:	74be      	strb	r6, [r7, #18]
    e9d8:	e7ee      	b.n	e9b8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    e9da:	2200      	movs	r2, #0
    e9dc:	704a      	strb	r2, [r1, #1]
    e9de:	221d      	movs	r2, #29
    e9e0:	700a      	strb	r2, [r1, #0]
    e9e2:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e9e6:	6048      	str	r0, [r1, #4]
    e9e8:	4770      	bx	lr
    e9ea:	b510      	push	{r4, lr}
    e9ec:	4604      	mov	r4, r0
    e9ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e9f2:	e9d4 1000 	ldrd	r1, r0, [r4]
    e9f6:	4050      	eors	r0, r2
    e9f8:	ea70 0101 	orns	r1, r0, r1
    e9fc:	d008      	beq.n	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e9fe:	f001 fe3f 	bl	10680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ea02:	e9d4 2300 	ldrd	r2, r3, [r4]
    ea06:	1a80      	subs	r0, r0, r2
    ea08:	4199      	sbcs	r1, r3
    ea0a:	d301      	bcc.n	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    ea0c:	2001      	movs	r0, #1
    ea0e:	bd10      	pop	{r4, pc}
    ea10:	2000      	movs	r0, #0
    ea12:	bd10      	pop	{r4, pc}

0000ea14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    ea14:	b508      	push	{r3, lr}
    ea16:	f000 f804 	bl	ea22 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    ea1a:	466a      	mov	r2, sp
    ea1c:	f7f4 fcfe 	bl	341c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    ea20:	bd08      	pop	{r3, pc}
    ea22:	b530      	push	{r4, r5, lr}
    ea24:	784c      	ldrb	r4, [r1, #1]
    ea26:	4603      	mov	r3, r0
    ea28:	7808      	ldrb	r0, [r1, #0]
    ea2a:	788d      	ldrb	r5, [r1, #2]
    ea2c:	0e22      	lsrs	r2, r4, #24
    ea2e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    ea32:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    ea36:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    ea3a:	78cd      	ldrb	r5, [r1, #3]
    ea3c:	790c      	ldrb	r4, [r1, #4]
    ea3e:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    ea42:	4322      	orrs	r2, r4
    ea44:	7949      	ldrb	r1, [r1, #5]
    ea46:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    ea4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ea4e:	4611      	mov	r1, r2
    ea50:	2b01      	cmp	r3, #1
    ea52:	d101      	bne.n	ea58 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    ea54:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    ea58:	bd30      	pop	{r4, r5, pc}
    ea5a:	2801      	cmp	r0, #1
    ea5c:	d102      	bne.n	ea64 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    ea5e:	7948      	ldrb	r0, [r1, #5]
    ea60:	0980      	lsrs	r0, r0, #6
    ea62:	d001      	beq.n	ea68 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    ea64:	2000      	movs	r0, #0
    ea66:	4770      	bx	lr
    ea68:	2001      	movs	r0, #1
    ea6a:	4770      	bx	lr
    ea6c:	2801      	cmp	r0, #1
    ea6e:	d106      	bne.n	ea7e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ea70:	7948      	ldrb	r0, [r1, #5]
    ea72:	2101      	movs	r1, #1
    ea74:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ea78:	d101      	bne.n	ea7e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ea7a:	2001      	movs	r0, #1
    ea7c:	4770      	bx	lr
    ea7e:	2000      	movs	r0, #0
    ea80:	4770      	bx	lr
    ea82:	b118      	cbz	r0, ea8c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    ea84:	2802      	cmp	r0, #2
    ea86:	d001      	beq.n	ea8c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    ea88:	2001      	movs	r0, #1
    ea8a:	4770      	bx	lr
    ea8c:	2000      	movs	r0, #0
    ea8e:	4770      	bx	lr
    ea90:	2802      	cmp	r0, #2
    ea92:	d003      	beq.n	ea9c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    ea94:	2803      	cmp	r0, #3
    ea96:	d001      	beq.n	ea9c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    ea98:	2000      	movs	r0, #0
    ea9a:	4770      	bx	lr
    ea9c:	2001      	movs	r0, #1
    ea9e:	4770      	bx	lr

0000eaa0 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    eaa0:	f7f5 bd64 	b.w	456c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56c>

0000eaa4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    eaa4:	b510      	push	{r4, lr}
    eaa6:	2000      	movs	r0, #0
    eaa8:	f7f5 fba4 	bl	41f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f4>
    eaac:	f7f4 ff20 	bl	38f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    eab0:	f7f5 fd6a 	bl	4588 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x588>
    eab4:	2000      	movs	r0, #0
    eab6:	bd10      	pop	{r4, pc}
    eab8:	b510      	push	{r4, lr}
    eaba:	f000 f83c 	bl	eb36 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    eabe:	2005      	movs	r0, #5
    eac0:	bd10      	pop	{r4, pc}
    eac2:	b510      	push	{r4, lr}
    eac4:	f7f5 fbb0 	bl	4228 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x228>
    eac8:	f7f9 f9f4 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    eacc:	2005      	movs	r0, #5
    eace:	bd10      	pop	{r4, pc}
    ead0:	b530      	push	{r4, r5, lr}
    ead2:	b08b      	sub	sp, #44	; 0x2c
    ead4:	4605      	mov	r5, r0
    ead6:	f7f5 fba7 	bl	4228 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x228>
    eada:	7828      	ldrb	r0, [r5, #0]
    eadc:	4669      	mov	r1, sp
    eade:	f000 040f 	and.w	r4, r0, #15
    eae2:	4622      	mov	r2, r4
    eae4:	4628      	mov	r0, r5
    eae6:	f7f5 fefb 	bl	48e0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    eaea:	2200      	movs	r2, #0
    eaec:	4621      	mov	r1, r4
    eaee:	4668      	mov	r0, sp
    eaf0:	f7f4 ff7c 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>
    eaf4:	4621      	mov	r1, r4
    eaf6:	4668      	mov	r0, sp
    eaf8:	f7f5 fb16 	bl	4128 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x128>
    eafc:	4604      	mov	r4, r0
    eafe:	f7f4 fef7 	bl	38f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    eb02:	b00b      	add	sp, #44	; 0x2c
    eb04:	4620      	mov	r0, r4
    eb06:	bd30      	pop	{r4, r5, pc}
    eb08:	f240 31af 	movw	r1, #943	; 0x3af
    eb0c:	2032      	movs	r0, #50	; 0x32
    eb0e:	f7f1 ff85 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb12:	b510      	push	{r4, lr}
    eb14:	f000 f80f 	bl	eb36 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    eb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb1c:	f7f5 bd3c 	b.w	4598 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x598>
    eb20:	b510      	push	{r4, lr}
    eb22:	f7f5 fb81 	bl	4228 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x228>
    eb26:	f7f9 f9c5 	bl	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    eb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb2e:	f7f5 bd33 	b.w	4598 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x598>
    eb32:	f7f5 bd1b 	b.w	456c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56c>
    eb36:	b510      	push	{r4, lr}
    eb38:	f7f5 fb76 	bl	4228 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x228>
    eb3c:	f7f4 fed8 	bl	38f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    eb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb44:	f7f9 b9b6 	b.w	7eb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    eb48:	f7fe be5f 	b.w	d80a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    eb4c:	b570      	push	{r4, r5, r6, lr}
    eb4e:	4614      	mov	r4, r2
    eb50:	461d      	mov	r5, r3
    eb52:	4606      	mov	r6, r0
    eb54:	f001 fd94 	bl	10680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eb58:	1900      	adds	r0, r0, r4
    eb5a:	4169      	adcs	r1, r5
    eb5c:	e9c6 0100 	strd	r0, r1, [r6]
    eb60:	bd70      	pop	{r4, r5, r6, pc}

0000eb62 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    eb62:	b510      	push	{r4, lr}
    eb64:	f7f2 fbf2 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    eb68:	f000 f944 	bl	edf4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    eb6c:	4604      	mov	r4, r0
    eb6e:	221c      	movs	r2, #28
    eb70:	2100      	movs	r1, #0
    eb72:	3009      	adds	r0, #9
    eb74:	f001 ffa2 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb78:	207f      	movs	r0, #127	; 0x7f
    eb7a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    eb7e:	21ff      	movs	r1, #255	; 0xff
    eb80:	75e1      	strb	r1, [r4, #23]
    eb82:	72a1      	strb	r1, [r4, #10]
    eb84:	7721      	strb	r1, [r4, #28]
    eb86:	7ce0      	ldrb	r0, [r4, #19]
    eb88:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    eb8c:	3020      	adds	r0, #32
    eb8e:	74e0      	strb	r0, [r4, #19]
    eb90:	bd10      	pop	{r4, pc}

0000eb92 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    eb92:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    eb96:	461d      	mov	r5, r3
    eb98:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    eb9c:	4616      	mov	r6, r2
    eb9e:	4688      	mov	r8, r1
    eba0:	4681      	mov	r9, r0
    eba2:	f7f2 fbd3 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    eba6:	4604      	mov	r4, r0
    eba8:	f7fe fcf8 	bl	d59c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    ebac:	2801      	cmp	r0, #1
    ebae:	d066      	beq.n	ec7e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    ebb0:	4620      	mov	r0, r4
    ebb2:	f000 f91f 	bl	edf4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    ebb6:	4604      	mov	r4, r0
    ebb8:	221c      	movs	r2, #28
    ebba:	2100      	movs	r1, #0
    ebbc:	3009      	adds	r0, #9
    ebbe:	f001 ff7d 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ebc2:	2701      	movs	r7, #1
    ebc4:	7267      	strb	r7, [r4, #9]
    ebc6:	ea5f 0008 	movs.w	r0, r8
    ebca:	d009      	beq.n	ebe0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    ebcc:	2801      	cmp	r0, #1
    ebce:	d00b      	beq.n	ebe8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    ebd0:	2802      	cmp	r0, #2
    ebd2:	d02d      	beq.n	ec30 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    ebd4:	f1b8 0f06 	cmp.w	r8, #6
    ebd8:	d02c      	beq.n	ec34 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    ebda:	f240 310b 	movw	r1, #779	; 0x30b
    ebde:	e04b      	b.n	ec78 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    ebe0:	7ce0      	ldrb	r0, [r4, #19]
    ebe2:	f040 0001 	orr.w	r0, r0, #1
    ebe6:	e026      	b.n	ec36 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    ebe8:	7ce0      	ldrb	r0, [r4, #19]
    ebea:	f040 0005 	orr.w	r0, r0, #5
    ebee:	f040 0010 	orr.w	r0, r0, #16
    ebf2:	74e0      	strb	r0, [r4, #19]
    ebf4:	f104 030a 	add.w	r3, r4, #10
    ebf8:	1c5a      	adds	r2, r3, #1
    ebfa:	4648      	mov	r0, r9
    ebfc:	990a      	ldr	r1, [sp, #40]	; 0x28
    ebfe:	f000 f8de 	bl	edbe <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    ec02:	f884 a012 	strb.w	sl, [r4, #18]
    ec06:	7567      	strb	r7, [r4, #21]
    ec08:	2000      	movs	r0, #0
    ec0a:	75a0      	strb	r0, [r4, #22]
    ec0c:	20ff      	movs	r0, #255	; 0xff
    ec0e:	75e0      	strb	r0, [r4, #23]
    ec10:	7ce1      	ldrb	r1, [r4, #19]
    ec12:	0749      	lsls	r1, r1, #29
    ec14:	d518      	bpl.n	ec48 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    ec16:	f104 001d 	add.w	r0, r4, #29
    ec1a:	1e41      	subs	r1, r0, #1
    ec1c:	2d02      	cmp	r5, #2
    ec1e:	d00d      	beq.n	ec3c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    ec20:	2d03      	cmp	r5, #3
    ec22:	d00b      	beq.n	ec3c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    ec24:	f8d9 2008 	ldr.w	r2, [r9, #8]
    ec28:	6813      	ldr	r3, [r2, #0]
    ec2a:	6003      	str	r3, [r0, #0]
    ec2c:	8892      	ldrh	r2, [r2, #4]
    ec2e:	e008      	b.n	ec42 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    ec30:	7ce0      	ldrb	r0, [r4, #19]
    ec32:	e7dc      	b.n	ebee <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    ec34:	7ce0      	ldrb	r0, [r4, #19]
    ec36:	f040 0002 	orr.w	r0, r0, #2
    ec3a:	e7d8      	b.n	ebee <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    ec3c:	6832      	ldr	r2, [r6, #0]
    ec3e:	6002      	str	r2, [r0, #0]
    ec40:	88b2      	ldrh	r2, [r6, #4]
    ec42:	8082      	strh	r2, [r0, #4]
    ec44:	700d      	strb	r5, [r1, #0]
    ec46:	e000      	b.n	ec4a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    ec48:	7720      	strb	r0, [r4, #28]
    ec4a:	207f      	movs	r0, #127	; 0x7f
    ec4c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ec50:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    ec54:	f7f2 fb74 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ec58:	4605      	mov	r5, r0
    ec5a:	f7f2 fb77 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ec5e:	2201      	movs	r2, #1
    ec60:	4629      	mov	r1, r5
    ec62:	f000 f8d0 	bl	ee06 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    ec66:	b128      	cbz	r0, ec74 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    ec68:	4620      	mov	r0, r4
    ec6a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec6e:	2100      	movs	r1, #0
    ec70:	f7f5 be2e 	b.w	48d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d0>
    ec74:	f240 312b 	movw	r1, #811	; 0x32b
    ec78:	2033      	movs	r0, #51	; 0x33
    ec7a:	f7f1 fecf 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec7e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000ec82 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    ec82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec86:	461e      	mov	r6, r3
    ec88:	4617      	mov	r7, r2
    ec8a:	4689      	mov	r9, r1
    ec8c:	4682      	mov	sl, r0
    ec8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ec92:	f7f2 fb5b 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ec96:	4604      	mov	r4, r0
    ec98:	f7fe fc80 	bl	d59c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    ec9c:	2801      	cmp	r0, #1
    ec9e:	d039      	beq.n	ed14 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    eca0:	4620      	mov	r0, r4
    eca2:	f000 f8a7 	bl	edf4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    eca6:	4604      	mov	r4, r0
    eca8:	221c      	movs	r2, #28
    ecaa:	2100      	movs	r1, #0
    ecac:	3009      	adds	r0, #9
    ecae:	f001 ff05 	bl	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ecb2:	2501      	movs	r5, #1
    ecb4:	f104 030a 	add.w	r3, r4, #10
    ecb8:	7265      	strb	r5, [r4, #9]
    ecba:	1c5a      	adds	r2, r3, #1
    ecbc:	4649      	mov	r1, r9
    ecbe:	4650      	mov	r0, sl
    ecc0:	f000 f87d 	bl	edbe <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    ecc4:	f884 8012 	strb.w	r8, [r4, #18]
    ecc8:	7ce0      	ldrb	r0, [r4, #19]
    ecca:	21ff      	movs	r1, #255	; 0xff
    eccc:	f367 0000 	bfi	r0, r7, #0, #1
    ecd0:	f040 001a 	orr.w	r0, r0, #26
    ecd4:	74e0      	strb	r0, [r4, #19]
    ecd6:	7565      	strb	r5, [r4, #21]
    ecd8:	2000      	movs	r0, #0
    ecda:	75a0      	strb	r0, [r4, #22]
    ecdc:	75e1      	strb	r1, [r4, #23]
    ecde:	7721      	strb	r1, [r4, #28]
    ece0:	207f      	movs	r0, #127	; 0x7f
    ece2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ece6:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    ecea:	f7f2 fb29 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ecee:	4605      	mov	r5, r0
    ecf0:	f7f2 fb2c 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ecf4:	2201      	movs	r2, #1
    ecf6:	4629      	mov	r1, r5
    ecf8:	f000 f885 	bl	ee06 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    ecfc:	b128      	cbz	r0, ed0a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    ecfe:	4620      	mov	r0, r4
    ed00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ed04:	2100      	movs	r1, #0
    ed06:	f7f5 bde3 	b.w	48d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d0>
    ed0a:	f44f 7156 	mov.w	r1, #856	; 0x358
    ed0e:	2033      	movs	r0, #51	; 0x33
    ed10:	f7f1 fe84 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ed18 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    ed18:	f7ff bf23 	b.w	eb62 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    ed1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed1e:	b08b      	sub	sp, #44	; 0x2c
    ed20:	460f      	mov	r7, r1
    ed22:	f7f2 fb13 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ed26:	4604      	mov	r4, r0
    ed28:	f7fe fc89 	bl	d63e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ed2c:	0005      	movs	r5, r0
    ed2e:	d00c      	beq.n	ed4a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    ed30:	4620      	mov	r0, r4
    ed32:	4629      	mov	r1, r5
    ed34:	aa0a      	add	r2, sp, #40	; 0x28
    ed36:	f7fe fca0 	bl	d67a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ed3a:	4606      	mov	r6, r0
    ed3c:	f7f2 fb00 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ed40:	42b0      	cmp	r0, r6
    ed42:	d005      	beq.n	ed50 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    ed44:	f240 11ab 	movw	r1, #427	; 0x1ab
    ed48:	e036      	b.n	edb8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    ed4a:	f240 11a1 	movw	r1, #417	; 0x1a1
    ed4e:	e033      	b.n	edb8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    ed50:	4669      	mov	r1, sp
    ed52:	980a      	ldr	r0, [sp, #40]	; 0x28
    ed54:	f000 f859 	bl	ee0a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ed58:	1d3e      	adds	r6, r7, #4
    ed5a:	4628      	mov	r0, r5
    ed5c:	f7fe fc1c 	bl	d598 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ed60:	4605      	mov	r5, r0
    ed62:	f100 0109 	add.w	r1, r0, #9
    ed66:	221c      	movs	r2, #28
    ed68:	4630      	mov	r0, r6
    ed6a:	f001 fe2d 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed6e:	7ce8      	ldrb	r0, [r5, #19]
    ed70:	f04f 0500 	mov.w	r5, #0
    ed74:	06c1      	lsls	r1, r0, #27
    ed76:	d50d      	bpl.n	ed94 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ed78:	0740      	lsls	r0, r0, #29
    ed7a:	d40a      	bmi.n	ed92 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    ed7c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ed80:	f106 001c 	add.w	r0, r6, #28
    ed84:	9903      	ldr	r1, [sp, #12]
    ed86:	f001 fe1f 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed8a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ed8e:	7230      	strb	r0, [r6, #8]
    ed90:	e000      	b.n	ed94 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ed92:	7235      	strb	r5, [r6, #8]
    ed94:	707d      	strb	r5, [r7, #1]
    ed96:	2005      	movs	r0, #5
    ed98:	7038      	strb	r0, [r7, #0]
    ed9a:	4638      	mov	r0, r7
    ed9c:	f7f5 fd28 	bl	47f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7f0>
    eda0:	4620      	mov	r0, r4
    eda2:	f7fe fc14 	bl	d5ce <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    eda6:	b128      	cbz	r0, edb4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    eda8:	4620      	mov	r0, r4
    edaa:	2100      	movs	r1, #0
    edac:	f7fe fd03 	bl	d7b6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    edb0:	b00b      	add	sp, #44	; 0x2c
    edb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    edb4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    edb8:	2033      	movs	r0, #51	; 0x33
    edba:	f7f1 fe2f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edbe:	b510      	push	{r4, lr}
    edc0:	461c      	mov	r4, r3
    edc2:	460b      	mov	r3, r1
    edc4:	29ff      	cmp	r1, #255	; 0xff
    edc6:	d00d      	beq.n	ede4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    edc8:	4621      	mov	r1, r4
    edca:	4618      	mov	r0, r3
    edcc:	f7f3 fa92 	bl	22f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    edd0:	b120      	cbz	r0, eddc <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    edd2:	7820      	ldrb	r0, [r4, #0]
    edd4:	f040 0002 	orr.w	r0, r0, #2
    edd8:	7020      	strb	r0, [r4, #0]
    edda:	bd10      	pop	{r4, pc}
    eddc:	21dc      	movs	r1, #220	; 0xdc
    edde:	2033      	movs	r0, #51	; 0x33
    ede0:	f7f1 fe1c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ede4:	7c41      	ldrb	r1, [r0, #17]
    ede6:	7021      	strb	r1, [r4, #0]
    ede8:	6840      	ldr	r0, [r0, #4]
    edea:	6801      	ldr	r1, [r0, #0]
    edec:	6011      	str	r1, [r2, #0]
    edee:	8880      	ldrh	r0, [r0, #4]
    edf0:	8090      	strh	r0, [r2, #4]
    edf2:	bd10      	pop	{r4, pc}
    edf4:	b51c      	push	{r2, r3, r4, lr}
    edf6:	4669      	mov	r1, sp
    edf8:	aa01      	add	r2, sp, #4
    edfa:	f7fe fc30 	bl	d65e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    edfe:	9800      	ldr	r0, [sp, #0]
    ee00:	f7fe fbca 	bl	d598 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ee04:	bd1c      	pop	{r2, r3, r4, pc}
    ee06:	f7fe bb7e 	b.w	d506 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000ee0a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    ee0a:	7802      	ldrb	r2, [r0, #0]
    ee0c:	f002 020f 	and.w	r2, r2, #15
    ee10:	f7f5 bd66 	b.w	48e0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000ee14 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    ee14:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ee16:	256e      	movs	r5, #110	; 0x6e
    ee18:	4668      	mov	r0, sp
    ee1a:	f7fd fd61 	bl	c8e0 <mpsl_fem_pa_is_configured>
    ee1e:	f89d 0000 	ldrb.w	r0, [sp]
    ee22:	b108      	cbz	r0, ee28 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    ee24:	2401      	movs	r4, #1
    ee26:	e000      	b.n	ee2a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    ee28:	2400      	movs	r4, #0
    ee2a:	a801      	add	r0, sp, #4
    ee2c:	f7fd fd40 	bl	c8b0 <mpsl_fem_lna_is_configured>
    ee30:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ee34:	b100      	cbz	r0, ee38 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    ee36:	2001      	movs	r0, #1
    ee38:	4304      	orrs	r4, r0
    ee3a:	d000      	beq.n	ee3e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    ee3c:	2578      	movs	r5, #120	; 0x78
    ee3e:	4628      	mov	r0, r5
    ee40:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ee42 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    ee42:	b510      	push	{r4, lr}
    ee44:	f7ff ffe6 	bl	ee14 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    ee48:	306b      	adds	r0, #107	; 0x6b
    ee4a:	b280      	uxth	r0, r0
    ee4c:	bd10      	pop	{r4, pc}
    ee4e:	6980      	ldr	r0, [r0, #24]
    ee50:	2800      	cmp	r0, #0
    ee52:	d000      	beq.n	ee56 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    ee54:	2001      	movs	r0, #1
    ee56:	4770      	bx	lr
    ee58:	b510      	push	{r4, lr}
    ee5a:	2802      	cmp	r0, #2
    ee5c:	d007      	beq.n	ee6e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2c>
    ee5e:	2108      	movs	r1, #8
    ee60:	2801      	cmp	r0, #1
    ee62:	d006      	beq.n	ee72 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x30>
    ee64:	f44f 7182 	mov.w	r1, #260	; 0x104
    ee68:	2005      	movs	r0, #5
    ee6a:	f7f1 fdd7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee6e:	2104      	movs	r1, #4
    ee70:	e7f6      	b.n	ee60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    ee72:	202a      	movs	r0, #42	; 0x2a
    ee74:	2228      	movs	r2, #40	; 0x28
    ee76:	fb11 2000 	smlabb	r0, r1, r0, r2
    ee7a:	b280      	uxth	r0, r0
    ee7c:	bd10      	pop	{r4, pc}
    ee7e:	9800      	ldr	r0, [sp, #0]
    ee80:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    ee84:	1810      	adds	r0, r2, r0
    ee86:	f143 0300 	adc.w	r3, r3, #0
    ee8a:	1840      	adds	r0, r0, r1
    ee8c:	f143 0100 	adc.w	r1, r3, #0
    ee90:	3833      	subs	r0, #51	; 0x33
    ee92:	f161 0100 	sbc.w	r1, r1, #0
    ee96:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ee9a:	1880      	adds	r0, r0, r2
    ee9c:	f141 0100 	adc.w	r1, r1, #0
    eea0:	4770      	bx	lr
    eea2:	b510      	push	{r4, lr}
    eea4:	f7ff ffb6 	bl	ee14 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eea8:	f500 7083 	add.w	r0, r0, #262	; 0x106
    eeac:	b280      	uxth	r0, r0
    eeae:	bd10      	pop	{r4, pc}
    eeb0:	f7fb b980 	b.w	a1b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eeb4:	1a10      	subs	r0, r2, r0
    eeb6:	4770      	bx	lr

0000eeb8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    eeb8:	b510      	push	{r4, lr}
    eeba:	2905      	cmp	r1, #5
    eebc:	d22d      	bcs.n	ef1a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    eebe:	e8df f001 	tbb	[pc, r1]
    eec2:	0a05      	.short	0x0a05
    eec4:	00280e03 	.word	0x00280e03
    eec8:	2100      	movs	r1, #0
    eeca:	e000      	b.n	eece <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    eecc:	2101      	movs	r1, #1
    eece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eed2:	f7f6 bbaf 	b.w	5634 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x134>
    eed6:	2103      	movs	r1, #3
    eed8:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    eedc:	bd10      	pop	{r4, pc}
    eede:	4604      	mov	r4, r0
    eee0:	6900      	ldr	r0, [r0, #16]
    eee2:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    eee6:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    eeea:	6220      	str	r0, [r4, #32]
    eeec:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    eef0:	84a0      	strh	r0, [r4, #36]	; 0x24
    eef2:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    eef6:	6120      	str	r0, [r4, #16]
    eef8:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    eefc:	8320      	strh	r0, [r4, #24]
    eefe:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    ef02:	8360      	strh	r0, [r4, #26]
    ef04:	4620      	mov	r0, r4
    ef06:	f000 f83f 	bl	ef88 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x54>
    ef0a:	2002      	movs	r0, #2
    ef0c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ef10:	bd10      	pop	{r4, pc}
    ef12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef16:	f000 b837 	b.w	ef88 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x54>
    ef1a:	f240 312b 	movw	r1, #811	; 0x32b
    ef1e:	2035      	movs	r0, #53	; 0x35
    ef20:	f7f1 fd7c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef24 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    ef24:	b510      	push	{r4, lr}
    ef26:	f7f6 fb03 	bl	5530 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    ef2a:	2000      	movs	r0, #0
    ef2c:	bd10      	pop	{r4, pc}

0000ef2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    ef2e:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    ef32:	4770      	bx	lr

0000ef34 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA>:
    ef34:	b510      	push	{r4, lr}
    ef36:	b086      	sub	sp, #24
    ef38:	0004      	movs	r4, r0
    ef3a:	d005      	beq.n	ef48 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x14>
    ef3c:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ef40:	b128      	cbz	r0, ef4e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1a>
    ef42:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    ef46:	e015      	b.n	ef74 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x40>
    ef48:	f240 11b1 	movw	r1, #433	; 0x1b1
    ef4c:	e012      	b.n	ef74 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x40>
    ef4e:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    ef52:	2820      	cmp	r0, #32
    ef54:	d011      	beq.n	ef7a <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x46>
    ef56:	2300      	movs	r3, #0
    ef58:	2201      	movs	r2, #1
    ef5a:	4621      	mov	r1, r4
    ef5c:	4668      	mov	r0, sp
    ef5e:	f000 f866 	bl	f02e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xfa>
    ef62:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    ef66:	4669      	mov	r1, sp
    ef68:	f000 f930 	bl	f1cc <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x298>
    ef6c:	2800      	cmp	r0, #0
    ef6e:	d107      	bne.n	ef80 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x4c>
    ef70:	f240 11b7 	movw	r1, #439	; 0x1b7
    ef74:	2035      	movs	r0, #53	; 0x35
    ef76:	f7f1 fd51 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef7a:	f240 11b3 	movw	r1, #435	; 0x1b3
    ef7e:	e7f9      	b.n	ef74 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x40>
    ef80:	b006      	add	sp, #24
    ef82:	bd10      	pop	{r4, pc}
    ef84:	2000      	movs	r0, #0
    ef86:	4770      	bx	lr
    ef88:	b510      	push	{r4, lr}
    ef8a:	4604      	mov	r4, r0
    ef8c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ef90:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ef94:	f7f6 fb6a 	bl	566c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x16c>
    ef98:	4601      	mov	r1, r0
    ef9a:	4620      	mov	r0, r4
    ef9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efa0:	f7ff ba70 	b.w	e484 <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    efa4:	b510      	push	{r4, lr}
    efa6:	0004      	movs	r4, r0
    efa8:	d008      	beq.n	efbc <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x88>
    efaa:	2909      	cmp	r1, #9
    efac:	d23b      	bcs.n	f026 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xf2>
    efae:	e8df f001 	tbb	[pc, r1]
    efb2:	1808      	.short	0x1808
    efb4:	3a1c2020 	.word	0x3a1c2020
    efb8:	00352e27 	.word	0x00352e27
    efbc:	f240 1101 	movw	r1, #257	; 0x101
    efc0:	e02e      	b.n	f020 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xec>
    efc2:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    efc6:	b148      	cbz	r0, efdc <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xa8>
    efc8:	4620      	mov	r0, r4
    efca:	f7f6 fc35 	bl	5838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    efce:	2800      	cmp	r0, #0
    efd0:	d02c      	beq.n	f02c <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xf8>
    efd2:	4620      	mov	r0, r4
    efd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efd8:	f7f6 bae8 	b.w	55ac <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xac>
    efdc:	f240 1109 	movw	r1, #265	; 0x109
    efe0:	e01e      	b.n	f020 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xec>
    efe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efe6:	f000 b923 	b.w	f230 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    efea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efee:	f7f9 ba8b 	b.w	8508 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    eff2:	4620      	mov	r0, r4
    eff4:	2201      	movs	r2, #1
    eff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    effa:	2100      	movs	r1, #0
    effc:	f000 b8cf 	b.w	f19e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x26a>
    f000:	2001      	movs	r0, #1
    f002:	f7fa fe7f 	bl	9d04 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f00a:	f7fe bddd 	b.w	dbc8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    f00e:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f012:	2804      	cmp	r0, #4
    f014:	d00a      	beq.n	f02c <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xf8>
    f016:	f240 112f 	movw	r1, #303	; 0x12f
    f01a:	e001      	b.n	f020 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xec>
    f01c:	f44f 719a 	mov.w	r1, #308	; 0x134
    f020:	2035      	movs	r0, #53	; 0x35
    f022:	f7f1 fcfb 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f026:	f44f 719c 	mov.w	r1, #312	; 0x138
    f02a:	e7f9      	b.n	f020 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xec>
    f02c:	bd10      	pop	{r4, pc}
    f02e:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f032:	469a      	mov	sl, r3
    f034:	4691      	mov	r9, r2
    f036:	460c      	mov	r4, r1
    f038:	4606      	mov	r6, r0
    f03a:	2500      	movs	r5, #0
    f03c:	f7ff feea 	bl	ee14 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f040:	4680      	mov	r8, r0
    f042:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    f046:	280d      	cmp	r0, #13
    f048:	d017      	beq.n	f07a <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x146>
    f04a:	280e      	cmp	r0, #14
    f04c:	d015      	beq.n	f07a <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x146>
    f04e:	2000      	movs	r0, #0
    f050:	4683      	mov	fp, r0
    f052:	f1ba 0f00 	cmp.w	sl, #0
    f056:	d003      	beq.n	f060 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x12c>
    f058:	2101      	movs	r1, #1
    f05a:	4620      	mov	r0, r4
    f05c:	f7f6 fc66 	bl	592c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    f060:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f064:	2701      	movs	r7, #1
    f066:	b150      	cbz	r0, f07e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x14a>
    f068:	2801      	cmp	r0, #1
    f06a:	d01a      	beq.n	f0a2 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x16e>
    f06c:	2802      	cmp	r0, #2
    f06e:	d012      	beq.n	f096 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x162>
    f070:	2803      	cmp	r0, #3
    f072:	d016      	beq.n	f0a2 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x16e>
    f074:	f44f 7119 	mov.w	r1, #612	; 0x264
    f078:	e08e      	b.n	f198 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x264>
    f07a:	2001      	movs	r0, #1
    f07c:	e7e8      	b.n	f050 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x11c>
    f07e:	f1b9 0f00 	cmp.w	r9, #0
    f082:	d005      	beq.n	f090 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x15c>
    f084:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    f088:	4620      	mov	r0, r4
    f08a:	f7ff ff7d 	bl	ef88 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x54>
    f08e:	e009      	b.n	f0a4 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x170>
    f090:	f44f 710b 	mov.w	r1, #556	; 0x22c
    f094:	e080      	b.n	f198 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x264>
    f096:	2003      	movs	r0, #3
    f098:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    f09c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f0a0:	e000      	b.n	f0a4 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x170>
    f0a2:	6925      	ldr	r5, [r4, #16]
    f0a4:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    f0a8:	f04f 0900 	mov.w	r9, #0
    f0ac:	1949      	adds	r1, r1, r5
    f0ae:	eb40 0009 	adc.w	r0, r0, r9
    f0b2:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    f0b6:	e9c6 1004 	strd	r1, r0, [r6, #16]
    f0ba:	f886 9000 	strb.w	r9, [r6]
    f0be:	f8a6 8008 	strh.w	r8, [r6, #8]
    f0c2:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    f0c6:	280d      	cmp	r0, #13
    f0c8:	d02b      	beq.n	f122 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1ee>
    f0ca:	280b      	cmp	r0, #11
    f0cc:	d029      	beq.n	f122 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1ee>
    f0ce:	2825      	cmp	r0, #37	; 0x25
    f0d0:	d027      	beq.n	f122 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1ee>
    f0d2:	2000      	movs	r0, #0
    f0d4:	4680      	mov	r8, r0
    f0d6:	4620      	mov	r0, r4
    f0d8:	f7f6 faf4 	bl	56c4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    f0dc:	4601      	mov	r1, r0
    f0de:	f1a8 0001 	sub.w	r0, r8, #1
    f0e2:	4201      	tst	r1, r0
    f0e4:	d102      	bne.n	f0ec <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1b8>
    f0e6:	f886 900a 	strb.w	r9, [r6, #10]
    f0ea:	e005      	b.n	f0f8 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1c4>
    f0ec:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f0f0:	2801      	cmp	r0, #1
    f0f2:	d018      	beq.n	f126 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1f2>
    f0f4:	2002      	movs	r0, #2
    f0f6:	72b0      	strb	r0, [r6, #10]
    f0f8:	72f7      	strb	r7, [r6, #11]
    f0fa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f0fe:	f7ff f9bf 	bl	e480 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    f102:	6070      	str	r0, [r6, #4]
    f104:	ea3a 000b 	bics.w	r0, sl, fp
    f108:	d042      	beq.n	f190 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x25c>
    f10a:	4629      	mov	r1, r5
    f10c:	4630      	mov	r0, r6
    f10e:	f7fe feff 	bl	df10 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f112:	b287      	uxth	r7, r0
    f114:	4620      	mov	r0, r4
    f116:	f7f6 fad5 	bl	56c4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    f11a:	f1b8 0f00 	cmp.w	r8, #0
    f11e:	d004      	beq.n	f12a <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1f6>
    f120:	e018      	b.n	f154 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x220>
    f122:	2001      	movs	r0, #1
    f124:	e7d6      	b.n	f0d4 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1a0>
    f126:	72b7      	strb	r7, [r6, #10]
    f128:	e7e6      	b.n	f0f8 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1c4>
    f12a:	42b8      	cmp	r0, r7
    f12c:	d812      	bhi.n	f154 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x220>
    f12e:	f886 900a 	strb.w	r9, [r6, #10]
    f132:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    f136:	4607      	mov	r7, r0
    f138:	fb05 f107 	mul.w	r1, r5, r7
    f13c:	1859      	adds	r1, r3, r1
    f13e:	eb42 0209 	adc.w	r2, r2, r9
    f142:	e9c6 1204 	strd	r1, r2, [r6, #16]
    f146:	b32d      	cbz	r5, f194 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x260>
    f148:	4629      	mov	r1, r5
    f14a:	4630      	mov	r0, r6
    f14c:	f7fe fee0 	bl	df10 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f150:	4438      	add	r0, r7
    f152:	b287      	uxth	r7, r0
    f154:	4639      	mov	r1, r7
    f156:	4620      	mov	r0, r4
    f158:	f7f6 fbe8 	bl	592c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    f15c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    f160:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    f164:	6f20      	ldr	r0, [r4, #112]	; 0x70
    f166:	2800      	cmp	r0, #0
    f168:	d012      	beq.n	f190 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x25c>
    f16a:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    f16e:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    f172:	1a80      	subs	r0, r0, r2
    f174:	b201      	sxth	r1, r0
    f176:	2900      	cmp	r1, #0
    f178:	dd0a      	ble.n	f190 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x25c>
    f17a:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    f17e:	4401      	add	r1, r0
    f180:	1e49      	subs	r1, r1, #1
    f182:	fb91 f1f0 	sdiv	r1, r1, r0
    f186:	b289      	uxth	r1, r1
    f188:	fb01 2000 	mla	r0, r1, r0, r2
    f18c:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    f190:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    f194:	f240 21a6 	movw	r1, #678	; 0x2a6
    f198:	2035      	movs	r0, #53	; 0x35
    f19a:	f7f1 fc3f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f19e:	b510      	push	{r4, lr}
    f1a0:	4613      	mov	r3, r2
    f1a2:	460a      	mov	r2, r1
    f1a4:	b086      	sub	sp, #24
    f1a6:	4604      	mov	r4, r0
    f1a8:	4601      	mov	r1, r0
    f1aa:	4668      	mov	r0, sp
    f1ac:	f7ff ff3f 	bl	f02e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xfa>
    f1b0:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f1b4:	4669      	mov	r1, sp
    f1b6:	f000 f809 	bl	f1cc <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x298>
    f1ba:	2800      	cmp	r0, #0
    f1bc:	d104      	bne.n	f1c8 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x294>
    f1be:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    f1c2:	2035      	movs	r0, #53	; 0x35
    f1c4:	f7f1 fc2a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1c8:	b006      	add	sp, #24
    f1ca:	bd10      	pop	{r4, pc}
    f1cc:	f7fa bff2 	b.w	a1b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f1d0:	a62c0000 	.word	0xa62c0000
    f1d4:	a1e0      	.short	0xa1e0
    f1d6:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f1da:	f001 0307 	and.w	r3, r1, #7
    f1de:	7802      	ldrb	r2, [r0, #0]
    f1e0:	2101      	movs	r1, #1
    f1e2:	4099      	lsls	r1, r3
    f1e4:	438a      	bics	r2, r1
    f1e6:	7002      	strb	r2, [r0, #0]
    f1e8:	4770      	bx	lr

0000f1ea <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f1ea:	b510      	push	{r4, lr}
    f1ec:	460c      	mov	r4, r1
    f1ee:	f7f2 f807 	bl	1200 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    f1f2:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f1f6:	2820      	cmp	r0, #32
    f1f8:	d006      	beq.n	f208 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x1e>
    f1fa:	f7fb fda3 	bl	ad44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f1fe:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f202:	f7fb fd7d 	bl	ad00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f206:	b158      	cbz	r0, f220 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x36>
    f208:	f504 700a 	add.w	r0, r4, #552	; 0x228
    f20c:	4604      	mov	r4, r0
    f20e:	f7f7 fea1 	bl	6f54 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>
    f212:	2800      	cmp	r0, #0
    f214:	d009      	beq.n	f22a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x40>
    f216:	4620      	mov	r0, r4
    f218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f21c:	f7f7 bea8 	b.w	6f70 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    f220:	f640 318a 	movw	r1, #2954	; 0xb8a
    f224:	2036      	movs	r0, #54	; 0x36
    f226:	f7f1 fbf9 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f22a:	bd10      	pop	{r4, pc}

0000f22c <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    f22c:	2000      	movs	r0, #0
    f22e:	4770      	bx	lr

0000f230 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    f230:	b510      	push	{r4, lr}
    f232:	f7f7 f877 	bl	6324 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9f8>
    f236:	b128      	cbz	r0, f244 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    f238:	2000      	movs	r0, #0
    f23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f23e:	4601      	mov	r1, r0
    f240:	f7f7 b818 	b.w	6274 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x948>
    f244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f248:	f7f2 bbe0 	b.w	1a0c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>
    f24c:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f250:	28fe      	cmp	r0, #254	; 0xfe
    f252:	d001      	beq.n	f258 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    f254:	2001      	movs	r0, #1
    f256:	4770      	bx	lr
    f258:	2000      	movs	r0, #0
    f25a:	4770      	bx	lr
    f25c:	b510      	push	{r4, lr}
    f25e:	2801      	cmp	r0, #1
    f260:	d006      	beq.n	f270 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f262:	2802      	cmp	r0, #2
    f264:	d004      	beq.n	f270 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f266:	f240 21d7 	movw	r1, #727	; 0x2d7
    f26a:	2006      	movs	r0, #6
    f26c:	f7f1 fbd6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f270:	bd10      	pop	{r4, pc}
    f272:	2801      	cmp	r0, #1
    f274:	d002      	beq.n	f27c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    f276:	2802      	cmp	r0, #2
    f278:	d105      	bne.n	f286 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f27a:	e002      	b.n	f282 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    f27c:	2901      	cmp	r1, #1
    f27e:	d004      	beq.n	f28a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f280:	e001      	b.n	f286 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f282:	2902      	cmp	r1, #2
    f284:	d001      	beq.n	f28a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f286:	2000      	movs	r0, #0
    f288:	4770      	bx	lr
    f28a:	2001      	movs	r0, #1
    f28c:	4770      	bx	lr
    f28e:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    f292:	428a      	cmp	r2, r1
    f294:	d301      	bcc.n	f29a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    f296:	1a51      	subs	r1, r2, r1
    f298:	e000      	b.n	f29c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    f29a:	2100      	movs	r1, #0
    f29c:	8b02      	ldrh	r2, [r0, #24]
    f29e:	1d52      	adds	r2, r2, #5
    f2a0:	428a      	cmp	r2, r1
    f2a2:	d302      	bcc.n	f2aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    f2a4:	2101      	movs	r1, #1
    f2a6:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    f2aa:	4770      	bx	lr
    f2ac:	6841      	ldr	r1, [r0, #4]
    f2ae:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f2b2:	2a10      	cmp	r2, #16
    f2b4:	d001      	beq.n	f2ba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x8a>
    f2b6:	2002      	movs	r0, #2
    f2b8:	4770      	bx	lr
    f2ba:	2200      	movs	r2, #0
    f2bc:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    f2c0:	6840      	ldr	r0, [r0, #4]
    f2c2:	2113      	movs	r1, #19
    f2c4:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f2c8:	4610      	mov	r0, r2
    f2ca:	4770      	bx	lr
    f2cc:	b510      	push	{r4, lr}
    f2ce:	4604      	mov	r4, r0
    f2d0:	6840      	ldr	r0, [r0, #4]
    f2d2:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f2d6:	2917      	cmp	r1, #23
    f2d8:	d001      	beq.n	f2de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    f2da:	2002      	movs	r0, #2
    f2dc:	bd10      	pop	{r4, pc}
    f2de:	f500 7388 	add.w	r3, r0, #272	; 0x110
    f2e2:	f200 2193 	addw	r1, r0, #659	; 0x293
    f2e6:	2200      	movs	r2, #0
    f2e8:	f200 2083 	addw	r0, r0, #643	; 0x283
    f2ec:	f7fe fcae 	bl	dc4c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f2f0:	6862      	ldr	r2, [r4, #4]
    f2f2:	2000      	movs	r0, #0
    f2f4:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    f2f8:	6861      	ldr	r1, [r4, #4]
    f2fa:	2001      	movs	r0, #1
    f2fc:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    f300:	6861      	ldr	r1, [r4, #4]
    f302:	2019      	movs	r0, #25
    f304:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f308:	2000      	movs	r0, #0
    f30a:	bd10      	pop	{r4, pc}
    f30c:	b510      	push	{r4, lr}
    f30e:	4604      	mov	r4, r0
    f310:	6840      	ldr	r0, [r0, #4]
    f312:	2300      	movs	r3, #0
    f314:	4619      	mov	r1, r3
    f316:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f31a:	3088      	adds	r0, #136	; 0x88
    f31c:	f7fe fce8 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f320:	b120      	cbz	r0, f32c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xfc>
    f322:	6861      	ldr	r1, [r4, #4]
    f324:	200b      	movs	r0, #11
    f326:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f32a:	bd10      	pop	{r4, pc}
    f32c:	f44f 61da 	mov.w	r1, #1744	; 0x6d0
    f330:	2036      	movs	r0, #54	; 0x36
    f332:	f7f1 fb73 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f336:	b510      	push	{r4, lr}
    f338:	4604      	mov	r4, r0
    f33a:	6840      	ldr	r0, [r0, #4]
    f33c:	2300      	movs	r3, #0
    f33e:	4619      	mov	r1, r3
    f340:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f344:	3088      	adds	r0, #136	; 0x88
    f346:	f7fe fcd3 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f34a:	b120      	cbz	r0, f356 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x126>
    f34c:	6861      	ldr	r1, [r4, #4]
    f34e:	200d      	movs	r0, #13
    f350:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f354:	bd10      	pop	{r4, pc}
    f356:	f240 61d6 	movw	r1, #1750	; 0x6d6
    f35a:	2036      	movs	r0, #54	; 0x36
    f35c:	f7f1 fb5e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f360:	b510      	push	{r4, lr}
    f362:	4604      	mov	r4, r0
    f364:	6840      	ldr	r0, [r0, #4]
    f366:	2300      	movs	r3, #0
    f368:	4619      	mov	r1, r3
    f36a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f36e:	3088      	adds	r0, #136	; 0x88
    f370:	f7fe fcbe 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f374:	b918      	cbnz	r0, f37e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    f376:	6860      	ldr	r0, [r4, #4]
    f378:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    f37c:	b140      	cbz	r0, f390 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    f37e:	6861      	ldr	r1, [r4, #4]
    f380:	2001      	movs	r0, #1
    f382:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f386:	6861      	ldr	r1, [r4, #4]
    f388:	2014      	movs	r0, #20
    f38a:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f38e:	bd10      	pop	{r4, pc}
    f390:	f240 61eb 	movw	r1, #1771	; 0x6eb
    f394:	2036      	movs	r0, #54	; 0x36
    f396:	f7f1 fb41 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f39a:	f7ff ba5f 	b.w	e85c <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f39e:	b510      	push	{r4, lr}
    f3a0:	4604      	mov	r4, r0
    f3a2:	6840      	ldr	r0, [r0, #4]
    f3a4:	2300      	movs	r3, #0
    f3a6:	4619      	mov	r1, r3
    f3a8:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f3ac:	3088      	adds	r0, #136	; 0x88
    f3ae:	f7fe fc9f 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f3b2:	b148      	cbz	r0, f3c8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x198>
    f3b4:	6861      	ldr	r1, [r4, #4]
    f3b6:	2000      	movs	r0, #0
    f3b8:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f3bc:	6860      	ldr	r0, [r4, #4]
    f3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3c2:	2104      	movs	r1, #4
    f3c4:	f7ff bd78 	b.w	eeb8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    f3c8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    f3cc:	2036      	movs	r0, #54	; 0x36
    f3ce:	f7f1 fb25 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3d2:	f7ff ba55 	b.w	e880 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f3d6:	b510      	push	{r4, lr}
    f3d8:	4604      	mov	r4, r0
    f3da:	6840      	ldr	r0, [r0, #4]
    f3dc:	2300      	movs	r3, #0
    f3de:	4619      	mov	r1, r3
    f3e0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f3e4:	3088      	adds	r0, #136	; 0x88
    f3e6:	f7fe fc83 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f3ea:	b140      	cbz	r0, f3fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1ce>
    f3ec:	6861      	ldr	r1, [r4, #4]
    f3ee:	2001      	movs	r0, #1
    f3f0:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f3f4:	6861      	ldr	r1, [r4, #4]
    f3f6:	2010      	movs	r0, #16
    f3f8:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f3fc:	bd10      	pop	{r4, pc}
    f3fe:	f240 61dc 	movw	r1, #1756	; 0x6dc
    f402:	2036      	movs	r0, #54	; 0x36
    f404:	f7f1 fb0a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f408:	b510      	push	{r4, lr}
    f40a:	6841      	ldr	r1, [r0, #4]
    f40c:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f410:	2a13      	cmp	r2, #19
    f412:	d004      	beq.n	f41e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1ee>
    f414:	f240 61e4 	movw	r1, #1764	; 0x6e4
    f418:	2036      	movs	r0, #54	; 0x36
    f41a:	f7f1 faff 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f41e:	2201      	movs	r2, #1
    f420:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f424:	6840      	ldr	r0, [r0, #4]
    f426:	2112      	movs	r1, #18
    f428:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f42c:	bd10      	pop	{r4, pc}
    f42e:	b570      	push	{r4, r5, r6, lr}
    f430:	6841      	ldr	r1, [r0, #4]
    f432:	4604      	mov	r4, r0
    f434:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f438:	b910      	cbnz	r0, f440 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x210>
    f43a:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f43e:	b178      	cbz	r0, f460 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x230>
    f440:	2000      	movs	r0, #0
    f442:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f446:	2225      	movs	r2, #37	; 0x25
    f448:	2500      	movs	r5, #0
    f44a:	2b22      	cmp	r3, #34	; 0x22
    f44c:	d00a      	beq.n	f464 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x234>
    f44e:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f452:	2b24      	cmp	r3, #36	; 0x24
    f454:	d01b      	beq.n	f48e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x25e>
    f456:	f240 712f 	movw	r1, #1839	; 0x72f
    f45a:	2036      	movs	r0, #54	; 0x36
    f45c:	f7f1 fade 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f460:	2001      	movs	r0, #1
    f462:	e7ee      	b.n	f442 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x212>
    f464:	b168      	cbz	r0, f482 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x252>
    f466:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f46a:	6860      	ldr	r0, [r4, #4]
    f46c:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f470:	2801      	cmp	r0, #1
    f472:	d102      	bne.n	f47a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f474:	2000      	movs	r0, #0
    f476:	f7f7 f917 	bl	66a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    f47a:	6860      	ldr	r0, [r4, #4]
    f47c:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f480:	e001      	b.n	f486 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x256>
    f482:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f486:	6860      	ldr	r0, [r4, #4]
    f488:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f48c:	bd70      	pop	{r4, r5, r6, pc}
    f48e:	b128      	cbz	r0, f49c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x26c>
    f490:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f494:	2000      	movs	r0, #0
    f496:	f7f7 f907 	bl	66a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    f49a:	e001      	b.n	f4a0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x270>
    f49c:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f4a0:	6860      	ldr	r0, [r4, #4]
    f4a2:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f4a6:	bd70      	pop	{r4, r5, r6, pc}
    f4a8:	6842      	ldr	r2, [r0, #4]
    f4aa:	2100      	movs	r1, #0
    f4ac:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f4b0:	b12b      	cbz	r3, f4be <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28e>
    f4b2:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f4b6:	6840      	ldr	r0, [r0, #4]
    f4b8:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f4bc:	4770      	bx	lr
    f4be:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f4c2:	6840      	ldr	r0, [r0, #4]
    f4c4:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f4c8:	4770      	bx	lr
    f4ca:	b510      	push	{r4, lr}
    f4cc:	6840      	ldr	r0, [r0, #4]
    f4ce:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f4d2:	2919      	cmp	r1, #25
    f4d4:	d004      	beq.n	f4e0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2b0>
    f4d6:	f240 61f4 	movw	r1, #1780	; 0x6f4
    f4da:	2036      	movs	r0, #54	; 0x36
    f4dc:	f7f1 fa9e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4e0:	211b      	movs	r1, #27
    f4e2:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f4e6:	bd10      	pop	{r4, pc}
    f4e8:	6841      	ldr	r1, [r0, #4]
    f4ea:	2200      	movs	r2, #0
    f4ec:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f4f0:	2b03      	cmp	r3, #3
    f4f2:	d002      	beq.n	f4fa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ca>
    f4f4:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    f4f8:	4770      	bx	lr
    f4fa:	f881 20e0 	strb.w	r2, [r1, #224]	; 0xe0
    f4fe:	6840      	ldr	r0, [r0, #4]
    f500:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
    f504:	4770      	bx	lr
    f506:	f7ff ba3d 	b.w	e984 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f50a:	b510      	push	{r4, lr}
    f50c:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f510:	b941      	cbnz	r1, f524 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f512:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f516:	2300      	movs	r3, #0
    f518:	2106      	movs	r1, #6
    f51a:	3088      	adds	r0, #136	; 0x88
    f51c:	f7fe fbe8 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f520:	2800      	cmp	r0, #0
    f522:	d000      	beq.n	f526 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f6>
    f524:	2001      	movs	r0, #1
    f526:	bd10      	pop	{r4, pc}

0000f528 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f528:	b510      	push	{r4, lr}
    f52a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f52e:	1ac3      	subs	r3, r0, r3
    f530:	eb61 0104 	sbc.w	r1, r1, r4
    f534:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f538:	17e0      	asrs	r0, r4, #31
    f53a:	1ae4      	subs	r4, r4, r3
    f53c:	4188      	sbcs	r0, r1
    f53e:	da05      	bge.n	f54c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f540:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f544:	1a18      	subs	r0, r3, r0
    f546:	f171 0000 	sbcs.w	r0, r1, #0
    f54a:	db03      	blt.n	f554 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f54c:	21b6      	movs	r1, #182	; 0xb6
    f54e:	2037      	movs	r0, #55	; 0x37
    f550:	f7f1 fa64 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f554:	2900      	cmp	r1, #0
    f556:	da00      	bge.n	f55a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f558:	425b      	negs	r3, r3
    f55a:	fbb3 f0f2 	udiv	r0, r3, r2
    f55e:	fb02 3010 	mls	r0, r2, r0, r3
    f562:	2900      	cmp	r1, #0
    f564:	da02      	bge.n	f56c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f566:	2800      	cmp	r0, #0
    f568:	d000      	beq.n	f56c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f56a:	1a10      	subs	r0, r2, r0
    f56c:	bd10      	pop	{r4, pc}
    f56e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f572:	f001 0107 	and.w	r1, r1, #7
    f576:	7800      	ldrb	r0, [r0, #0]
    f578:	40c8      	lsrs	r0, r1
    f57a:	f000 0001 	and.w	r0, r0, #1
    f57e:	4770      	bx	lr

0000f580 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f580:	b510      	push	{r4, lr}
    f582:	2801      	cmp	r0, #1
    f584:	d006      	beq.n	f594 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f586:	2802      	cmp	r0, #2
    f588:	d006      	beq.n	f598 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f58a:	f240 2175 	movw	r1, #629	; 0x275
    f58e:	2078      	movs	r0, #120	; 0x78
    f590:	f7f1 fa44 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f594:	2000      	movs	r0, #0
    f596:	bd10      	pop	{r4, pc}
    f598:	2001      	movs	r0, #1
    f59a:	bd10      	pop	{r4, pc}

0000f59c <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f59c:	207f      	movs	r0, #127	; 0x7f
    f59e:	f000 b88e 	b.w	f6be <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f5a2 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f5a2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f5a6:	f000 b88a 	b.w	f6be <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f5aa <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f5aa:	b510      	push	{r4, lr}
    f5ac:	4604      	mov	r4, r0
    f5ae:	f7f8 f9db 	bl	7968 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f5b2:	1e64      	subs	r4, r4, #1
    f5b4:	b2e2      	uxtb	r2, r4
    f5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5ba:	f000 b85d 	b.w	f678 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f5be <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f5be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f5c2:	4607      	mov	r7, r0
    f5c4:	461e      	mov	r6, r3
    f5c6:	4690      	mov	r8, r2
    f5c8:	460c      	mov	r4, r1
    f5ca:	4608      	mov	r0, r1
    f5cc:	f7ff ffed 	bl	f5aa <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f5d0:	b1f8      	cbz	r0, f612 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f5d2:	687d      	ldr	r5, [r7, #4]
    f5d4:	2121      	movs	r1, #33	; 0x21
    f5d6:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f5da:	3588      	adds	r5, #136	; 0x88
    f5dc:	f7ff ffc7 	bl	f56e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f5e0:	b1c8      	cbz	r0, f616 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f5e2:	1e64      	subs	r4, r4, #1
    f5e4:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f5e8:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f5ec:	b2e2      	uxtb	r2, r4
    f5ee:	f000 f843 	bl	f678 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f5f2:	b180      	cbz	r0, f616 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f5f4:	6878      	ldr	r0, [r7, #4]
    f5f6:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f5fa:	f88d 1000 	strb.w	r1, [sp]
    f5fe:	9900      	ldr	r1, [sp, #0]
    f600:	9100      	str	r1, [sp, #0]
    f602:	f89d 1000 	ldrb.w	r1, [sp]
    f606:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f60a:	b131      	cbz	r1, f61a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f60c:	203a      	movs	r0, #58	; 0x3a
    f60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f612:	2011      	movs	r0, #17
    f614:	e7fb      	b.n	f60e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f616:	201a      	movs	r0, #26
    f618:	e7f9      	b.n	f60e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f61a:	1c81      	adds	r1, r0, #2
    f61c:	700e      	strb	r6, [r1, #0]
    f61e:	2101      	movs	r1, #1
    f620:	40a1      	lsls	r1, r4
    f622:	7001      	strb	r1, [r0, #0]
    f624:	f880 8001 	strb.w	r8, [r0, #1]
    f628:	2000      	movs	r0, #0
    f62a:	e7f0      	b.n	f60e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f62c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f630:	460d      	mov	r5, r1
    f632:	4606      	mov	r6, r0
    f634:	f7ff ffb2 	bl	f59c <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f638:	4607      	mov	r7, r0
    f63a:	f7ff ffb2 	bl	f5a2 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f63e:	2400      	movs	r4, #0
    f640:	4285      	cmp	r5, r0
    f642:	d100      	bne.n	f646 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f644:	2401      	movs	r4, #1
    f646:	42bd      	cmp	r5, r7
    f648:	d101      	bne.n	f64e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f64a:	f044 0402 	orr.w	r4, r4, #2
    f64e:	f000 f826 	bl	f69e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    f652:	2200      	movs	r2, #0
    f654:	4601      	mov	r1, r0
    f656:	2301      	movs	r3, #1
    f658:	fa03 f002 	lsl.w	r0, r3, r2
    f65c:	4208      	tst	r0, r1
    f65e:	d005      	beq.n	f66c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f660:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f664:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    f668:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    f66c:	1c52      	adds	r2, r2, #1
    f66e:	b2d2      	uxtb	r2, r2
    f670:	2a02      	cmp	r2, #2
    f672:	d3f1      	bcc.n	f658 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f678:	b510      	push	{r4, lr}
    f67a:	4614      	mov	r4, r2
    f67c:	4602      	mov	r2, r0
    f67e:	2000      	movs	r0, #0
    f680:	4603      	mov	r3, r0
    f682:	2c02      	cmp	r4, #2
    f684:	d205      	bcs.n	f692 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    f686:	4610      	mov	r0, r2
    f688:	f000 f810 	bl	f6ac <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f68c:	2101      	movs	r1, #1
    f68e:	40a1      	lsls	r1, r4
    f690:	b2cb      	uxtb	r3, r1
    f692:	4203      	tst	r3, r0
    f694:	d001      	beq.n	f69a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    f696:	2001      	movs	r0, #1
    f698:	bd10      	pop	{r4, pc}
    f69a:	2000      	movs	r0, #0
    f69c:	bd10      	pop	{r4, pc}
    f69e:	b510      	push	{r4, lr}
    f6a0:	f7f8 f962 	bl	7968 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6a8:	f000 b800 	b.w	f6ac <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f6ac:	0a00      	lsrs	r0, r0, #8
    f6ae:	2201      	movs	r2, #1
    f6b0:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f6b4:	07c0      	lsls	r0, r0, #31
    f6b6:	d000      	beq.n	f6ba <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    f6b8:	2203      	movs	r2, #3
    f6ba:	4610      	mov	r0, r2
    f6bc:	4770      	bx	lr
    f6be:	b508      	push	{r3, lr}
    f6c0:	2301      	movs	r3, #1
    f6c2:	f640 1288 	movw	r2, #2440	; 0x988
    f6c6:	4669      	mov	r1, sp
    f6c8:	f7fd f910 	bl	c8ec <mpsl_fem_tx_power_split>
    f6cc:	bd08      	pop	{r3, pc}
    f6ce:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f6d2:	f001 0107 	and.w	r1, r1, #7
    f6d6:	7800      	ldrb	r0, [r0, #0]
    f6d8:	40c8      	lsrs	r0, r1
    f6da:	f000 0001 	and.w	r0, r0, #1
    f6de:	4770      	bx	lr
    f6e0:	b118      	cbz	r0, f6ea <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f6e2:	2802      	cmp	r0, #2
    f6e4:	d001      	beq.n	f6ea <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f6e6:	2001      	movs	r0, #1
    f6e8:	4770      	bx	lr
    f6ea:	2000      	movs	r0, #0
    f6ec:	4770      	bx	lr

0000f6ee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f6ee:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f6f0:	7881      	ldrb	r1, [r0, #2]
    f6f2:	2500      	movs	r5, #0
    f6f4:	4604      	mov	r4, r0
    f6f6:	291a      	cmp	r1, #26
    f6f8:	d024      	beq.n	f744 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f6fa:	dc0e      	bgt.n	f71a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f6fc:	2916      	cmp	r1, #22
    f6fe:	d22b      	bcs.n	f758 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f700:	e8df f001 	tbb	[pc, r1]
    f704:	2a2a2a2a 	.word	0x2a2a2a2a
    f708:	2a2a202a 	.word	0x2a2a202a
    f70c:	2a2a2a2a 	.word	0x2a2a2a2a
    f710:	2a2a2a2a 	.word	0x2a2a2a2a
    f714:	202a2a2a 	.word	0x202a2a2a
    f718:	2020      	.short	0x2020
    f71a:	292a      	cmp	r1, #42	; 0x2a
    f71c:	d01c      	beq.n	f758 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f71e:	dc0b      	bgt.n	f738 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f720:	f1a1 011e 	sub.w	r1, r1, #30
    f724:	290c      	cmp	r1, #12
    f726:	d217      	bcs.n	f758 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f728:	e8df f001 	tbb	[pc, r1]
    f72c:	16161616 	.word	0x16161616
    f730:	16161616 	.word	0x16161616
    f734:	0c161616 	.word	0x0c161616
    f738:	393a      	subs	r1, #58	; 0x3a
    f73a:	2902      	cmp	r1, #2
    f73c:	d20c      	bcs.n	f758 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f73e:	e8df f001 	tbb	[pc, r1]
    f742:	010b      	.short	0x010b
    f744:	8820      	ldrh	r0, [r4, #0]
    f746:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f74a:	d205      	bcs.n	f758 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f74c:	4669      	mov	r1, sp
    f74e:	f7fe fab9 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f752:	b118      	cbz	r0, f75c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f754:	2002      	movs	r0, #2
    f756:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f758:	2012      	movs	r0, #18
    f75a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f75c:	9901      	ldr	r1, [sp, #4]
    f75e:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    f762:	f88d 0008 	strb.w	r0, [sp, #8]
    f766:	9802      	ldr	r0, [sp, #8]
    f768:	9002      	str	r0, [sp, #8]
    f76a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f76e:	f501 719c 	add.w	r1, r1, #312	; 0x138
    f772:	b108      	cbz	r0, f778 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    f774:	200c      	movs	r0, #12
    f776:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f778:	78a0      	ldrb	r0, [r4, #2]
    f77a:	7048      	strb	r0, [r1, #1]
    f77c:	20ff      	movs	r0, #255	; 0xff
    f77e:	7008      	strb	r0, [r1, #0]
    f780:	4628      	mov	r0, r5
    f782:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f784 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f784:	b510      	push	{r4, lr}
    f786:	4604      	mov	r4, r0
    f788:	7800      	ldrb	r0, [r0, #0]
    f78a:	b108      	cbz	r0, f790 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0xc>
    f78c:	2801      	cmp	r0, #1
    f78e:	d116      	bne.n	f7be <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    f790:	f000 fe13 	bl	103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    f794:	b120      	cbz	r0, f7a0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    f796:	f7f2 fda7 	bl	22e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f79a:	b108      	cbz	r0, f7a0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    f79c:	200c      	movs	r0, #12
    f79e:	bd10      	pop	{r4, pc}
    f7a0:	7820      	ldrb	r0, [r4, #0]
    f7a2:	f7ff ff9d 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f7a6:	2801      	cmp	r0, #1
    f7a8:	d10b      	bne.n	f7c2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    f7aa:	7820      	ldrb	r0, [r4, #0]
    f7ac:	f7ff ff98 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f7b0:	2801      	cmp	r0, #1
    f7b2:	d104      	bne.n	f7be <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    f7b4:	79a0      	ldrb	r0, [r4, #6]
    f7b6:	2103      	movs	r1, #3
    f7b8:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f7bc:	d001      	beq.n	f7c2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    f7be:	2012      	movs	r0, #18
    f7c0:	bd10      	pop	{r4, pc}
    f7c2:	7820      	ldrb	r0, [r4, #0]
    f7c4:	f7ff ff8c 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f7c8:	1de2      	adds	r2, r4, #7
    f7ca:	f104 0317 	add.w	r3, r4, #23
    f7ce:	1c61      	adds	r1, r4, #1
    f7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7d4:	f7f2 bda8 	b.w	2328 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f7d8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f7d8:	b510      	push	{r4, lr}
    f7da:	4604      	mov	r4, r0
    f7dc:	f000 fe1e 	bl	1041c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    f7e0:	b108      	cbz	r0, f7e6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f7e2:	200c      	movs	r0, #12
    f7e4:	bd10      	pop	{r4, pc}
    f7e6:	7820      	ldrb	r0, [r4, #0]
    f7e8:	b118      	cbz	r0, f7f2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f7ea:	2801      	cmp	r0, #1
    f7ec:	d001      	beq.n	f7f2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f7ee:	2012      	movs	r0, #18
    f7f0:	bd10      	pop	{r4, pc}
    f7f2:	f7ff ff75 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f7f6:	1c61      	adds	r1, r4, #1
    f7f8:	f7f3 fda6 	bl	3348 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    f7fc:	b108      	cbz	r0, f802 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f7fe:	2000      	movs	r0, #0
    f800:	bd10      	pop	{r4, pc}
    f802:	2007      	movs	r0, #7
    f804:	bd10      	pop	{r4, pc}

0000f806 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f806:	b510      	push	{r4, lr}
    f808:	f000 fdd7 	bl	103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    f80c:	b120      	cbz	r0, f818 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f80e:	f7f2 fd6b 	bl	22e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f812:	b108      	cbz	r0, f818 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f814:	200c      	movs	r0, #12
    f816:	bd10      	pop	{r4, pc}
    f818:	f7f2 fdda 	bl	23d0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f81c:	2000      	movs	r0, #0
    f81e:	bd10      	pop	{r4, pc}

0000f820 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f820:	b510      	push	{r4, lr}
    f822:	f000 fdfb 	bl	1041c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    f826:	b108      	cbz	r0, f82c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f828:	200c      	movs	r0, #12
    f82a:	bd10      	pop	{r4, pc}
    f82c:	f7f3 fdea 	bl	3404 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    f830:	2000      	movs	r0, #0
    f832:	f7f2 fe1b 	bl	246c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    f836:	2000      	movs	r0, #0
    f838:	bd10      	pop	{r4, pc}

0000f83a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f83a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f83e:	4605      	mov	r5, r0
    f840:	f000 fb86 	bl	ff50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f844:	2800      	cmp	r0, #0
    f846:	d112      	bne.n	f86e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f848:	8828      	ldrh	r0, [r5, #0]
    f84a:	2100      	movs	r1, #0
    f84c:	f7f1 fbc8 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f850:	0004      	movs	r4, r0
    f852:	d00e      	beq.n	f872 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f854:	f000 fd9b 	bl	1038e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f8>
    f858:	b158      	cbz	r0, f872 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f85a:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    f85e:	f88d 0000 	strb.w	r0, [sp]
    f862:	9800      	ldr	r0, [sp, #0]
    f864:	9000      	str	r0, [sp, #0]
    f866:	f89d 0000 	ldrb.w	r0, [sp]
    f86a:	b120      	cbz	r0, f876 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    f86c:	203a      	movs	r0, #58	; 0x3a
    f86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f872:	2002      	movs	r0, #2
    f874:	e7fb      	b.n	f86e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f876:	f04f 0800 	mov.w	r8, #0
    f87a:	88a8      	ldrh	r0, [r5, #4]
    f87c:	f7fe fa2e 	bl	dcdc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f880:	4607      	mov	r7, r0
    f882:	4601      	mov	r1, r0
    f884:	2005      	movs	r0, #5
    f886:	f7fe fb9c 	bl	dfc2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f88a:	4606      	mov	r6, r0
    f88c:	4639      	mov	r1, r7
    f88e:	2008      	movs	r0, #8
    f890:	f7fe fb97 	bl	dfc2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f894:	42b0      	cmp	r0, r6
    f896:	d301      	bcc.n	f89c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    f898:	42be      	cmp	r6, r7
    f89a:	d301      	bcc.n	f8a0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    f89c:	2012      	movs	r0, #18
    f89e:	e7e6      	b.n	f86e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f8a0:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    f8a4:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    f8a8:	88e8      	ldrh	r0, [r5, #6]
    f8aa:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    f8ae:	8928      	ldrh	r0, [r5, #8]
    f8b0:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    f8b4:	f504 7419 	add.w	r4, r4, #612	; 0x264
    f8b8:	20ff      	movs	r0, #255	; 0xff
    f8ba:	7020      	strb	r0, [r4, #0]
    f8bc:	2000      	movs	r0, #0
    f8be:	e7d6      	b.n	f86e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000f8c0 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    f8c0:	b508      	push	{r3, lr}
    f8c2:	f7f5 f963 	bl	4b8c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f8c6:	2805      	cmp	r0, #5
    f8c8:	d001      	beq.n	f8ce <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    f8ca:	200c      	movs	r0, #12
    f8cc:	bd08      	pop	{r3, pc}
    f8ce:	4668      	mov	r0, sp
    f8d0:	f7f5 f8e2 	bl	4a98 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    f8d4:	2800      	cmp	r0, #0
    f8d6:	d1f9      	bne.n	f8cc <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    f8d8:	f7f3 feb0 	bl	363c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    f8dc:	2000      	movs	r0, #0
    f8de:	bd08      	pop	{r3, pc}

0000f8e0 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f8e0:	b510      	push	{r4, lr}
    f8e2:	460b      	mov	r3, r1
    f8e4:	2201      	movs	r2, #1
    f8e6:	f100 0110 	add.w	r1, r0, #16
    f8ea:	f7fe f9af 	bl	dc4c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f8ee:	2000      	movs	r0, #0
    f8f0:	bd10      	pop	{r4, pc}

0000f8f2 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f8f2:	b510      	push	{r4, lr}
    f8f4:	2108      	movs	r1, #8
    f8f6:	f7f1 f933 	bl	b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f8fa:	2000      	movs	r0, #0
    f8fc:	bd10      	pop	{r4, pc}

0000f8fe <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f8fe:	21fb      	movs	r1, #251	; 0xfb
    f900:	8001      	strh	r1, [r0, #0]
    f902:	f640 0248 	movw	r2, #2120	; 0x848
    f906:	8042      	strh	r2, [r0, #2]
    f908:	8081      	strh	r1, [r0, #4]
    f90a:	80c2      	strh	r2, [r0, #6]
    f90c:	2000      	movs	r0, #0
    f90e:	4770      	bx	lr

0000f910 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f910:	b51c      	push	{r2, r3, r4, lr}
    f912:	8800      	ldrh	r0, [r0, #0]
    f914:	4669      	mov	r1, sp
    f916:	f7fe f9d5 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f91a:	2800      	cmp	r0, #0
    f91c:	d10c      	bne.n	f938 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    f91e:	9c01      	ldr	r4, [sp, #4]
    f920:	f89d 0000 	ldrb.w	r0, [sp]
    f924:	f504 749c 	add.w	r4, r4, #312	; 0x138
    f928:	b918      	cbnz	r0, f932 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    f92a:	9801      	ldr	r0, [sp, #4]
    f92c:	f000 fd2f 	bl	1038e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f8>
    f930:	b118      	cbz	r0, f93a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f932:	7ce0      	ldrb	r0, [r4, #19]
    f934:	b118      	cbz	r0, f93e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    f936:	203a      	movs	r0, #58	; 0x3a
    f938:	bd1c      	pop	{r2, r3, r4, pc}
    f93a:	2002      	movs	r0, #2
    f93c:	bd1c      	pop	{r2, r3, r4, pc}
    f93e:	2001      	movs	r0, #1
    f940:	74e0      	strb	r0, [r4, #19]
    f942:	2000      	movs	r0, #0
    f944:	bd1c      	pop	{r2, r3, r4, pc}

0000f946 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f946:	2108      	movs	r1, #8
    f948:	7001      	strb	r1, [r0, #0]
    f94a:	2000      	movs	r0, #0
    f94c:	4770      	bx	lr

0000f94e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f94e:	b510      	push	{r4, lr}
    f950:	4604      	mov	r4, r0
    f952:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f956:	f000 fd42 	bl	103de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x448>
    f95a:	f7f2 fee3 	bl	2724 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f95e:	7020      	strb	r0, [r4, #0]
    f960:	f000 fd12 	bl	10388 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f2>
    f964:	f7f2 fede 	bl	2724 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f968:	7060      	strb	r0, [r4, #1]
    f96a:	2000      	movs	r0, #0
    f96c:	bd10      	pop	{r4, pc}

0000f96e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f96e:	b510      	push	{r4, lr}
    f970:	4604      	mov	r4, r0
    f972:	f7f3 fd4d 	bl	3410 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    f976:	7020      	strb	r0, [r4, #0]
    f978:	2000      	movs	r0, #0
    f97a:	bd10      	pop	{r4, pc}

0000f97c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f97c:	b510      	push	{r4, lr}
    f97e:	4604      	mov	r4, r0
    f980:	7800      	ldrb	r0, [r0, #0]
    f982:	b108      	cbz	r0, f988 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f984:	2801      	cmp	r0, #1
    f986:	d110      	bne.n	f9aa <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f988:	f000 fd17 	bl	103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    f98c:	b120      	cbz	r0, f998 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f98e:	f7f2 fcab 	bl	22e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f992:	b108      	cbz	r0, f998 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f994:	200c      	movs	r0, #12
    f996:	bd10      	pop	{r4, pc}
    f998:	7820      	ldrb	r0, [r4, #0]
    f99a:	f7ff fea1 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f99e:	1c61      	adds	r1, r4, #1
    f9a0:	f7fe f945 	bl	dc2e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f9a4:	b108      	cbz	r0, f9aa <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f9a6:	2000      	movs	r0, #0
    f9a8:	bd10      	pop	{r4, pc}
    f9aa:	2012      	movs	r0, #18
    f9ac:	bd10      	pop	{r4, pc}

0000f9ae <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f9ae:	b510      	push	{r4, lr}
    f9b0:	4604      	mov	r4, r0
    f9b2:	f000 fd33 	bl	1041c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    f9b6:	b108      	cbz	r0, f9bc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f9b8:	200c      	movs	r0, #12
    f9ba:	bd10      	pop	{r4, pc}
    f9bc:	7820      	ldrb	r0, [r4, #0]
    f9be:	b108      	cbz	r0, f9c4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f9c0:	2801      	cmp	r0, #1
    f9c2:	d107      	bne.n	f9d4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f9c4:	f7ff fe8c 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f9c8:	1c61      	adds	r1, r4, #1
    f9ca:	f7f3 fcfb 	bl	33c4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    f9ce:	b108      	cbz	r0, f9d4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f9d0:	2000      	movs	r0, #0
    f9d2:	bd10      	pop	{r4, pc}
    f9d4:	2012      	movs	r0, #18
    f9d6:	bd10      	pop	{r4, pc}

0000f9d8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f9d8:	b510      	push	{r4, lr}
    f9da:	4604      	mov	r4, r0
    f9dc:	f000 fced 	bl	103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    f9e0:	b108      	cbz	r0, f9e6 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f9e2:	200c      	movs	r0, #12
    f9e4:	bd10      	pop	{r4, pc}
    f9e6:	7820      	ldrb	r0, [r4, #0]
    f9e8:	b100      	cbz	r0, f9ec <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
    f9ea:	2001      	movs	r0, #1
    f9ec:	f7f2 fc76 	bl	22dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f9f0:	2000      	movs	r0, #0
    f9f2:	bd10      	pop	{r4, pc}

0000f9f4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f9f4:	b50e      	push	{r1, r2, r3, lr}
    f9f6:	8882      	ldrh	r2, [r0, #4]
    f9f8:	f244 2390 	movw	r3, #17040	; 0x4290
    f9fc:	429a      	cmp	r2, r3
    f9fe:	d901      	bls.n	fa04 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fa00:	2012      	movs	r0, #18
    fa02:	bd0e      	pop	{r1, r2, r3, pc}
    fa04:	f640 0348 	movw	r3, #2120	; 0x848
    fa08:	429a      	cmp	r2, r3
    fa0a:	d300      	bcc.n	fa0e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fa0c:	461a      	mov	r2, r3
    fa0e:	8803      	ldrh	r3, [r0, #0]
    fa10:	f8ad 3000 	strh.w	r3, [sp]
    fa14:	8843      	ldrh	r3, [r0, #2]
    fa16:	f8ad 3002 	strh.w	r3, [sp, #2]
    fa1a:	f8ad 2004 	strh.w	r2, [sp, #4]
    fa1e:	8843      	ldrh	r3, [r0, #2]
    fa20:	f8ad 3006 	strh.w	r3, [sp, #6]
    fa24:	f8ad 2008 	strh.w	r2, [sp, #8]
    fa28:	8800      	ldrh	r0, [r0, #0]
    fa2a:	8008      	strh	r0, [r1, #0]
    fa2c:	4668      	mov	r0, sp
    fa2e:	f7f7 fe7b 	bl	7728 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x284>
    fa32:	bd0e      	pop	{r1, r2, r3, pc}

0000fa34 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fa34:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fa36:	4604      	mov	r4, r0
    fa38:	f10d 0007 	add.w	r0, sp, #7
    fa3c:	9000      	str	r0, [sp, #0]
    fa3e:	7922      	ldrb	r2, [r4, #4]
    fa40:	78e1      	ldrb	r1, [r4, #3]
    fa42:	78a0      	ldrb	r0, [r4, #2]
    fa44:	f10d 0306 	add.w	r3, sp, #6
    fa48:	f000 fcd1 	bl	103ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x458>
    fa4c:	2800      	cmp	r0, #0
    fa4e:	d109      	bne.n	fa64 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fa50:	8820      	ldrh	r0, [r4, #0]
    fa52:	f8ad 0004 	strh.w	r0, [sp, #4]
    fa56:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fa5a:	f8ad 0008 	strh.w	r0, [sp, #8]
    fa5e:	a801      	add	r0, sp, #4
    fa60:	f000 f994 	bl	fd8c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fa64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fa66 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fa66:	b510      	push	{r4, lr}
    fa68:	4604      	mov	r4, r0
    fa6a:	f000 fca6 	bl	103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    fa6e:	b120      	cbz	r0, fa7a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fa70:	f7f2 fc3a 	bl	22e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa74:	b108      	cbz	r0, fa7a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fa76:	200c      	movs	r0, #12
    fa78:	bd10      	pop	{r4, pc}
    fa7a:	7820      	ldrb	r0, [r4, #0]
    fa7c:	f7ff fe30 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fa80:	79e2      	ldrb	r2, [r4, #7]
    fa82:	1c61      	adds	r1, r4, #1
    fa84:	f7f2 fbd0 	bl	2228 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fa88:	b108      	cbz	r0, fa8e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fa8a:	2000      	movs	r0, #0
    fa8c:	bd10      	pop	{r4, pc}
    fa8e:	2002      	movs	r0, #2
    fa90:	bd10      	pop	{r4, pc}

0000fa92 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fa92:	b510      	push	{r4, lr}
    fa94:	4604      	mov	r4, r0
    fa96:	2001      	movs	r0, #1
    fa98:	f000 faae 	bl	fff8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62>
    fa9c:	b128      	cbz	r0, faaa <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fa9e:	4621      	mov	r1, r4
    faa0:	2001      	movs	r0, #1
    faa2:	f7f1 fe4b 	bl	173c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    faa6:	2000      	movs	r0, #0
    faa8:	bd10      	pop	{r4, pc}
    faaa:	200c      	movs	r0, #12
    faac:	bd10      	pop	{r4, pc}

0000faae <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    faae:	b510      	push	{r4, lr}
    fab0:	8800      	ldrh	r0, [r0, #0]
    fab2:	f7f2 fca3 	bl	23fc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fab6:	b108      	cbz	r0, fabc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fab8:	2000      	movs	r0, #0
    faba:	bd10      	pop	{r4, pc}
    fabc:	2030      	movs	r0, #48	; 0x30
    fabe:	bd10      	pop	{r4, pc}

0000fac0 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    fac0:	b51c      	push	{r2, r3, r4, lr}
    fac2:	7801      	ldrb	r1, [r0, #0]
    fac4:	f88d 1000 	strb.w	r1, [sp]
    fac8:	7840      	ldrb	r0, [r0, #1]
    faca:	f88d 0001 	strb.w	r0, [sp, #1]
    face:	2000      	movs	r0, #0
    fad0:	f8ad 0002 	strh.w	r0, [sp, #2]
    fad4:	f8ad 0004 	strh.w	r0, [sp, #4]
    fad8:	4601      	mov	r1, r0
    fada:	4668      	mov	r0, sp
    fadc:	f000 fadc 	bl	10098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x102>
    fae0:	2800      	cmp	r0, #0
    fae2:	d102      	bne.n	faea <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    fae4:	4668      	mov	r0, sp
    fae6:	f000 fab6 	bl	10056 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc0>
    faea:	bd1c      	pop	{r2, r3, r4, pc}

0000faec <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    faec:	b500      	push	{lr}
    faee:	b087      	sub	sp, #28
    faf0:	7941      	ldrb	r1, [r0, #5]
    faf2:	f88d 1000 	strb.w	r1, [sp]
    faf6:	7981      	ldrb	r1, [r0, #6]
    faf8:	f88d 1001 	strb.w	r1, [sp, #1]
    fafc:	2101      	movs	r1, #1
    fafe:	f88d 1002 	strb.w	r1, [sp, #2]
    fb02:	7801      	ldrb	r1, [r0, #0]
    fb04:	f88d 1003 	strb.w	r1, [sp, #3]
    fb08:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    fb0c:	f240 2271 	movw	r2, #625	; 0x271
    fb10:	4351      	muls	r1, r2
    fb12:	9102      	str	r1, [sp, #8]
    fb14:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    fb18:	4350      	muls	r0, r2
    fb1a:	9004      	str	r0, [sp, #16]
    fb1c:	2007      	movs	r0, #7
    fb1e:	f88d 0018 	strb.w	r0, [sp, #24]
    fb22:	2000      	movs	r0, #0
    fb24:	f88d 0019 	strb.w	r0, [sp, #25]
    fb28:	9804      	ldr	r0, [sp, #16]
    fb2a:	f7f7 fd03 	bl	7534 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    fb2e:	b140      	cbz	r0, fb42 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fb30:	9802      	ldr	r0, [sp, #8]
    fb32:	f7f7 fcf3 	bl	751c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x78>
    fb36:	b120      	cbz	r0, fb42 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fb38:	4668      	mov	r0, sp
    fb3a:	f7f7 fbc9 	bl	72d0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    fb3e:	b007      	add	sp, #28
    fb40:	bd00      	pop	{pc}
    fb42:	2030      	movs	r0, #48	; 0x30
    fb44:	e7fb      	b.n	fb3e <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000fb46 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    fb46:	b570      	push	{r4, r5, r6, lr}
    fb48:	4605      	mov	r5, r0
    fb4a:	8800      	ldrh	r0, [r0, #0]
    fb4c:	2100      	movs	r1, #0
    fb4e:	f7f1 fa47 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb52:	0004      	movs	r4, r0
    fb54:	d007      	beq.n	fb66 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fb56:	f000 fc1a 	bl	1038e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f8>
    fb5a:	b120      	cbz	r0, fb66 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fb5c:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    fb60:	b118      	cbz	r0, fb6a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    fb62:	203a      	movs	r0, #58	; 0x3a
    fb64:	bd70      	pop	{r4, r5, r6, pc}
    fb66:	2002      	movs	r0, #2
    fb68:	bd70      	pop	{r4, r5, r6, pc}
    fb6a:	2100      	movs	r1, #0
    fb6c:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    fb70:	f7ff fdad 	bl	f6ce <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    fb74:	2801      	cmp	r0, #1
    fb76:	d001      	beq.n	fb7c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    fb78:	201a      	movs	r0, #26
    fb7a:	bd70      	pop	{r4, r5, r6, pc}
    fb7c:	f8d5 0002 	ldr.w	r0, [r5, #2]
    fb80:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    fb84:	f8d5 0006 	ldr.w	r0, [r5, #6]
    fb88:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    fb8c:	8968      	ldrh	r0, [r5, #10]
    fb8e:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    fb92:	2210      	movs	r2, #16
    fb94:	f105 010c 	add.w	r1, r5, #12
    fb98:	f204 2083 	addw	r0, r4, #643	; 0x283
    fb9c:	f000 ff14 	bl	109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fba0:	2001      	movs	r0, #1
    fba2:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    fba6:	2000      	movs	r0, #0
    fba8:	bd70      	pop	{r4, r5, r6, pc}

0000fbaa <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fbaa:	b51c      	push	{r2, r3, r4, lr}
    fbac:	8801      	ldrh	r1, [r0, #0]
    fbae:	f8ad 1000 	strh.w	r1, [sp]
    fbb2:	8841      	ldrh	r1, [r0, #2]
    fbb4:	f8ad 1002 	strh.w	r1, [sp, #2]
    fbb8:	8801      	ldrh	r1, [r0, #0]
    fbba:	f8ad 1004 	strh.w	r1, [sp, #4]
    fbbe:	8840      	ldrh	r0, [r0, #2]
    fbc0:	f8ad 0006 	strh.w	r0, [sp, #6]
    fbc4:	4668      	mov	r0, sp
    fbc6:	f7f7 fe33 	bl	7830 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x38c>
    fbca:	bd1c      	pop	{r2, r3, r4, pc}

0000fbcc <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fbcc:	b510      	push	{r4, lr}
    fbce:	f7f1 fdd9 	bl	1784 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    fbd2:	2000      	movs	r0, #0
    fbd4:	bd10      	pop	{r4, pc}

0000fbd6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    fbd6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    fbda:	4604      	mov	r4, r0
    fbdc:	7a40      	ldrb	r0, [r0, #9]
    fbde:	0781      	lsls	r1, r0, #30
    fbe0:	d502      	bpl.n	fbe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    fbe2:	f040 0001 	orr.w	r0, r0, #1
    fbe6:	7260      	strb	r0, [r4, #9]
    fbe8:	4620      	mov	r0, r4
    fbea:	f000 fa75 	bl	100d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x142>
    fbee:	2800      	cmp	r0, #0
    fbf0:	d103      	bne.n	fbfa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    fbf2:	f000 fbe9 	bl	103c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    fbf6:	b118      	cbz	r0, fc00 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    fbf8:	200c      	movs	r0, #12
    fbfa:	b004      	add	sp, #16
    fbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc00:	f7f3 fcaa 	bl	3558 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    fc04:	b910      	cbnz	r0, fc0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    fc06:	f7f3 fe1b 	bl	3840 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    fc0a:	b108      	cbz	r0, fc10 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    fc0c:	203a      	movs	r0, #58	; 0x3a
    fc0e:	e7f4      	b.n	fbfa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    fc10:	2103      	movs	r1, #3
    fc12:	f104 0018 	add.w	r0, r4, #24
    fc16:	f7f7 fc99 	bl	754c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    fc1a:	2100      	movs	r1, #0
    fc1c:	4668      	mov	r0, sp
    fc1e:	f7f1 fa47 	bl	10b0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    fc22:	0006      	movs	r6, r0
    fc24:	d008      	beq.n	fc38 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    fc26:	2301      	movs	r3, #1
    fc28:	4622      	mov	r2, r4
    fc2a:	f8bd 1000 	ldrh.w	r1, [sp]
    fc2e:	f7f7 fca1 	bl	7574 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd0>
    fc32:	0005      	movs	r5, r0
    fc34:	d002      	beq.n	fc3c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    fc36:	e071      	b.n	fd1c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    fc38:	200d      	movs	r0, #13
    fc3a:	e7de      	b.n	fbfa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    fc3c:	4630      	mov	r0, r6
    fc3e:	f7f5 fc35 	bl	54ac <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    fc42:	0005      	movs	r5, r0
    fc44:	d16a      	bne.n	fd1c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    fc46:	7860      	ldrb	r0, [r4, #1]
    fc48:	f7f3 fd5c 	bl	3704 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    fc4c:	78a1      	ldrb	r1, [r4, #2]
    fc4e:	7820      	ldrb	r0, [r4, #0]
    fc50:	1ce2      	adds	r2, r4, #3
    fc52:	f7f3 fccf 	bl	35f4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    fc56:	b148      	cbz	r0, fc6c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x96>
    fc58:	f7f3 fc2a 	bl	34b0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    fc5c:	78a1      	ldrb	r1, [r4, #2]
    fc5e:	7820      	ldrb	r0, [r4, #0]
    fc60:	1ce2      	adds	r2, r4, #3
    fc62:	f7f3 fd05 	bl	3670 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    fc66:	0005      	movs	r5, r0
    fc68:	d002      	beq.n	fc70 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x9a>
    fc6a:	e057      	b.n	fd1c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    fc6c:	2512      	movs	r5, #18
    fc6e:	e055      	b.n	fd1c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    fc70:	4631      	mov	r1, r6
    fc72:	2003      	movs	r0, #3
    fc74:	f7f3 fc64 	bl	3540 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    fc78:	4605      	mov	r5, r0
    fc7a:	78a0      	ldrb	r0, [r4, #2]
    fc7c:	f7ff fd30 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fc80:	1ce1      	adds	r1, r4, #3
    fc82:	f7f3 fd17 	bl	36b4 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    fc86:	bb1d      	cbnz	r5, fcd0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfa>
    fc88:	7820      	ldrb	r0, [r4, #0]
    fc8a:	f04f 0800 	mov.w	r8, #0
    fc8e:	2701      	movs	r7, #1
    fc90:	bb20      	cbnz	r0, fcdc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x106>
    fc92:	f894 a002 	ldrb.w	sl, [r4, #2]
    fc96:	f104 0903 	add.w	r9, r4, #3
    fc9a:	f8cd 8004 	str.w	r8, [sp, #4]
    fc9e:	f8cd 8008 	str.w	r8, [sp, #8]
    fca2:	e016      	b.n	fcd2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    fca4:	9d01      	ldr	r5, [sp, #4]
    fca6:	42ae      	cmp	r6, r5
    fca8:	d013      	beq.n	fcd2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    fcaa:	4650      	mov	r0, sl
    fcac:	f7ff fd18 	bl	f6e0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fcb0:	78aa      	ldrb	r2, [r5, #2]
    fcb2:	1ceb      	adds	r3, r5, #3
    fcb4:	4649      	mov	r1, r9
    fcb6:	f7fd fef4 	bl	daa2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    fcba:	b150      	cbz	r0, fcd2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    fcbc:	7a6a      	ldrb	r2, [r5, #9]
    fcbe:	7a70      	ldrb	r0, [r6, #9]
    fcc0:	f105 030a 	add.w	r3, r5, #10
    fcc4:	f106 010a 	add.w	r1, r6, #10
    fcc8:	f7fd feeb 	bl	daa2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    fccc:	b108      	cbz	r0, fcd2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    fcce:	250b      	movs	r5, #11
    fcd0:	e024      	b.n	fd1c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    fcd2:	a801      	add	r0, sp, #4
    fcd4:	f7f1 f9ca 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fcd8:	2800      	cmp	r0, #0
    fcda:	d0e3      	beq.n	fca4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xce>
    fcdc:	4638      	mov	r0, r7
    fcde:	f7f3 fc4b 	bl	3578 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    fce2:	0005      	movs	r5, r0
    fce4:	d11a      	bne.n	fd1c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    fce6:	f88d 8004 	strb.w	r8, [sp, #4]
    fcea:	7a60      	ldrb	r0, [r4, #9]
    fcec:	07c0      	lsls	r0, r0, #31
    fcee:	d005      	beq.n	fcfc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x126>
    fcf0:	68e0      	ldr	r0, [r4, #12]
    fcf2:	9002      	str	r0, [sp, #8]
    fcf4:	69a0      	ldr	r0, [r4, #24]
    fcf6:	9003      	str	r0, [sp, #12]
    fcf8:	f88d 7004 	strb.w	r7, [sp, #4]
    fcfc:	a801      	add	r0, sp, #4
    fcfe:	f7f4 ff97 	bl	4c30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    fd02:	4605      	mov	r5, r0
    fd04:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    fd08:	f7f3 fd70 	bl	37ec <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    fd0c:	b935      	cbnz	r5, fd1c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    fd0e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    fd12:	4630      	mov	r0, r6
    fd14:	f7f4 fe7e 	bl	4a14 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    fd18:	0005      	movs	r5, r0
    fd1a:	d00c      	beq.n	fd36 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x160>
    fd1c:	8830      	ldrh	r0, [r6, #0]
    fd1e:	f7fd febc 	bl	da9a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fd22:	8830      	ldrh	r0, [r6, #0]
    fd24:	2100      	movs	r1, #0
    fd26:	f7f1 f9f1 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fd2a:	b120      	cbz	r0, fd36 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x160>
    fd2c:	f241 2162 	movw	r1, #4706	; 0x1262
    fd30:	2039      	movs	r0, #57	; 0x39
    fd32:	f7f0 fe73 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd36:	4628      	mov	r0, r5
    fd38:	e75f      	b.n	fbfa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

0000fd3a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fd3a:	b51c      	push	{r2, r3, r4, lr}
    fd3c:	460c      	mov	r4, r1
    fd3e:	4669      	mov	r1, sp
    fd40:	f7fd ffc0 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fd44:	2800      	cmp	r0, #0
    fd46:	d105      	bne.n	fd54 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    fd48:	2101      	movs	r1, #1
    fd4a:	4622      	mov	r2, r4
    fd4c:	9801      	ldr	r0, [sp, #4]
    fd4e:	f000 fac5 	bl	102dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x346>
    fd52:	2000      	movs	r0, #0
    fd54:	bd1c      	pop	{r2, r3, r4, pc}

0000fd56 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fd56:	b510      	push	{r4, lr}
    fd58:	4604      	mov	r4, r0
    fd5a:	f7f7 fd9f 	bl	789c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    fd5e:	b118      	cbz	r0, fd68 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    fd60:	2000      	movs	r0, #0
    fd62:	f000 f949 	bl	fff8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62>
    fd66:	b128      	cbz	r0, fd74 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    fd68:	4621      	mov	r1, r4
    fd6a:	2000      	movs	r0, #0
    fd6c:	f7f1 fce6 	bl	173c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fd70:	2000      	movs	r0, #0
    fd72:	bd10      	pop	{r4, pc}
    fd74:	200c      	movs	r0, #12
    fd76:	bd10      	pop	{r4, pc}

0000fd78 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fd78:	b510      	push	{r4, lr}
    fd7a:	7800      	ldrb	r0, [r0, #0]
    fd7c:	b100      	cbz	r0, fd80 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fd7e:	2001      	movs	r0, #1
    fd80:	f7f5 fbb8 	bl	54f4 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    fd84:	2000      	movs	r0, #0
    fd86:	bd10      	pop	{r4, pc}

0000fd88 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fd88:	f7f7 bcce 	b.w	7728 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x284>

0000fd8c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fd8c:	b510      	push	{r4, lr}
    fd8e:	4604      	mov	r4, r0
    fd90:	8880      	ldrh	r0, [r0, #4]
    fd92:	b128      	cbz	r0, fda0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fd94:	2801      	cmp	r0, #1
    fd96:	d003      	beq.n	fda0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fd98:	2802      	cmp	r0, #2
    fd9a:	d001      	beq.n	fda0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fd9c:	2012      	movs	r0, #18
    fd9e:	bd10      	pop	{r4, pc}
    fda0:	78e0      	ldrb	r0, [r4, #3]
    fda2:	f000 f935 	bl	10010 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7a>
    fda6:	b148      	cbz	r0, fdbc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fda8:	78a0      	ldrb	r0, [r4, #2]
    fdaa:	f000 f931 	bl	10010 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7a>
    fdae:	b128      	cbz	r0, fdbc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fdb0:	4620      	mov	r0, r4
    fdb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fdb6:	2101      	movs	r1, #1
    fdb8:	f000 b862 	b.w	fe80 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fdbc:	2011      	movs	r0, #17
    fdbe:	bd10      	pop	{r4, pc}

0000fdc0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fdc0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fdc2:	460c      	mov	r4, r1
    fdc4:	4605      	mov	r5, r0
    fdc6:	8800      	ldrh	r0, [r0, #0]
    fdc8:	4669      	mov	r1, sp
    fdca:	f7fd ff7b 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fdce:	2800      	cmp	r0, #0
    fdd0:	d106      	bne.n	fde0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fdd2:	9801      	ldr	r0, [sp, #4]
    fdd4:	8829      	ldrh	r1, [r5, #0]
    fdd6:	8021      	strh	r1, [r4, #0]
    fdd8:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
    fddc:	8060      	strh	r0, [r4, #2]
    fdde:	2000      	movs	r0, #0
    fde0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fde2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fde2:	b510      	push	{r4, lr}
    fde4:	4604      	mov	r4, r0
    fde6:	4601      	mov	r1, r0
    fde8:	2000      	movs	r0, #0
    fdea:	f7f1 fc8f 	bl	170c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fdee:	b910      	cbnz	r0, fdf6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fdf0:	2000      	movs	r0, #0
    fdf2:	6020      	str	r0, [r4, #0]
    fdf4:	80a0      	strh	r0, [r4, #4]
    fdf6:	2000      	movs	r0, #0
    fdf8:	bd10      	pop	{r4, pc}

0000fdfa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    fdfa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fdfc:	460c      	mov	r4, r1
    fdfe:	4605      	mov	r5, r0
    fe00:	8800      	ldrh	r0, [r0, #0]
    fe02:	4669      	mov	r1, sp
    fe04:	f7fd ff5e 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe08:	b108      	cbz	r0, fe0e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    fe0a:	2002      	movs	r0, #2
    fe0c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe0e:	78a8      	ldrb	r0, [r5, #2]
    fe10:	b158      	cbz	r0, fe2a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    fe12:	f000 fab9 	bl	10388 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f2>
    fe16:	70a0      	strb	r0, [r4, #2]
    fe18:	8828      	ldrh	r0, [r5, #0]
    fe1a:	8020      	strh	r0, [r4, #0]
    fe1c:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fe20:	f7f2 fc80 	bl	2724 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fe24:	70a0      	strb	r0, [r4, #2]
    fe26:	2000      	movs	r0, #0
    fe28:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe2a:	9801      	ldr	r0, [sp, #4]
    fe2c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fe30:	e7f1      	b.n	fe16 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fe32 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fe32:	b510      	push	{r4, lr}
    fe34:	f7f7 fd38 	bl	78a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fe38:	2000      	movs	r0, #0
    fe3a:	bd10      	pop	{r4, pc}

0000fe3c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fe3c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fe40:	4604      	mov	r4, r0
    fe42:	8840      	ldrh	r0, [r0, #2]
    fe44:	460d      	mov	r5, r1
    fe46:	b1b8      	cbz	r0, fe78 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fe48:	8820      	ldrh	r0, [r4, #0]
    fe4a:	4669      	mov	r1, sp
    fe4c:	f7fd ff3a 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe50:	2800      	cmp	r0, #0
    fe52:	d10f      	bne.n	fe74 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fe54:	8820      	ldrh	r0, [r4, #0]
    fe56:	8028      	strh	r0, [r5, #0]
    fe58:	9e01      	ldr	r6, [sp, #4]
    fe5a:	f106 0510 	add.w	r5, r6, #16
    fe5e:	3688      	adds	r6, #136	; 0x88
    fe60:	682f      	ldr	r7, [r5, #0]
    fe62:	8862      	ldrh	r2, [r4, #2]
    fe64:	4639      	mov	r1, r7
    fe66:	4630      	mov	r0, r6
    fe68:	f7fe f88f 	bl	df8a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fe6c:	6828      	ldr	r0, [r5, #0]
    fe6e:	42b8      	cmp	r0, r7
    fe70:	d1f6      	bne.n	fe60 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fe72:	2000      	movs	r0, #0
    fe74:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fe78:	2012      	movs	r0, #18
    fe7a:	e7fb      	b.n	fe74 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fe7c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fe7c:	f000 b88b 	b.w	ff96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fe80 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe84:	b085      	sub	sp, #20
    fe86:	4688      	mov	r8, r1
    fe88:	4606      	mov	r6, r0
    fe8a:	8800      	ldrh	r0, [r0, #0]
    fe8c:	a901      	add	r1, sp, #4
    fe8e:	f7fd ff19 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe92:	2800      	cmp	r0, #0
    fe94:	d13b      	bne.n	ff0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fe96:	9802      	ldr	r0, [sp, #8]
    fe98:	4601      	mov	r1, r0
    fe9a:	468a      	mov	sl, r1
    fe9c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    fea0:	f500 749c 	add.w	r4, r0, #312	; 0x138
    fea4:	f88d 1000 	strb.w	r1, [sp]
    fea8:	9900      	ldr	r1, [sp, #0]
    feaa:	9100      	str	r1, [sp, #0]
    feac:	f89d 1000 	ldrb.w	r1, [sp]
    feb0:	f04f 0900 	mov.w	r9, #0
    feb4:	3088      	adds	r0, #136	; 0x88
    feb6:	b121      	cbz	r1, fec2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    feb8:	f1b8 0f02 	cmp.w	r8, #2
    febc:	d001      	beq.n	fec2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    febe:	2701      	movs	r7, #1
    fec0:	e000      	b.n	fec4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fec2:	2700      	movs	r7, #0
    fec4:	7f81      	ldrb	r1, [r0, #30]
    fec6:	2922      	cmp	r1, #34	; 0x22
    fec8:	d100      	bne.n	fecc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    feca:	b13f      	cbz	r7, fedc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    fecc:	2500      	movs	r5, #0
    fece:	306e      	adds	r0, #110	; 0x6e
    fed0:	2108      	movs	r1, #8
    fed2:	4683      	mov	fp, r0
    fed4:	f7ff fbfb 	bl	f6ce <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    fed8:	b110      	cbz	r0, fee0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
    feda:	e007      	b.n	feec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
    fedc:	2501      	movs	r5, #1
    fede:	e7f6      	b.n	fece <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
    fee0:	210b      	movs	r1, #11
    fee2:	4658      	mov	r0, fp
    fee4:	f7ff fbf3 	bl	f6ce <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    fee8:	b900      	cbnz	r0, feec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
    feea:	b17d      	cbz	r5, ff0c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
    feec:	a804      	add	r0, sp, #16
    feee:	9000      	str	r0, [sp, #0]
    fef0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fef4:	ab03      	add	r3, sp, #12
    fef6:	4632      	mov	r2, r6
    fef8:	4651      	mov	r1, sl
    fefa:	f000 fa25 	bl	10348 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3b2>
    fefe:	0005      	movs	r5, r0
    ff00:	d105      	bne.n	ff0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    ff02:	340c      	adds	r4, #12
    ff04:	20ff      	movs	r0, #255	; 0xff
    ff06:	7060      	strb	r0, [r4, #1]
    ff08:	b937      	cbnz	r7, ff18 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    ff0a:	e003      	b.n	ff14 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    ff0c:	201a      	movs	r0, #26
    ff0e:	b005      	add	sp, #20
    ff10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff14:	7820      	ldrb	r0, [r4, #0]
    ff16:	b108      	cbz	r0, ff1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    ff18:	253a      	movs	r5, #58	; 0x3a
    ff1a:	e012      	b.n	ff42 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    ff1c:	f884 8000 	strb.w	r8, [r4]
    ff20:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ff24:	70a0      	strb	r0, [r4, #2]
    ff26:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ff2a:	70e1      	strb	r1, [r4, #3]
    ff2c:	f88d 0000 	strb.w	r0, [sp]
    ff30:	f88d 1001 	strb.w	r1, [sp, #1]
    ff34:	88b0      	ldrh	r0, [r6, #4]
    ff36:	f8ad 0002 	strh.w	r0, [sp, #2]
    ff3a:	4669      	mov	r1, sp
    ff3c:	4650      	mov	r0, sl
    ff3e:	f7fd ff88 	bl	de52 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ff42:	f884 9001 	strb.w	r9, [r4, #1]
    ff46:	4628      	mov	r0, r5
    ff48:	e7e1      	b.n	ff0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

0000ff4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    ff4a:	2008      	movs	r0, #8
    ff4c:	f7f7 bd00 	b.w	7950 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000ff50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    ff50:	b510      	push	{r4, lr}
    ff52:	4604      	mov	r4, r0
    ff54:	2000      	movs	r0, #0
    ff56:	8822      	ldrh	r2, [r4, #0]
    ff58:	b086      	sub	sp, #24
    ff5a:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    ff5e:	39ff      	subs	r1, #255	; 0xff
    ff60:	d008      	beq.n	ff74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    ff62:	a903      	add	r1, sp, #12
    ff64:	4610      	mov	r0, r2
    ff66:	f7fd fead 	bl	dcc4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff6a:	b110      	cbz	r0, ff72 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    ff6c:	2002      	movs	r0, #2
    ff6e:	b006      	add	sp, #24
    ff70:	bd10      	pop	{r4, pc}
    ff72:	9804      	ldr	r0, [sp, #16]
    ff74:	8921      	ldrh	r1, [r4, #8]
    ff76:	89a3      	ldrh	r3, [r4, #12]
    ff78:	8962      	ldrh	r2, [r4, #10]
    ff7a:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    ff7e:	88e3      	ldrh	r3, [r4, #6]
    ff80:	88a2      	ldrh	r2, [r4, #4]
    ff82:	8861      	ldrh	r1, [r4, #2]
    ff84:	f000 f97f 	bl	10286 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f0>
    ff88:	b108      	cbz	r0, ff8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    ff8a:	2000      	movs	r0, #0
    ff8c:	e7ef      	b.n	ff6e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    ff8e:	2030      	movs	r0, #48	; 0x30
    ff90:	e7ed      	b.n	ff6e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000ff92 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
    ff92:	f7f5 bc39 	b.w	5808 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000ff96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    ff96:	b510      	push	{r4, lr}
    ff98:	f7fd fdb2 	bl	db00 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ff9c:	f7f2 f98a 	bl	22b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ffa0:	f7f7 fcf8 	bl	7994 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    ffa4:	f7fe f9e7 	bl	e376 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    ffa8:	f7fe f837 	bl	e01a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    ffac:	f7f3 fa2a 	bl	3404 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    ffb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ffb4:	f7f7 ba84 	b.w	74c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1c>
    ffb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ffbc:	4288      	cmp	r0, r1
    ffbe:	d303      	bcc.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32>
    ffc0:	f640 0148 	movw	r1, #2120	; 0x848
    ffc4:	4288      	cmp	r0, r1
    ffc6:	d300      	bcc.n	ffca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34>
    ffc8:	4608      	mov	r0, r1
    ffca:	b280      	uxth	r0, r0
    ffcc:	4770      	bx	lr
    ffce:	07c1      	lsls	r1, r0, #31
    ffd0:	d001      	beq.n	ffd6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    ffd2:	2001      	movs	r0, #1
    ffd4:	4770      	bx	lr
    ffd6:	0780      	lsls	r0, r0, #30
    ffd8:	d501      	bpl.n	ffde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>
    ffda:	2002      	movs	r0, #2
    ffdc:	4770      	bx	lr
    ffde:	2000      	movs	r0, #0
    ffe0:	4770      	bx	lr
    ffe2:	b510      	push	{r4, lr}
    ffe4:	2801      	cmp	r0, #1
    ffe6:	d006      	beq.n	fff6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60>
    ffe8:	2802      	cmp	r0, #2
    ffea:	d004      	beq.n	fff6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60>
    ffec:	f240 21d7 	movw	r1, #727	; 0x2d7
    fff0:	2006      	movs	r0, #6
    fff2:	f7f0 fd13 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fff6:	bd10      	pop	{r4, pc}
    fff8:	b510      	push	{r4, lr}
    fffa:	f000 f9e5 	bl	103c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    fffe:	b128      	cbz	r0, 1000c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x76>
   10000:	f7f3 fc50 	bl	38a4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   10004:	2801      	cmp	r0, #1
   10006:	d001      	beq.n	1000c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x76>
   10008:	2000      	movs	r0, #0
   1000a:	bd10      	pop	{r4, pc}
   1000c:	2001      	movs	r0, #1
   1000e:	bd10      	pop	{r4, pc}
   10010:	b510      	push	{r4, lr}
   10012:	0004      	movs	r4, r0
   10014:	d005      	beq.n	10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8c>
   10016:	f7f7 fcad 	bl	7974 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1001a:	4384      	bics	r4, r0
   1001c:	d001      	beq.n	10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8c>
   1001e:	2000      	movs	r0, #0
   10020:	bd10      	pop	{r4, pc}
   10022:	2001      	movs	r0, #1
   10024:	bd10      	pop	{r4, pc}
   10026:	28fb      	cmp	r0, #251	; 0xfb
   10028:	d803      	bhi.n	10032 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
   1002a:	f640 0048 	movw	r0, #2120	; 0x848
   1002e:	4281      	cmp	r1, r0
   10030:	d901      	bls.n	10036 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa0>
   10032:	2011      	movs	r0, #17
   10034:	4770      	bx	lr
   10036:	2000      	movs	r0, #0
   10038:	4770      	bx	lr
   1003a:	381b      	subs	r0, #27
   1003c:	28e1      	cmp	r0, #225	; 0xe1
   1003e:	d206      	bcs.n	1004e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
   10040:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10044:	d303      	bcc.n	1004e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
   10046:	f244 2090 	movw	r0, #17040	; 0x4290
   1004a:	4281      	cmp	r1, r0
   1004c:	d901      	bls.n	10052 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xbc>
   1004e:	2012      	movs	r0, #18
   10050:	4770      	bx	lr
   10052:	2000      	movs	r0, #0
   10054:	4770      	bx	lr
   10056:	b510      	push	{r4, lr}
   10058:	4604      	mov	r4, r0
   1005a:	7800      	ldrb	r0, [r0, #0]
   1005c:	2801      	cmp	r0, #1
   1005e:	d009      	beq.n	10074 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xde>
   10060:	f7f4 fd94 	bl	4b8c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   10064:	2805      	cmp	r0, #5
   10066:	d003      	beq.n	10070 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xda>
   10068:	f7f4 fd58 	bl	4b1c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   1006c:	2800      	cmp	r0, #0
   1006e:	d000      	beq.n	10072 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
   10070:	200c      	movs	r0, #12
   10072:	bd10      	pop	{r4, pc}
   10074:	f7f3 fbe4 	bl	3840 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
   10078:	b108      	cbz	r0, 1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
   1007a:	203a      	movs	r0, #58	; 0x3a
   1007c:	bd10      	pop	{r4, pc}
   1007e:	f7f3 fb99 	bl	37b4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   10082:	b138      	cbz	r0, 10094 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
   10084:	f7f3 fa14 	bl	34b0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   10088:	88a1      	ldrh	r1, [r4, #4]
   1008a:	8860      	ldrh	r0, [r4, #2]
   1008c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10090:	f7f4 bd0a 	b.w	4aa8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   10094:	2012      	movs	r0, #18
   10096:	bd10      	pop	{r4, pc}
   10098:	7802      	ldrb	r2, [r0, #0]
   1009a:	2a01      	cmp	r2, #1
   1009c:	d001      	beq.n	100a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10c>
   1009e:	b1ba      	cbz	r2, 100d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
   100a0:	e018      	b.n	100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   100a2:	7842      	ldrb	r2, [r0, #1]
   100a4:	b13a      	cbz	r2, 100b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x120>
   100a6:	2a01      	cmp	r2, #1
   100a8:	d005      	beq.n	100b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x120>
   100aa:	2a02      	cmp	r2, #2
   100ac:	d112      	bne.n	100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   100ae:	b189      	cbz	r1, 100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   100b0:	8881      	ldrh	r1, [r0, #4]
   100b2:	b179      	cbz	r1, 100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   100b4:	e000      	b.n	100b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x122>
   100b6:	b159      	cbz	r1, 100d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
   100b8:	8841      	ldrh	r1, [r0, #2]
   100ba:	b149      	cbz	r1, 100d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
   100bc:	8880      	ldrh	r0, [r0, #4]
   100be:	b138      	cbz	r0, 100d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
   100c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   100c4:	0049      	lsls	r1, r1, #1
   100c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   100ca:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   100ce:	d201      	bcs.n	100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   100d0:	2000      	movs	r0, #0
   100d2:	4770      	bx	lr
   100d4:	2012      	movs	r0, #18
   100d6:	4770      	bx	lr
   100d8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   100dc:	7a45      	ldrb	r5, [r0, #9]
   100de:	4604      	mov	r4, r0
   100e0:	0768      	lsls	r0, r5, #29
   100e2:	d06c      	beq.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   100e4:	08e8      	lsrs	r0, r5, #3
   100e6:	d16a      	bne.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   100e8:	2d02      	cmp	r5, #2
   100ea:	d068      	beq.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   100ec:	f7f7 fc42 	bl	7974 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   100f0:	ea25 0000 	bic.w	r0, r5, r0
   100f4:	0740      	lsls	r0, r0, #29
   100f6:	d102      	bne.n	100fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x168>
   100f8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   100fc:	b110      	cbz	r0, 10104 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16e>
   100fe:	2011      	movs	r0, #17
   10100:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   10104:	2d01      	cmp	r5, #1
   10106:	d15a      	bne.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10108:	27ff      	movs	r7, #255	; 0xff
   1010a:	2101      	movs	r1, #1
   1010c:	69a0      	ldr	r0, [r4, #24]
   1010e:	f7f7 faf5 	bl	76fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x258>
   10112:	b3e8      	cbz	r0, 10190 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
   10114:	46a8      	mov	r8, r5
   10116:	2600      	movs	r6, #0
   10118:	4635      	mov	r5, r6
   1011a:	42bd      	cmp	r5, r7
   1011c:	d02f      	beq.n	1017e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e8>
   1011e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10122:	6988      	ldr	r0, [r1, #24]
   10124:	68c9      	ldr	r1, [r1, #12]
   10126:	4288      	cmp	r0, r1
   10128:	d849      	bhi.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1012a:	4406      	add	r6, r0
   1012c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   10130:	4681      	mov	r9, r0
   10132:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   10134:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   10138:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   1013a:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   1013e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10140:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   10142:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   10144:	2000      	movs	r0, #0
   10146:	f000 f89e 	bl	10286 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f0>
   1014a:	b308      	cbz	r0, 10190 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
   1014c:	b1bd      	cbz	r5, 1017e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e8>
   1014e:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   10152:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   10156:	4281      	cmp	r1, r0
   10158:	d131      	bne.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1015a:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   1015e:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10162:	4281      	cmp	r1, r0
   10164:	d12b      	bne.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10166:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1016a:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   1016e:	4281      	cmp	r1, r0
   10170:	d125      	bne.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10172:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   10176:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1017a:	4281      	cmp	r1, r0
   1017c:	d11f      	bne.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1017e:	1c6d      	adds	r5, r5, #1
   10180:	b2ed      	uxtb	r5, r5
   10182:	4545      	cmp	r5, r8
   10184:	d3c9      	bcc.n	1011a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
   10186:	68e0      	ldr	r0, [r4, #12]
   10188:	42b0      	cmp	r0, r6
   1018a:	d318      	bcc.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1018c:	7820      	ldrb	r0, [r4, #0]
   1018e:	e000      	b.n	10192 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
   10190:	e003      	b.n	1019a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
   10192:	b120      	cbz	r0, 1019e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x208>
   10194:	2801      	cmp	r0, #1
   10196:	d112      	bne.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10198:	e004      	b.n	101a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20e>
   1019a:	2030      	movs	r0, #48	; 0x30
   1019c:	e7b0      	b.n	10100 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16a>
   1019e:	78a0      	ldrb	r0, [r4, #2]
   101a0:	2800      	cmp	r0, #0
   101a2:	d1f7      	bne.n	10194 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fe>
   101a4:	7860      	ldrb	r0, [r4, #1]
   101a6:	b128      	cbz	r0, 101b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
   101a8:	2801      	cmp	r0, #1
   101aa:	d003      	beq.n	101b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
   101ac:	2802      	cmp	r0, #2
   101ae:	d001      	beq.n	101b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
   101b0:	2803      	cmp	r0, #3
   101b2:	d104      	bne.n	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   101b4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   101b8:	b108      	cbz	r0, 101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   101ba:	2807      	cmp	r0, #7
   101bc:	d901      	bls.n	101c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22c>
   101be:	2012      	movs	r0, #18
   101c0:	e79e      	b.n	10100 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16a>
   101c2:	2000      	movs	r0, #0
   101c4:	e79c      	b.n	10100 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16a>
   101c6:	b570      	push	{r4, r5, r6, lr}
   101c8:	4604      	mov	r4, r0
   101ca:	7800      	ldrb	r0, [r0, #0]
   101cc:	2500      	movs	r5, #0
   101ce:	2801      	cmp	r0, #1
   101d0:	d004      	beq.n	101dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
   101d2:	b118      	cbz	r0, 101dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
   101d4:	2802      	cmp	r0, #2
   101d6:	d001      	beq.n	101dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
   101d8:	2803      	cmp	r0, #3
   101da:	d139      	bne.n	10250 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   101dc:	7860      	ldrb	r0, [r4, #1]
   101de:	b128      	cbz	r0, 101ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x256>
   101e0:	2801      	cmp	r0, #1
   101e2:	d003      	beq.n	101ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x256>
   101e4:	2802      	cmp	r0, #2
   101e6:	d001      	beq.n	101ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x256>
   101e8:	2803      	cmp	r0, #3
   101ea:	d131      	bne.n	10250 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   101ec:	7e60      	ldrb	r0, [r4, #25]
   101ee:	b948      	cbnz	r0, 10204 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
   101f0:	78a0      	ldrb	r0, [r4, #2]
   101f2:	2801      	cmp	r0, #1
   101f4:	d12c      	bne.n	10250 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   101f6:	f7f7 fbbd 	bl	7974 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   101fa:	4601      	mov	r1, r0
   101fc:	78a0      	ldrb	r0, [r4, #2]
   101fe:	ea30 0101 	bics.w	r1, r0, r1
   10202:	d001      	beq.n	10208 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x272>
   10204:	2011      	movs	r0, #17
   10206:	bd70      	pop	{r4, r5, r6, pc}
   10208:	07c0      	lsls	r0, r0, #31
   1020a:	d006      	beq.n	1021a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x284>
   1020c:	78e0      	ldrb	r0, [r4, #3]
   1020e:	2301      	movs	r3, #1
   10210:	6922      	ldr	r2, [r4, #16]
   10212:	68a1      	ldr	r1, [r4, #8]
   10214:	f000 f820 	bl	10258 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
   10218:	4605      	mov	r5, r0
   1021a:	78a0      	ldrb	r0, [r4, #2]
   1021c:	0780      	lsls	r0, r0, #30
   1021e:	d506      	bpl.n	1022e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x298>
   10220:	78e0      	ldrb	r0, [r4, #3]
   10222:	2302      	movs	r3, #2
   10224:	6922      	ldr	r2, [r4, #16]
   10226:	68a1      	ldr	r1, [r4, #8]
   10228:	f000 f816 	bl	10258 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
   1022c:	4305      	orrs	r5, r0
   1022e:	78a0      	ldrb	r0, [r4, #2]
   10230:	0740      	lsls	r0, r0, #29
   10232:	d506      	bpl.n	10242 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ac>
   10234:	78e0      	ldrb	r0, [r4, #3]
   10236:	2304      	movs	r3, #4
   10238:	6922      	ldr	r2, [r4, #16]
   1023a:	68a1      	ldr	r1, [r4, #8]
   1023c:	f000 f80c 	bl	10258 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
   10240:	4305      	orrs	r5, r0
   10242:	b10d      	cbz	r5, 10248 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   10244:	4628      	mov	r0, r5
   10246:	bd70      	pop	{r4, r5, r6, pc}
   10248:	7e20      	ldrb	r0, [r4, #24]
   1024a:	b108      	cbz	r0, 10250 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   1024c:	2807      	cmp	r0, #7
   1024e:	d901      	bls.n	10254 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2be>
   10250:	2012      	movs	r0, #18
   10252:	bd70      	pop	{r4, r5, r6, pc}
   10254:	2000      	movs	r0, #0
   10256:	bd70      	pop	{r4, r5, r6, pc}
   10258:	b570      	push	{r4, r5, r6, lr}
   1025a:	4614      	mov	r4, r2
   1025c:	460d      	mov	r5, r1
   1025e:	b108      	cbz	r0, 10264 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ce>
   10260:	2801      	cmp	r0, #1
   10262:	d10a      	bne.n	1027a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
   10264:	4619      	mov	r1, r3
   10266:	4610      	mov	r0, r2
   10268:	f7f7 fa48 	bl	76fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x258>
   1026c:	b138      	cbz	r0, 1027e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
   1026e:	4628      	mov	r0, r5
   10270:	f7f7 f948 	bl	7504 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x60>
   10274:	b118      	cbz	r0, 1027e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
   10276:	42ac      	cmp	r4, r5
   10278:	d903      	bls.n	10282 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ec>
   1027a:	2012      	movs	r0, #18
   1027c:	bd70      	pop	{r4, r5, r6, pc}
   1027e:	2030      	movs	r0, #48	; 0x30
   10280:	bd70      	pop	{r4, r5, r6, pc}
   10282:	2000      	movs	r0, #0
   10284:	bd70      	pop	{r4, r5, r6, pc}
   10286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1028a:	461d      	mov	r5, r3
   1028c:	4610      	mov	r0, r2
   1028e:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   10292:	1f8b      	subs	r3, r1, #6
   10294:	f640 427a 	movw	r2, #3194	; 0xc7a
   10298:	9e08      	ldr	r6, [sp, #32]
   1029a:	4293      	cmp	r3, r2
   1029c:	d81c      	bhi.n	102d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   1029e:	1f83      	subs	r3, r0, #6
   102a0:	4293      	cmp	r3, r2
   102a2:	d819      	bhi.n	102d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   102a4:	4281      	cmp	r1, r0
   102a6:	d817      	bhi.n	102d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   102a8:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   102ac:	d214      	bcs.n	102d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   102ae:	f1a4 010a 	sub.w	r1, r4, #10
   102b2:	1f12      	subs	r2, r2, #4
   102b4:	4291      	cmp	r1, r2
   102b6:	d80f      	bhi.n	102d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   102b8:	f7fd fd10 	bl	dcdc <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   102bc:	1c6d      	adds	r5, r5, #1
   102be:	4368      	muls	r0, r5
   102c0:	f240 2171 	movw	r1, #625	; 0x271
   102c4:	0040      	lsls	r0, r0, #1
   102c6:	434c      	muls	r4, r1
   102c8:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   102cc:	d204      	bcs.n	102d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   102ce:	42b7      	cmp	r7, r6
   102d0:	d802      	bhi.n	102d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   102d2:	2001      	movs	r0, #1
   102d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102d8:	2000      	movs	r0, #0
   102da:	e7fb      	b.n	102d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
   102dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102e0:	4606      	mov	r6, r0
   102e2:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   102e6:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   102ea:	4615      	mov	r5, r2
   102ec:	302c      	adds	r0, #44	; 0x2c
   102ee:	f7f5 f907 	bl	5500 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   102f2:	4680      	mov	r8, r0
   102f4:	2102      	movs	r1, #2
   102f6:	f7fd fd7c 	bl	ddf2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   102fa:	4287      	cmp	r7, r0
   102fc:	d200      	bcs.n	10300 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36a>
   102fe:	4638      	mov	r0, r7
   10300:	4607      	mov	r7, r0
   10302:	2102      	movs	r1, #2
   10304:	4640      	mov	r0, r8
   10306:	f7fd fd74 	bl	ddf2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1030a:	4284      	cmp	r4, r0
   1030c:	d200      	bcs.n	10310 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x37a>
   1030e:	4620      	mov	r0, r4
   10310:	8831      	ldrh	r1, [r6, #0]
   10312:	8029      	strh	r1, [r5, #0]
   10314:	2f1b      	cmp	r7, #27
   10316:	d913      	bls.n	10340 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
   10318:	2ffb      	cmp	r7, #251	; 0xfb
   1031a:	d300      	bcc.n	1031e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x388>
   1031c:	27fb      	movs	r7, #251	; 0xfb
   1031e:	806f      	strh	r7, [r5, #2]
   10320:	281b      	cmp	r0, #27
   10322:	d90f      	bls.n	10344 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ae>
   10324:	28fb      	cmp	r0, #251	; 0xfb
   10326:	d300      	bcc.n	1032a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x394>
   10328:	20fb      	movs	r0, #251	; 0xfb
   1032a:	80e8      	strh	r0, [r5, #6]
   1032c:	4640      	mov	r0, r8
   1032e:	f7ff fe43 	bl	ffb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
   10332:	80a8      	strh	r0, [r5, #4]
   10334:	4640      	mov	r0, r8
   10336:	f7ff fe3f 	bl	ffb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
   1033a:	8128      	strh	r0, [r5, #8]
   1033c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10340:	271b      	movs	r7, #27
   10342:	e7ec      	b.n	1031e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x388>
   10344:	201b      	movs	r0, #27
   10346:	e7f0      	b.n	1032a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x394>
   10348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1034c:	7890      	ldrb	r0, [r2, #2]
   1034e:	9e06      	ldr	r6, [sp, #24]
   10350:	461d      	mov	r5, r3
   10352:	4614      	mov	r4, r2
   10354:	b908      	cbnz	r0, 1035a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c4>
   10356:	f7f7 fb0d 	bl	7974 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1035a:	78e4      	ldrb	r4, [r4, #3]
   1035c:	4607      	mov	r7, r0
   1035e:	b914      	cbnz	r4, 10366 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3d0>
   10360:	f7f7 fb08 	bl	7974 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10364:	4604      	mov	r4, r0
   10366:	b16f      	cbz	r7, 10384 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
   10368:	b164      	cbz	r4, 10384 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
   1036a:	4638      	mov	r0, r7
   1036c:	f7ff fe2f 	bl	ffce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
   10370:	4620      	mov	r0, r4
   10372:	f7ff fe2c 	bl	ffce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
   10376:	b12f      	cbz	r7, 10384 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
   10378:	b124      	cbz	r4, 10384 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
   1037a:	702f      	strb	r7, [r5, #0]
   1037c:	7034      	strb	r4, [r6, #0]
   1037e:	2000      	movs	r0, #0
   10380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10384:	2009      	movs	r0, #9
   10386:	e7fb      	b.n	10380 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
   10388:	207f      	movs	r0, #127	; 0x7f
   1038a:	f000 b828 	b.w	103de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x448>
   1038e:	b508      	push	{r3, lr}
   10390:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10394:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
   10398:	f88d 0000 	strb.w	r0, [sp]
   1039c:	9800      	ldr	r0, [sp, #0]
   1039e:	9000      	str	r0, [sp, #0]
   103a0:	f89d 0000 	ldrb.w	r0, [sp]
   103a4:	b100      	cbz	r0, 103a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x412>
   103a6:	2001      	movs	r0, #1
   103a8:	1e40      	subs	r0, r0, #1
   103aa:	4208      	tst	r0, r1
   103ac:	d003      	beq.n	103b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
   103ae:	2904      	cmp	r1, #4
   103b0:	d001      	beq.n	103b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
   103b2:	2001      	movs	r0, #1
   103b4:	bd08      	pop	{r3, pc}
   103b6:	2000      	movs	r0, #0
   103b8:	bd08      	pop	{r3, pc}
   103ba:	b510      	push	{r4, lr}
   103bc:	f000 f804 	bl	103c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   103c0:	2800      	cmp	r0, #0
   103c2:	d000      	beq.n	103c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x430>
   103c4:	2001      	movs	r0, #1
   103c6:	bd10      	pop	{r4, pc}
   103c8:	b510      	push	{r4, lr}
   103ca:	f7f4 fbdf 	bl	4b8c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   103ce:	2804      	cmp	r0, #4
   103d0:	d003      	beq.n	103da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x444>
   103d2:	2805      	cmp	r0, #5
   103d4:	d001      	beq.n	103da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x444>
   103d6:	2000      	movs	r0, #0
   103d8:	bd10      	pop	{r4, pc}
   103da:	2001      	movs	r0, #1
   103dc:	bd10      	pop	{r4, pc}
   103de:	b508      	push	{r3, lr}
   103e0:	f640 1288 	movw	r2, #2440	; 0x988
   103e4:	2300      	movs	r3, #0
   103e6:	4669      	mov	r1, sp
   103e8:	f7fc fa80 	bl	c8ec <mpsl_fem_tx_power_split>
   103ec:	bd08      	pop	{r3, pc}
   103ee:	b530      	push	{r4, r5, lr}
   103f0:	f340 0400 	sbfx	r4, r0, #0, #1
   103f4:	f340 0040 	sbfx	r0, r0, #1, #1
   103f8:	1c40      	adds	r0, r0, #1
   103fa:	9d03      	ldr	r5, [sp, #12]
   103fc:	1c64      	adds	r4, r4, #1
   103fe:	d000      	beq.n	10402 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46c>
   10400:	b119      	cbz	r1, 1040a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x474>
   10402:	b100      	cbz	r0, 10406 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
   10404:	b10a      	cbz	r2, 1040a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x474>
   10406:	b91c      	cbnz	r4, 10410 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47a>
   10408:	e001      	b.n	1040e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x478>
   1040a:	2011      	movs	r0, #17
   1040c:	bd30      	pop	{r4, r5, pc}
   1040e:	2100      	movs	r1, #0
   10410:	7019      	strb	r1, [r3, #0]
   10412:	b900      	cbnz	r0, 10416 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x480>
   10414:	2200      	movs	r2, #0
   10416:	702a      	strb	r2, [r5, #0]
   10418:	2000      	movs	r0, #0
   1041a:	bd30      	pop	{r4, r5, pc}
   1041c:	b510      	push	{r4, lr}
   1041e:	f7ff ffd3 	bl	103c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   10422:	b120      	cbz	r0, 1042e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   10424:	f7f3 fa46 	bl	38b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   10428:	b108      	cbz	r0, 1042e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   1042a:	2001      	movs	r0, #1
   1042c:	bd10      	pop	{r4, pc}
   1042e:	2000      	movs	r0, #0
   10430:	bd10      	pop	{r4, pc}
   10432:	6802      	ldr	r2, [r0, #0]
   10434:	b912      	cbnz	r2, 1043c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   10436:	6001      	str	r1, [r0, #0]
   10438:	4770      	bx	lr
   1043a:	4602      	mov	r2, r0
   1043c:	6850      	ldr	r0, [r2, #4]
   1043e:	b108      	cbz	r0, 10444 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
   10440:	428a      	cmp	r2, r1
   10442:	d1fa      	bne.n	1043a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a4>
   10444:	428a      	cmp	r2, r1
   10446:	d0f7      	beq.n	10438 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a2>
   10448:	6051      	str	r1, [r2, #4]
   1044a:	4770      	bx	lr
   1044c:	b510      	push	{r4, lr}
   1044e:	4604      	mov	r4, r0
   10450:	e002      	b.n	10458 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c2>
   10452:	6820      	ldr	r0, [r4, #0]
   10454:	4780      	blx	r0
   10456:	6864      	ldr	r4, [r4, #4]
   10458:	2c00      	cmp	r4, #0
   1045a:	d1fa      	bne.n	10452 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4bc>
   1045c:	bd10      	pop	{r4, pc}
   1045e:	b510      	push	{r4, lr}
   10460:	2000      	movs	r0, #0
   10462:	f7fd fa8d 	bl	d980 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10466:	f7f0 ff29 	bl	12bc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1046a:	f7f1 f931 	bl	16d0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1046e:	f7f1 fabf 	bl	19f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   10472:	2800      	cmp	r0, #0
   10474:	d003      	beq.n	1047e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4e8>
   10476:	21f2      	movs	r1, #242	; 0xf2
   10478:	2001      	movs	r0, #1
   1047a:	f7f0 facf 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1047e:	bd10      	pop	{r4, pc}
   10480:	b510      	push	{r4, lr}
   10482:	f000 f80a 	bl	1049a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x504>
   10486:	f7fe fed1 	bl	f22c <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1048a:	2800      	cmp	r0, #0
   1048c:	d004      	beq.n	10498 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x502>
   1048e:	f44f 71ba 	mov.w	r1, #372	; 0x174
   10492:	2001      	movs	r0, #1
   10494:	f7f0 fac2 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10498:	bd10      	pop	{r4, pc}
   1049a:	b510      	push	{r4, lr}
   1049c:	f7f4 fbbe 	bl	4c1c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   104a0:	b110      	cbz	r0, 104a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x512>
   104a2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   104a6:	e004      	b.n	104b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x51c>
   104a8:	f7fe fd3c 	bl	ef24 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   104ac:	b120      	cbz	r0, 104b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x522>
   104ae:	f240 114f 	movw	r1, #335	; 0x14f
   104b2:	2001      	movs	r0, #1
   104b4:	f7f0 fab2 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104b8:	f7f6 ff48 	bl	734c <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   104bc:	f7f3 f944 	bl	3748 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   104c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104c4:	f7f6 bda4 	b.w	7010 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   104c8:	000b0001 	.word	0x000b0001
   104cc:	000a0002 	.word	0x000a0002
   104d0:	00090005 	.word	0x00090005
   104d4:	0008000a 	.word	0x0008000a
   104d8:	00070014 	.word	0x00070014
   104dc:	0006001e 	.word	0x0006001e
   104e0:	00050032 	.word	0x00050032
   104e4:	0004004b 	.word	0x0004004b
   104e8:	00030064 	.word	0x00030064
   104ec:	00020096 	.word	0x00020096
   104f0:	000100fa 	.word	0x000100fa
   104f4:	000001f4 	.word	0x000001f4

000104f8 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   104f8:	b510      	push	{r4, lr}
   104fa:	6844      	ldr	r4, [r0, #4]
   104fc:	7803      	ldrb	r3, [r0, #0]
   104fe:	2100      	movs	r1, #0
   10500:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
   10504:	3488      	adds	r4, #136	; 0x88
   10506:	4620      	mov	r0, r4
   10508:	f7fd fbf2 	bl	dcf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1050c:	b110      	cbz	r0, 10514 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   1050e:	2020      	movs	r0, #32
   10510:	7760      	strb	r0, [r4, #29]
   10512:	bd10      	pop	{r4, pc}
   10514:	2180      	movs	r1, #128	; 0x80
   10516:	207e      	movs	r0, #126	; 0x7e
   10518:	f7f0 fa80 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001051c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   1051c:	2200      	movs	r2, #0
   1051e:	704a      	strb	r2, [r1, #1]
   10520:	2217      	movs	r2, #23
   10522:	700a      	strb	r2, [r1, #0]
   10524:	f8d0 200a 	ldr.w	r2, [r0, #10]
   10528:	604a      	str	r2, [r1, #4]
   1052a:	89c0      	ldrh	r0, [r0, #14]
   1052c:	8108      	strh	r0, [r1, #8]
   1052e:	4770      	bx	lr
   10530:	b510      	push	{r4, lr}
   10532:	2801      	cmp	r0, #1
   10534:	d006      	beq.n	10544 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   10536:	2802      	cmp	r0, #2
   10538:	d004      	beq.n	10544 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   1053a:	f240 21d7 	movw	r1, #727	; 0x2d7
   1053e:	2006      	movs	r0, #6
   10540:	f7f0 fa6c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10544:	bd10      	pop	{r4, pc}

00010546 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10546:	b510      	push	{r4, lr}
   10548:	f7f7 fdce 	bl	80e8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1054c:	f000 f81d 	bl	1058a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10550:	f7f7 fae6 	bl	7b20 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10558:	f7f7 bbe0 	b.w	7d1c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001055c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1055c:	b510      	push	{r4, lr}
   1055e:	24c8      	movs	r4, #200	; 0xc8
   10560:	1e64      	subs	r4, r4, #1
   10562:	b2e4      	uxtb	r4, r4
   10564:	f7f7 fafa 	bl	7b5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10568:	2802      	cmp	r0, #2
   1056a:	d003      	beq.n	10574 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1056c:	2801      	cmp	r0, #1
   1056e:	d000      	beq.n	10572 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10570:	2000      	movs	r0, #0
   10572:	bd10      	pop	{r4, pc}
   10574:	2c00      	cmp	r4, #0
   10576:	d1f3      	bne.n	10560 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10578:	21ed      	movs	r1, #237	; 0xed
   1057a:	203b      	movs	r0, #59	; 0x3b
   1057c:	f7f0 fa4e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10580:	5840      	ldr	r0, [r0, r1]
   10582:	2800      	cmp	r0, #0
   10584:	d000      	beq.n	10588 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10586:	2001      	movs	r0, #1
   10588:	4770      	bx	lr

0001058a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1058a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1058e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10592:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10596:	f3bf 8f4f 	dsb	sy
   1059a:	f3bf 8f6f 	isb	sy
   1059e:	f7f7 bc57 	b.w	7e50 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   105a2:	2800      	cmp	r0, #0
   105a4:	db09      	blt.n	105ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   105a6:	f000 021f 	and.w	r2, r0, #31
   105aa:	2101      	movs	r1, #1
   105ac:	4091      	lsls	r1, r2
   105ae:	0940      	lsrs	r0, r0, #5
   105b0:	0080      	lsls	r0, r0, #2
   105b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   105b6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   105ba:	4770      	bx	lr
   105bc:	2800      	cmp	r0, #0
   105be:	db0d      	blt.n	105dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   105c0:	f000 021f 	and.w	r2, r0, #31
   105c4:	2101      	movs	r1, #1
   105c6:	4091      	lsls	r1, r2
   105c8:	0940      	lsrs	r0, r0, #5
   105ca:	0080      	lsls	r0, r0, #2
   105cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   105d0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   105d4:	f3bf 8f4f 	dsb	sy
   105d8:	f3bf 8f6f 	isb	sy
   105dc:	4770      	bx	lr
   105de:	5840      	ldr	r0, [r0, r1]
   105e0:	2800      	cmp	r0, #0
   105e2:	d000      	beq.n	105e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   105e4:	2001      	movs	r0, #1
   105e6:	4770      	bx	lr
   105e8:	5840      	ldr	r0, [r0, r1]
   105ea:	2800      	cmp	r0, #0
   105ec:	d000      	beq.n	105f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   105ee:	2001      	movs	r0, #1
   105f0:	4770      	bx	lr

000105f2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   105f2:	b510      	push	{r4, lr}
   105f4:	4604      	mov	r4, r0
   105f6:	4608      	mov	r0, r1
   105f8:	f7f7 fe9c 	bl	8334 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   105fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10600:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10604:	fbb0 f0f1 	udiv	r0, r0, r1
   10608:	1a20      	subs	r0, r4, r0
   1060a:	1e80      	subs	r0, r0, #2
   1060c:	bd10      	pop	{r4, pc}

0001060e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1060e:	b510      	push	{r4, lr}
   10610:	4604      	mov	r4, r0
   10612:	4608      	mov	r0, r1
   10614:	f7f7 fe8e 	bl	8334 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10618:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1061c:	fbb0 f0f1 	udiv	r0, r0, r1
   10620:	1a20      	subs	r0, r4, r0
   10622:	bd10      	pop	{r4, pc}
   10624:	2804      	cmp	r0, #4
   10626:	d202      	bcs.n	1062e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10628:	f04f 0028 	mov.w	r0, #40	; 0x28
   1062c:	4770      	bx	lr
   1062e:	d102      	bne.n	10636 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10630:	f04f 0010 	mov.w	r0, #16
   10634:	4770      	bx	lr
   10636:	f04f 0000 	mov.w	r0, #0
   1063a:	4770      	bx	lr
   1063c:	2100      	movs	r1, #0
   1063e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10642:	f800 1f24 	strb.w	r1, [r0, #36]!
   10646:	7041      	strb	r1, [r0, #1]
   10648:	4770      	bx	lr

0001064a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   1064a:	b570      	push	{r4, r5, r6, lr}
   1064c:	f7f8 fbd2 	bl	8df4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10650:	4605      	mov	r5, r0
   10652:	2400      	movs	r4, #0
   10654:	e006      	b.n	10664 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10656:	4620      	mov	r0, r4
   10658:	f7f8 fbd2 	bl	8e00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1065c:	f7ff ffee 	bl	1063c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10660:	1c64      	adds	r4, r4, #1
   10662:	b2e4      	uxtb	r4, r4
   10664:	42ac      	cmp	r4, r5
   10666:	d3f6      	bcc.n	10656 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10668:	bd70      	pop	{r4, r5, r6, pc}

0001066a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   1066a:	f7fb b81b 	b.w	b6a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0001066e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   1066e:	b510      	push	{r4, lr}
   10670:	2000      	movs	r0, #0
   10672:	f7fb fb73 	bl	bd5c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10676:	6800      	ldr	r0, [r0, #0]
   10678:	2800      	cmp	r0, #0
   1067a:	bf18      	it	ne
   1067c:	2001      	movne	r0, #1
   1067e:	bd10      	pop	{r4, pc}

00010680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   10680:	f7fb bb46 	b.w	bd10 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00010684 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10684:	0a41      	lsrs	r1, r0, #9
   10686:	f643 5209 	movw	r2, #15625	; 0x3d09
   1068a:	4351      	muls	r1, r2
   1068c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10690:	fb10 f002 	smulbb	r0, r0, r2
   10694:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10698:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   1069c:	4770      	bx	lr
   1069e:	2800      	cmp	r0, #0
   106a0:	db09      	blt.n	106b6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   106a2:	f000 021f 	and.w	r2, r0, #31
   106a6:	2101      	movs	r1, #1
   106a8:	4091      	lsls	r1, r2
   106aa:	0940      	lsrs	r0, r0, #5
   106ac:	0080      	lsls	r0, r0, #2
   106ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106b2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   106b6:	4770      	bx	lr
   106b8:	2800      	cmp	r0, #0
   106ba:	db0d      	blt.n	106d8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   106bc:	f000 021f 	and.w	r2, r0, #31
   106c0:	2101      	movs	r1, #1
   106c2:	4091      	lsls	r1, r2
   106c4:	0940      	lsrs	r0, r0, #5
   106c6:	0080      	lsls	r0, r0, #2
   106c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106cc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   106d0:	f3bf 8f4f 	dsb	sy
   106d4:	f3bf 8f6f 	isb	sy
   106d8:	4770      	bx	lr
   106da:	5840      	ldr	r0, [r0, r1]
   106dc:	2800      	cmp	r0, #0
   106de:	d000      	beq.n	106e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   106e0:	2001      	movs	r0, #1
   106e2:	4770      	bx	lr
   106e4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   106e8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   106ec:	f002 0201 	and.w	r2, r2, #1
   106f0:	03c0      	lsls	r0, r0, #15
   106f2:	d503      	bpl.n	106fc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   106f4:	428a      	cmp	r2, r1
   106f6:	d101      	bne.n	106fc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   106f8:	2001      	movs	r0, #1
   106fa:	4770      	bx	lr
   106fc:	2000      	movs	r0, #0
   106fe:	4770      	bx	lr

00010700 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10700:	b510      	push	{r4, lr}
   10702:	2101      	movs	r1, #1
   10704:	0788      	lsls	r0, r1, #30
   10706:	f7fb fedd 	bl	c4c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1070a:	2800      	cmp	r0, #0
   1070c:	d000      	beq.n	10710 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   1070e:	2001      	movs	r0, #1
   10710:	bd10      	pop	{r4, pc}

00010712 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10712:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10716:	2101      	movs	r1, #1
   10718:	6001      	str	r1, [r0, #0]
   1071a:	4770      	bx	lr

0001071c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   1071c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10720:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10724:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10728:	f002 0203 	and.w	r2, r2, #3
   1072c:	03c9      	lsls	r1, r1, #15
   1072e:	d503      	bpl.n	10738 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10730:	4282      	cmp	r2, r0
   10732:	d101      	bne.n	10738 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10734:	2001      	movs	r0, #1
   10736:	4770      	bx	lr
   10738:	2000      	movs	r0, #0
   1073a:	4770      	bx	lr

0001073c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   1073c:	b510      	push	{r4, lr}
   1073e:	2100      	movs	r1, #0
   10740:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10744:	f7fb febe 	bl	c4c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10748:	2800      	cmp	r0, #0
   1074a:	d000      	beq.n	1074e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   1074c:	2001      	movs	r0, #1
   1074e:	bd10      	pop	{r4, pc}
   10750:	2800      	cmp	r0, #0
   10752:	db09      	blt.n	10768 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10754:	f000 021f 	and.w	r2, r0, #31
   10758:	2101      	movs	r1, #1
   1075a:	4091      	lsls	r1, r2
   1075c:	0940      	lsrs	r0, r0, #5
   1075e:	0080      	lsls	r0, r0, #2
   10760:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10764:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10768:	4770      	bx	lr
   1076a:	2800      	cmp	r0, #0
   1076c:	db0d      	blt.n	1078a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   1076e:	f000 021f 	and.w	r2, r0, #31
   10772:	2101      	movs	r1, #1
   10774:	4091      	lsls	r1, r2
   10776:	0940      	lsrs	r0, r0, #5
   10778:	0080      	lsls	r0, r0, #2
   1077a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1077e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10782:	f3bf 8f4f 	dsb	sy
   10786:	f3bf 8f6f 	isb	sy
   1078a:	4770      	bx	lr
   1078c:	00021000 	.word	0x00021000
   10790:	000000fa 	.word	0x000000fa
   10794:	5faee8ff 	.word	0x5faee8ff
   10798:	c87c9577 	.word	0xc87c9577
   1079c:	18146227 	.word	0x18146227
   107a0:	c65deae6 	.word	0xc65deae6
   107a4:	3a723992 	.word	0x3a723992
   107a8:	2800      	cmp	r0, #0
   107aa:	db09      	blt.n	107c0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   107ac:	f000 021f 	and.w	r2, r0, #31
   107b0:	2101      	movs	r1, #1
   107b2:	4091      	lsls	r1, r2
   107b4:	0940      	lsrs	r0, r0, #5
   107b6:	0080      	lsls	r0, r0, #2
   107b8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   107bc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   107c0:	4770      	bx	lr

000107c2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   107c2:	f3ef 8110 	mrs	r1, PRIMASK
   107c6:	b672      	cpsid	i
   107c8:	7802      	ldrb	r2, [r0, #0]
   107ca:	2a01      	cmp	r2, #1
   107cc:	d001      	beq.n	107d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   107ce:	2201      	movs	r2, #1
   107d0:	e000      	b.n	107d4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   107d2:	2200      	movs	r2, #0
   107d4:	2301      	movs	r3, #1
   107d6:	7003      	strb	r3, [r0, #0]
   107d8:	b901      	cbnz	r1, 107dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   107da:	b662      	cpsie	i
   107dc:	b10a      	cbz	r2, 107e2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   107de:	2000      	movs	r0, #0
   107e0:	4770      	bx	lr
   107e2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   107e6:	4770      	bx	lr

000107e8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   107e8:	2100      	movs	r1, #0
   107ea:	7001      	strb	r1, [r0, #0]
   107ec:	4608      	mov	r0, r1
   107ee:	4770      	bx	lr

000107f0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   107f0:	f3ef 8110 	mrs	r1, PRIMASK
   107f4:	b672      	cpsid	i
   107f6:	2200      	movs	r2, #0
   107f8:	7002      	strb	r2, [r0, #0]
   107fa:	b901      	cbnz	r1, 107fe <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   107fc:	b662      	cpsie	i
   107fe:	2000      	movs	r0, #0
   10800:	4770      	bx	lr

00010802 <mpsl_low_priority_process>:
   10802:	f7fb bfb3 	b.w	c76c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010806 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10806:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1080a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1080e:	280f      	cmp	r0, #15
   10810:	d001      	beq.n	10816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10812:	2000      	movs	r0, #0
   10814:	4770      	bx	lr
   10816:	2001      	movs	r0, #1
   10818:	4770      	bx	lr

0001081a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   1081a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1081e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10822:	280a      	cmp	r0, #10
   10824:	d001      	beq.n	1082a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10826:	2000      	movs	r0, #0
   10828:	4770      	bx	lr
   1082a:	2001      	movs	r0, #1
   1082c:	4770      	bx	lr

0001082e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   1082e:	b500      	push	{lr}
   10830:	f7ff fff3 	bl	1081a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10834:	b120      	cbz	r0, 10840 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10836:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1083a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1083e:	b108      	cbz	r0, 10844 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10840:	2000      	movs	r0, #0
   10842:	bd00      	pop	{pc}
   10844:	2001      	movs	r0, #1
   10846:	bd00      	pop	{pc}

00010848 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10848:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1084c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10850:	280e      	cmp	r0, #14
   10852:	d001      	beq.n	10858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10854:	2000      	movs	r0, #0
   10856:	4770      	bx	lr
   10858:	2001      	movs	r0, #1
   1085a:	4770      	bx	lr

0001085c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   1085c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10860:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10864:	2810      	cmp	r0, #16
   10866:	d001      	beq.n	1086c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10868:	2000      	movs	r0, #0
   1086a:	4770      	bx	lr
   1086c:	2001      	movs	r0, #1
   1086e:	4770      	bx	lr

00010870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10870:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10874:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10878:	2806      	cmp	r0, #6
   1087a:	d003      	beq.n	10884 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   1087c:	1c40      	adds	r0, r0, #1
   1087e:	d001      	beq.n	10884 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10880:	2000      	movs	r0, #0
   10882:	4770      	bx	lr
   10884:	2001      	movs	r0, #1
   10886:	4770      	bx	lr

00010888 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10888:	b500      	push	{lr}
   1088a:	f7ff fff1 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1088e:	b148      	cbz	r0, 108a4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10890:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10894:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10898:	2806      	cmp	r0, #6
   1089a:	d303      	bcc.n	108a4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1089c:	1c40      	adds	r0, r0, #1
   1089e:	d001      	beq.n	108a4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   108a0:	2001      	movs	r0, #1
   108a2:	bd00      	pop	{pc}
   108a4:	2000      	movs	r0, #0
   108a6:	bd00      	pop	{pc}

000108a8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   108a8:	b500      	push	{lr}
   108aa:	f7ff ffe1 	bl	10870 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   108ae:	b138      	cbz	r0, 108c0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   108b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   108b4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   108b8:	2806      	cmp	r0, #6
   108ba:	d303      	bcc.n	108c4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   108bc:	1c40      	adds	r0, r0, #1
   108be:	d001      	beq.n	108c4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   108c0:	2000      	movs	r0, #0
   108c2:	bd00      	pop	{pc}
   108c4:	2001      	movs	r0, #1
   108c6:	bd00      	pop	{pc}

000108c8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   108c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   108cc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   108d0:	280d      	cmp	r0, #13
   108d2:	d001      	beq.n	108d8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   108d4:	2000      	movs	r0, #0
   108d6:	4770      	bx	lr
   108d8:	2001      	movs	r0, #1
   108da:	4770      	bx	lr

000108dc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   108dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   108e0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   108e4:	2808      	cmp	r0, #8
   108e6:	d001      	beq.n	108ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   108e8:	2000      	movs	r0, #0
   108ea:	4770      	bx	lr
   108ec:	2001      	movs	r0, #1
   108ee:	4770      	bx	lr

000108f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   108f0:	f7fb bf76 	b.w	c7e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000108f4 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   108f4:	f7fb bf74 	b.w	c7e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000108f8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   108f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108fc:	428a      	cmp	r2, r1
   108fe:	d803      	bhi.n	10908 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10900:	2179      	movs	r1, #121	; 0x79
   10902:	2096      	movs	r0, #150	; 0x96
   10904:	f7fb fe34 	bl	c570 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10908:	fab2 f382 	clz	r3, r2
   1090c:	b143      	cbz	r3, 10920 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   1090e:	4099      	lsls	r1, r3
   10910:	f1c3 0c20 	rsb	ip, r3, #32
   10914:	fa20 fc0c 	lsr.w	ip, r0, ip
   10918:	4098      	lsls	r0, r3
   1091a:	ea41 010c 	orr.w	r1, r1, ip
   1091e:	409a      	lsls	r2, r3
   10920:	0c13      	lsrs	r3, r2, #16
   10922:	fbb1 f5f3 	udiv	r5, r1, r3
   10926:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   1092a:	b287      	uxth	r7, r0
   1092c:	fbb1 f0f3 	udiv	r0, r1, r3
   10930:	fb03 1615 	mls	r6, r3, r5, r1
   10934:	b294      	uxth	r4, r2
   10936:	fb00 f504 	mul.w	r5, r0, r4
   1093a:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   1093e:	42b5      	cmp	r5, r6
   10940:	d905      	bls.n	1094e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10942:	1bad      	subs	r5, r5, r6
   10944:	4295      	cmp	r5, r2
   10946:	bf94      	ite	ls
   10948:	2501      	movls	r5, #1
   1094a:	2502      	movhi	r5, #2
   1094c:	1b40      	subs	r0, r0, r5
   1094e:	0409      	lsls	r1, r1, #16
   10950:	0405      	lsls	r5, r0, #16
   10952:	eb11 010c 	adds.w	r1, r1, ip
   10956:	fba0 0c02 	umull	r0, ip, r0, r2
   1095a:	1a09      	subs	r1, r1, r0
   1095c:	fbb1 f0f3 	udiv	r0, r1, r3
   10960:	fbb1 fcf3 	udiv	ip, r1, r3
   10964:	fb03 131c 	mls	r3, r3, ip, r1
   10968:	fb00 f104 	mul.w	r1, r0, r4
   1096c:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   10970:	4299      	cmp	r1, r3
   10972:	d905      	bls.n	10980 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10974:	1ac9      	subs	r1, r1, r3
   10976:	4291      	cmp	r1, r2
   10978:	bf94      	ite	ls
   1097a:	2101      	movls	r1, #1
   1097c:	2102      	movhi	r1, #2
   1097e:	1a40      	subs	r0, r0, r1
   10980:	4328      	orrs	r0, r5
   10982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010986 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   10986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1098a:	461e      	mov	r6, r3
   1098c:	4615      	mov	r5, r2
   1098e:	4604      	mov	r4, r0
   10990:	9f06      	ldr	r7, [sp, #24]
   10992:	f7ff ffb1 	bl	108f8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   10996:	6030      	str	r0, [r6, #0]
   10998:	fba0 0105 	umull	r0, r1, r0, r5
   1099c:	1a20      	subs	r0, r4, r0
   1099e:	6038      	str	r0, [r7, #0]
   109a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000109a4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   109a4:	2a00      	cmp	r2, #0
   109a6:	bf04      	itt	eq
   109a8:	2000      	moveq	r0, #0
   109aa:	4770      	bxeq	lr
   109ac:	1e52      	subs	r2, r2, #1
   109ae:	d007      	beq.n	109c0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   109b0:	7803      	ldrb	r3, [r0, #0]
   109b2:	f891 c000 	ldrb.w	ip, [r1]
   109b6:	4563      	cmp	r3, ip
   109b8:	bf04      	itt	eq
   109ba:	1c40      	addeq	r0, r0, #1
   109bc:	1c49      	addeq	r1, r1, #1
   109be:	d0f5      	beq.n	109ac <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   109c0:	7800      	ldrb	r0, [r0, #0]
   109c2:	7809      	ldrb	r1, [r1, #0]
   109c4:	1a40      	subs	r0, r0, r1
   109c6:	4770      	bx	lr

000109c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   109c8:	b4f0      	push	{r4, r5, r6, r7}
   109ca:	ea80 0c01 	eor.w	ip, r0, r1
   109ce:	4603      	mov	r3, r0
   109d0:	f01c 0f03 	tst.w	ip, #3
   109d4:	d13c      	bne.n	10a50 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   109d6:	f013 0f03 	tst.w	r3, #3
   109da:	d00b      	beq.n	109f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   109dc:	2a00      	cmp	r2, #0
   109de:	bf04      	itt	eq
   109e0:	bcf0      	popeq	{r4, r5, r6, r7}
   109e2:	4770      	bxeq	lr
   109e4:	f811 cb01 	ldrb.w	ip, [r1], #1
   109e8:	f803 cb01 	strb.w	ip, [r3], #1
   109ec:	1e52      	subs	r2, r2, #1
   109ee:	f013 0f03 	tst.w	r3, #3
   109f2:	d1f3      	bne.n	109dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   109f4:	2a03      	cmp	r2, #3
   109f6:	d94f      	bls.n	10a98 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   109f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   109fc:	d24c      	bcs.n	10a98 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   109fe:	f1c2 0c00 	rsb	ip, r2, #0
   10a02:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10a06:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10a0a:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10a0e:	f1cc 0c00 	rsb	ip, ip, #0
   10a12:	f1bc 0f00 	cmp.w	ip, #0
   10a16:	dd1b      	ble.n	10a50 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10a18:	1f0d      	subs	r5, r1, #4
   10a1a:	1f1c      	subs	r4, r3, #4
   10a1c:	f01c 0f01 	tst.w	ip, #1
   10a20:	d003      	beq.n	10a2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10a22:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10a26:	f844 6f04 	str.w	r6, [r4, #4]!
   10a2a:	ea5f 066c 	movs.w	r6, ip, asr #1
   10a2e:	d007      	beq.n	10a40 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10a30:	686f      	ldr	r7, [r5, #4]
   10a32:	6067      	str	r7, [r4, #4]
   10a34:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10a38:	f844 7f08 	str.w	r7, [r4, #8]!
   10a3c:	1e76      	subs	r6, r6, #1
   10a3e:	d1f7      	bne.n	10a30 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10a40:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10a44:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10a48:	f1cc 0c00 	rsb	ip, ip, #0
   10a4c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10a50:	2a00      	cmp	r2, #0
   10a52:	bf04      	itt	eq
   10a54:	bcf0      	popeq	{r4, r5, r6, r7}
   10a56:	4770      	bxeq	lr
   10a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10a5c:	d226      	bcs.n	10aac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10a5e:	2a00      	cmp	r2, #0
   10a60:	bfdc      	itt	le
   10a62:	bcf0      	pople	{r4, r5, r6, r7}
   10a64:	4770      	bxle	lr
   10a66:	1e49      	subs	r1, r1, #1
   10a68:	1e5b      	subs	r3, r3, #1
   10a6a:	f012 0f01 	tst.w	r2, #1
   10a6e:	d003      	beq.n	10a78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10a70:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10a74:	f803 cf01 	strb.w	ip, [r3, #1]!
   10a78:	1052      	asrs	r2, r2, #1
   10a7a:	bf04      	itt	eq
   10a7c:	bcf0      	popeq	{r4, r5, r6, r7}
   10a7e:	4770      	bxeq	lr
   10a80:	f891 c001 	ldrb.w	ip, [r1, #1]
   10a84:	f883 c001 	strb.w	ip, [r3, #1]
   10a88:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10a8c:	f803 cf02 	strb.w	ip, [r3, #2]!
   10a90:	1e52      	subs	r2, r2, #1
   10a92:	d1f5      	bne.n	10a80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10a94:	bcf0      	pop	{r4, r5, r6, r7}
   10a96:	4770      	bx	lr
   10a98:	2a04      	cmp	r2, #4
   10a9a:	d3d9      	bcc.n	10a50 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10a9c:	f851 cb04 	ldr.w	ip, [r1], #4
   10aa0:	1f12      	subs	r2, r2, #4
   10aa2:	f843 cb04 	str.w	ip, [r3], #4
   10aa6:	2a04      	cmp	r2, #4
   10aa8:	d2f8      	bcs.n	10a9c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10aaa:	e7d1      	b.n	10a50 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10aac:	f811 cb01 	ldrb.w	ip, [r1], #1
   10ab0:	f803 cb01 	strb.w	ip, [r3], #1
   10ab4:	1e52      	subs	r2, r2, #1
   10ab6:	d1f9      	bne.n	10aac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10ab8:	bcf0      	pop	{r4, r5, r6, r7}
   10aba:	4770      	bx	lr

00010abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10abc:	b470      	push	{r4, r5, r6}
   10abe:	4603      	mov	r3, r0
   10ac0:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10ac4:	f010 0f03 	tst.w	r0, #3
   10ac8:	d009      	beq.n	10ade <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10aca:	2a00      	cmp	r2, #0
   10acc:	bf04      	itt	eq
   10ace:	bc70      	popeq	{r4, r5, r6}
   10ad0:	4770      	bxeq	lr
   10ad2:	f803 cb01 	strb.w	ip, [r3], #1
   10ad6:	1e52      	subs	r2, r2, #1
   10ad8:	f013 0f03 	tst.w	r3, #3
   10adc:	d1f5      	bne.n	10aca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10ade:	b2c9      	uxtb	r1, r1
   10ae0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10ae4:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10ae8:	2a03      	cmp	r2, #3
   10aea:	d939      	bls.n	10b60 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10af0:	d236      	bcs.n	10b60 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10af2:	4251      	negs	r1, r2
   10af4:	17cc      	asrs	r4, r1, #31
   10af6:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10afa:	1089      	asrs	r1, r1, #2
   10afc:	424e      	negs	r6, r1
   10afe:	2e00      	cmp	r6, #0
   10b00:	dd11      	ble.n	10b26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10b02:	1f19      	subs	r1, r3, #4
   10b04:	f016 0f01 	tst.w	r6, #1
   10b08:	bf18      	it	ne
   10b0a:	f841 5f04 	strne.w	r5, [r1, #4]!
   10b0e:	1074      	asrs	r4, r6, #1
   10b10:	d004      	beq.n	10b1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10b12:	604d      	str	r5, [r1, #4]
   10b14:	f841 5f08 	str.w	r5, [r1, #8]!
   10b18:	1e64      	subs	r4, r4, #1
   10b1a:	d1fa      	bne.n	10b12 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10b1c:	4271      	negs	r1, r6
   10b1e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10b22:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10b26:	2a00      	cmp	r2, #0
   10b28:	bf04      	itt	eq
   10b2a:	bc70      	popeq	{r4, r5, r6}
   10b2c:	4770      	bxeq	lr
   10b2e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10b32:	d21d      	bcs.n	10b70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10b34:	2a00      	cmp	r2, #0
   10b36:	bfdc      	itt	le
   10b38:	bc70      	pople	{r4, r5, r6}
   10b3a:	4770      	bxle	lr
   10b3c:	1e59      	subs	r1, r3, #1
   10b3e:	f012 0f01 	tst.w	r2, #1
   10b42:	bf18      	it	ne
   10b44:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10b48:	1052      	asrs	r2, r2, #1
   10b4a:	bf04      	itt	eq
   10b4c:	bc70      	popeq	{r4, r5, r6}
   10b4e:	4770      	bxeq	lr
   10b50:	f881 c001 	strb.w	ip, [r1, #1]
   10b54:	f801 cf02 	strb.w	ip, [r1, #2]!
   10b58:	1e52      	subs	r2, r2, #1
   10b5a:	d1f9      	bne.n	10b50 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10b5c:	bc70      	pop	{r4, r5, r6}
   10b5e:	4770      	bx	lr
   10b60:	2a04      	cmp	r2, #4
   10b62:	d3e0      	bcc.n	10b26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10b64:	1f12      	subs	r2, r2, #4
   10b66:	f843 5b04 	str.w	r5, [r3], #4
   10b6a:	2a04      	cmp	r2, #4
   10b6c:	d2fa      	bcs.n	10b64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10b6e:	e7da      	b.n	10b26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10b70:	f803 cb01 	strb.w	ip, [r3], #1
   10b74:	1e52      	subs	r2, r2, #1
   10b76:	d1fb      	bne.n	10b70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10b78:	bc70      	pop	{r4, r5, r6}
   10b7a:	4770      	bx	lr
   10b7c:	f04f 30ff 	mov.w	r0, #4294967295
   10b80:	4770      	bx	lr
   10b82:	2000      	movs	r0, #0
   10b84:	4770      	bx	lr
   10b86:	2000      	movs	r0, #0
   10b88:	4770      	bx	lr
   10b8a:	f04f 30ff 	mov.w	r0, #4294967295
   10b8e:	4770      	bx	lr
   10b90:	4770      	bx	lr
   10b92:	4770      	bx	lr
   10b94:	2000      	movs	r0, #0
   10b96:	4770      	bx	lr
   10b98:	2100      	movs	r1, #0
   10b9a:	7001      	strb	r1, [r0, #0]
   10b9c:	4770      	bx	lr
   10b9e:	f04f 30ff 	mov.w	r0, #4294967295
   10ba2:	4770      	bx	lr
   10ba4:	f04f 30ff 	mov.w	r0, #4294967295
   10ba8:	4770      	bx	lr
   10baa:	2100      	movs	r1, #0
   10bac:	7001      	strb	r1, [r0, #0]
   10bae:	4770      	bx	lr
   10bb0:	f04f 30ff 	mov.w	r0, #4294967295
   10bb4:	4770      	bx	lr
   10bb6:	f04f 30ff 	mov.w	r0, #4294967295
   10bba:	4770      	bx	lr
   10bbc:	7800      	ldrb	r0, [r0, #0]
   10bbe:	2800      	cmp	r0, #0
   10bc0:	d001      	beq.n	10bc6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10bc2:	f06f 0015 	mvn.w	r0, #21
   10bc6:	4770      	bx	lr
   10bc8:	2000      	movs	r0, #0
   10bca:	4770      	bx	lr
   10bcc:	2200      	movs	r2, #0
   10bce:	f000 b802 	b.w	10bd6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010bd2 <mpsl_fem_init>:
   10bd2:	f7f8 b87d 	b.w	8cd0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010bd6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10bd6:	b570      	push	{r4, r5, r6, lr}
   10bd8:	4614      	mov	r4, r2
   10bda:	460d      	mov	r5, r1
   10bdc:	1b00      	subs	r0, r0, r4
   10bde:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10be2:	4288      	cmp	r0, r1
   10be4:	da01      	bge.n	10bea <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10be6:	4608      	mov	r0, r1
   10be8:	e002      	b.n	10bf0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10bea:	287f      	cmp	r0, #127	; 0x7f
   10bec:	dd00      	ble.n	10bf0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10bee:	207f      	movs	r0, #127	; 0x7f
   10bf0:	4619      	mov	r1, r3
   10bf2:	b240      	sxtb	r0, r0
   10bf4:	f7f8 f8a0 	bl	8d38 <mpsl_tx_power_radio_supported_power_adjust>
   10bf8:	7028      	strb	r0, [r5, #0]
   10bfa:	706c      	strb	r4, [r5, #1]
   10bfc:	2100      	movs	r1, #0
   10bfe:	4420      	add	r0, r4
   10c00:	70a9      	strb	r1, [r5, #2]
   10c02:	b240      	sxtb	r0, r0
   10c04:	bd70      	pop	{r4, r5, r6, pc}
   10c06:	080c      	.short	0x080c
   10c08:	010d1702 	.word	0x010d1702
   10c0c:	09090201 	.word	0x09090201
   10c10:	02060101 	.word	0x02060101
   10c14:	03181809 	.word	0x03181809
   10c18:	09090101 	.word	0x09090101
   10c1c:	03050303 	.word	0x03050303
   10c20:	02230102 	.word	0x02230102
   10c24:	10092402 	.word	0x10092402
   10c28:	05050404 	.word	0x05050404
   10c2c:	0b040b0b 	.word	0x0b040b0b
   10c30:	2b          	.byte	0x2b
   10c31:	25          	.byte	0x25
   10c32:	2726      	.short	0x2726
   10c34:	01010301 	.word	0x01010301
   10c38:	01          	.byte	0x01
   10c39:	d8          	.byte	0xd8
   10c3a:	f0ec      	.short	0xf0ec
   10c3c:	00fcf8f4 	.word	0x00fcf8f4
   10c40:	05040302 	.word	0x05040302
   10c44:	00080706 	.word	0x00080706
	...
   10c58:	01000000 	.word	0x01000000
   10c5c:	02010101 	.word	0x02010101
   10c60:	03020202 	.word	0x03020202
   10c64:	04030303 	.word	0x04030303
   10c68:	05040404 	.word	0x05040404
   10c6c:	06050505 	.word	0x06050505
   10c70:	09080706 	.word	0x09080706
   10c74:	0d0c0b0a 	.word	0x0d0c0b0a
	...
   10c8c:	01010101 	.word	0x01010101
   10c90:	02020202 	.word	0x02020202
   10c94:	03030303 	.word	0x03030303
   10c98:	04040404 	.word	0x04040404
   10c9c:	05050505 	.word	0x05050505
   10ca0:	08060606 	.word	0x08060606
   10ca4:	00000009 	.word	0x00000009

00010ca8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   10ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10caa:	4dc1      	ldr	r5, [pc, #772]	; (10fb0 <bt_init+0x308>)
   10cac:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   10cb0:	6899      	ldr	r1, [r3, #8]
   10cb2:	f011 0101 	ands.w	r1, r1, #1
   10cb6:	d124      	bne.n	10d02 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10cb8:	aa01      	add	r2, sp, #4
   10cba:	f640 4003 	movw	r0, #3075	; 0xc03
   10cbe:	f002 fa39 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   10cc2:	4604      	mov	r4, r0
   10cc4:	2800      	cmp	r0, #0
   10cc6:	d164      	bne.n	10d92 <bt_init+0xea>
		hci_reset_complete(rsp);
   10cc8:	9c01      	ldr	r4, [sp, #4]
	uint8_t status = buf->data[0];
   10cca:	68e3      	ldr	r3, [r4, #12]
	if (status) {
   10ccc:	781b      	ldrb	r3, [r3, #0]
   10cce:	b9ab      	cbnz	r3, 10cfc <bt_init+0x54>
		bt_scan_reset();
   10cd0:	f003 f9cc 	bl	1406c <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10cd4:	f3bf 8f5b 	dmb	ish
   10cd8:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   10cdc:	f3bf 8f5b 	dmb	ish
   10ce0:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10ce4:	f003 0309 	and.w	r3, r3, #9
   10ce8:	f3bf 8f5b 	dmb	ish
   10cec:	e852 1f00 	ldrex	r1, [r2]
   10cf0:	e842 3000 	strex	r0, r3, [r2]
   10cf4:	2800      	cmp	r0, #0
   10cf6:	d1f9      	bne.n	10cec <bt_init+0x44>
   10cf8:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   10cfc:	4620      	mov	r0, r4
   10cfe:	f007 fcb1 	bl	18664 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10d02:	aa01      	add	r2, sp, #4
   10d04:	2100      	movs	r1, #0
   10d06:	f241 0003 	movw	r0, #4099	; 0x1003
   10d0a:	f002 fa13 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   10d0e:	4604      	mov	r4, r0
   10d10:	2800      	cmp	r0, #0
   10d12:	d13e      	bne.n	10d92 <bt_init+0xea>
	read_local_features_complete(rsp);
   10d14:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   10d16:	48a7      	ldr	r0, [pc, #668]	; (10fb4 <bt_init+0x30c>)
   10d18:	68f1      	ldr	r1, [r6, #12]
   10d1a:	2208      	movs	r2, #8
   10d1c:	3101      	adds	r1, #1
   10d1e:	f00f f8ec 	bl	1fefa <memcpy>
	net_buf_unref(rsp);
   10d22:	4630      	mov	r0, r6
   10d24:	f007 fc9e 	bl	18664 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   10d28:	4621      	mov	r1, r4
   10d2a:	aa01      	add	r2, sp, #4
   10d2c:	f241 0001 	movw	r0, #4097	; 0x1001
   10d30:	f002 fa00 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   10d34:	4604      	mov	r4, r0
   10d36:	bb60      	cbnz	r0, 10d92 <bt_init+0xea>
	read_local_ver_complete(rsp);
   10d38:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   10d3a:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   10d3c:	785a      	ldrb	r2, [r3, #1]
   10d3e:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10d42:	885a      	ldrh	r2, [r3, #2]
   10d44:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   10d48:	791a      	ldrb	r2, [r3, #4]
   10d4a:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10d4e:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   10d52:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10d56:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   10d5a:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   10d5e:	f007 fc81 	bl	18664 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10d62:	4621      	mov	r1, r4
   10d64:	aa01      	add	r2, sp, #4
   10d66:	f241 0002 	movw	r0, #4098	; 0x1002
   10d6a:	f002 f9e3 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   10d6e:	4604      	mov	r4, r0
   10d70:	b978      	cbnz	r0, 10d92 <bt_init+0xea>
	read_supported_commands_complete(rsp);
   10d72:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   10d74:	4890      	ldr	r0, [pc, #576]	; (10fb8 <bt_init+0x310>)
   10d76:	68f1      	ldr	r1, [r6, #12]
   10d78:	2240      	movs	r2, #64	; 0x40
   10d7a:	3101      	adds	r1, #1
   10d7c:	f00f f8bd 	bl	1fefa <memcpy>
	net_buf_unref(rsp);
   10d80:	4630      	mov	r0, r6
   10d82:	f007 fc6f 	bl	18664 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10d86:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   10d8a:	065a      	lsls	r2, r3, #25
   10d8c:	d404      	bmi.n	10d98 <bt_init+0xf0>
		return -ENODEV;
   10d8e:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   10d92:	4620      	mov	r0, r4
   10d94:	b002      	add	sp, #8
   10d96:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10d98:	4621      	mov	r1, r4
   10d9a:	aa01      	add	r2, sp, #4
   10d9c:	f242 0003 	movw	r0, #8195	; 0x2003
   10da0:	f002 f9c8 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   10da4:	4604      	mov	r4, r0
   10da6:	2800      	cmp	r0, #0
   10da8:	d1f3      	bne.n	10d92 <bt_init+0xea>
	read_le_features_complete(rsp);
   10daa:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   10dac:	4883      	ldr	r0, [pc, #524]	; (10fbc <bt_init+0x314>)
   10dae:	68f1      	ldr	r1, [r6, #12]
   10db0:	2208      	movs	r2, #8
   10db2:	3101      	adds	r1, #1
   10db4:	f00f f8a1 	bl	1fefa <memcpy>
	net_buf_unref(rsp);
   10db8:	4630      	mov	r0, r6
   10dba:	f007 fc53 	bl	18664 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   10dbe:	4621      	mov	r1, r4
   10dc0:	aa01      	add	r2, sp, #4
   10dc2:	f242 0002 	movw	r0, #8194	; 0x2002
   10dc6:	f002 f9b5 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   10dca:	4604      	mov	r4, r0
   10dcc:	2800      	cmp	r0, #0
   10dce:	d1e0      	bne.n	10d92 <bt_init+0xea>
		le_read_buffer_size_complete(rsp);
   10dd0:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   10dd2:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10dd4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10dd8:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   10dda:	b141      	cbz	r1, 10dee <bt_init+0x146>
   10ddc:	78d9      	ldrb	r1, [r3, #3]
   10dde:	b131      	cbz	r1, 10dee <bt_init+0x146>
	bt_dev.le.acl_mtu = acl_mtu;
   10de0:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10de4:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   10de6:	4876      	ldr	r0, [pc, #472]	; (10fc0 <bt_init+0x318>)
   10de8:	4611      	mov	r1, r2
   10dea:	f013 f98e 	bl	2410a <z_impl_k_sem_init>
		net_buf_unref(rsp);
   10dee:	4620      	mov	r0, r4
   10df0:	f007 fc38 	bl	18664 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10df4:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   10df8:	f016 0620 	ands.w	r6, r6, #32
   10dfc:	d118      	bne.n	10e30 <bt_init+0x188>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10dfe:	2102      	movs	r1, #2
   10e00:	f640 406d 	movw	r0, #3181	; 0xc6d
   10e04:	f002 f95c 	bl	130c0 <bt_hci_cmd_create>
		if (!buf) {
   10e08:	4604      	mov	r4, r0
   10e0a:	2800      	cmp	r0, #0
   10e0c:	f000 80cc 	beq.w	10fa8 <bt_init+0x300>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10e10:	2102      	movs	r1, #2
   10e12:	300c      	adds	r0, #12
   10e14:	f012 fc7f 	bl	23716 <net_buf_simple_add>
		cp_le->le = 0x01;
   10e18:	2301      	movs	r3, #1
   10e1a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10e1c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10e1e:	4621      	mov	r1, r4
   10e20:	4632      	mov	r2, r6
   10e22:	f640 406d 	movw	r0, #3181	; 0xc6d
   10e26:	f002 f985 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   10e2a:	4604      	mov	r4, r0
   10e2c:	2800      	cmp	r0, #0
   10e2e:	d1b0      	bne.n	10d92 <bt_init+0xea>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10e30:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   10e34:	071b      	lsls	r3, r3, #28
   10e36:	d512      	bpl.n	10e5e <bt_init+0x1b6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10e38:	aa01      	add	r2, sp, #4
   10e3a:	2100      	movs	r1, #0
   10e3c:	f242 001c 	movw	r0, #8220	; 0x201c
   10e40:	f002 f978 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   10e44:	4604      	mov	r4, r0
   10e46:	2800      	cmp	r0, #0
   10e48:	d1a3      	bne.n	10d92 <bt_init+0xea>
		le_read_supp_states_complete(rsp);
   10e4a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10e4c:	68c3      	ldr	r3, [r0, #12]
   10e4e:	f8d3 2001 	ldr.w	r2, [r3, #1]
   10e52:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   10e56:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   10e5a:	f007 fc03 	bl	18664 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10e5e:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   10e62:	069e      	lsls	r6, r3, #26
   10e64:	d524      	bpl.n	10eb0 <bt_init+0x208>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   10e66:	f10d 0102 	add.w	r1, sp, #2
   10e6a:	4668      	mov	r0, sp
   10e6c:	f00f fa75 	bl	2035a <hci_le_read_max_data_len>
		if (err) {
   10e70:	4604      	mov	r4, r0
   10e72:	2800      	cmp	r0, #0
   10e74:	d18d      	bne.n	10d92 <bt_init+0xea>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10e76:	2104      	movs	r1, #4
   10e78:	f242 0024 	movw	r0, #8228	; 0x2024
   10e7c:	f002 f920 	bl	130c0 <bt_hci_cmd_create>
		if (!buf) {
   10e80:	4606      	mov	r6, r0
   10e82:	2800      	cmp	r0, #0
   10e84:	f000 8090 	beq.w	10fa8 <bt_init+0x300>
   10e88:	2104      	movs	r1, #4
   10e8a:	300c      	adds	r0, #12
   10e8c:	f012 fc43 	bl	23716 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10e90:	f8bd 3000 	ldrh.w	r3, [sp]
   10e94:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10e96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10e9a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10e9c:	4622      	mov	r2, r4
   10e9e:	4631      	mov	r1, r6
   10ea0:	f242 0024 	movw	r0, #8228	; 0x2024
   10ea4:	f002 f946 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   10ea8:	4604      	mov	r4, r0
   10eaa:	2800      	cmp	r0, #0
   10eac:	f47f af71 	bne.w	10d92 <bt_init+0xea>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   10eb0:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   10eb4:	065c      	lsls	r4, r3, #25
   10eb6:	d510      	bpl.n	10eda <bt_init+0x232>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   10eb8:	aa01      	add	r2, sp, #4
   10eba:	2100      	movs	r1, #0
   10ebc:	f242 002a 	movw	r0, #8234	; 0x202a
   10ec0:	f002 f938 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   10ec4:	4604      	mov	r4, r0
   10ec6:	2800      	cmp	r0, #0
   10ec8:	f47f af63 	bne.w	10d92 <bt_init+0xea>
		le_read_resolving_list_size_complete(rsp);
   10ecc:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   10ece:	68c3      	ldr	r3, [r0, #12]
   10ed0:	785b      	ldrb	r3, [r3, #1]
   10ed2:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		net_buf_unref(rsp);
   10ed6:	f007 fbc5 	bl	18664 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   10eda:	2108      	movs	r1, #8
   10edc:	f242 0001 	movw	r0, #8193	; 0x2001
   10ee0:	f002 f8ee 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   10ee4:	4604      	mov	r4, r0
   10ee6:	2800      	cmp	r0, #0
   10ee8:	d05e      	beq.n	10fa8 <bt_init+0x300>
   10eea:	2108      	movs	r1, #8
   10eec:	300c      	adds	r0, #12
   10eee:	f012 fc12 	bl	23716 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   10ef2:	f895 10d8 	ldrb.w	r1, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   10ef6:	f011 0f40 	tst.w	r1, #64	; 0x40
   10efa:	4602      	mov	r2, r0
   10efc:	f240 2302 	movw	r3, #514	; 0x202
   10f00:	bf08      	it	eq
   10f02:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10f04:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   10f06:	bf4c      	ite	mi
   10f08:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   10f0c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10f10:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10f12:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   10f16:	bf48      	it	mi
   10f18:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10f1c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10f20:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10f24:	bf18      	it	ne
   10f26:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10f2a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10f2e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   10f30:	bf48      	it	mi
   10f32:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10f36:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   10f38:	bf08      	it	eq
   10f3a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   10f3e:	2100      	movs	r1, #0
   10f40:	f00f f98f 	bl	20262 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10f44:	4621      	mov	r1, r4
   10f46:	2200      	movs	r2, #0
   10f48:	f242 0001 	movw	r0, #8193	; 0x2001
   10f4c:	f002 f8f2 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   10f50:	4604      	mov	r4, r0
   10f52:	2800      	cmp	r0, #0
   10f54:	f47f af1d 	bne.w	10d92 <bt_init+0xea>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10f58:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   10f5c:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10f60:	0698      	lsls	r0, r3, #26
   10f62:	d42f      	bmi.n	10fc4 <bt_init+0x31c>
	if (bt_dev.le.acl_mtu) {
   10f64:	b9c9      	cbnz	r1, 10f9a <bt_init+0x2f2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10f66:	aa01      	add	r2, sp, #4
   10f68:	f241 0005 	movw	r0, #4101	; 0x1005
   10f6c:	f002 f8e2 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   10f70:	4604      	mov	r4, r0
   10f72:	2800      	cmp	r0, #0
   10f74:	f47f af0d 	bne.w	10d92 <bt_init+0xea>
	if (bt_dev.le.acl_mtu) {
   10f78:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   10f7c:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   10f7e:	b94b      	cbnz	r3, 10f94 <bt_init+0x2ec>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   10f80:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10f82:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10f86:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10f8a:	889a      	ldrh	r2, [r3, #4]
   10f8c:	480c      	ldr	r0, [pc, #48]	; (10fc0 <bt_init+0x318>)
   10f8e:	4611      	mov	r1, r2
   10f90:	f013 f8bb 	bl	2410a <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10f94:	4620      	mov	r0, r4
   10f96:	f007 fb65 	bl	18664 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10f9a:	2108      	movs	r1, #8
   10f9c:	f640 4001 	movw	r0, #3073	; 0xc01
   10fa0:	f002 f88e 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   10fa4:	4604      	mov	r4, r0
   10fa6:	b990      	cbnz	r0, 10fce <bt_init+0x326>
		return -ENOBUFS;
   10fa8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10fac:	e6f1      	b.n	10d92 <bt_init+0xea>
   10fae:	bf00      	nop
   10fb0:	20000380 	.word	0x20000380
   10fb4:	200003f8 	.word	0x200003f8
   10fb8:	20000400 	.word	0x20000400
   10fbc:	20000458 	.word	0x20000458
   10fc0:	20000488 	.word	0x20000488
	else if (!bt_dev.le.acl_mtu) {
   10fc4:	2900      	cmp	r1, #0
   10fc6:	d1e8      	bne.n	10f9a <bt_init+0x2f2>
		return -EIO;
   10fc8:	f06f 0404 	mvn.w	r4, #4
   10fcc:	e6e1      	b.n	10d92 <bt_init+0xea>
   10fce:	2108      	movs	r1, #8
   10fd0:	300c      	adds	r0, #12
   10fd2:	f012 fba0 	bl	23716 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10fd6:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   10fda:	07d9      	lsls	r1, r3, #31
   10fdc:	4602      	mov	r2, r0
   10fde:	d44f      	bmi.n	11080 <bt_init+0x3d8>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   10fe0:	482b      	ldr	r0, [pc, #172]	; (11090 <bt_init+0x3e8>)
   10fe2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   10fe6:	f00f f93c 	bl	20262 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10fea:	4621      	mov	r1, r4
   10fec:	2200      	movs	r2, #0
   10fee:	f640 4001 	movw	r0, #3073	; 0xc01
   10ff2:	f002 f89f 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   10ff6:	4604      	mov	r4, r0
   10ff8:	2800      	cmp	r0, #0
   10ffa:	f47f aeca 	bne.w	10d92 <bt_init+0xea>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10ffe:	4601      	mov	r1, r0
   11000:	aa01      	add	r2, sp, #4
   11002:	f64f 4001 	movw	r0, #64513	; 0xfc01
   11006:	f002 f895 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   1100a:	4604      	mov	r4, r0
   1100c:	bb48      	cbnz	r0, 11062 <bt_init+0x3ba>
	net_buf_unref(rsp);
   1100e:	9801      	ldr	r0, [sp, #4]
   11010:	f007 fb28 	bl	18664 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11014:	4621      	mov	r1, r4
   11016:	aa01      	add	r2, sp, #4
   11018:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1101c:	f002 f88a 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   11020:	4604      	mov	r4, r0
   11022:	b9f0      	cbnz	r0, 11062 <bt_init+0x3ba>
	rp.cmds = (void *)rsp->data;
   11024:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11026:	481b      	ldr	r0, [pc, #108]	; (11094 <bt_init+0x3ec>)
   11028:	68f1      	ldr	r1, [r6, #12]
   1102a:	2202      	movs	r2, #2
   1102c:	3101      	adds	r1, #1
   1102e:	f00e ff64 	bl	1fefa <memcpy>
	net_buf_unref(rsp);
   11032:	4630      	mov	r0, r6
   11034:	f007 fb16 	bl	18664 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   11038:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   1103c:	075b      	lsls	r3, r3, #29
   1103e:	d510      	bpl.n	11062 <bt_init+0x3ba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   11040:	aa01      	add	r2, sp, #4
   11042:	4621      	mov	r1, r4
   11044:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11048:	f002 f874 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   1104c:	b948      	cbnz	r0, 11062 <bt_init+0x3ba>
		rp.feat = (void *)rsp->data;
   1104e:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   11050:	4811      	ldr	r0, [pc, #68]	; (11098 <bt_init+0x3f0>)
   11052:	68e1      	ldr	r1, [r4, #12]
   11054:	2201      	movs	r2, #1
   11056:	4411      	add	r1, r2
   11058:	f00e ff4f 	bl	1fefa <memcpy>
		net_buf_unref(rsp);
   1105c:	4620      	mov	r0, r4
   1105e:	f007 fb01 	bl	18664 <net_buf_unref>
	err = bt_id_init();
   11062:	f002 ff5f 	bl	13f24 <bt_id_init>
	if (err) {
   11066:	4604      	mov	r4, r0
   11068:	2800      	cmp	r0, #0
   1106a:	f47f ae92 	bne.w	10d92 <bt_init+0xea>
		err = bt_conn_init();
   1106e:	f004 f90b 	bl	15288 <bt_conn_init>
		if (err) {
   11072:	4604      	mov	r4, r0
   11074:	2800      	cmp	r0, #0
   11076:	f47f ae8c 	bne.w	10d92 <bt_init+0xea>
	bt_finalize_init();
   1107a:	f002 fbe7 	bl	1384c <bt_finalize_init>
	return 0;
   1107e:	e688      	b.n	10d92 <bt_init+0xea>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   11080:	a101      	add	r1, pc, #4	; (adr r1, 11088 <bt_init+0x3e0>)
   11082:	e9d1 0100 	ldrd	r0, r1, [r1]
   11086:	e7ae      	b.n	10fe6 <bt_init+0x33e>
   11088:	02008890 	.word	0x02008890
   1108c:	20008000 	.word	0x20008000
   11090:	02008810 	.word	0x02008810
   11094:	20000441 	.word	0x20000441
   11098:	20000440 	.word	0x20000440

0001109c <notify_func>:
static struct bt_gatt_subscribe_params subscribe_params;

static uint8_t notify_func(struct bt_conn *conn,
                           struct bt_gatt_subscribe_params *params,
                           const void *data, uint16_t length)
{
   1109c:	b538      	push	{r3, r4, r5, lr}
   1109e:	4614      	mov	r4, r2
   110a0:	460d      	mov	r5, r1
   110a2:	461a      	mov	r2, r3
    if (!data)
   110a4:	b92c      	cbnz	r4, 110b2 <notify_func+0x16>
    {
        printk("Unsubscribed\n");
   110a6:	4806      	ldr	r0, [pc, #24]	; (110c0 <notify_func+0x24>)
   110a8:	f00e f96b 	bl	1f382 <printk>
        params->value_handle = 0U;
   110ac:	81ac      	strh	r4, [r5, #12]
        return BT_GATT_ITER_STOP;
   110ae:	4620      	mov	r0, r4
    }

    printk("[NOTIFICATION] data %p length %u\n", data, length);

    return BT_GATT_ITER_CONTINUE;
}
   110b0:	bd38      	pop	{r3, r4, r5, pc}
    printk("[NOTIFICATION] data %p length %u\n", data, length);
   110b2:	4804      	ldr	r0, [pc, #16]	; (110c4 <notify_func+0x28>)
   110b4:	4621      	mov	r1, r4
   110b6:	f00e f964 	bl	1f382 <printk>
    return BT_GATT_ITER_CONTINUE;
   110ba:	2001      	movs	r0, #1
   110bc:	e7f8      	b.n	110b0 <notify_func+0x14>
   110be:	bf00      	nop
   110c0:	00025630 	.word	0x00025630
   110c4:	0002563e 	.word	0x0002563e

000110c8 <discover_func>:
}

static uint8_t discover_func(struct bt_conn *conn,
                             const struct bt_gatt_attr *attr,
                             struct bt_gatt_discover_params *params)
{
   110c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110cc:	4606      	mov	r6, r0
   110ce:	b08c      	sub	sp, #48	; 0x30
   110d0:	4615      	mov	r5, r2
    struct bt_gatt_include *gatt_include;
    char str[BT_UUID_STR_LEN];

    int err;

    if (!attr)
   110d2:	460c      	mov	r4, r1
   110d4:	b959      	cbnz	r1, 110ee <discover_func+0x26>
    {
        printk("Discover complete\n");
   110d6:	4849      	ldr	r0, [pc, #292]	; (111fc <discover_func+0x134>)
   110d8:	f00e f953 	bl	1f382 <printk>
        (void)memset(params, 0, sizeof(*params));
   110dc:	2214      	movs	r2, #20
   110de:	4621      	mov	r1, r4
   110e0:	4628      	mov	r0, r5
   110e2:	f00e ff15 	bl	1ff10 <memset>
        break;
    }


    return BT_GATT_ITER_CONTINUE; */
}
   110e6:	2000      	movs	r0, #0
   110e8:	b00c      	add	sp, #48	; 0x30
   110ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        printk("Discover in progress\n");
   110ee:	4844      	ldr	r0, [pc, #272]	; (11200 <discover_func+0x138>)
    if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_CONTROL))
   110f0:	4d44      	ldr	r5, [pc, #272]	; (11204 <discover_func+0x13c>)
        printk("Discover in progress\n");
   110f2:	f00e f946 	bl	1f382 <printk>
    if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_CONTROL))
   110f6:	4b44      	ldr	r3, [pc, #272]	; (11208 <discover_func+0x140>)
   110f8:	f8d5 c000 	ldr.w	ip, [r5]
   110fc:	aa02      	add	r2, sp, #8
   110fe:	f103 0810 	add.w	r8, r3, #16
   11102:	4696      	mov	lr, r2
   11104:	6818      	ldr	r0, [r3, #0]
   11106:	6859      	ldr	r1, [r3, #4]
   11108:	4617      	mov	r7, r2
   1110a:	c703      	stmia	r7!, {r0, r1}
   1110c:	3308      	adds	r3, #8
   1110e:	4543      	cmp	r3, r8
   11110:	463a      	mov	r2, r7
   11112:	d1f7      	bne.n	11104 <discover_func+0x3c>
   11114:	781b      	ldrb	r3, [r3, #0]
   11116:	703b      	strb	r3, [r7, #0]
   11118:	4671      	mov	r1, lr
   1111a:	4660      	mov	r0, ip
   1111c:	f00e ff46 	bl	1ffac <bt_uuid_cmp>
   11120:	4f3a      	ldr	r7, [pc, #232]	; (1120c <discover_func+0x144>)
   11122:	bb28      	cbnz	r0, 11170 <discover_func+0xa8>
        memcpy(&uuid128, BT_UUID_SAMPLING_ON, sizeof(uuid128));
   11124:	f1a7 0310 	sub.w	r3, r7, #16
   11128:	aa07      	add	r2, sp, #28
   1112a:	6818      	ldr	r0, [r3, #0]
   1112c:	6859      	ldr	r1, [r3, #4]
   1112e:	4694      	mov	ip, r2
   11130:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11134:	3308      	adds	r3, #8
   11136:	42bb      	cmp	r3, r7
   11138:	4662      	mov	r2, ip
   1113a:	d1f6      	bne.n	1112a <discover_func+0x62>
   1113c:	4f34      	ldr	r7, [pc, #208]	; (11210 <discover_func+0x148>)
   1113e:	781b      	ldrb	r3, [r3, #0]
   11140:	f88c 3000 	strb.w	r3, [ip]
   11144:	2211      	movs	r2, #17
   11146:	a907      	add	r1, sp, #28
   11148:	4638      	mov	r0, r7
   1114a:	f00e fed6 	bl	1fefa <memcpy>
        discover_params.start_handle = attr->handle + 1;
   1114e:	8a23      	ldrh	r3, [r4, #16]
        discover_params.uuid = &uuid128.uuid;
   11150:	602f      	str	r7, [r5, #0]
        discover_params.start_handle = attr->handle + 1;
   11152:	3301      	adds	r3, #1
   11154:	812b      	strh	r3, [r5, #8]
        discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   11156:	2303      	movs	r3, #3
   11158:	742b      	strb	r3, [r5, #16]
        err = bt_gatt_discover(conn, &discover_params);
   1115a:	492a      	ldr	r1, [pc, #168]	; (11204 <discover_func+0x13c>)
   1115c:	4630      	mov	r0, r6
   1115e:	f005 fd4b 	bl	16bf8 <bt_gatt_discover>
        if (err)
   11162:	4601      	mov	r1, r0
   11164:	2800      	cmp	r0, #0
   11166:	d0be      	beq.n	110e6 <discover_func+0x1e>
            printk("Discover failed (err %d)\n", err);
   11168:	482a      	ldr	r0, [pc, #168]	; (11214 <discover_func+0x14c>)
            printk("Subscribe failed (err %d)\n", err);
   1116a:	f00e f90a 	bl	1f382 <printk>
   1116e:	e7ba      	b.n	110e6 <discover_func+0x1e>
    else if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_SAMPLING_ON))
   11170:	f8d5 e000 	ldr.w	lr, [r5]
   11174:	f1a7 0310 	sub.w	r3, r7, #16
   11178:	aa07      	add	r2, sp, #28
   1117a:	6818      	ldr	r0, [r3, #0]
   1117c:	6859      	ldr	r1, [r3, #4]
   1117e:	4694      	mov	ip, r2
   11180:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11184:	3308      	adds	r3, #8
   11186:	42bb      	cmp	r3, r7
   11188:	4662      	mov	r2, ip
   1118a:	d1f6      	bne.n	1117a <discover_func+0xb2>
   1118c:	781b      	ldrb	r3, [r3, #0]
   1118e:	f88c 3000 	strb.w	r3, [ip]
   11192:	a907      	add	r1, sp, #28
   11194:	4670      	mov	r0, lr
   11196:	f00e ff09 	bl	1ffac <bt_uuid_cmp>
   1119a:	4f1f      	ldr	r7, [pc, #124]	; (11218 <discover_func+0x150>)
   1119c:	b9c0      	cbnz	r0, 111d0 <discover_func+0x108>
        memcpy(&uuid128, BT_UUID_GATT_CCC, sizeof(uuid128));
   1119e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 11210 <discover_func+0x148>
   111a2:	f88d 0004 	strb.w	r0, [sp, #4]
   111a6:	f642 1302 	movw	r3, #10498	; 0x2902
   111aa:	2211      	movs	r2, #17
   111ac:	a901      	add	r1, sp, #4
   111ae:	4640      	mov	r0, r8
   111b0:	f8ad 3006 	strh.w	r3, [sp, #6]
   111b4:	f00e fea1 	bl	1fefa <memcpy>
        discover_params.start_handle = attr->handle + 2;
   111b8:	8a23      	ldrh	r3, [r4, #16]
        discover_params.uuid = &uuid128.uuid;
   111ba:	f8c5 8000 	str.w	r8, [r5]
        discover_params.start_handle = attr->handle + 2;
   111be:	3302      	adds	r3, #2
   111c0:	812b      	strh	r3, [r5, #8]
        subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   111c2:	4620      	mov	r0, r4
        discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
   111c4:	2304      	movs	r3, #4
   111c6:	742b      	strb	r3, [r5, #16]
        subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   111c8:	f010 ff7e 	bl	220c8 <bt_gatt_attr_value_handle>
   111cc:	81b8      	strh	r0, [r7, #12]
   111ce:	e7c4      	b.n	1115a <discover_func+0x92>
        subscribe_params.notify = notify_func;
   111d0:	4b12      	ldr	r3, [pc, #72]	; (1121c <discover_func+0x154>)
   111d2:	603b      	str	r3, [r7, #0]
        subscribe_params.value = BT_GATT_CCC_NOTIFY;
   111d4:	2301      	movs	r3, #1
   111d6:	823b      	strh	r3, [r7, #16]
        subscribe_params.ccc_handle = attr->handle;
   111d8:	8a23      	ldrh	r3, [r4, #16]
   111da:	81fb      	strh	r3, [r7, #14]
        err = bt_gatt_subscribe(conn, &subscribe_params);
   111dc:	4639      	mov	r1, r7
   111de:	4630      	mov	r0, r6
   111e0:	f005 ff14 	bl	1700c <bt_gatt_subscribe>
        if (err && err != -EALREADY)
   111e4:	4601      	mov	r1, r0
   111e6:	b120      	cbz	r0, 111f2 <discover_func+0x12a>
   111e8:	f110 0f78 	cmn.w	r0, #120	; 0x78
   111ec:	d001      	beq.n	111f2 <discover_func+0x12a>
            printk("Subscribe failed (err %d)\n", err);
   111ee:	480c      	ldr	r0, [pc, #48]	; (11220 <discover_func+0x158>)
   111f0:	e7bb      	b.n	1116a <discover_func+0xa2>
            printk("[SUBSCRIBED]\n");
   111f2:	480c      	ldr	r0, [pc, #48]	; (11224 <discover_func+0x15c>)
   111f4:	f00e f8c5 	bl	1f382 <printk>
        return BT_GATT_ITER_STOP;
   111f8:	e775      	b.n	110e6 <discover_func+0x1e>
   111fa:	bf00      	nop
   111fc:	00025660 	.word	0x00025660
   11200:	00025673 	.word	0x00025673
   11204:	2000260c 	.word	0x2000260c
   11208:	00024ce0 	.word	0x00024ce0
   1120c:	00024d01 	.word	0x00024d01
   11210:	20000758 	.word	0x20000758
   11214:	00025689 	.word	0x00025689
   11218:	200025f0 	.word	0x200025f0
   1121c:	0001109d 	.word	0x0001109d
   11220:	000256a3 	.word	0x000256a3
   11224:	000256be 	.word	0x000256be

00011228 <start_scan>:
        start_scan();
    }
}

static void start_scan(void)
{
   11228:	b530      	push	{r4, r5, lr}
    int err;

    /* This demo doesn't require active scan */
    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
   1122a:	4d0b      	ldr	r5, [pc, #44]	; (11258 <start_scan+0x30>)
   1122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1122e:	b087      	sub	sp, #28
    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
   11230:	ac01      	add	r4, sp, #4
   11232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11234:	682b      	ldr	r3, [r5, #0]
   11236:	4909      	ldr	r1, [pc, #36]	; (1125c <start_scan+0x34>)
   11238:	6023      	str	r3, [r4, #0]
   1123a:	a801      	add	r0, sp, #4
   1123c:	f003 f84e 	bl	142dc <bt_le_scan_start>
    if (err)
   11240:	4601      	mov	r1, r0
   11242:	b120      	cbz	r0, 1124e <start_scan+0x26>

    {
        printk("Scanning failed to start (err %d)\n", err);
   11244:	4806      	ldr	r0, [pc, #24]	; (11260 <start_scan+0x38>)
   11246:	f00e f89c 	bl	1f382 <printk>
        return;
    }

    printk("Scanning successfully started\n");
}
   1124a:	b007      	add	sp, #28
   1124c:	bd30      	pop	{r4, r5, pc}
    printk("Scanning successfully started\n");
   1124e:	4805      	ldr	r0, [pc, #20]	; (11264 <start_scan+0x3c>)
   11250:	f00e f897 	bl	1f382 <printk>
   11254:	e7f9      	b.n	1124a <start_scan+0x22>
   11256:	bf00      	nop
   11258:	00024d04 	.word	0x00024d04
   1125c:	000113d1 	.word	0x000113d1
   11260:	000256cc 	.word	0x000256cc
   11264:	000256ef 	.word	0x000256ef

00011268 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11268:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1126a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1126c:	b08a      	sub	sp, #40	; 0x28
   1126e:	4604      	mov	r4, r0
   11270:	460e      	mov	r6, r1
   11272:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11274:	2b03      	cmp	r3, #3
   11276:	d820      	bhi.n	112ba <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11278:	e8df f003 	tbb	[pc, r3]
   1127c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11280:	4911      	ldr	r1, [pc, #68]	; (112c8 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11282:	4628      	mov	r0, r5
   11284:	f00e fdf8 	bl	1fe78 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11288:	9505      	str	r5, [sp, #20]
   1128a:	7863      	ldrb	r3, [r4, #1]
   1128c:	9304      	str	r3, [sp, #16]
   1128e:	78a3      	ldrb	r3, [r4, #2]
   11290:	9303      	str	r3, [sp, #12]
   11292:	78e3      	ldrb	r3, [r4, #3]
   11294:	9302      	str	r3, [sp, #8]
   11296:	7923      	ldrb	r3, [r4, #4]
   11298:	9301      	str	r3, [sp, #4]
   1129a:	7963      	ldrb	r3, [r4, #5]
   1129c:	9300      	str	r3, [sp, #0]
   1129e:	79a3      	ldrb	r3, [r4, #6]
   112a0:	4a0a      	ldr	r2, [pc, #40]	; (112cc <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   112a2:	211e      	movs	r1, #30
   112a4:	4630      	mov	r0, r6
   112a6:	f00e f879 	bl	1f39c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   112aa:	b00a      	add	sp, #40	; 0x28
   112ac:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   112ae:	4908      	ldr	r1, [pc, #32]	; (112d0 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   112b0:	e7e7      	b.n	11282 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   112b2:	4908      	ldr	r1, [pc, #32]	; (112d4 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   112b4:	e7e5      	b.n	11282 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   112b6:	4908      	ldr	r1, [pc, #32]	; (112d8 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   112b8:	e7e3      	b.n	11282 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   112ba:	4a08      	ldr	r2, [pc, #32]	; (112dc <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   112bc:	210a      	movs	r1, #10
   112be:	4628      	mov	r0, r5
   112c0:	f00e f86c 	bl	1f39c <snprintk>
		break;
   112c4:	e7e0      	b.n	11288 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   112c6:	bf00      	nop
   112c8:	0002570e 	.word	0x0002570e
   112cc:	00025737 	.word	0x00025737
   112d0:	00025715 	.word	0x00025715
   112d4:	0002571c 	.word	0x0002571c
   112d8:	00025726 	.word	0x00025726
   112dc:	00025730 	.word	0x00025730

000112e0 <disconnected>:
    }
    // bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   112e0:	b530      	push	{r4, r5, lr}
    char addr[BT_ADDR_LE_STR_LEN];

    if (conn != default_conn)
   112e2:	4c0c      	ldr	r4, [pc, #48]	; (11314 <disconnected+0x34>)
   112e4:	6823      	ldr	r3, [r4, #0]
   112e6:	4283      	cmp	r3, r0
{
   112e8:	b089      	sub	sp, #36	; 0x24
   112ea:	460d      	mov	r5, r1
    if (conn != default_conn)
   112ec:	d110      	bne.n	11310 <disconnected+0x30>
    {
        return;
    }

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   112ee:	f00f fc92 	bl	20c16 <bt_conn_get_dst>
   112f2:	4669      	mov	r1, sp
   112f4:	f7ff ffb8 	bl	11268 <bt_addr_le_to_str.constprop.0.isra.0>

    printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
   112f8:	4807      	ldr	r0, [pc, #28]	; (11318 <disconnected+0x38>)
   112fa:	462a      	mov	r2, r5
   112fc:	4669      	mov	r1, sp
   112fe:	f00e f840 	bl	1f382 <printk>

    bt_conn_unref(default_conn);
   11302:	6820      	ldr	r0, [r4, #0]
   11304:	f00f fba9 	bl	20a5a <bt_conn_unref>
    default_conn = NULL;
   11308:	2300      	movs	r3, #0
   1130a:	6023      	str	r3, [r4, #0]

    start_scan();
   1130c:	f7ff ff8c 	bl	11228 <start_scan>
}
   11310:	b009      	add	sp, #36	; 0x24
   11312:	bd30      	pop	{r4, r5, pc}
   11314:	20002620 	.word	0x20002620
   11318:	0002575a 	.word	0x0002575a

0001131c <connected>:
{
   1131c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1131e:	b08f      	sub	sp, #60	; 0x3c
   11320:	460d      	mov	r5, r1
   11322:	4606      	mov	r6, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11324:	f00f fc77 	bl	20c16 <bt_conn_get_dst>
   11328:	a906      	add	r1, sp, #24
   1132a:	f7ff ff9d 	bl	11268 <bt_addr_le_to_str.constprop.0.isra.0>
    if (err)
   1132e:	4c20      	ldr	r4, [pc, #128]	; (113b0 <connected+0x94>)
   11330:	b16d      	cbz	r5, 1134e <connected+0x32>
        printk("Failed to connect to %s (%u)\n", addr, err);
   11332:	4820      	ldr	r0, [pc, #128]	; (113b4 <connected+0x98>)
   11334:	462a      	mov	r2, r5
   11336:	a906      	add	r1, sp, #24
   11338:	f00e f823 	bl	1f382 <printk>
        bt_conn_unref(default_conn);
   1133c:	6820      	ldr	r0, [r4, #0]
   1133e:	f00f fb8c 	bl	20a5a <bt_conn_unref>
        default_conn = NULL;
   11342:	2300      	movs	r3, #0
   11344:	6023      	str	r3, [r4, #0]
        start_scan();
   11346:	f7ff ff6f 	bl	11228 <start_scan>
}
   1134a:	b00f      	add	sp, #60	; 0x3c
   1134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (conn != default_conn)
   1134e:	6823      	ldr	r3, [r4, #0]
   11350:	42b3      	cmp	r3, r6
   11352:	d1fa      	bne.n	1134a <connected+0x2e>
    printk("Connected: %s\n", addr);
   11354:	4818      	ldr	r0, [pc, #96]	; (113b8 <connected+0x9c>)
   11356:	a906      	add	r1, sp, #24
   11358:	f00e f813 	bl	1f382 <printk>
    memcpy(&uuid128, BT_UUID_CONTROL, sizeof(uuid128));
   1135c:	4b17      	ldr	r3, [pc, #92]	; (113bc <connected+0xa0>)
   1135e:	aa01      	add	r2, sp, #4
   11360:	f103 0710 	add.w	r7, r3, #16
   11364:	4616      	mov	r6, r2
   11366:	6818      	ldr	r0, [r3, #0]
   11368:	6859      	ldr	r1, [r3, #4]
   1136a:	4615      	mov	r5, r2
   1136c:	c503      	stmia	r5!, {r0, r1}
   1136e:	3308      	adds	r3, #8
   11370:	42bb      	cmp	r3, r7
   11372:	462a      	mov	r2, r5
   11374:	d1f7      	bne.n	11366 <connected+0x4a>
   11376:	781b      	ldrb	r3, [r3, #0]
   11378:	702b      	strb	r3, [r5, #0]
   1137a:	4d11      	ldr	r5, [pc, #68]	; (113c0 <connected+0xa4>)
   1137c:	2211      	movs	r2, #17
   1137e:	4631      	mov	r1, r6
   11380:	4628      	mov	r0, r5
   11382:	f00e fdba 	bl	1fefa <memcpy>
    discover_params.uuid = &uuid128.uuid; //&uuid128.uuid;
   11386:	490f      	ldr	r1, [pc, #60]	; (113c4 <connected+0xa8>)
    discover_params.func = discover_func;
   11388:	4b0f      	ldr	r3, [pc, #60]	; (113c8 <connected+0xac>)
   1138a:	604b      	str	r3, [r1, #4]
    discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
   1138c:	2301      	movs	r3, #1
   1138e:	810b      	strh	r3, [r1, #8]
    discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
   11390:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11394:	81cb      	strh	r3, [r1, #14]
    err = bt_gatt_discover(default_conn, &discover_params);
   11396:	6820      	ldr	r0, [r4, #0]
    discover_params.uuid = &uuid128.uuid; //&uuid128.uuid;
   11398:	600d      	str	r5, [r1, #0]
    discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   1139a:	2300      	movs	r3, #0
   1139c:	740b      	strb	r3, [r1, #16]
    err = bt_gatt_discover(default_conn, &discover_params);
   1139e:	f005 fc2b 	bl	16bf8 <bt_gatt_discover>
    if (err)
   113a2:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   113a6:	d0d0      	beq.n	1134a <connected+0x2e>
        printk("Discover failed(err %d)\n", err);
   113a8:	4808      	ldr	r0, [pc, #32]	; (113cc <connected+0xb0>)
   113aa:	f00d ffea 	bl	1f382 <printk>
        return;
   113ae:	e7cc      	b.n	1134a <connected+0x2e>
   113b0:	20002620 	.word	0x20002620
   113b4:	0002577c 	.word	0x0002577c
   113b8:	0002579a 	.word	0x0002579a
   113bc:	00024ce0 	.word	0x00024ce0
   113c0:	20000758 	.word	0x20000758
   113c4:	2000260c 	.word	0x2000260c
   113c8:	000110c9 	.word	0x000110c9
   113cc:	000257a9 	.word	0x000257a9

000113d0 <device_found>:
{
   113d0:	b570      	push	{r4, r5, r6, lr}
    if (default_conn)
   113d2:	4e1a      	ldr	r6, [pc, #104]	; (1143c <device_found+0x6c>)
   113d4:	6833      	ldr	r3, [r6, #0]
{
   113d6:	b08e      	sub	sp, #56	; 0x38
   113d8:	4605      	mov	r5, r0
   113da:	460c      	mov	r4, r1
    if (default_conn)
   113dc:	bb5b      	cbnz	r3, 11436 <device_found+0x66>
    if (type != BT_GAP_ADV_TYPE_ADV_IND &&
   113de:	2a01      	cmp	r2, #1
   113e0:	d829      	bhi.n	11436 <device_found+0x66>
    bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   113e2:	a906      	add	r1, sp, #24
   113e4:	f7ff ff40 	bl	11268 <bt_addr_le_to_str.constprop.0.isra.0>
    printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
   113e8:	4622      	mov	r2, r4
   113ea:	4815      	ldr	r0, [pc, #84]	; (11440 <device_found+0x70>)
   113ec:	a906      	add	r1, sp, #24
   113ee:	f00d ffc8 	bl	1f382 <printk>
    if (rssi < -70)
   113f2:	3446      	adds	r4, #70	; 0x46
   113f4:	db1f      	blt.n	11436 <device_found+0x66>
    if (bt_le_scan_stop())
   113f6:	f002 ffed 	bl	143d4 <bt_le_scan_stop>
   113fa:	b9e0      	cbnz	r0, 11436 <device_found+0x66>
    err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
   113fc:	4b11      	ldr	r3, [pc, #68]	; (11444 <device_found+0x74>)
   113fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11400:	ac02      	add	r4, sp, #8
   11402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                            BT_LE_CONN_PARAM_LONG_TIMEOUT, &default_conn);
   11406:	4a10      	ldr	r2, [pc, #64]	; (11448 <device_found+0x78>)
   11408:	f04f 737a 	mov.w	r3, #65536000	; 0x3e80000
   1140c:	e9cd 2300 	strd	r2, r3, [sp]
    err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
   11410:	4621      	mov	r1, r4
   11412:	466a      	mov	r2, sp
   11414:	4633      	mov	r3, r6
   11416:	4628      	mov	r0, r5
   11418:	f003 fd40 	bl	14e9c <bt_conn_le_create>
    if (err)
   1141c:	4602      	mov	r2, r0
   1141e:	b150      	cbz	r0, 11436 <device_found+0x66>
        printk("Create conn to %s failed (%d)\n", addr_str, err);
   11420:	480a      	ldr	r0, [pc, #40]	; (1144c <device_found+0x7c>)
   11422:	a906      	add	r1, sp, #24
   11424:	f00d ffad 	bl	1f382 <printk>
	return z_impl_k_sleep(timeout);
   11428:	2100      	movs	r1, #0
   1142a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1142e:	f00a fd43 	bl	1beb8 <z_impl_k_sleep>
        start_scan();
   11432:	f7ff fef9 	bl	11228 <start_scan>
}
   11436:	b00e      	add	sp, #56	; 0x38
   11438:	bd70      	pop	{r4, r5, r6, pc}
   1143a:	bf00      	nop
   1143c:	20002620 	.word	0x20002620
   11440:	000257c2 	.word	0x000257c2
   11444:	00024d18 	.word	0x00024d18
   11448:	00280018 	.word	0x00280018
   1144c:	000257de 	.word	0x000257de

00011450 <bluetooth_init>:
    .connected = connected,
    .disconnected = disconnected,
};

void bluetooth_init(void)
{
   11450:	b508      	push	{r3, lr}
    int err;

    err = bt_enable(NULL);
   11452:	2000      	movs	r0, #0
   11454:	f002 fa12 	bl	1387c <bt_enable>
    if (err)
   11458:	4601      	mov	r1, r0
   1145a:	b120      	cbz	r0, 11466 <bluetooth_init+0x16>

    printk("Bluetooth initialized\n");

    start_scan();
    return 0;
   1145c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Bluetooth init failed (err %d)\n", err);
   11460:	4804      	ldr	r0, [pc, #16]	; (11474 <bluetooth_init+0x24>)
   11462:	f00d bf8e 	b.w	1f382 <printk>
    printk("Bluetooth initialized\n");
   11466:	4804      	ldr	r0, [pc, #16]	; (11478 <bluetooth_init+0x28>)
   11468:	f00d ff8b 	bl	1f382 <printk>
   1146c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    start_scan();
   11470:	f7ff beda 	b.w	11228 <start_scan>
   11474:	000257fd 	.word	0x000257fd
   11478:	0002581d 	.word	0x0002581d

0001147c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   1147c:	4b01      	ldr	r3, [pc, #4]	; (11484 <char_out+0x8>)
   1147e:	681b      	ldr	r3, [r3, #0]
   11480:	4718      	bx	r3
   11482:	bf00      	nop
   11484:	200004e8 	.word	0x200004e8

00011488 <__printk_hook_install>:
	_char_out = fn;
   11488:	4b01      	ldr	r3, [pc, #4]	; (11490 <__printk_hook_install+0x8>)
   1148a:	6018      	str	r0, [r3, #0]
}
   1148c:	4770      	bx	lr
   1148e:	bf00      	nop
   11490:	200004e8 	.word	0x200004e8

00011494 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   11494:	b507      	push	{r0, r1, r2, lr}
   11496:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   11498:	2100      	movs	r1, #0
   1149a:	4602      	mov	r2, r0
   1149c:	9100      	str	r1, [sp, #0]
   1149e:	4803      	ldr	r0, [pc, #12]	; (114ac <vprintk+0x18>)
   114a0:	f000 f92a 	bl	116f8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   114a4:	b003      	add	sp, #12
   114a6:	f85d fb04 	ldr.w	pc, [sp], #4
   114aa:	bf00      	nop
   114ac:	0001147d 	.word	0x0001147d

000114b0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   114b0:	b530      	push	{r4, r5, lr}
   114b2:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   114b4:	2500      	movs	r5, #0
   114b6:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   114ba:	4604      	mov	r4, r0
   114bc:	9500      	str	r5, [sp, #0]
   114be:	a903      	add	r1, sp, #12
   114c0:	4805      	ldr	r0, [pc, #20]	; (114d8 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   114c2:	9505      	str	r5, [sp, #20]
   114c4:	f000 f918 	bl	116f8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   114c8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   114cc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   114ce:	bfb8      	it	lt
   114d0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   114d2:	b007      	add	sp, #28
   114d4:	bd30      	pop	{r4, r5, pc}
   114d6:	bf00      	nop
   114d8:	0001f35d 	.word	0x0001f35d

000114dc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   114dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   114e0:	8b05      	ldrh	r5, [r0, #24]
{
   114e2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   114e4:	0728      	lsls	r0, r5, #28
{
   114e6:	4690      	mov	r8, r2
	if (processing) {
   114e8:	d411      	bmi.n	1150e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   114ea:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   114ec:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   114f0:	f040 80cd 	bne.w	1168e <process_event+0x1b2>
			evt = process_recheck(mgr);
   114f4:	4620      	mov	r0, r4
   114f6:	f00e f92d 	bl	1f754 <process_recheck>
		}

		if (evt == EVT_NOP) {
   114fa:	b178      	cbz	r0, 1151c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   114fc:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   114fe:	8b21      	ldrh	r1, [r4, #24]
   11500:	2804      	cmp	r0, #4
   11502:	d811      	bhi.n	11528 <process_event+0x4c>
   11504:	e8df f000 	tbb	[pc, r0]
   11508:	856d10c3 	.word	0x856d10c3
   1150c:	95          	.byte	0x95
   1150d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   1150e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11510:	bf0c      	ite	eq
   11512:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11516:	f045 0520 	orrne.w	r5, r5, #32
   1151a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1151c:	f388 8811 	msr	BASEPRI, r8
   11520:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11528:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1152c:	45aa      	cmp	sl, r5
   1152e:	f000 80a6 	beq.w	1167e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   11532:	2700      	movs	r7, #0
   11534:	46b9      	mov	r9, r7
   11536:	463e      	mov	r6, r7
   11538:	68a3      	ldr	r3, [r4, #8]
   1153a:	2b00      	cmp	r3, #0
   1153c:	f000 80bd 	beq.w	116ba <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11540:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11544:	8321      	strh	r1, [r4, #24]
   11546:	f388 8811 	msr	BASEPRI, r8
   1154a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1154e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11550:	2900      	cmp	r1, #0
   11552:	f000 80bb 	beq.w	116cc <process_event+0x1f0>
	return node->next;
   11556:	680d      	ldr	r5, [r1, #0]
   11558:	2900      	cmp	r1, #0
   1155a:	f000 80b7 	beq.w	116cc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   1155e:	f8d1 8004 	ldr.w	r8, [r1, #4]
   11562:	4633      	mov	r3, r6
   11564:	4652      	mov	r2, sl
   11566:	4620      	mov	r0, r4
   11568:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1156a:	2d00      	cmp	r5, #0
   1156c:	d076      	beq.n	1165c <process_event+0x180>
   1156e:	682b      	ldr	r3, [r5, #0]
   11570:	4629      	mov	r1, r5
   11572:	461d      	mov	r5, r3
   11574:	e7f0      	b.n	11558 <process_event+0x7c>
   11576:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1157a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1157c:	2a01      	cmp	r2, #1
   1157e:	d81b      	bhi.n	115b8 <process_event+0xdc>
	list->head = NULL;
   11580:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11582:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   11586:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   11588:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1158a:	b289      	uxth	r1, r1
	list->tail = NULL;
   1158c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11590:	d109      	bne.n	115a6 <process_event+0xca>
   11592:	463b      	mov	r3, r7
   11594:	e003      	b.n	1159e <process_event+0xc2>
				mgr->refs += 1U;
   11596:	8b62      	ldrh	r2, [r4, #26]
   11598:	3201      	adds	r2, #1
   1159a:	8362      	strh	r2, [r4, #26]
	return node->next;
   1159c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1159e:	2b00      	cmp	r3, #0
   115a0:	d1f9      	bne.n	11596 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115a2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   115a6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   115a8:	4620      	mov	r0, r4
   115aa:	f00e f8d3 	bl	1f754 <process_recheck>
   115ae:	2800      	cmp	r0, #0
   115b0:	d07b      	beq.n	116aa <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   115b2:	f041 0120 	orr.w	r1, r1, #32
   115b6:	e077      	b.n	116a8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   115b8:	2b04      	cmp	r3, #4
   115ba:	d10a      	bne.n	115d2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115bc:	f021 0107 	bic.w	r1, r1, #7
   115c0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   115c2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   115c4:	4620      	mov	r0, r4
   115c6:	f00e f8c5 	bl	1f754 <process_recheck>
   115ca:	b110      	cbz	r0, 115d2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   115cc:	f041 0120 	orr.w	r1, r1, #32
   115d0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   115d2:	8b21      	ldrh	r1, [r4, #24]
   115d4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   115d8:	45aa      	cmp	sl, r5
   115da:	d050      	beq.n	1167e <process_event+0x1a2>
   115dc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   115de:	46b9      	mov	r9, r7
   115e0:	e7aa      	b.n	11538 <process_event+0x5c>
			transit = mgr->transitions->start;
   115e2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115e4:	f021 0107 	bic.w	r1, r1, #7
   115e8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   115ec:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   115ee:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   115f2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   115f4:	d12d      	bne.n	11652 <process_event+0x176>
		    || (transit != NULL)) {
   115f6:	f1b9 0f00 	cmp.w	r9, #0
   115fa:	d040      	beq.n	1167e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   115fc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11600:	8321      	strh	r1, [r4, #24]
   11602:	f388 8811 	msr	BASEPRI, r8
   11606:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   1160a:	493a      	ldr	r1, [pc, #232]	; (116f4 <process_event+0x218>)
   1160c:	4620      	mov	r0, r4
   1160e:	47c8      	blx	r9
   11610:	e029      	b.n	11666 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11612:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   11616:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11618:	f041 0104 	orr.w	r1, r1, #4
   1161c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1161e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   11620:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11624:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11626:	d0e6      	beq.n	115f6 <process_event+0x11a>
   11628:	2700      	movs	r7, #0
		res = 0;
   1162a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1162c:	f04f 0a04 	mov.w	sl, #4
   11630:	e782      	b.n	11538 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11632:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   11636:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11638:	f041 0105 	orr.w	r1, r1, #5
   1163c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1163e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   11640:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11644:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11646:	d0d6      	beq.n	115f6 <process_event+0x11a>
   11648:	2700      	movs	r7, #0
		res = 0;
   1164a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1164c:	f04f 0a05 	mov.w	sl, #5
   11650:	e772      	b.n	11538 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   11652:	2700      	movs	r7, #0
		res = 0;
   11654:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11656:	f04f 0a06 	mov.w	sl, #6
   1165a:	e76d      	b.n	11538 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1165c:	462b      	mov	r3, r5
   1165e:	e787      	b.n	11570 <process_event+0x94>
			if (transit != NULL) {
   11660:	f1b9 0f00 	cmp.w	r9, #0
   11664:	d1d1      	bne.n	1160a <process_event+0x12e>
	__asm__ volatile(
   11666:	f04f 0340 	mov.w	r3, #64	; 0x40
   1166a:	f3ef 8811 	mrs	r8, BASEPRI
   1166e:	f383 8812 	msr	BASEPRI_MAX, r3
   11672:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11676:	8b23      	ldrh	r3, [r4, #24]
   11678:	f023 0308 	bic.w	r3, r3, #8
   1167c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1167e:	8b25      	ldrh	r5, [r4, #24]
   11680:	06ea      	lsls	r2, r5, #27
   11682:	d52e      	bpl.n	116e2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11684:	f025 0310 	bic.w	r3, r5, #16
   11688:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1168a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   1168e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11690:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   11692:	2e00      	cmp	r6, #0
   11694:	f6bf af6f 	bge.w	11576 <process_event+0x9a>
	list->head = NULL;
   11698:	2300      	movs	r3, #0
		*clients = mgr->clients;
   1169a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   1169c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   116a0:	f021 0107 	bic.w	r1, r1, #7
   116a4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   116a8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   116aa:	8b21      	ldrh	r1, [r4, #24]
   116ac:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   116b0:	45aa      	cmp	sl, r5
   116b2:	f04f 0900 	mov.w	r9, #0
   116b6:	f47f af3f 	bne.w	11538 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   116ba:	2f00      	cmp	r7, #0
   116bc:	d09b      	beq.n	115f6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   116be:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   116c2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   116c4:	f388 8811 	msr	BASEPRI, r8
   116c8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   116cc:	2f00      	cmp	r7, #0
   116ce:	d0c7      	beq.n	11660 <process_event+0x184>
	return node->next;
   116d0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   116d2:	4639      	mov	r1, r7
   116d4:	4633      	mov	r3, r6
   116d6:	4652      	mov	r2, sl
   116d8:	4620      	mov	r0, r4
   116da:	f00e f867 	bl	1f7ac <notify_one>
	list->head = node;
   116de:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   116e0:	e7f4      	b.n	116cc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   116e2:	06ab      	lsls	r3, r5, #26
   116e4:	f57f af1a 	bpl.w	1151c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   116e8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   116ec:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   116ee:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   116f2:	e6ff      	b.n	114f4 <process_event+0x18>
   116f4:	0001f7d9 	.word	0x0001f7d9

000116f8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   116f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116fc:	4681      	mov	r9, r0
   116fe:	b095      	sub	sp, #84	; 0x54
   11700:	468b      	mov	fp, r1
   11702:	4617      	mov	r7, r2
   11704:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11706:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11708:	7838      	ldrb	r0, [r7, #0]
   1170a:	b908      	cbnz	r0, 11710 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1170c:	4628      	mov	r0, r5
   1170e:	e358      	b.n	11dc2 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   11710:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   11712:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   11714:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   11716:	d006      	beq.n	11726 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   11718:	4659      	mov	r1, fp
   1171a:	47c8      	blx	r9
   1171c:	2800      	cmp	r0, #0
   1171e:	f2c0 8350 	blt.w	11dc2 <z_cbvprintf_impl+0x6ca>
   11722:	3501      	adds	r5, #1
		if (bps == NULL) {
   11724:	e1fb      	b.n	11b1e <z_cbvprintf_impl+0x426>
		} state = {
   11726:	2218      	movs	r2, #24
   11728:	2100      	movs	r1, #0
   1172a:	a80e      	add	r0, sp, #56	; 0x38
   1172c:	f00e fbf0 	bl	1ff10 <memset>
	if (*sp == '%') {
   11730:	787b      	ldrb	r3, [r7, #1]
   11732:	2b25      	cmp	r3, #37	; 0x25
   11734:	d07d      	beq.n	11832 <z_cbvprintf_impl+0x13a>
   11736:	2300      	movs	r3, #0
   11738:	1c78      	adds	r0, r7, #1
   1173a:	4698      	mov	r8, r3
   1173c:	469e      	mov	lr, r3
   1173e:	469c      	mov	ip, r3
   11740:	461e      	mov	r6, r3
   11742:	4601      	mov	r1, r0
		switch (*sp) {
   11744:	f810 2b01 	ldrb.w	r2, [r0], #1
   11748:	2a2b      	cmp	r2, #43	; 0x2b
   1174a:	f000 80a1 	beq.w	11890 <z_cbvprintf_impl+0x198>
   1174e:	f200 8098 	bhi.w	11882 <z_cbvprintf_impl+0x18a>
   11752:	2a20      	cmp	r2, #32
   11754:	f000 809f 	beq.w	11896 <z_cbvprintf_impl+0x19e>
   11758:	2a23      	cmp	r2, #35	; 0x23
   1175a:	f000 809f 	beq.w	1189c <z_cbvprintf_impl+0x1a4>
   1175e:	b12b      	cbz	r3, 1176c <z_cbvprintf_impl+0x74>
   11760:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11768:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1176c:	f1b8 0f00 	cmp.w	r8, #0
   11770:	d005      	beq.n	1177e <z_cbvprintf_impl+0x86>
   11772:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11776:	f043 0320 	orr.w	r3, r3, #32
   1177a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1177e:	f1be 0f00 	cmp.w	lr, #0
   11782:	d005      	beq.n	11790 <z_cbvprintf_impl+0x98>
   11784:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11788:	f043 0310 	orr.w	r3, r3, #16
   1178c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11790:	f1bc 0f00 	cmp.w	ip, #0
   11794:	d005      	beq.n	117a2 <z_cbvprintf_impl+0xaa>
   11796:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1179a:	f043 0308 	orr.w	r3, r3, #8
   1179e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   117a2:	b12e      	cbz	r6, 117b0 <z_cbvprintf_impl+0xb8>
   117a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   117a8:	f043 0304 	orr.w	r3, r3, #4
   117ac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   117b0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   117b4:	f003 0044 	and.w	r0, r3, #68	; 0x44
   117b8:	2844      	cmp	r0, #68	; 0x44
   117ba:	d103      	bne.n	117c4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   117bc:	f36f 1386 	bfc	r3, #6, #1
   117c0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   117c4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   117c8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   117ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   117ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   117d2:	d17f      	bne.n	118d4 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   117d4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   117d8:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   117dc:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   117de:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   117e2:	781a      	ldrb	r2, [r3, #0]
   117e4:	2a2e      	cmp	r2, #46	; 0x2e
   117e6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   117ea:	bf0c      	ite	eq
   117ec:	2101      	moveq	r1, #1
   117ee:	2100      	movne	r1, #0
   117f0:	f361 0241 	bfi	r2, r1, #1, #1
   117f4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   117f8:	d178      	bne.n	118ec <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   117fa:	785a      	ldrb	r2, [r3, #1]
   117fc:	2a2a      	cmp	r2, #42	; 0x2a
   117fe:	d06e      	beq.n	118de <z_cbvprintf_impl+0x1e6>
	++sp;
   11800:	3301      	adds	r3, #1
	size_t val = 0;
   11802:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11804:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11808:	4619      	mov	r1, r3
   1180a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1180e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   11812:	2e09      	cmp	r6, #9
   11814:	f240 8095 	bls.w	11942 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   11818:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   1181c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1181e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   11822:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   11826:	460a      	mov	r2, r1
   11828:	f360 0241 	bfi	r2, r0, #1, #1
   1182c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   11830:	e05c      	b.n	118ec <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   11832:	1cba      	adds	r2, r7, #2
   11834:	9203      	str	r2, [sp, #12]
   11836:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   1183a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1183e:	07da      	lsls	r2, r3, #31
   11840:	f140 812e 	bpl.w	11aa0 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   11844:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   11848:	f1b8 0f00 	cmp.w	r8, #0
   1184c:	da07      	bge.n	1185e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   1184e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   11852:	f042 0204 	orr.w	r2, r2, #4
   11856:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   1185a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   1185e:	075e      	lsls	r6, r3, #29
   11860:	f140 8127 	bpl.w	11ab2 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   11864:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   11868:	f1ba 0f00 	cmp.w	sl, #0
   1186c:	f280 8126 	bge.w	11abc <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   11870:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   11874:	f36f 0341 	bfc	r3, #1, #1
   11878:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   1187c:	f04f 3aff 	mov.w	sl, #4294967295
   11880:	e11c      	b.n	11abc <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   11882:	2a2d      	cmp	r2, #45	; 0x2d
   11884:	d00d      	beq.n	118a2 <z_cbvprintf_impl+0x1aa>
   11886:	2a30      	cmp	r2, #48	; 0x30
   11888:	f47f af69 	bne.w	1175e <z_cbvprintf_impl+0x66>
   1188c:	2301      	movs	r3, #1
	} while (loop);
   1188e:	e758      	b.n	11742 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   11890:	f04f 0c01 	mov.w	ip, #1
   11894:	e755      	b.n	11742 <z_cbvprintf_impl+0x4a>
   11896:	f04f 0e01 	mov.w	lr, #1
   1189a:	e752      	b.n	11742 <z_cbvprintf_impl+0x4a>
   1189c:	f04f 0801 	mov.w	r8, #1
   118a0:	e74f      	b.n	11742 <z_cbvprintf_impl+0x4a>
   118a2:	2601      	movs	r6, #1
   118a4:	e74d      	b.n	11742 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   118a6:	fb0e 6202 	mla	r2, lr, r2, r6
   118aa:	3a30      	subs	r2, #48	; 0x30
   118ac:	4603      	mov	r3, r0
   118ae:	4618      	mov	r0, r3
   118b0:	f810 6b01 	ldrb.w	r6, [r0], #1
   118b4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   118b8:	f1bc 0f09 	cmp.w	ip, #9
   118bc:	d9f3      	bls.n	118a6 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   118be:	4299      	cmp	r1, r3
   118c0:	d08f      	beq.n	117e2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   118c2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   118c6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   118c8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   118ca:	f362 0141 	bfi	r1, r2, #1, #1
   118ce:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   118d2:	e786      	b.n	117e2 <z_cbvprintf_impl+0xea>
   118d4:	460b      	mov	r3, r1
	size_t val = 0;
   118d6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   118d8:	f04f 0e0a 	mov.w	lr, #10
   118dc:	e7e7      	b.n	118ae <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   118de:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   118e2:	f042 0204 	orr.w	r2, r2, #4
   118e6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   118ea:	3302      	adds	r3, #2
	switch (*sp) {
   118ec:	781a      	ldrb	r2, [r3, #0]
   118ee:	2a6c      	cmp	r2, #108	; 0x6c
   118f0:	d047      	beq.n	11982 <z_cbvprintf_impl+0x28a>
   118f2:	d82b      	bhi.n	1194c <z_cbvprintf_impl+0x254>
   118f4:	2a68      	cmp	r2, #104	; 0x68
   118f6:	d031      	beq.n	1195c <z_cbvprintf_impl+0x264>
   118f8:	2a6a      	cmp	r2, #106	; 0x6a
   118fa:	d04b      	beq.n	11994 <z_cbvprintf_impl+0x29c>
   118fc:	2a4c      	cmp	r2, #76	; 0x4c
   118fe:	d051      	beq.n	119a4 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   11900:	461a      	mov	r2, r3
   11902:	f812 3b01 	ldrb.w	r3, [r2], #1
   11906:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   11908:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   1190a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   1190e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   11912:	f200 80be 	bhi.w	11a92 <z_cbvprintf_impl+0x39a>
   11916:	2b6d      	cmp	r3, #109	; 0x6d
   11918:	d851      	bhi.n	119be <z_cbvprintf_impl+0x2c6>
   1191a:	2b69      	cmp	r3, #105	; 0x69
   1191c:	f200 80b9 	bhi.w	11a92 <z_cbvprintf_impl+0x39a>
   11920:	2b57      	cmp	r3, #87	; 0x57
   11922:	d867      	bhi.n	119f4 <z_cbvprintf_impl+0x2fc>
   11924:	2b41      	cmp	r3, #65	; 0x41
   11926:	d003      	beq.n	11930 <z_cbvprintf_impl+0x238>
   11928:	3b45      	subs	r3, #69	; 0x45
   1192a:	2b02      	cmp	r3, #2
   1192c:	f200 80b1 	bhi.w	11a92 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   11930:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11934:	2204      	movs	r2, #4
   11936:	f362 0302 	bfi	r3, r2, #0, #3
   1193a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   1193e:	2301      	movs	r3, #1
			break;
   11940:	e073      	b.n	11a2a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   11942:	fb0c 0202 	mla	r2, ip, r2, r0
   11946:	3a30      	subs	r2, #48	; 0x30
   11948:	460b      	mov	r3, r1
   1194a:	e75d      	b.n	11808 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   1194c:	2a74      	cmp	r2, #116	; 0x74
   1194e:	d025      	beq.n	1199c <z_cbvprintf_impl+0x2a4>
   11950:	2a7a      	cmp	r2, #122	; 0x7a
   11952:	d1d5      	bne.n	11900 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   11954:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11958:	2106      	movs	r1, #6
   1195a:	e00c      	b.n	11976 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   1195c:	785a      	ldrb	r2, [r3, #1]
   1195e:	2a68      	cmp	r2, #104	; 0x68
   11960:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11964:	d106      	bne.n	11974 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   11966:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11968:	f361 02c6 	bfi	r2, r1, #3, #4
   1196c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   11970:	3302      	adds	r3, #2
   11972:	e7c5      	b.n	11900 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   11974:	2102      	movs	r1, #2
   11976:	f361 02c6 	bfi	r2, r1, #3, #4
   1197a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   1197e:	3301      	adds	r3, #1
   11980:	e7be      	b.n	11900 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   11982:	785a      	ldrb	r2, [r3, #1]
   11984:	2a6c      	cmp	r2, #108	; 0x6c
   11986:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1198a:	d101      	bne.n	11990 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   1198c:	2104      	movs	r1, #4
   1198e:	e7eb      	b.n	11968 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   11990:	2103      	movs	r1, #3
   11992:	e7f0      	b.n	11976 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   11994:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11998:	2105      	movs	r1, #5
   1199a:	e7ec      	b.n	11976 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   1199c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   119a0:	2107      	movs	r1, #7
   119a2:	e7e8      	b.n	11976 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   119a4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   119a8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   119ac:	f022 0202 	bic.w	r2, r2, #2
   119b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   119b4:	f042 0202 	orr.w	r2, r2, #2
   119b8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   119bc:	e7df      	b.n	1197e <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   119be:	3b6e      	subs	r3, #110	; 0x6e
   119c0:	b2d9      	uxtb	r1, r3
   119c2:	2301      	movs	r3, #1
   119c4:	408b      	lsls	r3, r1
   119c6:	f240 4182 	movw	r1, #1154	; 0x482
   119ca:	420b      	tst	r3, r1
   119cc:	d137      	bne.n	11a3e <z_cbvprintf_impl+0x346>
   119ce:	f013 0f24 	tst.w	r3, #36	; 0x24
   119d2:	d151      	bne.n	11a78 <z_cbvprintf_impl+0x380>
   119d4:	07d8      	lsls	r0, r3, #31
   119d6:	d55c      	bpl.n	11a92 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   119d8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   119dc:	2103      	movs	r1, #3
   119de:	f361 0302 	bfi	r3, r1, #0, #3
   119e2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   119e6:	f002 0378 	and.w	r3, r2, #120	; 0x78
   119ea:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   119ee:	424b      	negs	r3, r1
   119f0:	414b      	adcs	r3, r1
   119f2:	e01a      	b.n	11a2a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   119f4:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   119f8:	b2c9      	uxtb	r1, r1
   119fa:	2001      	movs	r0, #1
   119fc:	fa00 f101 	lsl.w	r1, r0, r1
   11a00:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   11a04:	d194      	bne.n	11930 <z_cbvprintf_impl+0x238>
   11a06:	f640 0601 	movw	r6, #2049	; 0x801
   11a0a:	4231      	tst	r1, r6
   11a0c:	d11d      	bne.n	11a4a <z_cbvprintf_impl+0x352>
   11a0e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   11a12:	d03e      	beq.n	11a92 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   11a14:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11a18:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a1c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   11a20:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   11a22:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a26:	d034      	beq.n	11a92 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   11a28:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   11a2a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   11a2e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11a32:	430b      	orrs	r3, r1
   11a34:	f363 0241 	bfi	r2, r3, #1, #1
   11a38:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   11a3c:	e6fd      	b.n	1183a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   11a3e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11a42:	2102      	movs	r1, #2
   11a44:	f361 0302 	bfi	r3, r1, #0, #3
   11a48:	e7e8      	b.n	11a1c <z_cbvprintf_impl+0x324>
   11a4a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   11a4e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a50:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11a54:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a58:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11a5a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   11a5e:	bf02      	ittt	eq
   11a60:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   11a64:	f041 0101 	orreq.w	r1, r1, #1
   11a68:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   11a6c:	2b63      	cmp	r3, #99	; 0x63
   11a6e:	d1db      	bne.n	11a28 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11a70:	1e13      	subs	r3, r2, #0
   11a72:	bf18      	it	ne
   11a74:	2301      	movne	r3, #1
   11a76:	e7d8      	b.n	11a2a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   11a78:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11a7c:	2103      	movs	r1, #3
   11a7e:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   11a82:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11a86:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   11a8a:	bf14      	ite	ne
   11a8c:	2301      	movne	r3, #1
   11a8e:	2300      	moveq	r3, #0
   11a90:	e7cb      	b.n	11a2a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   11a92:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11a96:	f043 0301 	orr.w	r3, r3, #1
   11a9a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   11a9e:	e7c3      	b.n	11a28 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   11aa0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   11aa4:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11aa6:	bfb4      	ite	lt
   11aa8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   11aac:	f04f 38ff 	movge.w	r8, #4294967295
   11ab0:	e6d5      	b.n	1185e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   11ab2:	0798      	lsls	r0, r3, #30
   11ab4:	f57f aee2 	bpl.w	1187c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   11ab8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   11abc:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   11ac0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11ac2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   11ac6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   11aca:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11ace:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11ad0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11ad4:	d133      	bne.n	11b3e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   11ad6:	1ecb      	subs	r3, r1, #3
   11ad8:	2b04      	cmp	r3, #4
   11ada:	d804      	bhi.n	11ae6 <z_cbvprintf_impl+0x3ee>
   11adc:	e8df f003 	tbb	[pc, r3]
   11ae0:	21464621 	.word	0x21464621
   11ae4:	21          	.byte	0x21
   11ae5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11ae6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   11ae8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   11aea:	ea4f 72e3 	mov.w	r2, r3, asr #31
   11aee:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11af2:	d11c      	bne.n	11b2e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   11af4:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   11af8:	17da      	asrs	r2, r3, #31
   11afa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   11afe:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   11b00:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11b04:	f013 0603 	ands.w	r6, r3, #3
   11b08:	d050      	beq.n	11bac <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   11b0a:	9b03      	ldr	r3, [sp, #12]
   11b0c:	463a      	mov	r2, r7
   11b0e:	4659      	mov	r1, fp
   11b10:	4648      	mov	r0, r9
   11b12:	f00d ff4d 	bl	1f9b0 <outs>
   11b16:	2800      	cmp	r0, #0
   11b18:	f2c0 8153 	blt.w	11dc2 <z_cbvprintf_impl+0x6ca>
   11b1c:	4405      	add	r5, r0
			continue;
   11b1e:	9f03      	ldr	r7, [sp, #12]
   11b20:	e5f2      	b.n	11708 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11b22:	f854 3b04 	ldr.w	r3, [r4], #4
   11b26:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   11b28:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   11b2c:	e7e8      	b.n	11b00 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   11b2e:	2902      	cmp	r1, #2
   11b30:	d1e5      	bne.n	11afe <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   11b32:	b21a      	sxth	r2, r3
   11b34:	f343 33c0 	sbfx	r3, r3, #15, #1
   11b38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11b3c:	e7df      	b.n	11afe <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11b3e:	2b02      	cmp	r3, #2
   11b40:	d124      	bne.n	11b8c <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   11b42:	1ecb      	subs	r3, r1, #3
   11b44:	2b04      	cmp	r3, #4
   11b46:	d804      	bhi.n	11b52 <z_cbvprintf_impl+0x45a>
   11b48:	e8df f003 	tbb	[pc, r3]
   11b4c:	18101018 	.word	0x18101018
   11b50:	18          	.byte	0x18
   11b51:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   11b52:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   11b54:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11b58:	f04f 0200 	mov.w	r2, #0
   11b5c:	d014      	beq.n	11b88 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   11b5e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   11b60:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   11b64:	d1cc      	bne.n	11b00 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   11b66:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11b68:	930e      	str	r3, [sp, #56]	; 0x38
   11b6a:	e7c9      	b.n	11b00 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   11b6c:	3407      	adds	r4, #7
   11b6e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   11b72:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   11b76:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11b7a:	e7c1      	b.n	11b00 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   11b7c:	f854 3b04 	ldr.w	r3, [r4], #4
   11b80:	930e      	str	r3, [sp, #56]	; 0x38
   11b82:	2300      	movs	r3, #0
   11b84:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   11b86:	e7bb      	b.n	11b00 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   11b88:	b2db      	uxtb	r3, r3
   11b8a:	e7cd      	b.n	11b28 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   11b8c:	2b04      	cmp	r3, #4
   11b8e:	d108      	bne.n	11ba2 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   11b90:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   11b92:	f024 0407 	bic.w	r4, r4, #7
   11b96:	e9d4 2300 	ldrd	r2, r3, [r4]
   11b9a:	3408      	adds	r4, #8
   11b9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11ba0:	e7ae      	b.n	11b00 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11ba2:	2b03      	cmp	r3, #3
   11ba4:	d1ac      	bne.n	11b00 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   11ba6:	f854 3b04 	ldr.w	r3, [r4], #4
   11baa:	e7dd      	b.n	11b68 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   11bac:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11bb0:	2878      	cmp	r0, #120	; 0x78
   11bb2:	d8b4      	bhi.n	11b1e <z_cbvprintf_impl+0x426>
   11bb4:	2862      	cmp	r0, #98	; 0x62
   11bb6:	d81c      	bhi.n	11bf2 <z_cbvprintf_impl+0x4fa>
   11bb8:	2825      	cmp	r0, #37	; 0x25
   11bba:	f43f adad 	beq.w	11718 <z_cbvprintf_impl+0x20>
   11bbe:	2858      	cmp	r0, #88	; 0x58
   11bc0:	d1ad      	bne.n	11b1e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11bc2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11bc6:	9300      	str	r3, [sp, #0]
   11bc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   11bcc:	ab08      	add	r3, sp, #32
   11bce:	aa10      	add	r2, sp, #64	; 0x40
   11bd0:	f00d fea8 	bl	1f924 <encode_uint>
			if (precision >= 0) {
   11bd4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   11bd8:	4607      	mov	r7, r0
			if (precision >= 0) {
   11bda:	f280 809a 	bge.w	11d12 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   11bde:	2f00      	cmp	r7, #0
   11be0:	d09d      	beq.n	11b1e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11be2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11be6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   11be8:	2e00      	cmp	r6, #0
   11bea:	f000 80c1 	beq.w	11d70 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   11bee:	3001      	adds	r0, #1
   11bf0:	e0be      	b.n	11d70 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   11bf2:	3863      	subs	r0, #99	; 0x63
   11bf4:	2815      	cmp	r0, #21
   11bf6:	d892      	bhi.n	11b1e <z_cbvprintf_impl+0x426>
   11bf8:	a201      	add	r2, pc, #4	; (adr r2, 11c00 <z_cbvprintf_impl+0x508>)
   11bfa:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   11bfe:	bf00      	nop
   11c00:	00011cd5 	.word	0x00011cd5
   11c04:	00011ce7 	.word	0x00011ce7
   11c08:	00011b1f 	.word	0x00011b1f
   11c0c:	00011b1f 	.word	0x00011b1f
   11c10:	00011b1f 	.word	0x00011b1f
   11c14:	00011b1f 	.word	0x00011b1f
   11c18:	00011ce7 	.word	0x00011ce7
   11c1c:	00011b1f 	.word	0x00011b1f
   11c20:	00011b1f 	.word	0x00011b1f
   11c24:	00011b1f 	.word	0x00011b1f
   11c28:	00011b1f 	.word	0x00011b1f
   11c2c:	00011d75 	.word	0x00011d75
   11c30:	00011d0d 	.word	0x00011d0d
   11c34:	00011d33 	.word	0x00011d33
   11c38:	00011b1f 	.word	0x00011b1f
   11c3c:	00011b1f 	.word	0x00011b1f
   11c40:	00011c59 	.word	0x00011c59
   11c44:	00011b1f 	.word	0x00011b1f
   11c48:	00011d0d 	.word	0x00011d0d
   11c4c:	00011b1f 	.word	0x00011b1f
   11c50:	00011b1f 	.word	0x00011b1f
   11c54:	00011d0d 	.word	0x00011d0d
			if (precision >= 0) {
   11c58:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   11c5c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   11c5e:	db35      	blt.n	11ccc <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   11c60:	4651      	mov	r1, sl
   11c62:	4638      	mov	r0, r7
   11c64:	f00e f919 	bl	1fe9a <strnlen>
			bpe = bps + len;
   11c68:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   11c6c:	2f00      	cmp	r7, #0
   11c6e:	f43f af56 	beq.w	11b1e <z_cbvprintf_impl+0x426>
		char sign = 0;
   11c72:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   11c74:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11c78:	f013 0210 	ands.w	r2, r3, #16
   11c7c:	9205      	str	r2, [sp, #20]
   11c7e:	f000 8093 	beq.w	11da8 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   11c82:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   11c84:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   11c86:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   11c88:	bf48      	it	mi
   11c8a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   11c8c:	9204      	str	r2, [sp, #16]
   11c8e:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   11c90:	bf48      	it	mi
   11c92:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   11c94:	f1b8 0f00 	cmp.w	r8, #0
   11c98:	f340 80a0 	ble.w	11ddc <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   11c9c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   11ca0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   11ca4:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11ca8:	0750      	lsls	r0, r2, #29
   11caa:	9306      	str	r3, [sp, #24]
   11cac:	f100 8096 	bmi.w	11ddc <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   11cb0:	0651      	lsls	r1, r2, #25
   11cb2:	f140 8089 	bpl.w	11dc8 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   11cb6:	b13e      	cbz	r6, 11cc8 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   11cb8:	4659      	mov	r1, fp
   11cba:	4630      	mov	r0, r6
   11cbc:	47c8      	blx	r9
   11cbe:	2800      	cmp	r0, #0
   11cc0:	db7f      	blt.n	11dc2 <z_cbvprintf_impl+0x6ca>
   11cc2:	9b06      	ldr	r3, [sp, #24]
   11cc4:	3501      	adds	r5, #1
   11cc6:	461e      	mov	r6, r3
					pad = '0';
   11cc8:	2230      	movs	r2, #48	; 0x30
   11cca:	e07e      	b.n	11dca <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   11ccc:	4638      	mov	r0, r7
   11cce:	f00e f8dd 	bl	1fe8c <strlen>
   11cd2:	e7c9      	b.n	11c68 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11cd6:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   11cda:	2600      	movs	r6, #0
			bps = buf;
   11cdc:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   11cde:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   11ce2:	2001      	movs	r0, #1
   11ce4:	e7c6      	b.n	11c74 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   11ce6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   11ce8:	bf5c      	itt	pl
   11cea:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   11cee:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   11cf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   11cf4:	bf48      	it	mi
   11cf6:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   11cf8:	2b00      	cmp	r3, #0
   11cfa:	f6bf af62 	bge.w	11bc2 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   11cfe:	4252      	negs	r2, r2
   11d00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11d04:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   11d08:	262d      	movs	r6, #45	; 0x2d
   11d0a:	e75a      	b.n	11bc2 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   11d0c:	2600      	movs	r6, #0
   11d0e:	e758      	b.n	11bc2 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   11d10:	2600      	movs	r6, #0
				conv->flag_zero = false;
   11d12:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   11d16:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11d1a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   11d1c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11d20:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   11d22:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   11d26:	f67f af5a 	bls.w	11bde <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   11d2a:	ebaa 0303 	sub.w	r3, sl, r3
   11d2e:	9311      	str	r3, [sp, #68]	; 0x44
   11d30:	e755      	b.n	11bde <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   11d32:	980e      	ldr	r0, [sp, #56]	; 0x38
   11d34:	b390      	cbz	r0, 11d9c <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11d36:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11d3a:	9300      	str	r3, [sp, #0]
   11d3c:	aa10      	add	r2, sp, #64	; 0x40
   11d3e:	ab08      	add	r3, sp, #32
   11d40:	2100      	movs	r1, #0
   11d42:	f00d fdef 	bl	1f924 <encode_uint>
				conv->altform_0c = true;
   11d46:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   11d4a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11d4e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11d52:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   11d56:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11d5a:	4607      	mov	r7, r0
				conv->altform_0c = true;
   11d5c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   11d60:	dad6      	bge.n	11d10 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   11d62:	2800      	cmp	r0, #0
   11d64:	f43f aedb 	beq.w	11b1e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11d68:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11d6c:	1a18      	subs	r0, r3, r0
		char sign = 0;
   11d6e:	2600      	movs	r6, #0
   11d70:	469a      	mov	sl, r3
   11d72:	e77f      	b.n	11c74 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   11d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   11d76:	2907      	cmp	r1, #7
   11d78:	f63f aed1 	bhi.w	11b1e <z_cbvprintf_impl+0x426>
   11d7c:	e8df f001 	tbb	[pc, r1]
   11d80:	0c06040c 	.word	0x0c06040c
   11d84:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   11d88:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   11d8a:	e6c8      	b.n	11b1e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   11d8c:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   11d8e:	e6c6      	b.n	11b1e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   11d90:	17ea      	asrs	r2, r5, #31
   11d92:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   11d96:	e6c2      	b.n	11b1e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11d98:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   11d9a:	e6c0      	b.n	11b1e <z_cbvprintf_impl+0x426>
   11d9c:	4f2e      	ldr	r7, [pc, #184]	; (11e58 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   11d9e:	4606      	mov	r6, r0
			bpe = bps + 5;
   11da0:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   11da4:	2005      	movs	r0, #5
   11da6:	e765      	b.n	11c74 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   11da8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11daa:	bf48      	it	mi
   11dac:	3001      	addmi	r0, #1
   11dae:	e769      	b.n	11c84 <z_cbvprintf_impl+0x58c>
   11db0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   11db2:	4610      	mov	r0, r2
   11db4:	9206      	str	r2, [sp, #24]
   11db6:	4659      	mov	r1, fp
   11db8:	47c8      	blx	r9
   11dba:	2800      	cmp	r0, #0
   11dbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11dc0:	da04      	bge.n	11dcc <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   11dc2:	b015      	add	sp, #84	; 0x54
   11dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11dc8:	2220      	movs	r2, #32
					pad = '0';
   11dca:	4643      	mov	r3, r8
				while (width-- > 0) {
   11dcc:	4619      	mov	r1, r3
   11dce:	2900      	cmp	r1, #0
   11dd0:	f103 33ff 	add.w	r3, r3, #4294967295
   11dd4:	dcec      	bgt.n	11db0 <z_cbvprintf_impl+0x6b8>
   11dd6:	4445      	add	r5, r8
   11dd8:	1a6d      	subs	r5, r5, r1
   11dda:	4698      	mov	r8, r3
		if (sign != 0) {
   11ddc:	b12e      	cbz	r6, 11dea <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   11dde:	4659      	mov	r1, fp
   11de0:	4630      	mov	r0, r6
   11de2:	47c8      	blx	r9
   11de4:	2800      	cmp	r0, #0
   11de6:	dbec      	blt.n	11dc2 <z_cbvprintf_impl+0x6ca>
   11de8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11dea:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11dee:	06da      	lsls	r2, r3, #27
   11df0:	d401      	bmi.n	11df6 <z_cbvprintf_impl+0x6fe>
   11df2:	071b      	lsls	r3, r3, #28
   11df4:	d505      	bpl.n	11e02 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   11df6:	4659      	mov	r1, fp
   11df8:	2030      	movs	r0, #48	; 0x30
   11dfa:	47c8      	blx	r9
   11dfc:	2800      	cmp	r0, #0
   11dfe:	dbe0      	blt.n	11dc2 <z_cbvprintf_impl+0x6ca>
   11e00:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11e02:	9b05      	ldr	r3, [sp, #20]
   11e04:	b133      	cbz	r3, 11e14 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   11e06:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11e0a:	4659      	mov	r1, fp
   11e0c:	47c8      	blx	r9
   11e0e:	2800      	cmp	r0, #0
   11e10:	dbd7      	blt.n	11dc2 <z_cbvprintf_impl+0x6ca>
   11e12:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11e14:	9e04      	ldr	r6, [sp, #16]
   11e16:	442e      	add	r6, r5
   11e18:	e005      	b.n	11e26 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   11e1a:	4659      	mov	r1, fp
   11e1c:	2030      	movs	r0, #48	; 0x30
   11e1e:	47c8      	blx	r9
   11e20:	2800      	cmp	r0, #0
   11e22:	dbce      	blt.n	11dc2 <z_cbvprintf_impl+0x6ca>
   11e24:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11e26:	1b73      	subs	r3, r6, r5
   11e28:	2b00      	cmp	r3, #0
   11e2a:	dcf6      	bgt.n	11e1a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   11e2c:	4653      	mov	r3, sl
   11e2e:	463a      	mov	r2, r7
   11e30:	4659      	mov	r1, fp
   11e32:	4648      	mov	r0, r9
   11e34:	f00d fdbc 	bl	1f9b0 <outs>
   11e38:	2800      	cmp	r0, #0
   11e3a:	dbc2      	blt.n	11dc2 <z_cbvprintf_impl+0x6ca>
   11e3c:	4405      	add	r5, r0
		while (width > 0) {
   11e3e:	44a8      	add	r8, r5
   11e40:	eba8 0305 	sub.w	r3, r8, r5
   11e44:	2b00      	cmp	r3, #0
   11e46:	f77f ae6a 	ble.w	11b1e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   11e4a:	4659      	mov	r1, fp
   11e4c:	2020      	movs	r0, #32
   11e4e:	47c8      	blx	r9
   11e50:	2800      	cmp	r0, #0
   11e52:	dbb6      	blt.n	11dc2 <z_cbvprintf_impl+0x6ca>
   11e54:	3501      	adds	r5, #1
			--width;
   11e56:	e7f3      	b.n	11e40 <z_cbvprintf_impl+0x748>
   11e58:	00025845 	.word	0x00025845

00011e5c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   11e5c:	b508      	push	{r3, lr}
   11e5e:	4604      	mov	r4, r0
	__asm__ volatile(
   11e60:	f04f 0240 	mov.w	r2, #64	; 0x40
   11e64:	f3ef 8311 	mrs	r3, BASEPRI
   11e68:	f382 8812 	msr	BASEPRI_MAX, r2
   11e6c:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   11e70:	f007 fc60 	bl	19734 <sys_clock_disable>
	}

	sys_arch_reboot(type);
   11e74:	4620      	mov	r0, r4
   11e76:	f000 feb5 	bl	12be4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11e7a:	4803      	ldr	r0, [pc, #12]	; (11e88 <sys_reboot+0x2c>)
   11e7c:	f00d fa81 	bl	1f382 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11e80:	f000 fa8e 	bl	123a0 <arch_cpu_idle>
   11e84:	e7fc      	b.n	11e80 <sys_reboot+0x24>
   11e86:	bf00      	nop
   11e88:	0002584b 	.word	0x0002584b

00011e8c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   11e8c:	f008 bba6 	b.w	1a5dc <SystemInit>

00011e90 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   11e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11e94:	4605      	mov	r5, r0
   11e96:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e9a:	f3ef 8611 	mrs	r6, BASEPRI
   11e9e:	f383 8812 	msr	BASEPRI_MAX, r3
   11ea2:	f3bf 8f6f 	isb	sy
	return list->head;
   11ea6:	4b0e      	ldr	r3, [pc, #56]	; (11ee0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   11ea8:	4f0e      	ldr	r7, [pc, #56]	; (11ee4 <pm_state_notify+0x54>)
   11eaa:	681c      	ldr	r4, [r3, #0]
   11eac:	f8df 8038 	ldr.w	r8, [pc, #56]	; 11ee8 <pm_state_notify+0x58>
   11eb0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11eb4:	b92c      	cbnz	r4, 11ec2 <pm_state_notify+0x32>
	__asm__ volatile(
   11eb6:	f386 8811 	msr	BASEPRI, r6
   11eba:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   11ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   11ec2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   11ec6:	2d00      	cmp	r5, #0
   11ec8:	bf18      	it	ne
   11eca:	4613      	movne	r3, r2
		if (callback) {
   11ecc:	b12b      	cbz	r3, 11eda <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   11ece:	f898 2010 	ldrb.w	r2, [r8, #16]
   11ed2:	fb09 f202 	mul.w	r2, r9, r2
   11ed6:	5cb8      	ldrb	r0, [r7, r2]
   11ed8:	4798      	blx	r3
	return node->next;
   11eda:	6824      	ldr	r4, [r4, #0]
   11edc:	e7ea      	b.n	11eb4 <pm_state_notify+0x24>
   11ede:	bf00      	nop
   11ee0:	2000263c 	.word	0x2000263c
   11ee4:	20002630 	.word	0x20002630
   11ee8:	20002e50 	.word	0x20002e50

00011eec <pm_system_resume>:

void pm_system_resume(void)
{
   11eec:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   11eee:	4b19      	ldr	r3, [pc, #100]	; (11f54 <pm_system_resume+0x68>)
   11ef0:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11ef2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11ef6:	f004 031f 	and.w	r3, r4, #31
   11efa:	2201      	movs	r2, #1
   11efc:	409a      	lsls	r2, r3
   11efe:	4b16      	ldr	r3, [pc, #88]	; (11f58 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11f00:	0961      	lsrs	r1, r4, #5
   11f02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11f06:	43d0      	mvns	r0, r2
   11f08:	e853 1f00 	ldrex	r1, [r3]
   11f0c:	ea01 0500 	and.w	r5, r1, r0
   11f10:	e843 5600 	strex	r6, r5, [r3]
   11f14:	2e00      	cmp	r6, #0
   11f16:	d1f7      	bne.n	11f08 <pm_system_resume+0x1c>
   11f18:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   11f1c:	420a      	tst	r2, r1
   11f1e:	d013      	beq.n	11f48 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   11f20:	4b0e      	ldr	r3, [pc, #56]	; (11f5c <pm_system_resume+0x70>)
   11f22:	4d0f      	ldr	r5, [pc, #60]	; (11f60 <pm_system_resume+0x74>)
   11f24:	b18b      	cbz	r3, 11f4a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   11f26:	230c      	movs	r3, #12
   11f28:	4363      	muls	r3, r4
   11f2a:	18ea      	adds	r2, r5, r3
   11f2c:	5ce8      	ldrb	r0, [r5, r3]
   11f2e:	7851      	ldrb	r1, [r2, #1]
   11f30:	f00e f806 	bl	1ff40 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   11f34:	2000      	movs	r0, #0
   11f36:	f7ff ffab 	bl	11e90 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   11f3a:	230c      	movs	r3, #12
   11f3c:	435c      	muls	r4, r3
   11f3e:	192a      	adds	r2, r5, r4
   11f40:	2300      	movs	r3, #0
   11f42:	512b      	str	r3, [r5, r4]
   11f44:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   11f48:	bd70      	pop	{r4, r5, r6, pc}
   11f4a:	f383 8811 	msr	BASEPRI, r3
   11f4e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11f52:	e7ef      	b.n	11f34 <pm_system_resume+0x48>
   11f54:	20002e50 	.word	0x20002e50
   11f58:	20002644 	.word	0x20002644
   11f5c:	0001ff41 	.word	0x0001ff41
   11f60:	20002630 	.word	0x20002630

00011f64 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   11f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   11f68:	4b35      	ldr	r3, [pc, #212]	; (12040 <pm_system_suspend+0xdc>)
{
   11f6a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   11f6c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   11f6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f72:	f3ef 8811 	mrs	r8, BASEPRI
   11f76:	f383 8812 	msr	BASEPRI_MAX, r3
   11f7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   11f7e:	240c      	movs	r4, #12
   11f80:	4b30      	ldr	r3, [pc, #192]	; (12044 <pm_system_suspend+0xe0>)
   11f82:	4e31      	ldr	r6, [pc, #196]	; (12048 <pm_system_suspend+0xe4>)
   11f84:	436c      	muls	r4, r5
   11f86:	191a      	adds	r2, r3, r4
   11f88:	5d19      	ldrb	r1, [r3, r4]
   11f8a:	2900      	cmp	r1, #0
   11f8c:	d04c      	beq.n	12028 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   11f8e:	ca07      	ldmia	r2, {r0, r1, r2}
   11f90:	eb06 0c04 	add.w	ip, r6, r4
   11f94:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   11f98:	2200      	movs	r2, #0
   11f9a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   11f9c:	f388 8811 	msr	BASEPRI, r8
   11fa0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   11fa4:	230c      	movs	r3, #12
   11fa6:	436b      	muls	r3, r5
   11fa8:	18f2      	adds	r2, r6, r3
   11faa:	5cf0      	ldrb	r0, [r6, r3]
   11fac:	2800      	cmp	r0, #0
   11fae:	d039      	beq.n	12024 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   11fb0:	1c7b      	adds	r3, r7, #1
   11fb2:	d010      	beq.n	11fd6 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   11fb4:	f8d2 c008 	ldr.w	ip, [r2, #8]
   11fb8:	4c24      	ldr	r4, [pc, #144]	; (1204c <pm_system_suspend+0xe8>)
   11fba:	4a25      	ldr	r2, [pc, #148]	; (12050 <pm_system_suspend+0xec>)
   11fbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11fc0:	2100      	movs	r1, #0
   11fc2:	fbec 4100 	umlal	r4, r1, ip, r0
   11fc6:	2300      	movs	r3, #0
   11fc8:	4620      	mov	r0, r4
   11fca:	f7ee f899 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   11fce:	2101      	movs	r1, #1
   11fd0:	1a38      	subs	r0, r7, r0
   11fd2:	f007 fb73 	bl	196bc <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   11fd6:	f009 feb5 	bl	1bd44 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   11fda:	2001      	movs	r0, #1
   11fdc:	f7ff ff58 	bl	11e90 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11fe0:	f3bf 8f5b 	dmb	ish
   11fe4:	4b1b      	ldr	r3, [pc, #108]	; (12054 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11fe6:	096a      	lsrs	r2, r5, #5
   11fe8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   11fec:	f005 011f 	and.w	r1, r5, #31
   11ff0:	2201      	movs	r2, #1
   11ff2:	408a      	lsls	r2, r1
   11ff4:	e853 0f00 	ldrex	r0, [r3]
   11ff8:	4310      	orrs	r0, r2
   11ffa:	e843 0100 	strex	r1, r0, [r3]
   11ffe:	2900      	cmp	r1, #0
   12000:	d1f8      	bne.n	11ff4 <pm_system_suspend+0x90>
   12002:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   12006:	4b14      	ldr	r3, [pc, #80]	; (12058 <pm_system_suspend+0xf4>)
   12008:	b13b      	cbz	r3, 1201a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   1200a:	230c      	movs	r3, #12
   1200c:	fb03 f005 	mul.w	r0, r3, r5
   12010:	1833      	adds	r3, r6, r0
   12012:	5c30      	ldrb	r0, [r6, r0]
   12014:	7859      	ldrb	r1, [r3, #1]
   12016:	f00d ff87 	bl	1ff28 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1201a:	f7ff ff67 	bl	11eec <pm_system_resume>
	k_sched_unlock();
   1201e:	f009 fea5 	bl	1bd6c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   12022:	2001      	movs	r0, #1
}
   12024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   12028:	4601      	mov	r1, r0
   1202a:	4628      	mov	r0, r5
   1202c:	f000 f816 	bl	1205c <pm_policy_next_state>
		if (info != NULL) {
   12030:	2800      	cmp	r0, #0
   12032:	d0b3      	beq.n	11f9c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   12034:	c807      	ldmia	r0, {r0, r1, r2}
   12036:	4434      	add	r4, r6
   12038:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1203c:	e7ae      	b.n	11f9c <pm_system_suspend+0x38>
   1203e:	bf00      	nop
   12040:	20002e50 	.word	0x20002e50
   12044:	20002624 	.word	0x20002624
   12048:	20002630 	.word	0x20002630
   1204c:	000f423f 	.word	0x000f423f
   12050:	000f4240 	.word	0x000f4240
   12054:	20002644 	.word	0x20002644
   12058:	0001ff29 	.word	0x0001ff29

0001205c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12060:	b085      	sub	sp, #20
   12062:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12064:	a903      	add	r1, sp, #12
   12066:	f000 f843 	bl	120f0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1206a:	4b1e      	ldr	r3, [pc, #120]	; (120e4 <pm_policy_next_state+0x88>)
   1206c:	9d03      	ldr	r5, [sp, #12]
   1206e:	f8d3 a000 	ldr.w	sl, [r3]
   12072:	f8df 8074 	ldr.w	r8, [pc, #116]	; 120e8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12076:	1e43      	subs	r3, r0, #1
   12078:	b21b      	sxth	r3, r3
   1207a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1207e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12080:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12084:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   12088:	f04f 0b00 	mov.w	fp, #0
   1208c:	b924      	cbnz	r4, 12098 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1208e:	46a1      	mov	r9, r4
}
   12090:	4648      	mov	r0, r9
   12092:	b005      	add	sp, #20
   12094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12098:	6868      	ldr	r0, [r5, #4]
   1209a:	4a14      	ldr	r2, [pc, #80]	; (120ec <pm_policy_next_state+0x90>)
   1209c:	46c4      	mov	ip, r8
   1209e:	4659      	mov	r1, fp
   120a0:	fbe0 c107 	umlal	ip, r1, r0, r7
   120a4:	2300      	movs	r3, #0
   120a6:	4660      	mov	r0, ip
   120a8:	f7ee f82a 	bl	100 <__aeabi_uldivmod>
   120ac:	9001      	str	r0, [sp, #4]
   120ae:	68a8      	ldr	r0, [r5, #8]
   120b0:	4a0e      	ldr	r2, [pc, #56]	; (120ec <pm_policy_next_state+0x90>)
   120b2:	46c4      	mov	ip, r8
   120b4:	4659      	mov	r1, fp
   120b6:	fbe0 c107 	umlal	ip, r1, r0, r7
   120ba:	2300      	movs	r3, #0
   120bc:	4660      	mov	r0, ip
   120be:	f7ee f81f 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   120c2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   120c6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   120c8:	d001      	beq.n	120ce <pm_policy_next_state+0x72>
   120ca:	4582      	cmp	sl, r0
   120cc:	d905      	bls.n	120da <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   120ce:	1c73      	adds	r3, r6, #1
   120d0:	d0de      	beq.n	12090 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   120d2:	9b01      	ldr	r3, [sp, #4]
   120d4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   120d6:	42b0      	cmp	r0, r6
   120d8:	d9da      	bls.n	12090 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   120da:	3c01      	subs	r4, #1
   120dc:	b2a4      	uxth	r4, r4
   120de:	3d0c      	subs	r5, #12
   120e0:	e7d4      	b.n	1208c <pm_policy_next_state+0x30>
   120e2:	bf00      	nop
   120e4:	200004ec 	.word	0x200004ec
   120e8:	000f423f 	.word	0x000f423f
   120ec:	000f4240 	.word	0x000f4240

000120f0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   120f0:	b908      	cbnz	r0, 120f6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   120f2:	4b02      	ldr	r3, [pc, #8]	; (120fc <pm_state_cpu_get_all+0xc>)
   120f4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   120f6:	2000      	movs	r0, #0
   120f8:	4770      	bx	lr
   120fa:	bf00      	nop
   120fc:	00024da8 	.word	0x00024da8

00012100 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12100:	4904      	ldr	r1, [pc, #16]	; (12114 <sub_bytes+0x14>)
   12102:	1e43      	subs	r3, r0, #1
   12104:	300f      	adds	r0, #15
   12106:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1210a:	5c8a      	ldrb	r2, [r1, r2]
   1210c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1210e:	4283      	cmp	r3, r0
   12110:	d1f9      	bne.n	12106 <sub_bytes+0x6>
	}
}
   12112:	4770      	bx	lr
   12114:	00025877 	.word	0x00025877

00012118 <tc_aes128_set_encrypt_key>:
{
   12118:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1211a:	4e26      	ldr	r6, [pc, #152]	; (121b4 <tc_aes128_set_encrypt_key+0x9c>)
{
   1211c:	4607      	mov	r7, r0
   1211e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12120:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12122:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12124:	ad01      	add	r5, sp, #4
   12126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12128:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1212a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1212c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12130:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   12134:	4638      	mov	r0, r7
   12136:	2f00      	cmp	r7, #0
   12138:	d038      	beq.n	121ac <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1213a:	2c00      	cmp	r4, #0
   1213c:	d038      	beq.n	121b0 <tc_aes128_set_encrypt_key+0x98>
   1213e:	1f38      	subs	r0, r7, #4
   12140:	4621      	mov	r1, r4
   12142:	4602      	mov	r2, r0
   12144:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12146:	784b      	ldrb	r3, [r1, #1]
   12148:	780d      	ldrb	r5, [r1, #0]
   1214a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1214c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12150:	78cd      	ldrb	r5, [r1, #3]
   12152:	432b      	orrs	r3, r5
   12154:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   12156:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12158:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1215c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1215e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12162:	d1f0      	bne.n	12146 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12164:	4c14      	ldr	r4, [pc, #80]	; (121b8 <tc_aes128_set_encrypt_key+0xa0>)
   12166:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12168:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1216a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1216c:	d116      	bne.n	1219c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1216e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12172:	5ca5      	ldrb	r5, [r4, r2]
   12174:	0e1a      	lsrs	r2, r3, #24
   12176:	5ca2      	ldrb	r2, [r4, r2]
   12178:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1217c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12180:	b2db      	uxtb	r3, r3
   12182:	5d65      	ldrb	r5, [r4, r5]
   12184:	5ce3      	ldrb	r3, [r4, r3]
   12186:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1218a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1218e:	f021 0303 	bic.w	r3, r1, #3
   12192:	3330      	adds	r3, #48	; 0x30
   12194:	446b      	add	r3, sp
   12196:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1219a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1219c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   121a0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   121a2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   121a4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   121a6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   121a8:	d1de      	bne.n	12168 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   121aa:	2001      	movs	r0, #1
}
   121ac:	b00d      	add	sp, #52	; 0x34
   121ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   121b0:	4620      	mov	r0, r4
   121b2:	e7fb      	b.n	121ac <tc_aes128_set_encrypt_key+0x94>
   121b4:	00024d28 	.word	0x00024d28
   121b8:	00025877 	.word	0x00025877

000121bc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   121bc:	4801      	ldr	r0, [pc, #4]	; (121c4 <nrf_cc3xx_platform_abort_init+0x8>)
   121be:	f00a bcc5 	b.w	1cb4c <nrf_cc3xx_platform_set_abort>
   121c2:	bf00      	nop
   121c4:	00024da8 	.word	0x00024da8

000121c8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   121c8:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   121ca:	4604      	mov	r4, r0
   121cc:	b918      	cbnz	r0, 121d6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   121ce:	4b0f      	ldr	r3, [pc, #60]	; (1220c <mutex_free_platform+0x44>)
   121d0:	480f      	ldr	r0, [pc, #60]	; (12210 <mutex_free_platform+0x48>)
   121d2:	685b      	ldr	r3, [r3, #4]
   121d4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   121d6:	6861      	ldr	r1, [r4, #4]
   121d8:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   121dc:	d00f      	beq.n	121fe <mutex_free_platform+0x36>
   121de:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   121e2:	d00c      	beq.n	121fe <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   121e4:	4d0b      	ldr	r5, [pc, #44]	; (12214 <mutex_free_platform+0x4c>)
   121e6:	42a9      	cmp	r1, r5
   121e8:	d009      	beq.n	121fe <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   121ea:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   121ee:	d007      	beq.n	12200 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   121f0:	4809      	ldr	r0, [pc, #36]	; (12218 <mutex_free_platform+0x50>)
   121f2:	4621      	mov	r1, r4
   121f4:	f011 fea8 	bl	23f48 <k_mem_slab_free>
        mutex->mutex = NULL;
   121f8:	2300      	movs	r3, #0
   121fa:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   121fc:	6065      	str	r5, [r4, #4]
}
   121fe:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12200:	6820      	ldr	r0, [r4, #0]
   12202:	2214      	movs	r2, #20
   12204:	f00d fe84 	bl	1ff10 <memset>
   12208:	e7f8      	b.n	121fc <mutex_free_platform+0x34>
   1220a:	bf00      	nop
   1220c:	20000698 	.word	0x20000698
   12210:	00025977 	.word	0x00025977
   12214:	a95c5f2c 	.word	0xa95c5f2c
   12218:	20002b48 	.word	0x20002b48

0001221c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1221c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1221e:	b320      	cbz	r0, 1226a <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   12220:	6843      	ldr	r3, [r0, #4]
   12222:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12226:	d110      	bne.n	1224a <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12228:	2201      	movs	r2, #1
   1222a:	6803      	ldr	r3, [r0, #0]
   1222c:	f3bf 8f5b 	dmb	ish
   12230:	e853 1f00 	ldrex	r1, [r3]
   12234:	2900      	cmp	r1, #0
   12236:	d103      	bne.n	12240 <mutex_lock_platform+0x24>
   12238:	e843 2000 	strex	r0, r2, [r3]
   1223c:	2800      	cmp	r0, #0
   1223e:	d1f7      	bne.n	12230 <mutex_lock_platform+0x14>
   12240:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12244:	d10d      	bne.n	12262 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   12246:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   12248:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1224a:	4a09      	ldr	r2, [pc, #36]	; (12270 <mutex_lock_platform+0x54>)
   1224c:	4293      	cmp	r3, r2
   1224e:	d00a      	beq.n	12266 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12250:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   12252:	f04f 32ff 	mov.w	r2, #4294967295
   12256:	f04f 33ff 	mov.w	r3, #4294967295
   1225a:	f009 f863 	bl	1b324 <z_impl_k_mutex_lock>
        if (ret == 0) {
   1225e:	2800      	cmp	r0, #0
   12260:	d0f1      	beq.n	12246 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12262:	4804      	ldr	r0, [pc, #16]	; (12274 <mutex_lock_platform+0x58>)
   12264:	e7f0      	b.n	12248 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12266:	4804      	ldr	r0, [pc, #16]	; (12278 <mutex_lock_platform+0x5c>)
   12268:	e7ee      	b.n	12248 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1226a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1226e:	e7eb      	b.n	12248 <mutex_lock_platform+0x2c>
   12270:	a95c5f2c 	.word	0xa95c5f2c
   12274:	ffff8fe9 	.word	0xffff8fe9
   12278:	ffff8fea 	.word	0xffff8fea

0001227c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1227c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1227e:	b1d8      	cbz	r0, 122b8 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12280:	6843      	ldr	r3, [r0, #4]
   12282:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12286:	d110      	bne.n	122aa <mutex_unlock_platform+0x2e>
   12288:	2200      	movs	r2, #0
   1228a:	6803      	ldr	r3, [r0, #0]
   1228c:	f3bf 8f5b 	dmb	ish
   12290:	e853 1f00 	ldrex	r1, [r3]
   12294:	2901      	cmp	r1, #1
   12296:	d103      	bne.n	122a0 <mutex_unlock_platform+0x24>
   12298:	e843 2000 	strex	r0, r2, [r3]
   1229c:	2800      	cmp	r0, #0
   1229e:	d1f7      	bne.n	12290 <mutex_unlock_platform+0x14>
   122a0:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   122a4:	d10b      	bne.n	122be <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   122a6:	2000      	movs	r0, #0
    }
}
   122a8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   122aa:	4a07      	ldr	r2, [pc, #28]	; (122c8 <mutex_unlock_platform+0x4c>)
   122ac:	4293      	cmp	r3, r2
   122ae:	d008      	beq.n	122c2 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   122b0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   122b2:	f009 f8b1 	bl	1b418 <z_impl_k_mutex_unlock>
   122b6:	e7f6      	b.n	122a6 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   122b8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   122bc:	e7f4      	b.n	122a8 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   122be:	4803      	ldr	r0, [pc, #12]	; (122cc <mutex_unlock_platform+0x50>)
   122c0:	e7f2      	b.n	122a8 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   122c2:	4803      	ldr	r0, [pc, #12]	; (122d0 <mutex_unlock_platform+0x54>)
   122c4:	e7f0      	b.n	122a8 <mutex_unlock_platform+0x2c>
   122c6:	bf00      	nop
   122c8:	a95c5f2c 	.word	0xa95c5f2c
   122cc:	ffff8fe9 	.word	0xffff8fe9
   122d0:	ffff8fea 	.word	0xffff8fea

000122d4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   122d4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   122d6:	4604      	mov	r4, r0
   122d8:	b918      	cbnz	r0, 122e2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   122da:	4b1d      	ldr	r3, [pc, #116]	; (12350 <mutex_init_platform+0x7c>)
   122dc:	481d      	ldr	r0, [pc, #116]	; (12354 <mutex_init_platform+0x80>)
   122de:	685b      	ldr	r3, [r3, #4]
   122e0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   122e2:	6863      	ldr	r3, [r4, #4]
   122e4:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   122e8:	d02f      	beq.n	1234a <mutex_init_platform+0x76>
   122ea:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   122ee:	d02c      	beq.n	1234a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   122f0:	4a19      	ldr	r2, [pc, #100]	; (12358 <mutex_init_platform+0x84>)
   122f2:	4293      	cmp	r3, r2
   122f4:	d119      	bne.n	1232a <mutex_init_platform+0x56>
   122f6:	6823      	ldr	r3, [r4, #0]
   122f8:	bb03      	cbnz	r3, 1233c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   122fa:	4818      	ldr	r0, [pc, #96]	; (1235c <mutex_init_platform+0x88>)
   122fc:	f04f 32ff 	mov.w	r2, #4294967295
   12300:	f04f 33ff 	mov.w	r3, #4294967295
   12304:	4621      	mov	r1, r4
   12306:	f008 ff09 	bl	1b11c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1230a:	b908      	cbnz	r0, 12310 <mutex_init_platform+0x3c>
   1230c:	6823      	ldr	r3, [r4, #0]
   1230e:	b91b      	cbnz	r3, 12318 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   12310:	4b0f      	ldr	r3, [pc, #60]	; (12350 <mutex_init_platform+0x7c>)
   12312:	4813      	ldr	r0, [pc, #76]	; (12360 <mutex_init_platform+0x8c>)
   12314:	685b      	ldr	r3, [r3, #4]
   12316:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12318:	6820      	ldr	r0, [r4, #0]
   1231a:	2214      	movs	r2, #20
   1231c:	2100      	movs	r1, #0
   1231e:	f00d fdf7 	bl	1ff10 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   12322:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   12326:	6063      	str	r3, [r4, #4]
   12328:	e008      	b.n	1233c <mutex_init_platform+0x68>
    switch(flags){
   1232a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   1232e:	d80d      	bhi.n	1234c <mutex_init_platform+0x78>
   12330:	2b3a      	cmp	r3, #58	; 0x3a
   12332:	d003      	beq.n	1233c <mutex_init_platform+0x68>
   12334:	f640 62ba 	movw	r2, #3770	; 0xeba
   12338:	4293      	cmp	r3, r2
   1233a:	d1de      	bne.n	122fa <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   1233c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1233e:	f011 fe46 	bl	23fce <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12342:	6863      	ldr	r3, [r4, #4]
   12344:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   12348:	6063      	str	r3, [r4, #4]
}
   1234a:	bd10      	pop	{r4, pc}
    switch(flags){
   1234c:	4a05      	ldr	r2, [pc, #20]	; (12364 <mutex_init_platform+0x90>)
   1234e:	e7f3      	b.n	12338 <mutex_init_platform+0x64>
   12350:	20000698 	.word	0x20000698
   12354:	00025977 	.word	0x00025977
   12358:	a95c5f2c 	.word	0xa95c5f2c
   1235c:	20002b48 	.word	0x20002b48
   12360:	0002599d 	.word	0x0002599d
   12364:	3a00003a 	.word	0x3a00003a

00012368 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12368:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1236a:	4906      	ldr	r1, [pc, #24]	; (12384 <nrf_cc3xx_platform_mutex_init+0x1c>)
   1236c:	4806      	ldr	r0, [pc, #24]	; (12388 <nrf_cc3xx_platform_mutex_init+0x20>)
   1236e:	2340      	movs	r3, #64	; 0x40
   12370:	2214      	movs	r2, #20
   12372:	f011 fddb 	bl	23f2c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   12376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1237a:	4904      	ldr	r1, [pc, #16]	; (1238c <nrf_cc3xx_platform_mutex_init+0x24>)
   1237c:	4804      	ldr	r0, [pc, #16]	; (12390 <nrf_cc3xx_platform_mutex_init+0x28>)
   1237e:	f00a bca9 	b.w	1ccd4 <nrf_cc3xx_platform_set_mutexes>
   12382:	bf00      	nop
   12384:	20002648 	.word	0x20002648
   12388:	20002b48 	.word	0x20002b48
   1238c:	00024db0 	.word	0x00024db0
   12390:	00024dc4 	.word	0x00024dc4

00012394 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12394:	4901      	ldr	r1, [pc, #4]	; (1239c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12396:	2210      	movs	r2, #16
	str	r2, [r1]
   12398:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1239a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1239c:	e000ed10 	.word	0xe000ed10

000123a0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   123a0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   123a2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   123a4:	f380 8811 	msr	BASEPRI, r0
	isb
   123a8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   123ac:	f3bf 8f4f 	dsb	sy
   123b0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   123b2:	b662      	cpsie	i
	isb
   123b4:	f3bf 8f6f 	isb	sy

	bx	lr
   123b8:	4770      	bx	lr
   123ba:	bf00      	nop

000123bc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   123bc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   123be:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   123c0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   123c4:	f3bf 8f4f 	dsb	sy
   123c8:	bf20      	wfe

	msr	BASEPRI, r0
   123ca:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   123ce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   123d0:	4770      	bx	lr
   123d2:	bf00      	nop

000123d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   123d4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   123d6:	2800      	cmp	r0, #0
   123d8:	db07      	blt.n	123ea <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   123da:	4a04      	ldr	r2, [pc, #16]	; (123ec <arch_irq_enable+0x18>)
   123dc:	0941      	lsrs	r1, r0, #5
   123de:	2301      	movs	r3, #1
   123e0:	f000 001f 	and.w	r0, r0, #31
   123e4:	4083      	lsls	r3, r0
   123e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   123ea:	4770      	bx	lr
   123ec:	e000e100 	.word	0xe000e100

000123f0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   123f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   123f2:	2800      	cmp	r0, #0
   123f4:	db0c      	blt.n	12410 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   123f6:	0943      	lsrs	r3, r0, #5
   123f8:	4906      	ldr	r1, [pc, #24]	; (12414 <arch_irq_disable+0x24>)
   123fa:	f000 001f 	and.w	r0, r0, #31
   123fe:	3320      	adds	r3, #32
   12400:	2201      	movs	r2, #1
   12402:	4082      	lsls	r2, r0
   12404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12408:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1240c:	f3bf 8f6f 	isb	sy
}
   12410:	4770      	bx	lr
   12412:	bf00      	nop
   12414:	e000e100 	.word	0xe000e100

00012418 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12418:	4b05      	ldr	r3, [pc, #20]	; (12430 <arch_irq_is_enabled+0x18>)
   1241a:	0942      	lsrs	r2, r0, #5
   1241c:	f000 001f 	and.w	r0, r0, #31
   12420:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12424:	2301      	movs	r3, #1
   12426:	fa03 f000 	lsl.w	r0, r3, r0
}
   1242a:	4010      	ands	r0, r2
   1242c:	4770      	bx	lr
   1242e:	bf00      	nop
   12430:	e000e100 	.word	0xe000e100

00012434 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12434:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12436:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   12438:	bf54      	ite	pl
   1243a:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1243c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1243e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12440:	bfac      	ite	ge
   12442:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12446:	4a07      	ldrlt	r2, [pc, #28]	; (12464 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12448:	ea4f 1341 	mov.w	r3, r1, lsl #5
   1244c:	bfac      	ite	ge
   1244e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12452:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12456:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12458:	bfb4      	ite	lt
   1245a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1245c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   12460:	4770      	bx	lr
   12462:	bf00      	nop
   12464:	e000ed14 	.word	0xe000ed14

00012468 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12468:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1246a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1246c:	4b04      	ldr	r3, [pc, #16]	; (12480 <_arch_isr_direct_pm+0x18>)
   1246e:	695a      	ldr	r2, [r3, #20]
   12470:	b11a      	cbz	r2, 1247a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   12472:	2200      	movs	r2, #0
   12474:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   12476:	f011 fd9b 	bl	23fb0 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1247a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1247c:	bd08      	pop	{r3, pc}
   1247e:	bf00      	nop
   12480:	20002e50 	.word	0x20002e50

00012484 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12484:	bf30      	wfi
    b z_SysNmiOnReset
   12486:	f7ff bffd 	b.w	12484 <z_SysNmiOnReset>
   1248a:	bf00      	nop

0001248c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1248c:	4a0b      	ldr	r2, [pc, #44]	; (124bc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1248e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12490:	4b0b      	ldr	r3, [pc, #44]	; (124c0 <z_arm_prep_c+0x34>)
   12492:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12496:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12498:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1249c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   124a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   124a4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   124a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   124ac:	f008 fd60 	bl	1af70 <z_bss_zero>
	z_data_copy();
   124b0:	f009 fd94 	bl	1bfdc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   124b4:	f000 fa20 	bl	128f8 <z_arm_interrupt_init>
	z_cstart();
   124b8:	f008 fd9e 	bl	1aff8 <z_cstart>
   124bc:	00000000 	.word	0x00000000
   124c0:	e000ed00 	.word	0xe000ed00

000124c4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   124c4:	4a09      	ldr	r2, [pc, #36]	; (124ec <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   124c6:	490a      	ldr	r1, [pc, #40]	; (124f0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   124c8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   124ca:	6809      	ldr	r1, [r1, #0]
   124cc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   124ce:	4909      	ldr	r1, [pc, #36]	; (124f4 <arch_swap+0x30>)
	_current->arch.basepri = key;
   124d0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   124d2:	684b      	ldr	r3, [r1, #4]
   124d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   124d8:	604b      	str	r3, [r1, #4]
   124da:	2300      	movs	r3, #0
   124dc:	f383 8811 	msr	BASEPRI, r3
   124e0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   124e4:	6893      	ldr	r3, [r2, #8]
}
   124e6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   124e8:	4770      	bx	lr
   124ea:	bf00      	nop
   124ec:	20002e50 	.word	0x20002e50
   124f0:	0002538c 	.word	0x0002538c
   124f4:	e000ed00 	.word	0xe000ed00

000124f8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   124f8:	4912      	ldr	r1, [pc, #72]	; (12544 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   124fa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   124fc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12500:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12502:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12506:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1250a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1250c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12510:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12514:	4f0c      	ldr	r7, [pc, #48]	; (12548 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12516:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1251a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   1251c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1251e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12520:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12522:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12524:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12526:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1252a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1252c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1252e:	f000 fa7f 	bl	12a30 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12532:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12536:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1253a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1253e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12542:	4770      	bx	lr
    ldr r1, =_kernel
   12544:	20002e50 	.word	0x20002e50
    ldr v4, =_SCS_ICSR
   12548:	e000ed04 	.word	0xe000ed04

0001254c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1254c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12550:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12552:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   12556:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1255a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1255c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12560:	2902      	cmp	r1, #2
    beq _oops
   12562:	d0ff      	beq.n	12564 <_oops>

00012564 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12564:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   12566:	f00d fc78 	bl	1fe5a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1256a:	bd01      	pop	{r0, pc}

0001256c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1256c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12570:	9b00      	ldr	r3, [sp, #0]
   12572:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   12576:	490a      	ldr	r1, [pc, #40]	; (125a0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   12578:	9b01      	ldr	r3, [sp, #4]
   1257a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1257e:	9b02      	ldr	r3, [sp, #8]
   12580:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12584:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1258c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   12590:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12594:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12596:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12598:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1259a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1259c:	4770      	bx	lr
   1259e:	bf00      	nop
   125a0:	0001f3b7 	.word	0x0001f3b7

000125a4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   125a4:	4a09      	ldr	r2, [pc, #36]	; (125cc <z_check_thread_stack_fail+0x28>)
{
   125a6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   125a8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   125aa:	b170      	cbz	r0, 125ca <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   125ac:	f113 0f16 	cmn.w	r3, #22
   125b0:	6e80      	ldr	r0, [r0, #104]	; 0x68
   125b2:	d005      	beq.n	125c0 <z_check_thread_stack_fail+0x1c>
   125b4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   125b8:	429a      	cmp	r2, r3
   125ba:	d805      	bhi.n	125c8 <z_check_thread_stack_fail+0x24>
   125bc:	4283      	cmp	r3, r0
   125be:	d203      	bcs.n	125c8 <z_check_thread_stack_fail+0x24>
		return 0;
   125c0:	4281      	cmp	r1, r0
   125c2:	bf28      	it	cs
   125c4:	2000      	movcs	r0, #0
   125c6:	4770      	bx	lr
   125c8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   125ca:	4770      	bx	lr
   125cc:	20002e50 	.word	0x20002e50

000125d0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   125d0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   125d2:	4b09      	ldr	r3, [pc, #36]	; (125f8 <arch_switch_to_main_thread+0x28>)
{
   125d4:	460d      	mov	r5, r1
   125d6:	4614      	mov	r4, r2
	_current = main_thread;
   125d8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   125da:	f000 fa29 	bl	12a30 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   125de:	4620      	mov	r0, r4
   125e0:	f385 8809 	msr	PSP, r5
   125e4:	2100      	movs	r1, #0
   125e6:	b663      	cpsie	if
   125e8:	f381 8811 	msr	BASEPRI, r1
   125ec:	f3bf 8f6f 	isb	sy
   125f0:	2200      	movs	r2, #0
   125f2:	2300      	movs	r3, #0
   125f4:	f00c fedf 	bl	1f3b6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   125f8:	20002e50 	.word	0x20002e50

000125fc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   125fc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   125fe:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12600:	4a0b      	ldr	r2, [pc, #44]	; (12630 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12602:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   12604:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12606:	bf1e      	ittt	ne
	movne	r1, #0
   12608:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1260a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   1260c:	f011 fcd0 	blne	23fb0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12610:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12612:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12616:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1261a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1261e:	4905      	ldr	r1, [pc, #20]	; (12634 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12620:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12622:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12624:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12626:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1262a:	4903      	ldr	r1, [pc, #12]	; (12638 <_isr_wrapper+0x3c>)
	bx r1
   1262c:	4708      	bx	r1
   1262e:	0000      	.short	0x0000
	ldr r2, =_kernel
   12630:	20002e50 	.word	0x20002e50
	ldr r1, =_sw_isr_table
   12634:	000249e8 	.word	0x000249e8
	ldr r1, =z_arm_int_exit
   12638:	0001263d 	.word	0x0001263d

0001263c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1263c:	4b04      	ldr	r3, [pc, #16]	; (12650 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1263e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12640:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   12642:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12644:	d003      	beq.n	1264e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12646:	4903      	ldr	r1, [pc, #12]	; (12654 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1264c:	600a      	str	r2, [r1, #0]

0001264e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1264e:	4770      	bx	lr
	ldr r3, =_kernel
   12650:	20002e50 	.word	0x20002e50
	ldr r1, =_SCS_ICSR
   12654:	e000ed04 	.word	0xe000ed04

00012658 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   12658:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1265a:	4b26      	ldr	r3, [pc, #152]	; (126f4 <mem_manage_fault+0x9c>)
{
   1265c:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1265e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   12660:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   12666:	bf14      	ite	ne
   12668:	2411      	movne	r4, #17
   1266a:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1266c:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
   12672:	bf18      	it	ne
   12674:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12676:	0792      	lsls	r2, r2, #30
{
   12678:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1267a:	d50a      	bpl.n	12692 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1267c:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1267e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12680:	0614      	lsls	r4, r2, #24
   12682:	d534      	bpl.n	126ee <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   12684:	b119      	cbz	r1, 1268e <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1268c:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   1268e:	2413      	movs	r4, #19
   12690:	e001      	b.n	12696 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
   12692:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12696:	4b17      	ldr	r3, [pc, #92]	; (126f4 <mem_manage_fault+0x9c>)
   12698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   1269a:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1269e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   126a0:	bf18      	it	ne
   126a2:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   126a4:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   126a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   126aa:	bf18      	it	ne
   126ac:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   126ae:	06d2      	lsls	r2, r2, #27
   126b0:	d402      	bmi.n	126b8 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   126b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   126b4:	079b      	lsls	r3, r3, #30
   126b6:	d50a      	bpl.n	126ce <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   126b8:	4b0e      	ldr	r3, [pc, #56]	; (126f4 <mem_manage_fault+0x9c>)
   126ba:	685b      	ldr	r3, [r3, #4]
   126bc:	0519      	lsls	r1, r3, #20
   126be:	d506      	bpl.n	126ce <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   126c0:	4631      	mov	r1, r6
   126c2:	f7ff ff6f 	bl	125a4 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   126c6:	b110      	cbz	r0, 126ce <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   126c8:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   126cc:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   126ce:	4b09      	ldr	r3, [pc, #36]	; (126f4 <mem_manage_fault+0x9c>)
   126d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   126d2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   126d4:	bf42      	ittt	mi
   126d6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   126d8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   126dc:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   126de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   126e0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   126e4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   126e6:	2300      	movs	r3, #0
   126e8:	702b      	strb	r3, [r5, #0]

	return reason;
}
   126ea:	4620      	mov	r0, r4
   126ec:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   126ee:	f06f 0015 	mvn.w	r0, #21
   126f2:	e7cc      	b.n	1268e <mem_manage_fault+0x36>
   126f4:	e000ed00 	.word	0xe000ed00

000126f8 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   126f8:	4b13      	ldr	r3, [pc, #76]	; (12748 <usage_fault.constprop.0+0x50>)
   126fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   126fc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   12702:	bf14      	ite	ne
   12704:	201e      	movne	r0, #30
   12706:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   12708:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1270c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   1270e:	bf18      	it	ne
   12710:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   12712:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   12718:	bf18      	it	ne
   1271a:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   1271c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   12722:	bf18      	it	ne
   12724:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   12726:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1272a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   1272c:	bf18      	it	ne
   1272e:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   12730:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12736:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   1273a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   1273e:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   12740:	bf18      	it	ne
   12742:	2024      	movne	r0, #36	; 0x24
   12744:	4770      	bx	lr
   12746:	bf00      	nop
   12748:	e000ed00 	.word	0xe000ed00

0001274c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1274c:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1274e:	4b19      	ldr	r3, [pc, #100]	; (127b4 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12750:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12752:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12754:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   12756:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   1275a:	bf14      	ite	ne
   1275c:	2017      	movne	r0, #23
   1275e:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
   12760:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12764:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
   12766:	bf18      	it	ne
   12768:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1276a:	05a4      	lsls	r4, r4, #22
   1276c:	d509      	bpl.n	12782 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
   1276e:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12770:	6a98      	ldr	r0, [r3, #40]	; 0x28
   12772:	0400      	lsls	r0, r0, #16
   12774:	d504      	bpl.n	12780 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
   12776:	b11a      	cbz	r2, 12780 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1277a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1277e:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   12780:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12782:	4b0c      	ldr	r3, [pc, #48]	; (127b4 <bus_fault.constprop.0+0x68>)
   12784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   12786:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1278a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   1278c:	bf18      	it	ne
   1278e:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12790:	05d2      	lsls	r2, r2, #23
   12792:	d40c      	bmi.n	127ae <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   12796:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1279a:	bf18      	it	ne
   1279c:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1279e:	4a05      	ldr	r2, [pc, #20]	; (127b4 <bus_fault.constprop.0+0x68>)
   127a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   127a2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   127a6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   127a8:	2300      	movs	r3, #0
   127aa:	700b      	strb	r3, [r1, #0]
}
   127ac:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   127ae:	201b      	movs	r0, #27
   127b0:	e7f5      	b.n	1279e <bus_fault.constprop.0+0x52>
   127b2:	bf00      	nop
   127b4:	e000ed00 	.word	0xe000ed00

000127b8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   127b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   127ba:	4b45      	ldr	r3, [pc, #276]	; (128d0 <z_arm_fault+0x118>)
   127bc:	685b      	ldr	r3, [r3, #4]
{
   127be:	b08a      	sub	sp, #40	; 0x28
   127c0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   127c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   127c6:	2600      	movs	r6, #0
   127c8:	f386 8811 	msr	BASEPRI, r6
   127cc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   127d0:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   127d4:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   127d8:	d111      	bne.n	127fe <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   127da:	f002 000c 	and.w	r0, r2, #12
   127de:	2808      	cmp	r0, #8
   127e0:	d00d      	beq.n	127fe <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   127e2:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   127e4:	bf4c      	ite	mi
   127e6:	460d      	movmi	r5, r1
			*nested_exc = true;
   127e8:	2601      	movpl	r6, #1
	*recoverable = false;
   127ea:	2200      	movs	r2, #0
	switch (fault) {
   127ec:	3b03      	subs	r3, #3
	*recoverable = false;
   127ee:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   127f2:	2b03      	cmp	r3, #3
   127f4:	d805      	bhi.n	12802 <z_arm_fault+0x4a>
   127f6:	e8df f003 	tbb	[pc, r3]
   127fa:	5d1e      	.short	0x5d1e
   127fc:	5a61      	.short	0x5a61
		return NULL;
   127fe:	4635      	mov	r5, r6
   12800:	e7f3      	b.n	127ea <z_arm_fault+0x32>
   12802:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12804:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12808:	b99b      	cbnz	r3, 12832 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1280a:	2220      	movs	r2, #32
   1280c:	4629      	mov	r1, r5
   1280e:	a802      	add	r0, sp, #8
   12810:	f00d fb73 	bl	1fefa <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12814:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12816:	2e00      	cmp	r6, #0
   12818:	d054      	beq.n	128c4 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1281a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1281e:	b922      	cbnz	r2, 1282a <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12820:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12824:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12828:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   1282a:	a902      	add	r1, sp, #8
   1282c:	4620      	mov	r0, r4
   1282e:	f00d fb12 	bl	1fe56 <z_arm_fatal_error>
}
   12832:	b00a      	add	sp, #40	; 0x28
   12834:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12836:	4b26      	ldr	r3, [pc, #152]	; (128d0 <z_arm_fault+0x118>)
   12838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1283a:	0791      	lsls	r1, r2, #30
   1283c:	d4e1      	bmi.n	12802 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1283e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12840:	2a00      	cmp	r2, #0
   12842:	dbde      	blt.n	12802 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12846:	0052      	lsls	r2, r2, #1
   12848:	d5db      	bpl.n	12802 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1284a:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1284c:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1284e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   12852:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   12854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12858:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1285c:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1285e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   12862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   12866:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   12868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1286c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12870:	f64d 7202 	movw	r2, #57090	; 0xdf02
   12874:	4291      	cmp	r1, r2
   12876:	d00a      	beq.n	1288e <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   12878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1287a:	b2d2      	uxtb	r2, r2
   1287c:	b14a      	cbz	r2, 12892 <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
   1287e:	f10d 0207 	add.w	r2, sp, #7
   12882:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12884:	4628      	mov	r0, r5
   12886:	f7ff fee7 	bl	12658 <mem_manage_fault>
		reason = usage_fault(esf);
   1288a:	4604      	mov	r4, r0
		break;
   1288c:	e7ba      	b.n	12804 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
   1288e:	682c      	ldr	r4, [r5, #0]
   12890:	e7b8      	b.n	12804 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   12892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12894:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   12898:	d005      	beq.n	128a6 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
   1289a:	f10d 0107 	add.w	r1, sp, #7
   1289e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   128a0:	f7ff ff54 	bl	1274c <bus_fault.constprop.0>
   128a4:	e7f1      	b.n	1288a <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   128a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   128a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   128ac:	d3a9      	bcc.n	12802 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
   128ae:	f7ff ff23 	bl	126f8 <usage_fault.constprop.0>
   128b2:	e7ea      	b.n	1288a <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
   128b4:	f10d 0207 	add.w	r2, sp, #7
   128b8:	2100      	movs	r1, #0
   128ba:	e7e3      	b.n	12884 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
   128bc:	f10d 0107 	add.w	r1, sp, #7
   128c0:	2000      	movs	r0, #0
   128c2:	e7ed      	b.n	128a0 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   128c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   128c8:	f023 0301 	bic.w	r3, r3, #1
   128cc:	e7ac      	b.n	12828 <z_arm_fault+0x70>
   128ce:	bf00      	nop
   128d0:	e000ed00 	.word	0xe000ed00

000128d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   128d4:	4a02      	ldr	r2, [pc, #8]	; (128e0 <z_arm_fault_init+0xc>)
   128d6:	6953      	ldr	r3, [r2, #20]
   128d8:	f043 0310 	orr.w	r3, r3, #16
   128dc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   128de:	4770      	bx	lr
   128e0:	e000ed00 	.word	0xe000ed00

000128e4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   128e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   128e8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   128ec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   128ee:	4672      	mov	r2, lr
	bl z_arm_fault
   128f0:	f7ff ff62 	bl	127b8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   128f4:	bd01      	pop	{r0, pc}
   128f6:	bf00      	nop

000128f8 <z_arm_interrupt_init>:
   128f8:	4804      	ldr	r0, [pc, #16]	; (1290c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   128fa:	2300      	movs	r3, #0
   128fc:	2140      	movs	r1, #64	; 0x40
   128fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12900:	3301      	adds	r3, #1
   12902:	2b30      	cmp	r3, #48	; 0x30
   12904:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12908:	d1f9      	bne.n	128fe <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1290a:	4770      	bx	lr
   1290c:	e000e100 	.word	0xe000e100

00012910 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12910:	2000      	movs	r0, #0
    msr CONTROL, r0
   12912:	f380 8814 	msr	CONTROL, r0
    isb
   12916:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1291a:	f7ff fab7 	bl	11e8c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1291e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12920:	490d      	ldr	r1, [pc, #52]	; (12958 <__start+0x48>)
    str r0, [r1]
   12922:	6008      	str	r0, [r1, #0]
    dsb
   12924:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12928:	480c      	ldr	r0, [pc, #48]	; (1295c <__start+0x4c>)
    msr msp, r0
   1292a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1292e:	f000 f82b 	bl	12988 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12932:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12934:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12938:	4809      	ldr	r0, [pc, #36]	; (12960 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1293a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   1293e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12940:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12944:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12948:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1294a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1294c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12950:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12954:	f7ff fd9a 	bl	1248c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12958:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1295c:	200066c0 	.word	0x200066c0
    ldr r0, =z_interrupt_stacks
   12960:	20005500 	.word	0x20005500

00012964 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12964:	4907      	ldr	r1, [pc, #28]	; (12984 <z_arm_clear_arm_mpu_config+0x20>)
   12966:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1296a:	2300      	movs	r3, #0
	int num_regions =
   1296c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12970:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12972:	4293      	cmp	r3, r2
   12974:	db00      	blt.n	12978 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   12976:	4770      	bx	lr
  MPU->RNR = rnr;
   12978:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   1297c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   12980:	3301      	adds	r3, #1
   12982:	e7f6      	b.n	12972 <z_arm_clear_arm_mpu_config+0xe>
   12984:	e000ed00 	.word	0xe000ed00

00012988 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12988:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1298a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1298c:	2300      	movs	r3, #0
   1298e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12992:	f7ff ffe7 	bl	12964 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12996:	4b14      	ldr	r3, [pc, #80]	; (129e8 <z_arm_init_arch_hw_at_boot+0x60>)
   12998:	f04f 32ff 	mov.w	r2, #4294967295
   1299c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   129a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   129a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   129a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   129ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   129b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   129b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   129b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   129bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   129c0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   129c4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   129c8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   129cc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   129d0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   129d4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   129d8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   129dc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   129de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   129e2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   129e6:	bd08      	pop	{r3, pc}
   129e8:	e000e100 	.word	0xe000e100

000129ec <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   129ec:	4b08      	ldr	r3, [pc, #32]	; (12a10 <z_impl_k_thread_abort+0x24>)
   129ee:	689b      	ldr	r3, [r3, #8]
   129f0:	4283      	cmp	r3, r0
   129f2:	d10b      	bne.n	12a0c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   129f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   129f8:	b143      	cbz	r3, 12a0c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   129fa:	4b06      	ldr	r3, [pc, #24]	; (12a14 <z_impl_k_thread_abort+0x28>)
   129fc:	685a      	ldr	r2, [r3, #4]
   129fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   12a02:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   12a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12a0a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   12a0c:	f009 ba74 	b.w	1bef8 <z_thread_abort>
   12a10:	20002e50 	.word	0x20002e50
   12a14:	e000ed00 	.word	0xe000ed00

00012a18 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12a18:	4b02      	ldr	r3, [pc, #8]	; (12a24 <z_arm_configure_static_mpu_regions+0xc>)
   12a1a:	4a03      	ldr	r2, [pc, #12]	; (12a28 <z_arm_configure_static_mpu_regions+0x10>)
   12a1c:	4803      	ldr	r0, [pc, #12]	; (12a2c <z_arm_configure_static_mpu_regions+0x14>)
   12a1e:	2101      	movs	r1, #1
   12a20:	f000 b870 	b.w	12b04 <arm_core_mpu_configure_static_mpu_regions>
   12a24:	20040000 	.word	0x20040000
   12a28:	20000000 	.word	0x20000000
   12a2c:	00024dd4 	.word	0x00024dd4

00012a30 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12a30:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12a32:	4b05      	ldr	r3, [pc, #20]	; (12a48 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12a34:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   12a36:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12a38:	4a04      	ldr	r2, [pc, #16]	; (12a4c <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12a3a:	2140      	movs	r1, #64	; 0x40
   12a3c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12a40:	4618      	mov	r0, r3
   12a42:	2101      	movs	r1, #1
   12a44:	f000 b868 	b.w	12b18 <arm_core_mpu_configure_dynamic_mpu_regions>
   12a48:	20002b64 	.word	0x20002b64
   12a4c:	150b0000 	.word	0x150b0000

00012a50 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12a50:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   12a52:	4e20      	ldr	r6, [pc, #128]	; (12ad4 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12a54:	2500      	movs	r5, #0
   12a56:	428d      	cmp	r5, r1
   12a58:	da39      	bge.n	12ace <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
   12a5a:	6844      	ldr	r4, [r0, #4]
   12a5c:	b374      	cbz	r4, 12abc <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   12a5e:	b153      	cbz	r3, 12a76 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12a60:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   12a64:	ea14 0f0c 	tst.w	r4, ip
   12a68:	d12f      	bne.n	12aca <mpu_configure_regions+0x7a>
		&&
   12a6a:	2c1f      	cmp	r4, #31
   12a6c:	d92d      	bls.n	12aca <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
   12a6e:	6807      	ldr	r7, [r0, #0]
		&&
   12a70:	ea1c 0f07 	tst.w	ip, r7
   12a74:	d129      	bne.n	12aca <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   12a76:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   12a78:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12a7a:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12a7e:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   12a82:	d91e      	bls.n	12ac2 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
   12a84:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   12a88:	d81d      	bhi.n	12ac6 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12a8a:	3c01      	subs	r4, #1
   12a8c:	fab4 f484 	clz	r4, r4
   12a90:	f1c4 041f 	rsb	r4, r4, #31
   12a94:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   12a96:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12a9a:	ea4c 0c04 	orr.w	ip, ip, r4
   12a9e:	d814      	bhi.n	12aca <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12aa0:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   12aa4:	4314      	orrs	r4, r2
   12aa6:	f044 0410 	orr.w	r4, r4, #16
   12aaa:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12aae:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12ab2:	f04c 0401 	orr.w	r4, ip, #1
   12ab6:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   12aba:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   12abc:	3501      	adds	r5, #1
   12abe:	300c      	adds	r0, #12
   12ac0:	e7c9      	b.n	12a56 <mpu_configure_regions+0x6>
		return REGION_32B;
   12ac2:	2408      	movs	r4, #8
   12ac4:	e7e7      	b.n	12a96 <mpu_configure_regions+0x46>
		return REGION_4G;
   12ac6:	243e      	movs	r4, #62	; 0x3e
   12ac8:	e7e5      	b.n	12a96 <mpu_configure_regions+0x46>
			return -EINVAL;
   12aca:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
   12ace:	4610      	mov	r0, r2
   12ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ad2:	bf00      	nop
   12ad4:	e000ed00 	.word	0xe000ed00

00012ad8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12ad8:	4b04      	ldr	r3, [pc, #16]	; (12aec <arm_core_mpu_enable+0x14>)
   12ada:	2205      	movs	r2, #5
   12adc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   12ae0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12ae4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12ae8:	4770      	bx	lr
   12aea:	bf00      	nop
   12aec:	e000ed00 	.word	0xe000ed00

00012af0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   12af0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12af4:	4b02      	ldr	r3, [pc, #8]	; (12b00 <arm_core_mpu_disable+0x10>)
   12af6:	2200      	movs	r2, #0
   12af8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   12afc:	4770      	bx	lr
   12afe:	bf00      	nop
   12b00:	e000ed00 	.word	0xe000ed00

00012b04 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12b04:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12b06:	4c03      	ldr	r4, [pc, #12]	; (12b14 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12b08:	2301      	movs	r3, #1
   12b0a:	7822      	ldrb	r2, [r4, #0]
   12b0c:	f7ff ffa0 	bl	12a50 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12b10:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   12b12:	bd10      	pop	{r4, pc}
   12b14:	20003970 	.word	0x20003970

00012b18 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   12b18:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   12b1a:	4a09      	ldr	r2, [pc, #36]	; (12b40 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   12b1c:	2300      	movs	r3, #0
   12b1e:	7812      	ldrb	r2, [r2, #0]
   12b20:	f7ff ff96 	bl	12a50 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   12b24:	f110 0f16 	cmn.w	r0, #22
   12b28:	d002      	beq.n	12b30 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   12b2a:	4a06      	ldr	r2, [pc, #24]	; (12b44 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   12b2c:	2807      	cmp	r0, #7
   12b2e:	dd00      	ble.n	12b32 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   12b30:	bd08      	pop	{r3, pc}
   12b32:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   12b36:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   12b3a:	3001      	adds	r0, #1
   12b3c:	e7f6      	b.n	12b2c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   12b3e:	bf00      	nop
   12b40:	20003970 	.word	0x20003970
   12b44:	e000ed00 	.word	0xe000ed00

00012b48 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12b48:	4914      	ldr	r1, [pc, #80]	; (12b9c <z_arm_mpu_init+0x54>)
   12b4a:	6808      	ldr	r0, [r1, #0]
   12b4c:	2808      	cmp	r0, #8
{
   12b4e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   12b50:	d821      	bhi.n	12b96 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12b52:	f7ff ffcd 	bl	12af0 <arm_core_mpu_disable>
   12b56:	4c12      	ldr	r4, [pc, #72]	; (12ba0 <z_arm_mpu_init+0x58>)
   12b58:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12b5a:	2200      	movs	r2, #0
   12b5c:	4290      	cmp	r0, r2
   12b5e:	f101 010c 	add.w	r1, r1, #12
   12b62:	d105      	bne.n	12b70 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12b64:	4b0f      	ldr	r3, [pc, #60]	; (12ba4 <z_arm_mpu_init+0x5c>)
   12b66:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   12b68:	f7ff ffb6 	bl	12ad8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   12b6c:	2000      	movs	r0, #0
}
   12b6e:	bd10      	pop	{r4, pc}
   12b70:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12b74:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   12b78:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   12b7c:	4313      	orrs	r3, r2
   12b7e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12b82:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12b8a:	f043 0301 	orr.w	r3, r3, #1
   12b8e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12b92:	3201      	adds	r2, #1
   12b94:	e7e2      	b.n	12b5c <z_arm_mpu_init+0x14>
		return -1;
   12b96:	f04f 30ff 	mov.w	r0, #4294967295
   12b9a:	e7e8      	b.n	12b6e <z_arm_mpu_init+0x26>
   12b9c:	00024de0 	.word	0x00024de0
   12ba0:	e000ed00 	.word	0xe000ed00
   12ba4:	20003970 	.word	0x20003970

00012ba8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   12ba8:	4b01      	ldr	r3, [pc, #4]	; (12bb0 <__stdout_hook_install+0x8>)
   12baa:	6018      	str	r0, [r3, #0]
}
   12bac:	4770      	bx	lr
   12bae:	bf00      	nop
   12bb0:	20000510 	.word	0x20000510

00012bb4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   12bb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   12bb8:	f3ef 8211 	mrs	r2, BASEPRI
   12bbc:	f383 8812 	msr	BASEPRI_MAX, r3
   12bc0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12bc4:	4906      	ldr	r1, [pc, #24]	; (12be0 <nordicsemi_nrf52_init+0x2c>)
   12bc6:	2301      	movs	r3, #1
   12bc8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   12bcc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12bd0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   12bd4:	f382 8811 	msr	BASEPRI, r2
   12bd8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12bdc:	2000      	movs	r0, #0
   12bde:	4770      	bx	lr
   12be0:	4001e000 	.word	0x4001e000

00012be4 <sys_arch_reboot>:
    *p_gpregret = val;
   12be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12be8:	b2c0      	uxtb	r0, r0
   12bea:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   12bee:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12bf2:	4905      	ldr	r1, [pc, #20]	; (12c08 <sys_arch_reboot+0x24>)
   12bf4:	4b05      	ldr	r3, [pc, #20]	; (12c0c <sys_arch_reboot+0x28>)
   12bf6:	68ca      	ldr	r2, [r1, #12]
   12bf8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12bfc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12bfe:	60cb      	str	r3, [r1, #12]
   12c00:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12c04:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12c06:	e7fd      	b.n	12c04 <sys_arch_reboot+0x20>
   12c08:	e000ed00 	.word	0xe000ed00
   12c0c:	05fa0004 	.word	0x05fa0004

00012c10 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12c10:	b120      	cbz	r0, 12c1c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12c12:	4b03      	ldr	r3, [pc, #12]	; (12c20 <arch_busy_wait+0x10>)
   12c14:	0180      	lsls	r0, r0, #6
   12c16:	f043 0301 	orr.w	r3, r3, #1
   12c1a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12c1c:	4770      	bx	lr
   12c1e:	bf00      	nop
   12c20:	00024da0 	.word	0x00024da0

00012c24 <init>:
	return 0;
}
#endif /* USE_RESET_GPIO */

static int init(void)
{
   12c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c28:	4d18      	ldr	r5, [pc, #96]	; (12c8c <init+0x68>)
   12c2a:	270e      	movs	r7, #14

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12c2c:	f04f 0801 	mov.w	r8, #1
	int rc;

	for (int i = 0; i < ARRAY_SIZE(routing_switches); ++i) {
		const struct switch_cfg *cfg = &routing_switches[i];
		gpio_flags_t flags = cfg->flags;
   12c30:	88ec      	ldrh	r4, [r5, #6]

		if (!device_is_ready(cfg->gpio)) {
   12c32:	682e      	ldr	r6, [r5, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   12c34:	4630      	mov	r0, r6
   12c36:	f011 f8c7 	bl	23dc8 <z_device_is_ready>
   12c3a:	b320      	cbz	r0, 12c86 <init+0x62>
			LOG_ERR("%s is not ready", cfg->gpio->name);
			return -ENODEV;
		}

		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
				  : GPIO_OUTPUT_INACTIVE);
   12c3c:	7a2b      	ldrb	r3, [r5, #8]
		rc = gpio_pin_configure(cfg->gpio, cfg->pin, flags);
   12c3e:	7929      	ldrb	r1, [r5, #4]
				  : GPIO_OUTPUT_INACTIVE);
   12c40:	b1f3      	cbz	r3, 12c80 <init+0x5c>
		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
   12c42:	f444 13d0 	orr.w	r3, r4, #1703936	; 0x1a0000
	struct gpio_driver_data *data =
   12c46:	6934      	ldr	r4, [r6, #16]
	const struct gpio_driver_api *api =
   12c48:	68b2      	ldr	r2, [r6, #8]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   12c4a:	07d8      	lsls	r0, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   12c4c:	bf48      	it	mi
   12c4e:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12c52:	6820      	ldr	r0, [r4, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   12c54:	f423 1e80 	bic.w	lr, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12c58:	fa08 fc01 	lsl.w	ip, r8, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12c5c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12c5e:	bf4c      	ite	mi
   12c60:	ea40 000c 	orrmi.w	r0, r0, ip
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12c64:	ea20 000c 	bicpl.w	r0, r0, ip
   12c68:	6020      	str	r0, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
   12c6a:	6813      	ldr	r3, [r2, #0]
   12c6c:	4630      	mov	r0, r6
   12c6e:	4672      	mov	r2, lr
   12c70:	4798      	blx	r3
		} else if (cfg->info) {
			LOG_INF("%s is %s",
				cfg->name, cfg->on ? "ENABLED" : "disabled");
		}
#endif
		if (rc) {
   12c72:	b918      	cbnz	r0, 12c7c <init+0x58>
	for (int i = 0; i < ARRAY_SIZE(routing_switches); ++i) {
   12c74:	3f01      	subs	r7, #1
   12c76:	f105 050c 	add.w	r5, r5, #12
   12c7a:	d1d9      	bne.n	12c30 <init+0xc>
#endif

	LOG_INF("Board configured.");

	return 0;
}
   12c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
   12c80:	f444 13b0 	orr.w	r3, r4, #1441792	; 0x160000
   12c84:	e7df      	b.n	12c46 <init+0x22>
			return -ENODEV;
   12c86:	f06f 0012 	mvn.w	r0, #18
   12c8a:	e7f7      	b.n	12c7c <init+0x58>
   12c8c:	00024e00 	.word	0x00024e00

00012c90 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   12c90:	b508      	push	{r3, lr}
   12c92:	4804      	ldr	r0, [pc, #16]	; (12ca4 <xoshiro128_initialize+0x14>)
   12c94:	f011 f898 	bl	23dc8 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   12c98:	2800      	cmp	r0, #0
}
   12c9a:	bf0c      	ite	eq
   12c9c:	f06f 0012 	mvneq.w	r0, #18
   12ca0:	2000      	movne	r0, #0
   12ca2:	bd08      	pop	{r3, pc}
   12ca4:	000249b8 	.word	0x000249b8

00012ca8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   12ca8:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   12caa:	4d0a      	ldr	r5, [pc, #40]	; (12cd4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12cac:	4b0a      	ldr	r3, [pc, #40]	; (12cd8 <long_wq_init+0x30>)
{
   12cae:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12cb0:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   12cb2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12cb4:	9302      	str	r3, [sp, #8]
   12cb6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   12cb8:	f011 fae8 	bl	2428c <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   12cbc:	ab02      	add	r3, sp, #8
   12cbe:	9300      	str	r3, [sp, #0]
   12cc0:	4628      	mov	r0, r5
   12cc2:	4906      	ldr	r1, [pc, #24]	; (12cdc <long_wq_init+0x34>)
   12cc4:	230a      	movs	r3, #10
   12cc6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   12cca:	f008 fd97 	bl	1b7fc <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   12cce:	4620      	mov	r0, r4
   12cd0:	b005      	add	sp, #20
   12cd2:	bd30      	pop	{r4, r5, pc}
   12cd4:	200017c8 	.word	0x200017c8
   12cd8:	00025a09 	.word	0x00025a09
   12cdc:	20003ac0 	.word	0x20003ac0

00012ce0 <bt_long_wq_schedule>:
{
   12ce0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   12ce2:	4801      	ldr	r0, [pc, #4]	; (12ce8 <bt_long_wq_schedule+0x8>)
   12ce4:	f008 bdc2 	b.w	1b86c <k_work_schedule_for_queue>
   12ce8:	200017c8 	.word	0x200017c8

00012cec <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   12cec:	b430      	push	{r4, r5}
   12cee:	4603      	mov	r3, r0
   12cf0:	4608      	mov	r0, r1
	switch (src->type) {
   12cf2:	781a      	ldrb	r2, [r3, #0]
   12cf4:	2a01      	cmp	r2, #1
   12cf6:	d013      	beq.n	12d20 <uuid_to_uuid128+0x34>
   12cf8:	2a02      	cmp	r2, #2
   12cfa:	d026      	beq.n	12d4a <uuid_to_uuid128+0x5e>
   12cfc:	b972      	cbnz	r2, 12d1c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   12cfe:	4a15      	ldr	r2, [pc, #84]	; (12d54 <uuid_to_uuid128+0x68>)
   12d00:	f102 0410 	add.w	r4, r2, #16
   12d04:	f852 5b04 	ldr.w	r5, [r2], #4
   12d08:	f841 5b04 	str.w	r5, [r1], #4
   12d0c:	42a2      	cmp	r2, r4
   12d0e:	d1f9      	bne.n	12d04 <uuid_to_uuid128+0x18>
   12d10:	7812      	ldrb	r2, [r2, #0]
   12d12:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   12d14:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   12d16:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   12d18:	0a1b      	lsrs	r3, r3, #8
   12d1a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   12d1c:	bc30      	pop	{r4, r5}
   12d1e:	4770      	bx	lr
		*dst = uuid128_base;
   12d20:	4a0c      	ldr	r2, [pc, #48]	; (12d54 <uuid_to_uuid128+0x68>)
   12d22:	f102 0410 	add.w	r4, r2, #16
   12d26:	f852 5b04 	ldr.w	r5, [r2], #4
   12d2a:	f841 5b04 	str.w	r5, [r1], #4
   12d2e:	42a2      	cmp	r2, r4
   12d30:	d1f9      	bne.n	12d26 <uuid_to_uuid128+0x3a>
   12d32:	7812      	ldrb	r2, [r2, #0]
   12d34:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   12d36:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   12d38:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   12d3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   12d3e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   12d40:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   12d42:	0a1b      	lsrs	r3, r3, #8
   12d44:	7382      	strb	r2, [r0, #14]
   12d46:	7403      	strb	r3, [r0, #16]
}
   12d48:	e7e8      	b.n	12d1c <uuid_to_uuid128+0x30>
}
   12d4a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   12d4c:	2211      	movs	r2, #17
   12d4e:	4619      	mov	r1, r3
   12d50:	f00d b8d3 	b.w	1fefa <memcpy>
   12d54:	00025a12 	.word	0x00025a12

00012d58 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   12d58:	b538      	push	{r3, r4, r5, lr}
   12d5a:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   12d5c:	4805      	ldr	r0, [pc, #20]	; (12d74 <bt_buf_get_rx+0x1c>)
   12d5e:	f010 fc74 	bl	2364a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   12d62:	4604      	mov	r4, r0
   12d64:	b120      	cbz	r0, 12d70 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   12d66:	2100      	movs	r1, #0
   12d68:	300c      	adds	r0, #12
   12d6a:	f010 fcd0 	bl	2370e <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12d6e:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   12d70:	4620      	mov	r0, r4
   12d72:	bd38      	pop	{r3, r4, r5, pc}
   12d74:	20000928 	.word	0x20000928

00012d78 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   12d78:	b570      	push	{r4, r5, r6, lr}
   12d7a:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12d7c:	480d      	ldr	r0, [pc, #52]	; (12db4 <bt_buf_get_cmd_complete+0x3c>)
   12d7e:	f3bf 8f5b 	dmb	ish
   12d82:	460b      	mov	r3, r1
   12d84:	2100      	movs	r1, #0
   12d86:	e850 4f00 	ldrex	r4, [r0]
   12d8a:	e840 1500 	strex	r5, r1, [r0]
   12d8e:	2d00      	cmp	r5, #0
   12d90:	d1f9      	bne.n	12d86 <bt_buf_get_cmd_complete+0xe>
   12d92:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   12d96:	b924      	cbnz	r4, 12da2 <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   12d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12d9c:	2001      	movs	r0, #1
   12d9e:	f7ff bfdb 	b.w	12d58 <bt_buf_get_rx>
   12da2:	2301      	movs	r3, #1
   12da4:	f104 000c 	add.w	r0, r4, #12
   12da8:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   12daa:	8221      	strh	r1, [r4, #16]
   12dac:	f010 fcaf 	bl	2370e <net_buf_simple_reserve>
}
   12db0:	4620      	mov	r0, r4
   12db2:	bd70      	pop	{r4, r5, r6, pc}
   12db4:	200004c0 	.word	0x200004c0

00012db8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   12db8:	b570      	push	{r4, r5, r6, lr}
   12dba:	4604      	mov	r4, r0
	switch (evt) {
   12dbc:	2c0f      	cmp	r4, #15
{
   12dbe:	460d      	mov	r5, r1
   12dc0:	4610      	mov	r0, r2
   12dc2:	4619      	mov	r1, r3
	switch (evt) {
   12dc4:	d805      	bhi.n	12dd2 <bt_buf_get_evt+0x1a>
   12dc6:	2c0d      	cmp	r4, #13
   12dc8:	d90d      	bls.n	12de6 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   12dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   12dce:	f7ff bfd3 	b.w	12d78 <bt_buf_get_cmd_complete>
	switch (evt) {
   12dd2:	2c13      	cmp	r4, #19
   12dd4:	d107      	bne.n	12de6 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   12dd6:	480c      	ldr	r0, [pc, #48]	; (12e08 <bt_buf_get_evt+0x50>)
   12dd8:	f010 fc37 	bl	2364a <net_buf_alloc_fixed>
			if (buf) {
   12ddc:	4604      	mov	r4, r0
   12dde:	b938      	cbnz	r0, 12df0 <bt_buf_get_evt+0x38>
{
   12de0:	2400      	movs	r4, #0
}
   12de2:	4620      	mov	r0, r4
   12de4:	bd70      	pop	{r4, r5, r6, pc}
   12de6:	4602      	mov	r2, r0
   12de8:	460b      	mov	r3, r1
		if (discardable) {
   12dea:	b145      	cbz	r5, 12dfe <bt_buf_get_evt+0x46>
   12dec:	4807      	ldr	r0, [pc, #28]	; (12e0c <bt_buf_get_evt+0x54>)
   12dee:	e7f3      	b.n	12dd8 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   12df0:	2100      	movs	r1, #0
   12df2:	300c      	adds	r0, #12
   12df4:	f010 fc8b 	bl	2370e <net_buf_simple_reserve>
   12df8:	2301      	movs	r3, #1
   12dfa:	7623      	strb	r3, [r4, #24]
}
   12dfc:	e7f1      	b.n	12de2 <bt_buf_get_evt+0x2a>
}
   12dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12e02:	2001      	movs	r0, #1
   12e04:	f7ff bfa8 	b.w	12d58 <bt_buf_get_rx>
   12e08:	20000954 	.word	0x20000954
   12e0c:	200008a4 	.word	0x200008a4

00012e10 <hci_disconn_complete_prio>:
{
   12e10:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12e12:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12e14:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   12e18:	781b      	ldrb	r3, [r3, #0]
   12e1a:	b963      	cbnz	r3, 12e36 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   12e1c:	4620      	mov	r0, r4
   12e1e:	f001 fde3 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   12e22:	4605      	mov	r5, r0
   12e24:	b940      	cbnz	r0, 12e38 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   12e26:	4b08      	ldr	r3, [pc, #32]	; (12e48 <hci_disconn_complete_prio+0x38>)
   12e28:	881a      	ldrh	r2, [r3, #0]
   12e2a:	b922      	cbnz	r2, 12e36 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   12e2c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   12e30:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   12e34:	8018      	strh	r0, [r3, #0]
}
   12e36:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12e38:	2101      	movs	r1, #1
   12e3a:	f001 fddd 	bl	149f8 <bt_conn_set_state>
	bt_conn_unref(conn);
   12e3e:	4628      	mov	r0, r5
}
   12e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   12e44:	f00d be09 	b.w	20a5a <bt_conn_unref>
   12e48:	20003954 	.word	0x20003954

00012e4c <hci_le_meta_event>:
{
   12e4c:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   12e4e:	2101      	movs	r1, #1
   12e50:	4604      	mov	r4, r0
   12e52:	300c      	adds	r0, #12
   12e54:	f010 fc90 	bl	23778 <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
   12e58:	4621      	mov	r1, r4
   12e5a:	4a03      	ldr	r2, [pc, #12]	; (12e68 <hci_le_meta_event+0x1c>)
   12e5c:	7800      	ldrb	r0, [r0, #0]
}
   12e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   12e62:	230b      	movs	r3, #11
   12e64:	f00d b9d9 	b.w	2021a <handle_event_common.isra.0>
   12e68:	00024f30 	.word	0x00024f30

00012e6c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   12e6c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   12e6e:	483c      	ldr	r0, [pc, #240]	; (12f60 <rx_work_handler+0xf4>)
   12e70:	f010 fc08 	bl	23684 <net_buf_slist_get>
	if (!buf) {
   12e74:	4604      	mov	r4, r0
   12e76:	2800      	cmp	r0, #0
   12e78:	d071      	beq.n	12f5e <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12e7a:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   12e7c:	2b01      	cmp	r3, #1
   12e7e:	d03f      	beq.n	12f00 <rx_work_handler+0x94>
   12e80:	2b03      	cmp	r3, #3
   12e82:	d11f      	bne.n	12ec4 <rx_work_handler+0x58>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12e84:	8a03      	ldrh	r3, [r0, #16]
   12e86:	2b03      	cmp	r3, #3
   12e88:	d80c      	bhi.n	12ea4 <rx_work_handler+0x38>
   12e8a:	4a36      	ldr	r2, [pc, #216]	; (12f64 <rx_work_handler+0xf8>)
   12e8c:	4936      	ldr	r1, [pc, #216]	; (12f68 <rx_work_handler+0xfc>)
   12e8e:	4837      	ldr	r0, [pc, #220]	; (12f6c <rx_work_handler+0x100>)
   12e90:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   12e94:	f00c fda3 	bl	1f9de <assert_print>
   12e98:	4040      	eors	r0, r0
   12e9a:	f380 8811 	msr	BASEPRI, r0
   12e9e:	f04f 0003 	mov.w	r0, #3
   12ea2:	df02      	svc	2
   12ea4:	2104      	movs	r1, #4
   12ea6:	f104 000c 	add.w	r0, r4, #12
   12eaa:	f010 fc65 	bl	23778 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12eae:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12eb0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12eb2:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12eb4:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   12eb6:	8a22      	ldrh	r2, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   12eb8:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   12ebc:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   12ebe:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   12ec0:	d003      	beq.n	12eca <rx_work_handler+0x5e>
	net_buf_unref(buf);
   12ec2:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   12ec4:	f005 fbce 	bl	18664 <net_buf_unref>
		break;
   12ec8:	e00f      	b.n	12eea <rx_work_handler+0x7e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   12eca:	f001 fd8d 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   12ece:	4605      	mov	r5, r0
   12ed0:	2800      	cmp	r0, #0
   12ed2:	d0f6      	beq.n	12ec2 <rx_work_handler+0x56>
	acl(buf)->index = bt_conn_index(conn);
   12ed4:	f001 fe6a 	bl	14bac <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   12ed8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   12eda:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   12edc:	4621      	mov	r1, r4
   12ede:	4628      	mov	r0, r5
   12ee0:	f00d fd33 	bl	2094a <bt_conn_recv>
	bt_conn_unref(conn);
   12ee4:	4628      	mov	r0, r5
   12ee6:	f00d fdb8 	bl	20a5a <bt_conn_unref>
	return list->head;
   12eea:	4b21      	ldr	r3, [pc, #132]	; (12f70 <rx_work_handler+0x104>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   12eec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   12ef0:	2b00      	cmp	r3, #0
   12ef2:	d034      	beq.n	12f5e <rx_work_handler+0xf2>
#endif
		if (err < 0) {
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   12ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   12ef8:	491e      	ldr	r1, [pc, #120]	; (12f74 <rx_work_handler+0x108>)
   12efa:	481f      	ldr	r0, [pc, #124]	; (12f78 <rx_work_handler+0x10c>)
   12efc:	f011 b9b5 	b.w	2426a <k_work_submit_to_queue>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12f00:	8a03      	ldrh	r3, [r0, #16]
   12f02:	2b01      	cmp	r3, #1
   12f04:	d80c      	bhi.n	12f20 <rx_work_handler+0xb4>
   12f06:	4a17      	ldr	r2, [pc, #92]	; (12f64 <rx_work_handler+0xf8>)
   12f08:	4917      	ldr	r1, [pc, #92]	; (12f68 <rx_work_handler+0xfc>)
   12f0a:	4818      	ldr	r0, [pc, #96]	; (12f6c <rx_work_handler+0x100>)
   12f0c:	f640 2347 	movw	r3, #2631	; 0xa47
   12f10:	f00c fd65 	bl	1f9de <assert_print>
   12f14:	4040      	eors	r0, r0
   12f16:	f380 8811 	msr	BASEPRI, r0
   12f1a:	f04f 0003 	mov.w	r0, #3
   12f1e:	df02      	svc	2
   12f20:	2102      	movs	r1, #2
   12f22:	f104 000c 	add.w	r0, r4, #12
   12f26:	f010 fc27 	bl	23778 <net_buf_simple_pull_mem>
   12f2a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   12f2c:	7800      	ldrb	r0, [r0, #0]
   12f2e:	f00d f8a2 	bl	20076 <bt_hci_evt_get_flags>
   12f32:	0783      	lsls	r3, r0, #30
   12f34:	d40c      	bmi.n	12f50 <rx_work_handler+0xe4>
   12f36:	4a0b      	ldr	r2, [pc, #44]	; (12f64 <rx_work_handler+0xf8>)
   12f38:	4910      	ldr	r1, [pc, #64]	; (12f7c <rx_work_handler+0x110>)
   12f3a:	480c      	ldr	r0, [pc, #48]	; (12f6c <rx_work_handler+0x100>)
   12f3c:	f640 234b 	movw	r3, #2635	; 0xa4b
   12f40:	f00c fd4d 	bl	1f9de <assert_print>
   12f44:	4040      	eors	r0, r0
   12f46:	f380 8811 	msr	BASEPRI, r0
   12f4a:	f04f 0003 	mov.w	r0, #3
   12f4e:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   12f50:	4a0b      	ldr	r2, [pc, #44]	; (12f80 <rx_work_handler+0x114>)
   12f52:	7828      	ldrb	r0, [r5, #0]
   12f54:	2306      	movs	r3, #6
   12f56:	4621      	mov	r1, r4
   12f58:	f00d f95f 	bl	2021a <handle_event_common.isra.0>
   12f5c:	e7b1      	b.n	12ec2 <rx_work_handler+0x56>
}
   12f5e:	bd70      	pop	{r4, r5, r6, pc}
   12f60:	200004c4 	.word	0x200004c4
   12f64:	00025a2b 	.word	0x00025a2b
   12f68:	00025a5f 	.word	0x00025a5f
   12f6c:	00025a78 	.word	0x00025a78
   12f70:	20000380 	.word	0x20000380
   12f74:	20000550 	.word	0x20000550
   12f78:	200018e8 	.word	0x200018e8
   12f7c:	00025a95 	.word	0x00025a95
   12f80:	00024f00 	.word	0x00024f00

00012f84 <hci_cmd_done>:
{
   12f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f86:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12f88:	7a90      	ldrb	r0, [r2, #10]
{
   12f8a:	460e      	mov	r6, r1
   12f8c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12f8e:	f005 faa7 	bl	184e0 <net_buf_pool_get>
   12f92:	4b28      	ldr	r3, [pc, #160]	; (13034 <hci_cmd_done+0xb0>)
   12f94:	4283      	cmp	r3, r0
   12f96:	d14b      	bne.n	13030 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   12f98:	4620      	mov	r0, r4
   12f9a:	f005 faa9 	bl	184f0 <net_buf_id>
   12f9e:	4d26      	ldr	r5, [pc, #152]	; (13038 <hci_cmd_done+0xb4>)
   12fa0:	230c      	movs	r3, #12
   12fa2:	fb03 5000 	mla	r0, r3, r0, r5
   12fa6:	8843      	ldrh	r3, [r0, #2]
   12fa8:	42bb      	cmp	r3, r7
   12faa:	d141      	bne.n	13030 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   12fac:	4f23      	ldr	r7, [pc, #140]	; (1303c <hci_cmd_done+0xb8>)
   12fae:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   12fb2:	b120      	cbz	r0, 12fbe <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   12fb4:	f005 fb56 	bl	18664 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12fb8:	2300      	movs	r3, #0
   12fba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	if (cmd(buf)->state && !status) {
   12fbe:	4620      	mov	r0, r4
   12fc0:	f005 fa96 	bl	184f0 <net_buf_id>
   12fc4:	270c      	movs	r7, #12
   12fc6:	fb07 5000 	mla	r0, r7, r0, r5
   12fca:	6843      	ldr	r3, [r0, #4]
   12fcc:	b19b      	cbz	r3, 12ff6 <hci_cmd_done+0x72>
   12fce:	b996      	cbnz	r6, 12ff6 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   12fd0:	4620      	mov	r0, r4
   12fd2:	f005 fa8d 	bl	184f0 <net_buf_id>
   12fd6:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12fda:	2101      	movs	r1, #1
   12fdc:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   12fde:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   12fe2:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   12fe4:	f003 071f 	and.w	r7, r3, #31
   12fe8:	40b9      	lsls	r1, r7
	if (val) {
   12fea:	095b      	lsrs	r3, r3, #5
   12fec:	b1d2      	cbz	r2, 13024 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12fee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12ff2:	f00d f8ac 	bl	2014e <atomic_or>
	if (cmd(buf)->sync) {
   12ff6:	4620      	mov	r0, r4
   12ff8:	f005 fa7a 	bl	184f0 <net_buf_id>
   12ffc:	270c      	movs	r7, #12
   12ffe:	fb07 5000 	mla	r0, r7, r0, r5
   13002:	6883      	ldr	r3, [r0, #8]
   13004:	b1a3      	cbz	r3, 13030 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   13006:	4620      	mov	r0, r4
   13008:	f005 fa72 	bl	184f0 <net_buf_id>
   1300c:	4378      	muls	r0, r7
   1300e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13010:	4620      	mov	r0, r4
   13012:	f005 fa6d 	bl	184f0 <net_buf_id>
   13016:	fb07 5500 	mla	r5, r7, r0, r5
   1301a:	68a8      	ldr	r0, [r5, #8]
}
   1301c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13020:	f008 ba6a 	b.w	1b4f8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13024:	43c9      	mvns	r1, r1
   13026:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1302a:	f00d f90d 	bl	20248 <atomic_and.isra.0>
   1302e:	e7e2      	b.n	12ff6 <hci_cmd_done+0x72>
   13030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13032:	bf00      	nop
   13034:	200008fc 	.word	0x200008fc
   13038:	20002b70 	.word	0x20002b70
   1303c:	20000380 	.word	0x20000380

00013040 <hci_cmd_status>:
{
   13040:	b538      	push	{r3, r4, r5, lr}
   13042:	2104      	movs	r1, #4
   13044:	4604      	mov	r4, r0
   13046:	300c      	adds	r0, #12
   13048:	f010 fb96 	bl	23778 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1304c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1304e:	7801      	ldrb	r1, [r0, #0]
   13050:	8840      	ldrh	r0, [r0, #2]
   13052:	4622      	mov	r2, r4
   13054:	f7ff ff96 	bl	12f84 <hci_cmd_done>
	if (ncmd) {
   13058:	b125      	cbz	r5, 13064 <hci_cmd_status+0x24>
   1305a:	4803      	ldr	r0, [pc, #12]	; (13068 <hci_cmd_status+0x28>)
}
   1305c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13060:	f008 ba4a 	b.w	1b4f8 <z_impl_k_sem_give>
   13064:	bd38      	pop	{r3, r4, r5, pc}
   13066:	bf00      	nop
   13068:	200004a8 	.word	0x200004a8

0001306c <hci_cmd_complete>:
{
   1306c:	b538      	push	{r3, r4, r5, lr}
   1306e:	2103      	movs	r1, #3
   13070:	4604      	mov	r4, r0
   13072:	300c      	adds	r0, #12
   13074:	f010 fb80 	bl	23778 <net_buf_simple_pull_mem>
	status = buf->data[0];
   13078:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   1307a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1307c:	7819      	ldrb	r1, [r3, #0]
   1307e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13082:	4622      	mov	r2, r4
   13084:	f7ff ff7e 	bl	12f84 <hci_cmd_done>
	if (ncmd) {
   13088:	b125      	cbz	r5, 13094 <hci_cmd_complete+0x28>
   1308a:	4803      	ldr	r0, [pc, #12]	; (13098 <hci_cmd_complete+0x2c>)
}
   1308c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13090:	f008 ba32 	b.w	1b4f8 <z_impl_k_sem_give>
   13094:	bd38      	pop	{r3, r4, r5, pc}
   13096:	bf00      	nop
   13098:	200004a8 	.word	0x200004a8

0001309c <bt_hci_cmd_state_set_init>:
{
   1309c:	b510      	push	{r4, lr}
	state->bit = bit;
   1309e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   130a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   130a6:	720b      	strb	r3, [r1, #8]
{
   130a8:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   130aa:	f005 fa21 	bl	184f0 <net_buf_id>
   130ae:	4b03      	ldr	r3, [pc, #12]	; (130bc <bt_hci_cmd_state_set_init+0x20>)
   130b0:	220c      	movs	r2, #12
   130b2:	fb02 3300 	mla	r3, r2, r0, r3
   130b6:	605c      	str	r4, [r3, #4]
}
   130b8:	bd10      	pop	{r4, pc}
   130ba:	bf00      	nop
   130bc:	20002b70 	.word	0x20002b70

000130c0 <bt_hci_cmd_create>:
{
   130c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   130c4:	f04f 32ff 	mov.w	r2, #4294967295
   130c8:	f04f 33ff 	mov.w	r3, #4294967295
   130cc:	4606      	mov	r6, r0
   130ce:	4817      	ldr	r0, [pc, #92]	; (1312c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   130d0:	4d17      	ldr	r5, [pc, #92]	; (13130 <bt_hci_cmd_create+0x70>)
{
   130d2:	460f      	mov	r7, r1
   130d4:	f010 fab9 	bl	2364a <net_buf_alloc_fixed>
   130d8:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   130da:	f100 0a0c 	add.w	sl, r0, #12
   130de:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   130e0:	f04f 0800 	mov.w	r8, #0
   130e4:	4650      	mov	r0, sl
   130e6:	f010 fb12 	bl	2370e <net_buf_simple_reserve>
   130ea:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   130ee:	4620      	mov	r0, r4
   130f0:	f005 f9fe 	bl	184f0 <net_buf_id>
   130f4:	f04f 090c 	mov.w	r9, #12
   130f8:	fb09 5000 	mla	r0, r9, r0, r5
   130fc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   130fe:	4620      	mov	r0, r4
   13100:	f005 f9f6 	bl	184f0 <net_buf_id>
   13104:	fb09 5000 	mla	r0, r9, r0, r5
   13108:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1310c:	4620      	mov	r0, r4
   1310e:	f005 f9ef 	bl	184f0 <net_buf_id>
   13112:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   13116:	2103      	movs	r1, #3
   13118:	4650      	mov	r0, sl
   1311a:	f8c5 8004 	str.w	r8, [r5, #4]
   1311e:	f010 fafa 	bl	23716 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   13122:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   13124:	7087      	strb	r7, [r0, #2]
}
   13126:	4620      	mov	r0, r4
   13128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1312c:	200008fc 	.word	0x200008fc
   13130:	20002b70 	.word	0x20002b70

00013134 <bt_hci_cmd_send_sync>:
{
   13134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13138:	4607      	mov	r7, r0
   1313a:	b086      	sub	sp, #24
   1313c:	4615      	mov	r5, r2
	if (!buf) {
   1313e:	460c      	mov	r4, r1
   13140:	b921      	cbnz	r1, 1314c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   13142:	f7ff ffbd 	bl	130c0 <bt_hci_cmd_create>
		if (!buf) {
   13146:	4604      	mov	r4, r0
   13148:	2800      	cmp	r0, #0
   1314a:	d04b      	beq.n	131e4 <bt_hci_cmd_send_sync+0xb0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1314c:	2201      	movs	r2, #1
   1314e:	2100      	movs	r1, #0
   13150:	4668      	mov	r0, sp
   13152:	f010 ffda 	bl	2410a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13156:	4620      	mov	r0, r4
   13158:	f005 f9ca 	bl	184f0 <net_buf_id>
   1315c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 131ec <bt_hci_cmd_send_sync+0xb8>
   13160:	230c      	movs	r3, #12
   13162:	fb03 8000 	mla	r0, r3, r0, r8
   13166:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1316a:	4620      	mov	r0, r4
   1316c:	f010 faa3 	bl	236b6 <net_buf_ref>
   13170:	4601      	mov	r1, r0
   13172:	481f      	ldr	r0, [pc, #124]	; (131f0 <bt_hci_cmd_send_sync+0xbc>)
   13174:	f010 fa9d 	bl	236b2 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13178:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1317c:	2300      	movs	r3, #0
   1317e:	4668      	mov	r0, sp
   13180:	f008 f9e0 	bl	1b544 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   13184:	4606      	mov	r6, r0
   13186:	b188      	cbz	r0, 131ac <bt_hci_cmd_send_sync+0x78>
   13188:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   1318c:	4a19      	ldr	r2, [pc, #100]	; (131f4 <bt_hci_cmd_send_sync+0xc0>)
   1318e:	491a      	ldr	r1, [pc, #104]	; (131f8 <bt_hci_cmd_send_sync+0xc4>)
   13190:	481a      	ldr	r0, [pc, #104]	; (131fc <bt_hci_cmd_send_sync+0xc8>)
   13192:	f00c fc24 	bl	1f9de <assert_print>
   13196:	481a      	ldr	r0, [pc, #104]	; (13200 <bt_hci_cmd_send_sync+0xcc>)
   13198:	4632      	mov	r2, r6
   1319a:	4639      	mov	r1, r7
   1319c:	f00c fc1f 	bl	1f9de <assert_print>
   131a0:	4040      	eors	r0, r0
   131a2:	f380 8811 	msr	BASEPRI, r0
   131a6:	f04f 0003 	mov.w	r0, #3
   131aa:	df02      	svc	2
	status = cmd(buf)->status;
   131ac:	4620      	mov	r0, r4
   131ae:	f005 f99f 	bl	184f0 <net_buf_id>
   131b2:	230c      	movs	r3, #12
   131b4:	4358      	muls	r0, r3
   131b6:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   131ba:	b15e      	cbz	r6, 131d4 <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
   131bc:	4620      	mov	r0, r4
   131be:	f005 fa51 	bl	18664 <net_buf_unref>
			return -ECONNREFUSED;
   131c2:	2e09      	cmp	r6, #9
   131c4:	bf14      	ite	ne
   131c6:	f06f 0004 	mvnne.w	r0, #4
   131ca:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   131ce:	b006      	add	sp, #24
   131d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   131d4:	b115      	cbz	r5, 131dc <bt_hci_cmd_send_sync+0xa8>
		*rsp = buf;
   131d6:	602c      	str	r4, [r5, #0]
	return 0;
   131d8:	2000      	movs	r0, #0
   131da:	e7f8      	b.n	131ce <bt_hci_cmd_send_sync+0x9a>
		net_buf_unref(buf);
   131dc:	4620      	mov	r0, r4
   131de:	f005 fa41 	bl	18664 <net_buf_unref>
   131e2:	e7f9      	b.n	131d8 <bt_hci_cmd_send_sync+0xa4>
			return -ENOBUFS;
   131e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   131e8:	e7f1      	b.n	131ce <bt_hci_cmd_send_sync+0x9a>
   131ea:	bf00      	nop
   131ec:	20002b70 	.word	0x20002b70
   131f0:	200004cc 	.word	0x200004cc
   131f4:	00025a2b 	.word	0x00025a2b
   131f8:	00025ac3 	.word	0x00025ac3
   131fc:	00025a78 	.word	0x00025a78
   13200:	00025acc 	.word	0x00025acc

00013204 <bt_hci_le_rand>:
{
   13204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   13206:	4b14      	ldr	r3, [pc, #80]	; (13258 <bt_hci_le_rand+0x54>)
   13208:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   1320c:	2b00      	cmp	r3, #0
{
   1320e:	4605      	mov	r5, r0
   13210:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   13212:	da1d      	bge.n	13250 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   13214:	b914      	cbnz	r4, 1321c <bt_hci_le_rand+0x18>
	return 0;
   13216:	4620      	mov	r0, r4
}
   13218:	b003      	add	sp, #12
   1321a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   1321c:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1321e:	aa01      	add	r2, sp, #4
   13220:	f04f 0100 	mov.w	r1, #0
   13224:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   13228:	4626      	mov	r6, r4
   1322a:	bf28      	it	cs
   1322c:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1322e:	f7ff ff81 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   13232:	2800      	cmp	r0, #0
   13234:	d1f0      	bne.n	13218 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   13236:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   13238:	68f9      	ldr	r1, [r7, #12]
   1323a:	4632      	mov	r2, r6
   1323c:	3101      	adds	r1, #1
   1323e:	4628      	mov	r0, r5
   13240:	f00c fe5b 	bl	1fefa <memcpy>
		net_buf_unref(rsp);
   13244:	4638      	mov	r0, r7
   13246:	f005 fa0d 	bl	18664 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1324a:	4435      	add	r5, r6
		len -= count;
   1324c:	1ba4      	subs	r4, r4, r6
   1324e:	e7e1      	b.n	13214 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   13250:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13254:	e7e0      	b.n	13218 <bt_hci_le_rand+0x14>
   13256:	bf00      	nop
   13258:	20000380 	.word	0x20000380

0001325c <bt_le_create_conn>:
{
   1325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13260:	b086      	sub	sp, #24
   13262:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   13264:	f10d 010b 	add.w	r1, sp, #11
   13268:	2000      	movs	r0, #0
   1326a:	f000 fe33 	bl	13ed4 <bt_id_set_create_conn_own_addr>
	if (err) {
   1326e:	4605      	mov	r5, r0
   13270:	2800      	cmp	r0, #0
   13272:	d149      	bne.n	13308 <bt_le_create_conn+0xac>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   13274:	2119      	movs	r1, #25
   13276:	f242 000d 	movw	r0, #8205	; 0x200d
   1327a:	f7ff ff21 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   1327e:	4607      	mov	r7, r0
   13280:	2800      	cmp	r0, #0
   13282:	d045      	beq.n	13310 <bt_le_create_conn+0xb4>
   13284:	2119      	movs	r1, #25
   13286:	300c      	adds	r0, #12
   13288:	f010 fa45 	bl	23716 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   1328c:	4629      	mov	r1, r5
   1328e:	4604      	mov	r4, r0
   13290:	2219      	movs	r2, #25
   13292:	f00c fe3d 	bl	1ff10 <memset>
		if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13296:	4d20      	ldr	r5, [pc, #128]	; (13318 <bt_le_create_conn+0xbc>)
	cp->own_addr_type = own_addr_type;
   13298:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1329c:	7323      	strb	r3, [r4, #12]
		if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1329e:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
   132a2:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   132a6:	429a      	cmp	r2, r3
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   132a8:	bf94      	ite	ls
   132aa:	f106 0188 	addls.w	r1, r6, #136	; 0x88
			peer_addr = &conn->le.resp_addr;
   132ae:	f106 0196 	addhi.w	r1, r6, #150	; 0x96
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   132b2:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   132b4:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   132b8:	f00c ff08 	bl	200cc <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   132bc:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   132c0:	89ab      	ldrh	r3, [r5, #12]
   132c2:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   132c4:	89eb      	ldrh	r3, [r5, #14]
   132c6:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   132c8:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
   132cc:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   132d0:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
   132d4:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   132d8:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
   132dc:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   132e0:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
   132e4:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   132e8:	2301      	movs	r3, #1
   132ea:	9300      	str	r3, [sp, #0]
   132ec:	230c      	movs	r3, #12
   132ee:	eb0d 0103 	add.w	r1, sp, r3
   132f2:	4a0a      	ldr	r2, [pc, #40]	; (1331c <bt_le_create_conn+0xc0>)
   132f4:	4638      	mov	r0, r7
   132f6:	f7ff fed1 	bl	1309c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   132fa:	4642      	mov	r2, r8
   132fc:	4639      	mov	r1, r7
   132fe:	f242 000d 	movw	r0, #8205	; 0x200d
   13302:	f7ff ff17 	bl	13134 <bt_hci_cmd_send_sync>
   13306:	4605      	mov	r5, r0
}
   13308:	4628      	mov	r0, r5
   1330a:	b006      	add	sp, #24
   1330c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   13310:	f06f 0568 	mvn.w	r5, #104	; 0x68
   13314:	e7f8      	b.n	13308 <bt_le_create_conn+0xac>
   13316:	bf00      	nop
   13318:	20000380 	.word	0x20000380
   1331c:	20000454 	.word	0x20000454

00013320 <bt_le_create_conn_cancel>:
{
   13320:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   13322:	2100      	movs	r1, #0
{
   13324:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   13326:	f242 000e 	movw	r0, #8206	; 0x200e
   1332a:	f7ff fec9 	bl	130c0 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   1332e:	2500      	movs	r5, #0
   13330:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   13332:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   13334:	eb0d 0103 	add.w	r1, sp, r3
   13338:	4a05      	ldr	r2, [pc, #20]	; (13350 <bt_le_create_conn_cancel+0x30>)
   1333a:	9500      	str	r5, [sp, #0]
   1333c:	f7ff feae 	bl	1309c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   13340:	462a      	mov	r2, r5
   13342:	4621      	mov	r1, r4
   13344:	f242 000e 	movw	r0, #8206	; 0x200e
   13348:	f7ff fef4 	bl	13134 <bt_hci_cmd_send_sync>
}
   1334c:	b007      	add	sp, #28
   1334e:	bd30      	pop	{r4, r5, pc}
   13350:	20000454 	.word	0x20000454

00013354 <bt_hci_le_enh_conn_complete>:
{
   13354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (disconnected_handles[i] == handle) {
   13358:	4b77      	ldr	r3, [pc, #476]	; (13538 <bt_hci_le_enh_conn_complete+0x1e4>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1335a:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   1335e:	8819      	ldrh	r1, [r3, #0]
{
   13360:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   13362:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   13366:	4291      	cmp	r1, r2
   13368:	f04f 0700 	mov.w	r7, #0
{
   1336c:	b088      	sub	sp, #32
			disconnected_handles[i] = 0;
   1336e:	bf04      	itt	eq
   13370:	801f      	strheq	r7, [r3, #0]
			return true;
   13372:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   13374:	f000 fb7e 	bl	13a74 <bt_id_pending_keys_update>
	if (evt->status) {
   13378:	782e      	ldrb	r6, [r5, #0]
   1337a:	b306      	cbz	r6, 133be <bt_hci_le_enh_conn_complete+0x6a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1337c:	2e02      	cmp	r6, #2
   1337e:	d11b      	bne.n	133b8 <bt_hci_le_enh_conn_complete+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   13380:	2100      	movs	r1, #0
   13382:	2206      	movs	r2, #6
   13384:	4608      	mov	r0, r1
   13386:	f001 fd65 	bl	14e54 <bt_conn_lookup_state_le>
	if (!conn) {
   1338a:	4604      	mov	r4, r0
   1338c:	b188      	cbz	r0, 133b2 <bt_hci_le_enh_conn_complete+0x5e>
	conn->err = err;
   1338e:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13390:	2100      	movs	r1, #0
   13392:	f001 fb31 	bl	149f8 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13396:	f3bf 8f5b 	dmb	ish
   1339a:	6863      	ldr	r3, [r4, #4]
   1339c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   133a0:	07dd      	lsls	r5, r3, #31
   133a2:	d503      	bpl.n	133ac <bt_hci_le_enh_conn_complete+0x58>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   133a4:	4631      	mov	r1, r6
   133a6:	4620      	mov	r0, r4
   133a8:	f001 fb26 	bl	149f8 <bt_conn_set_state>
	bt_conn_unref(conn);
   133ac:	4620      	mov	r0, r4
   133ae:	f00d fb54 	bl	20a5a <bt_conn_unref>
			bt_le_scan_update(false);
   133b2:	2000      	movs	r0, #0
   133b4:	f000 fe60 	bl	14078 <bt_le_scan_update>
}
   133b8:	b008      	add	sp, #32
   133ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   133be:	78eb      	ldrb	r3, [r5, #3]
   133c0:	2b01      	cmp	r3, #1
   133c2:	bf08      	it	eq
   133c4:	4b5d      	ldreq	r3, [pc, #372]	; (1353c <bt_hci_le_enh_conn_complete+0x1e8>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   133c6:	f105 0404 	add.w	r4, r5, #4
   133ca:	4620      	mov	r0, r4
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   133cc:	bf08      	it	eq
   133ce:	f893 606f 	ldrbeq.w	r6, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   133d2:	f00c fe4c 	bl	2006e <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   133d6:	4621      	mov	r1, r4
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   133d8:	b198      	cbz	r0, 13402 <bt_hci_le_enh_conn_complete+0xae>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   133da:	a806      	add	r0, sp, #24
   133dc:	f00c fe3d 	bl	2005a <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   133e0:	2206      	movs	r2, #6
   133e2:	f105 0111 	add.w	r1, r5, #17
   133e6:	f10d 0011 	add.w	r0, sp, #17
   133ea:	f00c fd86 	bl	1fefa <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   133ee:	2301      	movs	r3, #1
   133f0:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   133f4:	78e8      	ldrb	r0, [r5, #3]
   133f6:	b180      	cbz	r0, 1341a <bt_hci_le_enh_conn_complete+0xc6>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   133f8:	211f      	movs	r1, #31
   133fa:	4640      	mov	r0, r8
   133fc:	f00c ffc5 	bl	2038a <bt_hci_disconnect>
		return;
   13400:	e7da      	b.n	133b8 <bt_hci_le_enh_conn_complete+0x64>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   13402:	4630      	mov	r0, r6
   13404:	f00d f9f1 	bl	207ea <bt_lookup_id_addr>
   13408:	4601      	mov	r1, r0
   1340a:	a806      	add	r0, sp, #24
   1340c:	f00c fe5e 	bl	200cc <bt_addr_le_copy>
		bt_addr_le_copy(peer_addr, &evt->peer_addr);
   13410:	4621      	mov	r1, r4
   13412:	a804      	add	r0, sp, #16
   13414:	f00c fe5a 	bl	200cc <bt_addr_le_copy>
   13418:	e7ec      	b.n	133f4 <bt_hci_le_enh_conn_complete+0xa0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1341a:	2206      	movs	r2, #6
   1341c:	a906      	add	r1, sp, #24
   1341e:	f001 fd19 	bl	14e54 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13422:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   13424:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13426:	b923      	cbnz	r3, 13432 <bt_hci_le_enh_conn_complete+0xde>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13428:	4845      	ldr	r0, [pc, #276]	; (13540 <bt_hci_le_enh_conn_complete+0x1ec>)
   1342a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1342e:	f00c ff0b 	bl	20248 <atomic_and.isra.0>
	if (!conn) {
   13432:	2c00      	cmp	r4, #0
   13434:	d0e0      	beq.n	133f8 <bt_hci_le_enh_conn_complete+0xa4>
	conn->handle = sys_le16_to_cpu(evt->handle);
   13436:	4620      	mov	r0, r4
   13438:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   1343c:	f820 3b88 	strh.w	r3, [r0], #136
	bt_addr_le_copy(&conn->le.dst, id_addr);
   13440:	a906      	add	r1, sp, #24
   13442:	f00c fe43 	bl	200cc <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   13446:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1344a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1344e:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   13452:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13456:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1345a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1345e:	78eb      	ldrb	r3, [r5, #3]
   13460:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   13462:	2200      	movs	r2, #0
   13464:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13466:	b96b      	cbnz	r3, 13484 <bt_hci_le_enh_conn_complete+0x130>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   13468:	a904      	add	r1, sp, #16
   1346a:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1346e:	f00c fe2d 	bl	200cc <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   13472:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   13474:	4b31      	ldr	r3, [pc, #196]	; (1353c <bt_hci_le_enh_conn_complete+0x1e8>)
					&bt_dev.id_addr[conn->id]);
   13476:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   1347a:	4419      	add	r1, r3
   1347c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   13480:	f00c fe24 	bl	200cc <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   13484:	2107      	movs	r1, #7
   13486:	4620      	mov	r0, r4
   13488:	f001 fab6 	bl	149f8 <bt_conn_set_state>
	if (is_disconnected) {
   1348c:	b11f      	cbz	r7, 13496 <bt_hci_le_enh_conn_complete+0x142>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1348e:	2101      	movs	r1, #1
   13490:	4620      	mov	r0, r4
   13492:	f001 fab1 	bl	149f8 <bt_conn_set_state>
	bt_conn_connected(conn);
   13496:	4620      	mov	r0, r4
   13498:	f00d fae2 	bl	20a60 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1349c:	7b63      	ldrb	r3, [r4, #13]
   1349e:	2b07      	cmp	r3, #7
   134a0:	d142      	bne.n	13528 <bt_hci_le_enh_conn_complete+0x1d4>
   134a2:	f3bf 8f5b 	dmb	ish
   134a6:	6863      	ldr	r3, [r4, #4]
   134a8:	4e24      	ldr	r6, [pc, #144]	; (1353c <bt_hci_le_enh_conn_complete+0x1e8>)
   134aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   134ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   134b2:	d118      	bne.n	134e6 <bt_hci_le_enh_conn_complete+0x192>
   134b4:	78e3      	ldrb	r3, [r4, #3]
   134b6:	b11b      	cbz	r3, 134c0 <bt_hci_le_enh_conn_complete+0x16c>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   134b8:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
   134bc:	0718      	lsls	r0, r3, #28
   134be:	d512      	bpl.n	134e6 <bt_hci_le_enh_conn_complete+0x192>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   134c0:	2102      	movs	r1, #2
   134c2:	f242 0016 	movw	r0, #8214	; 0x2016
   134c6:	f7ff fdfb 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   134ca:	4605      	mov	r5, r0
   134cc:	b158      	cbz	r0, 134e6 <bt_hci_le_enh_conn_complete+0x192>
   134ce:	2102      	movs	r1, #2
   134d0:	300c      	adds	r0, #12
   134d2:	f010 f920 	bl	23716 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   134d6:	8823      	ldrh	r3, [r4, #0]
   134d8:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   134da:	2200      	movs	r2, #0
   134dc:	4629      	mov	r1, r5
   134de:	f242 0016 	movw	r0, #8214	; 0x2016
   134e2:	f7ff fe27 	bl	13134 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   134e6:	f896 30d9 	ldrb.w	r3, [r6, #217]	; 0xd9
   134ea:	07d9      	lsls	r1, r3, #31
   134ec:	d506      	bpl.n	134fc <bt_hci_le_enh_conn_complete+0x1a8>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   134ee:	2100      	movs	r1, #0
   134f0:	2302      	movs	r3, #2
   134f2:	9100      	str	r1, [sp, #0]
   134f4:	461a      	mov	r2, r3
   134f6:	4620      	mov	r0, r4
   134f8:	f00c ff80 	bl	203fc <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   134fc:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
   13500:	069a      	lsls	r2, r3, #26
   13502:	d511      	bpl.n	13528 <bt_hci_le_enh_conn_complete+0x1d4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   13504:	f8d6 3164 	ldr.w	r3, [r6, #356]	; 0x164
   13508:	689b      	ldr	r3, [r3, #8]
   1350a:	079b      	lsls	r3, r3, #30
   1350c:	d50c      	bpl.n	13528 <bt_hci_le_enh_conn_complete+0x1d4>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1350e:	f10d 010e 	add.w	r1, sp, #14
   13512:	a803      	add	r0, sp, #12
   13514:	f00c ff21 	bl	2035a <hci_le_read_max_data_len>
			if (!err) {
   13518:	b930      	cbnz	r0, 13528 <bt_hci_le_enh_conn_complete+0x1d4>
				err = bt_le_set_data_len(conn,
   1351a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1351e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   13522:	4620      	mov	r0, r4
   13524:	f00c ff4c 	bl	203c0 <bt_le_set_data_len>
	bt_conn_unref(conn);
   13528:	4620      	mov	r0, r4
   1352a:	f00d fa96 	bl	20a5a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1352e:	78e3      	ldrb	r3, [r4, #3]
   13530:	2b00      	cmp	r3, #0
   13532:	f47f af41 	bne.w	133b8 <bt_hci_le_enh_conn_complete+0x64>
   13536:	e73c      	b.n	133b2 <bt_hci_le_enh_conn_complete+0x5e>
   13538:	20003954 	.word	0x20003954
   1353c:	20000380 	.word	0x20000380
   13540:	20000454 	.word	0x20000454

00013544 <le_legacy_conn_complete>:
{
   13544:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   13546:	68c1      	ldr	r1, [r0, #12]
   13548:	4c17      	ldr	r4, [pc, #92]	; (135a8 <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   1354a:	780b      	ldrb	r3, [r1, #0]
{
   1354c:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1354e:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   13550:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   13554:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   13558:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1355c:	78cb      	ldrb	r3, [r1, #3]
   1355e:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   13562:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   13566:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1356a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1356e:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   13572:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   13576:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1357a:	7c4b      	ldrb	r3, [r1, #17]
   1357c:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13580:	3104      	adds	r1, #4
   13582:	f00c fda3 	bl	200cc <bt_addr_le_copy>
   13586:	4621      	mov	r1, r4
   13588:	2206      	movs	r2, #6
   1358a:	f10d 000b 	add.w	r0, sp, #11
   1358e:	f00c fcb4 	bl	1fefa <memcpy>
   13592:	2206      	movs	r2, #6
   13594:	4621      	mov	r1, r4
   13596:	f10d 0011 	add.w	r0, sp, #17
   1359a:	f00c fcae 	bl	1fefa <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1359e:	4668      	mov	r0, sp
   135a0:	f7ff fed8 	bl	13354 <bt_hci_le_enh_conn_complete>
}
   135a4:	b008      	add	sp, #32
   135a6:	bd10      	pop	{r4, pc}
   135a8:	000259fc 	.word	0x000259fc

000135ac <bt_security_err_get>:
	switch (hci_err) {
   135ac:	2829      	cmp	r0, #41	; 0x29
   135ae:	bf9a      	itte	ls
   135b0:	4b01      	ldrls	r3, [pc, #4]	; (135b8 <bt_security_err_get+0xc>)
   135b2:	5c18      	ldrbls	r0, [r3, r0]
{
   135b4:	2009      	movhi	r0, #9
}
   135b6:	4770      	bx	lr
   135b8:	00025b24 	.word	0x00025b24

000135bc <bt_send>:
	return bt_dev.drv->send(buf);
   135bc:	4b02      	ldr	r3, [pc, #8]	; (135c8 <bt_send+0xc>)
   135be:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   135c2:	695b      	ldr	r3, [r3, #20]
   135c4:	4718      	bx	r3
   135c6:	bf00      	nop
   135c8:	20000380 	.word	0x20000380

000135cc <bt_hci_cmd_send>:
{
   135cc:	b538      	push	{r3, r4, r5, lr}
   135ce:	4605      	mov	r5, r0
	if (!buf) {
   135d0:	460c      	mov	r4, r1
   135d2:	b919      	cbnz	r1, 135dc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   135d4:	f7ff fd74 	bl	130c0 <bt_hci_cmd_create>
		if (!buf) {
   135d8:	4604      	mov	r4, r0
   135da:	b198      	cbz	r0, 13604 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   135dc:	f640 4335 	movw	r3, #3125	; 0xc35
   135e0:	429d      	cmp	r5, r3
   135e2:	d109      	bne.n	135f8 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   135e4:	4620      	mov	r0, r4
   135e6:	f7ff ffe9 	bl	135bc <bt_send>
		if (err) {
   135ea:	4605      	mov	r5, r0
   135ec:	b140      	cbz	r0, 13600 <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
   135ee:	4620      	mov	r0, r4
   135f0:	f005 f838 	bl	18664 <net_buf_unref>
}
   135f4:	4628      	mov	r0, r5
   135f6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   135f8:	4804      	ldr	r0, [pc, #16]	; (1360c <bt_hci_cmd_send+0x40>)
   135fa:	4621      	mov	r1, r4
   135fc:	f010 f859 	bl	236b2 <net_buf_put>
	return 0;
   13600:	2500      	movs	r5, #0
   13602:	e7f7      	b.n	135f4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   13604:	f06f 0568 	mvn.w	r5, #104	; 0x68
   13608:	e7f4      	b.n	135f4 <bt_hci_cmd_send+0x28>
   1360a:	bf00      	nop
   1360c:	200004cc 	.word	0x200004cc

00013610 <hci_tx_thread>:
{
   13610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   13614:	4f3c      	ldr	r7, [pc, #240]	; (13708 <hci_tx_thread+0xf8>)
		BT_ASSERT(err == 0);
   13616:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1370c <hci_tx_thread+0xfc>
			ev_count += bt_conn_prepare_events(&events[1]);
   1361a:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1361e:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13620:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   13622:	f36f 3394 	bfc	r3, #14, #7
   13626:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13628:	f001 f996 	bl	14958 <bt_conn_prepare_events>
   1362c:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1362e:	4836      	ldr	r0, [pc, #216]	; (13708 <hci_tx_thread+0xf8>)
   13630:	f04f 32ff 	mov.w	r2, #4294967295
   13634:	f04f 33ff 	mov.w	r3, #4294967295
   13638:	4629      	mov	r1, r5
   1363a:	f008 fe29 	bl	1c290 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1363e:	b160      	cbz	r0, 1365a <hci_tx_thread+0x4a>
   13640:	4933      	ldr	r1, [pc, #204]	; (13710 <hci_tx_thread+0x100>)
   13642:	4834      	ldr	r0, [pc, #208]	; (13714 <hci_tx_thread+0x104>)
   13644:	f640 23c8 	movw	r3, #2760	; 0xac8
   13648:	4642      	mov	r2, r8
   1364a:	f00c f9c8 	bl	1f9de <assert_print>
   1364e:	4040      	eors	r0, r0
   13650:	f380 8811 	msr	BASEPRI, r0
   13654:	f04f 0003 	mov.w	r0, #3
   13658:	df02      	svc	2
{
   1365a:	4e2b      	ldr	r6, [pc, #172]	; (13708 <hci_tx_thread+0xf8>)
	for (; count; ev++, count--) {
   1365c:	b915      	cbnz	r5, 13664 <hci_tx_thread+0x54>
	z_impl_k_yield();
   1365e:	f008 fba9 	bl	1bdb4 <z_impl_k_yield>
	while (1) {
   13662:	e7dc      	b.n	1361e <hci_tx_thread+0xe>
		switch (ev->state) {
   13664:	68f3      	ldr	r3, [r6, #12]
   13666:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1366a:	2b04      	cmp	r3, #4
   1366c:	d142      	bne.n	136f4 <hci_tx_thread+0xe4>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1366e:	7b33      	ldrb	r3, [r6, #12]
   13670:	2b00      	cmp	r3, #0
   13672:	d142      	bne.n	136fa <hci_tx_thread+0xea>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   13674:	4828      	ldr	r0, [pc, #160]	; (13718 <hci_tx_thread+0x108>)
   13676:	2200      	movs	r2, #0
   13678:	2300      	movs	r3, #0
   1367a:	f00f ffeb 	bl	23654 <net_buf_get>
	BT_ASSERT(buf);
   1367e:	4604      	mov	r4, r0
   13680:	b960      	cbnz	r0, 1369c <hci_tx_thread+0x8c>
   13682:	4926      	ldr	r1, [pc, #152]	; (1371c <hci_tx_thread+0x10c>)
   13684:	4823      	ldr	r0, [pc, #140]	; (13714 <hci_tx_thread+0x104>)
   13686:	f640 235a 	movw	r3, #2650	; 0xa5a
   1368a:	4642      	mov	r2, r8
   1368c:	f00c f9a7 	bl	1f9de <assert_print>
   13690:	4040      	eors	r0, r0
   13692:	f380 8811 	msr	BASEPRI, r0
   13696:	f04f 0003 	mov.w	r0, #3
   1369a:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   1369c:	f8df a080 	ldr.w	sl, [pc, #128]	; 13720 <hci_tx_thread+0x110>
	return z_impl_k_sem_take(sem, timeout);
   136a0:	4820      	ldr	r0, [pc, #128]	; (13724 <hci_tx_thread+0x114>)
   136a2:	f04f 32ff 	mov.w	r2, #4294967295
   136a6:	f04f 33ff 	mov.w	r3, #4294967295
   136aa:	f007 ff4b 	bl	1b544 <z_impl_k_sem_take>
   136ae:	f8da 0140 	ldr.w	r0, [sl, #320]	; 0x140
   136b2:	b120      	cbz	r0, 136be <hci_tx_thread+0xae>
		net_buf_unref(bt_dev.sent_cmd);
   136b4:	f004 ffd6 	bl	18664 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   136b8:	2300      	movs	r3, #0
   136ba:	f8ca 3140 	str.w	r3, [sl, #320]	; 0x140
	bt_dev.sent_cmd = net_buf_ref(buf);
   136be:	4620      	mov	r0, r4
   136c0:	f00f fff9 	bl	236b6 <net_buf_ref>
   136c4:	f8ca 0140 	str.w	r0, [sl, #320]	; 0x140
	err = bt_send(buf);
   136c8:	4620      	mov	r0, r4
   136ca:	f7ff ff77 	bl	135bc <bt_send>
	if (err) {
   136ce:	b188      	cbz	r0, 136f4 <hci_tx_thread+0xe4>
	z_impl_k_sem_give(sem);
   136d0:	4814      	ldr	r0, [pc, #80]	; (13724 <hci_tx_thread+0x114>)
   136d2:	f007 ff11 	bl	1b4f8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   136d6:	4620      	mov	r0, r4
   136d8:	f004 ff0a 	bl	184f0 <net_buf_id>
   136dc:	4b12      	ldr	r3, [pc, #72]	; (13728 <hci_tx_thread+0x118>)
   136de:	220c      	movs	r2, #12
   136e0:	fb02 3000 	mla	r0, r2, r0, r3
   136e4:	211f      	movs	r1, #31
   136e6:	8840      	ldrh	r0, [r0, #2]
   136e8:	4622      	mov	r2, r4
   136ea:	f7ff fc4b 	bl	12f84 <hci_cmd_done>
		net_buf_unref(buf);
   136ee:	4620      	mov	r0, r4
   136f0:	f004 ffb8 	bl	18664 <net_buf_unref>
	for (; count; ev++, count--) {
   136f4:	3614      	adds	r6, #20
   136f6:	3d01      	subs	r5, #1
   136f8:	e7b0      	b.n	1365c <hci_tx_thread+0x4c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   136fa:	2b01      	cmp	r3, #1
   136fc:	d1fa      	bne.n	136f4 <hci_tx_thread+0xe4>
					conn = CONTAINER_OF(ev->fifo,
   136fe:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   13700:	3838      	subs	r0, #56	; 0x38
   13702:	f001 fd39 	bl	15178 <bt_conn_process_tx>
   13706:	e7f5      	b.n	136f4 <hci_tx_thread+0xe4>
   13708:	20000514 	.word	0x20000514
   1370c:	00025a2b 	.word	0x00025a2b
   13710:	00025ac3 	.word	0x00025ac3
   13714:	00025a78 	.word	0x00025a78
   13718:	200004cc 	.word	0x200004cc
   1371c:	00025cac 	.word	0x00025cac
   13720:	20000380 	.word	0x20000380
   13724:	200004a8 	.word	0x200004a8
   13728:	20002b70 	.word	0x20002b70

0001372c <hci_event_prio>:
{
   1372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13730:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   13732:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   13736:	4630      	mov	r0, r6
   13738:	f010 f836 	bl	237a8 <net_buf_simple_headroom>
	state->len = buf->len;
   1373c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13740:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   13744:	4605      	mov	r5, r0
   13746:	d80c      	bhi.n	13762 <hci_event_prio+0x36>
   13748:	4a1c      	ldr	r2, [pc, #112]	; (137bc <hci_event_prio+0x90>)
   1374a:	491d      	ldr	r1, [pc, #116]	; (137c0 <hci_event_prio+0x94>)
   1374c:	481d      	ldr	r0, [pc, #116]	; (137c4 <hci_event_prio+0x98>)
   1374e:	f640 636f 	movw	r3, #3695	; 0xe6f
   13752:	f00c f944 	bl	1f9de <assert_print>
   13756:	4040      	eors	r0, r0
   13758:	f380 8811 	msr	BASEPRI, r0
   1375c:	f04f 0003 	mov.w	r0, #3
   13760:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13762:	4630      	mov	r0, r6
   13764:	2102      	movs	r1, #2
   13766:	f010 f807 	bl	23778 <net_buf_simple_pull_mem>
   1376a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1376c:	7800      	ldrb	r0, [r0, #0]
   1376e:	f00c fc82 	bl	20076 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13772:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13774:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13776:	d40c      	bmi.n	13792 <hci_event_prio+0x66>
   13778:	4a10      	ldr	r2, [pc, #64]	; (137bc <hci_event_prio+0x90>)
   1377a:	4913      	ldr	r1, [pc, #76]	; (137c8 <hci_event_prio+0x9c>)
   1377c:	4811      	ldr	r0, [pc, #68]	; (137c4 <hci_event_prio+0x98>)
   1377e:	f640 6373 	movw	r3, #3699	; 0xe73
   13782:	f00c f92c 	bl	1f9de <assert_print>
   13786:	4040      	eors	r0, r0
   13788:	f380 8811 	msr	BASEPRI, r0
   1378c:	f04f 0003 	mov.w	r0, #3
   13790:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   13792:	2305      	movs	r3, #5
   13794:	4a0d      	ldr	r2, [pc, #52]	; (137cc <hci_event_prio+0xa0>)
   13796:	7838      	ldrb	r0, [r7, #0]
   13798:	4621      	mov	r1, r4
   1379a:	f00c fd3e 	bl	2021a <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1379e:	07b3      	lsls	r3, r6, #30
   137a0:	d507      	bpl.n	137b2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   137a2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   137a4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   137a8:	fa13 f585 	uxtah	r5, r3, r5
   137ac:	60e5      	str	r5, [r4, #12]
}
   137ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   137b2:	4620      	mov	r0, r4
}
   137b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   137b8:	f004 bf54 	b.w	18664 <net_buf_unref>
   137bc:	00025a2b 	.word	0x00025a2b
   137c0:	00025a5f 	.word	0x00025a5f
   137c4:	00025a78 	.word	0x00025a78
   137c8:	00025af8 	.word	0x00025af8
   137cc:	00024ed8 	.word	0x00024ed8

000137d0 <bt_recv>:
{
   137d0:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   137d2:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   137d4:	2b01      	cmp	r3, #1
{
   137d6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   137d8:	d00a      	beq.n	137f0 <bt_recv+0x20>
   137da:	2b03      	cmp	r3, #3
   137dc:	d116      	bne.n	1380c <bt_recv+0x3c>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   137de:	4621      	mov	r1, r4
   137e0:	480d      	ldr	r0, [pc, #52]	; (13818 <bt_recv+0x48>)
   137e2:	f00f ff39 	bl	23658 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   137e6:	490d      	ldr	r1, [pc, #52]	; (1381c <bt_recv+0x4c>)
   137e8:	480d      	ldr	r0, [pc, #52]	; (13820 <bt_recv+0x50>)
   137ea:	f010 fd3e 	bl	2426a <k_work_submit_to_queue>
}
   137ee:	e00b      	b.n	13808 <bt_recv+0x38>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   137f0:	68c3      	ldr	r3, [r0, #12]
   137f2:	7818      	ldrb	r0, [r3, #0]
   137f4:	f00c fc3f 	bl	20076 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   137f8:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   137fa:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   137fc:	d502      	bpl.n	13804 <bt_recv+0x34>
			hci_event_prio(buf);
   137fe:	4620      	mov	r0, r4
   13800:	f7ff ff94 	bl	1372c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13804:	07ab      	lsls	r3, r5, #30
   13806:	d4ea      	bmi.n	137de <bt_recv+0xe>
		return 0;
   13808:	2000      	movs	r0, #0
}
   1380a:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1380c:	f004 ff2a 	bl	18664 <net_buf_unref>
		return -EINVAL;
   13810:	f06f 0015 	mvn.w	r0, #21
   13814:	e7f9      	b.n	1380a <bt_recv+0x3a>
   13816:	bf00      	nop
   13818:	200004c4 	.word	0x200004c4
   1381c:	20000550 	.word	0x20000550
   13820:	200018e8 	.word	0x200018e8

00013824 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13824:	4a08      	ldr	r2, [pc, #32]	; (13848 <bt_hci_driver_register+0x24>)
{
   13826:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   13828:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   1382c:	b930      	cbnz	r0, 1383c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1382e:	68d9      	ldr	r1, [r3, #12]
   13830:	b139      	cbz	r1, 13842 <bt_hci_driver_register+0x1e>
   13832:	6959      	ldr	r1, [r3, #20]
   13834:	b129      	cbz	r1, 13842 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   13836:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   1383a:	4770      	bx	lr
		return -EALREADY;
   1383c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13840:	4770      	bx	lr
		return -EINVAL;
   13842:	f06f 0015 	mvn.w	r0, #21
}
   13846:	4770      	bx	lr
   13848:	20000380 	.word	0x20000380

0001384c <bt_finalize_init>:
{
   1384c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1384e:	4804      	ldr	r0, [pc, #16]	; (13860 <bt_finalize_init+0x14>)
   13850:	2104      	movs	r1, #4
   13852:	f00c fc7c 	bl	2014e <atomic_or>
}
   13856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   1385a:	2000      	movs	r0, #0
   1385c:	f000 bc0c 	b.w	14078 <bt_le_scan_update>
   13860:	20000454 	.word	0x20000454

00013864 <init_work>:
{
   13864:	b510      	push	{r4, lr}
	err = bt_init();
   13866:	f7fd fa1f 	bl	10ca8 <bt_init>
	if (ready_cb) {
   1386a:	4b03      	ldr	r3, [pc, #12]	; (13878 <init_work+0x14>)
   1386c:	681b      	ldr	r3, [r3, #0]
   1386e:	b113      	cbz	r3, 13876 <init_work+0x12>
}
   13870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   13874:	4718      	bx	r3
}
   13876:	bd10      	pop	{r4, pc}
   13878:	20002b88 	.word	0x20002b88

0001387c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1387c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   1387e:	4d2e      	ldr	r5, [pc, #184]	; (13938 <bt_enable+0xbc>)
   13880:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   13884:	b088      	sub	sp, #32
   13886:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   13888:	2b00      	cmp	r3, #0
   1388a:	d04f      	beq.n	1392c <bt_enable+0xb0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1388c:	f06f 0102 	mvn.w	r1, #2
   13890:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   13894:	f00c fcd8 	bl	20248 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13898:	2101      	movs	r1, #1
   1389a:	f00c fc58 	bl	2014e <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1389e:	ea10 0401 	ands.w	r4, r0, r1
   138a2:	d146      	bne.n	13932 <bt_enable+0xb6>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   138a4:	4b25      	ldr	r3, [pc, #148]	; (1393c <bt_enable+0xc0>)
   138a6:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   138a8:	460a      	mov	r2, r1
   138aa:	f505 7094 	add.w	r0, r5, #296	; 0x128
   138ae:	f010 fc2c 	bl	2410a <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   138b2:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
   138b6:	f010 fc03 	bl	240c0 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   138ba:	2200      	movs	r2, #0
   138bc:	2300      	movs	r3, #0
   138be:	e9cd 2306 	strd	r2, r3, [sp, #24]
   138c2:	f06f 0308 	mvn.w	r3, #8
   138c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   138ca:	e9cd 4400 	strd	r4, r4, [sp]
   138ce:	4b1c      	ldr	r3, [pc, #112]	; (13940 <bt_enable+0xc4>)
   138d0:	491c      	ldr	r1, [pc, #112]	; (13944 <bt_enable+0xc8>)
   138d2:	9404      	str	r4, [sp, #16]
   138d4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   138d8:	481b      	ldr	r0, [pc, #108]	; (13948 <bt_enable+0xcc>)
   138da:	f007 fc7f 	bl	1b1dc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   138de:	491b      	ldr	r1, [pc, #108]	; (1394c <bt_enable+0xd0>)
   138e0:	4819      	ldr	r0, [pc, #100]	; (13948 <bt_enable+0xcc>)
   138e2:	f010 fb60 	bl	23fa6 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   138e6:	481a      	ldr	r0, [pc, #104]	; (13950 <bt_enable+0xd4>)
   138e8:	f010 fcd0 	bl	2428c <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   138ec:	4919      	ldr	r1, [pc, #100]	; (13954 <bt_enable+0xd8>)
   138ee:	4818      	ldr	r0, [pc, #96]	; (13950 <bt_enable+0xd4>)
   138f0:	9400      	str	r4, [sp, #0]
   138f2:	f06f 0307 	mvn.w	r3, #7
   138f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   138fa:	f007 ff7f 	bl	1b7fc <k_work_queue_start>
   138fe:	4916      	ldr	r1, [pc, #88]	; (13958 <bt_enable+0xdc>)
   13900:	4813      	ldr	r0, [pc, #76]	; (13950 <bt_enable+0xd4>)
   13902:	f010 fb50 	bl	23fa6 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   13906:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1390a:	68db      	ldr	r3, [r3, #12]
   1390c:	4798      	blx	r3
	if (err) {
   1390e:	4604      	mov	r4, r0
   13910:	b948      	cbnz	r0, 13926 <bt_enable+0xaa>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   13912:	b926      	cbnz	r6, 1391e <bt_enable+0xa2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   13914:	b008      	add	sp, #32
   13916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   1391a:	f7fd b9c5 	b.w	10ca8 <bt_init>
	k_work_submit(&bt_dev.init);
   1391e:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   13922:	f007 ff65 	bl	1b7f0 <k_work_submit>
}
   13926:	4620      	mov	r0, r4
   13928:	b008      	add	sp, #32
   1392a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   1392c:	f06f 0412 	mvn.w	r4, #18
   13930:	e7f9      	b.n	13926 <bt_enable+0xaa>
		return -EALREADY;
   13932:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13936:	e7f6      	b.n	13926 <bt_enable+0xaa>
   13938:	20000380 	.word	0x20000380
   1393c:	20002b88 	.word	0x20002b88
   13940:	00013611 	.word	0x00013611
   13944:	20004040 	.word	0x20004040
   13948:	20001868 	.word	0x20001868
   1394c:	00025b11 	.word	0x00025b11
   13950:	200018e8 	.word	0x200018e8
   13954:	20004680 	.word	0x20004680
   13958:	00025b17 	.word	0x00025b17

0001395c <bt_is_ready>:
   1395c:	4b04      	ldr	r3, [pc, #16]	; (13970 <bt_is_ready+0x14>)
   1395e:	f3bf 8f5b 	dmb	ish
   13962:	6818      	ldr	r0, [r3, #0]
   13964:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   13968:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1396c:	4770      	bx	lr
   1396e:	bf00      	nop
   13970:	20000454 	.word	0x20000454

00013974 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13974:	4800      	ldr	r0, [pc, #0]	; (13978 <bt_get_name+0x4>)
   13976:	4770      	bx	lr
   13978:	00025b1d 	.word	0x00025b1d

0001397c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1397e:	4f0a      	ldr	r7, [pc, #40]	; (139a8 <id_find+0x2c>)
{
   13980:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   13982:	2500      	movs	r5, #0
   13984:	79fb      	ldrb	r3, [r7, #7]
   13986:	b2ec      	uxtb	r4, r5
   13988:	42a3      	cmp	r3, r4
   1398a:	d802      	bhi.n	13992 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1398c:	f06f 0001 	mvn.w	r0, #1
   13990:	e009      	b.n	139a6 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   13992:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   13996:	4439      	add	r1, r7
   13998:	4630      	mov	r0, r6
   1399a:	f00c fe9c 	bl	206d6 <bt_addr_le_eq>
   1399e:	3501      	adds	r5, #1
   139a0:	2800      	cmp	r0, #0
   139a2:	d0ef      	beq.n	13984 <id_find+0x8>
   139a4:	4620      	mov	r0, r4
}
   139a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   139a8:	20000380 	.word	0x20000380

000139ac <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   139ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   139ae:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   139b0:	460d      	mov	r5, r1
   139b2:	b171      	cbz	r1, 139d2 <id_create.constprop.0+0x26>
   139b4:	4912      	ldr	r1, [pc, #72]	; (13a00 <id_create.constprop.0+0x54>)
   139b6:	4628      	mov	r0, r5
   139b8:	f00c fe8d 	bl	206d6 <bt_addr_le_eq>
   139bc:	b948      	cbnz	r0, 139d2 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   139be:	4811      	ldr	r0, [pc, #68]	; (13a04 <id_create.constprop.0+0x58>)
   139c0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   139c4:	4629      	mov	r1, r5
   139c6:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   139c8:	f00c fe8d 	bl	206e6 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   139cc:	2000      	movs	r0, #0
}
   139ce:	b003      	add	sp, #12
   139d0:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   139d2:	4668      	mov	r0, sp
   139d4:	f00c fb33 	bl	2003e <bt_addr_le_create_static>
			if (err) {
   139d8:	2800      	cmp	r0, #0
   139da:	d1f8      	bne.n	139ce <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   139dc:	4668      	mov	r0, sp
   139de:	f7ff ffcd 	bl	1397c <id_find>
   139e2:	2800      	cmp	r0, #0
   139e4:	daf5      	bge.n	139d2 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   139e6:	4b07      	ldr	r3, [pc, #28]	; (13a04 <id_create.constprop.0+0x58>)
   139e8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   139ec:	441c      	add	r4, r3
   139ee:	4669      	mov	r1, sp
   139f0:	4620      	mov	r0, r4
   139f2:	f00c fe78 	bl	206e6 <bt_addr_le_copy>
		if (addr) {
   139f6:	2d00      	cmp	r5, #0
   139f8:	d0e8      	beq.n	139cc <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   139fa:	4621      	mov	r1, r4
   139fc:	4628      	mov	r0, r5
   139fe:	e7e3      	b.n	139c8 <id_create.constprop.0+0x1c>
   13a00:	000259ef 	.word	0x000259ef
   13a04:	20000380 	.word	0x20000380

00013a08 <atomic_get.constprop.0>:
   13a08:	4b03      	ldr	r3, [pc, #12]	; (13a18 <atomic_get.constprop.0+0x10>)
   13a0a:	f3bf 8f5b 	dmb	ish
   13a0e:	6818      	ldr	r0, [r3, #0]
   13a10:	f3bf 8f5b 	dmb	ish
}
   13a14:	4770      	bx	lr
   13a16:	bf00      	nop
   13a18:	20000454 	.word	0x20000454

00013a1c <set_random_address>:
{
   13a1c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   13a1e:	4913      	ldr	r1, [pc, #76]	; (13a6c <set_random_address+0x50>)
   13a20:	2206      	movs	r2, #6
   13a22:	4605      	mov	r5, r0
   13a24:	f00c fa42 	bl	1feac <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   13a28:	b1d8      	cbz	r0, 13a62 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13a2a:	2106      	movs	r1, #6
   13a2c:	f242 0005 	movw	r0, #8197	; 0x2005
   13a30:	f7ff fb46 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   13a34:	4604      	mov	r4, r0
   13a36:	b1b0      	cbz	r0, 13a66 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13a38:	2206      	movs	r2, #6
   13a3a:	4629      	mov	r1, r5
   13a3c:	300c      	adds	r0, #12
   13a3e:	f00f fe70 	bl	23722 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   13a42:	2200      	movs	r2, #0
   13a44:	4621      	mov	r1, r4
   13a46:	f242 0005 	movw	r0, #8197	; 0x2005
   13a4a:	f7ff fb73 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   13a4e:	b948      	cbnz	r0, 13a64 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   13a50:	2206      	movs	r2, #6
   13a52:	4806      	ldr	r0, [pc, #24]	; (13a6c <set_random_address+0x50>)
   13a54:	4629      	mov	r1, r5
   13a56:	f00c fa50 	bl	1fefa <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13a5a:	4b05      	ldr	r3, [pc, #20]	; (13a70 <set_random_address+0x54>)
   13a5c:	2201      	movs	r2, #1
   13a5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   13a62:	2000      	movs	r0, #0
}
   13a64:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   13a66:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13a6a:	e7fb      	b.n	13a64 <set_random_address+0x48>
   13a6c:	200003e9 	.word	0x200003e9
   13a70:	20000380 	.word	0x20000380

00013a74 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a74:	4b0a      	ldr	r3, [pc, #40]	; (13aa0 <bt_id_pending_keys_update+0x2c>)
   13a76:	f3bf 8f5b 	dmb	ish
   13a7a:	e853 2f00 	ldrex	r2, [r3]
   13a7e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   13a82:	e843 1000 	strex	r0, r1, [r3]
   13a86:	2800      	cmp	r0, #0
   13a88:	d1f7      	bne.n	13a7a <bt_id_pending_keys_update+0x6>
   13a8a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   13a8e:	0413      	lsls	r3, r2, #16
   13a90:	d504      	bpl.n	13a9c <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   13a92:	4904      	ldr	r1, [pc, #16]	; (13aa4 <bt_id_pending_keys_update+0x30>)
   13a94:	2200      	movs	r2, #0
   13a96:	2002      	movs	r0, #2
   13a98:	f004 bc00 	b.w	1829c <bt_keys_foreach_type>
}
   13a9c:	4770      	bx	lr
   13a9e:	bf00      	nop
   13aa0:	20000454 	.word	0x20000454
   13aa4:	00020833 	.word	0x00020833

00013aa8 <bt_id_find_conflict>:
{
   13aa8:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   13aaa:	2300      	movs	r3, #0
   13aac:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13ab0:	4904      	ldr	r1, [pc, #16]	; (13ac4 <bt_id_find_conflict+0x1c>)
   13ab2:	466a      	mov	r2, sp
   13ab4:	2002      	movs	r0, #2
   13ab6:	f004 fbf1 	bl	1829c <bt_keys_foreach_type>
}
   13aba:	9801      	ldr	r0, [sp, #4]
   13abc:	b003      	add	sp, #12
   13abe:	f85d fb04 	ldr.w	pc, [sp], #4
   13ac2:	bf00      	nop
   13ac4:	00020791 	.word	0x00020791

00013ac8 <bt_id_add>:
{
   13ac8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   13acc:	4605      	mov	r5, r0
   13ace:	b170      	cbz	r0, 13aee <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13ad0:	4c4a      	ldr	r4, [pc, #296]	; (13bfc <bt_id_add+0x134>)
   13ad2:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
   13ad6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   13ada:	b10a      	cbz	r2, 13ae0 <bt_id_add+0x18>
   13adc:	429a      	cmp	r2, r3
   13ade:	d209      	bcs.n	13af4 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   13ae0:	3301      	adds	r3, #1
   13ae2:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   13ae6:	7a2b      	ldrb	r3, [r5, #8]
   13ae8:	f043 0304 	orr.w	r3, r3, #4
   13aec:	722b      	strb	r3, [r5, #8]
}
   13aee:	b002      	add	sp, #8
   13af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13af4:	2100      	movs	r1, #0
   13af6:	2206      	movs	r2, #6
   13af8:	4608      	mov	r0, r1
   13afa:	f001 f9ab 	bl	14e54 <bt_conn_lookup_state_le>
	if (conn) {
   13afe:	4602      	mov	r2, r0
   13b00:	b1a8      	cbz	r0, 13b2e <bt_id_add+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13b02:	f3bf 8f5b 	dmb	ish
   13b06:	34d4      	adds	r4, #212	; 0xd4
   13b08:	e854 3f00 	ldrex	r3, [r4]
   13b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13b10:	e844 3200 	strex	r2, r3, [r4]
   13b14:	2a00      	cmp	r2, #0
   13b16:	d1f7      	bne.n	13b08 <bt_id_add+0x40>
   13b18:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   13b1c:	7a2b      	ldrb	r3, [r5, #8]
   13b1e:	f043 0301 	orr.w	r3, r3, #1
   13b22:	722b      	strb	r3, [r5, #8]
}
   13b24:	b002      	add	sp, #8
   13b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   13b2a:	f00c bf96 	b.w	20a5a <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13b2e:	f7ff ff6b 	bl	13a08 <atomic_get.constprop.0>
	if (scan_enabled) {
   13b32:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13b34:	f3c0 1780 	ubfx	r7, r0, #6, #1
   13b38:	d502      	bpl.n	13b40 <bt_id_add+0x78>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   13b3a:	4610      	mov	r0, r2
   13b3c:	f00c fe98 	bl	20870 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   13b40:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   13b44:	b9b3      	cbnz	r3, 13b74 <bt_id_add+0xac>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   13b46:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
   13b4a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   13b4e:	429a      	cmp	r2, r3
   13b50:	d120      	bne.n	13b94 <bt_id_add+0xcc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   13b52:	2200      	movs	r2, #0
   13b54:	4611      	mov	r1, r2
   13b56:	f242 0029 	movw	r0, #8233	; 0x2029
   13b5a:	f7ff faeb 	bl	13134 <bt_hci_cmd_send_sync>
		if (err) {
   13b5e:	b970      	cbnz	r0, 13b7e <bt_id_add+0xb6>
		bt_dev.le.rl_entries++;
   13b60:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   13b64:	3301      	adds	r3, #1
   13b66:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   13b6a:	7a2b      	ldrb	r3, [r5, #8]
   13b6c:	f043 0304 	orr.w	r3, r3, #4
   13b70:	722b      	strb	r3, [r5, #8]
		goto done;
   13b72:	e004      	b.n	13b7e <bt_id_add+0xb6>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13b74:	2000      	movs	r0, #0
   13b76:	f00c fdf3 	bl	20760 <addr_res_enable>
		if (err) {
   13b7a:	2800      	cmp	r0, #0
   13b7c:	d0e3      	beq.n	13b46 <bt_id_add+0x7e>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13b7e:	2001      	movs	r0, #1
   13b80:	f00c fdee 	bl	20760 <addr_res_enable>
	if (scan_enabled) {
   13b84:	2f00      	cmp	r7, #0
   13b86:	d0b2      	beq.n	13aee <bt_id_add+0x26>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   13b88:	2001      	movs	r0, #1
}
   13b8a:	b002      	add	sp, #8
   13b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   13b90:	f00c be6e 	b.w	20870 <bt_le_scan_set_enable>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   13b94:	462a      	mov	r2, r5
   13b96:	f105 0801 	add.w	r8, r5, #1
   13b9a:	f812 0b2a 	ldrb.w	r0, [r2], #42
   13b9e:	4641      	mov	r1, r8
   13ba0:	f00c fda4 	bl	206ec <hci_id_add>
	if (err) {
   13ba4:	4606      	mov	r6, r0
   13ba6:	2800      	cmp	r0, #0
   13ba8:	d1e9      	bne.n	13b7e <bt_id_add+0xb6>
	bt_dev.le.rl_entries++;
   13baa:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   13bae:	3301      	adds	r3, #1
   13bb0:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	keys->state |= BT_KEYS_ID_ADDED;
   13bb4:	7a2b      	ldrb	r3, [r5, #8]
   13bb6:	f043 0304 	orr.w	r3, r3, #4
   13bba:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   13bbc:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
   13bc0:	075b      	lsls	r3, r3, #29
   13bc2:	d5dc      	bpl.n	13b7e <bt_id_add+0xb6>
	bt_addr_le_copy(&cp.id_addr, addr);
   13bc4:	4641      	mov	r1, r8
   13bc6:	4668      	mov	r0, sp
   13bc8:	f00c fd8d 	bl	206e6 <bt_addr_le_copy>
	cp.mode = mode;
   13bcc:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13bce:	2108      	movs	r1, #8
   13bd0:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   13bd4:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13bd8:	f7ff fa72 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   13bdc:	4604      	mov	r4, r0
   13bde:	2800      	cmp	r0, #0
   13be0:	d0cd      	beq.n	13b7e <bt_id_add+0xb6>
   13be2:	4669      	mov	r1, sp
   13be4:	2208      	movs	r2, #8
   13be6:	300c      	adds	r0, #12
   13be8:	f00f fd9b 	bl	23722 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   13bec:	4632      	mov	r2, r6
   13bee:	4621      	mov	r1, r4
   13bf0:	f242 004e 	movw	r0, #8270	; 0x204e
   13bf4:	f7ff fa9e 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   13bf8:	e7c1      	b.n	13b7e <bt_id_add+0xb6>
   13bfa:	bf00      	nop
   13bfc:	20000380 	.word	0x20000380

00013c00 <bt_id_del>:
{
   13c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	CHECKIF(keys == NULL) {
   13c04:	4605      	mov	r5, r0
   13c06:	b360      	cbz	r0, 13c62 <bt_id_del+0x62>
	if (!bt_dev.le.rl_size ||
   13c08:	4c3f      	ldr	r4, [pc, #252]	; (13d08 <bt_id_del+0x108>)
   13c0a:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13c0e:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
	if (!bt_dev.le.rl_size ||
   13c12:	b1f2      	cbz	r2, 13c52 <bt_id_del+0x52>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13c14:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   13c16:	4293      	cmp	r3, r2
   13c18:	dc1c      	bgt.n	13c54 <bt_id_del+0x54>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13c1a:	2100      	movs	r1, #0
   13c1c:	2206      	movs	r2, #6
   13c1e:	4608      	mov	r0, r1
   13c20:	f001 f918 	bl	14e54 <bt_conn_lookup_state_le>
	if (conn) {
   13c24:	4602      	mov	r2, r0
   13c26:	b1f0      	cbz	r0, 13c66 <bt_id_del+0x66>
   13c28:	f3bf 8f5b 	dmb	ish
   13c2c:	34d4      	adds	r4, #212	; 0xd4
   13c2e:	e854 3f00 	ldrex	r3, [r4]
   13c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13c36:	e844 3200 	strex	r2, r3, [r4]
   13c3a:	2a00      	cmp	r2, #0
   13c3c:	d1f7      	bne.n	13c2e <bt_id_del+0x2e>
   13c3e:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   13c42:	7a2b      	ldrb	r3, [r5, #8]
   13c44:	f043 0302 	orr.w	r3, r3, #2
   13c48:	722b      	strb	r3, [r5, #8]
}
   13c4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   13c4e:	f00c bf04 	b.w	20a5a <bt_conn_unref>
		if (bt_dev.le.rl_entries > 0) {
   13c52:	b113      	cbz	r3, 13c5a <bt_id_del+0x5a>
			bt_dev.le.rl_entries--;
   13c54:	3b01      	subs	r3, #1
   13c56:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   13c5a:	7a2b      	ldrb	r3, [r5, #8]
   13c5c:	f023 0304 	bic.w	r3, r3, #4
   13c60:	722b      	strb	r3, [r5, #8]
}
   13c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13c66:	f7ff fecf 	bl	13a08 <atomic_get.constprop.0>
	if (scan_enabled) {
   13c6a:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13c6c:	f3c0 1880 	ubfx	r8, r0, #6, #1
   13c70:	d502      	bpl.n	13c78 <bt_id_del+0x78>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   13c72:	4610      	mov	r0, r2
   13c74:	f00c fdfc 	bl	20870 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13c78:	2000      	movs	r0, #0
   13c7a:	f00c fd71 	bl	20760 <addr_res_enable>
	if (err) {
   13c7e:	4607      	mov	r7, r0
   13c80:	b988      	cbnz	r0, 13ca6 <bt_id_del+0xa6>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13c82:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   13c86:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
   13c8a:	429a      	cmp	r2, r3
   13c8c:	d219      	bcs.n	13cc2 <bt_id_del+0xc2>
		bt_dev.le.rl_entries--;
   13c8e:	3b01      	subs	r3, #1
   13c90:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   13c94:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13c96:	491d      	ldr	r1, [pc, #116]	; (13d0c <bt_id_del+0x10c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13c98:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13c9c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13c9e:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13ca0:	2002      	movs	r0, #2
   13ca2:	f004 fafb 	bl	1829c <bt_keys_foreach_type>
	if (bt_dev.le.rl_entries) {
   13ca6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   13caa:	b113      	cbz	r3, 13cb2 <bt_id_del+0xb2>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13cac:	2001      	movs	r0, #1
   13cae:	f00c fd57 	bl	20760 <addr_res_enable>
	if (scan_enabled) {
   13cb2:	f1b8 0f00 	cmp.w	r8, #0
   13cb6:	d0d4      	beq.n	13c62 <bt_id_del+0x62>
}
   13cb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   13cbc:	2001      	movs	r0, #1
   13cbe:	f00c bdd7 	b.w	20870 <bt_le_scan_set_enable>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13cc2:	2107      	movs	r1, #7
   13cc4:	f242 0028 	movw	r0, #8232	; 0x2028
   13cc8:	f7ff f9fa 	bl	130c0 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13ccc:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
   13cd0:	4606      	mov	r6, r0
   13cd2:	2800      	cmp	r0, #0
   13cd4:	d0e7      	beq.n	13ca6 <bt_id_del+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13cd6:	2107      	movs	r1, #7
   13cd8:	300c      	adds	r0, #12
   13cda:	f00f fd1c 	bl	23716 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13cde:	4649      	mov	r1, r9
   13ce0:	f00c fd01 	bl	206e6 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   13ce4:	463a      	mov	r2, r7
   13ce6:	4631      	mov	r1, r6
   13ce8:	f242 0028 	movw	r0, #8232	; 0x2028
   13cec:	f7ff fa22 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   13cf0:	2800      	cmp	r0, #0
   13cf2:	d1d8      	bne.n	13ca6 <bt_id_del+0xa6>
	bt_dev.le.rl_entries--;
   13cf4:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   13cf8:	3b01      	subs	r3, #1
   13cfa:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	keys->state &= ~BT_KEYS_ID_ADDED;
   13cfe:	7a2b      	ldrb	r3, [r5, #8]
   13d00:	f023 0304 	bic.w	r3, r3, #4
   13d04:	722b      	strb	r3, [r5, #8]
   13d06:	e7ce      	b.n	13ca6 <bt_id_del+0xa6>
   13d08:	20000380 	.word	0x20000380
   13d0c:	0002074b 	.word	0x0002074b

00013d10 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13d10:	b570      	push	{r4, r5, r6, lr}
   13d12:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13d14:	4604      	mov	r4, r0
   13d16:	b918      	cbnz	r0, 13d20 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13d18:	b1bd      	cbz	r5, 13d4a <bt_id_create+0x3a>
			return -EINVAL;
   13d1a:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   13d1e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13d20:	491a      	ldr	r1, [pc, #104]	; (13d8c <bt_id_create+0x7c>)
   13d22:	f00c fcd8 	bl	206d6 <bt_addr_le_eq>
   13d26:	2800      	cmp	r0, #0
   13d28:	d1f6      	bne.n	13d18 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13d2a:	7823      	ldrb	r3, [r4, #0]
   13d2c:	2b01      	cmp	r3, #1
   13d2e:	d1f4      	bne.n	13d1a <bt_id_create+0xa>
   13d30:	79a3      	ldrb	r3, [r4, #6]
   13d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13d36:	2bc0      	cmp	r3, #192	; 0xc0
   13d38:	d1ef      	bne.n	13d1a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   13d3a:	4620      	mov	r0, r4
   13d3c:	f7ff fe1e 	bl	1397c <id_find>
   13d40:	2800      	cmp	r0, #0
   13d42:	dbe9      	blt.n	13d18 <bt_id_create+0x8>
			return -EALREADY;
   13d44:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13d48:	e7e9      	b.n	13d1e <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13d4a:	4d11      	ldr	r5, [pc, #68]	; (13d90 <bt_id_create+0x80>)
   13d4c:	79eb      	ldrb	r3, [r5, #7]
   13d4e:	2b01      	cmp	r3, #1
   13d50:	d018      	beq.n	13d84 <bt_id_create+0x74>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13d52:	f7ff fe59 	bl	13a08 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13d56:	07c3      	lsls	r3, r0, #31
   13d58:	d50b      	bpl.n	13d72 <bt_id_create+0x62>
	new_id = bt_dev.id_count;
   13d5a:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   13d5c:	4621      	mov	r1, r4
   13d5e:	4630      	mov	r0, r6
   13d60:	f7ff fe24 	bl	139ac <id_create.constprop.0>
	if (err) {
   13d64:	2800      	cmp	r0, #0
   13d66:	d1da      	bne.n	13d1e <bt_id_create+0xe>
		bt_dev.id_count++;
   13d68:	79eb      	ldrb	r3, [r5, #7]
   13d6a:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   13d6c:	4630      	mov	r0, r6
		bt_dev.id_count++;
   13d6e:	71eb      	strb	r3, [r5, #7]
	return new_id;
   13d70:	e7d5      	b.n	13d1e <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   13d72:	2c00      	cmp	r4, #0
   13d74:	d0d1      	beq.n	13d1a <bt_id_create+0xa>
   13d76:	4905      	ldr	r1, [pc, #20]	; (13d8c <bt_id_create+0x7c>)
   13d78:	4620      	mov	r0, r4
   13d7a:	f00c fcac 	bl	206d6 <bt_addr_le_eq>
   13d7e:	2800      	cmp	r0, #0
   13d80:	d0eb      	beq.n	13d5a <bt_id_create+0x4a>
   13d82:	e7ca      	b.n	13d1a <bt_id_create+0xa>
		return -ENOMEM;
   13d84:	f06f 000b 	mvn.w	r0, #11
   13d88:	e7c9      	b.n	13d1e <bt_id_create+0xe>
   13d8a:	bf00      	nop
   13d8c:	000259ef 	.word	0x000259ef
   13d90:	20000380 	.word	0x20000380

00013d94 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13d94:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   13d96:	4604      	mov	r4, r0
   13d98:	b198      	cbz	r0, 13dc2 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13d9a:	aa01      	add	r2, sp, #4
   13d9c:	2100      	movs	r1, #0
   13d9e:	f241 0009 	movw	r0, #4105	; 0x1009
   13da2:	f7ff f9c7 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   13da6:	4606      	mov	r6, r0
   13da8:	b958      	cbnz	r0, 13dc2 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   13daa:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   13dac:	490f      	ldr	r1, [pc, #60]	; (13dec <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13dae:	68dd      	ldr	r5, [r3, #12]
   13db0:	3501      	adds	r5, #1
   13db2:	2206      	movs	r2, #6
   13db4:	4628      	mov	r0, r5
   13db6:	f00c f879 	bl	1feac <memcmp>
   13dba:	b928      	cbnz	r0, 13dc8 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   13dbc:	9801      	ldr	r0, [sp, #4]
   13dbe:	f004 fc51 	bl	18664 <net_buf_unref>
		return 0U;
   13dc2:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13dc4:	b002      	add	sp, #8
   13dc6:	bd70      	pop	{r4, r5, r6, pc}
   13dc8:	4909      	ldr	r1, [pc, #36]	; (13df0 <bt_id_read_public_addr+0x5c>)
   13dca:	2206      	movs	r2, #6
   13dcc:	4628      	mov	r0, r5
   13dce:	f00c f86d 	bl	1feac <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13dd2:	2800      	cmp	r0, #0
   13dd4:	d0f2      	beq.n	13dbc <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
   13dd6:	2206      	movs	r2, #6
   13dd8:	4629      	mov	r1, r5
   13dda:	1c60      	adds	r0, r4, #1
   13ddc:	f00c f88d 	bl	1fefa <memcpy>
	net_buf_unref(rsp);
   13de0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13de2:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13de4:	f004 fc3e 	bl	18664 <net_buf_unref>
	return 1U;
   13de8:	2001      	movs	r0, #1
   13dea:	e7eb      	b.n	13dc4 <bt_id_read_public_addr+0x30>
   13dec:	000259fc 	.word	0x000259fc
   13df0:	000259f6 	.word	0x000259f6

00013df4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13df4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13df6:	4668      	mov	r0, sp
   13df8:	f7ff ffcc 	bl	13d94 <bt_id_read_public_addr>
   13dfc:	4b04      	ldr	r3, [pc, #16]	; (13e10 <bt_setup_public_id_addr+0x1c>)
   13dfe:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13e00:	b118      	cbz	r0, 13e0a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13e02:	4669      	mov	r1, sp
   13e04:	2000      	movs	r0, #0
   13e06:	f7ff fdd1 	bl	139ac <id_create.constprop.0>
}
   13e0a:	b003      	add	sp, #12
   13e0c:	f85d fb04 	ldr.w	pc, [sp], #4
   13e10:	20000380 	.word	0x20000380

00013e14 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13e14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e18:	4b16      	ldr	r3, [pc, #88]	; (13e74 <bt_read_static_addr+0x60>)
   13e1a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   13e1e:	07db      	lsls	r3, r3, #31
{
   13e20:	4607      	mov	r7, r0
   13e22:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e24:	d404      	bmi.n	13e30 <bt_read_static_addr+0x1c>
		LOG_WRN("Read Static Addresses command not available");
		return 0;
   13e26:	2600      	movs	r6, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   13e28:	4630      	mov	r0, r6
   13e2a:	b002      	add	sp, #8
   13e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13e30:	aa01      	add	r2, sp, #4
   13e32:	2100      	movs	r1, #0
   13e34:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13e38:	f7ff f97c 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   13e3c:	4604      	mov	r4, r0
   13e3e:	2800      	cmp	r0, #0
   13e40:	d1f1      	bne.n	13e26 <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
   13e42:	9b01      	ldr	r3, [sp, #4]
   13e44:	68dd      	ldr	r5, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   13e46:	786e      	ldrb	r6, [r5, #1]
   13e48:	4546      	cmp	r6, r8
   13e4a:	bf28      	it	cs
   13e4c:	4646      	movcs	r6, r8
	for (i = 0; i < cnt; i++) {
   13e4e:	3502      	adds	r5, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   13e50:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   13e54:	42a6      	cmp	r6, r4
   13e56:	dc03      	bgt.n	13e60 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
   13e58:	9801      	ldr	r0, [sp, #4]
   13e5a:	f004 fc03 	bl	18664 <net_buf_unref>
	if (!cnt) {
   13e5e:	e7e3      	b.n	13e28 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   13e60:	4629      	mov	r1, r5
   13e62:	fb08 7004 	mla	r0, r8, r4, r7
   13e66:	2216      	movs	r2, #22
   13e68:	f00c f847 	bl	1fefa <memcpy>
	for (i = 0; i < cnt; i++) {
   13e6c:	3401      	adds	r4, #1
   13e6e:	3516      	adds	r5, #22
   13e70:	e7f0      	b.n	13e54 <bt_read_static_addr+0x40>
   13e72:	bf00      	nop
   13e74:	20000380 	.word	0x20000380

00013e78 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13e78:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13e7a:	4e15      	ldr	r6, [pc, #84]	; (13ed0 <bt_setup_random_id_addr+0x58>)
   13e7c:	79f4      	ldrb	r4, [r6, #7]
{
   13e7e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   13e80:	b92c      	cbnz	r4, 13e8e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13e82:	2101      	movs	r1, #1
   13e84:	a802      	add	r0, sp, #8
   13e86:	f7ff ffc5 	bl	13e14 <bt_read_static_addr>
   13e8a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   13e8c:	b9c8      	cbnz	r0, 13ec2 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13e8e:	2100      	movs	r1, #0
   13e90:	4608      	mov	r0, r1
}
   13e92:	b009      	add	sp, #36	; 0x24
   13e94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   13e98:	f7ff bf3a 	b.w	13d10 <bt_id_create>
   13e9c:	ab02      	add	r3, sp, #8
   13e9e:	fb07 3105 	mla	r1, r7, r5, r3
   13ea2:	2206      	movs	r2, #6
   13ea4:	f10d 0001 	add.w	r0, sp, #1
   13ea8:	f00c f827 	bl	1fefa <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   13eac:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13eae:	4669      	mov	r1, sp
   13eb0:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   13eb2:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13eb6:	f7ff fd79 	bl	139ac <id_create.constprop.0>
				if (err) {
   13eba:	3401      	adds	r4, #1
   13ebc:	b110      	cbz	r0, 13ec4 <bt_setup_random_id_addr+0x4c>
}
   13ebe:	b009      	add	sp, #36	; 0x24
   13ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13ec2:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13ec4:	79f3      	ldrb	r3, [r6, #7]
   13ec6:	b2e5      	uxtb	r5, r4
   13ec8:	42ab      	cmp	r3, r5
   13eca:	d8e7      	bhi.n	13e9c <bt_setup_random_id_addr+0x24>
			return 0;
   13ecc:	2000      	movs	r0, #0
   13ece:	e7f6      	b.n	13ebe <bt_setup_random_id_addr+0x46>
   13ed0:	20000380 	.word	0x20000380

00013ed4 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   13ed4:	b538      	push	{r3, r4, r5, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   13ed6:	460c      	mov	r4, r1
   13ed8:	b169      	cbz	r1, 13ef6 <bt_id_set_create_conn_own_addr+0x22>

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   13eda:	4d08      	ldr	r5, [pc, #32]	; (13efc <bt_id_set_create_conn_own_addr+0x28>)
   13edc:	782b      	ldrb	r3, [r5, #0]
   13ede:	2b01      	cmp	r3, #1
   13ee0:	d003      	beq.n	13eea <bt_id_set_create_conn_own_addr+0x16>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   13ee2:	782b      	ldrb	r3, [r5, #0]
   13ee4:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   13ee6:	2000      	movs	r0, #0
}
   13ee8:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   13eea:	1c68      	adds	r0, r5, #1
   13eec:	f7ff fd96 	bl	13a1c <set_random_address>
			if (err) {
   13ef0:	2800      	cmp	r0, #0
   13ef2:	d0f6      	beq.n	13ee2 <bt_id_set_create_conn_own_addr+0xe>
   13ef4:	e7f8      	b.n	13ee8 <bt_id_set_create_conn_own_addr+0x14>
		return -EINVAL;
   13ef6:	f06f 0015 	mvn.w	r0, #21
   13efa:	e7f5      	b.n	13ee8 <bt_id_set_create_conn_own_addr+0x14>
   13efc:	20000380 	.word	0x20000380

00013f00 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   13f00:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   13f02:	460c      	mov	r4, r1
   13f04:	b149      	cbz	r1, 13f1a <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   13f06:	4b06      	ldr	r3, [pc, #24]	; (13f20 <bt_id_set_scan_own_addr+0x20>)
   13f08:	781b      	ldrb	r3, [r3, #0]
   13f0a:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   13f0c:	2000      	movs	r0, #0
   13f0e:	f00c fc78 	bl	20802 <bt_id_set_private_addr>
			if (err) {
   13f12:	b908      	cbnz	r0, 13f18 <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   13f14:	2301      	movs	r3, #1
   13f16:	7023      	strb	r3, [r4, #0]
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
}
   13f18:	bd10      	pop	{r4, pc}
		return -EINVAL;
   13f1a:	f06f 0015 	mvn.w	r0, #21
   13f1e:	e7fb      	b.n	13f18 <bt_id_set_scan_own_addr+0x18>
   13f20:	20000380 	.word	0x20000380

00013f24 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13f24:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13f26:	4c0a      	ldr	r4, [pc, #40]	; (13f50 <bt_id_init+0x2c>)
   13f28:	79e3      	ldrb	r3, [r4, #7]
   13f2a:	b10b      	cbz	r3, 13f30 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   13f2c:	2000      	movs	r0, #0
}
   13f2e:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   13f30:	f7ff ff60 	bl	13df4 <bt_setup_public_id_addr>
		if (err) {
   13f34:	2800      	cmp	r0, #0
   13f36:	d1fa      	bne.n	13f2e <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13f38:	79e3      	ldrb	r3, [r4, #7]
   13f3a:	2b00      	cmp	r3, #0
   13f3c:	d1f6      	bne.n	13f2c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   13f3e:	f7ff ff9b 	bl	13e78 <bt_setup_random_id_addr>
		if (err) {
   13f42:	2800      	cmp	r0, #0
   13f44:	d1f3      	bne.n	13f2e <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   13f46:	1c60      	adds	r0, r4, #1
}
   13f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   13f4c:	f7ff bd66 	b.w	13a1c <set_random_address>
   13f50:	20000380 	.word	0x20000380

00013f54 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13f54:	4b03      	ldr	r3, [pc, #12]	; (13f64 <atomic_get.constprop.0+0x10>)
   13f56:	f3bf 8f5b 	dmb	ish
   13f5a:	6818      	ldr	r0, [r3, #0]
   13f5c:	f3bf 8f5b 	dmb	ish
}
   13f60:	4770      	bx	lr
   13f62:	bf00      	nop
   13f64:	20000454 	.word	0x20000454

00013f68 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   13f68:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   13f6a:	2102      	movs	r1, #2
{
   13f6c:	b087      	sub	sp, #28
   13f6e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   13f70:	f242 000c 	movw	r0, #8204	; 0x200c
   13f74:	f7ff f8a4 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   13f78:	4605      	mov	r5, r0
   13f7a:	b300      	cbz	r0, 13fbe <bt_le_scan_set_enable_legacy+0x56>
   13f7c:	2102      	movs	r1, #2
   13f7e:	300c      	adds	r0, #12
   13f80:	f00f fbc9 	bl	23716 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   13f84:	2c01      	cmp	r4, #1
   13f86:	4602      	mov	r2, r0
   13f88:	d117      	bne.n	13fba <bt_le_scan_set_enable_legacy+0x52>
   13f8a:	f7ff ffe3 	bl	13f54 <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   13f8e:	f3c0 2040 	ubfx	r0, r0, #9, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   13f92:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   13f94:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   13f96:	425c      	negs	r4, r3
   13f98:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   13f9a:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   13f9c:	a903      	add	r1, sp, #12
   13f9e:	4a09      	ldr	r2, [pc, #36]	; (13fc4 <bt_le_scan_set_enable_legacy+0x5c>)
   13fa0:	9400      	str	r4, [sp, #0]
   13fa2:	4628      	mov	r0, r5
   13fa4:	2306      	movs	r3, #6
   13fa6:	f7ff f879 	bl	1309c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   13faa:	2200      	movs	r2, #0
   13fac:	4629      	mov	r1, r5
   13fae:	f242 000c 	movw	r0, #8204	; 0x200c
   13fb2:	f7ff f8bf 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   13fb6:	b007      	add	sp, #28
   13fb8:	bd30      	pop	{r4, r5, pc}
   13fba:	2000      	movs	r0, #0
   13fbc:	e7e9      	b.n	13f92 <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   13fbe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13fc2:	e7f8      	b.n	13fb6 <bt_le_scan_set_enable_legacy+0x4e>
   13fc4:	20000454 	.word	0x20000454

00013fc8 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   13fc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13fca:	4605      	mov	r5, r0
   13fcc:	4614      	mov	r4, r2
   13fce:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   13fd0:	2207      	movs	r2, #7
   13fd2:	2100      	movs	r1, #0
   13fd4:	4668      	mov	r0, sp
   13fd6:	f00b ff9b 	bl	1ff10 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   13fda:	2300      	movs	r3, #0
   13fdc:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13fe0:	1e6b      	subs	r3, r5, #1
   13fe2:	4258      	negs	r0, r3
   13fe4:	f10d 0105 	add.w	r1, sp, #5
   13fe8:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   13fea:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   13fee:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   13ff2:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13ff6:	f7ff ff83 	bl	13f00 <bt_id_set_scan_own_addr>
	if (err) {
   13ffa:	4604      	mov	r4, r0
   13ffc:	bb38      	cbnz	r0, 1404e <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   13ffe:	2107      	movs	r1, #7
   14000:	f242 000b 	movw	r0, #8203	; 0x200b
   14004:	f7ff f85c 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   14008:	4606      	mov	r6, r0
   1400a:	b348      	cbz	r0, 14060 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1400c:	2207      	movs	r2, #7
   1400e:	4669      	mov	r1, sp
   14010:	300c      	adds	r0, #12
   14012:	f00f fb86 	bl	23722 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   14016:	4622      	mov	r2, r4
   14018:	4631      	mov	r1, r6
   1401a:	f242 000b 	movw	r0, #8203	; 0x200b
   1401e:	f7ff f889 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   14022:	4604      	mov	r4, r0
   14024:	b998      	cbnz	r0, 1404e <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   14026:	2001      	movs	r0, #1
   14028:	f7ff ff9e 	bl	13f68 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   1402c:	4604      	mov	r4, r0
   1402e:	b970      	cbnz	r0, 1404e <start_le_scan_legacy+0x86>
	if (val) {
   14030:	2d01      	cmp	r5, #1
   14032:	d10f      	bne.n	14054 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14034:	f3bf 8f5b 	dmb	ish
   14038:	4b0b      	ldr	r3, [pc, #44]	; (14068 <start_le_scan_legacy+0xa0>)
   1403a:	e853 1f00 	ldrex	r1, [r3]
   1403e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   14042:	e843 1200 	strex	r2, r1, [r3]
   14046:	2a00      	cmp	r2, #0
   14048:	d1f7      	bne.n	1403a <start_le_scan_legacy+0x72>
   1404a:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   1404e:	4620      	mov	r0, r4
   14050:	b002      	add	sp, #8
   14052:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14054:	f46f 7180 	mvn.w	r1, #256	; 0x100
   14058:	4803      	ldr	r0, [pc, #12]	; (14068 <start_le_scan_legacy+0xa0>)
   1405a:	f00c fbfa 	bl	20852 <atomic_and>
   1405e:	e7f6      	b.n	1404e <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   14060:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14064:	e7f3      	b.n	1404e <start_le_scan_legacy+0x86>
   14066:	bf00      	nop
   14068:	20000454 	.word	0x20000454

0001406c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   1406c:	4b01      	ldr	r3, [pc, #4]	; (14074 <bt_scan_reset+0x8>)
   1406e:	2200      	movs	r2, #0
   14070:	601a      	str	r2, [r3, #0]
}
   14072:	4770      	bx	lr
   14074:	20002b94 	.word	0x20002b94

00014078 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   14078:	b538      	push	{r3, r4, r5, lr}
   1407a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1407c:	f7ff ff6a 	bl	13f54 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14080:	0601      	lsls	r1, r0, #24
   14082:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   14086:	d433      	bmi.n	140f0 <bt_le_scan_update+0x78>
   14088:	f7ff ff64 	bl	13f54 <atomic_get.constprop.0>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1408c:	0643      	lsls	r3, r0, #25
   1408e:	d427      	bmi.n	140e0 <bt_le_scan_update+0x68>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   14090:	2100      	movs	r1, #0
   14092:	2206      	movs	r2, #6
   14094:	4608      	mov	r0, r1
   14096:	f000 fedd 	bl	14e54 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (conn) {
   1409a:	4604      	mov	r4, r0
   1409c:	bb30      	cbnz	r0, 140ec <bt_le_scan_update+0x74>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1409e:	2202      	movs	r2, #2
   140a0:	4601      	mov	r1, r0
   140a2:	f000 fed7 	bl	14e54 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   140a6:	b318      	cbz	r0, 140f0 <bt_le_scan_update+0x78>
   140a8:	f3bf 8f5b 	dmb	ish
   140ac:	4b11      	ldr	r3, [pc, #68]	; (140f4 <bt_le_scan_update+0x7c>)
   140ae:	e853 1f00 	ldrex	r1, [r3]
   140b2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   140b6:	e843 1200 	strex	r2, r1, [r3]
   140ba:	2a00      	cmp	r2, #0
   140bc:	d1f7      	bne.n	140ae <bt_le_scan_update+0x36>
   140be:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   140c2:	f00c fcca 	bl	20a5a <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   140c6:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   140c8:	4620      	mov	r0, r4
   140ca:	bf08      	it	eq
   140cc:	2212      	moveq	r2, #18
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   140ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   140d2:	bf16      	itet	ne
   140d4:	2230      	movne	r2, #48	; 0x30
   140d6:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   140da:	2160      	movne	r1, #96	; 0x60
   140dc:	f7ff bf74 	b.w	13fc8 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   140e0:	4610      	mov	r0, r2
   140e2:	f7ff ff41 	bl	13f68 <bt_le_scan_set_enable_legacy>
		if (err) {
   140e6:	2800      	cmp	r0, #0
   140e8:	d0d2      	beq.n	14090 <bt_le_scan_update+0x18>
}
   140ea:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   140ec:	f00c fcb5 	bl	20a5a <bt_conn_unref>
		return 0;
   140f0:	2000      	movs	r0, #0
   140f2:	e7fa      	b.n	140ea <bt_le_scan_update+0x72>
   140f4:	20000454 	.word	0x20000454

000140f8 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   140f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   140fc:	f100 060c 	add.w	r6, r0, #12
   14100:	b08b      	sub	sp, #44	; 0x2c
   14102:	4604      	mov	r4, r0
   14104:	4630      	mov	r0, r6
   14106:	f00f fb3f 	bl	23788 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   1410a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 142cc <bt_hci_le_adv_report+0x1d4>
   1410e:	4680      	mov	r8, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   14110:	f1b8 0f00 	cmp.w	r8, #0
   14114:	d102      	bne.n	1411c <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   14116:	b00b      	add	sp, #44	; 0x2c
   14118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   1411c:	8a23      	ldrh	r3, [r4, #16]
   1411e:	2b08      	cmp	r3, #8
   14120:	d9f9      	bls.n	14116 <bt_hci_le_adv_report+0x1e>
	return net_buf_simple_pull_mem(&buf->b, len);
   14122:	2109      	movs	r1, #9
   14124:	4630      	mov	r0, r6
   14126:	f00f fb27 	bl	23778 <net_buf_simple_pull_mem>
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
   1412a:	7a03      	ldrb	r3, [r0, #8]
   1412c:	8a22      	ldrh	r2, [r4, #16]
   1412e:	3301      	adds	r3, #1
   14130:	429a      	cmp	r2, r3
   14132:	4605      	mov	r5, r0
   14134:	d3ef      	bcc.n	14116 <bt_hci_le_adv_report+0x1e>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   14136:	2301      	movs	r3, #1
   14138:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1413c:	237f      	movs	r3, #127	; 0x7f
   1413e:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
   14142:	7a03      	ldrb	r3, [r0, #8]
   14144:	4403      	add	r3, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   14146:	f100 0901 	add.w	r9, r0, #1
		adv_info.rssi = evt->data[evt->length];
   1414a:	7a5b      	ldrb	r3, [r3, #9]
   1414c:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   14150:	23ff      	movs	r3, #255	; 0xff
   14152:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
   14156:	2300      	movs	r3, #0
   14158:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.adv_type = evt->evt_type;
   1415c:	7802      	ldrb	r2, [r0, #0]
   1415e:	f88d 201f 	strb.w	r2, [sp, #31]
	switch (evt_type) {
   14162:	2a04      	cmp	r2, #4
   14164:	bf9c      	itt	ls
   14166:	4b5a      	ldrls	r3, [pc, #360]	; (142d0 <bt_hci_le_adv_report+0x1d8>)
   14168:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   1416a:	f8ad 3020 	strh.w	r3, [sp, #32]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   1416e:	7a03      	ldrb	r3, [r0, #8]
   14170:	9301      	str	r3, [sp, #4]
   14172:	f7ff feef 	bl	13f54 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   14176:	0607      	lsls	r7, r0, #24
   14178:	d50d      	bpl.n	14196 <bt_hci_le_adv_report+0x9e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1417a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1417e:	0758      	lsls	r0, r3, #29
   14180:	d509      	bpl.n	14196 <bt_hci_le_adv_report+0x9e>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   14182:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   14184:	4630      	mov	r0, r6
   14186:	3101      	adds	r1, #1
   14188:	f108 38ff 	add.w	r8, r8, #4294967295
   1418c:	f00f faec 	bl	23768 <net_buf_simple_pull>
   14190:	fa5f f888 	uxtb.w	r8, r8
   14194:	e7bc      	b.n	14110 <bt_hci_le_adv_report+0x18>
	if (bt_addr_le_is_resolved(addr)) {
   14196:	4648      	mov	r0, r9
   14198:	f00b ff69 	bl	2006e <bt_addr_le_is_resolved>
   1419c:	2800      	cmp	r0, #0
   1419e:	d048      	beq.n	14232 <bt_hci_le_adv_report+0x13a>
		bt_addr_le_copy_resolved(&id_addr, addr);
   141a0:	4649      	mov	r1, r9
   141a2:	a804      	add	r0, sp, #16
   141a4:	f00b ff59 	bl	2005a <bt_addr_le_copy_resolved>
	if (scan_dev_found_cb) {
   141a8:	f8da 3000 	ldr.w	r3, [sl]
   141ac:	b1a3      	cbz	r3, 141d8 <bt_hci_le_adv_report+0xe0>
	state->offset = net_buf_simple_headroom(buf);
   141ae:	4630      	mov	r0, r6
   141b0:	f00f fafa 	bl	237a8 <net_buf_simple_headroom>
		buf->len = len;
   141b4:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
   141b6:	8a27      	ldrh	r7, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   141b8:	f89d 201f 	ldrb.w	r2, [sp, #31]
		buf->len = len;
   141bc:	8223      	strh	r3, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   141be:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   141c0:	4633      	mov	r3, r6
   141c2:	f99d 101d 	ldrsb.w	r1, [sp, #29]
   141c6:	f8da c000 	ldr.w	ip, [sl]
   141ca:	a804      	add	r0, sp, #16
   141cc:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   141ce:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   141d0:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
   141d2:	fa13 f38b 	uxtah	r3, r3, fp
   141d6:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
   141d8:	ab04      	add	r3, sp, #16
   141da:	9306      	str	r3, [sp, #24]
   141dc:	4b3d      	ldr	r3, [pc, #244]	; (142d4 <bt_hci_le_adv_report+0x1dc>)
   141de:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   141e0:	2b00      	cmp	r3, #0
   141e2:	d037      	beq.n	14254 <bt_hci_le_adv_report+0x15c>
	return node->next;
   141e4:	681a      	ldr	r2, [r3, #0]
   141e6:	b102      	cbz	r2, 141ea <bt_hci_le_adv_report+0xf2>
   141e8:	3a08      	subs	r2, #8
		if (listener->recv) {
   141ea:	f853 1c08 	ldr.w	r1, [r3, #-8]
   141ee:	b1b9      	cbz	r1, 14220 <bt_hci_le_adv_report+0x128>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   141f0:	4617      	mov	r7, r2
   141f2:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   141f6:	4630      	mov	r0, r6
   141f8:	9203      	str	r2, [sp, #12]
   141fa:	f00f fad5 	bl	237a8 <net_buf_simple_headroom>
	state->len = buf->len;
   141fe:	8a23      	ldrh	r3, [r4, #16]
			listener->recv(info, buf);
   14200:	9a03      	ldr	r2, [sp, #12]
   14202:	9302      	str	r3, [sp, #8]
			buf->len = len;
   14204:	9b01      	ldr	r3, [sp, #4]
   14206:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   14208:	6812      	ldr	r2, [r2, #0]
	state->offset = net_buf_simple_headroom(buf);
   1420a:	4683      	mov	fp, r0
   1420c:	4631      	mov	r1, r6
   1420e:	a806      	add	r0, sp, #24
   14210:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   14212:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
   14214:	9b02      	ldr	r3, [sp, #8]
   14216:	8223      	strh	r3, [r4, #16]
	buf->data = buf->__buf + state->offset;
   14218:	fa12 f28b 	uxtah	r2, r2, fp
   1421c:	60e2      	str	r2, [r4, #12]
}
   1421e:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   14220:	b1c2      	cbz	r2, 14254 <bt_hci_le_adv_report+0x15c>
   14222:	6897      	ldr	r7, [r2, #8]
   14224:	6813      	ldr	r3, [r2, #0]
   14226:	b19f      	cbz	r7, 14250 <bt_hci_le_adv_report+0x158>
   14228:	3f08      	subs	r7, #8
		if (listener->recv) {
   1422a:	2b00      	cmp	r3, #0
   1422c:	d1e3      	bne.n	141f6 <bt_hci_le_adv_report+0xfe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1422e:	463a      	mov	r2, r7
   14230:	e7f7      	b.n	14222 <bt_hci_le_adv_report+0x12a>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   14232:	786b      	ldrb	r3, [r5, #1]
   14234:	2bff      	cmp	r3, #255	; 0xff
   14236:	d105      	bne.n	14244 <bt_hci_le_adv_report+0x14c>
	memcpy(dst, src, sizeof(*dst));
   14238:	4927      	ldr	r1, [pc, #156]	; (142d8 <bt_hci_le_adv_report+0x1e0>)
   1423a:	2207      	movs	r2, #7
   1423c:	a804      	add	r0, sp, #16
   1423e:	f00b fe5c 	bl	1fefa <memcpy>
}
   14242:	e7b1      	b.n	141a8 <bt_hci_le_adv_report+0xb0>
		bt_addr_le_copy(&id_addr,
   14244:	4649      	mov	r1, r9
   14246:	f00c fad0 	bl	207ea <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   1424a:	2207      	movs	r2, #7
   1424c:	4601      	mov	r1, r0
   1424e:	e7f5      	b.n	1423c <bt_hci_le_adv_report+0x144>
		if (listener->recv) {
   14250:	2b00      	cmp	r3, #0
   14252:	d1d0      	bne.n	141f6 <bt_hci_le_adv_report+0xfe>
	info->addr = NULL;
   14254:	2300      	movs	r3, #0
	check_pending_conn(&id_addr, addr, info->adv_props);
   14256:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	info->addr = NULL;
   1425a:	9306      	str	r3, [sp, #24]
   1425c:	f7ff fe7a 	bl	13f54 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14260:	0601      	lsls	r1, r0, #24
   14262:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   14266:	d48c      	bmi.n	14182 <bt_hci_le_adv_report+0x8a>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   14268:	07d2      	lsls	r2, r2, #31
   1426a:	d58a      	bpl.n	14182 <bt_hci_le_adv_report+0x8a>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   1426c:	2202      	movs	r2, #2
   1426e:	a904      	add	r1, sp, #16
   14270:	4658      	mov	r0, fp
   14272:	f000 fdef 	bl	14e54 <bt_conn_lookup_state_le>
	if (!conn) {
   14276:	4607      	mov	r7, r0
   14278:	2800      	cmp	r0, #0
   1427a:	d082      	beq.n	14182 <bt_hci_le_adv_report+0x8a>
   1427c:	f7ff fe6a 	bl	13f54 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   14280:	0643      	lsls	r3, r0, #25
   14282:	d411      	bmi.n	142a8 <bt_hci_le_adv_report+0x1b0>
   14284:	2207      	movs	r2, #7
   14286:	4649      	mov	r1, r9
   14288:	f107 0096 	add.w	r0, r7, #150	; 0x96
   1428c:	f00b fe35 	bl	1fefa <memcpy>
	if (bt_le_create_conn(conn)) {
   14290:	4638      	mov	r0, r7
   14292:	f7fe ffe3 	bl	1325c <bt_le_create_conn>
   14296:	b960      	cbnz	r0, 142b2 <bt_hci_le_adv_report+0x1ba>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   14298:	4638      	mov	r0, r7
   1429a:	2106      	movs	r1, #6
   1429c:	f000 fbac 	bl	149f8 <bt_conn_set_state>
	bt_conn_unref(conn);
   142a0:	4638      	mov	r0, r7
   142a2:	f00c fbda 	bl	20a5a <bt_conn_unref>
	return;
   142a6:	e76c      	b.n	14182 <bt_hci_le_adv_report+0x8a>
	return bt_le_scan_set_enable_legacy(enable);
   142a8:	4658      	mov	r0, fp
   142aa:	f7ff fe5d 	bl	13f68 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   142ae:	2800      	cmp	r0, #0
   142b0:	d0e8      	beq.n	14284 <bt_hci_le_adv_report+0x18c>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   142b2:	231f      	movs	r3, #31
   142b4:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   142b6:	2100      	movs	r1, #0
   142b8:	4638      	mov	r0, r7
   142ba:	f000 fb9d 	bl	149f8 <bt_conn_set_state>
	bt_conn_unref(conn);
   142be:	4638      	mov	r0, r7
   142c0:	f00c fbcb 	bl	20a5a <bt_conn_unref>
	bt_le_scan_update(false);
   142c4:	2000      	movs	r0, #0
   142c6:	f7ff fed7 	bl	14078 <bt_le_scan_update>
   142ca:	e75a      	b.n	14182 <bt_hci_le_adv_report+0x8a>
   142cc:	20002b94 	.word	0x20002b94
   142d0:	00025b60 	.word	0x00025b60
   142d4:	20002b8c 	.word	0x20002b8c
   142d8:	000259ef 	.word	0x000259ef

000142dc <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   142dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142de:	4605      	mov	r5, r0
   142e0:	f7ff fe38 	bl	13f54 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   142e4:	0740      	lsls	r0, r0, #29
{
   142e6:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   142e8:	d56c      	bpl.n	143c4 <bt_le_scan_start+0xe8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   142ea:	782a      	ldrb	r2, [r5, #0]
   142ec:	2a01      	cmp	r2, #1
   142ee:	d903      	bls.n	142f8 <bt_le_scan_start+0x1c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   142f0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   142f4:	4620      	mov	r0, r4
   142f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   142f8:	686b      	ldr	r3, [r5, #4]
   142fa:	2b0f      	cmp	r3, #15
   142fc:	d8f8      	bhi.n	142f0 <bt_le_scan_start+0x14>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   142fe:	8928      	ldrh	r0, [r5, #8]
   14300:	1f03      	subs	r3, r0, #4
   14302:	b29b      	uxth	r3, r3
   14304:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   14308:	42a3      	cmp	r3, r4
   1430a:	d8f1      	bhi.n	142f0 <bt_le_scan_start+0x14>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1430c:	8969      	ldrh	r1, [r5, #10]
   1430e:	1f0b      	subs	r3, r1, #4
   14310:	b29b      	uxth	r3, r3
   14312:	42a3      	cmp	r3, r4
   14314:	d8ec      	bhi.n	142f0 <bt_le_scan_start+0x14>
	if (param->window > param->interval) {
   14316:	4288      	cmp	r0, r1
   14318:	d3ea      	bcc.n	142f0 <bt_le_scan_start+0x14>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1431a:	b992      	cbnz	r2, 14342 <bt_le_scan_start+0x66>
   1431c:	f3bf 8f5b 	dmb	ish
   14320:	4e2a      	ldr	r6, [pc, #168]	; (143cc <bt_le_scan_start+0xf0>)
   14322:	e856 0f00 	ldrex	r0, [r6]
   14326:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   1432a:	e846 3200 	strex	r2, r3, [r6]
   1432e:	2a00      	cmp	r2, #0
   14330:	d1f7      	bne.n	14322 <bt_le_scan_start+0x46>
   14332:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14336:	f010 0280 	ands.w	r2, r0, #128	; 0x80
   1433a:	d007      	beq.n	1434c <bt_le_scan_start+0x70>
		return -EALREADY;
   1433c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14340:	e7d8      	b.n	142f4 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   14342:	f00c fa74 	bl	2082e <bt_id_scan_random_addr_check>
   14346:	2800      	cmp	r0, #0
   14348:	d1e8      	bne.n	1431c <bt_le_scan_start+0x40>
   1434a:	e7d1      	b.n	142f0 <bt_le_scan_start+0x14>
   1434c:	f7ff fe02 	bl	13f54 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   14350:	0641      	lsls	r1, r0, #25
   14352:	d50a      	bpl.n	1436a <bt_le_scan_start+0x8e>
	return bt_le_scan_set_enable_legacy(enable);
   14354:	4610      	mov	r0, r2
   14356:	f7ff fe07 	bl	13f68 <bt_le_scan_set_enable_legacy>
		if (err) {
   1435a:	4604      	mov	r4, r0
   1435c:	b128      	cbz	r0, 1436a <bt_le_scan_start+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1435e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14362:	4630      	mov	r0, r6
   14364:	f00c fa75 	bl	20852 <atomic_and>
		return err;
   14368:	e7c4      	b.n	142f4 <bt_le_scan_start+0x18>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   1436a:	686b      	ldr	r3, [r5, #4]
	if (val) {
   1436c:	07db      	lsls	r3, r3, #31
   1436e:	d515      	bpl.n	1439c <bt_le_scan_start+0xc0>
   14370:	f3bf 8f5b 	dmb	ish
   14374:	e856 3f00 	ldrex	r3, [r6]
   14378:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1437c:	e846 3200 	strex	r2, r3, [r6]
   14380:	2a00      	cmp	r2, #0
   14382:	d1f7      	bne.n	14374 <bt_le_scan_start+0x98>
   14384:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   14388:	89ab      	ldrh	r3, [r5, #12]
   1438a:	b16b      	cbz	r3, 143a8 <bt_le_scan_start+0xcc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1438c:	480f      	ldr	r0, [pc, #60]	; (143cc <bt_le_scan_start+0xf0>)
   1438e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14392:	f00c fa5e 	bl	20852 <atomic_and>
			return -ENOTSUP;
   14396:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1439a:	e7ab      	b.n	142f4 <bt_le_scan_start+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1439c:	f46f 7100 	mvn.w	r1, #512	; 0x200
   143a0:	480a      	ldr	r0, [pc, #40]	; (143cc <bt_le_scan_start+0xf0>)
   143a2:	f00c fa56 	bl	20852 <atomic_and>
   143a6:	e7ef      	b.n	14388 <bt_le_scan_start+0xac>
		err = start_le_scan_legacy(param->type, param->interval,
   143a8:	896a      	ldrh	r2, [r5, #10]
   143aa:	8929      	ldrh	r1, [r5, #8]
   143ac:	7828      	ldrb	r0, [r5, #0]
   143ae:	f7ff fe0b 	bl	13fc8 <start_le_scan_legacy>
	if (err) {
   143b2:	4604      	mov	r4, r0
   143b4:	b118      	cbz	r0, 143be <bt_le_scan_start+0xe2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   143b6:	4805      	ldr	r0, [pc, #20]	; (143cc <bt_le_scan_start+0xf0>)
   143b8:	f06f 0180 	mvn.w	r1, #128	; 0x80
   143bc:	e7d2      	b.n	14364 <bt_le_scan_start+0x88>
	scan_dev_found_cb = cb;
   143be:	4b04      	ldr	r3, [pc, #16]	; (143d0 <bt_le_scan_start+0xf4>)
   143c0:	601f      	str	r7, [r3, #0]
	return 0;
   143c2:	e797      	b.n	142f4 <bt_le_scan_start+0x18>
		return -EAGAIN;
   143c4:	f06f 040a 	mvn.w	r4, #10
   143c8:	e794      	b.n	142f4 <bt_le_scan_start+0x18>
   143ca:	bf00      	nop
   143cc:	20000454 	.word	0x20000454
   143d0:	20002b94 	.word	0x20002b94

000143d4 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   143d4:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   143d6:	4808      	ldr	r0, [pc, #32]	; (143f8 <bt_le_scan_stop+0x24>)
   143d8:	f06f 0180 	mvn.w	r1, #128	; 0x80
   143dc:	f00c fa39 	bl	20852 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   143e0:	0603      	lsls	r3, r0, #24
   143e2:	d506      	bpl.n	143f2 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   143e4:	4b05      	ldr	r3, [pc, #20]	; (143fc <bt_le_scan_stop+0x28>)
   143e6:	2000      	movs	r0, #0
   143e8:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   143ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   143ee:	f7ff be43 	b.w	14078 <bt_le_scan_update>
}
   143f2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   143f6:	bd08      	pop	{r3, pc}
   143f8:	20000454 	.word	0x20000454
   143fc:	20002b94 	.word	0x20002b94

00014400 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   14400:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14402:	4904      	ldr	r1, [pc, #16]	; (14414 <bt_pub_key_is_debug+0x14>)
   14404:	2240      	movs	r2, #64	; 0x40
   14406:	f00b fd51 	bl	1feac <memcmp>
}
   1440a:	fab0 f080 	clz	r0, r0
   1440e:	0940      	lsrs	r0, r0, #5
   14410:	bd08      	pop	{r3, pc}
   14412:	bf00      	nop
   14414:	00025b6d 	.word	0x00025b6d

00014418 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   14418:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1441a:	4b31      	ldr	r3, [pc, #196]	; (144e0 <bt_pub_key_gen+0xc8>)
   1441c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   14420:	f003 0306 	and.w	r3, r3, #6
   14424:	2b06      	cmp	r3, #6
   14426:	d152      	bne.n	144ce <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   14428:	2800      	cmp	r0, #0
   1442a:	d053      	beq.n	144d4 <bt_pub_key_gen+0xbc>
	return list->head;
   1442c:	4e2d      	ldr	r6, [pc, #180]	; (144e4 <bt_pub_key_gen+0xcc>)
   1442e:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14430:	b132      	cbz	r2, 14440 <bt_pub_key_gen+0x28>
   14432:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   14434:	4283      	cmp	r3, r0
   14436:	d050      	beq.n	144da <bt_pub_key_gen+0xc2>
	return node->next;
   14438:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1443a:	b10b      	cbz	r3, 14440 <bt_pub_key_gen+0x28>
   1443c:	3b04      	subs	r3, #4
   1443e:	e7f9      	b.n	14434 <bt_pub_key_gen+0x1c>
	parent->next = child;
   14440:	6042      	str	r2, [r0, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
   14442:	6872      	ldr	r2, [r6, #4]
			LOG_WRN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   14444:	1d03      	adds	r3, r0, #4
	list->head = node;
   14446:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   14448:	b902      	cbnz	r2, 1444c <bt_pub_key_gen+0x34>
	list->tail = node;
   1444a:	6073      	str	r3, [r6, #4]
   1444c:	4c26      	ldr	r4, [pc, #152]	; (144e8 <bt_pub_key_gen+0xd0>)
   1444e:	f3bf 8f5b 	dmb	ish
   14452:	e854 2f00 	ldrex	r2, [r4]
   14456:	f042 0320 	orr.w	r3, r2, #32
   1445a:	e844 3100 	strex	r1, r3, [r4]
   1445e:	2900      	cmp	r1, #0
   14460:	d1f7      	bne.n	14452 <bt_pub_key_gen+0x3a>
   14462:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14466:	f012 0220 	ands.w	r2, r2, #32
   1446a:	d002      	beq.n	14472 <bt_pub_key_gen+0x5a>

		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
   1446c:	2500      	movs	r5, #0
}
   1446e:	4628      	mov	r0, r5
   14470:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14472:	f3bf 8f5b 	dmb	ish
   14476:	e854 3f00 	ldrex	r3, [r4]
   1447a:	f023 0310 	bic.w	r3, r3, #16
   1447e:	e844 3100 	strex	r1, r3, [r4]
   14482:	2900      	cmp	r1, #0
   14484:	d1f7      	bne.n	14476 <bt_pub_key_gen+0x5e>
   14486:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1448a:	4611      	mov	r1, r2
   1448c:	f242 0025 	movw	r0, #8229	; 0x2025
   14490:	f7fe fe50 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   14494:	4605      	mov	r5, r0
   14496:	2800      	cmp	r0, #0
   14498:	d0e8      	beq.n	1446c <bt_pub_key_gen+0x54>
   1449a:	f3bf 8f5b 	dmb	ish
   1449e:	e854 3f00 	ldrex	r3, [r4]
   144a2:	f023 0320 	bic.w	r3, r3, #32
   144a6:	e844 3200 	strex	r2, r3, [r4]
   144aa:	2a00      	cmp	r2, #0
   144ac:	d1f7      	bne.n	1449e <bt_pub_key_gen+0x86>
   144ae:	f3bf 8f5b 	dmb	ish
	return list->head;
   144b2:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   144b4:	b13c      	cbz	r4, 144c6 <bt_pub_key_gen+0xae>
			if (cb->func) {
   144b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   144ba:	3c04      	subs	r4, #4
			if (cb->func) {
   144bc:	b10b      	cbz	r3, 144c2 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   144be:	2000      	movs	r0, #0
   144c0:	4798      	blx	r3
	return node->next;
   144c2:	6864      	ldr	r4, [r4, #4]
   144c4:	e7f6      	b.n	144b4 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   144c6:	2300      	movs	r3, #0
	list->tail = NULL;
   144c8:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   144cc:	e7cf      	b.n	1446e <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   144ce:	f06f 0585 	mvn.w	r5, #133	; 0x85
   144d2:	e7cc      	b.n	1446e <bt_pub_key_gen+0x56>
		return -EINVAL;
   144d4:	f06f 0515 	mvn.w	r5, #21
   144d8:	e7c9      	b.n	1446e <bt_pub_key_gen+0x56>
			return -EALREADY;
   144da:	f06f 0577 	mvn.w	r5, #119	; 0x77
   144de:	e7c6      	b.n	1446e <bt_pub_key_gen+0x56>
   144e0:	20000380 	.word	0x20000380
   144e4:	20002b9c 	.word	0x20002b9c
   144e8:	20000454 	.word	0x20000454

000144ec <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   144ec:	4b05      	ldr	r3, [pc, #20]	; (14504 <bt_pub_key_get+0x18>)
   144ee:	f3bf 8f5b 	dmb	ish
   144f2:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   144f4:	4804      	ldr	r0, [pc, #16]	; (14508 <bt_pub_key_get+0x1c>)
   144f6:	f3bf 8f5b 	dmb	ish
	return NULL;
   144fa:	f013 0f10 	tst.w	r3, #16
}
   144fe:	bf08      	it	eq
   14500:	2000      	moveq	r0, #0
   14502:	4770      	bx	lr
   14504:	20000454 	.word	0x20000454
   14508:	20003971 	.word	0x20003971

0001450c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   1450e:	4d1f      	ldr	r5, [pc, #124]	; (1458c <bt_dh_key_gen+0x80>)
   14510:	682b      	ldr	r3, [r5, #0]
   14512:	428b      	cmp	r3, r1
{
   14514:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   14516:	d032      	beq.n	1457e <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14518:	b113      	cbz	r3, 14520 <bt_dh_key_gen+0x14>
		return -EBUSY;
   1451a:	f06f 000f 	mvn.w	r0, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1451e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14520:	4b1b      	ldr	r3, [pc, #108]	; (14590 <bt_dh_key_gen+0x84>)
   14522:	f3bf 8f5b 	dmb	ish
   14526:	681a      	ldr	r2, [r3, #0]
   14528:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1452c:	f3c2 1740 	ubfx	r7, r2, #5, #1
   14530:	0692      	lsls	r2, r2, #26
   14532:	d4f2      	bmi.n	1451a <bt_dh_key_gen+0xe>
   14534:	f3bf 8f5b 	dmb	ish
   14538:	681b      	ldr	r3, [r3, #0]
   1453a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1453e:	06db      	lsls	r3, r3, #27
   14540:	d520      	bpl.n	14584 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   14542:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   14544:	f242 0026 	movw	r0, #8230	; 0x2026
   14548:	2140      	movs	r1, #64	; 0x40
   1454a:	f7fe fdb9 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   1454e:	4604      	mov	r4, r0
   14550:	b190      	cbz	r0, 14578 <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   14552:	2140      	movs	r1, #64	; 0x40
   14554:	300c      	adds	r0, #12
   14556:	f00f f8de 	bl	23716 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   1455a:	2240      	movs	r2, #64	; 0x40
   1455c:	4631      	mov	r1, r6
   1455e:	f00b fccc 	bl	1fefa <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   14562:	463a      	mov	r2, r7
   14564:	4621      	mov	r1, r4
   14566:	f242 0026 	movw	r0, #8230	; 0x2026
   1456a:	f7fe fde3 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   1456e:	2800      	cmp	r0, #0
   14570:	d0d5      	beq.n	1451e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   14572:	2300      	movs	r3, #0
   14574:	602b      	str	r3, [r5, #0]
		return err;
   14576:	e7d2      	b.n	1451e <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   14578:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1457c:	e7f9      	b.n	14572 <bt_dh_key_gen+0x66>
		return -EALREADY;
   1457e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14582:	e7cc      	b.n	1451e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   14584:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   14588:	e7c9      	b.n	1451e <bt_dh_key_gen+0x12>
   1458a:	bf00      	nop
   1458c:	20002b98 	.word	0x20002b98
   14590:	20000454 	.word	0x20000454

00014594 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   14594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14596:	4c1b      	ldr	r4, [pc, #108]	; (14604 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   14598:	68c6      	ldr	r6, [r0, #12]
   1459a:	f3bf 8f5b 	dmb	ish
   1459e:	e854 3f00 	ldrex	r3, [r4]
   145a2:	f023 0320 	bic.w	r3, r3, #32
   145a6:	e844 3200 	strex	r2, r3, [r4]
   145aa:	2a00      	cmp	r2, #0
   145ac:	d1f7      	bne.n	1459e <bt_hci_evt_le_pkey_complete+0xa>
   145ae:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   145b2:	7833      	ldrb	r3, [r6, #0]
   145b4:	b983      	cbnz	r3, 145d8 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   145b6:	4814      	ldr	r0, [pc, #80]	; (14608 <bt_hci_evt_le_pkey_complete+0x74>)
   145b8:	2240      	movs	r2, #64	; 0x40
   145ba:	1c71      	adds	r1, r6, #1
   145bc:	f00b fc9d 	bl	1fefa <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   145c0:	f3bf 8f5b 	dmb	ish
   145c4:	e854 3f00 	ldrex	r3, [r4]
   145c8:	f043 0310 	orr.w	r3, r3, #16
   145cc:	e844 3200 	strex	r2, r3, [r4]
   145d0:	2a00      	cmp	r2, #0
   145d2:	d1f7      	bne.n	145c4 <bt_hci_evt_le_pkey_complete+0x30>
   145d4:	f3bf 8f5b 	dmb	ish
	return list->head;
   145d8:	4d0c      	ldr	r5, [pc, #48]	; (1460c <bt_hci_evt_le_pkey_complete+0x78>)
   145da:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   145dc:	b16c      	cbz	r4, 145fa <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   145de:	4f0a      	ldr	r7, [pc, #40]	; (14608 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   145e0:	3c04      	subs	r4, #4
		if (cb->func) {
   145e2:	6823      	ldr	r3, [r4, #0]
   145e4:	b12b      	cbz	r3, 145f2 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   145e6:	7832      	ldrb	r2, [r6, #0]
   145e8:	2a00      	cmp	r2, #0
   145ea:	bf0c      	ite	eq
   145ec:	4638      	moveq	r0, r7
   145ee:	2000      	movne	r0, #0
   145f0:	4798      	blx	r3
	return node->next;
   145f2:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   145f4:	b10c      	cbz	r4, 145fa <bt_hci_evt_le_pkey_complete+0x66>
   145f6:	3c04      	subs	r4, #4
   145f8:	e7f3      	b.n	145e2 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   145fa:	2300      	movs	r3, #0
	list->tail = NULL;
   145fc:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   14600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14602:	bf00      	nop
   14604:	20000454 	.word	0x20000454
   14608:	20003971 	.word	0x20003971
   1460c:	20002b9c 	.word	0x20002b9c

00014610 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   14610:	4905      	ldr	r1, [pc, #20]	; (14628 <bt_hci_evt_le_dhkey_complete+0x18>)
   14612:	680b      	ldr	r3, [r1, #0]
   14614:	b133      	cbz	r3, 14624 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   14616:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   14618:	2000      	movs	r0, #0
   1461a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1461c:	7811      	ldrb	r1, [r2, #0]
   1461e:	b901      	cbnz	r1, 14622 <bt_hci_evt_le_dhkey_complete+0x12>
   14620:	1c50      	adds	r0, r2, #1
   14622:	4718      	bx	r3
	}
}
   14624:	4770      	bx	lr
   14626:	bf00      	nop
   14628:	20002b98 	.word	0x20002b98

0001462c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1462c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1462e:	4b0b      	ldr	r3, [pc, #44]	; (1465c <notify_connected+0x30>)
   14630:	681d      	ldr	r5, [r3, #0]
{
   14632:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   14634:	b925      	cbnz	r5, 14640 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14636:	4d0a      	ldr	r5, [pc, #40]	; (14660 <notify_connected+0x34>)
   14638:	4e0a      	ldr	r6, [pc, #40]	; (14664 <notify_connected+0x38>)
   1463a:	42b5      	cmp	r5, r6
   1463c:	d307      	bcc.n	1464e <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1463e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   14640:	682b      	ldr	r3, [r5, #0]
   14642:	b113      	cbz	r3, 1464a <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   14644:	7b21      	ldrb	r1, [r4, #12]
   14646:	4620      	mov	r0, r4
   14648:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1464a:	69ad      	ldr	r5, [r5, #24]
   1464c:	e7f2      	b.n	14634 <notify_connected+0x8>
		if (cb->connected) {
   1464e:	682b      	ldr	r3, [r5, #0]
   14650:	b113      	cbz	r3, 14658 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   14652:	7b21      	ldrb	r1, [r4, #12]
   14654:	4620      	mov	r0, r4
   14656:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14658:	351c      	adds	r5, #28
   1465a:	e7ee      	b.n	1463a <notify_connected+0xe>
   1465c:	20002bd4 	.word	0x20002bd4
   14660:	00024bb8 	.word	0x00024bb8
   14664:	00024bd4 	.word	0x00024bd4

00014668 <tx_notify>:
{
   14668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   1466c:	4f15      	ldr	r7, [pc, #84]	; (146c4 <tx_notify+0x5c>)
{
   1466e:	4604      	mov	r4, r0
	tx->cb = NULL;
   14670:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   14674:	f04f 0240 	mov.w	r2, #64	; 0x40
   14678:	f3ef 8311 	mrs	r3, BASEPRI
   1467c:	f382 8812 	msr	BASEPRI_MAX, r2
   14680:	f3bf 8f6f 	isb	sy
	return list->head;
   14684:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   14686:	b929      	cbnz	r1, 14694 <tx_notify+0x2c>
	__asm__ volatile(
   14688:	f383 8811 	msr	BASEPRI, r3
   1468c:	f3bf 8f6f 	isb	sy
}
   14690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14694:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   14696:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   14698:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1469a:	4281      	cmp	r1, r0
	list->tail = node;
   1469c:	bf08      	it	eq
   1469e:	6262      	streq	r2, [r4, #36]	; 0x24
   146a0:	f383 8811 	msr	BASEPRI, r3
   146a4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   146a8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   146ac:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   146b0:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   146b4:	4638      	mov	r0, r7
   146b6:	f00f fd0f 	bl	240d8 <k_queue_append>
		cb(conn, user_data, 0);
   146ba:	2200      	movs	r2, #0
   146bc:	4631      	mov	r1, r6
   146be:	4620      	mov	r0, r4
   146c0:	47a8      	blx	r5
	while (1) {
   146c2:	e7d7      	b.n	14674 <tx_notify+0xc>
   146c4:	20000860 	.word	0x20000860

000146c8 <conn_tx_destroy>:
{
   146c8:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   146ca:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   146ce:	2200      	movs	r2, #0
	tx->user_data = NULL;
   146d0:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   146d4:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   146d6:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   146d8:	4805      	ldr	r0, [pc, #20]	; (146f0 <conn_tx_destroy+0x28>)
   146da:	f00f fcfd 	bl	240d8 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   146de:	4631      	mov	r1, r6
   146e0:	4620      	mov	r0, r4
   146e2:	462b      	mov	r3, r5
   146e4:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   146e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   146ec:	4718      	bx	r3
   146ee:	bf00      	nop
   146f0:	20000860 	.word	0x20000860

000146f4 <send_frag>:
{
   146f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   146f8:	f8df 8150 	ldr.w	r8, [pc, #336]	; 1484c <send_frag+0x158>
{
   146fc:	461f      	mov	r7, r3
	if (bt_dev.le.acl_mtu) {
   146fe:	f8b8 3104 	ldrh.w	r3, [r8, #260]	; 0x104
	return NULL;
   14702:	2b00      	cmp	r3, #0
{
   14704:	4604      	mov	r4, r0
   14706:	460e      	mov	r6, r1
	return NULL;
   14708:	f508 7084 	add.w	r0, r8, #264	; 0x108
{
   1470c:	4615      	mov	r5, r2
	return NULL;
   1470e:	bf08      	it	eq
   14710:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   14712:	2200      	movs	r2, #0
   14714:	2300      	movs	r3, #0
   14716:	f006 ff15 	bl	1b544 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   1471a:	2800      	cmp	r0, #0
   1471c:	f040 8093 	bne.w	14846 <send_frag+0x152>
	if (frag) {
   14720:	2d00      	cmp	r5, #0
   14722:	d06f      	beq.n	14804 <send_frag+0x110>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14724:	f105 0a0c 	add.w	sl, r5, #12
   14728:	4650      	mov	r0, sl
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1472a:	f8b8 b104 	ldrh.w	fp, [r8, #260]	; 0x104
   1472e:	f00f f83f 	bl	237b0 <net_buf_simple_tailroom>
   14732:	4558      	cmp	r0, fp
   14734:	d960      	bls.n	147f8 <send_frag+0x104>
	return bt_dev.le.acl_mtu;
   14736:	f8b8 b104 	ldrh.w	fp, [r8, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1473a:	f856 1f0c 	ldr.w	r1, [r6, #12]!
   1473e:	465a      	mov	r2, fp
   14740:	4650      	mov	r0, sl
   14742:	f00e ffee 	bl	23722 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   14746:	4659      	mov	r1, fp
   14748:	4630      	mov	r0, r6
   1474a:	f00f f80d 	bl	23768 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   1474e:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   14750:	69ae      	ldr	r6, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   14752:	2b07      	cmp	r3, #7
   14754:	d174      	bne.n	14840 <send_frag+0x14c>
	__asm__ volatile(
   14756:	f04f 0340 	mov.w	r3, #64	; 0x40
   1475a:	f3ef 8211 	mrs	r2, BASEPRI
   1475e:	f383 8812 	msr	BASEPRI_MAX, r3
   14762:	f3bf 8f6f 	isb	sy
	if (tx) {
   14766:	2e00      	cmp	r6, #0
   14768:	d057      	beq.n	1481a <send_frag+0x126>
	parent->next = child;
   1476a:	2300      	movs	r3, #0
   1476c:	6033      	str	r3, [r6, #0]
	return list->tail;
   1476e:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   14770:	2b00      	cmp	r3, #0
   14772:	d14f      	bne.n	14814 <send_frag+0x120>
	list->head = node;
   14774:	e9c4 6605 	strd	r6, r6, [r4, #20]
	__asm__ volatile(
   14778:	f382 8811 	msr	BASEPRI, r2
   1477c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14780:	2104      	movs	r1, #4
   14782:	f105 000c 	add.w	r0, r5, #12
   14786:	f00e ffe7 	bl	23758 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1478a:	8823      	ldrh	r3, [r4, #0]
   1478c:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   14790:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   14794:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14796:	8a2b      	ldrh	r3, [r5, #16]
   14798:	3b04      	subs	r3, #4
   1479a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1479c:	2302      	movs	r3, #2
   1479e:	762b      	strb	r3, [r5, #24]
	return bt_send(buf);
   147a0:	4628      	mov	r0, r5
   147a2:	f7fe ff0b 	bl	135bc <bt_send>
	if (err) {
   147a6:	4607      	mov	r7, r0
   147a8:	b318      	cbz	r0, 147f2 <send_frag+0xfe>
	__asm__ volatile(
   147aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   147ae:	f3ef 8711 	mrs	r7, BASEPRI
   147b2:	f383 8812 	msr	BASEPRI_MAX, r3
   147b6:	f3bf 8f6f 	isb	sy
		if (tx) {
   147ba:	2e00      	cmp	r6, #0
   147bc:	d03a      	beq.n	14834 <send_frag+0x140>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   147be:	4631      	mov	r1, r6
   147c0:	f104 0014 	add.w	r0, r4, #20
   147c4:	f00c f856 	bl	20874 <sys_slist_find_and_remove>
	__asm__ volatile(
   147c8:	f387 8811 	msr	BASEPRI, r7
   147cc:	f3bf 8f6f 	isb	sy
		err = -EIO;
   147d0:	f06f 0704 	mvn.w	r7, #4
	if (bt_dev.le.acl_mtu) {
   147d4:	f8b8 3104 	ldrh.w	r3, [r8, #260]	; 0x104
	return NULL;
   147d8:	481d      	ldr	r0, [pc, #116]	; (14850 <send_frag+0x15c>)
   147da:	2b00      	cmp	r3, #0
   147dc:	bf08      	it	eq
   147de:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   147e0:	f006 fe8a 	bl	1b4f8 <z_impl_k_sem_give>
	if (tx) {
   147e4:	b12e      	cbz	r6, 147f2 <send_frag+0xfe>
		tx_data(buf)->tx = NULL;
   147e6:	2300      	movs	r3, #0
   147e8:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   147ea:	4631      	mov	r1, r6
   147ec:	4620      	mov	r0, r4
   147ee:	f7ff ff6b 	bl	146c8 <conn_tx_destroy>
}
   147f2:	4638      	mov	r0, r7
   147f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   147f8:	4650      	mov	r0, sl
   147fa:	f00e ffd9 	bl	237b0 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   147fe:	fa1f fb80 	uxth.w	fp, r0
   14802:	e79a      	b.n	1473a <send_frag+0x46>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   14804:	2200      	movs	r2, #0
   14806:	2300      	movs	r3, #0
   14808:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1480c:	f00e ff22 	bl	23654 <net_buf_get>
   14810:	4605      	mov	r5, r0
		frag = buf;
   14812:	e79c      	b.n	1474e <send_frag+0x5a>
	parent->next = child;
   14814:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14816:	61a6      	str	r6, [r4, #24]
}
   14818:	e7ae      	b.n	14778 <send_frag+0x84>
	return list->tail;
   1481a:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1481c:	b133      	cbz	r3, 1482c <send_frag+0x138>
			pending_no_cb = &tail_tx->pending_no_cb;
   1481e:	f103 090c 	add.w	r9, r3, #12
   14822:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14824:	3301      	adds	r3, #1
   14826:	f8c9 3000 	str.w	r3, [r9]
   1482a:	e7a5      	b.n	14778 <send_frag+0x84>
			pending_no_cb = &conn->pending_no_cb;
   1482c:	69e3      	ldr	r3, [r4, #28]
   1482e:	f104 091c 	add.w	r9, r4, #28
   14832:	e7f7      	b.n	14824 <send_frag+0x130>
			(*pending_no_cb)--;
   14834:	f8d9 3000 	ldr.w	r3, [r9]
   14838:	3b01      	subs	r3, #1
   1483a:	f8c9 3000 	str.w	r3, [r9]
   1483e:	e7c3      	b.n	147c8 <send_frag+0xd4>
		err = -ENOTCONN;
   14840:	f06f 077f 	mvn.w	r7, #127	; 0x7f
   14844:	e7c6      	b.n	147d4 <send_frag+0xe0>
		return -ENOBUFS;
   14846:	f06f 0768 	mvn.w	r7, #104	; 0x68
   1484a:	e7d2      	b.n	147f2 <send_frag+0xfe>
   1484c:	20000380 	.word	0x20000380
   14850:	20000488 	.word	0x20000488

00014854 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   14854:	4804      	ldr	r0, [pc, #16]	; (14868 <bt_conn_get_pkts+0x14>)
   14856:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   1485a:	2b00      	cmp	r3, #0
   1485c:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   14860:	bf08      	it	eq
   14862:	2000      	moveq	r0, #0
   14864:	4770      	bx	lr
   14866:	bf00      	nop
   14868:	20000380 	.word	0x20000380

0001486c <bt_conn_new>:
{
   1486c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1486e:	2200      	movs	r2, #0
   14870:	4604      	mov	r4, r0
   14872:	428a      	cmp	r2, r1
   14874:	d102      	bne.n	1487c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14876:	2400      	movs	r4, #0
}
   14878:	4620      	mov	r0, r4
   1487a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1487c:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   14880:	2001      	movs	r0, #1
   14882:	f3bf 8f5b 	dmb	ish
   14886:	e853 5f00 	ldrex	r5, [r3]
   1488a:	2d00      	cmp	r5, #0
   1488c:	d104      	bne.n	14898 <bt_conn_new+0x2c>
   1488e:	e843 0c00 	strex	ip, r0, [r3]
   14892:	f1bc 0f00 	cmp.w	ip, #0
   14896:	d1f6      	bne.n	14886 <bt_conn_new+0x1a>
   14898:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1489c:	d002      	beq.n	148a4 <bt_conn_new+0x38>
   1489e:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   148a0:	4402      	add	r2, r0
   148a2:	e7e6      	b.n	14872 <bt_conn_new+0x6>
	if (!conn) {
   148a4:	2c00      	cmp	r4, #0
   148a6:	d0e6      	beq.n	14876 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   148a8:	22b8      	movs	r2, #184	; 0xb8
   148aa:	2100      	movs	r1, #0
   148ac:	4620      	mov	r0, r4
   148ae:	f00b fb2f 	bl	1ff10 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   148b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   148b6:	4904      	ldr	r1, [pc, #16]	; (148c8 <bt_conn_new+0x5c>)
   148b8:	f00f fcee 	bl	24298 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   148bc:	4903      	ldr	r1, [pc, #12]	; (148cc <bt_conn_new+0x60>)
   148be:	f104 0028 	add.w	r0, r4, #40	; 0x28
   148c2:	f00f fca5 	bl	24210 <k_work_init>
	return conn;
   148c6:	e7d7      	b.n	14878 <bt_conn_new+0xc>
   148c8:	000150ad 	.word	0x000150ad
   148cc:	000208ed 	.word	0x000208ed

000148d0 <bt_conn_send_cb>:
{
   148d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   148d2:	461f      	mov	r7, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   148d4:	7acb      	ldrb	r3, [r1, #11]
   148d6:	2b07      	cmp	r3, #7
{
   148d8:	4606      	mov	r6, r0
   148da:	460d      	mov	r5, r1
   148dc:	4614      	mov	r4, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   148de:	d930      	bls.n	14942 <bt_conn_send_cb+0x72>
	if (conn->state != BT_CONN_CONNECTED) {
   148e0:	7b43      	ldrb	r3, [r0, #13]
   148e2:	2b07      	cmp	r3, #7
   148e4:	d11b      	bne.n	1491e <bt_conn_send_cb+0x4e>
	if (cb) {
   148e6:	b352      	cbz	r2, 1493e <bt_conn_send_cb+0x6e>
	return z_impl_z_current_get();
   148e8:	f007 fb00 	bl	1beec <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   148ec:	4b18      	ldr	r3, [pc, #96]	; (14950 <bt_conn_send_cb+0x80>)
   148ee:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   148f0:	4818      	ldr	r0, [pc, #96]	; (14954 <bt_conn_send_cb+0x84>)
   148f2:	bf07      	ittee	eq
   148f4:	2200      	moveq	r2, #0
   148f6:	2300      	moveq	r3, #0
   148f8:	f04f 32ff 	movne.w	r2, #4294967295
   148fc:	f04f 33ff 	movne.w	r3, #4294967295
   14900:	f006 fdc6 	bl	1b490 <z_impl_k_queue_get>
   14904:	4601      	mov	r1, r0
		if (!tx) {
   14906:	b1f8      	cbz	r0, 14948 <bt_conn_send_cb+0x78>
		if (conn->state != BT_CONN_CONNECTED) {
   14908:	7b73      	ldrb	r3, [r6, #13]
   1490a:	2b07      	cmp	r3, #7
   1490c:	f04f 0200 	mov.w	r2, #0
   14910:	d008      	beq.n	14924 <bt_conn_send_cb+0x54>
	tx->user_data = NULL;
   14912:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
   14916:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
   14918:	480e      	ldr	r0, [pc, #56]	; (14954 <bt_conn_send_cb+0x84>)
   1491a:	f00f fbdd 	bl	240d8 <k_queue_append>
		return -ENOTCONN;
   1491e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   14922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
   14924:	e9c0 4701 	strd	r4, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   14928:	60c2      	str	r2, [r0, #12]
	tx_data(buf)->is_cont = false;
   1492a:	2400      	movs	r4, #0
		tx_data(buf)->tx = tx;
   1492c:	61a9      	str	r1, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
   1492e:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   14932:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   14934:	4629      	mov	r1, r5
   14936:	f00e febc 	bl	236b2 <net_buf_put>
	return 0;
   1493a:	4620      	mov	r0, r4
   1493c:	e7f1      	b.n	14922 <bt_conn_send_cb+0x52>
   1493e:	4611      	mov	r1, r2
   14940:	e7f3      	b.n	1492a <bt_conn_send_cb+0x5a>
		return -EINVAL;
   14942:	f06f 0015 	mvn.w	r0, #21
   14946:	e7ec      	b.n	14922 <bt_conn_send_cb+0x52>
			return -ENOBUFS;
   14948:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1494c:	e7e9      	b.n	14922 <bt_conn_send_cb+0x52>
   1494e:	bf00      	nop
   14950:	20002530 	.word	0x20002530
   14954:	20000860 	.word	0x20000860

00014958 <bt_conn_prepare_events>:
{
   14958:	b570      	push	{r4, r5, r6, lr}
   1495a:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   1495c:	481d      	ldr	r0, [pc, #116]	; (149d4 <bt_conn_prepare_events+0x7c>)
   1495e:	f00f ff82 	bl	24866 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14962:	4620      	mov	r0, r4
   14964:	4b1b      	ldr	r3, [pc, #108]	; (149d4 <bt_conn_prepare_events+0x7c>)
   14966:	2200      	movs	r2, #0
   14968:	2101      	movs	r1, #1
   1496a:	f00f ff5f 	bl	2482c <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   1496e:	481a      	ldr	r0, [pc, #104]	; (149d8 <bt_conn_prepare_events+0x80>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14970:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   14974:	f00b ffa8 	bl	208c8 <atomic_get>
   14978:	b908      	cbnz	r0, 1497e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1497a:	2001      	movs	r0, #1
}
   1497c:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1497e:	4d17      	ldr	r5, [pc, #92]	; (149dc <bt_conn_prepare_events+0x84>)
   14980:	7b6b      	ldrb	r3, [r5, #13]
   14982:	b953      	cbnz	r3, 1499a <bt_conn_prepare_events+0x42>
   14984:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14988:	1d28      	adds	r0, r5, #4
   1498a:	f00b ff8e 	bl	208aa <atomic_and>
   1498e:	0643      	lsls	r3, r0, #25
   14990:	d503      	bpl.n	1499a <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   14992:	4628      	mov	r0, r5
   14994:	f00b ffb6 	bl	20904 <conn_cleanup>
		return -ENOTCONN;
   14998:	e7ef      	b.n	1497a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1499a:	7b6b      	ldrb	r3, [r5, #13]
   1499c:	2b07      	cmp	r3, #7
   1499e:	d1ec      	bne.n	1497a <bt_conn_prepare_events+0x22>
	if (bt_dev.le.acl_mtu) {
   149a0:	4b0f      	ldr	r3, [pc, #60]	; (149e0 <bt_conn_prepare_events+0x88>)
   149a2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   149a6:	2a00      	cmp	r2, #0
   149a8:	d0e7      	beq.n	1497a <bt_conn_prepare_events+0x22>
	return sem->count;
   149aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   149ae:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   149b0:	b159      	cbz	r1, 149ca <bt_conn_prepare_events+0x72>
   149b2:	b952      	cbnz	r2, 149ca <bt_conn_prepare_events+0x72>
		k_poll_event_init(&events[0],
   149b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   149b8:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   149ba:	4630      	mov	r0, r6
   149bc:	f00f ff36 	bl	2482c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   149c0:	2301      	movs	r3, #1
   149c2:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   149c6:	2002      	movs	r0, #2
	return ev_count;
   149c8:	e7d8      	b.n	1497c <bt_conn_prepare_events+0x24>
		k_poll_event_init(&events[0],
   149ca:	4b06      	ldr	r3, [pc, #24]	; (149e4 <bt_conn_prepare_events+0x8c>)
   149cc:	2200      	movs	r2, #0
   149ce:	2104      	movs	r1, #4
   149d0:	e7f3      	b.n	149ba <bt_conn_prepare_events+0x62>
   149d2:	bf00      	nop
   149d4:	20000560 	.word	0x20000560
   149d8:	20001a40 	.word	0x20001a40
   149dc:	20001988 	.word	0x20001988
   149e0:	20000380 	.word	0x20000380
   149e4:	200019c0 	.word	0x200019c0

000149e8 <bt_conn_lookup_handle>:
{
   149e8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   149ea:	2101      	movs	r1, #1
   149ec:	4801      	ldr	r0, [pc, #4]	; (149f4 <bt_conn_lookup_handle+0xc>)
   149ee:	f00c b814 	b.w	20a1a <conn_lookup_handle>
   149f2:	bf00      	nop
   149f4:	20001988 	.word	0x20001988

000149f8 <bt_conn_set_state>:
{
   149f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   149fc:	7b45      	ldrb	r5, [r0, #13]
   149fe:	428d      	cmp	r5, r1
{
   14a00:	4604      	mov	r4, r0
	if (conn->state == state) {
   14a02:	d046      	beq.n	14a92 <bt_conn_set_state+0x9a>
	conn->state = state;
   14a04:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14a06:	b155      	cbz	r5, 14a1e <bt_conn_set_state+0x26>
   14a08:	2d06      	cmp	r5, #6
   14a0a:	d00e      	beq.n	14a2a <bt_conn_set_state+0x32>
	switch (conn->state) {
   14a0c:	7b63      	ldrb	r3, [r4, #13]
   14a0e:	2b07      	cmp	r3, #7
   14a10:	d83f      	bhi.n	14a92 <bt_conn_set_state+0x9a>
   14a12:	e8df f003 	tbb	[pc, r3]
   14a16:	1140      	.short	0x1140
   14a18:	3e3e3e3e 	.word	0x3e3e3e3e
   14a1c:	3086      	.short	0x3086
		if (conn->type != BT_CONN_TYPE_ISO) {
   14a1e:	7883      	ldrb	r3, [r0, #2]
   14a20:	2b08      	cmp	r3, #8
   14a22:	d0f3      	beq.n	14a0c <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   14a24:	f00b ffde 	bl	209e4 <bt_conn_ref>
   14a28:	e7f0      	b.n	14a0c <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14a2a:	7883      	ldrb	r3, [r0, #2]
   14a2c:	2b01      	cmp	r3, #1
   14a2e:	d1ed      	bne.n	14a0c <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   14a30:	3058      	adds	r0, #88	; 0x58
   14a32:	f00f fc3f 	bl	242b4 <k_work_cancel_delayable>
   14a36:	e7e9      	b.n	14a0c <bt_conn_set_state+0x14>
	if (bt_dev.le.acl_mtu) {
   14a38:	4d5a      	ldr	r5, [pc, #360]	; (14ba4 <bt_conn_set_state+0x1ac>)
		tx->pending_no_cb = 0U;
   14a3a:	2700      	movs	r7, #0
	return NULL;
   14a3c:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   14a40:	f04f 0240 	mov.w	r2, #64	; 0x40
   14a44:	f3ef 8311 	mrs	r3, BASEPRI
   14a48:	f382 8812 	msr	BASEPRI_MAX, r2
   14a4c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14a50:	69e2      	ldr	r2, [r4, #28]
   14a52:	2a00      	cmp	r2, #0
   14a54:	f000 8082 	beq.w	14b5c <bt_conn_set_state+0x164>
			conn->pending_no_cb--;
   14a58:	3a01      	subs	r2, #1
   14a5a:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   14a5c:	f383 8811 	msr	BASEPRI, r3
   14a60:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   14a64:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   14a68:	2b00      	cmp	r3, #0
   14a6a:	bf14      	ite	ne
   14a6c:	4630      	movne	r0, r6
   14a6e:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   14a70:	f006 fd42 	bl	1b4f8 <z_impl_k_sem_give>
}
   14a74:	e7e4      	b.n	14a40 <bt_conn_set_state+0x48>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14a76:	78a3      	ldrb	r3, [r4, #2]
   14a78:	2b04      	cmp	r3, #4
   14a7a:	d00a      	beq.n	14a92 <bt_conn_set_state+0x9a>
	z_impl_k_queue_init(queue);
   14a7c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14a80:	f00f fb1e 	bl	240c0 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   14a84:	4848      	ldr	r0, [pc, #288]	; (14ba8 <bt_conn_set_state+0x1b0>)
   14a86:	2100      	movs	r1, #0
   14a88:	f007 fc5e 	bl	1c348 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14a8c:	2300      	movs	r3, #0
	list->tail = NULL;
   14a8e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
   14a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   14a96:	78a3      	ldrb	r3, [r4, #2]
   14a98:	2b04      	cmp	r3, #4
   14a9a:	d105      	bne.n	14aa8 <bt_conn_set_state+0xb0>
	old = atomic_dec(&conn->ref);
   14a9c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
   14aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_dec(&conn->ref);
   14aa4:	f00b bf16 	b.w	208d4 <atomic_dec.isra.0>
		switch (old_state) {
   14aa8:	3d01      	subs	r5, #1
   14aaa:	2d05      	cmp	r5, #5
   14aac:	d8f1      	bhi.n	14a92 <bt_conn_set_state+0x9a>
   14aae:	a301      	add	r3, pc, #4	; (adr r3, 14ab4 <bt_conn_set_state+0xbc>)
   14ab0:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   14ab4:	00014acd 	.word	0x00014acd
   14ab8:	00014b15 	.word	0x00014b15
   14abc:	00014a9d 	.word	0x00014a9d
   14ac0:	00014a9d 	.word	0x00014a9d
   14ac4:	00014b15 	.word	0x00014b15
   14ac8:	00014b15 	.word	0x00014b15
			tx_notify(conn);
   14acc:	4620      	mov	r0, r4
   14ace:	f7ff fdcb 	bl	14668 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14ad2:	78a3      	ldrb	r3, [r4, #2]
   14ad4:	2b01      	cmp	r3, #1
   14ad6:	d10a      	bne.n	14aee <bt_conn_set_state+0xf6>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   14ad8:	f104 0558 	add.w	r5, r4, #88	; 0x58
   14adc:	4628      	mov	r0, r5
   14ade:	f00f fbe7 	bl	242b0 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14ae2:	f010 0f0c 	tst.w	r0, #12
   14ae6:	d002      	beq.n	14aee <bt_conn_set_state+0xf6>
				k_work_cancel_delayable(&conn->deferred_work);
   14ae8:	4628      	mov	r0, r5
   14aea:	f00f fbe3 	bl	242b4 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14aee:	f3bf 8f5b 	dmb	ish
   14af2:	3404      	adds	r4, #4
   14af4:	e854 3f00 	ldrex	r3, [r4]
   14af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14afc:	e844 3200 	strex	r2, r3, [r4]
   14b00:	2a00      	cmp	r2, #0
   14b02:	d1f7      	bne.n	14af4 <bt_conn_set_state+0xfc>
   14b04:	f3bf 8f5b 	dmb	ish
   14b08:	4827      	ldr	r0, [pc, #156]	; (14ba8 <bt_conn_set_state+0x1b0>)
}
   14b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14b0e:	2100      	movs	r1, #0
   14b10:	f007 bc1a 	b.w	1c348 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   14b14:	7b23      	ldrb	r3, [r4, #12]
   14b16:	2b00      	cmp	r3, #0
   14b18:	d0c0      	beq.n	14a9c <bt_conn_set_state+0xa4>
				notify_connected(conn);
   14b1a:	4620      	mov	r0, r4
   14b1c:	f7ff fd86 	bl	1462c <notify_connected>
   14b20:	e7bc      	b.n	14a9c <bt_conn_set_state+0xa4>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14b22:	78a3      	ldrb	r3, [r4, #2]
   14b24:	2b01      	cmp	r3, #1
   14b26:	d1b4      	bne.n	14a92 <bt_conn_set_state+0x9a>
		    bt_dev.create_param.timeout != 0) {
   14b28:	4b1e      	ldr	r3, [pc, #120]	; (14ba4 <bt_conn_set_state+0x1ac>)
   14b2a:	8a9d      	ldrh	r5, [r3, #20]
		    conn->type == BT_CONN_TYPE_LE &&
   14b2c:	2d00      	cmp	r5, #0
   14b2e:	d0b0      	beq.n	14a92 <bt_conn_set_state+0x9a>
					K_MSEC(10 * bt_dev.create_param.timeout));
   14b30:	230a      	movs	r3, #10
   14b32:	435d      	muls	r5, r3
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   14b34:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   14b38:	f240 30e7 	movw	r0, #999	; 0x3e7
   14b3c:	2100      	movs	r1, #0
   14b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14b42:	2300      	movs	r3, #0
   14b44:	fbc5 0106 	smlal	r0, r1, r5, r6
   14b48:	f7eb fada 	bl	100 <__aeabi_uldivmod>
   14b4c:	4602      	mov	r2, r0
   14b4e:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   14b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   14b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   14b58:	f006 beb2 	b.w	1b8c0 <k_work_schedule>
	return list->head;
   14b5c:	6961      	ldr	r1, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14b5e:	b921      	cbnz	r1, 14b6a <bt_conn_set_state+0x172>
   14b60:	f383 8811 	msr	BASEPRI, r3
   14b64:	f3bf 8f6f 	isb	sy
		if (!node) {
   14b68:	e793      	b.n	14a92 <bt_conn_set_state+0x9a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14b6a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   14b6c:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   14b6e:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14b70:	4281      	cmp	r1, r0
	list->tail = node;
   14b72:	bf08      	it	eq
   14b74:	61a2      	streq	r2, [r4, #24]
   14b76:	f383 8811 	msr	BASEPRI, r3
   14b7a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14b7e:	f04f 0240 	mov.w	r2, #64	; 0x40
   14b82:	f3ef 8311 	mrs	r3, BASEPRI
   14b86:	f382 8812 	msr	BASEPRI_MAX, r2
   14b8a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14b8e:	68ca      	ldr	r2, [r1, #12]
   14b90:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14b92:	60cf      	str	r7, [r1, #12]
	__asm__ volatile(
   14b94:	f383 8811 	msr	BASEPRI, r3
   14b98:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   14b9c:	4620      	mov	r0, r4
   14b9e:	f7ff fd93 	bl	146c8 <conn_tx_destroy>
   14ba2:	e75f      	b.n	14a64 <bt_conn_set_state+0x6c>
   14ba4:	20000380 	.word	0x20000380
   14ba8:	20000560 	.word	0x20000560

00014bac <bt_conn_index>:
		index = conn - acl_conns;
   14bac:	4b03      	ldr	r3, [pc, #12]	; (14bbc <bt_conn_index+0x10>)
   14bae:	1ac0      	subs	r0, r0, r3
   14bb0:	4b03      	ldr	r3, [pc, #12]	; (14bc0 <bt_conn_index+0x14>)
   14bb2:	1180      	asrs	r0, r0, #6
   14bb4:	4358      	muls	r0, r3
}
   14bb6:	b2c0      	uxtb	r0, r0
   14bb8:	4770      	bx	lr
   14bba:	bf00      	nop
   14bbc:	20001988 	.word	0x20001988
   14bc0:	aaaaaaab 	.word	0xaaaaaaab

00014bc4 <bt_conn_create_pdu_timeout>:
{
   14bc4:	b538      	push	{r3, r4, r5, lr}
   14bc6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   14bc8:	4906      	ldr	r1, [pc, #24]	; (14be4 <bt_conn_create_pdu_timeout+0x20>)
   14bca:	2800      	cmp	r0, #0
   14bcc:	bf08      	it	eq
   14bce:	4608      	moveq	r0, r1
   14bd0:	f00e fd3b 	bl	2364a <net_buf_alloc_fixed>
	if (!buf) {
   14bd4:	4604      	mov	r4, r0
   14bd6:	b118      	cbz	r0, 14be0 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   14bd8:	1d29      	adds	r1, r5, #4
   14bda:	300c      	adds	r0, #12
   14bdc:	f00e fd97 	bl	2370e <net_buf_simple_reserve>
}
   14be0:	4620      	mov	r0, r4
   14be2:	bd38      	pop	{r3, r4, r5, pc}
   14be4:	20000878 	.word	0x20000878

00014be8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   14be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14bea:	1d03      	adds	r3, r0, #4
{
   14bec:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14bee:	4618      	mov	r0, r3
   14bf0:	f00b fe6a 	bl	208c8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14bf4:	0582      	lsls	r2, r0, #22
   14bf6:	d512      	bpl.n	14c1e <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   14bf8:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14bfc:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   14c00:	4291      	cmp	r1, r2
   14c02:	d80c      	bhi.n	14c1e <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   14c04:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   14c08:	4291      	cmp	r1, r2
   14c0a:	d308      	bcc.n	14c1e <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14c0c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   14c10:	4291      	cmp	r1, r2
   14c12:	d104      	bne.n	14c1e <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14c14:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14c18:	4618      	mov	r0, r3
   14c1a:	f00b fe46 	bl	208aa <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14c1e:	4b10      	ldr	r3, [pc, #64]	; (14c60 <notify_le_param_updated+0x78>)
   14c20:	681d      	ldr	r5, [r3, #0]
   14c22:	b925      	cbnz	r5, 14c2e <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14c24:	4d0f      	ldr	r5, [pc, #60]	; (14c64 <notify_le_param_updated+0x7c>)
   14c26:	4f10      	ldr	r7, [pc, #64]	; (14c68 <notify_le_param_updated+0x80>)
   14c28:	42bd      	cmp	r5, r7
   14c2a:	d30c      	bcc.n	14c46 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   14c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   14c2e:	68ee      	ldr	r6, [r5, #12]
   14c30:	b13e      	cbz	r6, 14c42 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   14c32:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   14c36:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   14c3a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   14c3e:	4620      	mov	r0, r4
   14c40:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   14c42:	69ad      	ldr	r5, [r5, #24]
   14c44:	e7ed      	b.n	14c22 <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   14c46:	68ee      	ldr	r6, [r5, #12]
   14c48:	b13e      	cbz	r6, 14c5a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   14c4a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   14c4e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   14c52:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   14c56:	4620      	mov	r0, r4
   14c58:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14c5a:	351c      	adds	r5, #28
   14c5c:	e7e4      	b.n	14c28 <notify_le_param_updated+0x40>
   14c5e:	bf00      	nop
   14c60:	20002bd4 	.word	0x20002bd4
   14c64:	00024bb8 	.word	0x00024bb8
   14c68:	00024bd4 	.word	0x00024bd4

00014c6c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   14c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c70:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14c72:	4608      	mov	r0, r1
{
   14c74:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   14c76:	f00b fbec 	bl	20452 <bt_le_conn_params_valid>
   14c7a:	4605      	mov	r5, r0
   14c7c:	b918      	cbnz	r0, 14c86 <le_param_req+0x1a>
		return false;
   14c7e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   14c80:	4628      	mov	r0, r5
   14c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   14c86:	4b13      	ldr	r3, [pc, #76]	; (14cd4 <le_param_req+0x68>)
   14c88:	681e      	ldr	r6, [r3, #0]
   14c8a:	b946      	cbnz	r6, 14c9e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14c8c:	4e12      	ldr	r6, [pc, #72]	; (14cd8 <le_param_req+0x6c>)
   14c8e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 14cdc <le_param_req+0x70>
   14c92:	4546      	cmp	r6, r8
   14c94:	d2f4      	bcs.n	14c80 <le_param_req+0x14>
		if (!cb->le_param_req) {
   14c96:	68b3      	ldr	r3, [r6, #8]
   14c98:	b983      	cbnz	r3, 14cbc <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14c9a:	361c      	adds	r6, #28
   14c9c:	e7f9      	b.n	14c92 <le_param_req+0x26>
		if (!cb->le_param_req) {
   14c9e:	68b3      	ldr	r3, [r6, #8]
   14ca0:	b90b      	cbnz	r3, 14ca6 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   14ca2:	69b6      	ldr	r6, [r6, #24]
   14ca4:	e7f1      	b.n	14c8a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   14ca6:	4621      	mov	r1, r4
   14ca8:	4638      	mov	r0, r7
   14caa:	4798      	blx	r3
   14cac:	2800      	cmp	r0, #0
   14cae:	d0e6      	beq.n	14c7e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14cb0:	4620      	mov	r0, r4
   14cb2:	f00b fbce 	bl	20452 <bt_le_conn_params_valid>
   14cb6:	2800      	cmp	r0, #0
   14cb8:	d1f3      	bne.n	14ca2 <le_param_req+0x36>
   14cba:	e7e0      	b.n	14c7e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   14cbc:	4621      	mov	r1, r4
   14cbe:	4638      	mov	r0, r7
   14cc0:	4798      	blx	r3
   14cc2:	2800      	cmp	r0, #0
   14cc4:	d0db      	beq.n	14c7e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14cc6:	4620      	mov	r0, r4
   14cc8:	f00b fbc3 	bl	20452 <bt_le_conn_params_valid>
   14ccc:	2800      	cmp	r0, #0
   14cce:	d1e4      	bne.n	14c9a <le_param_req+0x2e>
   14cd0:	e7d5      	b.n	14c7e <le_param_req+0x12>
   14cd2:	bf00      	nop
   14cd4:	20002bd4 	.word	0x20002bd4
   14cd8:	00024bb8 	.word	0x00024bb8
   14cdc:	00024bd4 	.word	0x00024bd4

00014ce0 <bt_conn_identity_resolved>:

	return false;
}

void bt_conn_identity_resolved(struct bt_conn *conn)
{
   14ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14ce4:	78c3      	ldrb	r3, [r0, #3]
{
   14ce6:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14ce8:	b973      	cbnz	r3, 14d08 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   14cea:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14cee:	4b10      	ldr	r3, [pc, #64]	; (14d30 <bt_conn_identity_resolved+0x50>)
   14cf0:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14cf2:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   14cf6:	b955      	cbnz	r5, 14d0e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14cf8:	4d0e      	ldr	r5, [pc, #56]	; (14d34 <bt_conn_identity_resolved+0x54>)
   14cfa:	4f0f      	ldr	r7, [pc, #60]	; (14d38 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14cfc:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14d00:	42bd      	cmp	r5, r7
   14d02:	d30c      	bcc.n	14d1e <bt_conn_identity_resolved+0x3e>
		}
	}
}
   14d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   14d08:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   14d0c:	e7ef      	b.n	14cee <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   14d0e:	692b      	ldr	r3, [r5, #16]
   14d10:	b11b      	cbz	r3, 14d1a <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14d12:	463a      	mov	r2, r7
   14d14:	4631      	mov	r1, r6
   14d16:	4620      	mov	r0, r4
   14d18:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14d1a:	69ad      	ldr	r5, [r5, #24]
   14d1c:	e7eb      	b.n	14cf6 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   14d1e:	692b      	ldr	r3, [r5, #16]
   14d20:	b11b      	cbz	r3, 14d2a <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14d22:	4642      	mov	r2, r8
   14d24:	4631      	mov	r1, r6
   14d26:	4620      	mov	r0, r4
   14d28:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14d2a:	351c      	adds	r5, #28
   14d2c:	e7e8      	b.n	14d00 <bt_conn_identity_resolved+0x20>
   14d2e:	bf00      	nop
   14d30:	20002bd4 	.word	0x20002bd4
   14d34:	00024bb8 	.word	0x00024bb8
   14d38:	00024bd4 	.word	0x00024bd4

00014d3c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   14d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   14d3e:	7a43      	ldrb	r3, [r0, #9]
   14d40:	7283      	strb	r3, [r0, #10]
{
   14d42:	4604      	mov	r4, r0
   14d44:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   14d46:	f00c f80c 	bl	20d62 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14d4a:	4b0c      	ldr	r3, [pc, #48]	; (14d7c <bt_conn_security_changed+0x40>)
   14d4c:	681d      	ldr	r5, [r3, #0]
   14d4e:	b925      	cbnz	r5, 14d5a <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14d50:	4d0b      	ldr	r5, [pc, #44]	; (14d80 <bt_conn_security_changed+0x44>)
   14d52:	4f0c      	ldr	r7, [pc, #48]	; (14d84 <bt_conn_security_changed+0x48>)
   14d54:	42bd      	cmp	r5, r7
   14d56:	d308      	bcc.n	14d6a <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   14d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   14d5a:	696b      	ldr	r3, [r5, #20]
   14d5c:	b11b      	cbz	r3, 14d66 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   14d5e:	7a61      	ldrb	r1, [r4, #9]
   14d60:	4632      	mov	r2, r6
   14d62:	4620      	mov	r0, r4
   14d64:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14d66:	69ad      	ldr	r5, [r5, #24]
   14d68:	e7f1      	b.n	14d4e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   14d6a:	696b      	ldr	r3, [r5, #20]
   14d6c:	b11b      	cbz	r3, 14d76 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   14d6e:	7a61      	ldrb	r1, [r4, #9]
   14d70:	4632      	mov	r2, r6
   14d72:	4620      	mov	r0, r4
   14d74:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14d76:	351c      	adds	r5, #28
   14d78:	e7ec      	b.n	14d54 <bt_conn_security_changed+0x18>
   14d7a:	bf00      	nop
   14d7c:	20002bd4 	.word	0x20002bd4
   14d80:	00024bb8 	.word	0x00024bb8
   14d84:	00024bd4 	.word	0x00024bd4

00014d88 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   14d88:	b570      	push	{r4, r5, r6, lr}
   14d8a:	4606      	mov	r6, r0
   14d8c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   14d8e:	480a      	ldr	r0, [pc, #40]	; (14db8 <bt_conn_add_le+0x30>)
   14d90:	2101      	movs	r1, #1
   14d92:	f7ff fd6b 	bl	1486c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   14d96:	4604      	mov	r4, r0
   14d98:	b160      	cbz	r0, 14db4 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   14d9a:	7206      	strb	r6, [r0, #8]
   14d9c:	2207      	movs	r2, #7
   14d9e:	4629      	mov	r1, r5
   14da0:	3088      	adds	r0, #136	; 0x88
   14da2:	f00b f8aa 	bl	1fefa <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   14da6:	2301      	movs	r3, #1
   14da8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   14daa:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   14dac:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   14dae:	4b03      	ldr	r3, [pc, #12]	; (14dbc <bt_conn_add_le+0x34>)
   14db0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   14db4:	4620      	mov	r0, r4
   14db6:	bd70      	pop	{r4, r5, r6, pc}
   14db8:	20001988 	.word	0x20001988
   14dbc:	00280018 	.word	0x00280018

00014dc0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   14dc0:	b570      	push	{r4, r5, r6, lr}
   14dc2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14dc4:	480b      	ldr	r0, [pc, #44]	; (14df4 <bt_conn_lookup_addr_le+0x34>)
{
   14dc6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14dc8:	f00b fe0c 	bl	209e4 <bt_conn_ref>
   14dcc:	4604      	mov	r4, r0

		if (!conn) {
   14dce:	b130      	cbz	r0, 14dde <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14dd0:	7883      	ldrb	r3, [r0, #2]
   14dd2:	2b01      	cmp	r3, #1
   14dd4:	d005      	beq.n	14de2 <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
   14dd6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   14dda:	f00b fd7b 	bl	208d4 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
   14dde:	2400      	movs	r4, #0
   14de0:	e005      	b.n	14dee <bt_conn_lookup_addr_le+0x2e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   14de2:	4632      	mov	r2, r6
   14de4:	4629      	mov	r1, r5
   14de6:	f00b feed 	bl	20bc4 <bt_conn_is_peer_addr_le>
   14dea:	2800      	cmp	r0, #0
   14dec:	d0f3      	beq.n	14dd6 <bt_conn_lookup_addr_le+0x16>
}
   14dee:	4620      	mov	r0, r4
   14df0:	bd70      	pop	{r4, r5, r6, pc}
   14df2:	bf00      	nop
   14df4:	20001988 	.word	0x20001988

00014df8 <conn_le_create_common_checks>:
}
#endif /* defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

static int conn_le_create_common_checks(const bt_addr_le_t *peer,
					const struct bt_le_conn_param *conn_param)
{
   14df8:	b538      	push	{r3, r4, r5, lr}
   14dfa:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14dfc:	4814      	ldr	r0, [pc, #80]	; (14e50 <conn_le_create_common_checks+0x58>)
   14dfe:	f00b fd63 	bl	208c8 <atomic_get>

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14e02:	0740      	lsls	r0, r0, #29
   14e04:	d402      	bmi.n	14e0c <conn_le_create_common_checks+0x14>
		return -EAGAIN;
   14e06:	f06f 000a 	mvn.w	r0, #10
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
		return -EINVAL;
	}

	return 0;
}
   14e0a:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   14e0c:	4608      	mov	r0, r1
   14e0e:	f00b fb20 	bl	20452 <bt_le_conn_params_valid>
   14e12:	b910      	cbnz	r0, 14e1a <conn_le_create_common_checks+0x22>
		return -EINVAL;
   14e14:	f06f 0015 	mvn.w	r0, #21
   14e18:	e7f7      	b.n	14e0a <conn_le_create_common_checks+0x12>
   14e1a:	480d      	ldr	r0, [pc, #52]	; (14e50 <conn_le_create_common_checks+0x58>)
   14e1c:	f00b fd54 	bl	208c8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14e20:	0602      	lsls	r2, r0, #24
   14e22:	d4f0      	bmi.n	14e06 <conn_le_create_common_checks+0xe>
   14e24:	480a      	ldr	r0, [pc, #40]	; (14e50 <conn_le_create_common_checks+0x58>)
   14e26:	f00b fd4f 	bl	208c8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   14e2a:	04c3      	lsls	r3, r0, #19
   14e2c:	f3c0 3500 	ubfx	r5, r0, #12, #1
   14e30:	d40a      	bmi.n	14e48 <conn_le_create_common_checks+0x50>
	if (!bt_id_scan_random_addr_check()) {
   14e32:	f00b fcfc 	bl	2082e <bt_id_scan_random_addr_check>
   14e36:	2800      	cmp	r0, #0
   14e38:	d0ec      	beq.n	14e14 <conn_le_create_common_checks+0x1c>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   14e3a:	4621      	mov	r1, r4
   14e3c:	4628      	mov	r0, r5
   14e3e:	f00b fee1 	bl	20c04 <bt_conn_exists_le>
   14e42:	2800      	cmp	r0, #0
   14e44:	d0e1      	beq.n	14e0a <conn_le_create_common_checks+0x12>
   14e46:	e7e5      	b.n	14e14 <conn_le_create_common_checks+0x1c>
		return -EALREADY;
   14e48:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14e4c:	e7dd      	b.n	14e0a <conn_le_create_common_checks+0x12>
   14e4e:	bf00      	nop
   14e50:	20000454 	.word	0x20000454

00014e54 <bt_conn_lookup_state_le>:
{
   14e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e56:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14e58:	480f      	ldr	r0, [pc, #60]	; (14e98 <bt_conn_lookup_state_le+0x44>)
{
   14e5a:	460e      	mov	r6, r1
   14e5c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14e5e:	f00b fdc1 	bl	209e4 <bt_conn_ref>
		if (!conn) {
   14e62:	4604      	mov	r4, r0
   14e64:	b130      	cbz	r0, 14e74 <bt_conn_lookup_state_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   14e66:	7883      	ldrb	r3, [r0, #2]
   14e68:	2b01      	cmp	r3, #1
   14e6a:	d005      	beq.n	14e78 <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
   14e6c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   14e70:	f00b fd30 	bl	208d4 <atomic_dec.isra.0>
	return NULL;
   14e74:	2400      	movs	r4, #0
   14e76:	e00c      	b.n	14e92 <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   14e78:	b12e      	cbz	r6, 14e86 <bt_conn_lookup_state_le+0x32>
   14e7a:	4632      	mov	r2, r6
   14e7c:	4629      	mov	r1, r5
   14e7e:	f00b fea1 	bl	20bc4 <bt_conn_is_peer_addr_le>
   14e82:	2800      	cmp	r0, #0
   14e84:	d0f2      	beq.n	14e6c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   14e86:	7b63      	ldrb	r3, [r4, #13]
   14e88:	42bb      	cmp	r3, r7
   14e8a:	d1ef      	bne.n	14e6c <bt_conn_lookup_state_le+0x18>
   14e8c:	7a23      	ldrb	r3, [r4, #8]
   14e8e:	42ab      	cmp	r3, r5
   14e90:	d1ec      	bne.n	14e6c <bt_conn_lookup_state_le+0x18>
}
   14e92:	4620      	mov	r0, r4
   14e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e96:	bf00      	nop
   14e98:	20001988 	.word	0x20001988

00014e9c <bt_conn_le_create>:
	return conn;
}

int bt_conn_le_create(const bt_addr_le_t *peer, const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param, struct bt_conn **ret_conn)
{
   14e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ea0:	460f      	mov	r7, r1
	struct bt_conn *conn;
	int err;

	err = conn_le_create_common_checks(peer, conn_param);
   14ea2:	4611      	mov	r1, r2
{
   14ea4:	4605      	mov	r5, r0
   14ea6:	4614      	mov	r4, r2
   14ea8:	4698      	mov	r8, r3
	err = conn_le_create_common_checks(peer, conn_param);
   14eaa:	f7ff ffa5 	bl	14df8 <conn_le_create_common_checks>
	if (err) {
   14eae:	4606      	mov	r6, r0
   14eb0:	2800      	cmp	r0, #0
   14eb2:	d136      	bne.n	14f22 <bt_conn_le_create+0x86>

	if (!create_param_validate(create_param)) {
		return -EINVAL;
	}

	conn = conn_le_create_helper(peer, conn_param);
   14eb4:	4621      	mov	r1, r4
   14eb6:	4628      	mov	r0, r5
   14eb8:	f00b fe5f 	bl	20b7a <conn_le_create_helper>
	if (!conn) {
   14ebc:	4604      	mov	r4, r0
   14ebe:	2800      	cmp	r0, #0
   14ec0:	d04a      	beq.n	14f58 <bt_conn_le_create+0xbc>
	bt_dev.create_param = *param;
   14ec2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   14ec6:	4d26      	ldr	r5, [pc, #152]	; (14f60 <bt_conn_le_create+0xc4>)
   14ec8:	f105 0c08 	add.w	ip, r5, #8
   14ecc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   14ed0:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   14ed2:	2b00      	cmp	r3, #0
   14ed4:	bf08      	it	eq
   14ed6:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   14eda:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   14edc:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   14ede:	b903      	cbnz	r3, 14ee2 <bt_conn_le_create+0x46>
   14ee0:	89ab      	ldrh	r3, [r5, #12]
   14ee2:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   14ee4:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   14ee6:	b903      	cbnz	r3, 14eea <bt_conn_le_create+0x4e>
   14ee8:	89eb      	ldrh	r3, [r5, #14]
	}

	create_param_setup(create_param);

#if defined(CONFIG_BT_SMP)
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14eea:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
	bt_dev.create_param.window_coded =
   14eee:	826b      	strh	r3, [r5, #18]
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14ef0:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   14ef4:	429a      	cmp	r2, r3
   14ef6:	d917      	bls.n	14f28 <bt_conn_le_create+0x8c>
		/* Use host-based identity resolving. */
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   14ef8:	2102      	movs	r1, #2
   14efa:	4620      	mov	r0, r4
   14efc:	f7ff fd7c 	bl	149f8 <bt_conn_set_state>

		err = bt_le_scan_update(true);
   14f00:	2001      	movs	r0, #1
   14f02:	f7ff f8b9 	bl	14078 <bt_le_scan_update>
		if (err) {
   14f06:	4605      	mov	r5, r0
   14f08:	b148      	cbz	r0, 14f1e <bt_conn_le_create+0x82>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14f0a:	4620      	mov	r0, r4
   14f0c:	2100      	movs	r1, #0
   14f0e:	f7ff fd73 	bl	149f8 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   14f12:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   14f16:	f00b fcdd 	bl	208d4 <atomic_dec.isra.0>
		conn->err = 0;
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
		bt_conn_unref(conn);

		bt_le_scan_update(false);
		return err;
   14f1a:	462e      	mov	r6, r5
   14f1c:	e001      	b.n	14f22 <bt_conn_le_create+0x86>
		*ret_conn = conn;
   14f1e:	f8c8 4000 	str.w	r4, [r8]
	}

	*ret_conn = conn;
	return 0;
}
   14f22:	4630      	mov	r0, r6
   14f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   14f28:	2106      	movs	r1, #6
   14f2a:	4620      	mov	r0, r4
   14f2c:	f7ff fd64 	bl	149f8 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   14f30:	4620      	mov	r0, r4
   14f32:	f7fe f993 	bl	1325c <bt_le_create_conn>
	if (err) {
   14f36:	4605      	mov	r5, r0
   14f38:	2800      	cmp	r0, #0
   14f3a:	d0f0      	beq.n	14f1e <bt_conn_le_create+0x82>
		conn->err = 0;
   14f3c:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14f3e:	4620      	mov	r0, r4
		conn->err = 0;
   14f40:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14f42:	4631      	mov	r1, r6
   14f44:	f7ff fd58 	bl	149f8 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   14f48:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   14f4c:	f00b fcc2 	bl	208d4 <atomic_dec.isra.0>
		bt_le_scan_update(false);
   14f50:	4630      	mov	r0, r6
   14f52:	f7ff f891 	bl	14078 <bt_le_scan_update>
   14f56:	e7e0      	b.n	14f1a <bt_conn_le_create+0x7e>
		return -ENOMEM;
   14f58:	f06f 060b 	mvn.w	r6, #11
   14f5c:	e7e1      	b.n	14f22 <bt_conn_le_create+0x86>
   14f5e:	bf00      	nop
   14f60:	20000380 	.word	0x20000380

00014f64 <bt_le_set_auto_conn>:
}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   14f64:	b570      	push	{r4, r5, r6, lr}
   14f66:	4606      	mov	r6, r0
   14f68:	4835      	ldr	r0, [pc, #212]	; (15040 <bt_le_set_auto_conn+0xdc>)
   14f6a:	f00b fcad 	bl	208c8 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14f6e:	0740      	lsls	r0, r0, #29
{
   14f70:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14f72:	d55e      	bpl.n	15032 <bt_le_set_auto_conn+0xce>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   14f74:	b929      	cbnz	r1, 14f82 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   14f76:	f00b fc5a 	bl	2082e <bt_id_scan_random_addr_check>
   14f7a:	b940      	cbnz	r0, 14f8e <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   14f7c:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   14f80:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   14f82:	4608      	mov	r0, r1
   14f84:	f00b fa65 	bl	20452 <bt_le_conn_params_valid>
   14f88:	2800      	cmp	r0, #0
   14f8a:	d1f4      	bne.n	14f76 <bt_le_set_auto_conn+0x12>
   14f8c:	e7f6      	b.n	14f7c <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   14f8e:	4631      	mov	r1, r6
   14f90:	2000      	movs	r0, #0
   14f92:	f7ff ff15 	bl	14dc0 <bt_conn_lookup_addr_le>
	if (!conn) {
   14f96:	4604      	mov	r4, r0
   14f98:	b928      	cbnz	r0, 14fa6 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   14f9a:	4631      	mov	r1, r6
   14f9c:	f7ff fef4 	bl	14d88 <bt_conn_add_le>
		if (!conn) {
   14fa0:	4604      	mov	r4, r0
   14fa2:	2800      	cmp	r0, #0
   14fa4:	d048      	beq.n	15038 <bt_le_set_auto_conn+0xd4>
		if (!atomic_test_and_set_bit(conn->flags,
   14fa6:	1d20      	adds	r0, r4, #4
	old = atomic_dec(&conn->ref);
   14fa8:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
	if (param) {
   14fac:	b385      	cbz	r5, 15010 <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
   14fae:	882b      	ldrh	r3, [r5, #0]
   14fb0:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   14fb4:	886b      	ldrh	r3, [r5, #2]
   14fb6:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   14fba:	88ab      	ldrh	r3, [r5, #4]
   14fbc:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   14fc0:	88eb      	ldrh	r3, [r5, #6]
   14fc2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
   14fc6:	f3bf 8f5b 	dmb	ish
   14fca:	e850 3f00 	ldrex	r3, [r0]
   14fce:	f043 0201 	orr.w	r2, r3, #1
   14fd2:	e840 2100 	strex	r1, r2, [r0]
   14fd6:	2900      	cmp	r1, #0
   14fd8:	d1f7      	bne.n	14fca <bt_le_set_auto_conn+0x66>
   14fda:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
   14fde:	07d9      	lsls	r1, r3, #31
   14fe0:	d402      	bmi.n	14fe8 <bt_le_set_auto_conn+0x84>
			bt_conn_ref(conn);
   14fe2:	4620      	mov	r0, r4
   14fe4:	f00b fcfe 	bl	209e4 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   14fe8:	7b63      	ldrb	r3, [r4, #13]
   14fea:	b963      	cbnz	r3, 15006 <bt_le_set_auto_conn+0xa2>
   14fec:	4814      	ldr	r0, [pc, #80]	; (15040 <bt_le_set_auto_conn+0xdc>)
   14fee:	f00b fc6b 	bl	208c8 <atomic_get>
   14ff2:	0743      	lsls	r3, r0, #29
   14ff4:	d507      	bpl.n	15006 <bt_le_set_auto_conn+0xa2>
		if (param) {
   14ff6:	b11d      	cbz	r5, 15000 <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   14ff8:	2102      	movs	r1, #2
   14ffa:	4620      	mov	r0, r4
   14ffc:	f7ff fcfc 	bl	149f8 <bt_conn_set_state>
		bt_le_scan_update(false);
   15000:	2000      	movs	r0, #0
   15002:	f7ff f839 	bl	14078 <bt_le_scan_update>
	old = atomic_dec(&conn->ref);
   15006:	4630      	mov	r0, r6
   15008:	f00b fc64 	bl	208d4 <atomic_dec.isra.0>
	return 0;
   1500c:	2000      	movs	r0, #0
   1500e:	e7b7      	b.n	14f80 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15010:	f06f 0101 	mvn.w	r1, #1
   15014:	f00b fc49 	bl	208aa <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   15018:	07c2      	lsls	r2, r0, #31
   1501a:	d5e5      	bpl.n	14fe8 <bt_le_set_auto_conn+0x84>
	old = atomic_dec(&conn->ref);
   1501c:	4630      	mov	r0, r6
   1501e:	f00b fc59 	bl	208d4 <atomic_dec.isra.0>
			if (conn->state == BT_CONN_CONNECTING_SCAN) {
   15022:	7b63      	ldrb	r3, [r4, #13]
   15024:	2b02      	cmp	r3, #2
   15026:	d1df      	bne.n	14fe8 <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15028:	4629      	mov	r1, r5
   1502a:	4620      	mov	r0, r4
   1502c:	f7ff fce4 	bl	149f8 <bt_conn_set_state>
   15030:	e7da      	b.n	14fe8 <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
   15032:	f06f 000a 	mvn.w	r0, #10
   15036:	e7a3      	b.n	14f80 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   15038:	f06f 000b 	mvn.w	r0, #11
   1503c:	e7a0      	b.n	14f80 <bt_le_set_auto_conn+0x1c>
   1503e:	bf00      	nop
   15040:	20000454 	.word	0x20000454

00015044 <send_conn_le_param_update>:
{
   15044:	b538      	push	{r3, r4, r5, lr}
   15046:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15048:	4608      	mov	r0, r1
{
   1504a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1504c:	f00b fa01 	bl	20452 <bt_le_conn_params_valid>
   15050:	b338      	cbz	r0, 150a2 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15052:	4b15      	ldr	r3, [pc, #84]	; (150a8 <send_conn_le_param_update+0x64>)
   15054:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   15058:	0799      	lsls	r1, r3, #30
   1505a:	d407      	bmi.n	1506c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1505c:	78e3      	ldrb	r3, [r4, #3]
   1505e:	b173      	cbz	r3, 1507e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   15060:	4629      	mov	r1, r5
   15062:	4620      	mov	r0, r4
}
   15064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15068:	f000 b9a2 	b.w	153b0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1506c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15070:	079a      	lsls	r2, r3, #30
   15072:	d5f3      	bpl.n	1505c <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15074:	1d20      	adds	r0, r4, #4
   15076:	f00b fc27 	bl	208c8 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1507a:	0543      	lsls	r3, r0, #21
   1507c:	d4ee      	bmi.n	1505c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1507e:	4629      	mov	r1, r5
   15080:	4620      	mov	r0, r4
   15082:	f00b fe01 	bl	20c88 <bt_conn_le_conn_update>
		if (rc == 0) {
   15086:	b958      	cbnz	r0, 150a0 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   15088:	882b      	ldrh	r3, [r5, #0]
   1508a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1508e:	886b      	ldrh	r3, [r5, #2]
   15090:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   15094:	88ab      	ldrh	r3, [r5, #4]
   15096:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1509a:	88eb      	ldrh	r3, [r5, #6]
   1509c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   150a0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   150a2:	f06f 0015 	mvn.w	r0, #21
   150a6:	e7fb      	b.n	150a0 <send_conn_le_param_update+0x5c>
   150a8:	20000380 	.word	0x20000380

000150ac <deferred_work>:
{
   150ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   150ae:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   150b2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   150b4:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   150b8:	bb03      	cbnz	r3, 150fc <deferred_work+0x50>
		bt_l2cap_disconnected(conn);
   150ba:	4630      	mov	r0, r6
   150bc:	f00b fe39 	bl	20d32 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   150c0:	4b27      	ldr	r3, [pc, #156]	; (15160 <deferred_work+0xb4>)
   150c2:	681d      	ldr	r5, [r3, #0]
   150c4:	b955      	cbnz	r5, 150dc <deferred_work+0x30>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   150c6:	4d27      	ldr	r5, [pc, #156]	; (15164 <deferred_work+0xb8>)
   150c8:	4f27      	ldr	r7, [pc, #156]	; (15168 <deferred_work+0xbc>)
   150ca:	42bd      	cmp	r5, r7
   150cc:	d30e      	bcc.n	150ec <deferred_work+0x40>
	old = atomic_dec(&conn->ref);
   150ce:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   150d2:	b003      	add	sp, #12
   150d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	old = atomic_dec(&conn->ref);
   150d8:	f00b bbfc 	b.w	208d4 <atomic_dec.isra.0>
		if (cb->disconnected) {
   150dc:	686b      	ldr	r3, [r5, #4]
   150de:	b11b      	cbz	r3, 150e8 <deferred_work+0x3c>
			cb->disconnected(conn, conn->err);
   150e0:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   150e4:	4630      	mov	r0, r6
   150e6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   150e8:	69ad      	ldr	r5, [r5, #24]
   150ea:	e7eb      	b.n	150c4 <deferred_work+0x18>
		if (cb->disconnected) {
   150ec:	686b      	ldr	r3, [r5, #4]
   150ee:	b11b      	cbz	r3, 150f8 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
   150f0:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   150f4:	4630      	mov	r0, r6
   150f6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   150f8:	351c      	adds	r5, #28
   150fa:	e7e6      	b.n	150ca <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   150fc:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15100:	2b01      	cmp	r3, #1
   15102:	d12a      	bne.n	1515a <deferred_work+0xae>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15104:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   15108:	b923      	cbnz	r3, 15114 <deferred_work+0x68>
}
   1510a:	b003      	add	sp, #12
   1510c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
   15110:	f7fe b906 	b.w	13320 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   15114:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15118:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1511c:	4628      	mov	r0, r5
   1511e:	f00b fbc4 	bl	208aa <atomic_and>
   15122:	0583      	lsls	r3, r0, #22
   15124:	d50d      	bpl.n	15142 <deferred_work+0x96>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15126:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15128:	9300      	str	r3, [sp, #0]
		err = send_conn_le_param_update(conn, param);
   1512a:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1512c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1512e:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
   15130:	4630      	mov	r0, r6
   15132:	f7ff ff87 	bl	15044 <send_conn_le_param_update>
		if (!err) {
   15136:	b920      	cbnz	r0, 15142 <deferred_work+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15138:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1513c:	4628      	mov	r0, r5
   1513e:	f00b fbb4 	bl	208aa <atomic_and>
   15142:	f3bf 8f5b 	dmb	ish
   15146:	e855 3f00 	ldrex	r3, [r5]
   1514a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1514e:	e845 3200 	strex	r2, r3, [r5]
   15152:	2a00      	cmp	r2, #0
   15154:	d1f7      	bne.n	15146 <deferred_work+0x9a>
   15156:	f3bf 8f5b 	dmb	ish
}
   1515a:	b003      	add	sp, #12
   1515c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1515e:	bf00      	nop
   15160:	20002bd4 	.word	0x20002bd4
   15164:	00024bb8 	.word	0x00024bb8
   15168:	00024bd4 	.word	0x00024bd4

0001516c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1516c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1516e:	4801      	ldr	r0, [pc, #4]	; (15174 <bt_conn_create_frag_timeout+0x8>)
   15170:	f7ff bd28 	b.w	14bc4 <bt_conn_create_pdu_timeout>
   15174:	200008d0 	.word	0x200008d0

00015178 <bt_conn_process_tx>:
{
   15178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1517c:	7b43      	ldrb	r3, [r0, #13]
{
   1517e:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15180:	b95b      	cbnz	r3, 1519a <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15182:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15186:	3004      	adds	r0, #4
   15188:	f00b fb8f 	bl	208aa <atomic_and>
   1518c:	0643      	lsls	r3, r0, #25
   1518e:	d504      	bpl.n	1519a <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   15190:	4628      	mov	r0, r5
}
   15192:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   15196:	f00b bbb5 	b.w	20904 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   1519a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1519e:	f00e ffb0 	bl	24102 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   151a2:	4604      	mov	r4, r0
   151a4:	b960      	cbnz	r0, 151c0 <bt_conn_process_tx+0x48>
   151a6:	4a34      	ldr	r2, [pc, #208]	; (15278 <bt_conn_process_tx+0x100>)
   151a8:	4934      	ldr	r1, [pc, #208]	; (1527c <bt_conn_process_tx+0x104>)
   151aa:	4835      	ldr	r0, [pc, #212]	; (15280 <bt_conn_process_tx+0x108>)
   151ac:	f44f 735d 	mov.w	r3, #884	; 0x374
   151b0:	f00a fc15 	bl	1f9de <assert_print>
   151b4:	4040      	eors	r0, r0
   151b6:	f380 8811 	msr	BASEPRI, r0
   151ba:	f04f 0003 	mov.w	r0, #3
   151be:	df02      	svc	2
	buf = net_buf_ref(buf);
   151c0:	4620      	mov	r0, r4
   151c2:	f00e fa78 	bl	236b6 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   151c6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 15284 <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   151ca:	8a02      	ldrh	r2, [r0, #16]
   151cc:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   151d0:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   151d2:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   151d4:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   151d6:	d807      	bhi.n	151e8 <bt_conn_process_tx+0x70>
   151d8:	b932      	cbnz	r2, 151e8 <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   151da:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   151dc:	4621      	mov	r1, r4
   151de:	4628      	mov	r0, r5
   151e0:	f7ff fa88 	bl	146f4 <send_frag>
   151e4:	4606      	mov	r6, r0
   151e6:	e030      	b.n	1524a <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   151e8:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   151ea:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   151ee:	8a22      	ldrh	r2, [r4, #16]
   151f0:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   151f4:	429a      	cmp	r2, r3
   151f6:	d804      	bhi.n	15202 <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   151f8:	2301      	movs	r3, #1
   151fa:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   151fc:	2200      	movs	r2, #0
   151fe:	2303      	movs	r3, #3
   15200:	e7ec      	b.n	151dc <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   15202:	f04f 33ff 	mov.w	r3, #4294967295
   15206:	f04f 32ff 	mov.w	r2, #4294967295
   1520a:	2000      	movs	r0, #0
   1520c:	f7ff ffae 	bl	1516c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15210:	7b6b      	ldrb	r3, [r5, #13]
   15212:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   15214:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15216:	d006      	beq.n	15226 <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   15218:	f003 fa24 	bl	18664 <net_buf_unref>
	net_buf_unref(buf);
   1521c:	4620      	mov	r0, r4
}
   1521e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   15222:	f003 ba1f 	b.w	18664 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   15226:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   1522a:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   1522e:	4602      	mov	r2, r0
   15230:	463b      	mov	r3, r7
   15232:	4621      	mov	r1, r4
   15234:	4628      	mov	r0, r5
   15236:	f7ff fa5d 	bl	146f4 <send_frag>
		if (err) {
   1523a:	4606      	mov	r6, r0
   1523c:	b1b8      	cbz	r0, 1526e <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   1523e:	f007 0701 	and.w	r7, r7, #1
   15242:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   15244:	4640      	mov	r0, r8
   15246:	f003 fa0d 	bl	18664 <net_buf_unref>
	net_buf_unref(buf);
   1524a:	4620      	mov	r0, r4
   1524c:	f003 fa0a 	bl	18664 <net_buf_unref>
	if (err  == -EIO) {
   15250:	3605      	adds	r6, #5
   15252:	d10e      	bne.n	15272 <bt_conn_process_tx+0xfa>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   15254:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   15256:	2300      	movs	r3, #0
   15258:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   1525a:	4620      	mov	r0, r4
   1525c:	f003 fa02 	bl	18664 <net_buf_unref>
		if (tx) {
   15260:	b13e      	cbz	r6, 15272 <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   15262:	4631      	mov	r1, r6
   15264:	4628      	mov	r0, r5
}
   15266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   1526a:	f7ff ba2d 	b.w	146c8 <conn_tx_destroy>
		flags = FRAG_CONT;
   1526e:	2701      	movs	r7, #1
   15270:	e7bd      	b.n	151ee <bt_conn_process_tx+0x76>
}
   15272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15276:	bf00      	nop
   15278:	00025bb4 	.word	0x00025bb4
   1527c:	00025cac 	.word	0x00025cac
   15280:	00025a78 	.word	0x00025a78
   15284:	20000380 	.word	0x20000380

00015288 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   15288:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1528a:	4816      	ldr	r0, [pc, #88]	; (152e4 <bt_conn_init+0x5c>)
   1528c:	f00e ff18 	bl	240c0 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15290:	4915      	ldr	r1, [pc, #84]	; (152e8 <bt_conn_init+0x60>)
   15292:	4814      	ldr	r0, [pc, #80]	; (152e4 <bt_conn_init+0x5c>)
   15294:	f00e ff20 	bl	240d8 <k_queue_append>
   15298:	4914      	ldr	r1, [pc, #80]	; (152ec <bt_conn_init+0x64>)
   1529a:	4812      	ldr	r0, [pc, #72]	; (152e4 <bt_conn_init+0x5c>)
   1529c:	f00e ff1c 	bl	240d8 <k_queue_append>
   152a0:	4913      	ldr	r1, [pc, #76]	; (152f0 <bt_conn_init+0x68>)
   152a2:	4810      	ldr	r0, [pc, #64]	; (152e4 <bt_conn_init+0x5c>)
   152a4:	f00e ff18 	bl	240d8 <k_queue_append>
	}

	bt_att_init();
   152a8:	f000 fe06 	bl	15eb8 <bt_att_init>

	err = bt_smp_init();
   152ac:	f002 ffba 	bl	18224 <bt_smp_init>
	if (err) {
   152b0:	4605      	mov	r5, r0
   152b2:	b9a0      	cbnz	r0, 152de <bt_conn_init+0x56>
		return err;
	}

	bt_l2cap_init();
   152b4:	f00b fe39 	bl	20f2a <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   152b8:	480e      	ldr	r0, [pc, #56]	; (152f4 <bt_conn_init+0x6c>)
   152ba:	f00b fb93 	bl	209e4 <bt_conn_ref>

			if (!conn) {
   152be:	4604      	mov	r4, r0
   152c0:	b168      	cbz	r0, 152de <bt_conn_init+0x56>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   152c2:	3004      	adds	r0, #4
   152c4:	f00b fb00 	bl	208c8 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   152c8:	07c3      	lsls	r3, r0, #31
   152ca:	d504      	bpl.n	152d6 <bt_conn_init+0x4e>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   152cc:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
   152ce:	2102      	movs	r1, #2
   152d0:	4620      	mov	r0, r4
   152d2:	f7ff fb91 	bl	149f8 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   152d6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   152da:	f00b fafb 	bl	208d4 <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   152de:	4628      	mov	r0, r5
   152e0:	bd38      	pop	{r3, r4, r5, pc}
   152e2:	bf00      	nop
   152e4:	20000860 	.word	0x20000860
   152e8:	20002ba4 	.word	0x20002ba4
   152ec:	20002bb4 	.word	0x20002bb4
   152f0:	20002bc4 	.word	0x20002bc4
   152f4:	20001988 	.word	0x20001988

000152f8 <l2cap_accept>:
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   152f8:	4b04      	ldr	r3, [pc, #16]	; (1530c <l2cap_accept+0x14>)
   152fa:	6818      	ldr	r0, [r3, #0]
   152fc:	b918      	cbnz	r0, 15306 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   152fe:	4a04      	ldr	r2, [pc, #16]	; (15310 <l2cap_accept+0x18>)
   15300:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   15302:	600b      	str	r3, [r1, #0]

		return 0;
   15304:	4770      	bx	lr
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   15306:	f06f 000b 	mvn.w	r0, #11
}
   1530a:	4770      	bx	lr
   1530c:	20002be4 	.word	0x20002be4
   15310:	00024fb8 	.word	0x00024fb8

00015314 <bt_l2cap_connected>:
{
   15314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15316:	4d24      	ldr	r5, [pc, #144]	; (153a8 <bt_l2cap_connected+0x94>)
   15318:	4f24      	ldr	r7, [pc, #144]	; (153ac <bt_l2cap_connected+0x98>)
{
   1531a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1531c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1531e:	42bd      	cmp	r5, r7
   15320:	d301      	bcc.n	15326 <bt_l2cap_connected+0x12>
}
   15322:	b003      	add	sp, #12
   15324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   15326:	686b      	ldr	r3, [r5, #4]
   15328:	a901      	add	r1, sp, #4
   1532a:	4620      	mov	r0, r4
   1532c:	4798      	blx	r3
   1532e:	2800      	cmp	r0, #0
   15330:	db34      	blt.n	1539c <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15332:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15334:	882a      	ldrh	r2, [r5, #0]
   15336:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   15338:	849a      	strh	r2, [r3, #36]	; 0x24
   1533a:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1533e:	68a8      	ldr	r0, [r5, #8]
   15340:	f3bf 8f5b 	dmb	ish
   15344:	e852 1f00 	ldrex	r1, [r2]
   15348:	e842 6c00 	strex	ip, r6, [r2]
   1534c:	f1bc 0f00 	cmp.w	ip, #0
   15350:	d1f8      	bne.n	15344 <bt_l2cap_connected+0x30>
   15352:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   15356:	609e      	str	r6, [r3, #8]
	return list->tail;
   15358:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1535a:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1535e:	b9f9      	cbnz	r1, 153a0 <bt_l2cap_connected+0x8c>
	list->head = node;
   15360:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   15364:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   15366:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15368:	9801      	ldr	r0, [sp, #4]
   1536a:	6843      	ldr	r3, [r0, #4]
   1536c:	681b      	ldr	r3, [r3, #0]
   1536e:	b103      	cbz	r3, 15372 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   15370:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15372:	9b01      	ldr	r3, [sp, #4]
   15374:	f3bf 8f5b 	dmb	ish
   15378:	3310      	adds	r3, #16
   1537a:	e853 1f00 	ldrex	r1, [r3]
   1537e:	f041 0101 	orr.w	r1, r1, #1
   15382:	e843 1200 	strex	r2, r1, [r3]
   15386:	2a00      	cmp	r2, #0
   15388:	d1f7      	bne.n	1537a <bt_l2cap_connected+0x66>
   1538a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1538e:	9801      	ldr	r0, [sp, #4]
   15390:	6843      	ldr	r3, [r0, #4]
   15392:	69db      	ldr	r3, [r3, #28]
   15394:	b113      	cbz	r3, 1539c <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   15396:	f100 0110 	add.w	r1, r0, #16
   1539a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1539c:	350c      	adds	r5, #12
   1539e:	e7be      	b.n	1531e <bt_l2cap_connected+0xa>
	parent->next = child;
   153a0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   153a2:	6562      	str	r2, [r4, #84]	; 0x54
}
   153a4:	e7de      	b.n	15364 <bt_l2cap_connected+0x50>
   153a6:	bf00      	nop
   153a8:	00024b94 	.word	0x00024b94
   153ac:	00024bb8 	.word	0x00024bb8

000153b0 <bt_l2cap_update_conn_param>:
{
   153b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   153b2:	4b17      	ldr	r3, [pc, #92]	; (15410 <bt_l2cap_update_conn_param+0x60>)
{
   153b4:	460e      	mov	r6, r1
	ident++;
   153b6:	7819      	ldrb	r1, [r3, #0]
   153b8:	3101      	adds	r1, #1
   153ba:	b2c9      	uxtb	r1, r1
   153bc:	2901      	cmp	r1, #1
   153be:	bf38      	it	cc
   153c0:	2101      	movcc	r1, #1
{
   153c2:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   153c4:	2208      	movs	r2, #8
   153c6:	2012      	movs	r0, #18
	ident++;
   153c8:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   153ca:	f00b fc86 	bl	20cda <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   153ce:	4604      	mov	r4, r0
   153d0:	b1d0      	cbz	r0, 15408 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   153d2:	2108      	movs	r1, #8
   153d4:	300c      	adds	r0, #12
   153d6:	f00e f99e 	bl	23716 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   153da:	8833      	ldrh	r3, [r6, #0]
   153dc:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   153de:	8873      	ldrh	r3, [r6, #2]
   153e0:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   153e2:	88b3      	ldrh	r3, [r6, #4]
   153e4:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   153e6:	88f3      	ldrh	r3, [r6, #6]
   153e8:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   153ea:	2300      	movs	r3, #0
   153ec:	4628      	mov	r0, r5
   153ee:	9300      	str	r3, [sp, #0]
   153f0:	4622      	mov	r2, r4
   153f2:	2105      	movs	r1, #5
   153f4:	f00b fcd5 	bl	20da2 <bt_l2cap_send_cb>
	if (err) {
   153f8:	4605      	mov	r5, r0
   153fa:	b110      	cbz	r0, 15402 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   153fc:	4620      	mov	r0, r4
   153fe:	f003 f931 	bl	18664 <net_buf_unref>
}
   15402:	4628      	mov	r0, r5
   15404:	b002      	add	sp, #8
   15406:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15408:	f06f 050b 	mvn.w	r5, #11
   1540c:	e7f9      	b.n	15402 <bt_l2cap_update_conn_param+0x52>
   1540e:	bf00      	nop
   15410:	200039b1 	.word	0x200039b1

00015414 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15414:	2823      	cmp	r0, #35	; 0x23
   15416:	d81f      	bhi.n	15458 <att_op_get_type+0x44>
   15418:	281a      	cmp	r0, #26
   1541a:	d804      	bhi.n	15426 <att_op_get_type+0x12>
   1541c:	1e43      	subs	r3, r0, #1
   1541e:	2b18      	cmp	r3, #24
   15420:	d90e      	bls.n	15440 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15422:	2006      	movs	r0, #6
   15424:	4770      	bx	lr
	switch (op) {
   15426:	f1a0 031b 	sub.w	r3, r0, #27
   1542a:	2b08      	cmp	r3, #8
   1542c:	d81e      	bhi.n	1546c <att_op_get_type+0x58>
   1542e:	e8df f003 	tbb	[pc, r3]
   15432:	1d05      	.short	0x1d05
   15434:	191d231b 	.word	0x191d231b
   15438:	1d25      	.short	0x1d25
   1543a:	05          	.byte	0x05
   1543b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1543c:	2003      	movs	r0, #3
   1543e:	4770      	bx	lr
	switch (op) {
   15440:	4a0f      	ldr	r2, [pc, #60]	; (15480 <att_op_get_type+0x6c>)
   15442:	2301      	movs	r3, #1
   15444:	4083      	lsls	r3, r0
   15446:	401a      	ands	r2, r3
   15448:	b9c2      	cbnz	r2, 1547c <att_op_get_type+0x68>
   1544a:	4a0e      	ldr	r2, [pc, #56]	; (15484 <att_op_get_type+0x70>)
   1544c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1544e:	2a00      	cmp	r2, #0
   15450:	bf14      	ite	ne
   15452:	2001      	movne	r0, #1
   15454:	2006      	moveq	r0, #6
   15456:	4770      	bx	lr
	switch (op) {
   15458:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1545c:	2b52      	cmp	r3, #82	; 0x52
   1545e:	d105      	bne.n	1546c <att_op_get_type+0x58>
		return ATT_COMMAND;
   15460:	2000      	movs	r0, #0
}
   15462:	4770      	bx	lr
		return ATT_REQUEST;
   15464:	2001      	movs	r0, #1
   15466:	4770      	bx	lr
		return ATT_INDICATION;
   15468:	2005      	movs	r0, #5
   1546a:	4770      	bx	lr
		return ATT_COMMAND;
   1546c:	f010 0f40 	tst.w	r0, #64	; 0x40
   15470:	bf0c      	ite	eq
   15472:	2006      	moveq	r0, #6
   15474:	2000      	movne	r0, #0
   15476:	4770      	bx	lr
	switch (op) {
   15478:	2004      	movs	r0, #4
   1547a:	4770      	bx	lr
		return ATT_RESPONSE;
   1547c:	2002      	movs	r0, #2
   1547e:	4770      	bx	lr
   15480:	028aaaaa 	.word	0x028aaaaa
   15484:	01455554 	.word	0x01455554

00015488 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15488:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1548a:	3804      	subs	r0, #4
   1548c:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1548e:	a901      	add	r1, sp, #4
   15490:	4802      	ldr	r0, [pc, #8]	; (1549c <bt_att_released+0x14>)
   15492:	f00e fd59 	bl	23f48 <k_mem_slab_free>
}
   15496:	b003      	add	sp, #12
   15498:	f85d fb04 	ldr.w	pc, [sp], #4
   1549c:	20000794 	.word	0x20000794

000154a0 <tx_meta_data_free>:
{
   154a0:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   154a2:	2100      	movs	r1, #0
{
   154a4:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   154a6:	2214      	movs	r2, #20
   154a8:	f00a fd32 	bl	1ff10 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   154ac:	4621      	mov	r1, r4
   154ae:	4802      	ldr	r0, [pc, #8]	; (154b8 <tx_meta_data_free+0x18>)
}
   154b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   154b4:	f00e be10 	b.w	240d8 <k_queue_append>
   154b8:	20000848 	.word	0x20000848

000154bc <chan_send>:
{
   154bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   154c0:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   154c2:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
   154c6:	68cb      	ldr	r3, [r1, #12]
{
   154c8:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   154ca:	3034      	adds	r0, #52	; 0x34
   154cc:	2102      	movs	r1, #2
   154ce:	f00b fd51 	bl	20f74 <atomic_test_bit>
   154d2:	2800      	cmp	r0, #0
   154d4:	d039      	beq.n	1554a <chan_send+0x8e>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   154d6:	781b      	ldrb	r3, [r3, #0]
   154d8:	2bd2      	cmp	r3, #210	; 0xd2
   154da:	d110      	bne.n	154fe <chan_send+0x42>
		err = bt_smp_sign(chan->att->conn, buf);
   154dc:	6833      	ldr	r3, [r6, #0]
   154de:	4621      	mov	r1, r4
   154e0:	6818      	ldr	r0, [r3, #0]
   154e2:	f00d fd1b 	bl	22f1c <bt_smp_sign>
		if (err) {
   154e6:	4605      	mov	r5, r0
   154e8:	b148      	cbz	r0, 154fe <chan_send+0x42>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   154ea:	69a0      	ldr	r0, [r4, #24]
   154ec:	f7ff ffd8 	bl	154a0 <tx_meta_data_free>
			net_buf_unref(buf);
   154f0:	4620      	mov	r0, r4
   154f2:	f003 f8b7 	bl	18664 <net_buf_unref>
}
   154f6:	4628      	mov	r0, r5
   154f8:	b003      	add	sp, #12
   154fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   154fe:	f104 000c 	add.w	r0, r4, #12
   15502:	f00e f951 	bl	237a8 <net_buf_simple_headroom>
	state->len = buf->len;
   15506:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
   1550a:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1550e:	6833      	ldr	r3, [r6, #0]
   15510:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   15512:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   15514:	4607      	mov	r7, r0
   15516:	7818      	ldrb	r0, [r3, #0]
   15518:	f7ff ff7c 	bl	15414 <att_op_get_type>
	switch (op_type) {
   1551c:	2805      	cmp	r0, #5
   1551e:	bf96      	itet	ls
   15520:	4b0b      	ldrls	r3, [pc, #44]	; (15550 <chan_send+0x94>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   15522:	4b0c      	ldrhi	r3, [pc, #48]	; (15554 <chan_send+0x98>)
   15524:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15528:	f8cd 8000 	str.w	r8, [sp]
   1552c:	4628      	mov	r0, r5
   1552e:	4622      	mov	r2, r4
   15530:	2104      	movs	r1, #4
   15532:	f00b fc36 	bl	20da2 <bt_l2cap_send_cb>
	if (err) {
   15536:	4605      	mov	r5, r0
   15538:	2800      	cmp	r0, #0
   1553a:	d0dc      	beq.n	154f6 <chan_send+0x3a>
	buf->data = buf->__buf + state->offset;
   1553c:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1553e:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15542:	fa13 f787 	uxtah	r7, r3, r7
   15546:	60e7      	str	r7, [r4, #12]
}
   15548:	e7d5      	b.n	154f6 <chan_send+0x3a>
		return -EINVAL;
   1554a:	f06f 0515 	mvn.w	r5, #21
   1554e:	e7d2      	b.n	154f6 <chan_send+0x3a>
   15550:	00024fe0 	.word	0x00024fe0
   15554:	0002168f 	.word	0x0002168f

00015558 <read_group_cb>:
{
   15558:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1555c:	4605      	mov	r5, r0
   1555e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15560:	f04f 0800 	mov.w	r8, #0
   15564:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15568:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1556a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1556c:	f88d 8008 	strb.w	r8, [sp, #8]
   15570:	a902      	add	r1, sp, #8
{
   15572:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15574:	f8ad 300a 	strh.w	r3, [sp, #10]
   15578:	f00a fd18 	bl	1ffac <bt_uuid_cmp>
   1557c:	b1a0      	cbz	r0, 155a8 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1557e:	f642 0301 	movw	r3, #10241	; 0x2801
   15582:	6828      	ldr	r0, [r5, #0]
   15584:	f88d 800c 	strb.w	r8, [sp, #12]
   15588:	a903      	add	r1, sp, #12
   1558a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1558e:	f00a fd0d 	bl	1ffac <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15592:	b148      	cbz	r0, 155a8 <read_group_cb+0x50>
		if (data->group &&
   15594:	6923      	ldr	r3, [r4, #16]
   15596:	b11b      	cbz	r3, 155a0 <read_group_cb+0x48>
   15598:	885a      	ldrh	r2, [r3, #2]
   1559a:	42b2      	cmp	r2, r6
   1559c:	d200      	bcs.n	155a0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1559e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   155a0:	2001      	movs	r0, #1
}
   155a2:	b004      	add	sp, #16
   155a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   155a8:	6861      	ldr	r1, [r4, #4]
   155aa:	6828      	ldr	r0, [r5, #0]
   155ac:	f00a fcfe 	bl	1ffac <bt_uuid_cmp>
   155b0:	b110      	cbz	r0, 155b8 <read_group_cb+0x60>
		data->group = NULL;
   155b2:	2300      	movs	r3, #0
   155b4:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   155b6:	e7f3      	b.n	155a0 <read_group_cb+0x48>
	if (data->rsp->len &&
   155b8:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   155ba:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   155bc:	781a      	ldrb	r2, [r3, #0]
   155be:	b132      	cbz	r2, 155ce <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   155c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   155c2:	8a01      	ldrh	r1, [r0, #16]
   155c4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   155c6:	4293      	cmp	r3, r2
   155c8:	da01      	bge.n	155ce <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   155ca:	2000      	movs	r0, #0
   155cc:	e7e9      	b.n	155a2 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   155ce:	2104      	movs	r1, #4
   155d0:	300c      	adds	r0, #12
   155d2:	f00e f8a0 	bl	23716 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   155d6:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   155d8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   155da:	6923      	ldr	r3, [r4, #16]
   155dc:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   155de:	4b08      	ldr	r3, [pc, #32]	; (15600 <read_group_cb+0xa8>)
   155e0:	9300      	str	r3, [sp, #0]
   155e2:	9401      	str	r4, [sp, #4]
   155e4:	68a2      	ldr	r2, [r4, #8]
   155e6:	2300      	movs	r3, #0
   155e8:	4629      	mov	r1, r5
   155ea:	4638      	mov	r0, r7
   155ec:	f00b fe97 	bl	2131e <att_chan_read>
	if (read < 0) {
   155f0:	2800      	cmp	r0, #0
   155f2:	dbea      	blt.n	155ca <read_group_cb+0x72>
	if (!data->group) {
   155f4:	6920      	ldr	r0, [r4, #16]
   155f6:	3800      	subs	r0, #0
   155f8:	bf18      	it	ne
   155fa:	2001      	movne	r0, #1
   155fc:	e7d1      	b.n	155a2 <read_group_cb+0x4a>
   155fe:	bf00      	nop
   15600:	000212cd 	.word	0x000212cd

00015604 <read_type_cb>:
{
   15604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15608:	6817      	ldr	r7, [r2, #0]
{
   1560a:	4605      	mov	r5, r0
   1560c:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1560e:	6800      	ldr	r0, [r0, #0]
   15610:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   15612:	687e      	ldr	r6, [r7, #4]
{
   15614:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15616:	f00a fcc9 	bl	1ffac <bt_uuid_cmp>
   1561a:	4681      	mov	r9, r0
   1561c:	2800      	cmp	r0, #0
   1561e:	d13c      	bne.n	1569a <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15620:	4630      	mov	r0, r6
   15622:	2295      	movs	r2, #149	; 0x95
   15624:	4629      	mov	r1, r5
   15626:	f00c fda8 	bl	2217a <bt_gatt_check_perm>
   1562a:	4606      	mov	r6, r0
   1562c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1562e:	b140      	cbz	r0, 15642 <read_type_cb+0x3e>
		if (data->rsp->len) {
   15630:	68e3      	ldr	r3, [r4, #12]
   15632:	781b      	ldrb	r3, [r3, #0]
   15634:	b10b      	cbz	r3, 1563a <read_type_cb+0x36>
			data->err = 0x00;
   15636:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1563a:	2000      	movs	r0, #0
}
   1563c:	b003      	add	sp, #12
   1563e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15642:	68a0      	ldr	r0, [r4, #8]
   15644:	f00e f83b 	bl	236be <net_buf_frag_last>
   15648:	2102      	movs	r1, #2
   1564a:	300c      	adds	r0, #12
   1564c:	f00e f863 	bl	23716 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15650:	4b13      	ldr	r3, [pc, #76]	; (156a0 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15652:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   15654:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15658:	9300      	str	r3, [sp, #0]
   1565a:	9401      	str	r4, [sp, #4]
   1565c:	68a2      	ldr	r2, [r4, #8]
   1565e:	4633      	mov	r3, r6
   15660:	4629      	mov	r1, r5
   15662:	4638      	mov	r0, r7
   15664:	f00b fe5b 	bl	2131e <att_chan_read>
	if (read < 0) {
   15668:	2800      	cmp	r0, #0
   1566a:	da07      	bge.n	1567c <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1566c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   15670:	bf26      	itte	cs
   15672:	4240      	negcs	r0, r0
   15674:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   15676:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   15678:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1567a:	e7de      	b.n	1563a <read_type_cb+0x36>
	if (!data->item) {
   1567c:	6923      	ldr	r3, [r4, #16]
   1567e:	2b00      	cmp	r3, #0
   15680:	d0db      	beq.n	1563a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15682:	68a0      	ldr	r0, [r4, #8]
   15684:	f00b fc5c 	bl	20f40 <net_buf_frags_len>
   15688:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1568a:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1568c:	68e3      	ldr	r3, [r4, #12]
   1568e:	781b      	ldrb	r3, [r3, #0]
   15690:	4298      	cmp	r0, r3
   15692:	bf94      	ite	ls
   15694:	2000      	movls	r0, #0
   15696:	2001      	movhi	r0, #1
   15698:	e7d0      	b.n	1563c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1569a:	2001      	movs	r0, #1
   1569c:	e7ce      	b.n	1563c <read_type_cb+0x38>
   1569e:	bf00      	nop
   156a0:	00020f51 	.word	0x00020f51

000156a4 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   156a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   156a6:	2300      	movs	r3, #0
{
   156a8:	4604      	mov	r4, r0
   156aa:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   156ac:	4829      	ldr	r0, [pc, #164]	; (15754 <bt_att_accept+0xb0>)
   156ae:	2200      	movs	r2, #0
   156b0:	4669      	mov	r1, sp
   156b2:	f005 fd33 	bl	1b11c <k_mem_slab_alloc>
   156b6:	4605      	mov	r5, r0
   156b8:	2800      	cmp	r0, #0
   156ba:	d143      	bne.n	15744 <bt_att_accept+0xa0>
	return z_impl_z_current_get();
   156bc:	f006 fc16 	bl	1beec <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   156c0:	4b25      	ldr	r3, [pc, #148]	; (15758 <bt_att_accept+0xb4>)

	(void)memset(att, 0, sizeof(*att));
   156c2:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   156c4:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   156c6:	222c      	movs	r2, #44	; 0x2c
   156c8:	9800      	ldr	r0, [sp, #0]
   156ca:	f00a fc21 	bl	1ff10 <memset>
	att->conn = conn;
   156ce:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   156d0:	4822      	ldr	r0, [pc, #136]	; (1575c <bt_att_accept+0xb8>)
	att->conn = conn;
   156d2:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   156d4:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   156d6:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   156d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   156dc:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   156e0:	2200      	movs	r2, #0
   156e2:	2300      	movs	r3, #0
   156e4:	a901      	add	r1, sp, #4
   156e6:	f005 fd19 	bl	1b11c <k_mem_slab_alloc>
   156ea:	4605      	mov	r5, r0
   156ec:	bb50      	cbnz	r0, 15744 <bt_att_accept+0xa0>
	(void)memset(chan, 0, sizeof(*chan));
   156ee:	4601      	mov	r1, r0
   156f0:	2290      	movs	r2, #144	; 0x90
   156f2:	9801      	ldr	r0, [sp, #4]
   156f4:	f00a fc0c 	bl	1ff10 <memset>
	chan->chan.chan.ops = &ops;
   156f8:	9801      	ldr	r0, [sp, #4]
   156fa:	4b19      	ldr	r3, [pc, #100]	; (15760 <bt_att_accept+0xbc>)
   156fc:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   156fe:	303c      	adds	r0, #60	; 0x3c
   15700:	f00e fcde 	bl	240c0 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15704:	9b01      	ldr	r3, [sp, #4]
   15706:	f3bf 8f5b 	dmb	ish
   1570a:	3334      	adds	r3, #52	; 0x34
   1570c:	e853 2f00 	ldrex	r2, [r3]
   15710:	e843 5100 	strex	r1, r5, [r3]
   15714:	2900      	cmp	r1, #0
   15716:	d1f9      	bne.n	1570c <bt_att_accept+0x68>
   15718:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1571c:	9b01      	ldr	r3, [sp, #4]
   1571e:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   15720:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   15722:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   15724:	b91b      	cbnz	r3, 1572e <bt_att_accept+0x8a>
   15726:	f104 000c 	add.w	r0, r4, #12
   1572a:	f00e fcc9 	bl	240c0 <z_impl_k_queue_init>
	return list->head;
   1572e:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   15730:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   15734:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15736:	f107 0388 	add.w	r3, r7, #136	; 0x88
	list->head = node;
   1573a:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1573c:	b902      	cbnz	r2, 15740 <bt_att_accept+0x9c>
	list->tail = node;
   1573e:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   15740:	9b01      	ldr	r3, [sp, #4]
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
   15742:	b923      	cbnz	r3, 1574e <bt_att_accept+0xaa>
		return -ENOMEM;
   15744:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   15748:	4628      	mov	r0, r5
   1574a:	b003      	add	sp, #12
   1574c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*ch = &chan->chan.chan;
   1574e:	3304      	adds	r3, #4
   15750:	6033      	str	r3, [r6, #0]
	return 0;
   15752:	e7f9      	b.n	15748 <bt_att_accept+0xa4>
   15754:	20000778 	.word	0x20000778
   15758:	20002c50 	.word	0x20002c50
   1575c:	20000794 	.word	0x20000794
   15760:	20000570 	.word	0x20000570

00015764 <bt_att_connected>:
{
   15764:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15766:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1576a:	4604      	mov	r4, r0
   1576c:	f3bf 8f5b 	dmb	ish
   15770:	e853 1f00 	ldrex	r1, [r3]
   15774:	f041 0104 	orr.w	r1, r1, #4
   15778:	e843 1200 	strex	r2, r1, [r3]
   1577c:	2a00      	cmp	r2, #0
   1577e:	d1f7      	bne.n	15770 <bt_att_connected+0xc>
   15780:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15784:	2317      	movs	r3, #23
   15786:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15788:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1578a:	1f20      	subs	r0, r4, #4
   1578c:	f00b fc4f 	bl	2102e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15790:	f104 0054 	add.w	r0, r4, #84	; 0x54
   15794:	4903      	ldr	r1, [pc, #12]	; (157a4 <bt_att_connected+0x40>)
   15796:	f00e fd7f 	bl	24298 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1579a:	6820      	ldr	r0, [r4, #0]
}
   1579c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   157a0:	f001 bcee 	b.w	17180 <bt_gatt_connected>
   157a4:	000219e1 	.word	0x000219e1

000157a8 <bt_att_chan_create_pdu>:
{
   157a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   157aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   157ac:	3201      	adds	r2, #1
   157ae:	429a      	cmp	r2, r3
{
   157b0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   157b2:	d822      	bhi.n	157fa <bt_att_chan_create_pdu+0x52>
	switch (att_op_get_type(op)) {
   157b4:	4608      	mov	r0, r1
   157b6:	f7ff fe2d 	bl	15414 <att_op_get_type>
   157ba:	2802      	cmp	r0, #2
   157bc:	d020      	beq.n	15800 <bt_att_chan_create_pdu+0x58>
   157be:	2804      	cmp	r0, #4
   157c0:	d01e      	beq.n	15800 <bt_att_chan_create_pdu+0x58>
		timeout = K_FOREVER;
   157c2:	f04f 36ff 	mov.w	r6, #4294967295
   157c6:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   157ca:	2100      	movs	r1, #0
   157cc:	4632      	mov	r2, r6
   157ce:	463b      	mov	r3, r7
   157d0:	4608      	mov	r0, r1
   157d2:	f00b fae3 	bl	20d9c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   157d6:	4604      	mov	r4, r0
   157d8:	b178      	cbz	r0, 157fa <bt_att_chan_create_pdu+0x52>
	return z_impl_z_current_get();
   157da:	f006 fb87 	bl	1beec <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   157de:	4b0e      	ldr	r3, [pc, #56]	; (15818 <bt_att_chan_create_pdu+0x70>)
   157e0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   157e2:	480e      	ldr	r0, [pc, #56]	; (1581c <bt_att_chan_create_pdu+0x74>)
   157e4:	bf07      	ittee	eq
   157e6:	2200      	moveq	r2, #0
   157e8:	2300      	moveq	r3, #0
   157ea:	4632      	movne	r2, r6
   157ec:	463b      	movne	r3, r7
   157ee:	f005 fe4f 	bl	1b490 <z_impl_k_queue_get>
	if (!data) {
   157f2:	b948      	cbnz	r0, 15808 <bt_att_chan_create_pdu+0x60>
		net_buf_unref(buf);
   157f4:	4620      	mov	r0, r4
   157f6:	f002 ff35 	bl	18664 <net_buf_unref>
		return NULL;
   157fa:	2400      	movs	r4, #0
}
   157fc:	4620      	mov	r0, r4
   157fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   15800:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   15804:	2700      	movs	r7, #0
   15806:	e7e0      	b.n	157ca <bt_att_chan_create_pdu+0x22>
	bt_att_tx_meta_data(buf) = data;
   15808:	61a0      	str	r0, [r4, #24]
   1580a:	2101      	movs	r1, #1
   1580c:	f104 000c 	add.w	r0, r4, #12
   15810:	f00d ff81 	bl	23716 <net_buf_simple_add>
	hdr->code = op;
   15814:	7005      	strb	r5, [r0, #0]
	return buf;
   15816:	e7f1      	b.n	157fc <bt_att_chan_create_pdu+0x54>
   15818:	20002530 	.word	0x20002530
   1581c:	20000848 	.word	0x20000848

00015820 <bt_att_recv>:
{
   15820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   15824:	8a0b      	ldrh	r3, [r1, #16]
{
   15826:	4605      	mov	r5, r0
   15828:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1582a:	2b00      	cmp	r3, #0
   1582c:	d05d      	beq.n	158ea <bt_att_recv+0xca>
	return net_buf_simple_pull_mem(&buf->b, len);
   1582e:	2101      	movs	r1, #1
   15830:	f104 000c 	add.w	r0, r4, #12
   15834:	f00d ffa0 	bl	23778 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15838:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1583c:	4680      	mov	r8, r0
   1583e:	2b00      	cmp	r3, #0
   15840:	d053      	beq.n	158ea <bt_att_recv+0xca>
		if (hdr->code == handlers[i].op) {
   15842:	7801      	ldrb	r1, [r0, #0]
   15844:	4e2b      	ldr	r6, [pc, #172]	; (158f4 <bt_att_recv+0xd4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15846:	1f2f      	subs	r7, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15848:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1584a:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1584e:	428a      	cmp	r2, r1
   15850:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   15854:	eb06 0bc3 	add.w	fp, r6, r3, lsl #3
   15858:	d11e      	bne.n	15898 <bt_att_recv+0x78>
		if (handler->type == ATT_REQUEST &&
   1585a:	f89b 9002 	ldrb.w	r9, [fp, #2]
   1585e:	f1b9 0f01 	cmp.w	r9, #1
   15862:	d129      	bne.n	158b8 <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   15864:	2100      	movs	r1, #0
   15866:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1586a:	f00b fef4 	bl	21656 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1586e:	2800      	cmp	r0, #0
   15870:	d13b      	bne.n	158ea <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   15872:	8a22      	ldrh	r2, [r4, #16]
   15874:	f89b 3001 	ldrb.w	r3, [fp, #1]
   15878:	429a      	cmp	r2, r3
   1587a:	d339      	bcc.n	158f0 <bt_att_recv+0xd0>
		err = handler->func(att_chan, buf);
   1587c:	4456      	add	r6, sl
   1587e:	4621      	mov	r1, r4
   15880:	6873      	ldr	r3, [r6, #4]
   15882:	4638      	mov	r0, r7
   15884:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15886:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1588a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1588c:	d12d      	bne.n	158ea <bt_att_recv+0xca>
   1588e:	b360      	cbz	r0, 158ea <bt_att_recv+0xca>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15890:	f898 1000 	ldrb.w	r1, [r8]
	if (!req) {
   15894:	b349      	cbz	r1, 158ea <bt_att_recv+0xca>
   15896:	e00a      	b.n	158ae <bt_att_recv+0x8e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15898:	3301      	adds	r3, #1
   1589a:	2b1e      	cmp	r3, #30
   1589c:	d1d5      	bne.n	1584a <bt_att_recv+0x2a>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1589e:	4608      	mov	r0, r1
   158a0:	f7ff fdb8 	bl	15414 <att_op_get_type>
   158a4:	b308      	cbz	r0, 158ea <bt_att_recv+0xca>
   158a6:	2805      	cmp	r0, #5
   158a8:	d01f      	beq.n	158ea <bt_att_recv+0xca>
	if (!req) {
   158aa:	b1f1      	cbz	r1, 158ea <bt_att_recv+0xca>
   158ac:	2306      	movs	r3, #6
   158ae:	2200      	movs	r2, #0
   158b0:	4638      	mov	r0, r7
   158b2:	f00b ff61 	bl	21778 <send_err_rsp.part.0>
   158b6:	e018      	b.n	158ea <bt_att_recv+0xca>
		} else if (handler->type == ATT_INDICATION &&
   158b8:	f1b9 0f05 	cmp.w	r9, #5
   158bc:	d00a      	beq.n	158d4 <bt_att_recv+0xb4>
	if (buf->len < handler->expect_len) {
   158be:	8a22      	ldrh	r2, [r4, #16]
   158c0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   158c4:	429a      	cmp	r2, r3
   158c6:	d310      	bcc.n	158ea <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
   158c8:	f8db 3004 	ldr.w	r3, [fp, #4]
   158cc:	4621      	mov	r1, r4
   158ce:	4638      	mov	r0, r7
   158d0:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   158d2:	e00a      	b.n	158ea <bt_att_recv+0xca>
			   atomic_test_and_set_bit(att_chan->flags,
   158d4:	2101      	movs	r1, #1
   158d6:	f105 0030 	add.w	r0, r5, #48	; 0x30
   158da:	f00b febc 	bl	21656 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   158de:	b920      	cbnz	r0, 158ea <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   158e0:	f89b 2001 	ldrb.w	r2, [fp, #1]
   158e4:	8a23      	ldrh	r3, [r4, #16]
   158e6:	429a      	cmp	r2, r3
   158e8:	d9c8      	bls.n	1587c <bt_att_recv+0x5c>
}
   158ea:	2000      	movs	r0, #0
   158ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = BT_ATT_ERR_INVALID_PDU;
   158f0:	2304      	movs	r3, #4
   158f2:	e7cd      	b.n	15890 <bt_att_recv+0x70>
   158f4:	00024ff8 	.word	0x00024ff8

000158f8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   158f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   158fa:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   158fc:	6803      	ldr	r3, [r0, #0]
   158fe:	460d      	mov	r5, r1
   15900:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   15902:	b087      	sub	sp, #28
   15904:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15906:	bf18      	it	ne
   15908:	2101      	movne	r1, #1
   1590a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1590c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1590e:	f00c ffa8 	bl	22862 <bt_gatt_change_aware>
   15912:	b948      	cbnz	r0, 15928 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15914:	2105      	movs	r1, #5
   15916:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1591a:	f00b fe9c 	bl	21656 <atomic_test_and_set_bit>
   1591e:	2800      	cmp	r0, #0
   15920:	d048      	beq.n	159b4 <att_write_rsp.constprop.0+0xbc>
			return 0;
   15922:	2000      	movs	r0, #0
}
   15924:	b007      	add	sp, #28
   15926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   15928:	2e00      	cmp	r6, #0
   1592a:	d045      	beq.n	159b8 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1592c:	2218      	movs	r2, #24
   1592e:	2100      	movs	r1, #0
   15930:	4668      	mov	r0, sp
   15932:	f00a faed 	bl	1ff10 <memset>
	if (rsp) {
   15936:	bb67      	cbnz	r7, 15992 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   15938:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1593a:	4a20      	ldr	r2, [pc, #128]	; (159bc <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   1593c:	681b      	ldr	r3, [r3, #0]
   1593e:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   15940:	2300      	movs	r3, #0
   15942:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   15946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15948:	9303      	str	r3, [sp, #12]
	data.len = len;
   1594a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1594e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15952:	2301      	movs	r3, #1
   15954:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15958:	4631      	mov	r1, r6
   1595a:	466b      	mov	r3, sp
   1595c:	4630      	mov	r0, r6
	data.req = req;
   1595e:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15962:	f00b fbc8 	bl	210f6 <bt_gatt_foreach_attr>
	if (data.err) {
   15966:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1596a:	b1e3      	cbz	r3, 159a6 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1596c:	2f00      	cmp	r7, #0
   1596e:	d0d8      	beq.n	15922 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15970:	9b01      	ldr	r3, [sp, #4]
   15972:	6998      	ldr	r0, [r3, #24]
   15974:	f7ff fd94 	bl	154a0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15978:	9801      	ldr	r0, [sp, #4]
   1597a:	f002 fe73 	bl	18664 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1597e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   15982:	2d00      	cmp	r5, #0
   15984:	d0cd      	beq.n	15922 <att_write_rsp.constprop.0+0x2a>
   15986:	4632      	mov	r2, r6
   15988:	4629      	mov	r1, r5
   1598a:	4620      	mov	r0, r4
   1598c:	f00b fef4 	bl	21778 <send_err_rsp.part.0>
   15990:	e7c7      	b.n	15922 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15992:	2200      	movs	r2, #0
   15994:	4639      	mov	r1, r7
   15996:	4620      	mov	r0, r4
   15998:	f7ff ff06 	bl	157a8 <bt_att_chan_create_pdu>
   1599c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1599e:	2800      	cmp	r0, #0
   159a0:	d1ca      	bne.n	15938 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   159a2:	200e      	movs	r0, #14
   159a4:	e7be      	b.n	15924 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   159a6:	9901      	ldr	r1, [sp, #4]
   159a8:	2900      	cmp	r1, #0
   159aa:	d0ba      	beq.n	15922 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   159ac:	4620      	mov	r0, r4
   159ae:	f00b fb30 	bl	21012 <bt_att_chan_send_rsp>
   159b2:	e7b6      	b.n	15922 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   159b4:	2012      	movs	r0, #18
   159b6:	e7b5      	b.n	15924 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   159b8:	2001      	movs	r0, #1
   159ba:	e7b3      	b.n	15924 <att_write_rsp.constprop.0+0x2c>
   159bc:	00021095 	.word	0x00021095

000159c0 <att_read_group_req>:
{
   159c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   159c4:	8a0e      	ldrh	r6, [r1, #16]
   159c6:	3e04      	subs	r6, #4
   159c8:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   159ca:	2e02      	cmp	r6, #2
{
   159cc:	4604      	mov	r4, r0
   159ce:	b08c      	sub	sp, #48	; 0x30
   159d0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   159d2:	d001      	beq.n	159d8 <att_read_group_req+0x18>
   159d4:	2e10      	cmp	r6, #16
   159d6:	d16a      	bne.n	15aae <att_read_group_req+0xee>
   159d8:	2104      	movs	r1, #4
   159da:	300c      	adds	r0, #12
   159dc:	f00d fecc 	bl	23778 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   159e0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   159e4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   159e6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   159e8:	1d01      	adds	r1, r0, #4
   159ea:	4632      	mov	r2, r6
   159ec:	4640      	mov	r0, r8
   159ee:	f00a fb0b 	bl	20008 <bt_uuid_create>
   159f2:	2800      	cmp	r0, #0
   159f4:	d05d      	beq.n	15ab2 <att_read_group_req+0xf2>
	if (!start || !end) {
   159f6:	2d00      	cmp	r5, #0
   159f8:	d03a      	beq.n	15a70 <att_read_group_req+0xb0>
   159fa:	2600      	movs	r6, #0
   159fc:	2f00      	cmp	r7, #0
   159fe:	d036      	beq.n	15a6e <att_read_group_req+0xae>
	if (start > end) {
   15a00:	42bd      	cmp	r5, r7
   15a02:	d835      	bhi.n	15a70 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15a04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15a08:	a901      	add	r1, sp, #4
   15a0a:	4640      	mov	r0, r8
   15a0c:	f88d 6004 	strb.w	r6, [sp, #4]
   15a10:	f8ad 3006 	strh.w	r3, [sp, #6]
   15a14:	f00a faca 	bl	1ffac <bt_uuid_cmp>
   15a18:	bb70      	cbnz	r0, 15a78 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   15a1a:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15a1c:	2214      	movs	r2, #20
   15a1e:	2100      	movs	r1, #0
   15a20:	a807      	add	r0, sp, #28
   15a22:	f00a fa75 	bl	1ff10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15a26:	2201      	movs	r2, #1
   15a28:	2111      	movs	r1, #17
   15a2a:	4630      	mov	r0, r6
   15a2c:	f00b fee7 	bl	217fe <bt_att_create_pdu>
   15a30:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   15a32:	2800      	cmp	r0, #0
   15a34:	d03d      	beq.n	15ab2 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   15a36:	2101      	movs	r1, #1
   15a38:	300c      	adds	r0, #12
	data.uuid = uuid;
   15a3a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   15a3e:	f00d fe6a 	bl	23716 <net_buf_simple_add>
	data.rsp->len = 0U;
   15a42:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15a44:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15a46:	4a1c      	ldr	r2, [pc, #112]	; (15ab8 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   15a48:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15a4a:	4639      	mov	r1, r7
	data.group = NULL;
   15a4c:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15a4e:	4628      	mov	r0, r5
   15a50:	ab07      	add	r3, sp, #28
   15a52:	f00b fb50 	bl	210f6 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   15a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15a58:	781b      	ldrb	r3, [r3, #0]
   15a5a:	bb1b      	cbnz	r3, 15aa4 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15a5e:	6998      	ldr	r0, [r3, #24]
   15a60:	f7ff fd1e 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15a64:	9809      	ldr	r0, [sp, #36]	; 0x24
   15a66:	f002 fdfd 	bl	18664 <net_buf_unref>
	if (!req) {
   15a6a:	230a      	movs	r3, #10
   15a6c:	e001      	b.n	15a72 <att_read_group_req+0xb2>
			*err = 0U;
   15a6e:	463d      	mov	r5, r7
	if (!req) {
   15a70:	2301      	movs	r3, #1
   15a72:	462a      	mov	r2, r5
   15a74:	2110      	movs	r1, #16
   15a76:	e00e      	b.n	15a96 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   15a78:	f642 0301 	movw	r3, #10241	; 0x2801
   15a7c:	a907      	add	r1, sp, #28
   15a7e:	4640      	mov	r0, r8
   15a80:	f88d 601c 	strb.w	r6, [sp, #28]
   15a84:	f8ad 301e 	strh.w	r3, [sp, #30]
   15a88:	f00a fa90 	bl	1ffac <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15a8c:	2800      	cmp	r0, #0
   15a8e:	d0c4      	beq.n	15a1a <att_read_group_req+0x5a>
	if (!req) {
   15a90:	2310      	movs	r3, #16
   15a92:	462a      	mov	r2, r5
   15a94:	4619      	mov	r1, r3
   15a96:	4620      	mov	r0, r4
   15a98:	f00b fe6e 	bl	21778 <send_err_rsp.part.0>
		return 0;
   15a9c:	2000      	movs	r0, #0
}
   15a9e:	b00c      	add	sp, #48	; 0x30
   15aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   15aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
   15aa6:	4620      	mov	r0, r4
   15aa8:	f00b fab3 	bl	21012 <bt_att_chan_send_rsp>
	return 0;
   15aac:	e7f6      	b.n	15a9c <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   15aae:	2004      	movs	r0, #4
   15ab0:	e7f5      	b.n	15a9e <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   15ab2:	200e      	movs	r0, #14
   15ab4:	e7f3      	b.n	15a9e <att_read_group_req+0xde>
   15ab6:	bf00      	nop
   15ab8:	00015559 	.word	0x00015559

00015abc <att_read_mult_vl_req>:
{
   15abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15ac0:	6846      	ldr	r6, [r0, #4]
{
   15ac2:	b085      	sub	sp, #20
   15ac4:	4604      	mov	r4, r0
   15ac6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15ac8:	4630      	mov	r0, r6
   15aca:	2101      	movs	r1, #1
   15acc:	f00c fec9 	bl	22862 <bt_gatt_change_aware>
   15ad0:	b950      	cbnz	r0, 15ae8 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15ad2:	2105      	movs	r1, #5
   15ad4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15ad8:	f00b fdbd 	bl	21656 <atomic_test_and_set_bit>
   15adc:	2800      	cmp	r0, #0
   15ade:	d13b      	bne.n	15b58 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15ae0:	2012      	movs	r0, #18
}
   15ae2:	b005      	add	sp, #20
   15ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   15ae8:	2210      	movs	r2, #16
   15aea:	2100      	movs	r1, #0
   15aec:	4668      	mov	r0, sp
   15aee:	f00a fa0f 	bl	1ff10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   15af2:	2200      	movs	r2, #0
   15af4:	2121      	movs	r1, #33	; 0x21
   15af6:	4630      	mov	r0, r6
   15af8:	f00b fe81 	bl	217fe <bt_att_create_pdu>
   15afc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15afe:	b368      	cbz	r0, 15b5c <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15b00:	f8df 905c 	ldr.w	r9, [pc, #92]	; 15b60 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   15b04:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15b06:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15b0a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   15b0e:	8a2b      	ldrh	r3, [r5, #16]
   15b10:	2b01      	cmp	r3, #1
   15b12:	d804      	bhi.n	15b1e <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   15b14:	9902      	ldr	r1, [sp, #8]
   15b16:	4620      	mov	r0, r4
   15b18:	f00b fa7b 	bl	21012 <bt_att_chan_send_rsp>
	return 0;
   15b1c:	e01c      	b.n	15b58 <att_read_mult_vl_req+0x9c>
   15b1e:	4638      	mov	r0, r7
   15b20:	f00d fe3a 	bl	23798 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15b24:	466b      	mov	r3, sp
   15b26:	464a      	mov	r2, r9
   15b28:	4601      	mov	r1, r0
   15b2a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15b2c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15b30:	f00b fae1 	bl	210f6 <bt_gatt_foreach_attr>
		if (data.err) {
   15b34:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15b38:	2b00      	cmp	r3, #0
   15b3a:	d0e8      	beq.n	15b0e <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15b3c:	9b02      	ldr	r3, [sp, #8]
   15b3e:	6998      	ldr	r0, [r3, #24]
   15b40:	f7ff fcae 	bl	154a0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15b44:	9802      	ldr	r0, [sp, #8]
   15b46:	f002 fd8d 	bl	18664 <net_buf_unref>
	if (!req) {
   15b4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15b4e:	4632      	mov	r2, r6
   15b50:	2120      	movs	r1, #32
   15b52:	4620      	mov	r0, r4
   15b54:	f00b fe10 	bl	21778 <send_err_rsp.part.0>
			return 0;
   15b58:	2000      	movs	r0, #0
   15b5a:	e7c2      	b.n	15ae2 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15b5c:	200e      	movs	r0, #14
   15b5e:	e7c0      	b.n	15ae2 <att_read_mult_vl_req+0x26>
   15b60:	000214cf 	.word	0x000214cf

00015b64 <att_read_mult_req>:
{
   15b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15b68:	6846      	ldr	r6, [r0, #4]
{
   15b6a:	b085      	sub	sp, #20
   15b6c:	4604      	mov	r4, r0
   15b6e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15b70:	4630      	mov	r0, r6
   15b72:	2101      	movs	r1, #1
   15b74:	f00c fe75 	bl	22862 <bt_gatt_change_aware>
   15b78:	b950      	cbnz	r0, 15b90 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15b7a:	2105      	movs	r1, #5
   15b7c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15b80:	f00b fd69 	bl	21656 <atomic_test_and_set_bit>
   15b84:	2800      	cmp	r0, #0
   15b86:	d13b      	bne.n	15c00 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15b88:	2012      	movs	r0, #18
}
   15b8a:	b005      	add	sp, #20
   15b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   15b90:	2210      	movs	r2, #16
   15b92:	2100      	movs	r1, #0
   15b94:	4668      	mov	r0, sp
   15b96:	f00a f9bb 	bl	1ff10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15b9a:	2200      	movs	r2, #0
   15b9c:	210f      	movs	r1, #15
   15b9e:	4630      	mov	r0, r6
   15ba0:	f00b fe2d 	bl	217fe <bt_att_create_pdu>
   15ba4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15ba6:	b368      	cbz	r0, 15c04 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15ba8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 15c08 <att_read_mult_req+0xa4>
	data.chan = chan;
   15bac:	9400      	str	r4, [sp, #0]
   15bae:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15bb2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   15bb6:	8a2b      	ldrh	r3, [r5, #16]
   15bb8:	2b01      	cmp	r3, #1
   15bba:	d804      	bhi.n	15bc6 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   15bbc:	9902      	ldr	r1, [sp, #8]
   15bbe:	4620      	mov	r0, r4
   15bc0:	f00b fa27 	bl	21012 <bt_att_chan_send_rsp>
	return 0;
   15bc4:	e01c      	b.n	15c00 <att_read_mult_req+0x9c>
   15bc6:	4638      	mov	r0, r7
   15bc8:	f00d fde6 	bl	23798 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15bcc:	466b      	mov	r3, sp
   15bce:	464a      	mov	r2, r9
   15bd0:	4601      	mov	r1, r0
   15bd2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15bd4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15bd8:	f00b fa8d 	bl	210f6 <bt_gatt_foreach_attr>
		if (data.err) {
   15bdc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15be0:	2b00      	cmp	r3, #0
   15be2:	d0e8      	beq.n	15bb6 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15be4:	9b02      	ldr	r3, [sp, #8]
   15be6:	6998      	ldr	r0, [r3, #24]
   15be8:	f7ff fc5a 	bl	154a0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15bec:	9802      	ldr	r0, [sp, #8]
   15bee:	f002 fd39 	bl	18664 <net_buf_unref>
	if (!req) {
   15bf2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15bf6:	4632      	mov	r2, r6
   15bf8:	210e      	movs	r1, #14
   15bfa:	4620      	mov	r0, r4
   15bfc:	f00b fdbc 	bl	21778 <send_err_rsp.part.0>
			return 0;
   15c00:	2000      	movs	r0, #0
   15c02:	e7c2      	b.n	15b8a <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15c04:	200e      	movs	r0, #14
   15c06:	e7c0      	b.n	15b8a <att_read_mult_req+0x26>
   15c08:	00021489 	.word	0x00021489

00015c0c <att_read_rsp>:
{
   15c0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15c10:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   15c14:	4604      	mov	r4, r0
   15c16:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15c18:	4640      	mov	r0, r8
   15c1a:	2101      	movs	r1, #1
{
   15c1c:	4617      	mov	r7, r2
   15c1e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   15c20:	f00c fe1f 	bl	22862 <bt_gatt_change_aware>
   15c24:	b948      	cbnz	r0, 15c3a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15c26:	2105      	movs	r1, #5
   15c28:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15c2c:	f00b fd13 	bl	21656 <atomic_test_and_set_bit>
   15c30:	bb78      	cbnz	r0, 15c92 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15c32:	2012      	movs	r0, #18
}
   15c34:	b004      	add	sp, #16
   15c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   15c3a:	b38d      	cbz	r5, 15ca0 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   15c3c:	2210      	movs	r2, #16
   15c3e:	2100      	movs	r1, #0
   15c40:	4668      	mov	r0, sp
   15c42:	f00a f965 	bl	1ff10 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   15c46:	2200      	movs	r2, #0
   15c48:	4639      	mov	r1, r7
   15c4a:	4640      	mov	r0, r8
   15c4c:	f00b fdd7 	bl	217fe <bt_att_create_pdu>
   15c50:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15c52:	b338      	cbz	r0, 15ca4 <att_read_rsp+0x98>
	data.offset = offset;
   15c54:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15c58:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15c5c:	2301      	movs	r3, #1
   15c5e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15c62:	4a11      	ldr	r2, [pc, #68]	; (15ca8 <att_read_rsp+0x9c>)
	data.chan = chan;
   15c64:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15c66:	466b      	mov	r3, sp
   15c68:	4629      	mov	r1, r5
   15c6a:	4628      	mov	r0, r5
   15c6c:	f00b fa43 	bl	210f6 <bt_gatt_foreach_attr>
	if (data.err) {
   15c70:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15c74:	b17b      	cbz	r3, 15c96 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15c76:	9b02      	ldr	r3, [sp, #8]
   15c78:	6998      	ldr	r0, [r3, #24]
   15c7a:	f7ff fc11 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15c7e:	9802      	ldr	r0, [sp, #8]
   15c80:	f002 fcf0 	bl	18664 <net_buf_unref>
	if (!req) {
   15c84:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15c88:	462a      	mov	r2, r5
   15c8a:	4631      	mov	r1, r6
   15c8c:	4620      	mov	r0, r4
   15c8e:	f00b fd73 	bl	21778 <send_err_rsp.part.0>
			return 0;
   15c92:	2000      	movs	r0, #0
   15c94:	e7ce      	b.n	15c34 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   15c96:	9902      	ldr	r1, [sp, #8]
   15c98:	4620      	mov	r0, r4
   15c9a:	f00b f9ba 	bl	21012 <bt_att_chan_send_rsp>
	return 0;
   15c9e:	e7f8      	b.n	15c92 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   15ca0:	2001      	movs	r0, #1
   15ca2:	e7c7      	b.n	15c34 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   15ca4:	200e      	movs	r0, #14
   15ca6:	e7c5      	b.n	15c34 <att_read_rsp+0x28>
   15ca8:	00021489 	.word	0x00021489

00015cac <att_read_type_req>:
{
   15cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15cb0:	8a0d      	ldrh	r5, [r1, #16]
   15cb2:	3d04      	subs	r5, #4
   15cb4:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   15cb6:	2d02      	cmp	r5, #2
{
   15cb8:	4604      	mov	r4, r0
   15cba:	b08c      	sub	sp, #48	; 0x30
   15cbc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15cbe:	d001      	beq.n	15cc4 <att_read_type_req+0x18>
   15cc0:	2d10      	cmp	r5, #16
   15cc2:	d150      	bne.n	15d66 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   15cc4:	2104      	movs	r1, #4
   15cc6:	300c      	adds	r0, #12
   15cc8:	f00d fd56 	bl	23778 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15ccc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   15cd0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15cd2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15cd4:	1d01      	adds	r1, r0, #4
   15cd6:	462a      	mov	r2, r5
   15cd8:	4640      	mov	r0, r8
   15cda:	f00a f995 	bl	20008 <bt_uuid_create>
   15cde:	b188      	cbz	r0, 15d04 <att_read_type_req+0x58>
	if (!start || !end) {
   15ce0:	b19e      	cbz	r6, 15d0a <att_read_type_req+0x5e>
   15ce2:	b18f      	cbz	r7, 15d08 <att_read_type_req+0x5c>
	if (start > end) {
   15ce4:	42b7      	cmp	r7, r6
   15ce6:	d310      	bcc.n	15d0a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15ce8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15cea:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15cec:	2100      	movs	r1, #0
   15cee:	eb0d 0002 	add.w	r0, sp, r2
   15cf2:	f00a f90d 	bl	1ff10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15cf6:	2201      	movs	r2, #1
   15cf8:	2109      	movs	r1, #9
   15cfa:	4628      	mov	r0, r5
   15cfc:	f00b fd7f 	bl	217fe <bt_att_create_pdu>
   15d00:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   15d02:	b960      	cbnz	r0, 15d1e <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   15d04:	200e      	movs	r0, #14
   15d06:	e007      	b.n	15d18 <att_read_type_req+0x6c>
			*err = 0U;
   15d08:	463e      	mov	r6, r7
	if (!req) {
   15d0a:	2301      	movs	r3, #1
   15d0c:	4632      	mov	r2, r6
   15d0e:	2108      	movs	r1, #8
   15d10:	4620      	mov	r0, r4
   15d12:	f00b fd31 	bl	21778 <send_err_rsp.part.0>
		return 0;
   15d16:	2000      	movs	r0, #0
}
   15d18:	b00c      	add	sp, #48	; 0x30
   15d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   15d1e:	2101      	movs	r1, #1
   15d20:	300c      	adds	r0, #12
	data.uuid = uuid;
   15d22:	e9cd 4806 	strd	r4, r8, [sp, #24]
   15d26:	f00d fcf6 	bl	23716 <net_buf_simple_add>
	data.rsp->len = 0U;
   15d2a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15d2c:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   15d2e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15d30:	230a      	movs	r3, #10
   15d32:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15d36:	4a0d      	ldr	r2, [pc, #52]	; (15d6c <att_read_type_req+0xc0>)
   15d38:	ab06      	add	r3, sp, #24
   15d3a:	4639      	mov	r1, r7
   15d3c:	4630      	mov	r0, r6
   15d3e:	f00b f9da 	bl	210f6 <bt_gatt_foreach_attr>
	if (data.err) {
   15d42:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15d46:	b14b      	cbz	r3, 15d5c <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15d48:	9b08      	ldr	r3, [sp, #32]
   15d4a:	6998      	ldr	r0, [r3, #24]
   15d4c:	f7ff fba8 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15d50:	9808      	ldr	r0, [sp, #32]
   15d52:	f002 fc87 	bl	18664 <net_buf_unref>
	if (!req) {
   15d56:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15d5a:	e7d7      	b.n	15d0c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   15d5c:	9908      	ldr	r1, [sp, #32]
   15d5e:	4620      	mov	r0, r4
   15d60:	f00b f957 	bl	21012 <bt_att_chan_send_rsp>
	return 0;
   15d64:	e7d7      	b.n	15d16 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   15d66:	2004      	movs	r0, #4
   15d68:	e7d6      	b.n	15d18 <att_read_type_req+0x6c>
   15d6a:	bf00      	nop
   15d6c:	00015605 	.word	0x00015605

00015d70 <att_find_type_req>:
{
   15d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15d74:	460f      	mov	r7, r1
   15d76:	b086      	sub	sp, #24
   15d78:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   15d7a:	2106      	movs	r1, #6
   15d7c:	f107 000c 	add.w	r0, r7, #12
   15d80:	f00d fcfa 	bl	23778 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   15d84:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15d86:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   15d8a:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   15d8c:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   15d90:	b1c5      	cbz	r5, 15dc4 <att_find_type_req+0x54>
   15d92:	2300      	movs	r3, #0
   15d94:	f1b8 0f00 	cmp.w	r8, #0
   15d98:	d013      	beq.n	15dc2 <att_find_type_req+0x52>
	if (start > end) {
   15d9a:	4545      	cmp	r5, r8
   15d9c:	d812      	bhi.n	15dc4 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15d9e:	f88d 3000 	strb.w	r3, [sp]
   15da2:	f88d 3004 	strb.w	r3, [sp, #4]
   15da6:	a901      	add	r1, sp, #4
   15da8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15dac:	4668      	mov	r0, sp
   15dae:	f8ad 2002 	strh.w	r2, [sp, #2]
   15db2:	f8ad 3006 	strh.w	r3, [sp, #6]
   15db6:	f00a f8f9 	bl	1ffac <bt_uuid_cmp>
   15dba:	4606      	mov	r6, r0
   15dbc:	b160      	cbz	r0, 15dd8 <att_find_type_req+0x68>
	if (!req) {
   15dbe:	230a      	movs	r3, #10
   15dc0:	e001      	b.n	15dc6 <att_find_type_req+0x56>
			*err = 0U;
   15dc2:	4645      	mov	r5, r8
	if (!req) {
   15dc4:	2301      	movs	r3, #1
   15dc6:	462a      	mov	r2, r5
   15dc8:	2106      	movs	r1, #6
   15dca:	4620      	mov	r0, r4
   15dcc:	f00b fcd4 	bl	21778 <send_err_rsp.part.0>
		return 0;
   15dd0:	2000      	movs	r0, #0
}
   15dd2:	b006      	add	sp, #24
   15dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   15dd8:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15ddc:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   15dde:	4601      	mov	r1, r0
   15de0:	2214      	movs	r2, #20
   15de2:	a801      	add	r0, sp, #4
   15de4:	f00a f894 	bl	1ff10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   15de8:	4632      	mov	r2, r6
   15dea:	2107      	movs	r1, #7
   15dec:	4650      	mov	r0, sl
   15dee:	f00b fd06 	bl	217fe <bt_att_create_pdu>
   15df2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15df4:	b1f8      	cbz	r0, 15e36 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15df6:	230a      	movs	r3, #10
   15df8:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15dfc:	4a0f      	ldr	r2, [pc, #60]	; (15e3c <att_find_type_req+0xcc>)
	data.chan = chan;
   15dfe:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15e00:	ab01      	add	r3, sp, #4
   15e02:	4641      	mov	r1, r8
   15e04:	4628      	mov	r0, r5
	data.value = value;
   15e06:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   15e0a:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15e0e:	f00b f972 	bl	210f6 <bt_gatt_foreach_attr>
	if (data.err) {
   15e12:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15e16:	b14b      	cbz	r3, 15e2c <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15e18:	9b02      	ldr	r3, [sp, #8]
   15e1a:	6998      	ldr	r0, [r3, #24]
   15e1c:	f7ff fb40 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15e20:	9802      	ldr	r0, [sp, #8]
   15e22:	f002 fc1f 	bl	18664 <net_buf_unref>
	if (!req) {
   15e26:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15e2a:	e7cc      	b.n	15dc6 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   15e2c:	9902      	ldr	r1, [sp, #8]
   15e2e:	4620      	mov	r0, r4
   15e30:	f00b f8ef 	bl	21012 <bt_att_chan_send_rsp>
	return 0;
   15e34:	e7cc      	b.n	15dd0 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   15e36:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15e38:	e7cb      	b.n	15dd2 <att_find_type_req+0x62>
   15e3a:	bf00      	nop
   15e3c:	0002110d 	.word	0x0002110d

00015e40 <att_find_info_req>:
{
   15e40:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   15e42:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   15e44:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15e46:	885e      	ldrh	r6, [r3, #2]
{
   15e48:	b085      	sub	sp, #20
   15e4a:	4604      	mov	r4, r0
	if (!start || !end) {
   15e4c:	b195      	cbz	r5, 15e74 <att_find_info_req+0x34>
   15e4e:	b186      	cbz	r6, 15e72 <att_find_info_req+0x32>
	if (start > end) {
   15e50:	42b5      	cmp	r5, r6
   15e52:	d80f      	bhi.n	15e74 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15e54:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   15e56:	2210      	movs	r2, #16
   15e58:	2100      	movs	r1, #0
   15e5a:	4668      	mov	r0, sp
   15e5c:	f00a f858 	bl	1ff10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   15e60:	2200      	movs	r2, #0
   15e62:	2105      	movs	r1, #5
   15e64:	4638      	mov	r0, r7
   15e66:	f00b fcca 	bl	217fe <bt_att_create_pdu>
   15e6a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15e6c:	b958      	cbnz	r0, 15e86 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   15e6e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   15e70:	e007      	b.n	15e82 <att_find_info_req+0x42>
			*err = 0U;
   15e72:	4635      	mov	r5, r6
	if (!req) {
   15e74:	2301      	movs	r3, #1
   15e76:	462a      	mov	r2, r5
   15e78:	2104      	movs	r1, #4
   15e7a:	4620      	mov	r0, r4
   15e7c:	f00b fc7c 	bl	21778 <send_err_rsp.part.0>
		return 0;
   15e80:	2000      	movs	r0, #0
}
   15e82:	b005      	add	sp, #20
   15e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15e86:	466b      	mov	r3, sp
   15e88:	4a0a      	ldr	r2, [pc, #40]	; (15eb4 <att_find_info_req+0x74>)
	data.chan = chan;
   15e8a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15e8c:	4631      	mov	r1, r6
   15e8e:	4628      	mov	r0, r5
   15e90:	f00b f931 	bl	210f6 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   15e94:	9b02      	ldr	r3, [sp, #8]
   15e96:	b943      	cbnz	r3, 15eaa <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15e98:	9b01      	ldr	r3, [sp, #4]
   15e9a:	6998      	ldr	r0, [r3, #24]
   15e9c:	f7ff fb00 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15ea0:	9801      	ldr	r0, [sp, #4]
   15ea2:	f002 fbdf 	bl	18664 <net_buf_unref>
	if (!req) {
   15ea6:	230a      	movs	r3, #10
   15ea8:	e7e5      	b.n	15e76 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   15eaa:	9901      	ldr	r1, [sp, #4]
   15eac:	4620      	mov	r0, r4
   15eae:	f00b f8b0 	bl	21012 <bt_att_chan_send_rsp>
	return 0;
   15eb2:	e7e5      	b.n	15e80 <att_find_info_req+0x40>
   15eb4:	00021235 	.word	0x00021235

00015eb8 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   15eb8:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   15eba:	4c0b      	ldr	r4, [pc, #44]	; (15ee8 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   15ebc:	4d0b      	ldr	r5, [pc, #44]	; (15eec <bt_att_init+0x34>)
   15ebe:	4620      	mov	r0, r4
   15ec0:	f00e f8fe 	bl	240c0 <z_impl_k_queue_init>
   15ec4:	4629      	mov	r1, r5
   15ec6:	4620      	mov	r0, r4
   15ec8:	f00e f906 	bl	240d8 <k_queue_append>
   15ecc:	f105 0114 	add.w	r1, r5, #20
   15ed0:	4620      	mov	r0, r4
   15ed2:	f00e f901 	bl	240d8 <k_queue_append>
   15ed6:	f105 0128 	add.w	r1, r5, #40	; 0x28
   15eda:	4620      	mov	r0, r4
   15edc:	f00e f8fc 	bl	240d8 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   15ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   15ee4:	f000 bb2c 	b.w	16540 <bt_gatt_init>
   15ee8:	20000848 	.word	0x20000848
   15eec:	20002c14 	.word	0x20002c14

00015ef0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   15ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   15ef2:	2300      	movs	r3, #0
{
   15ef4:	4605      	mov	r5, r0
   15ef6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   15ef8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   15efa:	f005 fff7 	bl	1beec <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   15efe:	4b0b      	ldr	r3, [pc, #44]	; (15f2c <bt_att_req_alloc+0x3c>)
   15f00:	681b      	ldr	r3, [r3, #0]
   15f02:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   15f04:	bf04      	itt	eq
   15f06:	2500      	moveq	r5, #0
   15f08:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15f0a:	a901      	add	r1, sp, #4
   15f0c:	4808      	ldr	r0, [pc, #32]	; (15f30 <bt_att_req_alloc+0x40>)
   15f0e:	462a      	mov	r2, r5
   15f10:	4623      	mov	r3, r4
   15f12:	f005 f903 	bl	1b11c <k_mem_slab_alloc>
   15f16:	4601      	mov	r1, r0
   15f18:	b930      	cbnz	r0, 15f28 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   15f1a:	9801      	ldr	r0, [sp, #4]
   15f1c:	221c      	movs	r2, #28
   15f1e:	f009 fff7 	bl	1ff10 <memset>

	return req;
   15f22:	9801      	ldr	r0, [sp, #4]
}
   15f24:	b003      	add	sp, #12
   15f26:	bd30      	pop	{r4, r5, pc}
		return NULL;
   15f28:	2000      	movs	r0, #0
   15f2a:	e7fb      	b.n	15f24 <bt_att_req_alloc+0x34>
   15f2c:	20002c50 	.word	0x20002c50
   15f30:	200007b0 	.word	0x200007b0

00015f34 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   15f34:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   15f36:	6883      	ldr	r3, [r0, #8]
{
   15f38:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   15f3a:	b14b      	cbz	r3, 15f50 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   15f3c:	6998      	ldr	r0, [r3, #24]
   15f3e:	f7ff faaf 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(req->buf);
   15f42:	9b01      	ldr	r3, [sp, #4]
   15f44:	6898      	ldr	r0, [r3, #8]
   15f46:	f002 fb8d 	bl	18664 <net_buf_unref>
		req->buf = NULL;
   15f4a:	9b01      	ldr	r3, [sp, #4]
   15f4c:	2200      	movs	r2, #0
   15f4e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   15f50:	4803      	ldr	r0, [pc, #12]	; (15f60 <bt_att_req_free+0x2c>)
   15f52:	a901      	add	r1, sp, #4
   15f54:	f00d fff8 	bl	23f48 <k_mem_slab_free>
}
   15f58:	b003      	add	sp, #12
   15f5a:	f85d fb04 	ldr.w	pc, [sp], #4
   15f5e:	bf00      	nop
   15f60:	200007b0 	.word	0x200007b0

00015f64 <att_handle_rsp>:
{
   15f64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15f68:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15f6a:	3058      	adds	r0, #88	; 0x58
{
   15f6c:	460e      	mov	r6, r1
   15f6e:	4617      	mov	r7, r2
   15f70:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   15f72:	f00e f99f 	bl	242b4 <k_work_cancel_delayable>
	if (!chan->req) {
   15f76:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   15f78:	b930      	cbnz	r0, 15f88 <att_handle_rsp+0x24>
	att_req_send_process(chan->att);
   15f7a:	6820      	ldr	r0, [r4, #0]
   15f7c:	f00b fb08 	bl	21590 <att_req_send_process>
}
   15f80:	2000      	movs	r0, #0
   15f82:	b002      	add	sp, #8
   15f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   15f88:	4b10      	ldr	r3, [pc, #64]	; (15fcc <att_handle_rsp+0x68>)
   15f8a:	4298      	cmp	r0, r3
   15f8c:	f04f 0800 	mov.w	r8, #0
   15f90:	d102      	bne.n	15f98 <att_handle_rsp+0x34>
		chan->req = NULL;
   15f92:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   15f96:	e7f0      	b.n	15f7a <att_handle_rsp+0x16>
	func = chan->req->func;
   15f98:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   15f9c:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   15fa0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   15fa2:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   15fa6:	f7ff ffc5 	bl	15f34 <bt_att_req_free>
	att_req_send_process(chan->att);
   15faa:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   15fac:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   15fb0:	f00b faee 	bl	21590 <att_req_send_process>
	if (func) {
   15fb4:	f1b9 0f00 	cmp.w	r9, #0
   15fb8:	d0e2      	beq.n	15f80 <att_handle_rsp+0x1c>
		func(chan->att->conn, err, pdu, len, params);
   15fba:	6820      	ldr	r0, [r4, #0]
   15fbc:	f8cd a000 	str.w	sl, [sp]
   15fc0:	6800      	ldr	r0, [r0, #0]
   15fc2:	463b      	mov	r3, r7
   15fc4:	4632      	mov	r2, r6
   15fc6:	4629      	mov	r1, r5
   15fc8:	47c8      	blx	r9
   15fca:	e7d9      	b.n	15f80 <att_handle_rsp+0x1c>
   15fcc:	20002c54 	.word	0x20002c54

00015fd0 <att_error_rsp>:
{
   15fd0:	b570      	push	{r4, r5, r6, lr}
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   15fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
	rsp = (void *)buf->data;
   15fd4:	68ca      	ldr	r2, [r1, #12]
{
   15fd6:	4605      	mov	r5, r0
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   15fd8:	b30b      	cbz	r3, 1601e <att_error_rsp+0x4e>
   15fda:	4915      	ldr	r1, [pc, #84]	; (16030 <att_error_rsp+0x60>)
   15fdc:	428b      	cmp	r3, r1
   15fde:	d01e      	beq.n	1601e <att_error_rsp+0x4e>
   15fe0:	78d4      	ldrb	r4, [r2, #3]
   15fe2:	b1e4      	cbz	r4, 1601e <att_error_rsp+0x4e>
	switch (err) {
   15fe4:	2c05      	cmp	r4, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   15fe6:	6840      	ldr	r0, [r0, #4]
	switch (err) {
   15fe8:	d006      	beq.n	15ff8 <att_error_rsp+0x28>
   15fea:	2c0f      	cmp	r4, #15
   15fec:	d118      	bne.n	16020 <att_error_rsp+0x50>
		if (conn->sec_level >= BT_SECURITY_L2)
   15fee:	7a43      	ldrb	r3, [r0, #9]
   15ff0:	2b01      	cmp	r3, #1
   15ff2:	d815      	bhi.n	16020 <att_error_rsp+0x50>
		sec = BT_SECURITY_L2;
   15ff4:	2102      	movs	r1, #2
   15ff6:	e007      	b.n	16008 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   15ff8:	7a43      	ldrb	r3, [r0, #9]
   15ffa:	2b01      	cmp	r3, #1
   15ffc:	d9fa      	bls.n	15ff4 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   15ffe:	2b02      	cmp	r3, #2
   16000:	d00b      	beq.n	1601a <att_error_rsp+0x4a>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   16002:	2b03      	cmp	r3, #3
   16004:	d10c      	bne.n	16020 <att_error_rsp+0x50>
			sec = BT_SECURITY_L4;
   16006:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   16008:	f00a fd85 	bl	20b16 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1600c:	b940      	cbnz	r0, 16020 <att_error_rsp+0x50>
		chan->req->retrying = true;
   1600e:	6baa      	ldr	r2, [r5, #56]	; 0x38
   16010:	7c13      	ldrb	r3, [r2, #16]
   16012:	f043 0301 	orr.w	r3, r3, #1
   16016:	7413      	strb	r3, [r2, #16]
}
   16018:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   1601a:	2103      	movs	r1, #3
   1601c:	e7f4      	b.n	16008 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   1601e:	240e      	movs	r4, #14
	return att_handle_rsp(chan, NULL, 0, err);
   16020:	2200      	movs	r2, #0
   16022:	4623      	mov	r3, r4
   16024:	4628      	mov	r0, r5
   16026:	4611      	mov	r1, r2
}
   16028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   1602c:	f7ff bf9a 	b.w	15f64 <att_handle_rsp>
   16030:	20002c54 	.word	0x20002c54

00016034 <bt_att_disconnected>:
{
   16034:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   16038:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1603c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1603e:	2e00      	cmp	r6, #0
   16040:	d05a      	beq.n	160f8 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16042:	f100 0184 	add.w	r1, r0, #132	; 0x84
   16046:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1604a:	f00b f9f3 	bl	21434 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1604e:	1f27      	subs	r7, r4, #4
   16050:	f104 0838 	add.w	r8, r4, #56	; 0x38
   16054:	2200      	movs	r2, #0
   16056:	2300      	movs	r3, #0
   16058:	4640      	mov	r0, r8
   1605a:	f00d fafb 	bl	23654 <net_buf_get>
   1605e:	4605      	mov	r5, r0
   16060:	bb48      	cbnz	r0, 160b6 <bt_att_disconnected+0x82>
	if (chan->req) {
   16062:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16064:	b12b      	cbz	r3, 16072 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16066:	4602      	mov	r2, r0
   16068:	4601      	mov	r1, r0
   1606a:	230e      	movs	r3, #14
   1606c:	4638      	mov	r0, r7
   1606e:	f7ff ff79 	bl	15f64 <att_handle_rsp>
	chan->att = NULL;
   16072:	2300      	movs	r3, #0
   16074:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   16078:	2102      	movs	r1, #2
   1607a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1607e:	f00b f9f2 	bl	21466 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   16082:	6a73      	ldr	r3, [r6, #36]	; 0x24
   16084:	2b00      	cmp	r3, #0
   16086:	d137      	bne.n	160f8 <bt_att_disconnected+0xc4>
	att_reset(att);
   16088:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1608a:	9803      	ldr	r0, [sp, #12]
   1608c:	2200      	movs	r2, #0
   1608e:	2300      	movs	r3, #0
   16090:	300c      	adds	r0, #12
   16092:	f00d fadf 	bl	23654 <net_buf_get>
   16096:	4605      	mov	r5, r0
   16098:	b9a0      	cbnz	r0, 160c4 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1609a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1609c:	6845      	ldr	r5, [r0, #4]
   1609e:	b9c5      	cbnz	r5, 160d2 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   160a0:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   160a2:	a903      	add	r1, sp, #12
   160a4:	4816      	ldr	r0, [pc, #88]	; (16100 <bt_att_disconnected+0xcc>)
   160a6:	f00d ff4f 	bl	23f48 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   160aa:	6820      	ldr	r0, [r4, #0]
}
   160ac:	b004      	add	sp, #16
   160ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   160b2:	f001 b8c5 	b.w	17240 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   160b6:	69a8      	ldr	r0, [r5, #24]
   160b8:	f7ff f9f2 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(buf);
   160bc:	4628      	mov	r0, r5
   160be:	f002 fad1 	bl	18664 <net_buf_unref>
   160c2:	e7c7      	b.n	16054 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   160c4:	69a8      	ldr	r0, [r5, #24]
   160c6:	f7ff f9eb 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(buf);
   160ca:	4628      	mov	r0, r5
   160cc:	f002 faca 	bl	18664 <net_buf_unref>
   160d0:	e7db      	b.n	1608a <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   160d2:	6882      	ldr	r2, [r0, #8]
	return node->next;
   160d4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   160d6:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   160d8:	4295      	cmp	r5, r2
	list->tail = node;
   160da:	bf08      	it	eq
   160dc:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   160de:	686e      	ldr	r6, [r5, #4]
   160e0:	b136      	cbz	r6, 160f0 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   160e2:	69ab      	ldr	r3, [r5, #24]
   160e4:	9300      	str	r3, [sp, #0]
   160e6:	2300      	movs	r3, #0
   160e8:	6800      	ldr	r0, [r0, #0]
   160ea:	461a      	mov	r2, r3
   160ec:	210e      	movs	r1, #14
   160ee:	47b0      	blx	r6
		bt_att_req_free(req);
   160f0:	4628      	mov	r0, r5
   160f2:	f7ff ff1f 	bl	15f34 <bt_att_req_free>
   160f6:	e7d0      	b.n	1609a <bt_att_disconnected+0x66>
}
   160f8:	b004      	add	sp, #16
   160fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160fe:	bf00      	nop
   16100:	20000778 	.word	0x20000778

00016104 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   16104:	b510      	push	{r4, lr}
   16106:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   16108:	b320      	cbz	r0, 16154 <bt_att_req_cancel+0x50>
   1610a:	b319      	cbz	r1, 16154 <bt_att_req_cancel+0x50>
		return;
	}

	att = att_get(conn);
   1610c:	f00a ff3b 	bl	20f86 <att_get>
	if (!att) {
   16110:	b300      	cbz	r0, 16154 <bt_att_req_cancel+0x50>
	return list->head;
   16112:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16114:	b1c3      	cbz	r3, 16148 <bt_att_req_cancel+0x44>
	return node->next;
   16116:	f853 2988 	ldr.w	r2, [r3], #-136
   1611a:	b102      	cbz	r2, 1611e <bt_att_req_cancel+0x1a>
   1611c:	3a88      	subs	r2, #136	; 0x88
	if (chan->req != req) {
   1611e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   16120:	428c      	cmp	r4, r1
   16122:	d00a      	beq.n	1613a <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16124:	b182      	cbz	r2, 16148 <bt_att_req_cancel+0x44>
   16126:	4613      	mov	r3, r2
   16128:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
   1612c:	2a00      	cmp	r2, #0
   1612e:	d0f6      	beq.n	1611e <bt_att_req_cancel+0x1a>
	if (chan->req != req) {
   16130:	6b99      	ldr	r1, [r3, #56]	; 0x38
   16132:	428c      	cmp	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16134:	f1a2 0288 	sub.w	r2, r2, #136	; 0x88
	if (chan->req != req) {
   16138:	d1f5      	bne.n	16126 <bt_att_req_cancel+0x22>
	chan->req = &cancel;
   1613a:	4a07      	ldr	r2, [pc, #28]	; (16158 <bt_att_req_cancel+0x54>)
   1613c:	639a      	str	r2, [r3, #56]	; 0x38
	bt_att_req_free(req);
   1613e:	4620      	mov	r0, r4

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   16140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   16144:	f7ff bef6 	b.w	15f34 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   16148:	3004      	adds	r0, #4
   1614a:	4621      	mov	r1, r4
   1614c:	f00b f972 	bl	21434 <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   16150:	4620      	mov	r0, r4
   16152:	e7f5      	b.n	16140 <bt_att_req_cancel+0x3c>
}
   16154:	bd10      	pop	{r4, pc}
   16156:	bf00      	nop
   16158:	20002c54 	.word	0x20002c54

0001615c <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1615c:	b570      	push	{r4, r5, r6, lr}
   1615e:	4d14      	ldr	r5, [pc, #80]	; (161b0 <find_cf_cfg+0x54>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16160:	4606      	mov	r6, r0
   16162:	b140      	cbz	r0, 16176 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16164:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16168:	462a      	mov	r2, r5
   1616a:	1e6c      	subs	r4, r5, #1
   1616c:	f00a fd2a 	bl	20bc4 <bt_conn_is_peer_addr_le>
   16170:	b198      	cbz	r0, 1619a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16172:	4620      	mov	r0, r4
   16174:	e00c      	b.n	16190 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16176:	490f      	ldr	r1, [pc, #60]	; (161b4 <find_cf_cfg+0x58>)
   16178:	4628      	mov	r0, r5
   1617a:	f00b fd41 	bl	21c00 <bt_addr_le_eq>
   1617e:	b940      	cbnz	r0, 16192 <find_cf_cfg+0x36>
   16180:	490c      	ldr	r1, [pc, #48]	; (161b4 <find_cf_cfg+0x58>)
   16182:	f105 0010 	add.w	r0, r5, #16
   16186:	f00b fd3b 	bl	21c00 <bt_addr_le_eq>
   1618a:	b120      	cbz	r0, 16196 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1618c:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   16190:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16192:	1e68      	subs	r0, r5, #1
   16194:	e7fc      	b.n	16190 <find_cf_cfg+0x34>
	return NULL;
   16196:	2000      	movs	r0, #0
   16198:	e7fa      	b.n	16190 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1619a:	7c21      	ldrb	r1, [r4, #16]
   1619c:	f104 0211 	add.w	r2, r4, #17
   161a0:	4630      	mov	r0, r6
   161a2:	f00a fd0f 	bl	20bc4 <bt_conn_is_peer_addr_le>
   161a6:	2800      	cmp	r0, #0
   161a8:	d0f5      	beq.n	16196 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   161aa:	f104 0010 	add.w	r0, r4, #16
   161ae:	e7ef      	b.n	16190 <find_cf_cfg+0x34>
   161b0:	20002c89 	.word	0x20002c89
   161b4:	000259ef 	.word	0x000259ef

000161b8 <find_sc_cfg>:
{
   161b8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   161ba:	4c0e      	ldr	r4, [pc, #56]	; (161f4 <find_sc_cfg+0x3c>)
   161bc:	7823      	ldrb	r3, [r4, #0]
   161be:	4283      	cmp	r3, r0
{
   161c0:	4605      	mov	r5, r0
   161c2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   161c4:	d00c      	beq.n	161e0 <find_sc_cfg+0x28>
   161c6:	7b23      	ldrb	r3, [r4, #12]
   161c8:	42ab      	cmp	r3, r5
   161ca:	d110      	bne.n	161ee <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   161cc:	480a      	ldr	r0, [pc, #40]	; (161f8 <find_sc_cfg+0x40>)
   161ce:	4631      	mov	r1, r6
   161d0:	f00b fd16 	bl	21c00 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   161d4:	b158      	cbz	r0, 161ee <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   161d6:	2301      	movs	r3, #1
			return &sc_cfg[i];
   161d8:	220c      	movs	r2, #12
   161da:	fb02 4003 	mla	r0, r2, r3, r4
   161de:	e007      	b.n	161f0 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   161e0:	1c60      	adds	r0, r4, #1
   161e2:	f00b fd0d 	bl	21c00 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   161e6:	2800      	cmp	r0, #0
   161e8:	d0ed      	beq.n	161c6 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   161ea:	2300      	movs	r3, #0
   161ec:	e7f4      	b.n	161d8 <find_sc_cfg+0x20>
	return NULL;
   161ee:	2000      	movs	r0, #0
}
   161f0:	bd70      	pop	{r4, r5, r6, pc}
   161f2:	bf00      	nop
   161f4:	20003956 	.word	0x20003956
   161f8:	20003963 	.word	0x20003963

000161fc <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   161fc:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   161fe:	1c4a      	adds	r2, r1, #1
{
   16200:	460c      	mov	r4, r1
		if (conn) {
   16202:	4605      	mov	r5, r0
   16204:	b968      	cbnz	r0, 16222 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16206:	490e      	ldr	r1, [pc, #56]	; (16240 <find_ccc_cfg+0x44>)
   16208:	4610      	mov	r0, r2
   1620a:	f00b fcf9 	bl	21c00 <bt_addr_le_eq>
   1620e:	b930      	cbnz	r0, 1621e <find_ccc_cfg+0x22>
   16210:	490b      	ldr	r1, [pc, #44]	; (16240 <find_ccc_cfg+0x44>)
   16212:	f104 000b 	add.w	r0, r4, #11
   16216:	f00b fcf3 	bl	21c00 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1621a:	b170      	cbz	r0, 1623a <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1621c:	340a      	adds	r4, #10
   1621e:	4620      	mov	r0, r4
   16220:	e00c      	b.n	1623c <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   16222:	7809      	ldrb	r1, [r1, #0]
   16224:	f00a fcce 	bl	20bc4 <bt_conn_is_peer_addr_le>
   16228:	2800      	cmp	r0, #0
   1622a:	d1f8      	bne.n	1621e <find_ccc_cfg+0x22>
   1622c:	7aa1      	ldrb	r1, [r4, #10]
   1622e:	f104 020b 	add.w	r2, r4, #11
   16232:	4628      	mov	r0, r5
   16234:	f00a fcc6 	bl	20bc4 <bt_conn_is_peer_addr_le>
   16238:	e7ef      	b.n	1621a <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   1623a:	2000      	movs	r0, #0
}
   1623c:	bd38      	pop	{r3, r4, r5, pc}
   1623e:	bf00      	nop
   16240:	000259ef 	.word	0x000259ef

00016244 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   16244:	b570      	push	{r4, r5, r6, lr}
   16246:	4d14      	ldr	r5, [pc, #80]	; (16298 <gatt_sub_find+0x54>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   16248:	4606      	mov	r6, r0
   1624a:	b140      	cbz	r0, 1625e <gatt_sub_find+0x1a>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1624c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16250:	462a      	mov	r2, r5
   16252:	1e6c      	subs	r4, r5, #1
   16254:	f00a fcb6 	bl	20bc4 <bt_conn_is_peer_addr_le>
   16258:	b198      	cbz	r0, 16282 <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   1625a:	4620      	mov	r0, r4
   1625c:	e00c      	b.n	16278 <gatt_sub_find+0x34>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   1625e:	490f      	ldr	r1, [pc, #60]	; (1629c <gatt_sub_find+0x58>)
   16260:	4628      	mov	r0, r5
   16262:	f00b fccd 	bl	21c00 <bt_addr_le_eq>
   16266:	b940      	cbnz	r0, 1627a <gatt_sub_find+0x36>
   16268:	490c      	ldr	r1, [pc, #48]	; (1629c <gatt_sub_find+0x58>)
   1626a:	f105 0010 	add.w	r0, r5, #16
   1626e:	f00b fcc7 	bl	21c00 <bt_addr_le_eq>
   16272:	b120      	cbz	r0, 1627e <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   16274:	f105 000f 	add.w	r0, r5, #15
			return sub;
		}
	}

	return NULL;
}
   16278:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_sub *sub = &subscriptions[i];
   1627a:	1e68      	subs	r0, r5, #1
   1627c:	e7fc      	b.n	16278 <gatt_sub_find+0x34>
	return NULL;
   1627e:	2000      	movs	r0, #0
   16280:	e7fa      	b.n	16278 <gatt_sub_find+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   16282:	7c21      	ldrb	r1, [r4, #16]
   16284:	f104 0211 	add.w	r2, r4, #17
   16288:	4630      	mov	r0, r6
   1628a:	f00a fc9b 	bl	20bc4 <bt_conn_is_peer_addr_le>
   1628e:	2800      	cmp	r0, #0
   16290:	d0f5      	beq.n	1627e <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   16292:	f104 0010 	add.w	r0, r4, #16
   16296:	e7ef      	b.n	16278 <gatt_sub_find+0x34>
   16298:	20002cb5 	.word	0x20002cb5
   1629c:	000259ef 	.word	0x000259ef

000162a0 <gatt_sub_remove>:
{
   162a0:	b538      	push	{r3, r4, r5, lr}
   162a2:	460c      	mov	r4, r1
	if (params) {
   162a4:	4619      	mov	r1, r3
   162a6:	b16b      	cbz	r3, 162c4 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   162a8:	f103 0518 	add.w	r5, r3, #24
   162ac:	699b      	ldr	r3, [r3, #24]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   162ae:	b98a      	cbnz	r2, 162d4 <gatt_sub_remove+0x34>
   162b0:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   162b2:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   162b4:	4295      	cmp	r5, r2
   162b6:	d100      	bne.n	162ba <gatt_sub_remove+0x1a>
	list->tail = node;
   162b8:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   162ba:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   162bc:	680d      	ldr	r5, [r1, #0]
   162be:	618b      	str	r3, [r1, #24]
   162c0:	461a      	mov	r2, r3
   162c2:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   162c4:	68a3      	ldr	r3, [r4, #8]
   162c6:	b95b      	cbnz	r3, 162e0 <gatt_sub_remove+0x40>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   162c8:	1c60      	adds	r0, r4, #1
   162ca:	4906      	ldr	r1, [pc, #24]	; (162e4 <gatt_sub_remove+0x44>)
}
   162cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   162d0:	f00b bcb3 	b.w	21c3a <bt_addr_le_copy>
   162d4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   162d6:	68e3      	ldr	r3, [r4, #12]
   162d8:	429d      	cmp	r5, r3
	list->tail = node;
   162da:	bf08      	it	eq
   162dc:	60e2      	streq	r2, [r4, #12]
}
   162de:	e7ec      	b.n	162ba <gatt_sub_remove+0x1a>
}
   162e0:	bd38      	pop	{r3, r4, r5, pc}
   162e2:	bf00      	nop
   162e4:	000259ef 	.word	0x000259ef

000162e8 <clear_cf_cfg>:
{
   162e8:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   162ea:	490c      	ldr	r1, [pc, #48]	; (1631c <clear_cf_cfg+0x34>)
{
   162ec:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   162ee:	3001      	adds	r0, #1
   162f0:	f00b fca3 	bl	21c3a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   162f4:	f104 0008 	add.w	r0, r4, #8
   162f8:	2201      	movs	r2, #1
   162fa:	2100      	movs	r1, #0
   162fc:	f009 fe08 	bl	1ff10 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16300:	f3bf 8f5b 	dmb	ish
   16304:	340c      	adds	r4, #12
   16306:	2300      	movs	r3, #0
   16308:	e854 2f00 	ldrex	r2, [r4]
   1630c:	e844 3100 	strex	r1, r3, [r4]
   16310:	2900      	cmp	r1, #0
   16312:	d1f9      	bne.n	16308 <clear_cf_cfg+0x20>
   16314:	f3bf 8f5b 	dmb	ish
}
   16318:	bd10      	pop	{r4, pc}
   1631a:	bf00      	nop
   1631c:	000259ef 	.word	0x000259ef

00016320 <sc_save>:
{
   16320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16324:	4680      	mov	r8, r0
   16326:	460f      	mov	r7, r1
   16328:	4616      	mov	r6, r2
   1632a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1632c:	f7ff ff44 	bl	161b8 <find_sc_cfg>
	if (!cfg) {
   16330:	4604      	mov	r4, r0
   16332:	b948      	cbnz	r0, 16348 <sc_save+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   16334:	490b      	ldr	r1, [pc, #44]	; (16364 <sc_save+0x44>)
   16336:	f7ff ff3f 	bl	161b8 <find_sc_cfg>
		if (!cfg) {
   1633a:	4604      	mov	r4, r0
   1633c:	b180      	cbz	r0, 16360 <sc_save+0x40>
		cfg->id = id;
   1633e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   16342:	4639      	mov	r1, r7
   16344:	f00b fc79 	bl	21c3a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   16348:	8922      	ldrh	r2, [r4, #8]
   1634a:	8963      	ldrh	r3, [r4, #10]
   1634c:	b91a      	cbnz	r2, 16356 <sc_save+0x36>
   1634e:	b92b      	cbnz	r3, 1635c <sc_save+0x3c>
		cfg->data.start = start;
   16350:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   16352:	8165      	strh	r5, [r4, #10]
   16354:	e004      	b.n	16360 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   16356:	4296      	cmp	r6, r2
		*start = new_start;
   16358:	bf38      	it	cc
   1635a:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1635c:	429d      	cmp	r5, r3
   1635e:	d8f8      	bhi.n	16352 <sc_save+0x32>
}
   16360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16364:	000259ef 	.word	0x000259ef

00016368 <disconnected_cb>:
{
   16368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1636c:	4b28      	ldr	r3, [pc, #160]	; (16410 <disconnected_cb+0xa8>)
{
   1636e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16370:	6882      	ldr	r2, [r0, #8]
   16372:	429a      	cmp	r2, r3
{
   16374:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16376:	d12b      	bne.n	163d0 <disconnected_cb+0x68>
	ccc = attr->user_data;
   16378:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   1637a:	8aab      	ldrh	r3, [r5, #20]
   1637c:	b343      	cbz	r3, 163d0 <disconnected_cb+0x68>
   1637e:	1c6c      	adds	r4, r5, #1
   16380:	f105 0915 	add.w	r9, r5, #21
	value_used = false;
   16384:	f04f 0800 	mov.w	r8, #0
		if (!cfg->value) {
   16388:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1638c:	b19b      	cbz	r3, 163b6 <disconnected_cb+0x4e>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1638e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   16392:	4622      	mov	r2, r4
   16394:	4630      	mov	r0, r6
   16396:	f00a fc15 	bl	20bc4 <bt_conn_is_peer_addr_le>
   1639a:	b9e0      	cbnz	r0, 163d6 <disconnected_cb+0x6e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1639c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   163a0:	4621      	mov	r1, r4
   163a2:	f7fe fd0d 	bl	14dc0 <bt_conn_lookup_addr_le>
			if (tmp) {
   163a6:	b130      	cbz	r0, 163b6 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   163a8:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   163aa:	2b07      	cmp	r3, #7
   163ac:	bf08      	it	eq
   163ae:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   163b2:	f00a fb52 	bl	20a5a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   163b6:	340a      	adds	r4, #10
   163b8:	454c      	cmp	r4, r9
   163ba:	d1e5      	bne.n	16388 <disconnected_cb+0x20>
	if (!value_used) {
   163bc:	f1b8 0f00 	cmp.w	r8, #0
   163c0:	d106      	bne.n	163d0 <disconnected_cb+0x68>
		if (ccc->cfg_changed) {
   163c2:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   163c4:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   163c8:	b113      	cbz	r3, 163d0 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   163ca:	4641      	mov	r1, r8
   163cc:	4638      	mov	r0, r7
   163ce:	4798      	blx	r3
}
   163d0:	2001      	movs	r0, #1
   163d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   163d6:	f106 0a88 	add.w	sl, r6, #136	; 0x88
   163da:	7a30      	ldrb	r0, [r6, #8]
   163dc:	4651      	mov	r1, sl
   163de:	f00a f971 	bl	206c4 <bt_addr_le_is_bonded>
   163e2:	b978      	cbnz	r0, 16404 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   163e4:	4b0b      	ldr	r3, [pc, #44]	; (16414 <disconnected_cb+0xac>)
   163e6:	429d      	cmp	r5, r3
   163e8:	d102      	bne.n	163f0 <disconnected_cb+0x88>
					sc_clear(conn);
   163ea:	4630      	mov	r0, r6
   163ec:	f00b fce8 	bl	21dc0 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   163f0:	4909      	ldr	r1, [pc, #36]	; (16418 <disconnected_cb+0xb0>)
   163f2:	4620      	mov	r0, r4
   163f4:	f00b fc21 	bl	21c3a <bt_addr_le_copy>
	cfg->id = 0U;
   163f8:	2300      	movs	r3, #0
   163fa:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   163fe:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   16402:	e7d8      	b.n	163b6 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16404:	4651      	mov	r1, sl
   16406:	4620      	mov	r0, r4
   16408:	f00b fc17 	bl	21c3a <bt_addr_le_copy>
   1640c:	e7d3      	b.n	163b6 <disconnected_cb+0x4e>
   1640e:	bf00      	nop
   16410:	0001641d 	.word	0x0001641d
   16414:	200005b0 	.word	0x200005b0
   16418:	000259ef 	.word	0x000259ef

0001641c <bt_gatt_attr_write_ccc>:
{
   1641c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16420:	461e      	mov	r6, r3
   16422:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   16426:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1642a:	4681      	mov	r9, r0
   1642c:	460f      	mov	r7, r1
	if (offset) {
   1642e:	2b00      	cmp	r3, #0
   16430:	d13d      	bne.n	164ae <bt_gatt_attr_write_ccc+0x92>
	if (!len || len > sizeof(uint16_t)) {
   16432:	1e73      	subs	r3, r6, #1
   16434:	2b01      	cmp	r3, #1
   16436:	d83d      	bhi.n	164b4 <bt_gatt_attr_write_ccc+0x98>
	if (len < sizeof(uint16_t)) {
   16438:	2e01      	cmp	r6, #1
	cfg = find_ccc_cfg(conn, ccc);
   1643a:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1643c:	7815      	ldrb	r5, [r2, #0]
   1643e:	bf18      	it	ne
   16440:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   16442:	f7ff fedb 	bl	161fc <find_ccc_cfg>
	if (!cfg) {
   16446:	4604      	mov	r4, r0
   16448:	b980      	cbnz	r0, 1646c <bt_gatt_attr_write_ccc+0x50>
		if (!value) {
   1644a:	b915      	cbnz	r5, 16452 <bt_gatt_attr_write_ccc+0x36>
			return len;
   1644c:	4630      	mov	r0, r6
}
   1644e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   16452:	4641      	mov	r1, r8
   16454:	f7ff fed2 	bl	161fc <find_ccc_cfg>
		if (!cfg) {
   16458:	4604      	mov	r4, r0
   1645a:	b370      	cbz	r0, 164ba <bt_gatt_attr_write_ccc+0x9e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1645c:	f109 0188 	add.w	r1, r9, #136	; 0x88
   16460:	3001      	adds	r0, #1
   16462:	f00b fbea 	bl	21c3a <bt_addr_le_copy>
		cfg->id = conn->id;
   16466:	f899 3008 	ldrb.w	r3, [r9, #8]
   1646a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1646c:	f8d8 301c 	ldr.w	r3, [r8, #28]
   16470:	b98b      	cbnz	r3, 16496 <bt_gatt_attr_write_ccc+0x7a>
	cfg->value = value;
   16472:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   16474:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   16478:	42ab      	cmp	r3, r5
   1647a:	d003      	beq.n	16484 <bt_gatt_attr_write_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   1647c:	4641      	mov	r1, r8
   1647e:	4638      	mov	r0, r7
   16480:	f00b fb46 	bl	21b10 <gatt_ccc_changed>
	if (!value) {
   16484:	2d00      	cmp	r5, #0
   16486:	d1e1      	bne.n	1644c <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16488:	490d      	ldr	r1, [pc, #52]	; (164c0 <bt_gatt_attr_write_ccc+0xa4>)
   1648a:	1c60      	adds	r0, r4, #1
   1648c:	f00b fbd5 	bl	21c3a <bt_addr_le_copy>
	cfg->id = 0U;
   16490:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   16492:	8125      	strh	r5, [r4, #8]
}
   16494:	e7da      	b.n	1644c <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   16496:	462a      	mov	r2, r5
   16498:	4639      	mov	r1, r7
   1649a:	4648      	mov	r0, r9
   1649c:	4798      	blx	r3
		if (write < 0) {
   1649e:	2800      	cmp	r0, #0
   164a0:	dbd5      	blt.n	1644e <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   164a2:	3801      	subs	r0, #1
   164a4:	2801      	cmp	r0, #1
   164a6:	d9e4      	bls.n	16472 <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   164a8:	f06f 000d 	mvn.w	r0, #13
   164ac:	e7cf      	b.n	1644e <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   164ae:	f06f 0006 	mvn.w	r0, #6
   164b2:	e7cc      	b.n	1644e <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   164b4:	f06f 000c 	mvn.w	r0, #12
   164b8:	e7c9      	b.n	1644e <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   164ba:	f06f 0010 	mvn.w	r0, #16
   164be:	e7c6      	b.n	1644e <bt_gatt_attr_write_ccc+0x32>
   164c0:	000259ef 	.word	0x000259ef

000164c4 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   164c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   164c6:	460c      	mov	r4, r1
   164c8:	4605      	mov	r5, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   164ca:	2108      	movs	r1, #8
   164cc:	f104 0014 	add.w	r0, r4, #20
   164d0:	f00b fba4 	bl	21c1c <atomic_or>
	/* The value of the params doesn't matter, this is just so we don't
	 * repeat CCC writes when the AUTO_RESUBSCRIBE quirk is enabled.
	 */
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   164d4:	2312      	movs	r3, #18
   164d6:	2204      	movs	r2, #4
   164d8:	e9cd 3200 	strd	r3, r2, [sp]
   164dc:	4903      	ldr	r1, [pc, #12]	; (164ec <gatt_write_ccc+0x28>)
   164de:	4b04      	ldr	r3, [pc, #16]	; (164f0 <gatt_write_ccc+0x2c>)
   164e0:	4622      	mov	r2, r4
   164e2:	4628      	mov	r0, r5
   164e4:	f00b fd37 	bl	21f56 <gatt_req_send.constprop.0>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len,
			     BT_ATT_CHAN_OPT(params));
}
   164e8:	b003      	add	sp, #12
   164ea:	bd30      	pop	{r4, r5, pc}
   164ec:	00021c5f 	.word	0x00021c5f
   164f0:	00021fd7 	.word	0x00021fd7

000164f4 <sc_indicate_rsp>:
{
   164f4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   164f6:	f06f 0102 	mvn.w	r1, #2
   164fa:	4604      	mov	r4, r0
   164fc:	480e      	ldr	r0, [pc, #56]	; (16538 <sc_indicate_rsp+0x44>)
   164fe:	f00b fb9f 	bl	21c40 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16502:	480d      	ldr	r0, [pc, #52]	; (16538 <sc_indicate_rsp+0x44>)
   16504:	f00b fb84 	bl	21c10 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   16508:	07c2      	lsls	r2, r0, #31
   1650a:	d504      	bpl.n	16516 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1650c:	480b      	ldr	r0, [pc, #44]	; (1653c <sc_indicate_rsp+0x48>)
   1650e:	2200      	movs	r2, #0
   16510:	2300      	movs	r3, #0
   16512:	f005 fa09 	bl	1b928 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   16516:	4620      	mov	r0, r4
   16518:	f00b fad2 	bl	21ac0 <bt_att_fixed_chan_only>
   1651c:	b150      	cbz	r0, 16534 <sc_indicate_rsp+0x40>
		cfg = find_cf_cfg(conn);
   1651e:	4620      	mov	r0, r4
   16520:	f7ff fe1c 	bl	1615c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   16524:	b130      	cbz	r0, 16534 <sc_indicate_rsp+0x40>
   16526:	7a03      	ldrb	r3, [r0, #8]
   16528:	07db      	lsls	r3, r3, #31
   1652a:	d503      	bpl.n	16534 <sc_indicate_rsp+0x40>
}
   1652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   16530:	f00b bd66 	b.w	22000 <set_change_aware_no_store.constprop.0.isra.0>
}
   16534:	bd10      	pop	{r4, pc}
   16536:	bf00      	nop
   16538:	20001b00 	.word	0x20001b00
   1653c:	20001ad0 	.word	0x20001ad0

00016540 <bt_gatt_init>:
{
   16540:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16542:	4817      	ldr	r0, [pc, #92]	; (165a0 <bt_gatt_init+0x60>)
   16544:	2101      	movs	r1, #1
   16546:	f00b fb69 	bl	21c1c <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1654a:	07c3      	lsls	r3, r0, #31
   1654c:	d427      	bmi.n	1659e <bt_gatt_init+0x5e>
   1654e:	2102      	movs	r1, #2
   16550:	4813      	ldr	r0, [pc, #76]	; (165a0 <bt_gatt_init+0x60>)
   16552:	f00b fb63 	bl	21c1c <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   16556:	4008      	ands	r0, r1
   16558:	d107      	bne.n	1656a <bt_gatt_init+0x2a>
   1655a:	4912      	ldr	r1, [pc, #72]	; (165a4 <bt_gatt_init+0x64>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1655c:	4a12      	ldr	r2, [pc, #72]	; (165a8 <bt_gatt_init+0x68>)
   1655e:	880b      	ldrh	r3, [r1, #0]
   16560:	4c12      	ldr	r4, [pc, #72]	; (165ac <bt_gatt_init+0x6c>)
   16562:	42a2      	cmp	r2, r4
   16564:	d315      	bcc.n	16592 <bt_gatt_init+0x52>
   16566:	b100      	cbz	r0, 1656a <bt_gatt_init+0x2a>
   16568:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1656a:	4b11      	ldr	r3, [pc, #68]	; (165b0 <bt_gatt_init+0x70>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1656c:	4911      	ldr	r1, [pc, #68]	; (165b4 <bt_gatt_init+0x74>)
   1656e:	4812      	ldr	r0, [pc, #72]	; (165b8 <bt_gatt_init+0x78>)
   16570:	2200      	movs	r2, #0
	list->tail = NULL;
   16572:	e9c3 2200 	strd	r2, r2, [r3]
   16576:	f00d fe8f 	bl	24298 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1657a:	480f      	ldr	r0, [pc, #60]	; (165b8 <bt_gatt_init+0x78>)
   1657c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16580:	2300      	movs	r3, #0
   16582:	f7fc fbad 	bl	12ce0 <bt_long_wq_schedule>
}
   16586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1658a:	490c      	ldr	r1, [pc, #48]	; (165bc <bt_gatt_init+0x7c>)
   1658c:	480c      	ldr	r0, [pc, #48]	; (165c0 <bt_gatt_init+0x80>)
   1658e:	f00d be83 	b.w	24298 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   16592:	6850      	ldr	r0, [r2, #4]
   16594:	4403      	add	r3, r0
   16596:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16598:	3208      	adds	r2, #8
   1659a:	2001      	movs	r0, #1
   1659c:	e7e1      	b.n	16562 <bt_gatt_init+0x22>
}
   1659e:	bd10      	pop	{r4, pc}
   165a0:	20002ca8 	.word	0x20002ca8
   165a4:	2000396e 	.word	0x2000396e
   165a8:	00024bd4 	.word	0x00024bd4
   165ac:	00024be4 	.word	0x00024be4
   165b0:	20002cac 	.word	0x20002cac
   165b4:	000167b5 	.word	0x000167b5
   165b8:	20001a58 	.word	0x20001a58
   165bc:	000169a1 	.word	0x000169a1
   165c0:	20001ad0 	.word	0x20001ad0

000165c4 <bt_gatt_attr_get_handle>:
{
   165c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   165c8:	4603      	mov	r3, r0
   165ca:	b148      	cbz	r0, 165e0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   165cc:	8a00      	ldrh	r0, [r0, #16]
   165ce:	b938      	cbnz	r0, 165e0 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   165d0:	4912      	ldr	r1, [pc, #72]	; (1661c <bt_gatt_attr_get_handle+0x58>)
   165d2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 16620 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   165d6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   165d8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   165dc:	4571      	cmp	r1, lr
   165de:	d301      	bcc.n	165e4 <bt_gatt_attr_get_handle+0x20>
}
   165e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   165e4:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   165e8:	42bb      	cmp	r3, r7
   165ea:	d304      	bcc.n	165f6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   165ec:	fb0c 7206 	mla	r2, ip, r6, r7
   165f0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   165f2:	4293      	cmp	r3, r2
   165f4:	d90e      	bls.n	16614 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   165f6:	4434      	add	r4, r6
   165f8:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   165fa:	3108      	adds	r1, #8
   165fc:	4614      	mov	r4, r2
   165fe:	e7ed      	b.n	165dc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16600:	fb0c 7805 	mla	r8, ip, r5, r7
   16604:	4543      	cmp	r3, r8
   16606:	d007      	beq.n	16618 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16608:	3501      	adds	r5, #1
   1660a:	1962      	adds	r2, r4, r5
   1660c:	42b5      	cmp	r5, r6
   1660e:	b292      	uxth	r2, r2
   16610:	d1f6      	bne.n	16600 <bt_gatt_attr_get_handle+0x3c>
   16612:	e7f2      	b.n	165fa <bt_gatt_attr_get_handle+0x36>
   16614:	2500      	movs	r5, #0
   16616:	e7f8      	b.n	1660a <bt_gatt_attr_get_handle+0x46>
   16618:	4610      	mov	r0, r2
   1661a:	e7e1      	b.n	165e0 <bt_gatt_attr_get_handle+0x1c>
   1661c:	00024bd4 	.word	0x00024bd4
   16620:	00024be4 	.word	0x00024be4

00016624 <bt_gatt_foreach_attr_type>:
{
   16624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16628:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1662c:	9100      	str	r1, [sp, #0]
   1662e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16630:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16634:	2d00      	cmp	r5, #0
   16636:	bf08      	it	eq
   16638:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1663a:	4b24      	ldr	r3, [pc, #144]	; (166cc <bt_gatt_foreach_attr_type+0xa8>)
   1663c:	881b      	ldrh	r3, [r3, #0]
   1663e:	4283      	cmp	r3, r0
{
   16640:	4607      	mov	r7, r0
   16642:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   16644:	d23c      	bcs.n	166c0 <bt_gatt_foreach_attr_type+0x9c>
}
   16646:	b003      	add	sp, #12
   16648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1664c:	6873      	ldr	r3, [r6, #4]
   1664e:	4423      	add	r3, r4
   16650:	42bb      	cmp	r3, r7
   16652:	d232      	bcs.n	166ba <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   16654:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16656:	3608      	adds	r6, #8
   16658:	4b1d      	ldr	r3, [pc, #116]	; (166d0 <bt_gatt_foreach_attr_type+0xac>)
   1665a:	429e      	cmp	r6, r3
   1665c:	d3f6      	bcc.n	1664c <bt_gatt_foreach_attr_type+0x28>
   1665e:	e7f2      	b.n	16646 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16660:	5889      	ldr	r1, [r1, r2]
   16662:	9301      	str	r3, [sp, #4]
   16664:	4640      	mov	r0, r8
   16666:	f009 fca1 	bl	1ffac <bt_uuid_cmp>
   1666a:	9b01      	ldr	r3, [sp, #4]
   1666c:	b190      	cbz	r0, 16694 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1666e:	3401      	adds	r4, #1
   16670:	f10a 0a01 	add.w	sl, sl, #1
   16674:	b2a4      	uxth	r4, r4
   16676:	6873      	ldr	r3, [r6, #4]
   16678:	4553      	cmp	r3, sl
   1667a:	d9ec      	bls.n	16656 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1667c:	9b00      	ldr	r3, [sp, #0]
   1667e:	429c      	cmp	r4, r3
   16680:	d8e1      	bhi.n	16646 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   16682:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16684:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   16686:	d3f2      	bcc.n	1666e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16688:	fb0b f20a 	mul.w	r2, fp, sl
   1668c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1668e:	f1b8 0f00 	cmp.w	r8, #0
   16692:	d1e5      	bne.n	16660 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   16694:	f1b9 0f00 	cmp.w	r9, #0
   16698:	d10b      	bne.n	166b2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1669a:	3d01      	subs	r5, #1
   1669c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1669e:	4618      	mov	r0, r3
   166a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   166a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   166a4:	4621      	mov	r1, r4
   166a6:	4798      	blx	r3
	if (!*num_matches) {
   166a8:	2d00      	cmp	r5, #0
   166aa:	d0cc      	beq.n	16646 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   166ac:	2800      	cmp	r0, #0
   166ae:	d1de      	bne.n	1666e <bt_gatt_foreach_attr_type+0x4a>
   166b0:	e7c9      	b.n	16646 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   166b2:	68da      	ldr	r2, [r3, #12]
   166b4:	4591      	cmp	r9, r2
   166b6:	d1da      	bne.n	1666e <bt_gatt_foreach_attr_type+0x4a>
   166b8:	e7ef      	b.n	1669a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   166ba:	f04f 0a00 	mov.w	sl, #0
   166be:	e7da      	b.n	16676 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   166c0:	4e04      	ldr	r6, [pc, #16]	; (166d4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   166c2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   166c4:	f04f 0b14 	mov.w	fp, #20
   166c8:	e7c6      	b.n	16658 <bt_gatt_foreach_attr_type+0x34>
   166ca:	bf00      	nop
   166cc:	2000396e 	.word	0x2000396e
   166d0:	00024be4 	.word	0x00024be4
   166d4:	00024bd4 	.word	0x00024bd4

000166d8 <db_hash_gen>:
{
   166d8:	b510      	push	{r4, lr}
   166da:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   166dc:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   166de:	aa1c      	add	r2, sp, #112	; 0x70
   166e0:	4669      	mov	r1, sp
   166e2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   166e4:	e9cd 3300 	strd	r3, r3, [sp]
   166e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   166ec:	f009 fae5 	bl	1fcba <tc_cmac_setup>
   166f0:	b1d8      	cbz	r0, 1672a <db_hash_gen+0x52>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   166f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   166f6:	2001      	movs	r0, #1
   166f8:	4a0d      	ldr	r2, [pc, #52]	; (16730 <db_hash_gen+0x58>)
   166fa:	ab04      	add	r3, sp, #16
   166fc:	f00b fd32 	bl	22164 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   16700:	480c      	ldr	r0, [pc, #48]	; (16734 <db_hash_gen+0x5c>)
   16702:	a904      	add	r1, sp, #16
   16704:	f009 fb6e 	bl	1fde4 <tc_cmac_final>
   16708:	b178      	cbz	r0, 1672a <db_hash_gen+0x52>
   1670a:	4b0a      	ldr	r3, [pc, #40]	; (16734 <db_hash_gen+0x5c>)
   1670c:	2208      	movs	r2, #8
   1670e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   16712:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16714:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   16718:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1671c:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1671e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   16720:	d1f7      	bne.n	16712 <db_hash_gen+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16722:	4805      	ldr	r0, [pc, #20]	; (16738 <db_hash_gen+0x60>)
   16724:	2108      	movs	r1, #8
   16726:	f00b fa79 	bl	21c1c <atomic_or>
}
   1672a:	b048      	add	sp, #288	; 0x120
   1672c:	bd10      	pop	{r4, pc}
   1672e:	bf00      	nop
   16730:	00021b5b 	.word	0x00021b5b
   16734:	20001a48 	.word	0x20001a48
   16738:	20001b00 	.word	0x20001b00

0001673c <db_hash_read>:
{
   1673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1673e:	491a      	ldr	r1, [pc, #104]	; (167a8 <db_hash_read+0x6c>)
{
   16740:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   16744:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16746:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1674a:	4615      	mov	r5, r2
   1674c:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1674e:	f00d fdc5 	bl	242dc <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16752:	4816      	ldr	r0, [pc, #88]	; (167ac <db_hash_read+0x70>)
   16754:	f00b fa5c 	bl	21c10 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16758:	0701      	lsls	r1, r0, #28
   1675a:	d401      	bmi.n	16760 <db_hash_read+0x24>
		db_hash_gen();
   1675c:	f7ff ffbc 	bl	166d8 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   16760:	4620      	mov	r0, r4
   16762:	f7ff fcfb 	bl	1615c <find_cf_cfg>
	if (cfg &&
   16766:	b168      	cbz	r0, 16784 <db_hash_read+0x48>
   16768:	7a03      	ldrb	r3, [r0, #8]
   1676a:	07da      	lsls	r2, r3, #31
   1676c:	d50a      	bpl.n	16784 <db_hash_read+0x48>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1676e:	f100 040c 	add.w	r4, r0, #12
   16772:	4620      	mov	r0, r4
   16774:	f00b fa4c 	bl	21c10 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   16778:	07c3      	lsls	r3, r0, #31
   1677a:	d403      	bmi.n	16784 <db_hash_read+0x48>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1677c:	2102      	movs	r1, #2
   1677e:	4620      	mov	r0, r4
   16780:	f00b fa4c 	bl	21c1c <atomic_or>
	if (offset > value_len) {
   16784:	2e10      	cmp	r6, #16
   16786:	d80c      	bhi.n	167a2 <db_hash_read+0x66>
	len = MIN(buf_len, value_len - offset);
   16788:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1678c:	4908      	ldr	r1, [pc, #32]	; (167b0 <db_hash_read+0x74>)
	len = MIN(buf_len, value_len - offset);
   1678e:	42bc      	cmp	r4, r7
   16790:	bfa8      	it	ge
   16792:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   16794:	4622      	mov	r2, r4
   16796:	4431      	add	r1, r6
   16798:	4628      	mov	r0, r5
   1679a:	f009 fbae 	bl	1fefa <memcpy>
}
   1679e:	4620      	mov	r0, r4
   167a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   167a2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   167a6:	e7fa      	b.n	1679e <db_hash_read+0x62>
   167a8:	20001a88 	.word	0x20001a88
   167ac:	20001b00 	.word	0x20001b00
   167b0:	20001a48 	.word	0x20001a48

000167b4 <db_hash_process>:
{
   167b4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   167b6:	4805      	ldr	r0, [pc, #20]	; (167cc <db_hash_process+0x18>)
   167b8:	f00b fa2a 	bl	21c10 <atomic_get>
	if (new_hash) {
   167bc:	0703      	lsls	r3, r0, #28
   167be:	d403      	bmi.n	167c8 <db_hash_process+0x14>
}
   167c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_gen();
   167c4:	f7ff bf88 	b.w	166d8 <db_hash_gen>
}
   167c8:	bd08      	pop	{r3, pc}
   167ca:	bf00      	nop
   167cc:	20001b00 	.word	0x20001b00

000167d0 <bt_gatt_attr_next>:
{
   167d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   167d2:	2300      	movs	r3, #0
   167d4:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   167d6:	f7ff fef5 	bl	165c4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   167da:	1c41      	adds	r1, r0, #1
   167dc:	b289      	uxth	r1, r1
   167de:	4608      	mov	r0, r1
   167e0:	4a03      	ldr	r2, [pc, #12]	; (167f0 <bt_gatt_attr_next+0x20>)
   167e2:	ab01      	add	r3, sp, #4
   167e4:	f00b fcbe 	bl	22164 <bt_gatt_foreach_attr>
}
   167e8:	9801      	ldr	r0, [sp, #4]
   167ea:	b003      	add	sp, #12
   167ec:	f85d fb04 	ldr.w	pc, [sp], #4
   167f0:	00021b0b 	.word	0x00021b0b

000167f4 <gatt_indicate>:
{
   167f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167f8:	4615      	mov	r5, r2
   167fa:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   167fc:	2294      	movs	r2, #148	; 0x94
   167fe:	6869      	ldr	r1, [r5, #4]
{
   16800:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16802:	f00b fcba 	bl	2217a <bt_gatt_check_perm>
   16806:	4680      	mov	r8, r0
   16808:	2800      	cmp	r0, #0
   1680a:	d148      	bne.n	1689e <gatt_indicate+0xaa>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1680c:	6869      	ldr	r1, [r5, #4]
   1680e:	2202      	movs	r2, #2
   16810:	4630      	mov	r0, r6
   16812:	f00b fcec 	bl	221ee <bt_gatt_is_subscribed>
   16816:	2800      	cmp	r0, #0
   16818:	d044      	beq.n	168a4 <gatt_indicate+0xb0>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1681a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1681e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16820:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16822:	f7ff fb65 	bl	15ef0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16826:	3702      	adds	r7, #2
	if (!req) {
   16828:	4604      	mov	r4, r0
   1682a:	b180      	cbz	r0, 1684e <gatt_indicate+0x5a>
	req->func = func;
   1682c:	4b1f      	ldr	r3, [pc, #124]	; (168ac <gatt_indicate+0xb8>)
	req->len = len;
   1682e:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   16830:	211d      	movs	r1, #29
   16832:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   16834:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   16838:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1683a:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1683c:	463a      	mov	r2, r7
   1683e:	4630      	mov	r0, r6
   16840:	f00a ffdd 	bl	217fe <bt_att_create_pdu>
	if (!buf) {
   16844:	4607      	mov	r7, r0
   16846:	b938      	cbnz	r0, 16858 <gatt_indicate+0x64>
		bt_att_req_free(req);
   16848:	4620      	mov	r0, r4
   1684a:	f7ff fb73 	bl	15f34 <bt_att_req_free>
		return -ENOMEM;
   1684e:	f06f 050b 	mvn.w	r5, #11
}
   16852:	4628      	mov	r0, r5
   16854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   16858:	2301      	movs	r3, #1
   1685a:	4642      	mov	r2, r8
   1685c:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1685e:	f107 0a0c 	add.w	sl, r7, #12
   16862:	f00b f94b 	bl	21afc <bt_att_set_tx_meta_data>
   16866:	2102      	movs	r1, #2
   16868:	4650      	mov	r0, sl
   1686a:	f00c ff54 	bl	23716 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1686e:	4680      	mov	r8, r0
   16870:	4650      	mov	r0, sl
   16872:	f828 9b02 	strh.w	r9, [r8], #2
   16876:	8aa9      	ldrh	r1, [r5, #20]
   16878:	f00c ff4d 	bl	23716 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1687c:	8aaa      	ldrh	r2, [r5, #20]
   1687e:	6929      	ldr	r1, [r5, #16]
   16880:	4640      	mov	r0, r8
   16882:	f009 fb3a 	bl	1fefa <memcpy>
	req->buf = buf;
   16886:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   16888:	4621      	mov	r1, r4
   1688a:	4630      	mov	r0, r6
   1688c:	f00b f8e9 	bl	21a62 <bt_att_req_send>
	if (err) {
   16890:	4605      	mov	r5, r0
   16892:	2800      	cmp	r0, #0
   16894:	d0dd      	beq.n	16852 <gatt_indicate+0x5e>
		bt_att_req_free(req);
   16896:	4620      	mov	r0, r4
   16898:	f7ff fb4c 	bl	15f34 <bt_att_req_free>
   1689c:	e7d9      	b.n	16852 <gatt_indicate+0x5e>
		return -EPERM;
   1689e:	f04f 35ff 	mov.w	r5, #4294967295
   168a2:	e7d6      	b.n	16852 <gatt_indicate+0x5e>
			return -EINVAL;
   168a4:	f06f 0515 	mvn.w	r5, #21
   168a8:	e7d3      	b.n	16852 <gatt_indicate+0x5e>
   168aa:	bf00      	nop
   168ac:	00021b2d 	.word	0x00021b2d

000168b0 <bt_gatt_indicate>:
{
   168b0:	b530      	push	{r4, r5, lr}
   168b2:	4604      	mov	r4, r0
   168b4:	b08b      	sub	sp, #44	; 0x2c
   168b6:	4837      	ldr	r0, [pc, #220]	; (16994 <bt_gatt_indicate+0xe4>)
   168b8:	f00b f9aa 	bl	21c10 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   168bc:	0742      	lsls	r2, r0, #29
{
   168be:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   168c0:	d561      	bpl.n	16986 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   168c2:	b114      	cbz	r4, 168ca <bt_gatt_indicate+0x1a>
   168c4:	7b63      	ldrb	r3, [r4, #13]
   168c6:	2b07      	cmp	r3, #7
   168c8:	d160      	bne.n	1698c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   168ca:	6868      	ldr	r0, [r5, #4]
   168cc:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   168ce:	f7ff fe79 	bl	165c4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   168d2:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   168d4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   168d8:	b33a      	cbz	r2, 1692a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   168da:	a905      	add	r1, sp, #20
   168dc:	9102      	str	r1, [sp, #8]
   168de:	492e      	ldr	r1, [pc, #184]	; (16998 <bt_gatt_indicate+0xe8>)
   168e0:	9101      	str	r1, [sp, #4]
   168e2:	2101      	movs	r1, #1
	found->attr = NULL;
   168e4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   168e6:	9100      	str	r1, [sp, #0]
   168e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   168ec:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   168ee:	f7ff fe99 	bl	16624 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   168f2:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   168f4:	b91b      	cbnz	r3, 168fe <bt_gatt_indicate+0x4e>
			return -ENOENT;
   168f6:	f06f 0001 	mvn.w	r0, #1
}
   168fa:	b00b      	add	sp, #44	; 0x2c
   168fc:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   168fe:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16900:	9b05      	ldr	r3, [sp, #20]
   16902:	6818      	ldr	r0, [r3, #0]
   16904:	2300      	movs	r3, #0
   16906:	f88d 3010 	strb.w	r3, [sp, #16]
   1690a:	a904      	add	r1, sp, #16
   1690c:	f642 0303 	movw	r3, #10243	; 0x2803
   16910:	f8ad 3012 	strh.w	r3, [sp, #18]
   16914:	f009 fb4a 	bl	1ffac <bt_uuid_cmp>
   16918:	b970      	cbnz	r0, 16938 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1691a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1691c:	68c3      	ldr	r3, [r0, #12]
   1691e:	799b      	ldrb	r3, [r3, #6]
   16920:	069b      	lsls	r3, r3, #26
   16922:	d405      	bmi.n	16930 <bt_gatt_indicate+0x80>
			return -EINVAL;
   16924:	f06f 0015 	mvn.w	r0, #21
   16928:	e7e7      	b.n	168fa <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1692a:	2800      	cmp	r0, #0
   1692c:	d1e8      	bne.n	16900 <bt_gatt_indicate+0x50>
   1692e:	e7e2      	b.n	168f6 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16930:	f00b fbca 	bl	220c8 <bt_gatt_attr_value_handle>
   16934:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   16938:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1693c:	b13c      	cbz	r4, 1694e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1693e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16940:	4601      	mov	r1, r0
		params->_ref = 1;
   16942:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   16944:	462a      	mov	r2, r5
   16946:	4620      	mov	r0, r4
   16948:	f7ff ff54 	bl	167f4 <gatt_indicate>
   1694c:	e7d5      	b.n	168fa <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1694e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16952:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16954:	2302      	movs	r3, #2
   16956:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1695a:	f642 1302 	movw	r3, #10498	; 0x2902
   1695e:	f8ad 3012 	strh.w	r3, [sp, #18]
   16962:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   16964:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16966:	9302      	str	r3, [sp, #8]
   16968:	4b0c      	ldr	r3, [pc, #48]	; (1699c <bt_gatt_indicate+0xec>)
   1696a:	9301      	str	r3, [sp, #4]
   1696c:	2301      	movs	r3, #1
   1696e:	9300      	str	r3, [sp, #0]
   16970:	aa04      	add	r2, sp, #16
   16972:	4623      	mov	r3, r4
   16974:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   16978:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1697a:	f88d 4010 	strb.w	r4, [sp, #16]
   1697e:	f7ff fe51 	bl	16624 <bt_gatt_foreach_attr_type>
	return data.err;
   16982:	9807      	ldr	r0, [sp, #28]
   16984:	e7b9      	b.n	168fa <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   16986:	f06f 000a 	mvn.w	r0, #10
   1698a:	e7b6      	b.n	168fa <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1698c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16990:	e7b3      	b.n	168fa <bt_gatt_indicate+0x4a>
   16992:	bf00      	nop
   16994:	20000454 	.word	0x20000454
   16998:	00021b53 	.word	0x00021b53
   1699c:	00016ae1 	.word	0x00016ae1

000169a0 <sc_process>:
{
   169a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   169a2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   169a6:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   169a8:	f850 3c08 	ldr.w	r3, [r0, #-8]
   169ac:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   169ae:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   169b2:	f06f 0101 	mvn.w	r1, #1
   169b6:	4628      	mov	r0, r5
   169b8:	f00b f942 	bl	21c40 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   169bc:	4b0d      	ldr	r3, [pc, #52]	; (169f4 <sc_process+0x54>)
   169be:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   169c2:	4b0d      	ldr	r3, [pc, #52]	; (169f8 <sc_process+0x58>)
   169c4:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   169c8:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   169ca:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   169cc:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   169d0:	2304      	movs	r3, #4
	sc->start = 0U;
   169d2:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   169d6:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   169da:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   169de:	4631      	mov	r1, r6
   169e0:	f7ff ff66 	bl	168b0 <bt_gatt_indicate>
   169e4:	b918      	cbnz	r0, 169ee <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   169e6:	2102      	movs	r1, #2
   169e8:	4628      	mov	r0, r5
   169ea:	f00b f917 	bl	21c1c <atomic_or>
}
   169ee:	b002      	add	sp, #8
   169f0:	bd70      	pop	{r4, r5, r6, pc}
   169f2:	bf00      	nop
   169f4:	00025110 	.word	0x00025110
   169f8:	000164f5 	.word	0x000164f5

000169fc <update_ccc>:
{
   169fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a00:	4b32      	ldr	r3, [pc, #200]	; (16acc <update_ccc+0xd0>)
	struct bt_conn *conn = data->conn;
   16a02:	6814      	ldr	r4, [r2, #0]
{
   16a04:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a06:	6882      	ldr	r2, [r0, #8]
   16a08:	429a      	cmp	r2, r3
{
   16a0a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a0c:	d159      	bne.n	16ac2 <update_ccc+0xc6>
	ccc = attr->user_data;
   16a0e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16a12:	f108 0501 	add.w	r5, r8, #1
   16a16:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   16a1a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   16a1e:	b1fb      	cbz	r3, 16a60 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16a20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16a24:	462a      	mov	r2, r5
   16a26:	4620      	mov	r0, r4
   16a28:	f00a f8cc 	bl	20bc4 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16a2c:	b1c0      	cbz	r0, 16a60 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   16a2e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   16a32:	4631      	mov	r1, r6
   16a34:	4620      	mov	r0, r4
   16a36:	f00b fba0 	bl	2217a <bt_gatt_check_perm>
		if (err) {
   16a3a:	b1a8      	cbz	r0, 16a68 <update_ccc+0x6c>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16a3c:	2803      	cmp	r0, #3
   16a3e:	d00f      	beq.n	16a60 <update_ccc+0x64>
			sec = BT_SECURITY_L2;
   16a40:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   16a42:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   16a44:	bf0c      	ite	eq
   16a46:	f04f 0a03 	moveq.w	sl, #3
   16a4a:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   16a4e:	f00a f892 	bl	20b76 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   16a52:	4582      	cmp	sl, r0
   16a54:	d908      	bls.n	16a68 <update_ccc+0x6c>
				if (data->sec < sec) {
   16a56:	793b      	ldrb	r3, [r7, #4]
   16a58:	4553      	cmp	r3, sl
   16a5a:	d201      	bcs.n	16a60 <update_ccc+0x64>
					data->sec = sec;
   16a5c:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16a60:	350a      	adds	r5, #10
   16a62:	454d      	cmp	r5, r9
   16a64:	d1d9      	bne.n	16a1a <update_ccc+0x1e>
   16a66:	e02c      	b.n	16ac2 <update_ccc+0xc6>
		gatt_ccc_changed(attr, ccc);
   16a68:	4641      	mov	r1, r8
   16a6a:	4630      	mov	r0, r6
   16a6c:	f00b f850 	bl	21b10 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   16a70:	4b17      	ldr	r3, [pc, #92]	; (16ad0 <update_ccc+0xd4>)
   16a72:	4598      	cmp	r8, r3
   16a74:	d125      	bne.n	16ac2 <update_ccc+0xc6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16a76:	7a20      	ldrb	r0, [r4, #8]
   16a78:	f104 0188 	add.w	r1, r4, #136	; 0x88
   16a7c:	f7ff fb9c 	bl	161b8 <find_sc_cfg>
	if (!cfg) {
   16a80:	b1f8      	cbz	r0, 16ac2 <update_ccc+0xc6>
	if (!(cfg->data.start || cfg->data.end)) {
   16a82:	8902      	ldrh	r2, [r0, #8]
   16a84:	8943      	ldrh	r3, [r0, #10]
   16a86:	ea53 0102 	orrs.w	r1, r3, r2
   16a8a:	d01a      	beq.n	16ac2 <update_ccc+0xc6>
	index = bt_conn_index(conn);
   16a8c:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   16a8e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16a92:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   16a96:	f7fe f889 	bl	14bac <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16a9a:	490e      	ldr	r1, [pc, #56]	; (16ad4 <update_ccc+0xd8>)
   16a9c:	4a0e      	ldr	r2, [pc, #56]	; (16ad8 <update_ccc+0xdc>)
   16a9e:	2318      	movs	r3, #24
   16aa0:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16aa4:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16aa6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16aa8:	4a0c      	ldr	r2, [pc, #48]	; (16adc <update_ccc+0xe0>)
   16aaa:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16aac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   16ab0:	aa01      	add	r2, sp, #4
   16ab2:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16ab4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   16ab8:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16aba:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   16abc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16abe:	f7ff fef7 	bl	168b0 <bt_gatt_indicate>
}
   16ac2:	2001      	movs	r0, #1
   16ac4:	b002      	add	sp, #8
   16ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16aca:	bf00      	nop
   16acc:	0001641d 	.word	0x0001641d
   16ad0:	200005b0 	.word	0x200005b0
   16ad4:	20002c70 	.word	0x20002c70
   16ad8:	00025110 	.word	0x00025110
   16adc:	0002208d 	.word	0x0002208d

00016ae0 <notify_cb>:
{
   16ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ae4:	4b40      	ldr	r3, [pc, #256]	; (16be8 <notify_cb+0x108>)
{
   16ae6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ae8:	6882      	ldr	r2, [r0, #8]
   16aea:	429a      	cmp	r2, r3
{
   16aec:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16aee:	d136      	bne.n	16b5e <notify_cb+0x7e>
	ccc = attr->user_data;
   16af0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16af4:	4b3d      	ldr	r3, [pc, #244]	; (16bec <notify_cb+0x10c>)
   16af6:	459a      	cmp	sl, r3
   16af8:	d119      	bne.n	16b2e <notify_cb+0x4e>
   16afa:	4c3d      	ldr	r4, [pc, #244]	; (16bf0 <notify_cb+0x110>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16afc:	4f3d      	ldr	r7, [pc, #244]	; (16bf4 <notify_cb+0x114>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16afe:	2600      	movs	r6, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16b00:	4639      	mov	r1, r7
   16b02:	4620      	mov	r0, r4
   16b04:	f00b f87c 	bl	21c00 <bt_addr_le_eq>
   16b08:	b978      	cbnz	r0, 16b2a <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   16b0a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   16b0e:	2207      	movs	r2, #7
   16b10:	4621      	mov	r1, r4
   16b12:	f7fe f99f 	bl	14e54 <bt_conn_lookup_state_le>
			if (!conn) {
   16b16:	bb38      	cbnz	r0, 16b68 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   16b18:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   16b1a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   16b1e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16b20:	4621      	mov	r1, r4
   16b22:	8853      	ldrh	r3, [r2, #2]
   16b24:	8812      	ldrh	r2, [r2, #0]
   16b26:	f7ff fbfb 	bl	16320 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16b2a:	340c      	adds	r4, #12
   16b2c:	b1d6      	cbz	r6, 16b64 <notify_cb+0x84>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16b2e:	f10a 0601 	add.w	r6, sl, #1
   16b32:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   16b36:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   16b3a:	89ab      	ldrh	r3, [r5, #12]
   16b3c:	429a      	cmp	r2, r3
   16b3e:	d10b      	bne.n	16b58 <notify_cb+0x78>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16b40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   16b44:	4631      	mov	r1, r6
   16b46:	f7fe f93b 	bl	14dc0 <bt_conn_lookup_addr_le>
		if (!conn) {
   16b4a:	4604      	mov	r4, r0
   16b4c:	b120      	cbz	r0, 16b58 <notify_cb+0x78>
		if (conn->state != BT_CONN_CONNECTED) {
   16b4e:	7b43      	ldrb	r3, [r0, #13]
   16b50:	2b07      	cmp	r3, #7
   16b52:	d00c      	beq.n	16b6e <notify_cb+0x8e>
			bt_conn_unref(conn);
   16b54:	f009 ff81 	bl	20a5a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16b58:	360a      	adds	r6, #10
   16b5a:	45b3      	cmp	fp, r6
   16b5c:	d1eb      	bne.n	16b36 <notify_cb+0x56>
		return BT_GATT_ITER_CONTINUE;
   16b5e:	f04f 0901 	mov.w	r9, #1
   16b62:	e03e      	b.n	16be2 <notify_cb+0x102>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16b64:	2601      	movs	r6, #1
   16b66:	e7cb      	b.n	16b00 <notify_cb+0x20>
			bt_conn_unref(conn);
   16b68:	f009 ff77 	bl	20a5a <bt_conn_unref>
   16b6c:	e7dd      	b.n	16b2a <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   16b6e:	f8da 3020 	ldr.w	r3, [sl, #32]
   16b72:	b123      	cbz	r3, 16b7e <notify_cb+0x9e>
   16b74:	4641      	mov	r1, r8
   16b76:	4798      	blx	r3
   16b78:	b908      	cbnz	r0, 16b7e <notify_cb+0x9e>
			bt_conn_unref(conn);
   16b7a:	4620      	mov	r0, r4
   16b7c:	e7ea      	b.n	16b54 <notify_cb+0x74>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16b7e:	2294      	movs	r2, #148	; 0x94
   16b80:	4641      	mov	r1, r8
   16b82:	4620      	mov	r0, r4
   16b84:	f00b faf9 	bl	2217a <bt_gatt_check_perm>
   16b88:	4681      	mov	r9, r0
   16b8a:	2800      	cmp	r0, #0
   16b8c:	d1f5      	bne.n	16b7a <notify_cb+0x9a>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   16b8e:	89ab      	ldrh	r3, [r5, #12]
   16b90:	2b02      	cmp	r3, #2
   16b92:	d115      	bne.n	16bc0 <notify_cb+0xe0>
   16b94:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   16b98:	079a      	lsls	r2, r3, #30
   16b9a:	d405      	bmi.n	16ba8 <notify_cb+0xc8>
		bt_conn_unref(conn);
   16b9c:	4620      	mov	r0, r4
   16b9e:	f009 ff5c 	bl	20a5a <bt_conn_unref>
		data->err = 0;
   16ba2:	2300      	movs	r3, #0
   16ba4:	60ab      	str	r3, [r5, #8]
   16ba6:	e7d7      	b.n	16b58 <notify_cb+0x78>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   16ba8:	692a      	ldr	r2, [r5, #16]
   16baa:	88a9      	ldrh	r1, [r5, #4]
   16bac:	4620      	mov	r0, r4
   16bae:	f7ff fe21 	bl	167f4 <gatt_indicate>
			if (err == 0) {
   16bb2:	4607      	mov	r7, r0
   16bb4:	b980      	cbnz	r0, 16bd8 <notify_cb+0xf8>
				data->ind_params->_ref++;
   16bb6:	692a      	ldr	r2, [r5, #16]
   16bb8:	7d93      	ldrb	r3, [r2, #22]
   16bba:	3301      	adds	r3, #1
   16bbc:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   16bbe:	e7ed      	b.n	16b9c <notify_cb+0xbc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   16bc0:	2b01      	cmp	r3, #1
   16bc2:	d1eb      	bne.n	16b9c <notify_cb+0xbc>
   16bc4:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   16bc8:	07db      	lsls	r3, r3, #31
   16bca:	d5e7      	bpl.n	16b9c <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16bcc:	692a      	ldr	r2, [r5, #16]
   16bce:	88a9      	ldrh	r1, [r5, #4]
   16bd0:	4620      	mov	r0, r4
   16bd2:	f00b fb99 	bl	22308 <gatt_notify>
   16bd6:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   16bd8:	4620      	mov	r0, r4
   16bda:	f009 ff3e 	bl	20a5a <bt_conn_unref>
		if (err < 0) {
   16bde:	2f00      	cmp	r7, #0
   16be0:	dadf      	bge.n	16ba2 <notify_cb+0xc2>
}
   16be2:	4648      	mov	r0, r9
   16be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16be8:	0001641d 	.word	0x0001641d
   16bec:	200005b0 	.word	0x200005b0
   16bf0:	20003957 	.word	0x20003957
   16bf4:	000259ef 	.word	0x000259ef

00016bf8 <bt_gatt_discover>:
{
   16bf8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   16bfa:	7b43      	ldrb	r3, [r0, #13]
   16bfc:	2b07      	cmp	r3, #7
{
   16bfe:	b086      	sub	sp, #24
   16c00:	4605      	mov	r5, r0
   16c02:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   16c04:	f040 8099 	bne.w	16d3a <bt_gatt_discover+0x142>
	switch (params->type) {
   16c08:	7c0b      	ldrb	r3, [r1, #16]
   16c0a:	2b06      	cmp	r3, #6
   16c0c:	d867      	bhi.n	16cde <bt_gatt_discover+0xe6>
   16c0e:	e8df f003 	tbb	[pc, r3]
   16c12:	0404      	.short	0x0404
   16c14:	8d595151 	.word	0x8d595151
   16c18:	20          	.byte	0x20
   16c19:	00          	.byte	0x00
		if (params->uuid) {
   16c1a:	680b      	ldr	r3, [r1, #0]
   16c1c:	b18b      	cbz	r3, 16c42 <bt_gatt_discover+0x4a>
	switch (params->uuid->type) {
   16c1e:	781b      	ldrb	r3, [r3, #0]
   16c20:	b16b      	cbz	r3, 16c3e <bt_gatt_discover+0x46>
   16c22:	2b02      	cmp	r3, #2
   16c24:	d15b      	bne.n	16cde <bt_gatt_discover+0xe6>
   16c26:	2316      	movs	r3, #22
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   16c28:	9301      	str	r3, [sp, #4]
   16c2a:	2306      	movs	r3, #6
   16c2c:	9300      	str	r3, [sp, #0]
   16c2e:	4944      	ldr	r1, [pc, #272]	; (16d40 <bt_gatt_discover+0x148>)
   16c30:	4b44      	ldr	r3, [pc, #272]	; (16d44 <bt_gatt_discover+0x14c>)
   16c32:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   16c34:	4628      	mov	r0, r5
   16c36:	f00b f98e 	bl	21f56 <gatt_req_send.constprop.0>
}
   16c3a:	b006      	add	sp, #24
   16c3c:	bd70      	pop	{r4, r5, r6, pc}
		len += BT_UUID_SIZE_16;
   16c3e:	2308      	movs	r3, #8
   16c40:	e7f2      	b.n	16c28 <bt_gatt_discover+0x30>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   16c42:	2310      	movs	r3, #16
   16c44:	2104      	movs	r1, #4
   16c46:	e9cd 3100 	strd	r3, r1, [sp]
   16c4a:	4622      	mov	r2, r4
   16c4c:	4b3e      	ldr	r3, [pc, #248]	; (16d48 <bt_gatt_discover+0x150>)
   16c4e:	493f      	ldr	r1, [pc, #252]	; (16d4c <bt_gatt_discover+0x154>)
   16c50:	e7f0      	b.n	16c34 <bt_gatt_discover+0x3c>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   16c52:	6808      	ldr	r0, [r1, #0]
   16c54:	2800      	cmp	r0, #0
   16c56:	d042      	beq.n	16cde <bt_gatt_discover+0xe6>
   16c58:	7806      	ldrb	r6, [r0, #0]
   16c5a:	2e00      	cmp	r6, #0
   16c5c:	d13f      	bne.n	16cde <bt_gatt_discover+0xe6>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   16c5e:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   16c62:	a902      	add	r1, sp, #8
   16c64:	f88d 6008 	strb.w	r6, [sp, #8]
   16c68:	f8ad 300a 	strh.w	r3, [sp, #10]
   16c6c:	f009 f99e 	bl	1ffac <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   16c70:	b300      	cbz	r0, 16cb4 <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   16c72:	f642 1302 	movw	r3, #10498	; 0x2902
   16c76:	6820      	ldr	r0, [r4, #0]
   16c78:	f88d 600c 	strb.w	r6, [sp, #12]
   16c7c:	a903      	add	r1, sp, #12
   16c7e:	f8ad 300e 	strh.w	r3, [sp, #14]
   16c82:	f009 f993 	bl	1ffac <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   16c86:	b1a8      	cbz	r0, 16cb4 <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   16c88:	f642 1303 	movw	r3, #10499	; 0x2903
   16c8c:	6820      	ldr	r0, [r4, #0]
   16c8e:	f88d 6010 	strb.w	r6, [sp, #16]
   16c92:	a904      	add	r1, sp, #16
   16c94:	f8ad 3012 	strh.w	r3, [sp, #18]
   16c98:	f009 f988 	bl	1ffac <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   16c9c:	b150      	cbz	r0, 16cb4 <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   16c9e:	f642 1304 	movw	r3, #10500	; 0x2904
   16ca2:	6820      	ldr	r0, [r4, #0]
   16ca4:	f88d 6014 	strb.w	r6, [sp, #20]
   16ca8:	a905      	add	r1, sp, #20
   16caa:	f8ad 3016 	strh.w	r3, [sp, #22]
   16cae:	f009 f97d 	bl	1ffac <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   16cb2:	b9a0      	cbnz	r0, 16cde <bt_gatt_discover+0xe6>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   16cb4:	2308      	movs	r3, #8
   16cb6:	2204      	movs	r2, #4
   16cb8:	e9cd 3200 	strd	r3, r2, [sp]
   16cbc:	4924      	ldr	r1, [pc, #144]	; (16d50 <bt_gatt_discover+0x158>)
   16cbe:	4b25      	ldr	r3, [pc, #148]	; (16d54 <bt_gatt_discover+0x15c>)
   16cc0:	4622      	mov	r2, r4
   16cc2:	e7b7      	b.n	16c34 <bt_gatt_discover+0x3c>
		if (params->uuid &&
   16cc4:	6808      	ldr	r0, [r1, #0]
   16cc6:	b388      	cbz	r0, 16d2c <bt_gatt_discover+0x134>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   16cc8:	2600      	movs	r6, #0
   16cca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16cce:	a902      	add	r1, sp, #8
   16cd0:	f88d 6008 	strb.w	r6, [sp, #8]
   16cd4:	f8ad 300a 	strh.w	r3, [sp, #10]
   16cd8:	f009 f968 	bl	1ffac <bt_uuid_cmp>
		if (params->uuid &&
   16cdc:	b910      	cbnz	r0, 16ce4 <bt_gatt_discover+0xec>
			return -EINVAL;
   16cde:	f06f 0015 	mvn.w	r0, #21
   16ce2:	e7aa      	b.n	16c3a <bt_gatt_discover+0x42>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   16ce4:	f642 0301 	movw	r3, #10241	; 0x2801
   16ce8:	6820      	ldr	r0, [r4, #0]
   16cea:	f88d 600c 	strb.w	r6, [sp, #12]
   16cee:	a903      	add	r1, sp, #12
   16cf0:	f8ad 300e 	strh.w	r3, [sp, #14]
   16cf4:	f009 f95a 	bl	1ffac <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   16cf8:	2800      	cmp	r0, #0
   16cfa:	d0f0      	beq.n	16cde <bt_gatt_discover+0xe6>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   16cfc:	f642 0302 	movw	r3, #10242	; 0x2802
   16d00:	6820      	ldr	r0, [r4, #0]
   16d02:	f88d 6010 	strb.w	r6, [sp, #16]
   16d06:	a904      	add	r1, sp, #16
   16d08:	f8ad 3012 	strh.w	r3, [sp, #18]
   16d0c:	f009 f94e 	bl	1ffac <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   16d10:	2800      	cmp	r0, #0
   16d12:	d0e4      	beq.n	16cde <bt_gatt_discover+0xe6>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   16d14:	f642 0303 	movw	r3, #10243	; 0x2803
   16d18:	6820      	ldr	r0, [r4, #0]
   16d1a:	f88d 6014 	strb.w	r6, [sp, #20]
   16d1e:	a905      	add	r1, sp, #20
   16d20:	f8ad 3016 	strh.w	r3, [sp, #22]
   16d24:	f009 f942 	bl	1ffac <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   16d28:	2800      	cmp	r0, #0
   16d2a:	d0d8      	beq.n	16cde <bt_gatt_discover+0xe6>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   16d2c:	2304      	movs	r3, #4
   16d2e:	e9cd 3300 	strd	r3, r3, [sp]
   16d32:	4909      	ldr	r1, [pc, #36]	; (16d58 <bt_gatt_discover+0x160>)
   16d34:	4b09      	ldr	r3, [pc, #36]	; (16d5c <bt_gatt_discover+0x164>)
   16d36:	4622      	mov	r2, r4
   16d38:	e77c      	b.n	16c34 <bt_gatt_discover+0x3c>
		return -ENOTCONN;
   16d3a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16d3e:	e77c      	b.n	16c3a <bt_gatt_discover+0x42>
   16d40:	000223c5 	.word	0x000223c5
   16d44:	00021d75 	.word	0x00021d75
   16d48:	00021d09 	.word	0x00021d09
   16d4c:	0002245f 	.word	0x0002245f
   16d50:	00016d61 	.word	0x00016d61
   16d54:	00021d39 	.word	0x00021d39
   16d58:	000225dd 	.word	0x000225dd
   16d5c:	00021cf1 	.word	0x00021cf1

00016d60 <gatt_read_type_rsp>:
{
   16d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d64:	b093      	sub	sp, #76	; 0x4c
   16d66:	4680      	mov	r8, r0
   16d68:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   16d6a:	4617      	mov	r7, r2
	if (err) {
   16d6c:	b131      	cbz	r1, 16d7c <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   16d6e:	686b      	ldr	r3, [r5, #4]
   16d70:	462a      	mov	r2, r5
   16d72:	2100      	movs	r1, #0
}
   16d74:	b013      	add	sp, #76	; 0x4c
   16d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   16d7a:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   16d7c:	7c2a      	ldrb	r2, [r5, #16]
   16d7e:	2a02      	cmp	r2, #2
   16d80:	d172      	bne.n	16e68 <gatt_read_type_rsp+0x108>
	switch (rsp->len) {
   16d82:	7838      	ldrb	r0, [r7, #0]
   16d84:	2806      	cmp	r0, #6
   16d86:	d017      	beq.n	16db8 <gatt_read_type_rsp+0x58>
   16d88:	2808      	cmp	r0, #8
   16d8a:	d10f      	bne.n	16dac <gatt_read_type_rsp+0x4c>
	for (length--, pdu = rsp->data; length >= rsp->len;
   16d8c:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   16d8e:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   16d92:	b2a4      	uxth	r4, r4
   16d94:	f107 0b01 	add.w	fp, r7, #1
	uint16_t handle = 0U;
   16d98:	2600      	movs	r6, #0
			.uuid = BT_UUID_GATT_INCLUDE,
   16d9a:	f642 0a02 	movw	sl, #10242	; 0x2802
	for (length--, pdu = rsp->data; length >= rsp->len;
   16d9e:	783b      	ldrb	r3, [r7, #0]
   16da0:	42a3      	cmp	r3, r4
   16da2:	d90b      	bls.n	16dbc <gatt_read_type_rsp+0x5c>
	if (length == 0U && handle) {
   16da4:	b914      	cbnz	r4, 16dac <gatt_read_type_rsp+0x4c>
   16da6:	2e00      	cmp	r6, #0
   16da8:	f040 8123 	bne.w	16ff2 <gatt_read_type_rsp+0x292>
	params->func(conn, NULL, params);
   16dac:	686b      	ldr	r3, [r5, #4]
   16dae:	462a      	mov	r2, r5
   16db0:	2100      	movs	r1, #0
   16db2:	4640      	mov	r0, r8
   16db4:	4798      	blx	r3
	if (!handle) {
   16db6:	e03b      	b.n	16e30 <gatt_read_type_rsp+0xd0>
	switch (rsp->len) {
   16db8:	4611      	mov	r1, r2
   16dba:	e7e7      	b.n	16d8c <gatt_read_type_rsp+0x2c>
		handle = sys_le16_to_cpu(data->handle);
   16dbc:	f8bb 9000 	ldrh.w	r9, [fp]
   16dc0:	fa1f f689 	uxth.w	r6, r9
		if (!handle) {
   16dc4:	2e00      	cmp	r6, #0
   16dc6:	d0f1      	beq.n	16dac <gatt_read_type_rsp+0x4c>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   16dc8:	f8bb 0002 	ldrh.w	r0, [fp, #2]
   16dcc:	f8ad 001c 	strh.w	r0, [sp, #28]
		switch (u.uuid.type) {
   16dd0:	f89d 2020 	ldrb.w	r2, [sp, #32]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   16dd4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
   16dd8:	f8ad 101e 	strh.w	r1, [sp, #30]
		switch (u.uuid.type) {
   16ddc:	b162      	cbz	r2, 16df8 <gatt_read_type_rsp+0x98>
   16dde:	2a02      	cmp	r2, #2
   16de0:	d015      	beq.n	16e0e <gatt_read_type_rsp+0xae>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   16de2:	6829      	ldr	r1, [r5, #0]
   16de4:	b339      	cbz	r1, 16e36 <gatt_read_type_rsp+0xd6>
   16de6:	a808      	add	r0, sp, #32
   16de8:	f009 f8e0 	bl	1ffac <bt_uuid_cmp>
   16dec:	b318      	cbz	r0, 16e36 <gatt_read_type_rsp+0xd6>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   16dee:	783b      	ldrb	r3, [r7, #0]
   16df0:	1ae4      	subs	r4, r4, r3
   16df2:	b2a4      	uxth	r4, r4
   16df4:	449b      	add	fp, r3
   16df6:	e7d2      	b.n	16d9e <gatt_read_type_rsp+0x3e>
			value.uuid = &u.uuid;
   16df8:	aa08      	add	r2, sp, #32
   16dfa:	9206      	str	r2, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   16dfc:	f89b 2006 	ldrb.w	r2, [fp, #6]
   16e00:	f89b 1007 	ldrb.w	r1, [fp, #7]
   16e04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16e08:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   16e0c:	e7e9      	b.n	16de2 <gatt_read_type_rsp+0x82>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   16e0e:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   16e10:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   16e12:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
   16e14:	f8a5 9008 	strh.w	r9, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   16e18:	497a      	ldr	r1, [pc, #488]	; (17004 <gatt_read_type_rsp+0x2a4>)
   16e1a:	9201      	str	r2, [sp, #4]
   16e1c:	9300      	str	r3, [sp, #0]
   16e1e:	462a      	mov	r2, r5
   16e20:	4b79      	ldr	r3, [pc, #484]	; (17008 <gatt_read_type_rsp+0x2a8>)
   16e22:	4640      	mov	r0, r8
   16e24:	f00b f897 	bl	21f56 <gatt_req_send.constprop.0>
			return read_included_uuid(conn, params);
   16e28:	b286      	uxth	r6, r0
	if (!handle) {
   16e2a:	2e00      	cmp	r6, #0
   16e2c:	f040 80e1 	bne.w	16ff2 <gatt_read_type_rsp+0x292>
}
   16e30:	b013      	add	sp, #76	; 0x4c
   16e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			.uuid = BT_UUID_GATT_INCLUDE,
   16e36:	f04f 0300 	mov.w	r3, #0
		attr = (struct bt_gatt_attr) {
   16e3a:	2210      	movs	r2, #16
   16e3c:	2100      	movs	r1, #0
   16e3e:	a80e      	add	r0, sp, #56	; 0x38
			.uuid = BT_UUID_GATT_INCLUDE,
   16e40:	f88d 3014 	strb.w	r3, [sp, #20]
   16e44:	f8ad a016 	strh.w	sl, [sp, #22]
		attr = (struct bt_gatt_attr) {
   16e48:	f009 f862 	bl	1ff10 <memset>
   16e4c:	aa05      	add	r2, sp, #20
   16e4e:	920d      	str	r2, [sp, #52]	; 0x34
   16e50:	aa06      	add	r2, sp, #24
   16e52:	9210      	str	r2, [sp, #64]	; 0x40
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   16e54:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   16e56:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   16e5a:	462a      	mov	r2, r5
   16e5c:	a90d      	add	r1, sp, #52	; 0x34
   16e5e:	4640      	mov	r0, r8
   16e60:	4798      	blx	r3
   16e62:	2800      	cmp	r0, #0
   16e64:	d1c3      	bne.n	16dee <gatt_read_type_rsp+0x8e>
   16e66:	e7e3      	b.n	16e30 <gatt_read_type_rsp+0xd0>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   16e68:	2a03      	cmp	r2, #3
   16e6a:	d15b      	bne.n	16f24 <gatt_read_type_rsp+0x1c4>
	switch (rsp->len) {
   16e6c:	783a      	ldrb	r2, [r7, #0]
   16e6e:	2a07      	cmp	r2, #7
   16e70:	d002      	beq.n	16e78 <gatt_read_type_rsp+0x118>
   16e72:	2a15      	cmp	r2, #21
   16e74:	d19a      	bne.n	16dac <gatt_read_type_rsp+0x4c>
   16e76:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   16e78:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   16e7a:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   16e7e:	b2a4      	uxth	r4, r4
   16e80:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   16e84:	2600      	movs	r6, #0
   16e86:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   16e8a:	783b      	ldrb	r3, [r7, #0]
   16e8c:	42a3      	cmp	r3, r4
   16e8e:	d889      	bhi.n	16da4 <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   16e90:	f8b9 b000 	ldrh.w	fp, [r9]
   16e94:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   16e98:	2e00      	cmp	r6, #0
   16e9a:	d087      	beq.n	16dac <gatt_read_type_rsp+0x4c>
		switch (u.uuid.type) {
   16e9c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16ea0:	b163      	cbz	r3, 16ebc <gatt_read_type_rsp+0x15c>
   16ea2:	2b02      	cmp	r3, #2
   16ea4:	d013      	beq.n	16ece <gatt_read_type_rsp+0x16e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   16ea6:	6829      	ldr	r1, [r5, #0]
   16ea8:	b1c9      	cbz	r1, 16ede <gatt_read_type_rsp+0x17e>
   16eaa:	4650      	mov	r0, sl
   16eac:	f009 f87e 	bl	1ffac <bt_uuid_cmp>
   16eb0:	b1a8      	cbz	r0, 16ede <gatt_read_type_rsp+0x17e>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   16eb2:	783b      	ldrb	r3, [r7, #0]
   16eb4:	1ae4      	subs	r4, r4, r3
   16eb6:	b2a4      	uxth	r4, r4
   16eb8:	4499      	add	r9, r3
   16eba:	e7e6      	b.n	16e8a <gatt_read_type_rsp+0x12a>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   16ebc:	f899 3005 	ldrb.w	r3, [r9, #5]
   16ec0:	f899 2006 	ldrb.w	r2, [r9, #6]
   16ec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16ec8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   16ecc:	e7eb      	b.n	16ea6 <gatt_read_type_rsp+0x146>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   16ece:	2210      	movs	r2, #16
   16ed0:	f109 0105 	add.w	r1, r9, #5
   16ed4:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   16ed8:	f009 f80f 	bl	1fefa <memcpy>
			break;
   16edc:	e7e3      	b.n	16ea6 <gatt_read_type_rsp+0x146>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   16ede:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   16ee2:	f899 3002 	ldrb.w	r3, [r9, #2]
   16ee6:	f8ad 201c 	strh.w	r2, [sp, #28]
			.uuid = BT_UUID_GATT_CHRC,
   16eea:	2100      	movs	r1, #0
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   16eec:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr) {
   16ef0:	2210      	movs	r2, #16
			.uuid = BT_UUID_GATT_CHRC,
   16ef2:	f642 0303 	movw	r3, #10243	; 0x2803
		attr = (struct bt_gatt_attr) {
   16ef6:	a80e      	add	r0, sp, #56	; 0x38
			.uuid = BT_UUID_GATT_CHRC,
   16ef8:	f88d 1014 	strb.w	r1, [sp, #20]
   16efc:	f8ad 3016 	strh.w	r3, [sp, #22]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   16f00:	f8cd a018 	str.w	sl, [sp, #24]
		attr = (struct bt_gatt_attr) {
   16f04:	f009 f804 	bl	1ff10 <memset>
   16f08:	ab05      	add	r3, sp, #20
   16f0a:	930d      	str	r3, [sp, #52]	; 0x34
   16f0c:	ab06      	add	r3, sp, #24
   16f0e:	9310      	str	r3, [sp, #64]	; 0x40
   16f10:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   16f14:	686b      	ldr	r3, [r5, #4]
   16f16:	462a      	mov	r2, r5
   16f18:	a90d      	add	r1, sp, #52	; 0x34
   16f1a:	4640      	mov	r0, r8
   16f1c:	4798      	blx	r3
   16f1e:	2800      	cmp	r0, #0
   16f20:	d1c7      	bne.n	16eb2 <gatt_read_type_rsp+0x152>
   16f22:	e785      	b.n	16e30 <gatt_read_type_rsp+0xd0>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   16f24:	682a      	ldr	r2, [r5, #0]
   16f26:	7816      	ldrb	r6, [r2, #0]
   16f28:	b96e      	cbnz	r6, 16f46 <gatt_read_type_rsp+0x1e6>
	uuid_val = BT_UUID_16(params->uuid)->val;
   16f2a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   16f2e:	1e5c      	subs	r4, r3, #1
   16f30:	b2a4      	uxth	r4, r4
   16f32:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   16f36:	f5aa 5a24 	sub.w	sl, sl, #10496	; 0x2900
	for (length--, pdu = rsp->data; length >= rsp->len;
   16f3a:	783b      	ldrb	r3, [r7, #0]
   16f3c:	42a3      	cmp	r3, r4
   16f3e:	d907      	bls.n	16f50 <gatt_read_type_rsp+0x1f0>
	if (length == 0U && handle) {
   16f40:	b90c      	cbnz	r4, 16f46 <gatt_read_type_rsp+0x1e6>
   16f42:	2e00      	cmp	r6, #0
   16f44:	d155      	bne.n	16ff2 <gatt_read_type_rsp+0x292>
	params->func(conn, NULL, params);
   16f46:	686b      	ldr	r3, [r5, #4]
   16f48:	462a      	mov	r2, r5
   16f4a:	2100      	movs	r1, #0
   16f4c:	4640      	mov	r0, r8
   16f4e:	e711      	b.n	16d74 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   16f50:	f8b9 b000 	ldrh.w	fp, [r9]
   16f54:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   16f58:	2e00      	cmp	r6, #0
   16f5a:	d0f4      	beq.n	16f46 <gatt_read_type_rsp+0x1e6>
		switch (uuid_val) {
   16f5c:	f1ba 0f04 	cmp.w	sl, #4
   16f60:	d8f1      	bhi.n	16f46 <gatt_read_type_rsp+0x1e6>
   16f62:	a301      	add	r3, pc, #4	; (adr r3, 16f68 <gatt_read_type_rsp+0x208>)
   16f64:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
   16f68:	00016f7d 	.word	0x00016f7d
   16f6c:	00016f47 	.word	0x00016f47
   16f70:	00016f7d 	.word	0x00016f7d
   16f74:	00016f7d 	.word	0x00016f7d
   16f78:	00016fb9 	.word	0x00016fb9
			value.scc.flags = sys_get_le16(data->value);
   16f7c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   16f80:	f8ad 3020 	strh.w	r3, [sp, #32]
			.uuid = params->uuid,
   16f84:	682b      	ldr	r3, [r5, #0]
   16f86:	9303      	str	r3, [sp, #12]
		attr = (struct bt_gatt_attr) {
   16f88:	2210      	movs	r2, #16
   16f8a:	2100      	movs	r1, #0
   16f8c:	a80e      	add	r0, sp, #56	; 0x38
   16f8e:	f008 ffbf 	bl	1ff10 <memset>
   16f92:	9b03      	ldr	r3, [sp, #12]
   16f94:	930d      	str	r3, [sp, #52]	; 0x34
   16f96:	ab08      	add	r3, sp, #32
   16f98:	9310      	str	r3, [sp, #64]	; 0x40
   16f9a:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   16f9e:	686b      	ldr	r3, [r5, #4]
   16fa0:	462a      	mov	r2, r5
   16fa2:	a90d      	add	r1, sp, #52	; 0x34
   16fa4:	4640      	mov	r0, r8
   16fa6:	4798      	blx	r3
   16fa8:	2800      	cmp	r0, #0
   16faa:	f43f af41 	beq.w	16e30 <gatt_read_type_rsp+0xd0>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   16fae:	783b      	ldrb	r3, [r7, #0]
   16fb0:	1ae4      	subs	r4, r4, r3
   16fb2:	b2a4      	uxth	r4, r4
   16fb4:	4499      	add	r9, r3
   16fb6:	e7c0      	b.n	16f3a <gatt_read_type_rsp+0x1da>
			value.cpf.format = cpf->format;
   16fb8:	f899 3002 	ldrb.w	r3, [r9, #2]
   16fbc:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   16fc0:	f899 3003 	ldrb.w	r3, [r9, #3]
   16fc4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   16fc8:	f899 2005 	ldrb.w	r2, [r9, #5]
   16fcc:	f899 3004 	ldrb.w	r3, [r9, #4]
   16fd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16fd4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   16fd8:	f899 3006 	ldrb.w	r3, [r9, #6]
   16fdc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   16fe0:	f899 3007 	ldrb.w	r3, [r9, #7]
   16fe4:	f899 2008 	ldrb.w	r2, [r9, #8]
   16fe8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16fec:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   16ff0:	e7c8      	b.n	16f84 <gatt_read_type_rsp+0x224>
	gatt_discover_next(conn, handle, params);
   16ff2:	462a      	mov	r2, r5
   16ff4:	4631      	mov	r1, r6
   16ff6:	4640      	mov	r0, r8
}
   16ff8:	b013      	add	sp, #76	; 0x4c
   16ffa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   16ffe:	f00b b9c3 	b.w	22388 <gatt_discover_next>
   17002:	bf00      	nop
   17004:	00022553 	.word	0x00022553
   17008:	00021cdd 	.word	0x00021cdd

0001700c <bt_gatt_subscribe>:
}
#endif /* CONFIG_BT_GATT_AUTO_DISCOVER_CCC */

int bt_gatt_subscribe(struct bt_conn *conn,
		      struct bt_gatt_subscribe_params *params)
{
   1700c:	b570      	push	{r4, r5, r6, lr}
		 "invalid parameters\n");
#else
	__ASSERT(params->ccc_handle, "invalid parameters\n");
#endif

	if (conn->state != BT_CONN_CONNECTED) {
   1700e:	7b43      	ldrb	r3, [r0, #13]
   17010:	2b07      	cmp	r3, #7
{
   17012:	4605      	mov	r5, r0
   17014:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   17016:	d13b      	bne.n	17090 <bt_gatt_subscribe+0x84>
	sub = gatt_sub_find(conn);
   17018:	f7ff f914 	bl	16244 <gatt_sub_find>
	if (!sub) {
   1701c:	4604      	mov	r4, r0
   1701e:	b958      	cbnz	r0, 17038 <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   17020:	f7ff f910 	bl	16244 <gatt_sub_find>
		if (sub) {
   17024:	4604      	mov	r4, r0
   17026:	2800      	cmp	r0, #0
   17028:	d035      	beq.n	17096 <bt_gatt_subscribe+0x8a>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1702a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1702e:	3001      	adds	r0, #1
   17030:	f00a fe03 	bl	21c3a <bt_addr_le_copy>
			sub->id = conn->id;
   17034:	7a2b      	ldrb	r3, [r5, #8]
   17036:	7023      	strb	r3, [r4, #0]
	return list->head;
   17038:	68a3      	ldr	r3, [r4, #8]
	if (!sub) {
		return -ENOMEM;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1703a:	b17b      	cbz	r3, 1705c <bt_gatt_subscribe+0x50>
   1703c:	3b18      	subs	r3, #24
   1703e:	2200      	movs	r2, #0
		/* Fail if entry already exists */
		if (tmp == params) {
   17040:	429e      	cmp	r6, r3
   17042:	d02b      	beq.n	1709c <bt_gatt_subscribe+0x90>
			gatt_sub_remove(conn, sub, NULL, NULL);
			return -EALREADY;
		}

		/* Check if another subscription exists */
		if (tmp->value_handle == params->value_handle &&
   17044:	8998      	ldrh	r0, [r3, #12]
   17046:	89b1      	ldrh	r1, [r6, #12]
   17048:	4288      	cmp	r0, r1
   1704a:	d104      	bne.n	17056 <bt_gatt_subscribe+0x4a>
   1704c:	8a18      	ldrh	r0, [r3, #16]
   1704e:	8a31      	ldrh	r1, [r6, #16]
		    tmp->value >= params->value) {
			has_subscription = true;
   17050:	4288      	cmp	r0, r1
   17052:	bf28      	it	cs
   17054:	2201      	movcs	r2, #1
	return node->next;
   17056:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   17058:	b973      	cbnz	r3, 17078 <bt_gatt_subscribe+0x6c>
		}
	}

	/* Skip write if already subscribed */
	if (!has_subscription) {
   1705a:	b97a      	cbnz	r2, 1707c <bt_gatt_subscribe+0x70>
#if defined(CONFIG_BT_GATT_AUTO_DISCOVER_CCC)
		if (!params->ccc_handle) {
			return gatt_ccc_discover(conn, params);
		}
#endif
		err = gatt_write_ccc(conn, params);
   1705c:	4628      	mov	r0, r5
   1705e:	4631      	mov	r1, r6
   17060:	f7ff fa30 	bl	164c4 <gatt_write_ccc>
		if (err) {
   17064:	4605      	mov	r5, r0
   17066:	b148      	cbz	r0, 1707c <bt_gatt_subscribe+0x70>
	if (gatt_sub_is_empty(sub)) {
   17068:	68a3      	ldr	r3, [r4, #8]
   1706a:	b91b      	cbnz	r3, 17074 <bt_gatt_subscribe+0x68>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1706c:	490d      	ldr	r1, [pc, #52]	; (170a4 <bt_gatt_subscribe+0x98>)
   1706e:	1c60      	adds	r0, r4, #1
   17070:	f00a fde3 	bl	21c3a <bt_addr_le_copy>
	 * reported to send notification before reply to CCC write.
	 */
	sys_slist_prepend(&sub->list, &params->node);

	return 0;
}
   17074:	4628      	mov	r0, r5
   17076:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   17078:	3b18      	subs	r3, #24
   1707a:	e7e1      	b.n	17040 <bt_gatt_subscribe+0x34>
	return list->head;
   1707c:	68a2      	ldr	r2, [r4, #8]
	parent->next = child;
   1707e:	61b2      	str	r2, [r6, #24]
Z_GENLIST_PREPEND(slist, snode)
   17080:	68e2      	ldr	r2, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   17082:	f106 0318 	add.w	r3, r6, #24
	list->head = node;
   17086:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   17088:	b902      	cbnz	r2, 1708c <bt_gatt_subscribe+0x80>
	list->tail = node;
   1708a:	60e3      	str	r3, [r4, #12]
	return 0;
   1708c:	2500      	movs	r5, #0
   1708e:	e7f1      	b.n	17074 <bt_gatt_subscribe+0x68>
		return -ENOTCONN;
   17090:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   17094:	e7ee      	b.n	17074 <bt_gatt_subscribe+0x68>
		return -ENOMEM;
   17096:	f06f 050b 	mvn.w	r5, #11
   1709a:	e7eb      	b.n	17074 <bt_gatt_subscribe+0x68>
			return -EALREADY;
   1709c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   170a0:	e7e8      	b.n	17074 <bt_gatt_subscribe+0x68>
   170a2:	bf00      	nop
   170a4:	000259ef 	.word	0x000259ef

000170a8 <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   170a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool has_subscription = false, found = false;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
   170ac:	7b43      	ldrb	r3, [r0, #13]
   170ae:	2b07      	cmp	r3, #7
{
   170b0:	4607      	mov	r7, r0
   170b2:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   170b4:	d15b      	bne.n	1716e <bt_gatt_unsubscribe+0xc6>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   170b6:	f7ff f8c5 	bl	16244 <gatt_sub_find>
	if (!sub) {
   170ba:	4606      	mov	r6, r0
   170bc:	2800      	cmp	r0, #0
   170be:	d059      	beq.n	17174 <bt_gatt_unsubscribe+0xcc>
	return list->head;
   170c0:	6884      	ldr	r4, [r0, #8]
		return -EINVAL;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   170c2:	2c00      	cmp	r4, #0
   170c4:	d056      	beq.n	17174 <bt_gatt_unsubscribe+0xcc>
   170c6:	2300      	movs	r3, #0
   170c8:	3c18      	subs	r4, #24
   170ca:	4698      	mov	r8, r3
		if (params == tmp) {
   170cc:	42a5      	cmp	r5, r4
   170ce:	d009      	beq.n	170e4 <bt_gatt_unsubscribe+0x3c>
			found = true;
			continue;
		}

		/* Check if there still remains any other subscription */
		if (tmp->value_handle == params->value_handle) {
   170d0:	89a1      	ldrh	r1, [r4, #12]
   170d2:	89aa      	ldrh	r2, [r5, #12]
			has_subscription = true;
   170d4:	4291      	cmp	r1, r2
   170d6:	bf08      	it	eq
   170d8:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   170dc:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   170de:	b11c      	cbz	r4, 170e8 <bt_gatt_unsubscribe+0x40>
   170e0:	3c18      	subs	r4, #24
   170e2:	e7f3      	b.n	170cc <bt_gatt_unsubscribe+0x24>
			found = true;
   170e4:	2301      	movs	r3, #1
   170e6:	e7f9      	b.n	170dc <bt_gatt_unsubscribe+0x34>
		}
	}

	if (!found) {
   170e8:	2b00      	cmp	r3, #0
   170ea:	d043      	beq.n	17174 <bt_gatt_unsubscribe+0xcc>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   170ec:	f105 0014 	add.w	r0, r5, #20
   170f0:	f00a fd8e 	bl	21c10 <atomic_get>
		return -EINVAL;
	}

	/* Attempt to cancel if write is pending */
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   170f4:	0743      	lsls	r3, r0, #29
   170f6:	d503      	bpl.n	17100 <bt_gatt_unsubscribe+0x58>
		bt_gatt_cancel(conn, params);
   170f8:	4629      	mov	r1, r5
   170fa:	4638      	mov	r0, r7
   170fc:	f00b fb0d 	bl	2271a <bt_gatt_cancel>
	}

	if (!has_subscription) {
   17100:	f1b8 0f00 	cmp.w	r8, #0
   17104:	d019      	beq.n	1713a <bt_gatt_unsubscribe+0x92>
	return list->head;
   17106:	68b3      	ldr	r3, [r6, #8]
		if (err) {
			return err;
		}
	}

	sys_slist_find_and_remove(&sub->list, &params->node);
   17108:	f105 0218 	add.w	r2, r5, #24
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1710c:	b153      	cbz	r3, 17124 <bt_gatt_unsubscribe+0x7c>
   1710e:	429a      	cmp	r2, r3
   17110:	d123      	bne.n	1715a <bt_gatt_unsubscribe+0xb2>
	return node->next;
   17112:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   17114:	b9dc      	cbnz	r4, 1714e <bt_gatt_unsubscribe+0xa6>
   17116:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
   17118:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   1711a:	428a      	cmp	r2, r1
   1711c:	d100      	bne.n	17120 <bt_gatt_unsubscribe+0x78>
	list->tail = node;
   1711e:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   17120:	2300      	movs	r3, #0
   17122:	61ab      	str	r3, [r5, #24]

	if (gatt_sub_is_empty(sub)) {
   17124:	68b3      	ldr	r3, [r6, #8]
   17126:	b91b      	cbnz	r3, 17130 <bt_gatt_unsubscribe+0x88>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   17128:	4914      	ldr	r1, [pc, #80]	; (1717c <bt_gatt_unsubscribe+0xd4>)
   1712a:	1c70      	adds	r0, r6, #1
   1712c:	f00a fd85 	bl	21c3a <bt_addr_le_copy>
		gatt_sub_free(sub);
	}

	if (has_subscription) {
   17130:	f1b8 0f00 	cmp.w	r8, #0
   17134:	d114      	bne.n	17160 <bt_gatt_unsubscribe+0xb8>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}

	return 0;
   17136:	2000      	movs	r0, #0
   17138:	e007      	b.n	1714a <bt_gatt_unsubscribe+0xa2>
		params->value = 0x0000;
   1713a:	f8a5 8010 	strh.w	r8, [r5, #16]
		err = gatt_write_ccc(conn, params);
   1713e:	4629      	mov	r1, r5
   17140:	4638      	mov	r0, r7
   17142:	f7ff f9bf 	bl	164c4 <gatt_write_ccc>
		if (err) {
   17146:	2800      	cmp	r0, #0
   17148:	d0dd      	beq.n	17106 <bt_gatt_unsubscribe+0x5e>
}
   1714a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1714e:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   17150:	68f3      	ldr	r3, [r6, #12]
   17152:	429a      	cmp	r2, r3
	list->tail = node;
   17154:	bf08      	it	eq
   17156:	60f4      	streq	r4, [r6, #12]
}
   17158:	e7e2      	b.n	17120 <bt_gatt_unsubscribe+0x78>
	return node->next;
   1715a:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1715c:	681b      	ldr	r3, [r3, #0]
   1715e:	e7d5      	b.n	1710c <bt_gatt_unsubscribe+0x64>
		params->notify(conn, params, NULL, 0);
   17160:	2300      	movs	r3, #0
   17162:	682c      	ldr	r4, [r5, #0]
   17164:	461a      	mov	r2, r3
   17166:	4629      	mov	r1, r5
   17168:	4638      	mov	r0, r7
   1716a:	47a0      	blx	r4
   1716c:	e7e3      	b.n	17136 <bt_gatt_unsubscribe+0x8e>
		return -ENOTCONN;
   1716e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17172:	e7ea      	b.n	1714a <bt_gatt_unsubscribe+0xa2>
		return -EINVAL;
   17174:	f06f 0015 	mvn.w	r0, #21
   17178:	e7e7      	b.n	1714a <bt_gatt_unsubscribe+0xa2>
   1717a:	bf00      	nop
   1717c:	000259ef 	.word	0x000259ef

00017180 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   17180:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17182:	4a0b      	ldr	r2, [pc, #44]	; (171b0 <bt_gatt_connected+0x30>)
	data.conn = conn;
   17184:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17186:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
   1718a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1718c:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1718e:	2001      	movs	r0, #1
   17190:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17194:	f00a ffe6 	bl	22164 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   17198:	4620      	mov	r0, r4
   1719a:	f009 fcec 	bl	20b76 <bt_conn_get_security>
   1719e:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   171a2:	4288      	cmp	r0, r1
   171a4:	d202      	bcs.n	171ac <bt_gatt_connected+0x2c>
		int err = bt_conn_set_security(conn, data.sec);
   171a6:	4620      	mov	r0, r4
   171a8:	f009 fcb5 	bl	20b16 <bt_conn_set_security>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   171ac:	b002      	add	sp, #8
   171ae:	bd10      	pop	{r4, pc}
   171b0:	000169fd 	.word	0x000169fd

000171b4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   171b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   171b6:	4b08      	ldr	r3, [pc, #32]	; (171d8 <bt_gatt_att_max_mtu_changed+0x24>)
   171b8:	681c      	ldr	r4, [r3, #0]
   171ba:	4605      	mov	r5, r0
   171bc:	460e      	mov	r6, r1
   171be:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   171c0:	b14c      	cbz	r4, 171d6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   171c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   171c6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   171c8:	b11b      	cbz	r3, 171d2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   171ca:	463a      	mov	r2, r7
   171cc:	4631      	mov	r1, r6
   171ce:	4628      	mov	r0, r5
   171d0:	4798      	blx	r3
	return node->next;
   171d2:	6864      	ldr	r4, [r4, #4]
   171d4:	e7f4      	b.n	171c0 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   171d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   171d8:	20002cac 	.word	0x20002cac

000171dc <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   171dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;
   171de:	2301      	movs	r3, #1
{
   171e0:	4605      	mov	r5, r0
	data.conn = conn;
   171e2:	9000      	str	r0, [sp, #0]
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171e4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   171e8:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   171ea:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171ee:	f009 fa69 	bl	206c4 <bt_addr_le_is_bonded>
   171f2:	b940      	cbnz	r0, 17206 <bt_gatt_encrypt_change+0x2a>

#if defined(CONFIG_BT_GATT_AUTO_RESUBSCRIBE)
	add_subscriptions(conn);
#endif	/* CONFIG_BT_GATT_AUTO_RESUBSCRIBE */

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   171f4:	4a11      	ldr	r2, [pc, #68]	; (1723c <bt_gatt_encrypt_change+0x60>)
   171f6:	466b      	mov	r3, sp
   171f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   171fc:	2001      	movs	r0, #1
   171fe:	f00a ffb1 	bl	22164 <bt_gatt_foreach_attr>
		 * marked as change-unaware.
		 */
		sc_indicate(0x0001, 0xffff);
	}
#endif	/* CONFIG_BT_SETTINGS && CONFIG_BT_GATT_SERVICE_CHANGED */
}
   17202:	b003      	add	sp, #12
   17204:	bd30      	pop	{r4, r5, pc}
	sub = gatt_sub_find(conn);
   17206:	4628      	mov	r0, r5
   17208:	f7ff f81c 	bl	16244 <gatt_sub_find>
	if (!sub) {
   1720c:	2800      	cmp	r0, #0
   1720e:	d0f1      	beq.n	171f4 <bt_gatt_encrypt_change+0x18>
	return list->head;
   17210:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   17212:	2c00      	cmp	r4, #0
   17214:	d0ee      	beq.n	171f4 <bt_gatt_encrypt_change+0x18>
   17216:	3c18      	subs	r4, #24
		if (!atomic_test_bit(params->flags,
   17218:	f104 0314 	add.w	r3, r4, #20
   1721c:	4618      	mov	r0, r3
   1721e:	f00a fcf7 	bl	21c10 <atomic_get>
   17222:	0702      	lsls	r2, r0, #28
   17224:	d408      	bmi.n	17238 <bt_gatt_encrypt_change+0x5c>
   17226:	4618      	mov	r0, r3
   17228:	f00a fcf2 	bl	21c10 <atomic_get>
				     BT_GATT_SUBSCRIBE_FLAG_SENT) &&
   1722c:	0783      	lsls	r3, r0, #30
   1722e:	d403      	bmi.n	17238 <bt_gatt_encrypt_change+0x5c>
			gatt_write_ccc(conn, params);
   17230:	4621      	mov	r1, r4
   17232:	4628      	mov	r0, r5
   17234:	f7ff f946 	bl	164c4 <gatt_write_ccc>
	return node->next;
   17238:	69a4      	ldr	r4, [r4, #24]
   1723a:	e7ea      	b.n	17212 <bt_gatt_encrypt_change+0x36>
   1723c:	000169fd 	.word	0x000169fd

00017240 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17244:	4a2f      	ldr	r2, [pc, #188]	; (17304 <bt_gatt_disconnected+0xc4>)
   17246:	4603      	mov	r3, r0
{
   17248:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1724a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1724e:	2001      	movs	r0, #1
   17250:	f00a ff88 	bl	22164 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   17254:	4620      	mov	r0, r4
   17256:	f7fe fff5 	bl	16244 <gatt_sub_find>
	if (!sub) {
   1725a:	4606      	mov	r6, r0
   1725c:	b938      	cbnz	r0, 1726e <bt_gatt_disconnected+0x2e>
	cfg = find_cf_cfg(conn);
   1725e:	4620      	mov	r0, r4
   17260:	f7fe ff7c 	bl	1615c <find_cf_cfg>
	if (!cfg) {
   17264:	4605      	mov	r5, r0
   17266:	2800      	cmp	r0, #0
   17268:	d139      	bne.n	172de <bt_gatt_disconnected+0x9e>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1726a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1726e:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   17270:	2d00      	cmp	r5, #0
   17272:	d0f4      	beq.n	1725e <bt_gatt_disconnected+0x1e>
	return node->next;
   17274:	f855 7918 	ldr.w	r7, [r5], #-24
   17278:	b107      	cbz	r7, 1727c <bt_gatt_disconnected+0x3c>
   1727a:	3f18      	subs	r7, #24
{
   1727c:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   17280:	f104 0988 	add.w	r9, r4, #136	; 0x88
			params->value = 0U;
   17284:	46c2      	mov	sl, r8
   17286:	e001      	b.n	1728c <bt_gatt_disconnected+0x4c>
{
   17288:	463d      	mov	r5, r7
   1728a:	461f      	mov	r7, r3
		atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);
   1728c:	f105 0b14 	add.w	fp, r5, #20
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17290:	f06f 0108 	mvn.w	r1, #8
   17294:	4658      	mov	r0, fp
   17296:	f00a fcd3 	bl	21c40 <atomic_and>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1729a:	7a20      	ldrb	r0, [r4, #8]
   1729c:	4649      	mov	r1, r9
   1729e:	f009 fa11 	bl	206c4 <bt_addr_le_is_bonded>
   172a2:	b970      	cbnz	r0, 172c2 <bt_gatt_disconnected+0x82>
			params->value = 0U;
   172a4:	f8a5 a010 	strh.w	sl, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   172a8:	462b      	mov	r3, r5
   172aa:	4642      	mov	r2, r8
   172ac:	4631      	mov	r1, r6
   172ae:	4620      	mov	r0, r4
   172b0:	f7fe fff6 	bl	162a0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   172b4:	2f00      	cmp	r7, #0
   172b6:	d0d2      	beq.n	1725e <bt_gatt_disconnected+0x1e>
   172b8:	69bb      	ldr	r3, [r7, #24]
   172ba:	2b00      	cmp	r3, #0
   172bc:	d0e4      	beq.n	17288 <bt_gatt_disconnected+0x48>
   172be:	3b18      	subs	r3, #24
   172c0:	e7e2      	b.n	17288 <bt_gatt_disconnected+0x48>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   172c2:	4658      	mov	r0, fp
   172c4:	f00a fca4 	bl	21c10 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   172c8:	07c3      	lsls	r3, r0, #31
   172ca:	d4eb      	bmi.n	172a4 <bt_gatt_disconnected+0x64>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   172cc:	7873      	ldrb	r3, [r6, #1]
   172ce:	b11b      	cbz	r3, 172d8 <bt_gatt_disconnected+0x98>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   172d0:	4649      	mov	r1, r9
   172d2:	1c70      	adds	r0, r6, #1
   172d4:	f00a fcb1 	bl	21c3a <bt_addr_le_copy>
			prev = &params->node;
   172d8:	f105 0818 	add.w	r8, r5, #24
   172dc:	e7ea      	b.n	172b4 <bt_gatt_disconnected+0x74>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   172de:	f104 0688 	add.w	r6, r4, #136	; 0x88
   172e2:	7a20      	ldrb	r0, [r4, #8]
   172e4:	4631      	mov	r1, r6
   172e6:	f009 f9ed 	bl	206c4 <bt_addr_le_is_bonded>
   172ea:	b920      	cbnz	r0, 172f6 <bt_gatt_disconnected+0xb6>
		clear_cf_cfg(cfg);
   172ec:	4628      	mov	r0, r5
}
   172ee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   172f2:	f7fe bff9 	b.w	162e8 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   172f6:	4631      	mov	r1, r6
   172f8:	1c68      	adds	r0, r5, #1
}
   172fa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   172fe:	f00a bc9c 	b.w	21c3a <bt_addr_le_copy>
   17302:	bf00      	nop
   17304:	00016369 	.word	0x00016369

00017308 <bt_smp_accept>:
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   17308:	4b06      	ldr	r3, [pc, #24]	; (17324 <bt_smp_accept+0x1c>)
   1730a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1730e:	b928      	cbnz	r0, 1731c <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
   17310:	4a05      	ldr	r2, [pc, #20]	; (17328 <bt_smp_accept+0x20>)
   17312:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

		*chan = &smp->chan.chan;
   17316:	33ec      	adds	r3, #236	; 0xec
   17318:	600b      	str	r3, [r1, #0]

		return 0;
   1731a:	4770      	bx	lr
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   1731c:	f06f 000b 	mvn.w	r0, #11
}
   17320:	4770      	bx	lr
   17322:	bf00      	nop
   17324:	20001b08 	.word	0x20001b08
   17328:	000251ec 	.word	0x000251ec

0001732c <smp_find>:
{
   1732c:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1732e:	4b05      	ldr	r3, [pc, #20]	; (17344 <smp_find+0x18>)
{
   17330:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   17332:	4618      	mov	r0, r3
   17334:	f00b fad6 	bl	228e4 <atomic_test_bit>
	return NULL;
   17338:	3b04      	subs	r3, #4
   1733a:	2800      	cmp	r0, #0
}
   1733c:	bf14      	ite	ne
   1733e:	4618      	movne	r0, r3
   17340:	2000      	moveq	r0, #0
   17342:	bd08      	pop	{r3, pc}
   17344:	20001b0c 	.word	0x20001b0c

00017348 <latch_auth_cb>:
{
   17348:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1734a:	4a0c      	ldr	r2, [pc, #48]	; (1737c <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1734c:	6811      	ldr	r1, [r2, #0]
   1734e:	4a0c      	ldr	r2, [pc, #48]	; (17380 <latch_auth_cb+0x38>)
   17350:	f3bf 8f5b 	dmb	ish
   17354:	f500 73a8 	add.w	r3, r0, #336	; 0x150
   17358:	e853 4f00 	ldrex	r4, [r3]
   1735c:	4294      	cmp	r4, r2
   1735e:	d104      	bne.n	1736a <latch_auth_cb+0x22>
   17360:	e843 1c00 	strex	ip, r1, [r3]
   17364:	f1bc 0f00 	cmp.w	ip, #0
   17368:	d1f6      	bne.n	17358 <latch_auth_cb+0x10>
   1736a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1736e:	f3bf 8f5b 	dmb	ish
   17372:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
   17376:	f3bf 8f5b 	dmb	ish
}
   1737a:	bd10      	pop	{r4, pc}
   1737c:	20002be0 	.word	0x20002be0
   17380:	20001b08 	.word	0x20001b08

00017384 <get_io_capa>:
{
   17384:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17386:	f7ff ffdf 	bl	17348 <latch_auth_cb>
	if (!smp_auth_cb) {
   1738a:	4603      	mov	r3, r0
   1738c:	b1c8      	cbz	r0, 173c2 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1738e:	e9d0 1200 	ldrd	r1, r2, [r0]
   17392:	b921      	cbnz	r1, 1739e <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   17394:	2a00      	cmp	r2, #0
   17396:	bf0c      	ite	eq
   17398:	2003      	moveq	r0, #3
   1739a:	2002      	movne	r0, #2
   1739c:	e010      	b.n	173c0 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1739e:	b132      	cbz	r2, 173ae <get_io_capa+0x2a>
   173a0:	6883      	ldr	r3, [r0, #8]
   173a2:	b913      	cbnz	r3, 173aa <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   173a4:	4b09      	ldr	r3, [pc, #36]	; (173cc <get_io_capa+0x48>)
   173a6:	781b      	ldrb	r3, [r3, #0]
   173a8:	b933      	cbnz	r3, 173b8 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   173aa:	2004      	movs	r0, #4
   173ac:	e008      	b.n	173c0 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   173ae:	4907      	ldr	r1, [pc, #28]	; (173cc <get_io_capa+0x48>)
   173b0:	7808      	ldrb	r0, [r1, #0]
   173b2:	b128      	cbz	r0, 173c0 <get_io_capa+0x3c>
   173b4:	689b      	ldr	r3, [r3, #8]
   173b6:	b933      	cbnz	r3, 173c6 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   173b8:	3a00      	subs	r2, #0
   173ba:	bf18      	it	ne
   173bc:	2201      	movne	r2, #1
   173be:	0050      	lsls	r0, r2, #1
}
   173c0:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   173c2:	2003      	movs	r0, #3
   173c4:	e7fc      	b.n	173c0 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   173c6:	2001      	movs	r0, #1
   173c8:	e7fa      	b.n	173c0 <get_io_capa+0x3c>
   173ca:	bf00      	nop
   173cc:	200039b2 	.word	0x200039b2

000173d0 <smp_dhkey_generate>:
{
   173d0:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   173d2:	1d05      	adds	r5, r0, #4
{
   173d4:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   173d6:	2108      	movs	r1, #8
   173d8:	4628      	mov	r0, r5
   173da:	f00b faf1 	bl	229c0 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   173de:	4906      	ldr	r1, [pc, #24]	; (173f8 <smp_dhkey_generate+0x28>)
   173e0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   173e4:	f7fd f892 	bl	1450c <bt_dh_key_gen>
	if (err) {
   173e8:	b120      	cbz	r0, 173f4 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   173ea:	4628      	mov	r0, r5
   173ec:	2108      	movs	r1, #8
   173ee:	f00b faa3 	bl	22938 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   173f2:	2008      	movs	r0, #8
}
   173f4:	bd38      	pop	{r3, r4, r5, pc}
   173f6:	bf00      	nop
   173f8:	0002308b 	.word	0x0002308b

000173fc <bt_smp_distribute_keys>:
{
   173fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_keys *keys = conn->le.keys;
   17400:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	if (!keys) {
   17404:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
{
   17408:	b089      	sub	sp, #36	; 0x24
   1740a:	4604      	mov	r4, r0
	if (!keys) {
   1740c:	2b00      	cmp	r3, #0
   1740e:	d06d      	beq.n	174ec <bt_smp_distribute_keys+0xf0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17410:	f100 0804 	add.w	r8, r0, #4
   17414:	2105      	movs	r1, #5
   17416:	4640      	mov	r0, r8
   17418:	f00b fa64 	bl	228e4 <atomic_test_bit>
   1741c:	2800      	cmp	r0, #0
   1741e:	d161      	bne.n	174e4 <bt_smp_distribute_keys+0xe8>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   17420:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17424:	07db      	lsls	r3, r3, #31
   17426:	d55d      	bpl.n	174e4 <bt_smp_distribute_keys+0xe8>
	struct bt_keys *keys = conn->le.keys;
   17428:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1742c:	211a      	movs	r1, #26
   1742e:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   17430:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   17434:	f002 fed6 	bl	1a1e4 <bt_rand>
   17438:	4607      	mov	r7, r0
   1743a:	2800      	cmp	r0, #0
   1743c:	d152      	bne.n	174e4 <bt_smp_distribute_keys+0xe8>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1743e:	2106      	movs	r1, #6
   17440:	4620      	mov	r0, r4
   17442:	f00b fb76 	bl	22b32 <smp_create_pdu.constprop.0>
		if (!buf) {
   17446:	4606      	mov	r6, r0
   17448:	2800      	cmp	r0, #0
   1744a:	d04b      	beq.n	174e4 <bt_smp_distribute_keys+0xe8>
   1744c:	2110      	movs	r1, #16
   1744e:	300c      	adds	r0, #12
   17450:	f00c f961 	bl	23716 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   17454:	7b2a      	ldrb	r2, [r5, #12]
   17456:	a901      	add	r1, sp, #4
   17458:	4681      	mov	r9, r0
   1745a:	f008 fd4e 	bl	1fefa <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1745e:	7b28      	ldrb	r0, [r5, #12]
   17460:	280f      	cmp	r0, #15
   17462:	d805      	bhi.n	17470 <bt_smp_distribute_keys+0x74>
			(void)memset(info->ltk + keys->enc_size, 0,
   17464:	f1c0 0210 	rsb	r2, r0, #16
   17468:	4639      	mov	r1, r7
   1746a:	4448      	add	r0, r9
   1746c:	f008 fd50 	bl	1ff10 <memset>
		smp_send(smp, buf, NULL, NULL);
   17470:	4631      	mov	r1, r6
   17472:	2200      	movs	r2, #0
   17474:	4620      	mov	r0, r4
   17476:	f00b fa6e 	bl	22956 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1747a:	2107      	movs	r1, #7
   1747c:	4620      	mov	r0, r4
   1747e:	f00b fb58 	bl	22b32 <smp_create_pdu.constprop.0>
		if (!buf) {
   17482:	4606      	mov	r6, r0
   17484:	b370      	cbz	r0, 174e4 <bt_smp_distribute_keys+0xe8>
   17486:	210a      	movs	r1, #10
   17488:	300c      	adds	r0, #12
   1748a:	f00c f944 	bl	23716 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1748e:	2208      	movs	r2, #8
   17490:	4607      	mov	r7, r0
   17492:	a905      	add	r1, sp, #20
   17494:	3002      	adds	r0, #2
   17496:	f008 fd30 	bl	1fefa <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1749a:	2202      	movs	r2, #2
   1749c:	a907      	add	r1, sp, #28
   1749e:	4638      	mov	r0, r7
   174a0:	f008 fd2b 	bl	1fefa <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   174a4:	4631      	mov	r1, r6
   174a6:	4620      	mov	r0, r4
   174a8:	4a11      	ldr	r2, [pc, #68]	; (174f0 <bt_smp_distribute_keys+0xf4>)
   174aa:	f00b fa54 	bl	22956 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   174ae:	210d      	movs	r1, #13
   174b0:	4640      	mov	r0, r8
   174b2:	f00b fa17 	bl	228e4 <atomic_test_bit>
   174b6:	b1a8      	cbz	r0, 174e4 <bt_smp_distribute_keys+0xe8>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   174b8:	2101      	movs	r1, #1
   174ba:	4628      	mov	r0, r5
   174bc:	f00c f80b 	bl	234d6 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   174c0:	2210      	movs	r2, #16
   174c2:	a901      	add	r1, sp, #4
   174c4:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   174c8:	f008 fd17 	bl	1fefa <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   174cc:	2208      	movs	r2, #8
   174ce:	a905      	add	r1, sp, #20
   174d0:	f105 0040 	add.w	r0, r5, #64	; 0x40
   174d4:	f008 fd11 	bl	1fefa <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   174d8:	2202      	movs	r2, #2
   174da:	a907      	add	r1, sp, #28
   174dc:	f105 0048 	add.w	r0, r5, #72	; 0x48
   174e0:	f008 fd0b 	bl	1fefa <memcpy>
	return 0;
   174e4:	2000      	movs	r0, #0
}
   174e6:	b009      	add	sp, #36	; 0x24
   174e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   174ec:	2008      	movs	r0, #8
   174ee:	e7fa      	b.n	174e6 <bt_smp_distribute_keys+0xea>
   174f0:	00023383 	.word	0x00023383

000174f4 <smp_send_pairing_req>:
{
   174f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174f8:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   174fa:	f00b f9ec 	bl	228d6 <smp_chan_get>
	if (!smp) {
   174fe:	4604      	mov	r4, r0
   17500:	2800      	cmp	r0, #0
   17502:	f000 80c3 	beq.w	1768c <smp_send_pairing_req+0x198>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   17506:	1d07      	adds	r7, r0, #4
   17508:	2104      	movs	r1, #4
   1750a:	4638      	mov	r0, r7
   1750c:	f00b f9ea 	bl	228e4 <atomic_test_bit>
   17510:	2800      	cmp	r0, #0
   17512:	f040 80be 	bne.w	17692 <smp_send_pairing_req+0x19e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   17516:	2102      	movs	r1, #2
   17518:	4638      	mov	r0, r7
   1751a:	f00b f9e3 	bl	228e4 <atomic_test_bit>
   1751e:	2800      	cmp	r0, #0
   17520:	f040 80ad 	bne.w	1767e <smp_send_pairing_req+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   17524:	2103      	movs	r1, #3
   17526:	4638      	mov	r0, r7
   17528:	f00b f9dc 	bl	228e4 <atomic_test_bit>
   1752c:	b118      	cbz	r0, 17536 <smp_send_pairing_req+0x42>
		return -EBUSY;
   1752e:	f06f 000f 	mvn.w	r0, #15
}
   17532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   17536:	2101      	movs	r1, #1
   17538:	4638      	mov	r0, r7
   1753a:	f00b f9d3 	bl	228e4 <atomic_test_bit>
   1753e:	2800      	cmp	r0, #0
   17540:	d1f5      	bne.n	1752e <smp_send_pairing_req+0x3a>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17542:	4620      	mov	r0, r4
   17544:	f7ff ff00 	bl	17348 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   17548:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1754c:	7a9b      	ldrb	r3, [r3, #10]
   1754e:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17550:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   17552:	d015      	beq.n	17580 <smp_send_pairing_req+0x8c>
   17554:	d805      	bhi.n	17562 <smp_send_pairing_req+0x6e>
   17556:	3b01      	subs	r3, #1
   17558:	2b01      	cmp	r3, #1
   1755a:	d91b      	bls.n	17594 <smp_send_pairing_req+0xa0>
		return -EINVAL;
   1755c:	f06f 0015 	mvn.w	r0, #21
   17560:	e7e7      	b.n	17532 <smp_send_pairing_req+0x3e>
	switch (smp->chan.chan.conn->required_sec_level) {
   17562:	2b04      	cmp	r3, #4
   17564:	d1fa      	bne.n	1755c <smp_send_pairing_req+0x68>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17566:	4620      	mov	r0, r4
   17568:	f7ff ff0c 	bl	17384 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1756c:	2803      	cmp	r0, #3
   1756e:	d104      	bne.n	1757a <smp_send_pairing_req+0x86>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17570:	2e00      	cmp	r6, #0
   17572:	d0f3      	beq.n	1755c <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   17574:	68f3      	ldr	r3, [r6, #12]
   17576:	2b00      	cmp	r3, #0
   17578:	d0f0      	beq.n	1755c <smp_send_pairing_req+0x68>
   1757a:	4b47      	ldr	r3, [pc, #284]	; (17698 <smp_send_pairing_req+0x1a4>)
   1757c:	781b      	ldrb	r3, [r3, #0]
   1757e:	e007      	b.n	17590 <smp_send_pairing_req+0x9c>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17580:	4620      	mov	r0, r4
   17582:	f7ff feff 	bl	17384 <get_io_capa>
   17586:	2803      	cmp	r0, #3
   17588:	d104      	bne.n	17594 <smp_send_pairing_req+0xa0>
   1758a:	2e00      	cmp	r6, #0
   1758c:	d0e6      	beq.n	1755c <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1758e:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   17590:	2b00      	cmp	r3, #0
   17592:	d0e3      	beq.n	1755c <smp_send_pairing_req+0x68>
	if (!conn->le.keys) {
   17594:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   17598:	b16b      	cbz	r3, 175b6 <smp_send_pairing_req+0xc2>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1759a:	2100      	movs	r1, #0
   1759c:	22ec      	movs	r2, #236	; 0xec
   1759e:	4620      	mov	r0, r4
   175a0:	f008 fcb6 	bl	1ff10 <memset>
	if (bt_rand(smp->prnd, 16)) {
   175a4:	2110      	movs	r1, #16
   175a6:	f104 0027 	add.w	r0, r4, #39	; 0x27
   175aa:	f002 fe1b 	bl	1a1e4 <bt_rand>
   175ae:	b170      	cbz	r0, 175ce <smp_send_pairing_req+0xda>
		return -ENOBUFS;
   175b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   175b4:	e7bd      	b.n	17532 <smp_send_pairing_req+0x3e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   175b6:	7a28      	ldrb	r0, [r5, #8]
   175b8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   175bc:	f000 fe48 	bl	18250 <bt_keys_get_addr>
   175c0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   175c4:	2800      	cmp	r0, #0
   175c6:	d1e8      	bne.n	1759a <smp_send_pairing_req+0xa6>
			return -ENOMEM;
   175c8:	f06f 000b 	mvn.w	r0, #11
   175cc:	e7b1      	b.n	17532 <smp_send_pairing_req+0x3e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   175ce:	2105      	movs	r1, #5
   175d0:	4620      	mov	r0, r4
   175d2:	f00b f9f5 	bl	229c0 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   175d6:	f7fc ff89 	bl	144ec <bt_pub_key_get>
   175da:	4b30      	ldr	r3, [pc, #192]	; (1769c <smp_send_pairing_req+0x1a8>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   175dc:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   175de:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   175e0:	4620      	mov	r0, r4
   175e2:	f00b faa6 	bl	22b32 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   175e6:	4680      	mov	r8, r0
   175e8:	2800      	cmp	r0, #0
   175ea:	d0e1      	beq.n	175b0 <smp_send_pairing_req+0xbc>
   175ec:	2106      	movs	r1, #6
   175ee:	300c      	adds	r0, #12
   175f0:	f00c f891 	bl	23716 <net_buf_simple_add>
	if (sc_supported) {
   175f4:	4b28      	ldr	r3, [pc, #160]	; (17698 <smp_send_pairing_req+0x1a4>)
   175f6:	781b      	ldrb	r3, [r3, #0]
   175f8:	4605      	mov	r5, r0
		auth &= BT_SMP_AUTH_MASK_SC;
   175fa:	2b00      	cmp	r3, #0
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   175fc:	4620      	mov	r0, r4
		auth &= BT_SMP_AUTH_MASK_SC;
   175fe:	bf14      	ite	ne
   17600:	2609      	movne	r6, #9
   17602:	2601      	moveq	r6, #1
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   17604:	f7ff febe 	bl	17384 <get_io_capa>
	if (bondable) {
   17608:	4b25      	ldr	r3, [pc, #148]	; (176a0 <smp_send_pairing_req+0x1ac>)
   1760a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1760c:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
   1760e:	bf18      	it	ne
   17610:	f046 0604 	orrne.w	r6, r6, #4
	if (bondable) {
   17614:	b3ab      	cbz	r3, 17682 <smp_send_pairing_req+0x18e>
		auth |= BT_SMP_AUTH_BONDING;
   17616:	f046 0601 	orr.w	r6, r6, #1
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1761a:	70ae      	strb	r6, [r5, #2]
	req->io_capability = get_io_capa(smp);
   1761c:	4620      	mov	r0, r4
   1761e:	f7ff feb1 	bl	17384 <get_io_capa>
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   17622:	4b20      	ldr	r3, [pc, #128]	; (176a4 <smp_send_pairing_req+0x1b0>)
	req->io_capability = get_io_capa(smp);
   17624:	7028      	strb	r0, [r5, #0]
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   17626:	781b      	ldrb	r3, [r3, #0]
   17628:	bb73      	cbnz	r3, 17688 <smp_send_pairing_req+0x194>
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   1762a:	4b1f      	ldr	r3, [pc, #124]	; (176a8 <smp_send_pairing_req+0x1b4>)
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   1762c:	781b      	ldrb	r3, [r3, #0]
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   1762e:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   17630:	2310      	movs	r3, #16
   17632:	70eb      	strb	r3, [r5, #3]
	if (req->auth_req & BT_SMP_AUTH_BONDING) {
   17634:	78ab      	ldrb	r3, [r5, #2]
   17636:	f013 0301 	ands.w	r3, r3, #1
   1763a:	bf14      	ite	ne
   1763c:	2203      	movne	r2, #3
   1763e:	2200      	moveq	r2, #0
		req->resp_key_dist = RECV_KEYS;
   17640:	716a      	strb	r2, [r5, #5]
		req->init_key_dist = SEND_KEYS;
   17642:	712b      	strb	r3, [r5, #4]
	smp->local_dist = req->init_key_dist;
   17644:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = req->resp_key_dist;
   17648:	796b      	ldrb	r3, [r5, #5]
   1764a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1764e:	2301      	movs	r3, #1
   17650:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   17652:	2206      	movs	r2, #6
   17654:	4629      	mov	r1, r5
   17656:	f104 000a 	add.w	r0, r4, #10
   1765a:	f008 fc4e 	bl	1fefa <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1765e:	2200      	movs	r2, #0
   17660:	4641      	mov	r1, r8
   17662:	4620      	mov	r0, r4
   17664:	f00b f977 	bl	22956 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   17668:	4620      	mov	r0, r4
   1766a:	2102      	movs	r1, #2
   1766c:	f00b f9a8 	bl	229c0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   17670:	210b      	movs	r1, #11
   17672:	f00b f9a5 	bl	229c0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   17676:	2103      	movs	r1, #3
   17678:	4638      	mov	r0, r7
   1767a:	f00b f9a1 	bl	229c0 <atomic_set_bit>
		return 0;
   1767e:	2000      	movs	r0, #0
   17680:	e757      	b.n	17532 <smp_send_pairing_req+0x3e>
		auth &= ~BT_SMP_AUTH_BONDING;
   17682:	f006 060c 	and.w	r6, r6, #12
   17686:	e7c8      	b.n	1761a <smp_send_pairing_req+0x126>
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   17688:	2301      	movs	r3, #1
   1768a:	e7d0      	b.n	1762e <smp_send_pairing_req+0x13a>
		return -ENOTCONN;
   1768c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17690:	e74f      	b.n	17532 <smp_send_pairing_req+0x3e>
		return -EIO;
   17692:	f06f 0004 	mvn.w	r0, #4
   17696:	e74c      	b.n	17532 <smp_send_pairing_req+0x3e>
   17698:	200039b2 	.word	0x200039b2
   1769c:	20002cd4 	.word	0x20002cd4
   176a0:	20000769 	.word	0x20000769
   176a4:	200039b3 	.word	0x200039b3
   176a8:	200039b4 	.word	0x200039b4

000176ac <smp_security_request>:
{
   176ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   176b0:	1d06      	adds	r6, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   176b2:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	struct bt_smp_security_request *req = (void *)buf->data;
   176b6:	68cb      	ldr	r3, [r1, #12]
{
   176b8:	4607      	mov	r7, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   176ba:	2102      	movs	r1, #2
   176bc:	4630      	mov	r0, r6
   176be:	f00b f911 	bl	228e4 <atomic_test_bit>
   176c2:	2800      	cmp	r0, #0
   176c4:	d159      	bne.n	1777a <smp_security_request+0xce>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   176c6:	2103      	movs	r1, #3
   176c8:	4630      	mov	r0, r6
   176ca:	f00b f90b 	bl	228e4 <atomic_test_bit>
   176ce:	2800      	cmp	r0, #0
   176d0:	d153      	bne.n	1777a <smp_security_request+0xce>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   176d2:	2101      	movs	r1, #1
   176d4:	4630      	mov	r0, r6
   176d6:	f00b f905 	bl	228e4 <atomic_test_bit>
   176da:	2800      	cmp	r0, #0
   176dc:	d14d      	bne.n	1777a <smp_security_request+0xce>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   176de:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   176e0:	4b27      	ldr	r3, [pc, #156]	; (17780 <smp_security_request+0xd4>)
   176e2:	781b      	ldrb	r3, [r3, #0]
   176e4:	b17b      	cbz	r3, 17706 <smp_security_request+0x5a>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   176e6:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   176ea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   176ee:	b16b      	cbz	r3, 1770c <smp_security_request+0x60>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   176f0:	89db      	ldrh	r3, [r3, #14]
   176f2:	f003 0324 	and.w	r3, r3, #36	; 0x24
   176f6:	b9d3      	cbnz	r3, 1772e <smp_security_request+0x82>
	if (smp_send_pairing_req(conn) < 0) {
   176f8:	4620      	mov	r0, r4
   176fa:	f7ff fefb 	bl	174f4 <smp_send_pairing_req>
   176fe:	2800      	cmp	r0, #0
   17700:	db33      	blt.n	1776a <smp_security_request+0xbe>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   17702:	210f      	movs	r1, #15
   17704:	e036      	b.n	17774 <smp_security_request+0xc8>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   17706:	f005 0507 	and.w	r5, r5, #7
   1770a:	e7ee      	b.n	176ea <smp_security_request+0x3e>
					     &conn->le.dst);
   1770c:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   17710:	7a21      	ldrb	r1, [r4, #8]
   17712:	4642      	mov	r2, r8
   17714:	2020      	movs	r0, #32
   17716:	f000 fdcf 	bl	182b8 <bt_keys_find>
   1771a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1771e:	b930      	cbnz	r0, 1772e <smp_security_request+0x82>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   17720:	7a21      	ldrb	r1, [r4, #8]
   17722:	4642      	mov	r2, r8
   17724:	2004      	movs	r0, #4
   17726:	f000 fdc7 	bl	182b8 <bt_keys_find>
   1772a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1772e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   17732:	2900      	cmp	r1, #0
   17734:	d0e0      	beq.n	176f8 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   17736:	076b      	lsls	r3, r5, #29
   17738:	d506      	bpl.n	17748 <smp_security_request+0x9c>
   1773a:	7b4b      	ldrb	r3, [r1, #13]
   1773c:	07d8      	lsls	r0, r3, #31
   1773e:	d403      	bmi.n	17748 <smp_security_request+0x9c>
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   17740:	4638      	mov	r0, r7
   17742:	f7ff fe1f 	bl	17384 <get_io_capa>
		goto pair;
   17746:	e7d7      	b.n	176f8 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   17748:	072a      	lsls	r2, r5, #28
   1774a:	d502      	bpl.n	17752 <smp_security_request+0xa6>
   1774c:	89cb      	ldrh	r3, [r1, #14]
   1774e:	069b      	lsls	r3, r3, #26
   17750:	d5d2      	bpl.n	176f8 <smp_security_request+0x4c>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   17752:	7b0b      	ldrb	r3, [r1, #12]
   17754:	9300      	str	r3, [sp, #0]
   17756:	f101 0218 	add.w	r2, r1, #24
   1775a:	f101 031a 	add.w	r3, r1, #26
   1775e:	4620      	mov	r0, r4
   17760:	3110      	adds	r1, #16
   17762:	f009 f99d 	bl	20aa0 <bt_conn_le_start_encryption>
   17766:	2800      	cmp	r0, #0
   17768:	da03      	bge.n	17772 <smp_security_request+0xc6>
		return BT_SMP_ERR_UNSPECIFIED;
   1776a:	2008      	movs	r0, #8
}
   1776c:	b002      	add	sp, #8
   1776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17772:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   17774:	4630      	mov	r0, r6
   17776:	f00b f923 	bl	229c0 <atomic_set_bit>
		return 0;
   1777a:	2000      	movs	r0, #0
   1777c:	e7f6      	b.n	1776c <smp_security_request+0xc0>
   1777e:	bf00      	nop
   17780:	200039b2 	.word	0x200039b2

00017784 <smp_send_pairing_confirm>:
{
   17784:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   17786:	7a04      	ldrb	r4, [r0, #8]
   17788:	2c02      	cmp	r4, #2
{
   1778a:	4605      	mov	r5, r0
	switch (smp->method) {
   1778c:	d823      	bhi.n	177d6 <smp_send_pairing_confirm+0x52>
   1778e:	b144      	cbz	r4, 177a2 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17790:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   17794:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   17798:	40dc      	lsrs	r4, r3
   1779a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1779e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   177a2:	2103      	movs	r1, #3
   177a4:	4628      	mov	r0, r5
   177a6:	f00b f9c4 	bl	22b32 <smp_create_pdu.constprop.0>
	if (!buf) {
   177aa:	4606      	mov	r6, r0
   177ac:	b1a8      	cbz	r0, 177da <smp_send_pairing_confirm+0x56>
   177ae:	2110      	movs	r1, #16
   177b0:	300c      	adds	r0, #12
   177b2:	f00b ffb0 	bl	23716 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   177b6:	9000      	str	r0, [sp, #0]
   177b8:	4810      	ldr	r0, [pc, #64]	; (177fc <smp_send_pairing_confirm+0x78>)
   177ba:	4623      	mov	r3, r4
   177bc:	6800      	ldr	r0, [r0, #0]
   177be:	f105 0227 	add.w	r2, r5, #39	; 0x27
   177c2:	f105 0157 	add.w	r1, r5, #87	; 0x57
   177c6:	f00b fece 	bl	23566 <bt_crypto_f4>
   177ca:	4604      	mov	r4, r0
   177cc:	b150      	cbz	r0, 177e4 <smp_send_pairing_confirm+0x60>
		net_buf_unref(buf);
   177ce:	4630      	mov	r0, r6
   177d0:	f000 ff48 	bl	18664 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   177d4:	e001      	b.n	177da <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   177d6:	2c03      	cmp	r4, #3
   177d8:	d002      	beq.n	177e0 <smp_send_pairing_confirm+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
   177da:	2008      	movs	r0, #8
}
   177dc:	b002      	add	sp, #8
   177de:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   177e0:	2400      	movs	r4, #0
   177e2:	e7de      	b.n	177a2 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   177e4:	4602      	mov	r2, r0
   177e6:	4631      	mov	r1, r6
   177e8:	4628      	mov	r0, r5
   177ea:	f00b f8b4 	bl	22956 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   177ee:	1d28      	adds	r0, r5, #4
   177f0:	4621      	mov	r1, r4
   177f2:	f00b f8a1 	bl	22938 <atomic_clear_bit>
	return 0;
   177f6:	4620      	mov	r0, r4
   177f8:	e7f0      	b.n	177dc <smp_send_pairing_confirm+0x58>
   177fa:	bf00      	nop
   177fc:	20002cd4 	.word	0x20002cd4

00017800 <smp_public_key>:
{
   17800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17802:	460e      	mov	r6, r1
   17804:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17806:	f7ff fd9f 	bl	17348 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1780a:	68f6      	ldr	r6, [r6, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1780c:	f104 0757 	add.w	r7, r4, #87	; 0x57
   17810:	2220      	movs	r2, #32
   17812:	4631      	mov	r1, r6
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17814:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   17816:	4638      	mov	r0, r7
   17818:	f008 fb6f 	bl	1fefa <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1781c:	2220      	movs	r2, #32
   1781e:	18b1      	adds	r1, r6, r2
   17820:	f104 0077 	add.w	r0, r4, #119	; 0x77
   17824:	f008 fb69 	bl	1fefa <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   17828:	4638      	mov	r0, r7
   1782a:	f7fc fde9 	bl	14400 <bt_pub_key_is_debug>
   1782e:	b988      	cbnz	r0, 17854 <smp_public_key+0x54>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   17830:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17834:	78db      	ldrb	r3, [r3, #3]
   17836:	bb63      	cbnz	r3, 17892 <smp_public_key+0x92>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   17838:	1d26      	adds	r6, r4, #4
   1783a:	210e      	movs	r1, #14
   1783c:	4630      	mov	r0, r6
   1783e:	f00b f851 	bl	228e4 <atomic_test_bit>
   17842:	b340      	cbz	r0, 17896 <smp_public_key+0x96>
		switch (smp->method) {
   17844:	7a23      	ldrb	r3, [r4, #8]
   17846:	2b05      	cmp	r3, #5
   17848:	d82d      	bhi.n	178a6 <smp_public_key+0xa6>
   1784a:	e8df f003 	tbb	[pc, r3]
   1784e:	712e      	.short	0x712e
   17850:	7b2c2e33 	.word	0x7b2c2e33
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   17854:	210e      	movs	r1, #14
   17856:	1d20      	adds	r0, r4, #4
   17858:	f00b f8b2 	bl	229c0 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1785c:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   17860:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   17864:	b933      	cbnz	r3, 17874 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17866:	7a30      	ldrb	r0, [r6, #8]
   17868:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1786c:	f000 fcf0 	bl	18250 <bt_keys_get_addr>
   17870:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
	if (!conn->le.keys ||
   17874:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   17878:	2b00      	cmp	r3, #0
   1787a:	d0d9      	beq.n	17830 <smp_public_key+0x30>
   1787c:	89da      	ldrh	r2, [r3, #14]
   1787e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   17882:	2a00      	cmp	r2, #0
   17884:	d0d4      	beq.n	17830 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   17886:	7b5b      	ldrb	r3, [r3, #13]
   17888:	0799      	lsls	r1, r3, #30
   1788a:	d4d1      	bmi.n	17830 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1788c:	2003      	movs	r0, #3
}
   1788e:	b003      	add	sp, #12
   17890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   17892:	2000      	movs	r0, #0
   17894:	e7fb      	b.n	1788e <smp_public_key+0x8e>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   17896:	4b43      	ldr	r3, [pc, #268]	; (179a4 <smp_public_key+0x1a4>)
   17898:	2220      	movs	r2, #32
   1789a:	6819      	ldr	r1, [r3, #0]
   1789c:	4638      	mov	r0, r7
   1789e:	f008 fb05 	bl	1feac <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   178a2:	2800      	cmp	r0, #0
   178a4:	d1ce      	bne.n	17844 <smp_public_key+0x44>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   178a6:	2008      	movs	r0, #8
   178a8:	e7f1      	b.n	1788e <smp_public_key+0x8e>
			atomic_set_bit(smp->allowed_cmds,
   178aa:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   178ac:	4620      	mov	r0, r4
   178ae:	f00b f887 	bl	229c0 <atomic_set_bit>
			break;
   178b2:	e02e      	b.n	17912 <smp_public_key+0x112>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178b4:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   178b6:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178ba:	f7ff fd45 	bl	17348 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   178be:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178c0:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   178c2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   178c6:	f002 fc8d 	bl	1a1e4 <bt_rand>
   178ca:	2800      	cmp	r0, #0
   178cc:	d1eb      	bne.n	178a6 <smp_public_key+0xa6>
		smp->passkey %= 1000000;
   178ce:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   178d2:	4a35      	ldr	r2, [pc, #212]	; (179a8 <smp_public_key+0x1a8>)
   178d4:	fbb3 f1f2 	udiv	r1, r3, r2
   178d8:	fb02 3311 	mls	r3, r2, r1, r3
   178dc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   178e0:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   178e4:	b155      	cbz	r5, 178fc <smp_public_key+0xfc>
   178e6:	682b      	ldr	r3, [r5, #0]
   178e8:	b143      	cbz	r3, 178fc <smp_public_key+0xfc>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   178ea:	210b      	movs	r1, #11
   178ec:	4630      	mov	r0, r6
   178ee:	f00b f867 	bl	229c0 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   178f2:	682b      	ldr	r3, [r5, #0]
   178f4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   178f8:	4638      	mov	r0, r7
   178fa:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   178fc:	2103      	movs	r1, #3
   178fe:	4620      	mov	r0, r4
   17900:	f00b f85e 	bl	229c0 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   17904:	210e      	movs	r1, #14
   17906:	f00b f85b 	bl	229c0 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1790a:	f7ff ff3b 	bl	17784 <smp_send_pairing_confirm>
			if (err) {
   1790e:	2800      	cmp	r0, #0
   17910:	d1bd      	bne.n	1788e <smp_public_key+0x8e>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   17912:	4630      	mov	r0, r6
   17914:	2107      	movs	r1, #7
   17916:	f00b f853 	bl	229c0 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1791a:	2008      	movs	r0, #8
   1791c:	f7ff fd06 	bl	1732c <smp_find>
   17920:	2800      	cmp	r0, #0
   17922:	d1b6      	bne.n	17892 <smp_public_key+0x92>
		return smp_dhkey_generate(smp);
   17924:	4620      	mov	r0, r4
}
   17926:	b003      	add	sp, #12
   17928:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1792c:	f7ff bd50 	b.w	173d0 <smp_dhkey_generate>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17930:	210a      	movs	r1, #10
   17932:	4630      	mov	r0, r6
   17934:	f00b f844 	bl	229c0 <atomic_set_bit>
			smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   17938:	686b      	ldr	r3, [r5, #4]
   1793a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1793e:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   17940:	210e      	movs	r1, #14
   17942:	e7b3      	b.n	178ac <smp_public_key+0xac>
			if (bt_rand(smp->prnd, 16)) {
   17944:	2110      	movs	r1, #16
   17946:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1794a:	f002 fc4b 	bl	1a1e4 <bt_rand>
   1794e:	2800      	cmp	r0, #0
   17950:	d1a9      	bne.n	178a6 <smp_public_key+0xa6>
			if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   17952:	b32d      	cbz	r5, 179a0 <smp_public_key+0x1a0>
   17954:	68eb      	ldr	r3, [r5, #12]
   17956:	b31b      	cbz	r3, 179a0 <smp_public_key+0x1a0>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   17958:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
				struct bt_conn_oob_info info = {
   1795c:	4b13      	ldr	r3, [pc, #76]	; (179ac <smp_public_key+0x1ac>)
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1795e:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
   17960:	881b      	ldrh	r3, [r3, #0]
   17962:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17966:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17968:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1796a:	b9b9      	cbnz	r1, 1799c <smp_public_key+0x19c>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1796c:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1796e:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   17972:	d411      	bmi.n	17998 <smp_public_key+0x198>
	int oob_config = BT_CONN_OOB_NO_DATA;
   17974:	2b00      	cmp	r3, #0
   17976:	bf08      	it	eq
   17978:	2003      	moveq	r0, #3
				smp->oobd_local = NULL;
   1797a:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
   1797c:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
   17980:	f88d 0005 	strb.w	r0, [sp, #5]
				atomic_set_bit(smp->flags,
   17984:	210c      	movs	r1, #12
   17986:	4630      	mov	r0, r6
   17988:	f00b f81a 	bl	229c0 <atomic_set_bit>
				smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1798c:	68eb      	ldr	r3, [r5, #12]
   1798e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17992:	a901      	add	r1, sp, #4
   17994:	4798      	blx	r3
			break;
   17996:	e7bc      	b.n	17912 <smp_public_key+0x112>
		if (rsp_oob_present) {
   17998:	1c58      	adds	r0, r3, #1
   1799a:	e7ee      	b.n	1797a <smp_public_key+0x17a>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1799c:	2003      	movs	r0, #3
   1799e:	e7ec      	b.n	1797a <smp_public_key+0x17a>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   179a0:	2002      	movs	r0, #2
   179a2:	e774      	b.n	1788e <smp_public_key+0x8e>
   179a4:	20002cd4 	.word	0x20002cd4
   179a8:	000f4240 	.word	0x000f4240
   179ac:	00024d60 	.word	0x00024d60

000179b0 <sc_send_public_key>:
{
   179b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   179b2:	210c      	movs	r1, #12
{
   179b4:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   179b6:	f00b f8bc 	bl	22b32 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   179ba:	4604      	mov	r4, r0
   179bc:	b1b0      	cbz	r0, 179ec <sc_send_public_key+0x3c>
   179be:	2140      	movs	r1, #64	; 0x40
   179c0:	300c      	adds	r0, #12
   179c2:	f00b fea8 	bl	23716 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   179c6:	4f0a      	ldr	r7, [pc, #40]	; (179f0 <sc_send_public_key+0x40>)
   179c8:	2220      	movs	r2, #32
   179ca:	6839      	ldr	r1, [r7, #0]
   179cc:	4606      	mov	r6, r0
   179ce:	f008 fa94 	bl	1fefa <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   179d2:	6839      	ldr	r1, [r7, #0]
   179d4:	2220      	movs	r2, #32
   179d6:	4411      	add	r1, r2
   179d8:	18b0      	adds	r0, r6, r2
   179da:	f008 fa8e 	bl	1fefa <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   179de:	4628      	mov	r0, r5
   179e0:	2200      	movs	r2, #0
   179e2:	4621      	mov	r1, r4
   179e4:	f00a ffb7 	bl	22956 <smp_send.constprop.0>
	return 0;
   179e8:	2000      	movs	r0, #0
}
   179ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   179ec:	2008      	movs	r0, #8
   179ee:	e7fc      	b.n	179ea <sc_send_public_key+0x3a>
   179f0:	20002cd4 	.word	0x20002cd4

000179f4 <bt_smp_connected>:
{
   179f4:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   179f6:	490b      	ldr	r1, [pc, #44]	; (17a24 <bt_smp_connected+0x30>)
{
   179f8:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   179fa:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   179fe:	3034      	adds	r0, #52	; 0x34
   17a00:	f00c fc4a 	bl	24298 <k_work_init_delayable>
	smp_reset(smp);
   17a04:	4628      	mov	r0, r5
   17a06:	f00b f94d 	bl	22ca4 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17a0a:	f3bf 8f5b 	dmb	ish
   17a0e:	4b06      	ldr	r3, [pc, #24]	; (17a28 <bt_smp_connected+0x34>)
   17a10:	3464      	adds	r4, #100	; 0x64
   17a12:	e854 2f00 	ldrex	r2, [r4]
   17a16:	e844 3100 	strex	r1, r3, [r4]
   17a1a:	2900      	cmp	r1, #0
   17a1c:	d1f9      	bne.n	17a12 <bt_smp_connected+0x1e>
   17a1e:	f3bf 8f5b 	dmb	ish
}
   17a22:	bd38      	pop	{r3, r4, r5, pc}
   17a24:	00023367 	.word	0x00023367
   17a28:	20001b08 	.word	0x20001b08

00017a2c <smp_pairing_rsp>:
{
   17a2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17a30:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   17a32:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
{
   17a36:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17a38:	f7ff fc86 	bl	17348 <latch_auth_cb>
	struct bt_smp_pairing *rsp = (void *)buf->data;
   17a3c:	f8d5 800c 	ldr.w	r8, [r5, #12]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   17a40:	f898 3003 	ldrb.w	r3, [r8, #3]
   17a44:	3b07      	subs	r3, #7
   17a46:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17a48:	4606      	mov	r6, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   17a4a:	d903      	bls.n	17a54 <smp_pairing_rsp+0x28>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   17a4c:	2006      	movs	r0, #6
}
   17a4e:	b002      	add	sp, #8
   17a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   17a54:	f898 2004 	ldrb.w	r2, [r8, #4]
   17a58:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17a5c:	4013      	ands	r3, r2
   17a5e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   17a62:	f898 2005 	ldrb.w	r2, [r8, #5]
   17a66:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   17a6a:	4013      	ands	r3, r2
   17a6c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   17a70:	2302      	movs	r3, #2
   17a72:	7423      	strb	r3, [r4, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   17a74:	2206      	movs	r2, #6
   17a76:	4641      	mov	r1, r8
   17a78:	f104 0011 	add.w	r0, r4, #17
   17a7c:	f008 fa3d 	bl	1fefa <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   17a80:	f898 3002 	ldrb.w	r3, [r8, #2]
   17a84:	071b      	lsls	r3, r3, #28
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   17a86:	f104 0504 	add.w	r5, r4, #4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   17a8a:	d506      	bpl.n	17a9a <smp_pairing_rsp+0x6e>
   17a8c:	7b23      	ldrb	r3, [r4, #12]
   17a8e:	0718      	lsls	r0, r3, #28
   17a90:	d503      	bpl.n	17a9a <smp_pairing_rsp+0x6e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   17a92:	2105      	movs	r1, #5
   17a94:	4628      	mov	r0, r5
   17a96:	f00a ff93 	bl	229c0 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   17a9a:	f898 3002 	ldrb.w	r3, [r8, #2]
   17a9e:	0699      	lsls	r1, r3, #26
   17aa0:	d506      	bpl.n	17ab0 <smp_pairing_rsp+0x84>
   17aa2:	7b23      	ldrb	r3, [r4, #12]
   17aa4:	069a      	lsls	r2, r3, #26
   17aa6:	d503      	bpl.n	17ab0 <smp_pairing_rsp+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   17aa8:	2114      	movs	r1, #20
   17aaa:	4628      	mov	r0, r5
   17aac:	f00a ff88 	bl	229c0 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   17ab0:	f898 3002 	ldrb.w	r3, [r8, #2]
   17ab4:	07db      	lsls	r3, r3, #31
   17ab6:	d536      	bpl.n	17b26 <smp_pairing_rsp+0xfa>
   17ab8:	7b23      	ldrb	r3, [r4, #12]
   17aba:	07d8      	lsls	r0, r3, #31
   17abc:	d533      	bpl.n	17b26 <smp_pairing_rsp+0xfa>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   17abe:	210d      	movs	r1, #13
   17ac0:	4628      	mov	r0, r5
   17ac2:	f00a ff7d 	bl	229c0 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17ac6:	2105      	movs	r1, #5
   17ac8:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   17aca:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17ace:	f00a ff09 	bl	228e4 <atomic_test_bit>
   17ad2:	bb60      	cbnz	r0, 17b2e <smp_pairing_rsp+0x102>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17ad4:	f1b8 0f04 	cmp.w	r8, #4
   17ad8:	d849      	bhi.n	17b6e <smp_pairing_rsp+0x142>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   17ada:	7ae3      	ldrb	r3, [r4, #11]
   17adc:	7ca2      	ldrb	r2, [r4, #18]
   17ade:	4013      	ands	r3, r2
   17ae0:	07d9      	lsls	r1, r3, #31
   17ae2:	d442      	bmi.n	17b6a <smp_pairing_rsp+0x13e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   17ae4:	7b21      	ldrb	r1, [r4, #12]
   17ae6:	7ce3      	ldrb	r3, [r4, #19]
   17ae8:	4319      	orrs	r1, r3
   17aea:	f011 0104 	ands.w	r1, r1, #4
   17aee:	d011      	beq.n	17b14 <smp_pairing_rsp+0xe8>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   17af0:	4620      	mov	r0, r4
   17af2:	f7ff fc47 	bl	17384 <get_io_capa>
   17af6:	4b94      	ldr	r3, [pc, #592]	; (17d48 <smp_pairing_rsp+0x31c>)
   17af8:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   17afc:	4498      	add	r8, r3
   17afe:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   17b02:	2904      	cmp	r1, #4
   17b04:	d106      	bne.n	17b14 <smp_pairing_rsp+0xe8>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   17b06:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   17b0a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   17b0c:	2b00      	cmp	r3, #0
   17b0e:	bf14      	ite	ne
   17b10:	2101      	movne	r1, #1
   17b12:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, rsp->io_capability);
   17b14:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   17b16:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   17b1a:	4620      	mov	r0, r4
   17b1c:	f00a feeb 	bl	228f6 <update_keys_check>
   17b20:	bb38      	cbnz	r0, 17b72 <smp_pairing_rsp+0x146>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   17b22:	2003      	movs	r0, #3
   17b24:	e793      	b.n	17a4e <smp_pairing_rsp+0x22>
		smp->local_dist = 0;
   17b26:	2300      	movs	r3, #0
   17b28:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
   17b2c:	e7cb      	b.n	17ac6 <smp_pairing_rsp+0x9a>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   17b2e:	7b23      	ldrb	r3, [r4, #12]
   17b30:	7ce0      	ldrb	r0, [r4, #19]
   17b32:	ea03 0200 	and.w	r2, r3, r0
   17b36:	0712      	lsls	r2, r2, #28
   17b38:	d506      	bpl.n	17b48 <smp_pairing_rsp+0x11c>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   17b3a:	7ae2      	ldrb	r2, [r4, #11]
   17b3c:	f894 c012 	ldrb.w	ip, [r4, #18]
   17b40:	ea42 020c 	orr.w	r2, r2, ip
   17b44:	07d2      	lsls	r2, r2, #31
   17b46:	d4e5      	bmi.n	17b14 <smp_pairing_rsp+0xe8>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17b48:	f1b8 0f04 	cmp.w	r8, #4
   17b4c:	d80f      	bhi.n	17b6e <smp_pairing_rsp+0x142>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   17b4e:	ea43 0100 	orr.w	r1, r3, r0
   17b52:	f011 0104 	ands.w	r1, r1, #4
   17b56:	d0dd      	beq.n	17b14 <smp_pairing_rsp+0xe8>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   17b58:	4620      	mov	r0, r4
   17b5a:	f7ff fc13 	bl	17384 <get_io_capa>
   17b5e:	4b7b      	ldr	r3, [pc, #492]	; (17d4c <smp_pairing_rsp+0x320>)
   17b60:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   17b64:	4443      	add	r3, r8
   17b66:	5c19      	ldrb	r1, [r3, r0]
   17b68:	e7d4      	b.n	17b14 <smp_pairing_rsp+0xe8>
		return LEGACY_OOB;
   17b6a:	2106      	movs	r1, #6
   17b6c:	e7d2      	b.n	17b14 <smp_pairing_rsp+0xe8>
		return JUST_WORKS;
   17b6e:	2100      	movs	r1, #0
   17b70:	e7d0      	b.n	17b14 <smp_pairing_rsp+0xe8>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   17b72:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   17b76:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   17b78:	2b03      	cmp	r3, #3
   17b7a:	d015      	beq.n	17ba8 <smp_pairing_rsp+0x17c>
   17b7c:	d804      	bhi.n	17b88 <smp_pairing_rsp+0x15c>
   17b7e:	3b01      	subs	r3, #1
   17b80:	2b01      	cmp	r3, #1
   17b82:	d914      	bls.n	17bae <smp_pairing_rsp+0x182>
		return BT_SMP_ERR_UNSPECIFIED;
   17b84:	2008      	movs	r0, #8
   17b86:	e762      	b.n	17a4e <smp_pairing_rsp+0x22>
	switch (sec) {
   17b88:	2b04      	cmp	r3, #4
   17b8a:	d1fb      	bne.n	17b84 <smp_pairing_rsp+0x158>
	return MIN(req->max_key_size, rsp->max_key_size);
   17b8c:	7d23      	ldrb	r3, [r4, #20]
   17b8e:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   17b90:	4293      	cmp	r3, r2
   17b92:	bf28      	it	cs
   17b94:	4613      	movcs	r3, r2
   17b96:	2b10      	cmp	r3, #16
   17b98:	f47f af58 	bne.w	17a4c <smp_pairing_rsp+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17b9c:	2105      	movs	r1, #5
   17b9e:	4628      	mov	r0, r5
   17ba0:	f00a fea0 	bl	228e4 <atomic_test_bit>
   17ba4:	2800      	cmp	r0, #0
   17ba6:	d0bc      	beq.n	17b22 <smp_pairing_rsp+0xf6>
		if (smp->method == JUST_WORKS) {
   17ba8:	7a23      	ldrb	r3, [r4, #8]
   17baa:	2b00      	cmp	r3, #0
   17bac:	d0b9      	beq.n	17b22 <smp_pairing_rsp+0xf6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17bae:	2105      	movs	r1, #5
   17bb0:	4628      	mov	r0, r5
   17bb2:	f00a fe97 	bl	228e4 <atomic_test_bit>
   17bb6:	2800      	cmp	r0, #0
   17bb8:	f040 809a 	bne.w	17cf0 <smp_pairing_rsp+0x2c4>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17bbc:	4620      	mov	r0, r4
   17bbe:	f7ff fbc3 	bl	17348 <latch_auth_cb>
   17bc2:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17bc4:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   17bc6:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17bca:	f7ff fbbd 	bl	17348 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   17bce:	f108 0188 	add.w	r1, r8, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17bd2:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   17bd4:	f898 0008 	ldrb.w	r0, [r8, #8]
   17bd8:	f000 fbd6 	bl	18388 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   17bdc:	7a23      	ldrb	r3, [r4, #8]
   17bde:	b120      	cbz	r0, 17bea <smp_pairing_rsp+0x1be>
   17be0:	7b42      	ldrb	r2, [r0, #13]
   17be2:	07d2      	lsls	r2, r2, #31
   17be4:	d501      	bpl.n	17bea <smp_pairing_rsp+0x1be>
   17be6:	2b00      	cmp	r3, #0
   17be8:	d0cc      	beq.n	17b84 <smp_pairing_rsp+0x158>
	switch (smp->method) {
   17bea:	2b06      	cmp	r3, #6
   17bec:	d8ca      	bhi.n	17b84 <smp_pairing_rsp+0x158>
   17bee:	a201      	add	r2, pc, #4	; (adr r2, 17bf4 <smp_pairing_rsp+0x1c8>)
   17bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17bf4:	00017c39 	.word	0x00017c39
   17bf8:	00017cb1 	.word	0x00017cb1
   17bfc:	00017c63 	.word	0x00017c63
   17c00:	00017b85 	.word	0x00017b85
   17c04:	00017b85 	.word	0x00017b85
   17c08:	00017b85 	.word	0x00017b85
   17c0c:	00017c11 	.word	0x00017c11
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   17c10:	2e00      	cmp	r6, #0
   17c12:	d055      	beq.n	17cc0 <smp_pairing_rsp+0x294>
   17c14:	68f3      	ldr	r3, [r6, #12]
   17c16:	2b00      	cmp	r3, #0
   17c18:	d052      	beq.n	17cc0 <smp_pairing_rsp+0x294>
			struct bt_conn_oob_info info = {
   17c1a:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17c1c:	210a      	movs	r1, #10
   17c1e:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   17c20:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17c24:	f00a fecc 	bl	229c0 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   17c28:	68f3      	ldr	r3, [r6, #12]
   17c2a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17c2e:	a901      	add	r1, sp, #4
   17c30:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17c32:	7a23      	ldrb	r3, [r4, #8]
   17c34:	2b00      	cmp	r3, #0
   17c36:	d145      	bne.n	17cc4 <smp_pairing_rsp+0x298>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17c38:	210f      	movs	r1, #15
   17c3a:	4628      	mov	r0, r5
   17c3c:	f00a fe52 	bl	228e4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17c40:	2800      	cmp	r0, #0
   17c42:	d03f      	beq.n	17cc4 <smp_pairing_rsp+0x298>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17c44:	2f00      	cmp	r7, #0
   17c46:	d03d      	beq.n	17cc4 <smp_pairing_rsp+0x298>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   17c48:	697b      	ldr	r3, [r7, #20]
   17c4a:	2b00      	cmp	r3, #0
   17c4c:	d03a      	beq.n	17cc4 <smp_pairing_rsp+0x298>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17c4e:	4628      	mov	r0, r5
   17c50:	210a      	movs	r1, #10
   17c52:	f00a feb5 	bl	229c0 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   17c56:	697b      	ldr	r3, [r7, #20]
   17c58:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   17c5c:	4798      	blx	r3
		return 0;
   17c5e:	2000      	movs	r0, #0
   17c60:	e6f5      	b.n	17a4e <smp_pairing_rsp+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   17c62:	2104      	movs	r1, #4
   17c64:	eb0d 0001 	add.w	r0, sp, r1
   17c68:	f002 fabc 	bl	1a1e4 <bt_rand>
   17c6c:	2800      	cmp	r0, #0
   17c6e:	d189      	bne.n	17b84 <smp_pairing_rsp+0x158>
			passkey %= 1000000;
   17c70:	9b01      	ldr	r3, [sp, #4]
   17c72:	4a37      	ldr	r2, [pc, #220]	; (17d50 <smp_pairing_rsp+0x324>)
   17c74:	fbb3 f1f2 	udiv	r1, r3, r2
   17c78:	fb02 3311 	mls	r3, r2, r1, r3
   17c7c:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   17c7e:	b14e      	cbz	r6, 17c94 <smp_pairing_rsp+0x268>
   17c80:	6833      	ldr	r3, [r6, #0]
   17c82:	b13b      	cbz	r3, 17c94 <smp_pairing_rsp+0x268>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   17c84:	210b      	movs	r1, #11
   17c86:	4628      	mov	r0, r5
   17c88:	f00a fe9a 	bl	229c0 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   17c8c:	6833      	ldr	r3, [r6, #0]
   17c8e:	9901      	ldr	r1, [sp, #4]
   17c90:	4640      	mov	r0, r8
   17c92:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   17c94:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   17c96:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   17c9a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   17c9e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   17ca0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   17ca4:	0a1b      	lsrs	r3, r3, #8
   17ca6:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   17caa:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   17cae:	e7c0      	b.n	17c32 <smp_pairing_rsp+0x206>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17cb0:	4628      	mov	r0, r5
   17cb2:	210a      	movs	r1, #10
   17cb4:	f00a fe84 	bl	229c0 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   17cb8:	6873      	ldr	r3, [r6, #4]
   17cba:	4640      	mov	r0, r8
   17cbc:	4798      	blx	r3
	if (ret) {
   17cbe:	e7b8      	b.n	17c32 <smp_pairing_rsp+0x206>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   17cc0:	2002      	movs	r0, #2
   17cc2:	e6c4      	b.n	17a4e <smp_pairing_rsp+0x22>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   17cc4:	210a      	movs	r1, #10
   17cc6:	4628      	mov	r0, r5
   17cc8:	f00a fe0c 	bl	228e4 <atomic_test_bit>
   17ccc:	b958      	cbnz	r0, 17ce6 <smp_pairing_rsp+0x2ba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   17cce:	4620      	mov	r0, r4
   17cd0:	2103      	movs	r1, #3
   17cd2:	f00a fe75 	bl	229c0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   17cd6:	210e      	movs	r1, #14
   17cd8:	f00a fe72 	bl	229c0 <atomic_set_bit>
}
   17cdc:	b002      	add	sp, #8
   17cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   17ce2:	f00b b861 	b.w	22da8 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   17ce6:	2100      	movs	r1, #0
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   17ce8:	4628      	mov	r0, r5
   17cea:	f00a fe69 	bl	229c0 <atomic_set_bit>
		return 0;
   17cee:	e7b6      	b.n	17c5e <smp_pairing_rsp+0x232>
	smp->local_dist &= SEND_KEYS_SC;
   17cf0:	2300      	movs	r3, #0
   17cf2:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   17cf6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   17cfa:	f003 0302 	and.w	r3, r3, #2
   17cfe:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   17d02:	7a23      	ldrb	r3, [r4, #8]
   17d04:	b973      	cbnz	r3, 17d24 <smp_pairing_rsp+0x2f8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17d06:	210f      	movs	r1, #15
   17d08:	4628      	mov	r0, r5
   17d0a:	f00a fdeb 	bl	228e4 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17d0e:	b148      	cbz	r0, 17d24 <smp_pairing_rsp+0x2f8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17d10:	b146      	cbz	r6, 17d24 <smp_pairing_rsp+0x2f8>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   17d12:	6973      	ldr	r3, [r6, #20]
   17d14:	b133      	cbz	r3, 17d24 <smp_pairing_rsp+0x2f8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17d16:	4628      	mov	r0, r5
   17d18:	210a      	movs	r1, #10
   17d1a:	f00a fe51 	bl	229c0 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   17d1e:	6973      	ldr	r3, [r6, #20]
   17d20:	4638      	mov	r0, r7
   17d22:	e79b      	b.n	17c5c <smp_pairing_rsp+0x230>
	if (!sc_public_key) {
   17d24:	4b0b      	ldr	r3, [pc, #44]	; (17d54 <smp_pairing_rsp+0x328>)
   17d26:	681b      	ldr	r3, [r3, #0]
   17d28:	b90b      	cbnz	r3, 17d2e <smp_pairing_rsp+0x302>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   17d2a:	2106      	movs	r1, #6
   17d2c:	e7dc      	b.n	17ce8 <smp_pairing_rsp+0x2bc>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   17d2e:	4620      	mov	r0, r4
   17d30:	210c      	movs	r1, #12
   17d32:	f00a fe45 	bl	229c0 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   17d36:	210b      	movs	r1, #11
   17d38:	f00a fdfe 	bl	22938 <atomic_clear_bit>
}
   17d3c:	b002      	add	sp, #8
   17d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   17d42:	f7ff be35 	b.w	179b0 <sc_send_public_key>
   17d46:	bf00      	nop
   17d48:	00025c66 	.word	0x00025c66
   17d4c:	00025c4d 	.word	0x00025c4d
   17d50:	000f4240 	.word	0x000f4240
   17d54:	20002cd4 	.word	0x20002cd4

00017d58 <smp_pairing_random>:
{
   17d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d5c:	b08d      	sub	sp, #52	; 0x34
   17d5e:	4604      	mov	r4, r0
   17d60:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17d62:	f7ff faf1 	bl	17348 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   17d66:	f104 0837 	add.w	r8, r4, #55	; 0x37
   17d6a:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17d6c:	4681      	mov	r9, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   17d6e:	2210      	movs	r2, #16
   17d70:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17d72:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   17d74:	f008 f8c1 	bl	1fefa <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17d78:	2105      	movs	r1, #5
   17d7a:	4630      	mov	r0, r6
   17d7c:	f00a fdb2 	bl	228e4 <atomic_test_bit>
   17d80:	f8d4 a0ec 	ldr.w	sl, [r4, #236]	; 0xec
   17d84:	2800      	cmp	r0, #0
   17d86:	d152      	bne.n	17e2e <smp_pairing_random+0xd6>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   17d88:	f10a 0396 	add.w	r3, sl, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17d8c:	f104 0947 	add.w	r9, r4, #71	; 0x47
   17d90:	af08      	add	r7, sp, #32
   17d92:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   17d94:	f10a 038f 	add.w	r3, sl, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17d98:	9300      	str	r3, [sp, #0]
   17d9a:	9702      	str	r7, [sp, #8]
   17d9c:	f104 0310 	add.w	r3, r4, #16
   17da0:	f104 0209 	add.w	r2, r4, #9
   17da4:	4641      	mov	r1, r8
   17da6:	4648      	mov	r0, r9
   17da8:	f00a ffa4 	bl	22cf4 <smp_c1>
	if (err) {
   17dac:	b9d8      	cbnz	r0, 17de6 <smp_pairing_random+0x8e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   17dae:	2210      	movs	r2, #16
   17db0:	4639      	mov	r1, r7
   17db2:	f104 0017 	add.w	r0, r4, #23
   17db6:	f008 f879 	bl	1feac <memcmp>
   17dba:	2800      	cmp	r0, #0
   17dbc:	d17f      	bne.n	17ebe <smp_pairing_random+0x166>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   17dbe:	f89a 5003 	ldrb.w	r5, [sl, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17dc2:	bb7d      	cbnz	r5, 17e24 <smp_pairing_random+0xcc>
	memcpy(out, r2, 8);
   17dc4:	2208      	movs	r2, #8
   17dc6:	f104 0127 	add.w	r1, r4, #39	; 0x27
   17dca:	4638      	mov	r0, r7
   17dcc:	f008 f895 	bl	1fefa <memcpy>
	memcpy(out + 8, r1, 8);
   17dd0:	2208      	movs	r2, #8
   17dd2:	4641      	mov	r1, r8
   17dd4:	a80a      	add	r0, sp, #40	; 0x28
   17dd6:	f008 f890 	bl	1fefa <memcpy>
	return bt_encrypt_le(k, out, out);
   17dda:	463a      	mov	r2, r7
   17ddc:	4639      	mov	r1, r7
   17dde:	4648      	mov	r0, r9
   17de0:	f00b fef5 	bl	23bce <bt_encrypt_le>
		if (err) {
   17de4:	b108      	cbz	r0, 17dea <smp_pairing_random+0x92>
		return BT_SMP_ERR_UNSPECIFIED;
   17de6:	2508      	movs	r5, #8
   17de8:	e01d      	b.n	17e26 <smp_pairing_random+0xce>
		(void)memset(ediv, 0, sizeof(ediv));
   17dea:	2202      	movs	r2, #2
   17dec:	4629      	mov	r1, r5
   17dee:	a805      	add	r0, sp, #20
   17df0:	f008 f88e 	bl	1ff10 <memset>
		(void)memset(rand, 0, sizeof(rand));
   17df4:	2208      	movs	r2, #8
   17df6:	4629      	mov	r1, r5
   17df8:	a806      	add	r0, sp, #24
   17dfa:	f008 f889 	bl	1ff10 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   17dfe:	7d22      	ldrb	r2, [r4, #20]
   17e00:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   17e02:	429a      	cmp	r2, r3
   17e04:	bf94      	ite	ls
   17e06:	9200      	strls	r2, [sp, #0]
   17e08:	9300      	strhi	r3, [sp, #0]
   17e0a:	a906      	add	r1, sp, #24
   17e0c:	463b      	mov	r3, r7
   17e0e:	aa05      	add	r2, sp, #20
   17e10:	4650      	mov	r0, sl
   17e12:	f008 fe45 	bl	20aa0 <bt_conn_le_start_encryption>
   17e16:	2800      	cmp	r0, #0
   17e18:	d1e5      	bne.n	17de6 <smp_pairing_random+0x8e>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17e1a:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   17e1c:	4630      	mov	r0, r6
   17e1e:	f00a fdcf 	bl	229c0 <atomic_set_bit>
			return 0;
   17e22:	e000      	b.n	17e26 <smp_pairing_random+0xce>
	return 0;
   17e24:	4605      	mov	r5, r0
}
   17e26:	4628      	mov	r0, r5
   17e28:	b00d      	add	sp, #52	; 0x34
   17e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   17e2e:	f89a 5003 	ldrb.w	r5, [sl, #3]
   17e32:	2d00      	cmp	r5, #0
   17e34:	f040 8086 	bne.w	17f44 <smp_pairing_random+0x1ec>
	switch (smp->method) {
   17e38:	7a23      	ldrb	r3, [r4, #8]
   17e3a:	2b05      	cmp	r3, #5
   17e3c:	d8d3      	bhi.n	17de6 <smp_pairing_random+0x8e>
   17e3e:	a201      	add	r2, pc, #4	; (adr r2, 17e44 <smp_pairing_random+0xec>)
   17e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17e44:	00017ec3 	.word	0x00017ec3
   17e48:	00017e81 	.word	0x00017e81
   17e4c:	00017e81 	.word	0x00017e81
   17e50:	00017ec3 	.word	0x00017ec3
   17e54:	00017de7 	.word	0x00017de7
   17e58:	00017f2b 	.word	0x00017f2b
		switch (smp->method) {
   17e5c:	7a23      	ldrb	r3, [r4, #8]
   17e5e:	2b05      	cmp	r3, #5
   17e60:	d8c1      	bhi.n	17de6 <smp_pairing_random+0x8e>
   17e62:	a201      	add	r2, pc, #4	; (adr r2, 17e68 <smp_pairing_random+0x110>)
   17e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17e68:	00017f2b 	.word	0x00017f2b
   17e6c:	00017ef9 	.word	0x00017ef9
   17e70:	00017ef9 	.word	0x00017ef9
   17e74:	00017ec7 	.word	0x00017ec7
   17e78:	00017de7 	.word	0x00017de7
   17e7c:	00017f2b 	.word	0x00017f2b
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17e80:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   17e84:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   17e88:	40d3      	lsrs	r3, r2
   17e8a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   17e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17e92:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 17f48 <smp_pairing_random+0x1f0>
   17e96:	af08      	add	r7, sp, #32
   17e98:	f104 0b57 	add.w	fp, r4, #87	; 0x57
   17e9c:	9700      	str	r7, [sp, #0]
   17e9e:	f8da 1000 	ldr.w	r1, [sl]
   17ea2:	4642      	mov	r2, r8
   17ea4:	4658      	mov	r0, fp
   17ea6:	f00b fb5e 	bl	23566 <bt_crypto_f4>
   17eaa:	2800      	cmp	r0, #0
   17eac:	d19b      	bne.n	17de6 <smp_pairing_random+0x8e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   17eae:	2210      	movs	r2, #16
   17eb0:	4639      	mov	r1, r7
   17eb2:	f104 0017 	add.w	r0, r4, #23
   17eb6:	f007 fff9 	bl	1feac <memcmp>
   17eba:	2800      	cmp	r0, #0
   17ebc:	d0ce      	beq.n	17e5c <smp_pairing_random+0x104>
		return BT_SMP_ERR_CONFIRM_FAILED;
   17ebe:	2504      	movs	r5, #4
   17ec0:	e7b1      	b.n	17e26 <smp_pairing_random+0xce>
	switch (smp->method) {
   17ec2:	2300      	movs	r3, #0
   17ec4:	e7e5      	b.n	17e92 <smp_pairing_random+0x13a>
			if (bt_crypto_g2(sc_public_key, smp->pkey, smp->prnd, smp->rrnd,
   17ec6:	9700      	str	r7, [sp, #0]
   17ec8:	f8da 0000 	ldr.w	r0, [sl]
   17ecc:	4643      	mov	r3, r8
   17ece:	f104 0227 	add.w	r2, r4, #39	; 0x27
   17ed2:	4659      	mov	r1, fp
   17ed4:	f000 fad0 	bl	18478 <bt_crypto_g2>
   17ed8:	2800      	cmp	r0, #0
   17eda:	d184      	bne.n	17de6 <smp_pairing_random+0x8e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17edc:	4630      	mov	r0, r6
   17ede:	210a      	movs	r1, #10
   17ee0:	f00a fd6e 	bl	229c0 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   17ee4:	2109      	movs	r1, #9
   17ee6:	f00a fd6b 	bl	229c0 <atomic_set_bit>
			smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   17eea:	f8d9 3008 	ldr.w	r3, [r9, #8]
   17eee:	9908      	ldr	r1, [sp, #32]
   17ef0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17ef4:	4798      	blx	r3
			return 0;
   17ef6:	e796      	b.n	17e26 <smp_pairing_random+0xce>
			smp->passkey_round++;
   17ef8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17efc:	3301      	adds	r3, #1
   17efe:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   17f00:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   17f02:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   17f06:	d010      	beq.n	17f2a <smp_pairing_random+0x1d2>
			if (bt_rand(smp->prnd, 16)) {
   17f08:	2110      	movs	r1, #16
   17f0a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17f0e:	f002 f969 	bl	1a1e4 <bt_rand>
   17f12:	2800      	cmp	r0, #0
   17f14:	f47f af67 	bne.w	17de6 <smp_pairing_random+0x8e>
			atomic_set_bit(smp->allowed_cmds,
   17f18:	2103      	movs	r1, #3
   17f1a:	4620      	mov	r0, r4
   17f1c:	f00a fd50 	bl	229c0 <atomic_set_bit>
}
   17f20:	b00d      	add	sp, #52	; 0x34
   17f22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return smp_send_pairing_confirm(smp);
   17f26:	f7ff bc2d 	b.w	17784 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   17f2a:	2107      	movs	r1, #7
   17f2c:	4630      	mov	r0, r6
   17f2e:	f00a fcd9 	bl	228e4 <atomic_test_bit>
   17f32:	b108      	cbz	r0, 17f38 <smp_pairing_random+0x1e0>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   17f34:	2109      	movs	r1, #9
   17f36:	e771      	b.n	17e1c <smp_pairing_random+0xc4>
		return compute_and_send_central_dhcheck(smp);
   17f38:	4620      	mov	r0, r4
}
   17f3a:	b00d      	add	sp, #52	; 0x34
   17f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return compute_and_send_central_dhcheck(smp);
   17f40:	f00a be4a 	b.w	22bd8 <compute_and_send_central_dhcheck>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   17f44:	460d      	mov	r5, r1
   17f46:	e76e      	b.n	17e26 <smp_pairing_random+0xce>
   17f48:	20002cd4 	.word	0x20002cd4

00017f4c <smp_pairing_complete>:
{
   17f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f4e:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   17f50:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   17f54:	1d04      	adds	r4, r0, #4
	if (!status) {
   17f56:	bb39      	cbnz	r1, 17fa8 <smp_pairing_complete+0x5c>
	return list->head;
   17f58:	4b38      	ldr	r3, [pc, #224]	; (1803c <smp_pairing_complete+0xf0>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   17f5a:	210d      	movs	r1, #13
   17f5c:	4620      	mov	r0, r4
   17f5e:	f00a fcc1 	bl	228e4 <atomic_test_bit>
   17f62:	681b      	ldr	r3, [r3, #0]
   17f64:	4607      	mov	r7, r0
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   17f66:	b19b      	cbz	r3, 17f90 <smp_pairing_complete+0x44>
	return node->next;
   17f68:	681c      	ldr	r4, [r3, #0]
   17f6a:	b104      	cbz	r4, 17f6e <smp_pairing_complete+0x22>
   17f6c:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   17f6e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   17f72:	b113      	cbz	r3, 17f7a <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   17f74:	4639      	mov	r1, r7
   17f76:	4628      	mov	r0, r5
   17f78:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   17f7a:	b14c      	cbz	r4, 17f90 <smp_pairing_complete+0x44>
   17f7c:	4623      	mov	r3, r4
   17f7e:	68e4      	ldr	r4, [r4, #12]
   17f80:	681b      	ldr	r3, [r3, #0]
   17f82:	b11c      	cbz	r4, 17f8c <smp_pairing_complete+0x40>
   17f84:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   17f86:	2b00      	cmp	r3, #0
   17f88:	d1f4      	bne.n	17f74 <smp_pairing_complete+0x28>
   17f8a:	e7f7      	b.n	17f7c <smp_pairing_complete+0x30>
   17f8c:	2b00      	cmp	r3, #0
   17f8e:	d1f1      	bne.n	17f74 <smp_pairing_complete+0x28>
	smp_reset(smp);
   17f90:	4630      	mov	r0, r6
   17f92:	f00a fe87 	bl	22ca4 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   17f96:	7a6a      	ldrb	r2, [r5, #9]
   17f98:	7aab      	ldrb	r3, [r5, #10]
   17f9a:	429a      	cmp	r2, r3
   17f9c:	d04d      	beq.n	1803a <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   17f9e:	4628      	mov	r0, r5
}
   17fa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   17fa4:	f00a bfbd 	b.w	22f22 <bt_smp_start_security>
	switch (smp_err) {
   17fa8:	3901      	subs	r1, #1
   17faa:	b2c9      	uxtb	r1, r1
   17fac:	290e      	cmp	r1, #14
   17fae:	bf9c      	itt	ls
   17fb0:	4b23      	ldrls	r3, [pc, #140]	; (18040 <smp_pairing_complete+0xf4>)
   17fb2:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   17fb4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
	if (!status) {
   17fb8:	bf88      	it	hi
   17fba:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   17fbc:	b143      	cbz	r3, 17fd0 <smp_pairing_complete+0x84>
   17fbe:	7b1b      	ldrb	r3, [r3, #12]
   17fc0:	bb2b      	cbnz	r3, 1800e <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   17fc2:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   17fc6:	f00b fa8a 	bl	234de <bt_keys_clear>
			conn->le.keys = NULL;
   17fca:	2300      	movs	r3, #0
   17fcc:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   17fd0:	2102      	movs	r1, #2
   17fd2:	4620      	mov	r0, r4
   17fd4:	f00a fc86 	bl	228e4 <atomic_test_bit>
   17fd8:	b940      	cbnz	r0, 17fec <smp_pairing_complete+0xa0>
	switch (err) {
   17fda:	2f07      	cmp	r7, #7
   17fdc:	bf96      	itet	ls
   17fde:	4b19      	ldrls	r3, [pc, #100]	; (18044 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   17fe0:	211f      	movhi	r1, #31
   17fe2:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   17fe4:	463a      	mov	r2, r7
   17fe6:	4628      	mov	r0, r5
   17fe8:	f7fc fea8 	bl	14d3c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   17fec:	2103      	movs	r1, #3
   17fee:	4620      	mov	r0, r4
   17ff0:	f00a fc78 	bl	228e4 <atomic_test_bit>
   17ff4:	2800      	cmp	r0, #0
   17ff6:	d0cb      	beq.n	17f90 <smp_pairing_complete+0x44>
	return list->head;
   17ff8:	4b10      	ldr	r3, [pc, #64]	; (1803c <smp_pairing_complete+0xf0>)
   17ffa:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   17ffc:	2b00      	cmp	r3, #0
   17ffe:	d0c7      	beq.n	17f90 <smp_pairing_complete+0x44>
	return node->next;
   18000:	681c      	ldr	r4, [r3, #0]
   18002:	b104      	cbz	r4, 18006 <smp_pairing_complete+0xba>
   18004:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   18006:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1800a:	b94b      	cbnz	r3, 18020 <smp_pairing_complete+0xd4>
   1800c:	e00b      	b.n	18026 <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1800e:	2102      	movs	r1, #2
   18010:	4620      	mov	r0, r4
   18012:	f00a fc67 	bl	228e4 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   18016:	2800      	cmp	r0, #0
   18018:	d1d3      	bne.n	17fc2 <smp_pairing_complete+0x76>
   1801a:	e7d9      	b.n	17fd0 <smp_pairing_complete+0x84>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1801c:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1801e:	b123      	cbz	r3, 1802a <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   18020:	4639      	mov	r1, r7
   18022:	4628      	mov	r0, r5
   18024:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   18026:	2c00      	cmp	r4, #0
   18028:	d0b2      	beq.n	17f90 <smp_pairing_complete+0x44>
   1802a:	4623      	mov	r3, r4
   1802c:	68e4      	ldr	r4, [r4, #12]
   1802e:	685b      	ldr	r3, [r3, #4]
   18030:	2c00      	cmp	r4, #0
   18032:	d1f3      	bne.n	1801c <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   18034:	2b00      	cmp	r3, #0
   18036:	d1f3      	bne.n	18020 <smp_pairing_complete+0xd4>
   18038:	e7aa      	b.n	17f90 <smp_pairing_complete+0x44>
}
   1803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1803c:	20002bd8 	.word	0x20002bd8
   18040:	00025c3e 	.word	0x00025c3e
   18044:	00025c2d 	.word	0x00025c2d

00018048 <bt_smp_recv>:
{
   18048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1804c:	8a0b      	ldrh	r3, [r1, #16]
{
   1804e:	4604      	mov	r4, r0
   18050:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   18052:	b3b3      	cbz	r3, 180c2 <bt_smp_recv+0x7a>
	return net_buf_simple_pull_mem(&buf->b, len);
   18054:	2101      	movs	r1, #1
   18056:	f106 000c 	add.w	r0, r6, #12
   1805a:	f00b fb8d 	bl	23778 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1805e:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   18062:	3ce8      	subs	r4, #232	; 0xe8
   18064:	4607      	mov	r7, r0
   18066:	2104      	movs	r1, #4
   18068:	4620      	mov	r0, r4
   1806a:	f00a fc3b 	bl	228e4 <atomic_test_bit>
   1806e:	bb40      	cbnz	r0, 180c2 <bt_smp_recv+0x7a>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   18070:	7839      	ldrb	r1, [r7, #0]
   18072:	290e      	cmp	r1, #14
   18074:	d825      	bhi.n	180c2 <bt_smp_recv+0x7a>
	if (!handlers[hdr->code].func) {
   18076:	f8df 8050 	ldr.w	r8, [pc, #80]	; 180c8 <bt_smp_recv+0x80>
   1807a:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1807e:	b923      	cbnz	r3, 1808a <bt_smp_recv+0x42>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   18080:	2107      	movs	r1, #7
		smp_error(smp, err);
   18082:	4628      	mov	r0, r5
   18084:	f00a ffb8 	bl	22ff8 <smp_error>
   18088:	e01b      	b.n	180c2 <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1808a:	4628      	mov	r0, r5
   1808c:	f00a fc82 	bl	22994 <atomic_test_and_clear_bit>
   18090:	b930      	cbnz	r0, 180a0 <bt_smp_recv+0x58>
	return atomic_test_bit(smp->flags, SMP_FLAG_PAIRING);
   18092:	2103      	movs	r1, #3
   18094:	4620      	mov	r0, r4
   18096:	f00a fc25 	bl	228e4 <atomic_test_bit>
		if (is_in_pairing_procedure(smp)) {
   1809a:	b190      	cbz	r0, 180c2 <bt_smp_recv+0x7a>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1809c:	2108      	movs	r1, #8
   1809e:	e7f0      	b.n	18082 <bt_smp_recv+0x3a>
	if (buf->len != handlers[hdr->code].expect_len) {
   180a0:	783b      	ldrb	r3, [r7, #0]
   180a2:	8a31      	ldrh	r1, [r6, #16]
   180a4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   180a8:	7912      	ldrb	r2, [r2, #4]
   180aa:	4291      	cmp	r1, r2
   180ac:	d001      	beq.n	180b2 <bt_smp_recv+0x6a>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   180ae:	210a      	movs	r1, #10
   180b0:	e7e7      	b.n	18082 <bt_smp_recv+0x3a>
	err = handlers[hdr->code].func(smp, buf);
   180b2:	4631      	mov	r1, r6
   180b4:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   180b8:	4628      	mov	r0, r5
   180ba:	4798      	blx	r3
	if (err) {
   180bc:	4601      	mov	r1, r0
   180be:	2800      	cmp	r0, #0
   180c0:	d1df      	bne.n	18082 <bt_smp_recv+0x3a>
}
   180c2:	2000      	movs	r0, #0
   180c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180c8:	00025214 	.word	0x00025214

000180cc <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   180cc:	4b14      	ldr	r3, [pc, #80]	; (18120 <bt_smp_pkey_ready+0x54>)
{
   180ce:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   180d0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   180d2:	b318      	cbz	r0, 1811c <bt_smp_pkey_ready+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   180d4:	4c13      	ldr	r4, [pc, #76]	; (18124 <bt_smp_pkey_ready+0x58>)
	z_impl_k_sem_give(sem);
   180d6:	4814      	ldr	r0, [pc, #80]	; (18128 <bt_smp_pkey_ready+0x5c>)
   180d8:	f003 fa0e 	bl	1b4f8 <z_impl_k_sem_give>
   180dc:	f3bf 8f5b 	dmb	ish
   180e0:	6823      	ldr	r3, [r4, #0]
   180e2:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   180e6:	065b      	lsls	r3, r3, #25
   180e8:	d518      	bpl.n	1811c <bt_smp_pkey_ready+0x50>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   180ea:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   180ee:	78db      	ldrb	r3, [r3, #3]
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   180f0:	3c04      	subs	r4, #4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   180f2:	b99b      	cbnz	r3, 1811c <bt_smp_pkey_ready+0x50>
			err = sc_send_public_key(smp);
   180f4:	4620      	mov	r0, r4
   180f6:	f7ff fc5b 	bl	179b0 <sc_send_public_key>
			if (err) {
   180fa:	4601      	mov	r1, r0
   180fc:	b110      	cbz	r0, 18104 <bt_smp_pkey_ready+0x38>
				smp_error(smp, err);
   180fe:	4620      	mov	r0, r4
   18100:	f00a ff7a 	bl	22ff8 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18104:	f3bf 8f5b 	dmb	ish
   18108:	e854 3f00 	ldrex	r3, [r4]
   1810c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   18110:	e844 3200 	strex	r2, r3, [r4]
   18114:	2a00      	cmp	r2, #0
   18116:	d1f7      	bne.n	18108 <bt_smp_pkey_ready+0x3c>
   18118:	f3bf 8f5b 	dmb	ish
}
   1811c:	bd10      	pop	{r4, pc}
   1811e:	bf00      	nop
   18120:	20002cd4 	.word	0x20002cd4
   18124:	20001b0c 	.word	0x20001b0c
   18128:	20000830 	.word	0x20000830

0001812c <bt_smp_encrypt_change>:
{
   1812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   18130:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18132:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   18136:	4604      	mov	r4, r0
   18138:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1813a:	4630      	mov	r0, r6
   1813c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1813e:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18142:	f00a fc27 	bl	22994 <atomic_test_and_clear_bit>
   18146:	2800      	cmp	r0, #0
   18148:	d05f      	beq.n	1820a <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   1814a:	b1cf      	cbz	r7, 18180 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1814c:	2103      	movs	r1, #3
   1814e:	4630      	mov	r0, r6
   18150:	f00a fbc8 	bl	228e4 <atomic_test_bit>
   18154:	2800      	cmp	r0, #0
   18156:	d058      	beq.n	1820a <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   18158:	4638      	mov	r0, r7
   1815a:	f7fb fa27 	bl	135ac <bt_security_err_get>
	switch (auth_err) {
   1815e:	3801      	subs	r0, #1
   18160:	b2c0      	uxtb	r0, r0
   18162:	2808      	cmp	r0, #8
   18164:	bf9a      	itte	ls
   18166:	4b2e      	ldrls	r3, [pc, #184]	; (18220 <bt_smp_encrypt_change+0xf4>)
   18168:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1816a:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1816c:	2102      	movs	r1, #2
   1816e:	4630      	mov	r0, r6
   18170:	f00a fc26 	bl	229c0 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   18174:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   18176:	4628      	mov	r0, r5
}
   18178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   1817c:	f7ff bee6 	b.w	17f4c <smp_pairing_complete>
	if (!conn->encrypt) {
   18180:	f898 300b 	ldrb.w	r3, [r8, #11]
   18184:	2b00      	cmp	r3, #0
   18186:	d040      	beq.n	1820a <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18188:	2103      	movs	r1, #3
   1818a:	4630      	mov	r0, r6
   1818c:	f00a fbaa 	bl	228e4 <atomic_test_bit>
   18190:	b920      	cbnz	r0, 1819c <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   18192:	4628      	mov	r0, r5
}
   18194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   18198:	f00a bd84 	b.w	22ca4 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1819c:	2105      	movs	r1, #5
   1819e:	4630      	mov	r0, r6
   181a0:	f00a fba0 	bl	228e4 <atomic_test_bit>
   181a4:	b1b8      	cbz	r0, 181d6 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   181a6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   181aa:	071f      	lsls	r7, r3, #28
   181ac:	d507      	bpl.n	181be <bt_smp_encrypt_change+0x92>
   181ae:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   181b2:	0718      	lsls	r0, r3, #28
   181b4:	d503      	bpl.n	181be <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   181b6:	2111      	movs	r1, #17
   181b8:	4630      	mov	r0, r6
   181ba:	f00a fc01 	bl	229c0 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   181be:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   181c2:	f023 0308 	bic.w	r3, r3, #8
   181c6:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   181ca:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   181ce:	f023 0308 	bic.w	r3, r3, #8
   181d2:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   181d6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   181da:	07d9      	lsls	r1, r3, #31
   181dc:	d517      	bpl.n	1820e <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   181de:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   181e0:	4628      	mov	r0, r5
   181e2:	f00a fbed 	bl	229c0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   181e6:	2102      	movs	r1, #2
   181e8:	4630      	mov	r0, r6
   181ea:	f00a fbe9 	bl	229c0 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   181ee:	f898 3003 	ldrb.w	r3, [r8, #3]
   181f2:	b913      	cbnz	r3, 181fa <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   181f4:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   181f8:	b93b      	cbnz	r3, 1820a <bt_smp_encrypt_change+0xde>
	if (bt_smp_distribute_keys(smp)) {
   181fa:	4628      	mov	r0, r5
   181fc:	f7ff f8fe 	bl	173fc <bt_smp_distribute_keys>
   18200:	b918      	cbnz	r0, 1820a <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   18202:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   18206:	2900      	cmp	r1, #0
   18208:	d0b5      	beq.n	18176 <bt_smp_encrypt_change+0x4a>
}
   1820a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1820e:	079a      	lsls	r2, r3, #30
   18210:	d501      	bpl.n	18216 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   18212:	2108      	movs	r1, #8
   18214:	e7e4      	b.n	181e0 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   18216:	075b      	lsls	r3, r3, #29
   18218:	d5e5      	bpl.n	181e6 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1821a:	210a      	movs	r1, #10
   1821c:	e7e0      	b.n	181e0 <bt_smp_encrypt_change+0xb4>
   1821e:	bf00      	nop
   18220:	00025c35 	.word	0x00025c35

00018224 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   18224:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18226:	4b07      	ldr	r3, [pc, #28]	; (18244 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   18228:	4807      	ldr	r0, [pc, #28]	; (18248 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1822a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   1822e:	f003 0306 	and.w	r3, r3, #6
   18232:	1f9a      	subs	r2, r3, #6
   18234:	4253      	negs	r3, r2
   18236:	4153      	adcs	r3, r2
   18238:	4a04      	ldr	r2, [pc, #16]	; (1824c <bt_smp_init+0x28>)
   1823a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1823c:	f7fc f8ec 	bl	14418 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   18240:	2000      	movs	r0, #0
   18242:	bd08      	pop	{r3, pc}
   18244:	20000380 	.word	0x20000380
   18248:	200005e4 	.word	0x200005e4
   1824c:	200039b2 	.word	0x200039b2

00018250 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18250:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   18252:	4c0f      	ldr	r4, [pc, #60]	; (18290 <bt_keys_get_addr+0x40>)
   18254:	f814 3b01 	ldrb.w	r3, [r4], #1
   18258:	4283      	cmp	r3, r0
{
   1825a:	4605      	mov	r5, r0
   1825c:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1825e:	d007      	beq.n	18270 <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   18260:	490c      	ldr	r1, [pc, #48]	; (18294 <bt_keys_get_addr+0x44>)
   18262:	480d      	ldr	r0, [pc, #52]	; (18298 <bt_keys_get_addr+0x48>)
   18264:	2207      	movs	r2, #7
   18266:	f007 fe21 	bl	1feac <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1826a:	b148      	cbz	r0, 18280 <bt_keys_get_addr+0x30>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1826c:	2000      	movs	r0, #0
}
   1826e:	bd70      	pop	{r4, r5, r6, pc}
   18270:	2207      	movs	r2, #7
   18272:	4620      	mov	r0, r4
   18274:	f007 fe1a 	bl	1feac <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   18278:	2800      	cmp	r0, #0
   1827a:	d1f1      	bne.n	18260 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   1827c:	4804      	ldr	r0, [pc, #16]	; (18290 <bt_keys_get_addr+0x40>)
   1827e:	e7f6      	b.n	1826e <bt_keys_get_addr+0x1e>
	memcpy(dst, src, sizeof(*dst));
   18280:	2207      	movs	r2, #7
   18282:	4631      	mov	r1, r6
   18284:	4804      	ldr	r0, [pc, #16]	; (18298 <bt_keys_get_addr+0x48>)
		keys->id = id;
   18286:	f804 5c01 	strb.w	r5, [r4, #-1]
   1828a:	f007 fe36 	bl	1fefa <memcpy>
}
   1828e:	e7f5      	b.n	1827c <bt_keys_get_addr+0x2c>
   18290:	20002cd8 	.word	0x20002cd8
   18294:	000259ef 	.word	0x000259ef
   18298:	20002cd9 	.word	0x20002cd9

0001829c <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   1829c:	b410      	push	{r4}
   1829e:	460b      	mov	r3, r1
   182a0:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   182a2:	4a04      	ldr	r2, [pc, #16]	; (182b4 <bt_keys_foreach_type+0x18>)
   182a4:	89d4      	ldrh	r4, [r2, #14]
   182a6:	4204      	tst	r4, r0
   182a8:	d002      	beq.n	182b0 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
		}
	}
}
   182aa:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   182ac:	4610      	mov	r0, r2
   182ae:	4718      	bx	r3
}
   182b0:	bc10      	pop	{r4}
   182b2:	4770      	bx	lr
   182b4:	20002cd8 	.word	0x20002cd8

000182b8 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   182b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   182bc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 182f8 <bt_keys_find+0x40>
{
   182c0:	4605      	mov	r5, r0
   182c2:	460e      	mov	r6, r1
   182c4:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   182c6:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   182c8:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   182cc:	f898 2000 	ldrb.w	r2, [r8]
   182d0:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   182d2:	b113      	cbz	r3, 182da <bt_keys_find+0x22>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   182d4:	2000      	movs	r0, #0
}
   182d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   182da:	2c00      	cmp	r4, #0
   182dc:	d0fa      	beq.n	182d4 <bt_keys_find+0x1c>
   182de:	4296      	cmp	r6, r2
   182e0:	d1f8      	bne.n	182d4 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   182e2:	4806      	ldr	r0, [pc, #24]	; (182fc <bt_keys_find+0x44>)
   182e4:	2207      	movs	r2, #7
   182e6:	4639      	mov	r1, r7
   182e8:	f007 fde0 	bl	1feac <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   182ec:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   182ee:	2800      	cmp	r0, #0
   182f0:	d1ea      	bne.n	182c8 <bt_keys_find+0x10>
			return &key_pool[i];
   182f2:	4801      	ldr	r0, [pc, #4]	; (182f8 <bt_keys_find+0x40>)
   182f4:	e7ef      	b.n	182d6 <bt_keys_find+0x1e>
   182f6:	bf00      	nop
   182f8:	20002cd8 	.word	0x20002cd8
   182fc:	20002cd9 	.word	0x20002cd9

00018300 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   18300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   18302:	780b      	ldrb	r3, [r1, #0]
   18304:	2b01      	cmp	r3, #1
   18306:	4606      	mov	r6, r0
   18308:	460c      	mov	r4, r1
   1830a:	d001      	beq.n	18310 <bt_keys_find_irk+0x10>
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   1830c:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   1830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   18310:	798b      	ldrb	r3, [r1, #6]
   18312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18316:	2b40      	cmp	r3, #64	; 0x40
   18318:	d1f8      	bne.n	1830c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1831a:	4d18      	ldr	r5, [pc, #96]	; (1837c <bt_keys_find_irk+0x7c>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1831c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1831e:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   18322:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   18324:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18326:	f002 0202 	and.w	r2, r2, #2
   1832a:	b1c3      	cbz	r3, 1835e <bt_keys_find_irk+0x5e>
   1832c:	2300      	movs	r3, #0
   1832e:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   18330:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18332:	f002 0202 	and.w	r2, r2, #2
   18336:	2b00      	cmp	r3, #0
   18338:	d1e8      	bne.n	1830c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1833a:	2a00      	cmp	r2, #0
   1833c:	d0e6      	beq.n	1830c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1833e:	42b1      	cmp	r1, r6
   18340:	d1e4      	bne.n	1830c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   18342:	1c67      	adds	r7, r4, #1
   18344:	480e      	ldr	r0, [pc, #56]	; (18380 <bt_keys_find_irk+0x80>)
   18346:	4639      	mov	r1, r7
   18348:	f007 fe1d 	bl	1ff86 <bt_rpa_irk_matches>
   1834c:	2301      	movs	r3, #1
   1834e:	2800      	cmp	r0, #0
   18350:	d0ed      	beq.n	1832e <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   18352:	2206      	movs	r2, #6
   18354:	4639      	mov	r1, r7
   18356:	480b      	ldr	r0, [pc, #44]	; (18384 <bt_keys_find_irk+0x84>)
   18358:	f007 fdcf 	bl	1fefa <memcpy>
}
   1835c:	e00b      	b.n	18376 <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1835e:	2a00      	cmp	r2, #0
   18360:	d0e5      	beq.n	1832e <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   18362:	42b0      	cmp	r0, r6
   18364:	d1e3      	bne.n	1832e <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   18366:	2206      	movs	r2, #6
   18368:	4639      	mov	r1, r7
   1836a:	1c60      	adds	r0, r4, #1
   1836c:	f007 fd9e 	bl	1feac <memcmp>
   18370:	2301      	movs	r3, #1
   18372:	2800      	cmp	r0, #0
   18374:	d1d5      	bne.n	18322 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   18376:	4801      	ldr	r0, [pc, #4]	; (1837c <bt_keys_find_irk+0x7c>)
   18378:	e7c9      	b.n	1830e <bt_keys_find_irk+0xe>
   1837a:	bf00      	nop
   1837c:	20002cd8 	.word	0x20002cd8
   18380:	20002d02 	.word	0x20002d02
   18384:	20002d12 	.word	0x20002d12

00018388 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18388:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   1838a:	4c06      	ldr	r4, [pc, #24]	; (183a4 <bt_keys_find_addr+0x1c>)
   1838c:	7823      	ldrb	r3, [r4, #0]
   1838e:	4283      	cmp	r3, r0
   18390:	d104      	bne.n	1839c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   18392:	2207      	movs	r2, #7
   18394:	1c60      	adds	r0, r4, #1
   18396:	f007 fd89 	bl	1feac <memcmp>
   1839a:	b108      	cbz	r0, 183a0 <bt_keys_find_addr+0x18>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   1839c:	2000      	movs	r0, #0
}
   1839e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   183a0:	4620      	mov	r0, r4
   183a2:	e7fc      	b.n	1839e <bt_keys_find_addr+0x16>
   183a4:	20002cd8 	.word	0x20002cd8

000183a8 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   183a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   183ac:	b09a      	sub	sp, #104	; 0x68
   183ae:	461d      	mov	r5, r3
   183b0:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   183b4:	4b2e      	ldr	r3, [pc, #184]	; (18470 <bt_crypto_f5+0xc8>)
{
   183b6:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   183b8:	aa0c      	add	r2, sp, #48	; 0x30
{
   183ba:	4684      	mov	ip, r0
   183bc:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   183be:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   183c2:	4690      	mov	r8, r2
   183c4:	6818      	ldr	r0, [r3, #0]
   183c6:	6859      	ldr	r1, [r3, #4]
   183c8:	4614      	mov	r4, r2
   183ca:	c403      	stmia	r4!, {r0, r1}
   183cc:	3308      	adds	r3, #8
   183ce:	4573      	cmp	r3, lr
   183d0:	4622      	mov	r2, r4
   183d2:	d1f7      	bne.n	183c4 <bt_crypto_f5+0x1c>
   183d4:	6818      	ldr	r0, [r3, #0]
   183d6:	791b      	ldrb	r3, [r3, #4]
   183d8:	6020      	str	r0, [r4, #0]
   183da:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   183dc:	4661      	mov	r1, ip
   183de:	2220      	movs	r2, #32
   183e0:	a804      	add	r0, sp, #16
   183e2:	f00b f88a 	bl	234fa <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   183e6:	4823      	ldr	r0, [pc, #140]	; (18474 <bt_crypto_f5+0xcc>)
   183e8:	466b      	mov	r3, sp
   183ea:	2220      	movs	r2, #32
   183ec:	a904      	add	r1, sp, #16
   183ee:	f00b f89c 	bl	2352a <bt_crypto_aes_cmac>
	if (err) {
   183f2:	4604      	mov	r4, r0
   183f4:	bbc0      	cbnz	r0, 18468 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   183f6:	2210      	movs	r2, #16
   183f8:	4651      	mov	r1, sl
   183fa:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   183fe:	f00b f87c 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   18402:	2210      	movs	r2, #16
   18404:	4631      	mov	r1, r6
   18406:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1840a:	f00b f876 	bl	234fa <sys_memcpy_swap>
	m[37] = a1->type;
   1840e:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18410:	2206      	movs	r2, #6
	m[37] = a1->type;
   18412:	f811 3b01 	ldrb.w	r3, [r1], #1
   18416:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1841a:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   1841e:	f00b f86c 	bl	234fa <sys_memcpy_swap>
	m[44] = a2->type;
   18422:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18424:	2206      	movs	r2, #6
	m[44] = a2->type;
   18426:	f811 3b01 	ldrb.w	r3, [r1], #1
   1842a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1842e:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   18432:	f00b f862 	bl	234fa <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   18436:	464b      	mov	r3, r9
   18438:	2235      	movs	r2, #53	; 0x35
   1843a:	4641      	mov	r1, r8
   1843c:	4668      	mov	r0, sp
   1843e:	f00b f874 	bl	2352a <bt_crypto_aes_cmac>
	if (err) {
   18442:	4604      	mov	r4, r0
   18444:	b980      	cbnz	r0, 18468 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   18446:	4648      	mov	r0, r9
   18448:	f00b f861 	bl	2350e <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1844c:	2301      	movs	r3, #1
   1844e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   18452:	2235      	movs	r2, #53	; 0x35
   18454:	463b      	mov	r3, r7
   18456:	4641      	mov	r1, r8
   18458:	4668      	mov	r0, sp
   1845a:	f00b f866 	bl	2352a <bt_crypto_aes_cmac>
	if (err) {
   1845e:	4604      	mov	r4, r0
   18460:	b910      	cbnz	r0, 18468 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   18462:	4638      	mov	r0, r7
   18464:	f00b f853 	bl	2350e <sys_mem_swap.constprop.0>

	return 0;
}
   18468:	4620      	mov	r0, r4
   1846a:	b01a      	add	sp, #104	; 0x68
   1846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18470:	00024d62 	.word	0x00024d62
   18474:	00025c8e 	.word	0x00025c8e

00018478 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   18478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1847a:	b099      	sub	sp, #100	; 0x64
   1847c:	4614      	mov	r4, r2
   1847e:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   18480:	2220      	movs	r2, #32
   18482:	4601      	mov	r1, r0
   18484:	a804      	add	r0, sp, #16
{
   18486:	461e      	mov	r6, r3
   18488:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1848a:	f00b f836 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1848e:	2220      	movs	r2, #32
   18490:	4639      	mov	r1, r7
   18492:	a80c      	add	r0, sp, #48	; 0x30
   18494:	f00b f831 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   18498:	2210      	movs	r2, #16
   1849a:	4631      	mov	r1, r6
   1849c:	a814      	add	r0, sp, #80	; 0x50
   1849e:	f00b f82c 	bl	234fa <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   184a2:	4621      	mov	r1, r4
   184a4:	2210      	movs	r2, #16
   184a6:	4668      	mov	r0, sp
   184a8:	f00b f827 	bl	234fa <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   184ac:	466b      	mov	r3, sp
   184ae:	2250      	movs	r2, #80	; 0x50
   184b0:	a904      	add	r1, sp, #16
   184b2:	4618      	mov	r0, r3
   184b4:	f00b f839 	bl	2352a <bt_crypto_aes_cmac>
	if (err) {
   184b8:	4604      	mov	r4, r0
   184ba:	b960      	cbnz	r0, 184d6 <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   184bc:	2204      	movs	r2, #4
   184be:	a903      	add	r1, sp, #12
   184c0:	4628      	mov	r0, r5
   184c2:	f007 fd1a 	bl	1fefa <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   184c6:	682b      	ldr	r3, [r5, #0]
   184c8:	4a04      	ldr	r2, [pc, #16]	; (184dc <bt_crypto_g2+0x64>)
   184ca:	ba1b      	rev	r3, r3
   184cc:	fbb3 f1f2 	udiv	r1, r3, r2
   184d0:	fb02 3311 	mls	r3, r2, r1, r3
   184d4:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   184d6:	4620      	mov	r0, r4
   184d8:	b019      	add	sp, #100	; 0x64
   184da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   184dc:	000f4240 	.word	0x000f4240

000184e0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   184e0:	4b02      	ldr	r3, [pc, #8]	; (184ec <net_buf_pool_get+0xc>)
   184e2:	222c      	movs	r2, #44	; 0x2c
   184e4:	fb02 3000 	mla	r0, r2, r0, r3
   184e8:	4770      	bx	lr
   184ea:	bf00      	nop
   184ec:	20000878 	.word	0x20000878

000184f0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   184f0:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   184f2:	4b06      	ldr	r3, [pc, #24]	; (1850c <net_buf_id+0x1c>)
   184f4:	212c      	movs	r1, #44	; 0x2c
   184f6:	fb01 3302 	mla	r3, r1, r2, r3
   184fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   184fc:	7f1b      	ldrb	r3, [r3, #28]
   184fe:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18500:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18502:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   18506:	fbb0 f0f3 	udiv	r0, r0, r3
   1850a:	4770      	bx	lr
   1850c:	20000878 	.word	0x20000878

00018510 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   18510:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18512:	4b0a      	ldr	r3, [pc, #40]	; (1853c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18514:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18516:	242c      	movs	r4, #44	; 0x2c
   18518:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1851c:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18520:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   18522:	681a      	ldr	r2, [r3, #0]
   18524:	4294      	cmp	r4, r2
   18526:	bf94      	ite	ls
   18528:	600c      	strls	r4, [r1, #0]
   1852a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1852c:	e9d3 5400 	ldrd	r5, r4, [r3]
   18530:	f7ff ffde 	bl	184f0 <net_buf_id>
}
   18534:	fb05 4000 	mla	r0, r5, r0, r4
   18538:	bd38      	pop	{r3, r4, r5, pc}
   1853a:	bf00      	nop
   1853c:	20000878 	.word	0x20000878

00018540 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   18540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18544:	4605      	mov	r5, r0
   18546:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18548:	4610      	mov	r0, r2
   1854a:	4619      	mov	r1, r3
{
   1854c:	4691      	mov	r9, r2
   1854e:	4698      	mov	r8, r3
   18550:	4617      	mov	r7, r2
   18552:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18554:	f00c f817 	bl	24586 <sys_clock_timeout_end_calc>
   18558:	4682      	mov	sl, r0
   1855a:	468b      	mov	fp, r1
	__asm__ volatile(
   1855c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18560:	f3ef 8111 	mrs	r1, BASEPRI
   18564:	f383 8812 	msr	BASEPRI_MAX, r3
   18568:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1856c:	8b6b      	ldrh	r3, [r5, #26]
   1856e:	2b00      	cmp	r3, #0
   18570:	d058      	beq.n	18624 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   18572:	8b2a      	ldrh	r2, [r5, #24]
   18574:	429a      	cmp	r2, r3
   18576:	d93c      	bls.n	185f2 <net_buf_alloc_len+0xb2>
   18578:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1857a:	2200      	movs	r2, #0
   1857c:	2300      	movs	r3, #0
   1857e:	4628      	mov	r0, r5
   18580:	f002 ff86 	bl	1b490 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   18584:	9900      	ldr	r1, [sp, #0]
   18586:	4604      	mov	r4, r0
   18588:	2800      	cmp	r0, #0
   1858a:	d032      	beq.n	185f2 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   1858c:	f381 8811 	msr	BASEPRI, r1
   18590:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   18594:	9b01      	ldr	r3, [sp, #4]
   18596:	2b00      	cmp	r3, #0
   18598:	d055      	beq.n	18646 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1859a:	ea58 0309 	orrs.w	r3, r8, r9
   1859e:	d00f      	beq.n	185c0 <net_buf_alloc_len+0x80>
   185a0:	f1b8 3fff 	cmp.w	r8, #4294967295
   185a4:	bf08      	it	eq
   185a6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   185aa:	d009      	beq.n	185c0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   185ac:	f003 fe56 	bl	1c25c <sys_clock_tick_get>
   185b0:	ebba 0700 	subs.w	r7, sl, r0
   185b4:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   185b8:	2e00      	cmp	r6, #0
   185ba:	bfbc      	itt	lt
   185bc:	2700      	movlt	r7, #0
   185be:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   185c0:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   185c2:	4d26      	ldr	r5, [pc, #152]	; (1865c <net_buf_alloc_len+0x11c>)
   185c4:	f04f 082c 	mov.w	r8, #44	; 0x2c
   185c8:	fb08 5303 	mla	r3, r8, r3, r5
   185cc:	463a      	mov	r2, r7
   185ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   185d0:	681b      	ldr	r3, [r3, #0]
   185d2:	a901      	add	r1, sp, #4
   185d4:	f8d3 9000 	ldr.w	r9, [r3]
   185d8:	4620      	mov	r0, r4
   185da:	4633      	mov	r3, r6
   185dc:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   185de:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   185e0:	2800      	cmp	r0, #0
   185e2:	d131      	bne.n	18648 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   185e4:	7aa0      	ldrb	r0, [r4, #10]
   185e6:	4621      	mov	r1, r4
   185e8:	fb00 5008 	mla	r0, r0, r8, r5
   185ec:	f00b fd7f 	bl	240ee <k_queue_prepend>
}
   185f0:	e024      	b.n	1863c <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   185f2:	8b68      	ldrh	r0, [r5, #26]
   185f4:	1e43      	subs	r3, r0, #1
   185f6:	836b      	strh	r3, [r5, #26]
   185f8:	f381 8811 	msr	BASEPRI, r1
   185fc:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18600:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   18602:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   18604:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18606:	331b      	adds	r3, #27
   18608:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1860c:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1860e:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   18612:	4b12      	ldr	r3, [pc, #72]	; (1865c <net_buf_alloc_len+0x11c>)
   18614:	4a12      	ldr	r2, [pc, #72]	; (18660 <net_buf_alloc_len+0x120>)
   18616:	1aeb      	subs	r3, r5, r3
   18618:	109b      	asrs	r3, r3, #2
   1861a:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1861c:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1861e:	7f2b      	ldrb	r3, [r5, #28]
   18620:	72e3      	strb	r3, [r4, #11]
		goto success;
   18622:	e7b7      	b.n	18594 <net_buf_alloc_len+0x54>
   18624:	f381 8811 	msr	BASEPRI, r1
   18628:	f3bf 8f6f 	isb	sy
   1862c:	464a      	mov	r2, r9
   1862e:	4643      	mov	r3, r8
   18630:	4628      	mov	r0, r5
   18632:	f002 ff2d 	bl	1b490 <z_impl_k_queue_get>
	if (!buf) {
   18636:	4604      	mov	r4, r0
   18638:	2800      	cmp	r0, #0
   1863a:	d1ab      	bne.n	18594 <net_buf_alloc_len+0x54>
		return NULL;
   1863c:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1863e:	4620      	mov	r0, r4
   18640:	b003      	add	sp, #12
   18642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   18646:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   18648:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1864a:	2201      	movs	r2, #1
	buf->frags = NULL;
   1864c:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1864e:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   18650:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   18652:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   18654:	6963      	ldr	r3, [r4, #20]
   18656:	8262      	strh	r2, [r4, #18]
   18658:	60e3      	str	r3, [r4, #12]
	return buf;
   1865a:	e7f0      	b.n	1863e <net_buf_alloc_len+0xfe>
   1865c:	20000878 	.word	0x20000878
   18660:	ba2e8ba3 	.word	0xba2e8ba3

00018664 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   18664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18668:	4d16      	ldr	r5, [pc, #88]	; (186c4 <net_buf_unref+0x60>)
   1866a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1866c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1866e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   18670:	b90c      	cbnz	r4, 18676 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   18672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   18676:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   18678:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   1867c:	3b01      	subs	r3, #1
   1867e:	b2db      	uxtb	r3, r3
   18680:	7223      	strb	r3, [r4, #8]
   18682:	2b00      	cmp	r3, #0
   18684:	d1f5      	bne.n	18672 <net_buf_unref+0xe>
		if (buf->__buf) {
   18686:	6961      	ldr	r1, [r4, #20]
   18688:	b159      	cbz	r1, 186a2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1868a:	7a63      	ldrb	r3, [r4, #9]
   1868c:	07db      	lsls	r3, r3, #31
   1868e:	d407      	bmi.n	186a0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18690:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   18692:	fb07 5303 	mla	r3, r7, r3, r5
   18696:	4620      	mov	r0, r4
   18698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1869a:	681b      	ldr	r3, [r3, #0]
   1869c:	689b      	ldr	r3, [r3, #8]
   1869e:	4798      	blx	r3
			buf->__buf = NULL;
   186a0:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   186a2:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   186a4:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   186a6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   186aa:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   186ac:	6a1b      	ldr	r3, [r3, #32]
   186ae:	b11b      	cbz	r3, 186b8 <net_buf_unref+0x54>
			pool->destroy(buf);
   186b0:	4620      	mov	r0, r4
   186b2:	4798      	blx	r3
{
   186b4:	4644      	mov	r4, r8
   186b6:	e7db      	b.n	18670 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   186b8:	4621      	mov	r1, r4
   186ba:	fb00 5007 	mla	r0, r0, r7, r5
   186be:	f00b fd16 	bl	240ee <k_queue_prepend>
}
   186c2:	e7f7      	b.n	186b4 <net_buf_unref+0x50>
   186c4:	20000878 	.word	0x20000878

000186c8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   186c8:	4b08      	ldr	r3, [pc, #32]	; (186ec <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   186ca:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   186cc:	1ac3      	subs	r3, r0, r3
{
   186ce:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   186d0:	4907      	ldr	r1, [pc, #28]	; (186f0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   186d2:	109b      	asrs	r3, r3, #2
{
   186d4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   186d6:	4359      	muls	r1, r3
   186d8:	4806      	ldr	r0, [pc, #24]	; (186f4 <onoff_stop+0x2c>)
   186da:	2240      	movs	r2, #64	; 0x40
   186dc:	f00b f88c 	bl	237f8 <stop>
	notify(mgr, res);
   186e0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   186e2:	4601      	mov	r1, r0
	notify(mgr, res);
   186e4:	4620      	mov	r0, r4
}
   186e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   186ea:	4718      	bx	r3
   186ec:	20002d48 	.word	0x20002d48
   186f0:	b6db6db7 	.word	0xb6db6db7
   186f4:	00024940 	.word	0x00024940

000186f8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   186f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   186fa:	4c0c      	ldr	r4, [pc, #48]	; (1872c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   186fc:	4a0c      	ldr	r2, [pc, #48]	; (18730 <onoff_start+0x38>)
   186fe:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   18700:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18702:	9300      	str	r3, [sp, #0]
{
   18704:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18706:	460b      	mov	r3, r1
   18708:	490a      	ldr	r1, [pc, #40]	; (18734 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1870a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1870c:	4361      	muls	r1, r4
{
   1870e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18710:	4809      	ldr	r0, [pc, #36]	; (18738 <onoff_start+0x40>)
   18712:	f00b f89e 	bl	23852 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   18716:	1e01      	subs	r1, r0, #0
   18718:	da05      	bge.n	18726 <onoff_start+0x2e>
		notify(mgr, err);
   1871a:	4630      	mov	r0, r6
   1871c:	462b      	mov	r3, r5
	}
}
   1871e:	b002      	add	sp, #8
   18720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   18724:	4718      	bx	r3
}
   18726:	b002      	add	sp, #8
   18728:	bd70      	pop	{r4, r5, r6, pc}
   1872a:	bf00      	nop
   1872c:	20002d48 	.word	0x20002d48
   18730:	000238bf 	.word	0x000238bf
   18734:	b6db6db7 	.word	0xb6db6db7
   18738:	00024940 	.word	0x00024940

0001873c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1873c:	2200      	movs	r2, #0
{
   1873e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18740:	2101      	movs	r1, #1
{
   18742:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18744:	4610      	mov	r0, r2
   18746:	f7f9 fe75 	bl	12434 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1874a:	480f      	ldr	r0, [pc, #60]	; (18788 <clk_init+0x4c>)
   1874c:	f001 ff24 	bl	1a598 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   18750:	4b0e      	ldr	r3, [pc, #56]	; (1878c <clk_init+0x50>)
   18752:	4298      	cmp	r0, r3
   18754:	d115      	bne.n	18782 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   18756:	f00b facd 	bl	23cf4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1875a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1875c:	490c      	ldr	r1, [pc, #48]	; (18790 <clk_init+0x54>)
   1875e:	4630      	mov	r0, r6
   18760:	f007 f848 	bl	1f7f4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   18764:	2800      	cmp	r0, #0
   18766:	db0b      	blt.n	18780 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18768:	2501      	movs	r5, #1
   1876a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1876c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1876e:	4908      	ldr	r1, [pc, #32]	; (18790 <clk_init+0x54>)
   18770:	f104 001c 	add.w	r0, r4, #28
   18774:	f007 f83e 	bl	1f7f4 <onoff_manager_init>
		if (err < 0) {
   18778:	2800      	cmp	r0, #0
   1877a:	db01      	blt.n	18780 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1877c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1877e:	2000      	movs	r0, #0
}
   18780:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   18782:	f06f 0004 	mvn.w	r0, #4
   18786:	e7fb      	b.n	18780 <clk_init+0x44>
   18788:	000187c9 	.word	0x000187c9
   1878c:	0bad0000 	.word	0x0bad0000
   18790:	00025298 	.word	0x00025298

00018794 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   18794:	b570      	push	{r4, r5, r6, lr}
   18796:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   18798:	230c      	movs	r3, #12
   1879a:	4809      	ldr	r0, [pc, #36]	; (187c0 <clkstarted_handle.constprop.0+0x2c>)
   1879c:	434b      	muls	r3, r1
   1879e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   187a0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   187a4:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   187a6:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   187a8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   187aa:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   187ac:	f00b f811 	bl	237d2 <set_on_state>
	if (callback) {
   187b0:	b12d      	cbz	r5, 187be <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   187b2:	4632      	mov	r2, r6
   187b4:	462b      	mov	r3, r5
   187b6:	4803      	ldr	r0, [pc, #12]	; (187c4 <clkstarted_handle.constprop.0+0x30>)
}
   187b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   187bc:	4718      	bx	r3
}
   187be:	bd70      	pop	{r4, r5, r6, pc}
   187c0:	20002d48 	.word	0x20002d48
   187c4:	00024940 	.word	0x00024940

000187c8 <clock_event_handler>:
	switch (event) {
   187c8:	b110      	cbz	r0, 187d0 <clock_event_handler+0x8>
   187ca:	2801      	cmp	r0, #1
   187cc:	d004      	beq.n	187d8 <clock_event_handler+0x10>
   187ce:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   187d0:	4b03      	ldr	r3, [pc, #12]	; (187e0 <clock_event_handler+0x18>)
   187d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   187d4:	075b      	lsls	r3, r3, #29
   187d6:	d101      	bne.n	187dc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   187d8:	f7ff bfdc 	b.w	18794 <clkstarted_handle.constprop.0>
}
   187dc:	4770      	bx	lr
   187de:	bf00      	nop
   187e0:	20002d48 	.word	0x20002d48

000187e4 <generic_hfclk_start>:
{
   187e4:	b508      	push	{r3, lr}
	__asm__ volatile(
   187e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   187ea:	f3ef 8111 	mrs	r1, BASEPRI
   187ee:	f383 8812 	msr	BASEPRI_MAX, r3
   187f2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   187f6:	4a12      	ldr	r2, [pc, #72]	; (18840 <generic_hfclk_start+0x5c>)
   187f8:	6813      	ldr	r3, [r2, #0]
   187fa:	f043 0002 	orr.w	r0, r3, #2
   187fe:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   18800:	07da      	lsls	r2, r3, #31
   18802:	d408      	bmi.n	18816 <generic_hfclk_start+0x32>
	__asm__ volatile(
   18804:	f381 8811 	msr	BASEPRI, r1
   18808:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1880c:	2001      	movs	r0, #1
}
   1880e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18812:	f001 beb1 	b.w	1a578 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1881a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1881e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   18822:	07d3      	lsls	r3, r2, #31
   18824:	d5ee      	bpl.n	18804 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   18826:	4807      	ldr	r0, [pc, #28]	; (18844 <generic_hfclk_start+0x60>)
   18828:	f00a ffd3 	bl	237d2 <set_on_state>
   1882c:	f381 8811 	msr	BASEPRI, r1
   18830:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   18834:	2000      	movs	r0, #0
}
   18836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1883a:	f7ff bfab 	b.w	18794 <clkstarted_handle.constprop.0>
   1883e:	bf00      	nop
   18840:	20002d98 	.word	0x20002d98
   18844:	20002d88 	.word	0x20002d88

00018848 <api_blocking_start>:
{
   18848:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1884a:	2200      	movs	r2, #0
   1884c:	2301      	movs	r3, #1
   1884e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18852:	ab04      	add	r3, sp, #16
   18854:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18858:	4a09      	ldr	r2, [pc, #36]	; (18880 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1885a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1885e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18860:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18864:	f00b f824 	bl	238b0 <api_start>
	if (err < 0) {
   18868:	2800      	cmp	r0, #0
   1886a:	db05      	blt.n	18878 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1886c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   18870:	2300      	movs	r3, #0
   18872:	4668      	mov	r0, sp
   18874:	f002 fe66 	bl	1b544 <z_impl_k_sem_take>
}
   18878:	b007      	add	sp, #28
   1887a:	f85d fb04 	ldr.w	pc, [sp], #4
   1887e:	bf00      	nop
   18880:	000238dd 	.word	0x000238dd

00018884 <generic_hfclk_stop>:
{
   18884:	b510      	push	{r4, lr}
	__asm__ volatile(
   18886:	f04f 0340 	mov.w	r3, #64	; 0x40
   1888a:	f3ef 8411 	mrs	r4, BASEPRI
   1888e:	f383 8812 	msr	BASEPRI_MAX, r3
   18892:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   18896:	4a07      	ldr	r2, [pc, #28]	; (188b4 <generic_hfclk_stop+0x30>)
   18898:	6813      	ldr	r3, [r2, #0]
   1889a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1889e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   188a0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   188a2:	d402      	bmi.n	188aa <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   188a4:	2001      	movs	r0, #1
   188a6:	f00b fa20 	bl	23cea <nrfx_clock_stop>
	__asm__ volatile(
   188aa:	f384 8811 	msr	BASEPRI, r4
   188ae:	f3bf 8f6f 	isb	sy
}
   188b2:	bd10      	pop	{r4, pc}
   188b4:	20002d98 	.word	0x20002d98

000188b8 <z_nrf_clock_control_lf_on>:
{
   188b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   188bc:	4938      	ldr	r1, [pc, #224]	; (189a0 <z_nrf_clock_control_lf_on+0xe8>)
   188be:	f3bf 8f5b 	dmb	ish
   188c2:	4607      	mov	r7, r0
   188c4:	2201      	movs	r2, #1
   188c6:	e851 3f00 	ldrex	r3, [r1]
   188ca:	e841 2000 	strex	r0, r2, [r1]
   188ce:	2800      	cmp	r0, #0
   188d0:	d1f9      	bne.n	188c6 <z_nrf_clock_control_lf_on+0xe>
   188d2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   188d6:	b933      	cbnz	r3, 188e6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   188d8:	4932      	ldr	r1, [pc, #200]	; (189a4 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   188da:	4833      	ldr	r0, [pc, #204]	; (189a8 <z_nrf_clock_control_lf_on+0xf0>)
   188dc:	604b      	str	r3, [r1, #4]
   188de:	60cb      	str	r3, [r1, #12]
   188e0:	608a      	str	r2, [r1, #8]
   188e2:	f006 ff9a 	bl	1f81a <onoff_request>
	switch (start_mode) {
   188e6:	1e7b      	subs	r3, r7, #1
   188e8:	2b01      	cmp	r3, #1
   188ea:	d82b      	bhi.n	18944 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   188ec:	2f01      	cmp	r7, #1
   188ee:	d107      	bne.n	18900 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   188f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   188f4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   188f8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   188fc:	2b01      	cmp	r3, #1
   188fe:	d021      	beq.n	18944 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18900:	f00b fb4b 	bl	23f9a <k_is_in_isr>
   18904:	4605      	mov	r5, r0
   18906:	b9f8      	cbnz	r0, 18948 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   18908:	4b28      	ldr	r3, [pc, #160]	; (189ac <z_nrf_clock_control_lf_on+0xf4>)
   1890a:	781b      	ldrb	r3, [r3, #0]
   1890c:	b1e3      	cbz	r3, 18948 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   1890e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18912:	2202      	movs	r2, #2
   18914:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   18918:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1891a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 189b0 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1891e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   18922:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18926:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1892a:	03d2      	lsls	r2, r2, #15
   1892c:	d516      	bpl.n	1895c <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1892e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   18932:	2b01      	cmp	r3, #1
   18934:	d001      	beq.n	1893a <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   18936:	2f01      	cmp	r7, #1
   18938:	d110      	bne.n	1895c <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   1893a:	b35d      	cbz	r5, 18994 <z_nrf_clock_control_lf_on+0xdc>
   1893c:	f386 8811 	msr	BASEPRI, r6
   18940:	f3bf 8f6f 	isb	sy
}
   18944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   18948:	f04f 0340 	mov.w	r3, #64	; 0x40
   1894c:	f3ef 8611 	mrs	r6, BASEPRI
   18950:	f383 8812 	msr	BASEPRI_MAX, r3
   18954:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18958:	2501      	movs	r5, #1
   1895a:	e7de      	b.n	1891a <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1895c:	b1ad      	cbz	r5, 1898a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1895e:	4630      	mov	r0, r6
   18960:	f7f9 fd2c 	bl	123bc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   18964:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   18968:	2b00      	cmp	r3, #0
   1896a:	d1da      	bne.n	18922 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1896c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   18970:	2a00      	cmp	r2, #0
   18972:	d0d6      	beq.n	18922 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18974:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   18978:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1897c:	2301      	movs	r3, #1
   1897e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   18982:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18986:	60a3      	str	r3, [r4, #8]
}
   18988:	e7cb      	b.n	18922 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   1898a:	2100      	movs	r1, #0
   1898c:	2021      	movs	r0, #33	; 0x21
   1898e:	f003 fa93 	bl	1beb8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18992:	e7e7      	b.n	18964 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   18994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18998:	2202      	movs	r2, #2
   1899a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1899e:	e7d1      	b.n	18944 <z_nrf_clock_control_lf_on+0x8c>
   189a0:	20002d44 	.word	0x20002d44
   189a4:	20002d34 	.word	0x20002d34
   189a8:	20002d64 	.word	0x20002d64
   189ac:	20003aa7 	.word	0x20003aa7
   189b0:	e000e100 	.word	0xe000e100

000189b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   189b4:	b508      	push	{r3, lr}
   189b6:	4807      	ldr	r0, [pc, #28]	; (189d4 <uart_console_init+0x20>)
   189b8:	f00b fa06 	bl	23dc8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   189bc:	b138      	cbz	r0, 189ce <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   189be:	4806      	ldr	r0, [pc, #24]	; (189d8 <uart_console_init+0x24>)
   189c0:	f7fa f8f2 	bl	12ba8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   189c4:	4804      	ldr	r0, [pc, #16]	; (189d8 <uart_console_init+0x24>)
   189c6:	f7f8 fd5f 	bl	11488 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   189ca:	2000      	movs	r0, #0
}
   189cc:	bd08      	pop	{r3, pc}
		return -ENODEV;
   189ce:	f06f 0012 	mvn.w	r0, #18
   189d2:	e7fb      	b.n	189cc <uart_console_init+0x18>
   189d4:	000249d0 	.word	0x000249d0
   189d8:	000189dd 	.word	0x000189dd

000189dc <console_out>:
	if ('\n' == c) {
   189dc:	280a      	cmp	r0, #10
{
   189de:	b538      	push	{r3, r4, r5, lr}
   189e0:	4d07      	ldr	r5, [pc, #28]	; (18a00 <console_out+0x24>)
   189e2:	4604      	mov	r4, r0
	if ('\n' == c) {
   189e4:	d104      	bne.n	189f0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   189e6:	68ab      	ldr	r3, [r5, #8]
   189e8:	210d      	movs	r1, #13
   189ea:	685b      	ldr	r3, [r3, #4]
   189ec:	4628      	mov	r0, r5
   189ee:	4798      	blx	r3
   189f0:	68ab      	ldr	r3, [r5, #8]
   189f2:	4803      	ldr	r0, [pc, #12]	; (18a00 <console_out+0x24>)
   189f4:	685b      	ldr	r3, [r3, #4]
   189f6:	b2e1      	uxtb	r1, r4
   189f8:	4798      	blx	r3
}
   189fa:	4620      	mov	r0, r4
   189fc:	bd38      	pop	{r3, r4, r5, pc}
   189fe:	bf00      	nop
   18a00:	000249d0 	.word	0x000249d0

00018a04 <random_byte_get>:
   18a04:	f04f 0340 	mov.w	r3, #64	; 0x40
   18a08:	f3ef 8211 	mrs	r2, BASEPRI
   18a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   18a10:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18a14:	4b09      	ldr	r3, [pc, #36]	; (18a3c <random_byte_get+0x38>)
   18a16:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   18a1a:	b161      	cbz	r1, 18a36 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18a1c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   18a1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18a22:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   18a26:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   18a2a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18a2c:	f382 8811 	msr	BASEPRI, r2
   18a30:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18a34:	4770      	bx	lr
	int retval = -EAGAIN;
   18a36:	f06f 000a 	mvn.w	r0, #10
   18a3a:	e7f7      	b.n	18a2c <random_byte_get+0x28>
   18a3c:	4000d000 	.word	0x4000d000

00018a40 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a42:	4603      	mov	r3, r0
   18a44:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   18a46:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   18a48:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   18a4c:	f04f 0540 	mov.w	r5, #64	; 0x40
   18a50:	f3ef 8211 	mrs	r2, BASEPRI
   18a54:	f385 8812 	msr	BASEPRI_MAX, r5
   18a58:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18a5c:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18a5e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   18a62:	1be4      	subs	r4, r4, r7
   18a64:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   18a68:	42a0      	cmp	r0, r4
		len = available;
   18a6a:	bf88      	it	hi
   18a6c:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18a6e:	183e      	adds	r6, r7, r0
   18a70:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   18a74:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   18a76:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   18a78:	f382 8811 	msr	BASEPRI, r2
   18a7c:	f3bf 8f6f 	isb	sy
   18a80:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   18a82:	428a      	cmp	r2, r1
   18a84:	d117      	bne.n	18ab6 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18a86:	4577      	cmp	r7, lr
   18a88:	d10d      	bne.n	18aa6 <rng_pool_get+0x66>
	__asm__ volatile(
   18a8a:	f04f 0140 	mov.w	r1, #64	; 0x40
   18a8e:	f3ef 8211 	mrs	r2, BASEPRI
   18a92:	f381 8812 	msr	BASEPRI_MAX, r1
   18a96:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18a9a:	7819      	ldrb	r1, [r3, #0]
   18a9c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   18a9e:	f382 8811 	msr	BASEPRI, r2
   18aa2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   18aa6:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   18aa8:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   18aaa:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18aac:	bf22      	ittt	cs
   18aae:	4b06      	ldrcs	r3, [pc, #24]	; (18ac8 <rng_pool_get+0x88>)
   18ab0:	2201      	movcs	r2, #1
   18ab2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   18ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   18ab6:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   18ab8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   18aba:	7976      	ldrb	r6, [r6, #5]
   18abc:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   18ac0:	ea05 050c 	and.w	r5, r5, ip
   18ac4:	e7dd      	b.n	18a82 <rng_pool_get+0x42>
   18ac6:	bf00      	nop
   18ac8:	4000d000 	.word	0x4000d000

00018acc <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18acc:	43db      	mvns	r3, r3
{
   18ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18ad2:	f013 0501 	ands.w	r5, r3, #1
{
   18ad6:	460e      	mov	r6, r1
   18ad8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18ada:	d004      	beq.n	18ae6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18adc:	4823      	ldr	r0, [pc, #140]	; (18b6c <entropy_nrf5_get_entropy_isr+0xa0>)
   18ade:	f7ff ffaf 	bl	18a40 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   18ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   18ae6:	b3a2      	cbz	r2, 18b52 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   18ae8:	f04f 0340 	mov.w	r3, #64	; 0x40
   18aec:	f3ef 8811 	mrs	r8, BASEPRI
   18af0:	f383 8812 	msr	BASEPRI_MAX, r3
   18af4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   18af8:	200d      	movs	r0, #13
   18afa:	f7f9 fc8d 	bl	12418 <arch_irq_is_enabled>
   18afe:	4607      	mov	r7, r0
		irq_disable(IRQN);
   18b00:	200d      	movs	r0, #13
   18b02:	f7f9 fc75 	bl	123f0 <arch_irq_disable>
	__asm__ volatile(
   18b06:	f388 8811 	msr	BASEPRI, r8
   18b0a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18b0e:	f8df a060 	ldr.w	sl, [pc, #96]	; 18b70 <entropy_nrf5_get_entropy_isr+0xa4>
   18b12:	f8df 8060 	ldr.w	r8, [pc, #96]	; 18b74 <entropy_nrf5_get_entropy_isr+0xa8>
   18b16:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   18b1a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   18b1e:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18b22:	2301      	movs	r3, #1
   18b24:	f8ca 3000 	str.w	r3, [sl]
   18b28:	4625      	mov	r5, r4
   18b2a:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18b2e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   18b32:	b183      	cbz	r3, 18b56 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   18b34:	f7ff ff66 	bl	18a04 <random_byte_get>
			if (byte < 0) {
   18b38:	1e03      	subs	r3, r0, #0
   18b3a:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   18b3e:	dbf6      	blt.n	18b2e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   18b40:	3d01      	subs	r5, #1
   18b42:	b2ad      	uxth	r5, r5
   18b44:	5573      	strb	r3, [r6, r5]
		} while (len);
   18b46:	2d00      	cmp	r5, #0
   18b48:	d1f1      	bne.n	18b2e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   18b4a:	b117      	cbz	r7, 18b52 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   18b4c:	200d      	movs	r0, #13
   18b4e:	f7f9 fc41 	bl	123d4 <arch_irq_enable>
	return cnt;
   18b52:	4620      	mov	r0, r4
   18b54:	e7c5      	b.n	18ae2 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   18b56:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b5a:	f3ef 8011 	mrs	r0, BASEPRI
   18b5e:	f383 8812 	msr	BASEPRI_MAX, r3
   18b62:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   18b66:	f7f9 fc29 	bl	123bc <arch_cpu_atomic_idle>
}
   18b6a:	e7e0      	b.n	18b2e <entropy_nrf5_get_entropy_isr+0x62>
   18b6c:	20002dcc 	.word	0x20002dcc
   18b70:	4000d000 	.word	0x4000d000
   18b74:	e000e100 	.word	0xe000e100

00018b78 <entropy_nrf5_get_entropy>:
{
   18b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   18b7c:	4f12      	ldr	r7, [pc, #72]	; (18bc8 <entropy_nrf5_get_entropy+0x50>)
   18b7e:	460d      	mov	r5, r1
   18b80:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18b82:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   18b86:	b914      	cbnz	r4, 18b8e <entropy_nrf5_get_entropy+0x16>
}
   18b88:	4620      	mov	r0, r4
   18b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b8e:	f04f 33ff 	mov.w	r3, #4294967295
   18b92:	f04f 32ff 	mov.w	r2, #4294967295
   18b96:	4638      	mov	r0, r7
   18b98:	f002 fcd4 	bl	1b544 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18b9c:	4622      	mov	r2, r4
   18b9e:	4629      	mov	r1, r5
   18ba0:	4640      	mov	r0, r8
   18ba2:	f7ff ff4d 	bl	18a40 <rng_pool_get>
   18ba6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   18ba8:	4638      	mov	r0, r7
   18baa:	f002 fca5 	bl	1b4f8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   18bae:	b93e      	cbnz	r6, 18bc0 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   18bb0:	f04f 32ff 	mov.w	r2, #4294967295
   18bb4:	f04f 33ff 	mov.w	r3, #4294967295
   18bb8:	4804      	ldr	r0, [pc, #16]	; (18bcc <entropy_nrf5_get_entropy+0x54>)
   18bba:	f002 fcc3 	bl	1b544 <z_impl_k_sem_take>
	while (len) {
   18bbe:	e7e6      	b.n	18b8e <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   18bc0:	1ba4      	subs	r4, r4, r6
   18bc2:	b2a4      	uxth	r4, r4
		buf += bytes;
   18bc4:	4435      	add	r5, r6
   18bc6:	e7de      	b.n	18b86 <entropy_nrf5_get_entropy+0xe>
   18bc8:	20002d9c 	.word	0x20002d9c
   18bcc:	20002db4 	.word	0x20002db4

00018bd0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   18bd0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18bd2:	4c19      	ldr	r4, [pc, #100]	; (18c38 <entropy_nrf5_init+0x68>)
   18bd4:	2201      	movs	r2, #1
   18bd6:	4611      	mov	r1, r2
   18bd8:	4620      	mov	r0, r4
   18bda:	f00b fa96 	bl	2410a <z_impl_k_sem_init>
   18bde:	2201      	movs	r2, #1
   18be0:	2100      	movs	r1, #0
   18be2:	f104 0018 	add.w	r0, r4, #24
   18be6:	f00b fa90 	bl	2410a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   18bea:	f240 4307 	movw	r3, #1031	; 0x407
   18bee:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   18bf2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18bf6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   18bf8:	230c      	movs	r3, #12
   18bfa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   18bfe:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   18c00:	4b0e      	ldr	r3, [pc, #56]	; (18c3c <entropy_nrf5_init+0x6c>)
   18c02:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   18c06:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   18c0a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   18c0e:	f022 0201 	bic.w	r2, r2, #1
   18c12:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   18c16:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18c18:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   18c1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   18c20:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   18c24:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18c26:	6019      	str	r1, [r3, #0]
   18c28:	200d      	movs	r0, #13
   18c2a:	f7f9 fc03 	bl	12434 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   18c2e:	200d      	movs	r0, #13
   18c30:	f7f9 fbd0 	bl	123d4 <arch_irq_enable>

	return 0;
}
   18c34:	4628      	mov	r0, r5
   18c36:	bd38      	pop	{r3, r4, r5, pc}
   18c38:	20002d9c 	.word	0x20002d9c
   18c3c:	4000d000 	.word	0x4000d000

00018c40 <isr>:
{
   18c40:	b510      	push	{r4, lr}
	byte = random_byte_get();
   18c42:	f7ff fedf 	bl	18a04 <random_byte_get>
	if (byte < 0) {
   18c46:	2800      	cmp	r0, #0
   18c48:	db20      	blt.n	18c8c <isr+0x4c>
	uint8_t last  = rngp->last;
   18c4a:	4b17      	ldr	r3, [pc, #92]	; (18ca8 <isr+0x68>)
   18c4c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   18c50:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18c54:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   18c58:	1b14      	subs	r4, r2, r4
   18c5a:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   18c5e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   18c60:	d10d      	bne.n	18c7e <isr+0x3e>
	uint8_t last  = rngp->last;
   18c62:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   18c66:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   18c6a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   18c6e:	1b14      	subs	r4, r2, r4
   18c70:	ea31 0404 	bics.w	r4, r1, r4
   18c74:	d10b      	bne.n	18c8e <isr+0x4e>
   18c76:	4b0d      	ldr	r3, [pc, #52]	; (18cac <isr+0x6c>)
   18c78:	2201      	movs	r2, #1
   18c7a:	605a      	str	r2, [r3, #4]
}
   18c7c:	e00e      	b.n	18c9c <isr+0x5c>
	rngp->buffer[last] = byte;
   18c7e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   18c80:	3201      	adds	r2, #1
   18c82:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   18c84:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   18c88:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   18c8c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   18c8e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   18c90:	3201      	adds	r2, #1
   18c92:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   18c94:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   18c98:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   18c9c:	4804      	ldr	r0, [pc, #16]	; (18cb0 <isr+0x70>)
}
   18c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18ca2:	f002 bc29 	b.w	1b4f8 <z_impl_k_sem_give>
   18ca6:	bf00      	nop
   18ca8:	20002d9c 	.word	0x20002d9c
   18cac:	4000d000 	.word	0x4000d000
   18cb0:	20002db4 	.word	0x20002db4

00018cb4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   18cb4:	b530      	push	{r4, r5, lr}
	return port->config;
   18cb6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18cb8:	7b05      	ldrb	r5, [r0, #12]
   18cba:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   18cbe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   18cc2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18cc4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   18cc8:	d105      	bne.n	18cd6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   18cca:	4620      	mov	r0, r4
   18ccc:	f001 ffe2 	bl	1ac94 <nrfx_gpiote_trigger_disable>

		return 0;
   18cd0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   18cd2:	b005      	add	sp, #20
   18cd4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   18cd6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   18cd8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   18cdc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   18ce0:	d114      	bne.n	18d0c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   18ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   18ce6:	bf0c      	ite	eq
   18ce8:	2304      	moveq	r3, #4
   18cea:	2305      	movne	r3, #5
   18cec:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18cf0:	2300      	movs	r3, #0
   18cf2:	4619      	mov	r1, r3
   18cf4:	aa02      	add	r2, sp, #8
   18cf6:	4620      	mov	r0, r4
   18cf8:	f001 fe0a 	bl	1a910 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   18cfc:	4b1f      	ldr	r3, [pc, #124]	; (18d7c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   18cfe:	4298      	cmp	r0, r3
   18d00:	d139      	bne.n	18d76 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   18d02:	2101      	movs	r1, #1
   18d04:	4620      	mov	r0, r4
   18d06:	f001 ff7d 	bl	1ac04 <nrfx_gpiote_trigger_enable>
	return 0;
   18d0a:	e7e1      	b.n	18cd0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   18d0c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   18d10:	d026      	beq.n	18d60 <gpio_nrfx_pin_interrupt_configure+0xac>
   18d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   18d16:	bf14      	ite	ne
   18d18:	2301      	movne	r3, #1
   18d1a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   18d1c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   18d20:	6883      	ldr	r3, [r0, #8]
   18d22:	40cb      	lsrs	r3, r1
   18d24:	07d9      	lsls	r1, r3, #31
   18d26:	d4e3      	bmi.n	18cf0 <gpio_nrfx_pin_interrupt_configure+0x3c>
   18d28:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   18d2c:	d1e0      	bne.n	18cf0 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   18d2e:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   18d30:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   18d32:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   18d36:	4a12      	ldr	r2, [pc, #72]	; (18d80 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   18d38:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   18d3c:	bf18      	it	ne
   18d3e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   18d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   18d46:	07db      	lsls	r3, r3, #31
   18d48:	d4d2      	bmi.n	18cf0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18d4a:	f10d 0507 	add.w	r5, sp, #7
   18d4e:	4629      	mov	r1, r5
   18d50:	4620      	mov	r0, r4
   18d52:	f001 ff03 	bl	1ab5c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   18d56:	4b0b      	ldr	r3, [pc, #44]	; (18d84 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   18d58:	4298      	cmp	r0, r3
   18d5a:	d003      	beq.n	18d64 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   18d5c:	9503      	str	r5, [sp, #12]
   18d5e:	e7c7      	b.n	18cf0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   18d60:	2303      	movs	r3, #3
   18d62:	e7db      	b.n	18d1c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   18d64:	4628      	mov	r0, r5
   18d66:	f001 ff47 	bl	1abf8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   18d6a:	4b04      	ldr	r3, [pc, #16]	; (18d7c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   18d6c:	4298      	cmp	r0, r3
   18d6e:	d0f5      	beq.n	18d5c <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   18d70:	f06f 000b 	mvn.w	r0, #11
   18d74:	e7ad      	b.n	18cd2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   18d76:	f06f 0015 	mvn.w	r0, #21
   18d7a:	e7aa      	b.n	18cd2 <gpio_nrfx_pin_interrupt_configure+0x1e>
   18d7c:	0bad0000 	.word	0x0bad0000
   18d80:	50000300 	.word	0x50000300
   18d84:	0bad0004 	.word	0x0bad0004

00018d88 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   18d88:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   18d8a:	f001 ff25 	bl	1abd8 <nrfx_gpiote_is_init>
   18d8e:	4604      	mov	r4, r0
   18d90:	b968      	cbnz	r0, 18dae <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   18d92:	f001 fef9 	bl	1ab88 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   18d96:	4b08      	ldr	r3, [pc, #32]	; (18db8 <gpio_nrfx_init+0x30>)
   18d98:	4298      	cmp	r0, r3
   18d9a:	d10a      	bne.n	18db2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   18d9c:	4807      	ldr	r0, [pc, #28]	; (18dbc <gpio_nrfx_init+0x34>)
   18d9e:	4621      	mov	r1, r4
   18da0:	f001 fed6 	bl	1ab50 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18da4:	4622      	mov	r2, r4
   18da6:	2105      	movs	r1, #5
   18da8:	2006      	movs	r0, #6
   18daa:	f7f9 fb43 	bl	12434 <z_arm_irq_priority_set>
		return 0;
   18dae:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   18db0:	bd10      	pop	{r4, pc}
		return -EIO;
   18db2:	f06f 0004 	mvn.w	r0, #4
   18db6:	e7fb      	b.n	18db0 <gpio_nrfx_init+0x28>
   18db8:	0bad0000 	.word	0x0bad0000
   18dbc:	00018dc1 	.word	0x00018dc1

00018dc0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18dc0:	0942      	lsrs	r2, r0, #5
{
   18dc2:	b570      	push	{r4, r5, r6, lr}
   18dc4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18dc6:	d002      	beq.n	18dce <nrfx_gpio_handler+0xe>
   18dc8:	2a01      	cmp	r2, #1
   18dca:	d017      	beq.n	18dfc <nrfx_gpio_handler+0x3c>
}
   18dcc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18dce:	4e0d      	ldr	r6, [pc, #52]	; (18e04 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   18dd0:	6932      	ldr	r2, [r6, #16]
   18dd2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18dd4:	2900      	cmp	r1, #0
   18dd6:	d0f9      	beq.n	18dcc <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   18dd8:	f003 031f 	and.w	r3, r3, #31
   18ddc:	2501      	movs	r5, #1
   18dde:	680c      	ldr	r4, [r1, #0]
   18de0:	409d      	lsls	r5, r3
   18de2:	2900      	cmp	r1, #0
   18de4:	d0f2      	beq.n	18dcc <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   18de6:	688a      	ldr	r2, [r1, #8]
   18de8:	402a      	ands	r2, r5
   18dea:	d002      	beq.n	18df2 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   18dec:	684b      	ldr	r3, [r1, #4]
   18dee:	4630      	mov	r0, r6
   18df0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18df2:	b12c      	cbz	r4, 18e00 <nrfx_gpio_handler+0x40>
   18df4:	6823      	ldr	r3, [r4, #0]
   18df6:	4621      	mov	r1, r4
   18df8:	461c      	mov	r4, r3
   18dfa:	e7f2      	b.n	18de2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18dfc:	4e02      	ldr	r6, [pc, #8]	; (18e08 <nrfx_gpio_handler+0x48>)
   18dfe:	e7e7      	b.n	18dd0 <nrfx_gpio_handler+0x10>
   18e00:	4623      	mov	r3, r4
   18e02:	e7f8      	b.n	18df6 <nrfx_gpio_handler+0x36>
   18e04:	00024970 	.word	0x00024970
   18e08:	00024958 	.word	0x00024958

00018e0c <gpio_nrfx_pin_configure>:
{
   18e0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   18e10:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   18e12:	7b3b      	ldrb	r3, [r7, #12]
   18e14:	f001 051f 	and.w	r5, r1, #31
   18e18:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   18e1c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18e1e:	4628      	mov	r0, r5
   18e20:	f10d 0103 	add.w	r1, sp, #3
{
   18e24:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18e26:	f001 fe99 	bl	1ab5c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   18e2a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18e2e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   18e30:	d10b      	bne.n	18e4a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   18e32:	4628      	mov	r0, r5
   18e34:	f001 ff56 	bl	1ace4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   18e38:	4b3d      	ldr	r3, [pc, #244]	; (18f30 <gpio_nrfx_pin_configure+0x124>)
   18e3a:	4598      	cmp	r8, r3
   18e3c:	d103      	bne.n	18e46 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   18e3e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   18e42:	f001 fed3 	bl	1abec <nrfx_gpiote_channel_free>
		return 0;
   18e46:	2000      	movs	r0, #0
   18e48:	e00c      	b.n	18e64 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   18e4a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18e4c:	4619      	mov	r1, r3
   18e4e:	aa02      	add	r2, sp, #8
   18e50:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   18e52:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18e56:	f001 fd5b 	bl	1a910 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   18e5a:	4b35      	ldr	r3, [pc, #212]	; (18f30 <gpio_nrfx_pin_configure+0x124>)
   18e5c:	4298      	cmp	r0, r3
   18e5e:	d004      	beq.n	18e6a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   18e60:	f06f 0015 	mvn.w	r0, #21
}
   18e64:	b004      	add	sp, #16
   18e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   18e6a:	4580      	cmp	r8, r0
   18e6c:	d103      	bne.n	18e76 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   18e6e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   18e72:	f001 febb 	bl	1abec <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   18e76:	03a3      	lsls	r3, r4, #14
   18e78:	d54b      	bpl.n	18f12 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   18e7a:	f240 3306 	movw	r3, #774	; 0x306
   18e7e:	4023      	ands	r3, r4
   18e80:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   18e84:	d019      	beq.n	18eba <gpio_nrfx_pin_configure+0xae>
   18e86:	d80c      	bhi.n	18ea2 <gpio_nrfx_pin_configure+0x96>
   18e88:	2b06      	cmp	r3, #6
   18e8a:	d017      	beq.n	18ebc <gpio_nrfx_pin_configure+0xb0>
   18e8c:	d804      	bhi.n	18e98 <gpio_nrfx_pin_configure+0x8c>
   18e8e:	b1ab      	cbz	r3, 18ebc <gpio_nrfx_pin_configure+0xb0>
   18e90:	2b02      	cmp	r3, #2
   18e92:	d1e5      	bne.n	18e60 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   18e94:	2304      	movs	r3, #4
   18e96:	e011      	b.n	18ebc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   18e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   18e9c:	d1e0      	bne.n	18e60 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   18e9e:	2301      	movs	r3, #1
   18ea0:	e00c      	b.n	18ebc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   18ea2:	f240 2202 	movw	r2, #514	; 0x202
   18ea6:	4293      	cmp	r3, r2
   18ea8:	d027      	beq.n	18efa <gpio_nrfx_pin_configure+0xee>
   18eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   18eae:	d026      	beq.n	18efe <gpio_nrfx_pin_configure+0xf2>
   18eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   18eb4:	d1d4      	bne.n	18e60 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   18eb6:	2302      	movs	r3, #2
   18eb8:	e000      	b.n	18ebc <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   18eba:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   18ebc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   18ec0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   18ec4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   18ec8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   18eca:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   18ece:	bf54      	ite	pl
   18ed0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   18ed4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   18ed6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   18ed8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   18edc:	d511      	bpl.n	18f02 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   18ede:	687a      	ldr	r2, [r7, #4]
   18ee0:	2301      	movs	r3, #1
   18ee2:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   18ee4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   18ee8:	2200      	movs	r2, #0
   18eea:	a901      	add	r1, sp, #4
   18eec:	4628      	mov	r0, r5
   18eee:	f001 fdbd 	bl	1aa6c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   18ef2:	4b0f      	ldr	r3, [pc, #60]	; (18f30 <gpio_nrfx_pin_configure+0x124>)
   18ef4:	4298      	cmp	r0, r3
   18ef6:	d0a6      	beq.n	18e46 <gpio_nrfx_pin_configure+0x3a>
   18ef8:	e7b2      	b.n	18e60 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   18efa:	2305      	movs	r3, #5
   18efc:	e7de      	b.n	18ebc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   18efe:	2303      	movs	r3, #3
   18f00:	e7dc      	b.n	18ebc <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   18f02:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   18f04:	bf41      	itttt	mi
   18f06:	2301      	movmi	r3, #1
   18f08:	687a      	ldrmi	r2, [r7, #4]
   18f0a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   18f0c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   18f10:	e7ea      	b.n	18ee8 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   18f12:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   18f14:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   18f18:	bf54      	ite	pl
   18f1a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   18f1e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   18f20:	461a      	mov	r2, r3
   18f22:	a901      	add	r1, sp, #4
   18f24:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   18f26:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   18f2a:	f001 fcf1 	bl	1a910 <nrfx_gpiote_input_configure>
   18f2e:	e7e0      	b.n	18ef2 <gpio_nrfx_pin_configure+0xe6>
   18f30:	0bad0000 	.word	0x0bad0000

00018f34 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   18f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        case 1: return NRF_P1;
   18f38:	4e2c      	ldr	r6, [pc, #176]	; (18fec <pinctrl_configure_pins+0xb8>)
   18f3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18f3e:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   18f40:	4281      	cmp	r1, r0
   18f42:	d102      	bne.n	18f4a <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   18f44:	2000      	movs	r0, #0
}
   18f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   18f4a:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   18f4c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   18f50:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   18f54:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   18f56:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   18f5a:	bf08      	it	eq
   18f5c:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   18f60:	2d03      	cmp	r5, #3
   18f62:	d840      	bhi.n	18fe6 <pinctrl_configure_pins+0xb2>
   18f64:	e8df f005 	tbb	[pc, r5]
   18f68:	3c391402 	.word	0x3c391402
			NRF_PSEL_UART(reg, TXD) = pin;
   18f6c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   18f70:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   18f74:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   18f78:	f003 051f 	and.w	r5, r3, #31
        case 1: return NRF_P1;
   18f7c:	bf14      	ite	ne
   18f7e:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   18f82:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18f84:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   18f88:	f8cc 5508 	str.w	r5, [ip, #1288]	; 0x508
   18f8c:	2501      	movs	r5, #1
   18f8e:	e002      	b.n	18f96 <pinctrl_configure_pins+0x62>
			NRF_PSEL_UART(reg, RXD) = pin;
   18f90:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
   18f94:	2500      	movs	r5, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   18f96:	f850 9b04 	ldr.w	r9, [r0], #4
   18f9a:	f409 5e00 	and.w	lr, r9, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   18f9e:	f1be 0f00 	cmp.w	lr, #0
    *p_pin = pin_number & 0x1F;
   18fa2:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   18fa6:	ea4f 1353 	mov.w	r3, r3, lsr #5
   18faa:	bf0e      	itee	eq
   18fac:	46ae      	moveq	lr, r5
   18fae:	f04f 0e01 	movne.w	lr, #1
   18fb2:	2500      	movne	r5, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   18fb4:	f3c9 19c1 	ubfx	r9, r9, #7, #2
        case 0: return NRF_P0;
   18fb8:	2b01      	cmp	r3, #1
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   18fba:	ea4f 2304 	mov.w	r3, r4, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   18fbe:	ea43 0389 	orr.w	r3, r3, r9, lsl #2
        case 0: return NRF_P0;
   18fc2:	bf0c      	ite	eq
   18fc4:	46b0      	moveq	r8, r6
   18fc6:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   18fca:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   18fcc:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   18fd0:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   18fd4:	f848 302c 	str.w	r3, [r8, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   18fd8:	e7b2      	b.n	18f40 <pinctrl_configure_pins+0xc>
			NRF_PSEL_UART(reg, RTS) = pin;
   18fda:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   18fde:	e7c7      	b.n	18f70 <pinctrl_configure_pins+0x3c>
			NRF_PSEL_UART(reg, CTS) = pin;
   18fe0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   18fe4:	e7d6      	b.n	18f94 <pinctrl_configure_pins+0x60>
		switch (NRF_GET_FUN(pins[i])) {
   18fe6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18fea:	e7ac      	b.n	18f46 <pinctrl_configure_pins+0x12>
   18fec:	50000300 	.word	0x50000300

00018ff0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   18ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   18ff2:	794b      	ldrb	r3, [r1, #5]
   18ff4:	2b01      	cmp	r3, #1
   18ff6:	d026      	beq.n	19046 <uarte_nrfx_configure+0x56>
   18ff8:	2b03      	cmp	r3, #3
   18ffa:	d121      	bne.n	19040 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   18ffc:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   18ffe:	798b      	ldrb	r3, [r1, #6]
   19000:	2b03      	cmp	r3, #3
   19002:	d11d      	bne.n	19040 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   19004:	79ce      	ldrb	r6, [r1, #7]
   19006:	b10e      	cbz	r6, 1900c <uarte_nrfx_configure+0x1c>
   19008:	2e01      	cmp	r6, #1
   1900a:	d119      	bne.n	19040 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1900c:	790a      	ldrb	r2, [r1, #4]
   1900e:	b112      	cbz	r2, 19016 <uarte_nrfx_configure+0x26>
   19010:	2a02      	cmp	r2, #2
   19012:	d115      	bne.n	19040 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   19014:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   19016:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   19018:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1901a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1901e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   19020:	d067      	beq.n	190f2 <uarte_nrfx_configure+0x102>
   19022:	d82d      	bhi.n	19080 <uarte_nrfx_configure+0x90>
   19024:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   19028:	d066      	beq.n	190f8 <uarte_nrfx_configure+0x108>
   1902a:	d816      	bhi.n	1905a <uarte_nrfx_configure+0x6a>
   1902c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   19030:	d064      	beq.n	190fc <uarte_nrfx_configure+0x10c>
   19032:	d80a      	bhi.n	1904a <uarte_nrfx_configure+0x5a>
   19034:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   19038:	d063      	beq.n	19102 <uarte_nrfx_configure+0x112>
   1903a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1903e:	d063      	beq.n	19108 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   19040:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19044:	e054      	b.n	190f0 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   19046:	2500      	movs	r5, #0
   19048:	e7d9      	b.n	18ffe <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1904a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1904e:	d05e      	beq.n	1910e <uarte_nrfx_configure+0x11e>
   19050:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   19054:	d1f4      	bne.n	19040 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   19056:	4b38      	ldr	r3, [pc, #224]	; (19138 <uarte_nrfx_configure+0x148>)
   19058:	e03c      	b.n	190d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1905a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1905e:	d059      	beq.n	19114 <uarte_nrfx_configure+0x124>
   19060:	d807      	bhi.n	19072 <uarte_nrfx_configure+0x82>
   19062:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   19066:	d057      	beq.n	19118 <uarte_nrfx_configure+0x128>
   19068:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1906c:	d1e8      	bne.n	19040 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1906e:	4b33      	ldr	r3, [pc, #204]	; (1913c <uarte_nrfx_configure+0x14c>)
   19070:	e030      	b.n	190d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   19072:	f647 2412 	movw	r4, #31250	; 0x7a12
   19076:	42a3      	cmp	r3, r4
   19078:	d1e2      	bne.n	19040 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1907a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1907e:	e029      	b.n	190d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   19080:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   19084:	d04a      	beq.n	1911c <uarte_nrfx_configure+0x12c>
   19086:	d813      	bhi.n	190b0 <uarte_nrfx_configure+0xc0>
   19088:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1908c:	d049      	beq.n	19122 <uarte_nrfx_configure+0x132>
   1908e:	d809      	bhi.n	190a4 <uarte_nrfx_configure+0xb4>
   19090:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   19094:	42a3      	cmp	r3, r4
   19096:	d046      	beq.n	19126 <uarte_nrfx_configure+0x136>
   19098:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1909c:	d1d0      	bne.n	19040 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1909e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   190a2:	e017      	b.n	190d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   190a4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   190a8:	d1ca      	bne.n	19040 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   190aa:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   190ae:	e011      	b.n	190d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   190b0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   190b4:	d03a      	beq.n	1912c <uarte_nrfx_configure+0x13c>
   190b6:	d808      	bhi.n	190ca <uarte_nrfx_configure+0xda>
   190b8:	4c21      	ldr	r4, [pc, #132]	; (19140 <uarte_nrfx_configure+0x150>)
   190ba:	42a3      	cmp	r3, r4
   190bc:	d039      	beq.n	19132 <uarte_nrfx_configure+0x142>
   190be:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   190c2:	d1bd      	bne.n	19040 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   190c4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   190c8:	e004      	b.n	190d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   190ca:	4c1e      	ldr	r4, [pc, #120]	; (19144 <uarte_nrfx_configure+0x154>)
   190cc:	42a3      	cmp	r3, r4
   190ce:	d1b7      	bne.n	19040 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   190d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   190d4:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   190d6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   190da:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   190dc:	4335      	orrs	r5, r6
   190de:	681b      	ldr	r3, [r3, #0]
   190e0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   190e2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   190e6:	c903      	ldmia	r1, {r0, r1}
   190e8:	1d23      	adds	r3, r4, #4
   190ea:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   190ee:	2000      	movs	r0, #0
}
   190f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   190f2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   190f6:	e7ed      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   190f8:	4b13      	ldr	r3, [pc, #76]	; (19148 <uarte_nrfx_configure+0x158>)
   190fa:	e7eb      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   190fc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   19100:	e7e8      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   19102:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   19106:	e7e5      	b.n	190d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   19108:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1910c:	e7e2      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1910e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   19112:	e7df      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   19114:	4b0d      	ldr	r3, [pc, #52]	; (1914c <uarte_nrfx_configure+0x15c>)
   19116:	e7dd      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   19118:	4b0d      	ldr	r3, [pc, #52]	; (19150 <uarte_nrfx_configure+0x160>)
   1911a:	e7db      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1911c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   19120:	e7d8      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   19122:	4b0c      	ldr	r3, [pc, #48]	; (19154 <uarte_nrfx_configure+0x164>)
   19124:	e7d6      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   19126:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1912a:	e7d3      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1912c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19130:	e7d0      	b.n	190d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   19132:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   19136:	e7cd      	b.n	190d4 <uarte_nrfx_configure+0xe4>
   19138:	0013b000 	.word	0x0013b000
   1913c:	004ea000 	.word	0x004ea000
   19140:	0003d090 	.word	0x0003d090
   19144:	000f4240 	.word	0x000f4240
   19148:	00275000 	.word	0x00275000
   1914c:	0075c000 	.word	0x0075c000
   19150:	003af000 	.word	0x003af000
   19154:	013a9000 	.word	0x013a9000

00019158 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   19158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1915c:	4680      	mov	r8, r0
   1915e:	2200      	movs	r2, #0
   19160:	2101      	movs	r1, #1
   19162:	2002      	movs	r0, #2
   19164:	f7f9 f966 	bl	12434 <z_arm_irq_priority_set>
   19168:	2002      	movs	r0, #2
   1916a:	f7f9 f933 	bl	123d4 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1916e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   19172:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   19176:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19178:	2100      	movs	r1, #0
   1917a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1917e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   19182:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   19186:	aa01      	add	r2, sp, #4
   19188:	4648      	mov	r0, r9
   1918a:	f00a fc3d 	bl	23a08 <pinctrl_lookup_state>
	if (ret < 0) {
   1918e:	1e05      	subs	r5, r0, #0
   19190:	db54      	blt.n	1923c <uarte_0_init+0xe4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   19192:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   19194:	f8d9 2000 	ldr.w	r2, [r9]
   19198:	7919      	ldrb	r1, [r3, #4]
   1919a:	6818      	ldr	r0, [r3, #0]
   1919c:	f7ff feca 	bl	18f34 <pinctrl_configure_pins>
	if (err < 0) {
   191a0:	1e05      	subs	r5, r0, #0
   191a2:	db4b      	blt.n	1923c <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   191a4:	1d31      	adds	r1, r6, #4
   191a6:	4640      	mov	r0, r8
   191a8:	f7ff ff22 	bl	18ff0 <uarte_nrfx_configure>
	if (err) {
   191ac:	4605      	mov	r5, r0
   191ae:	2800      	cmp	r0, #0
   191b0:	d144      	bne.n	1923c <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   191b2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   191b4:	0799      	lsls	r1, r3, #30
   191b6:	d51a      	bpl.n	191ee <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   191b8:	f106 0018 	add.w	r0, r6, #24
   191bc:	f001 fe94 	bl	1aee8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   191c0:	4b22      	ldr	r3, [pc, #136]	; (1924c <uarte_0_init+0xf4>)
   191c2:	4298      	cmp	r0, r3
   191c4:	d13e      	bne.n	19244 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   191c6:	7e33      	ldrb	r3, [r6, #24]
   191c8:	00db      	lsls	r3, r3, #3
   191ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   191ce:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   191d2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   191d6:	f504 7190 	add.w	r1, r4, #288	; 0x120
   191da:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   191de:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   191e2:	7e32      	ldrb	r2, [r6, #24]
   191e4:	2301      	movs	r3, #1
   191e6:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   191e8:	4a19      	ldr	r2, [pc, #100]	; (19250 <uarte_0_init+0xf8>)
   191ea:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   191ee:	2308      	movs	r3, #8
   191f0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   191f4:	7a3b      	ldrb	r3, [r7, #8]
   191f6:	b953      	cbnz	r3, 1920e <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   191f8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   191fc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19200:	6973      	ldr	r3, [r6, #20]
   19202:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19206:	2301      	movs	r3, #1
   19208:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1920c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1920e:	687b      	ldr	r3, [r7, #4]
   19210:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   19212:	bf5c      	itt	pl
   19214:	f44f 7380 	movpl.w	r3, #256	; 0x100
   19218:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1921c:	687b      	ldr	r3, [r7, #4]
   1921e:	06db      	lsls	r3, r3, #27
   19220:	bf44      	itt	mi
   19222:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   19226:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1922a:	6933      	ldr	r3, [r6, #16]
   1922c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19230:	2300      	movs	r3, #0
   19232:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19236:	2301      	movs	r3, #1
   19238:	60a3      	str	r3, [r4, #8]
   1923a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1923c:	4628      	mov	r0, r5
   1923e:	b003      	add	sp, #12
   19240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   19244:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   19248:	e7f8      	b.n	1923c <uarte_0_init+0xe4>
   1924a:	bf00      	nop
   1924c:	0bad0000 	.word	0x0bad0000
   19250:	4001f000 	.word	0x4001f000

00019254 <uarte_nrfx_poll_out>:
{
   19254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19256:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   19258:	6907      	ldr	r7, [r0, #16]
{
   1925a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1925c:	f00a fe9d 	bl	23f9a <k_is_in_isr>
   19260:	b9b0      	cbnz	r0, 19290 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   19262:	4b2e      	ldr	r3, [pc, #184]	; (1931c <uarte_nrfx_poll_out+0xc8>)
   19264:	781b      	ldrb	r3, [r3, #0]
   19266:	b19b      	cbz	r3, 19290 <uarte_nrfx_poll_out+0x3c>
{
   19268:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1926a:	6860      	ldr	r0, [r4, #4]
   1926c:	f00a fc02 	bl	23a74 <is_tx_ready.isra.0>
   19270:	bb00      	cbnz	r0, 192b4 <uarte_nrfx_poll_out+0x60>
   19272:	2001      	movs	r0, #1
   19274:	f00a fd4d 	bl	23d12 <nrfx_busy_wait>
   19278:	3e01      	subs	r6, #1
   1927a:	d1f6      	bne.n	1926a <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1927c:	2100      	movs	r1, #0
   1927e:	2021      	movs	r0, #33	; 0x21
   19280:	f002 fe1a 	bl	1beb8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19284:	e7f0      	b.n	19268 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   19286:	f386 8811 	msr	BASEPRI, r6
   1928a:	f3bf 8f6f 	isb	sy
}
   1928e:	e7f5      	b.n	1927c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   19290:	f04f 0340 	mov.w	r3, #64	; 0x40
   19294:	f3ef 8611 	mrs	r6, BASEPRI
   19298:	f383 8812 	msr	BASEPRI_MAX, r3
   1929c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   192a0:	6860      	ldr	r0, [r4, #4]
   192a2:	4631      	mov	r1, r6
   192a4:	f00a fbe6 	bl	23a74 <is_tx_ready.isra.0>
   192a8:	b990      	cbnz	r0, 192d0 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   192aa:	f386 8811 	msr	BASEPRI, r6
   192ae:	f3bf 8f6f 	isb	sy
}
   192b2:	e7ed      	b.n	19290 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   192b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   192b8:	f3ef 8611 	mrs	r6, BASEPRI
   192bc:	f383 8812 	msr	BASEPRI_MAX, r3
   192c0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   192c4:	6860      	ldr	r0, [r4, #4]
   192c6:	4631      	mov	r1, r6
   192c8:	f00a fbd4 	bl	23a74 <is_tx_ready.isra.0>
   192cc:	2800      	cmp	r0, #0
   192ce:	d0da      	beq.n	19286 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   192d0:	693b      	ldr	r3, [r7, #16]
   192d2:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   192d4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   192d6:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   192d8:	6813      	ldr	r3, [r2, #0]
   192da:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   192de:	2001      	movs	r0, #1
   192e0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   192e4:	2000      	movs	r0, #0
   192e6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   192ea:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   192ee:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   192f2:	6852      	ldr	r2, [r2, #4]
   192f4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   192f8:	06d2      	lsls	r2, r2, #27
   192fa:	d508      	bpl.n	1930e <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   192fc:	6862      	ldr	r2, [r4, #4]
   192fe:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   19300:	2008      	movs	r0, #8
   19302:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   19306:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1930a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1930e:	2201      	movs	r2, #1
   19310:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   19312:	f381 8811 	msr	BASEPRI, r1
   19316:	f3bf 8f6f 	isb	sy
}
   1931a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1931c:	20003aa7 	.word	0x20003aa7

00019320 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   19320:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   19322:	2301      	movs	r3, #1
   19324:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19326:	4a0e      	ldr	r2, [pc, #56]	; (19360 <compare_int_lock+0x40>)
   19328:	f3bf 8f5b 	dmb	ish
   1932c:	43dc      	mvns	r4, r3
   1932e:	e852 1f00 	ldrex	r1, [r2]
   19332:	ea01 0504 	and.w	r5, r1, r4
   19336:	e842 5600 	strex	r6, r5, [r2]
   1933a:	2e00      	cmp	r6, #0
   1933c:	d1f7      	bne.n	1932e <compare_int_lock+0xe>
   1933e:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19346:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19348:	4806      	ldr	r0, [pc, #24]	; (19364 <compare_int_lock+0x44>)
   1934a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1934e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19352:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   19356:	420b      	tst	r3, r1
}
   19358:	bf14      	ite	ne
   1935a:	2001      	movne	r0, #1
   1935c:	2000      	moveq	r0, #0
   1935e:	bd70      	pop	{r4, r5, r6, pc}
   19360:	20002e0c 	.word	0x20002e0c
   19364:	40011000 	.word	0x40011000

00019368 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   19368:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1936a:	490e      	ldr	r1, [pc, #56]	; (193a4 <sys_clock_timeout_handler+0x3c>)
   1936c:	e9d1 3400 	ldrd	r3, r4, [r1]
   19370:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   19372:	18c3      	adds	r3, r0, r3
   19374:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   19378:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1937c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   19380:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   19384:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   19388:	d209      	bcs.n	1939e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1938a:	4b07      	ldr	r3, [pc, #28]	; (193a8 <sys_clock_timeout_handler+0x40>)
   1938c:	681b      	ldr	r3, [r3, #0]
   1938e:	0a1a      	lsrs	r2, r3, #8
   19390:	061b      	lsls	r3, r3, #24
   19392:	199c      	adds	r4, r3, r6
   19394:	4b05      	ldr	r3, [pc, #20]	; (193ac <sys_clock_timeout_handler+0x44>)
   19396:	f142 0500 	adc.w	r5, r2, #0
   1939a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1939e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   193a0:	f002 bef2 	b.w	1c188 <sys_clock_announce>
   193a4:	20001c70 	.word	0x20001c70
   193a8:	20002e10 	.word	0x20002e10
   193ac:	20001c78 	.word	0x20001c78

000193b0 <compare_int_unlock>:
	if (key) {
   193b0:	b311      	cbz	r1, 193f8 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   193b2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   193b6:	2301      	movs	r3, #1
   193b8:	4a10      	ldr	r2, [pc, #64]	; (193fc <compare_int_unlock+0x4c>)
   193ba:	4083      	lsls	r3, r0
   193bc:	e852 cf00 	ldrex	ip, [r2]
   193c0:	ea4c 0c03 	orr.w	ip, ip, r3
   193c4:	e842 c100 	strex	r1, ip, [r2]
   193c8:	2900      	cmp	r1, #0
   193ca:	d1f7      	bne.n	193bc <compare_int_unlock+0xc>
   193cc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   193d0:	4a0b      	ldr	r2, [pc, #44]	; (19400 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   193d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   193d6:	4083      	lsls	r3, r0
   193d8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   193dc:	4b09      	ldr	r3, [pc, #36]	; (19404 <compare_int_unlock+0x54>)
   193de:	f3bf 8f5b 	dmb	ish
   193e2:	681b      	ldr	r3, [r3, #0]
   193e4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   193e8:	40c3      	lsrs	r3, r0
   193ea:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   193ec:	bf42      	ittt	mi
   193ee:	4b06      	ldrmi	r3, [pc, #24]	; (19408 <compare_int_unlock+0x58>)
   193f0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   193f4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   193f8:	4770      	bx	lr
   193fa:	bf00      	nop
   193fc:	20002e0c 	.word	0x20002e0c
   19400:	40011000 	.word	0x40011000
   19404:	20002e08 	.word	0x20002e08
   19408:	e000e100 	.word	0xe000e100

0001940c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1940c:	4b0d      	ldr	r3, [pc, #52]	; (19444 <z_nrf_rtc_timer_read+0x38>)
   1940e:	6818      	ldr	r0, [r3, #0]
   19410:	0a01      	lsrs	r1, r0, #8
   19412:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   19414:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   19418:	4b0b      	ldr	r3, [pc, #44]	; (19448 <z_nrf_rtc_timer_read+0x3c>)
   1941a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1941e:	1818      	adds	r0, r3, r0
   19420:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   19424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19428:	d20a      	bcs.n	19440 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1942a:	4b08      	ldr	r3, [pc, #32]	; (1944c <z_nrf_rtc_timer_read+0x40>)
   1942c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19430:	4290      	cmp	r0, r2
   19432:	eb71 0303 	sbcs.w	r3, r1, r3
   19436:	d203      	bcs.n	19440 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   19438:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1943c:	f141 0100 	adc.w	r1, r1, #0
}
   19440:	4770      	bx	lr
   19442:	bf00      	nop
   19444:	20002e10 	.word	0x20002e10
   19448:	40011000 	.word	0x40011000
   1944c:	20001c78 	.word	0x20001c78

00019450 <compare_set>:
{
   19450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19454:	4616      	mov	r6, r2
   19456:	461f      	mov	r7, r3
   19458:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1945a:	f7ff ff61 	bl	19320 <compare_int_lock>
   1945e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   19460:	f7ff ffd4 	bl	1940c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   19464:	42b0      	cmp	r0, r6
   19466:	eb71 0307 	sbcs.w	r3, r1, r7
   1946a:	d251      	bcs.n	19510 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1946c:	4b3a      	ldr	r3, [pc, #232]	; (19558 <compare_set+0x108>)
   1946e:	1a30      	subs	r0, r6, r0
   19470:	eb67 0101 	sbc.w	r1, r7, r1
   19474:	4298      	cmp	r0, r3
   19476:	f171 0100 	sbcs.w	r1, r1, #0
   1947a:	d26a      	bcs.n	19552 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   1947c:	4b37      	ldr	r3, [pc, #220]	; (1955c <compare_set+0x10c>)
   1947e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   19482:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   19486:	429f      	cmp	r7, r3
   19488:	bf08      	it	eq
   1948a:	4296      	cmpeq	r6, r2
   1948c:	d04e      	beq.n	1952c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1948e:	4934      	ldr	r1, [pc, #208]	; (19560 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19490:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19494:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19498:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1949c:	00ad      	lsls	r5, r5, #2
   1949e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   194a2:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   194a4:	b2ad      	uxth	r5, r5
   194a6:	f00a fb2f 	bl	23b08 <event_clear>
	return absolute_time & COUNTER_MAX;
   194aa:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   194ae:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   194b2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   194b6:	4a2b      	ldr	r2, [pc, #172]	; (19564 <compare_set+0x114>)
   194b8:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   194ba:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   194be:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   194c0:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   194c4:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   194c6:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   194ca:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   194ce:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   194d2:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   194d6:	f06f 0002 	mvn.w	r0, #2
   194da:	eba0 0008 	sub.w	r0, r0, r8
   194de:	4460      	add	r0, ip
   194e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   194e4:	4290      	cmp	r0, r2
   194e6:	d921      	bls.n	1952c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   194e8:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   194ea:	b160      	cbz	r0, 19506 <compare_set+0xb6>
     return p_reg->COUNTER;
   194ec:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   194f0:	eba8 000b 	sub.w	r0, r8, fp
   194f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   194f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   194fc:	d916      	bls.n	1952c <compare_set+0xdc>
					event_clear(chan);
   194fe:	4620      	mov	r0, r4
   19500:	f00a fb02 	bl	23b08 <event_clear>
   19504:	4a17      	ldr	r2, [pc, #92]	; (19564 <compare_set+0x114>)
			cc_val = now + cc_inc;
   19506:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   1950a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1950e:	e7d9      	b.n	194c4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   19510:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19512:	4a15      	ldr	r2, [pc, #84]	; (19568 <compare_set+0x118>)
   19514:	f3bf 8f5b 	dmb	ish
   19518:	40a3      	lsls	r3, r4
   1951a:	e852 0f00 	ldrex	r0, [r2]
   1951e:	4318      	orrs	r0, r3
   19520:	e842 0100 	strex	r1, r0, [r2]
   19524:	2900      	cmp	r1, #0
   19526:	d1f8      	bne.n	1951a <compare_set+0xca>
   19528:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1952c:	490b      	ldr	r1, [pc, #44]	; (1955c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   1952e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   19530:	0123      	lsls	r3, r4, #4
   19532:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   19536:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   1953a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1953c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1953e:	6053      	str	r3, [r2, #4]
	return ret;
   19540:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   19542:	4620      	mov	r0, r4
   19544:	9900      	ldr	r1, [sp, #0]
   19546:	f7ff ff33 	bl	193b0 <compare_int_unlock>
}
   1954a:	4628      	mov	r0, r5
   1954c:	b003      	add	sp, #12
   1954e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   19552:	f06f 0515 	mvn.w	r5, #21
   19556:	e7f4      	b.n	19542 <compare_set+0xf2>
   19558:	00800001 	.word	0x00800001
   1955c:	20001c60 	.word	0x20001c60
   19560:	40011000 	.word	0x40011000
   19564:	007ffffd 	.word	0x007ffffd
   19568:	20002e08 	.word	0x20002e08

0001956c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1956c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   1956e:	4c1b      	ldr	r4, [pc, #108]	; (195dc <sys_clock_driver_init+0x70>)
   19570:	4b1b      	ldr	r3, [pc, #108]	; (195e0 <sys_clock_driver_init+0x74>)
   19572:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   19576:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1957a:	4b1a      	ldr	r3, [pc, #104]	; (195e4 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   1957c:	2500      	movs	r5, #0
   1957e:	f04f 30ff 	mov.w	r0, #4294967295
   19582:	f04f 31ff 	mov.w	r1, #4294967295
   19586:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1958a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1958e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19592:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19596:	4b14      	ldr	r3, [pc, #80]	; (195e8 <sys_clock_driver_init+0x7c>)
   19598:	2602      	movs	r6, #2
   1959a:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1959e:	2101      	movs	r1, #1
   195a0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   195a4:	2011      	movs	r0, #17
   195a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   195aa:	462a      	mov	r2, r5
   195ac:	f7f8 ff42 	bl	12434 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   195b0:	2011      	movs	r0, #17
   195b2:	f7f8 ff0f 	bl	123d4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   195b6:	4a0d      	ldr	r2, [pc, #52]	; (195ec <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   195b8:	2301      	movs	r3, #1
   195ba:	60a3      	str	r3, [r4, #8]
   195bc:	6023      	str	r3, [r4, #0]
   195be:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   195c0:	4b0b      	ldr	r3, [pc, #44]	; (195f0 <sys_clock_driver_init+0x84>)
   195c2:	4a0c      	ldr	r2, [pc, #48]	; (195f4 <sys_clock_driver_init+0x88>)
   195c4:	9300      	str	r3, [sp, #0]
   195c6:	9501      	str	r5, [sp, #4]
   195c8:	2300      	movs	r3, #0
   195ca:	4628      	mov	r0, r5
   195cc:	f7ff ff40 	bl	19450 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   195d0:	4630      	mov	r0, r6
   195d2:	f7ff f971 	bl	188b8 <z_nrf_clock_control_lf_on>

	return 0;
}
   195d6:	4628      	mov	r0, r5
   195d8:	b002      	add	sp, #8
   195da:	bd70      	pop	{r4, r5, r6, pc}
   195dc:	40011000 	.word	0x40011000
   195e0:	000f0003 	.word	0x000f0003
   195e4:	20001c60 	.word	0x20001c60
   195e8:	e000e100 	.word	0xe000e100
   195ec:	20002e0c 	.word	0x20002e0c
   195f0:	00019369 	.word	0x00019369
   195f4:	007fffff 	.word	0x007fffff

000195f8 <rtc_nrf_isr>:
{
   195f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   195fc:	4c2b      	ldr	r4, [pc, #172]	; (196ac <rtc_nrf_isr+0xb4>)
   195fe:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   19602:	0799      	lsls	r1, r3, #30
   19604:	d50b      	bpl.n	1961e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19606:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1960a:	b143      	cbz	r3, 1961e <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1960c:	4a28      	ldr	r2, [pc, #160]	; (196b0 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1960e:	2300      	movs	r3, #0
   19610:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19614:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19618:	6813      	ldr	r3, [r2, #0]
   1961a:	3301      	adds	r3, #1
   1961c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1961e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   19622:	03da      	lsls	r2, r3, #15
   19624:	d523      	bpl.n	1966e <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19626:	f3bf 8f5b 	dmb	ish
   1962a:	4b22      	ldr	r3, [pc, #136]	; (196b4 <rtc_nrf_isr+0xbc>)
   1962c:	e853 2f00 	ldrex	r2, [r3]
   19630:	f022 0101 	bic.w	r1, r2, #1
   19634:	e843 1000 	strex	r0, r1, [r3]
   19638:	2800      	cmp	r0, #0
   1963a:	d1f7      	bne.n	1962c <rtc_nrf_isr+0x34>
   1963c:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   19640:	07d3      	lsls	r3, r2, #31
   19642:	d402      	bmi.n	1964a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19644:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   19648:	b18b      	cbz	r3, 1966e <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1964a:	2500      	movs	r5, #0
   1964c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   19650:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   19654:	f7ff feda 	bl	1940c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19658:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1965c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1965e:	4b16      	ldr	r3, [pc, #88]	; (196b8 <rtc_nrf_isr+0xc0>)
   19660:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   19664:	42b0      	cmp	r0, r6
   19666:	41b9      	sbcs	r1, r7
   19668:	d204      	bcs.n	19674 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1966a:	f382 8810 	msr	PRIMASK, r2
}
   1966e:	b003      	add	sp, #12
   19670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   19674:	f04f 38ff 	mov.w	r8, #4294967295
   19678:	f04f 39ff 	mov.w	r9, #4294967295
   1967c:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   19680:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   19684:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   19686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1968a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1968e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   19692:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   19696:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1969a:	2900      	cmp	r1, #0
   1969c:	d0e7      	beq.n	1966e <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1969e:	9000      	str	r0, [sp, #0]
   196a0:	4632      	mov	r2, r6
   196a2:	463b      	mov	r3, r7
   196a4:	4628      	mov	r0, r5
   196a6:	4788      	blx	r1
   196a8:	e7e1      	b.n	1966e <rtc_nrf_isr+0x76>
   196aa:	bf00      	nop
   196ac:	40011000 	.word	0x40011000
   196b0:	20002e10 	.word	0x20002e10
   196b4:	20002e08 	.word	0x20002e08
   196b8:	20001c60 	.word	0x20001c60

000196bc <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   196bc:	1c43      	adds	r3, r0, #1
{
   196be:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   196c0:	d022      	beq.n	19708 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   196c2:	2801      	cmp	r0, #1
   196c4:	dd22      	ble.n	1970c <sys_clock_set_timeout+0x50>
   196c6:	4a12      	ldr	r2, [pc, #72]	; (19710 <sys_clock_set_timeout+0x54>)
   196c8:	4b12      	ldr	r3, [pc, #72]	; (19714 <sys_clock_set_timeout+0x58>)
   196ca:	4290      	cmp	r0, r2
   196cc:	bfd4      	ite	le
   196ce:	4604      	movle	r4, r0
   196d0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   196d2:	f7ff fe9b 	bl	1940c <z_nrf_rtc_timer_read>
   196d6:	4b10      	ldr	r3, [pc, #64]	; (19718 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   196d8:	490e      	ldr	r1, [pc, #56]	; (19714 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   196da:	e9d3 2300 	ldrd	r2, r3, [r3]
   196de:	1a80      	subs	r0, r0, r2
		cyc = 0;
   196e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   196e4:	bf28      	it	cs
   196e6:	2400      	movcs	r4, #0
	cyc += unannounced;
   196e8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   196ea:	428c      	cmp	r4, r1
   196ec:	bf28      	it	cs
   196ee:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   196f0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   196f2:	490a      	ldr	r1, [pc, #40]	; (1971c <sys_clock_set_timeout+0x60>)
   196f4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   196f6:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   196fa:	9001      	str	r0, [sp, #4]
   196fc:	f143 0300 	adc.w	r3, r3, #0
   19700:	f7ff fea6 	bl	19450 <compare_set>
}
   19704:	b002      	add	sp, #8
   19706:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   19708:	4c02      	ldr	r4, [pc, #8]	; (19714 <sys_clock_set_timeout+0x58>)
   1970a:	e7e2      	b.n	196d2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1970c:	2401      	movs	r4, #1
   1970e:	e7e0      	b.n	196d2 <sys_clock_set_timeout+0x16>
   19710:	007ffffe 	.word	0x007ffffe
   19714:	007fffff 	.word	0x007fffff
   19718:	20001c70 	.word	0x20001c70
   1971c:	00019369 	.word	0x00019369

00019720 <sys_clock_elapsed>:
{
   19720:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   19722:	f7ff fe73 	bl	1940c <z_nrf_rtc_timer_read>
   19726:	4b02      	ldr	r3, [pc, #8]	; (19730 <sys_clock_elapsed+0x10>)
   19728:	681b      	ldr	r3, [r3, #0]
}
   1972a:	1ac0      	subs	r0, r0, r3
   1972c:	bd08      	pop	{r3, pc}
   1972e:	bf00      	nop
   19730:	20001c70 	.word	0x20001c70

00019734 <sys_clock_disable>:
{
   19734:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19736:	4c08      	ldr	r4, [pc, #32]	; (19758 <sys_clock_disable+0x24>)
   19738:	2301      	movs	r3, #1
   1973a:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   1973c:	2011      	movs	r0, #17
   1973e:	f7f8 fe57 	bl	123f0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   19742:	4b06      	ldr	r3, [pc, #24]	; (1975c <sys_clock_disable+0x28>)
   19744:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   19748:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1974c:	4b04      	ldr	r3, [pc, #16]	; (19760 <sys_clock_disable+0x2c>)
   1974e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   19752:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   19756:	bd10      	pop	{r4, pc}
   19758:	40011000 	.word	0x40011000
   1975c:	000f0003 	.word	0x000f0003
   19760:	e000e100 	.word	0xe000e100

00019764 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19764:	4602      	mov	r2, r0
   19766:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   19768:	4801      	ldr	r0, [pc, #4]	; (19770 <multithreading_lock_acquire+0xc>)
   1976a:	f001 bddb 	b.w	1b324 <z_impl_k_mutex_lock>
   1976e:	bf00      	nop
   19770:	200007e0 	.word	0x200007e0

00019774 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   19774:	4801      	ldr	r0, [pc, #4]	; (1977c <multithreading_lock_release+0x8>)
   19776:	f001 be4f 	b.w	1b418 <z_impl_k_mutex_unlock>
   1977a:	bf00      	nop
   1977c:	200007e0 	.word	0x200007e0

00019780 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   19780:	b510      	push	{r4, lr}
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   19782:	4917      	ldr	r1, [pc, #92]	; (197e0 <hci_driver_open+0x60>)
   19784:	4817      	ldr	r0, [pc, #92]	; (197e4 <hci_driver_open+0x64>)
{
   19786:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   19788:	f00a fd42 	bl	24210 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   1978c:	f000 fe1e 	bl	1a3cc <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   19790:	a803      	add	r0, sp, #12
   19792:	f7e7 f861 	bl	858 <sdc_build_revision_get>
   19796:	4814      	ldr	r0, [pc, #80]	; (197e8 <hci_driver_open+0x68>)
   19798:	f00a fb16 	bl	23dc8 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   1979c:	b1d0      	cbz	r0, 197d4 <hci_driver_open+0x54>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   1979e:	4a13      	ldr	r2, [pc, #76]	; (197ec <hci_driver_open+0x6c>)
   197a0:	ca07      	ldmia	r2, {r0, r1, r2}
   197a2:	466b      	mov	r3, sp
   197a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   197a8:	4618      	mov	r0, r3
   197aa:	f7e7 f9f5 	bl	b98 <sdc_rand_source_register>
	if (err) {
   197ae:	b9a0      	cbnz	r0, 197da <hci_driver_open+0x5a>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   197b0:	f04f 30ff 	mov.w	r0, #4294967295
   197b4:	f04f 31ff 	mov.w	r1, #4294967295
   197b8:	f7ff ffd4 	bl	19764 <multithreading_lock_acquire>
	if (err) {
   197bc:	4604      	mov	r4, r0
   197be:	b930      	cbnz	r0, 197ce <hci_driver_open+0x4e>
		MULTITHREADING_LOCK_RELEASE();
		return -ENOTSUP;
	}
#endif

	err = sdc_enable(receive_signal_raise, sdc_mempool);
   197c0:	490b      	ldr	r1, [pc, #44]	; (197f0 <hci_driver_open+0x70>)
   197c2:	480c      	ldr	r0, [pc, #48]	; (197f4 <hci_driver_open+0x74>)
   197c4:	f7e7 f8b8 	bl	938 <sdc_enable>
	if (err) {
   197c8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
		return err;
	}

	MULTITHREADING_LOCK_RELEASE();
   197ca:	f7ff ffd3 	bl	19774 <multithreading_lock_release>

	return 0;
}
   197ce:	4620      	mov	r0, r4
   197d0:	b008      	add	sp, #32
   197d2:	bd10      	pop	{r4, pc}
		return -ENODEV;
   197d4:	f06f 0412 	mvn.w	r4, #18
   197d8:	e7f9      	b.n	197ce <hci_driver_open+0x4e>
		return -EINVAL;
   197da:	f06f 0415 	mvn.w	r4, #21
   197de:	e7f6      	b.n	197ce <hci_driver_open+0x4e>
   197e0:	00023bcb 	.word	0x00023bcb
   197e4:	20002e14 	.word	0x20002e14
   197e8:	00024988 	.word	0x00024988
   197ec:	00024d54 	.word	0x00024d54
   197f0:	20001c80 	.word	0x20001c80
   197f4:	000198dd 	.word	0x000198dd

000197f8 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   197f8:	b513      	push	{r0, r1, r4, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
   197fa:	482b      	ldr	r0, [pc, #172]	; (198a8 <hci_driver_init+0xb0>)
   197fc:	f7fa f812 	bl	13824 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   19800:	482a      	ldr	r0, [pc, #168]	; (198ac <hci_driver_init+0xb4>)
   19802:	f7e7 f8c3 	bl	98c <sdc_init>
			err = sdc_support_central();
   19806:	f7e7 f93d 	bl	a84 <sdc_support_central>
			if (err) {
   1980a:	b118      	cbz	r0, 19814 <hci_driver_init+0x1c>
			return -ENOTSUP;
   1980c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   19810:	b002      	add	sp, #8
   19812:	bd10      	pop	{r4, pc}
			err = sdc_support_dle_central();
   19814:	f7e7 f948 	bl	aa8 <sdc_support_dle_central>
			if (err) {
   19818:	2800      	cmp	r0, #0
   1981a:	d1f7      	bne.n	1980c <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   1981c:	f7e7 f954 	bl	ac8 <sdc_support_le_2m_phy>
		if (err) {
   19820:	2800      	cmp	r0, #0
   19822:	d1f3      	bne.n	1980c <hci_driver_init+0x14>
			err = sdc_support_phy_update_central();
   19824:	f7e7 f960 	bl	ae8 <sdc_support_phy_update_central>
			if (err) {
   19828:	4604      	mov	r4, r0
   1982a:	2800      	cmp	r0, #0
   1982c:	d1ee      	bne.n	1980c <hci_driver_init+0x14>
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1982e:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19830:	aa01      	add	r2, sp, #4
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   19832:	f88d 1004 	strb.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19836:	f7e7 f81d 	bl	874 <sdc_cfg_set>
	if (required_memory < 0) {
   1983a:	2800      	cmp	r0, #0
   1983c:	dbe8      	blt.n	19810 <hci_driver_init+0x18>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1983e:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19840:	aa01      	add	r2, sp, #4
   19842:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   19844:	f8ad 1004 	strh.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19848:	f7e7 f814 	bl	874 <sdc_cfg_set>
	if (required_memory < 0) {
   1984c:	2800      	cmp	r0, #0
   1984e:	dbdf      	blt.n	19810 <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   19850:	4b17      	ldr	r3, [pc, #92]	; (198b0 <hci_driver_init+0xb8>)
   19852:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19854:	aa01      	add	r2, sp, #4
   19856:	2103      	movs	r1, #3
   19858:	4620      	mov	r0, r4
   1985a:	f7e7 f80b 	bl	874 <sdc_cfg_set>
	if (required_memory < 0) {
   1985e:	2800      	cmp	r0, #0
   19860:	dbd6      	blt.n	19810 <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   19862:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19866:	aa01      	add	r2, sp, #4
   19868:	2104      	movs	r1, #4
   1986a:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1986c:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1986e:	f7e7 f801 	bl	874 <sdc_cfg_set>
	if (required_memory < 0) {
   19872:	2800      	cmp	r0, #0
   19874:	dbcc      	blt.n	19810 <hci_driver_init+0x18>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   19876:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19878:	aa01      	add	r2, sp, #4
   1987a:	2106      	movs	r1, #6
   1987c:	4620      	mov	r0, r4
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1987e:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19882:	f7e6 fff7 	bl	874 <sdc_cfg_set>
		if (required_memory < 0) {
   19886:	2800      	cmp	r0, #0
   19888:	dbc2      	blt.n	19810 <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   1988a:	f5b0 6fd2 	cmp.w	r0, #1680	; 0x690
   1988e:	dd08      	ble.n	198a2 <hci_driver_init+0xaa>
		k_panic();
   19890:	4040      	eors	r0, r0
   19892:	f380 8811 	msr	BASEPRI, r0
   19896:	f04f 0004 	mov.w	r0, #4
   1989a:	df02      	svc	2
		return -ENOMEM;
   1989c:	f06f 000b 	mvn.w	r0, #11
   198a0:	e7b6      	b.n	19810 <hci_driver_init+0x18>
	return 0;
   198a2:	2000      	movs	r0, #0
	if (err) {
   198a4:	e7b4      	b.n	19810 <hci_driver_init+0x18>
   198a6:	bf00      	nop
   198a8:	00025374 	.word	0x00025374
   198ac:	00023b29 	.word	0x00023b29
   198b0:	02031b1b 	.word	0x02031b1b

000198b4 <rand_prio_low_vector_get>:
{
   198b4:	b538      	push	{r3, r4, r5, lr}
   198b6:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   198b8:	4807      	ldr	r0, [pc, #28]	; (198d8 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   198ba:	6883      	ldr	r3, [r0, #8]
   198bc:	685d      	ldr	r5, [r3, #4]
   198be:	460a      	mov	r2, r1
   198c0:	b135      	cbz	r5, 198d0 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   198c2:	2300      	movs	r3, #0
   198c4:	4621      	mov	r1, r4
   198c6:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   198c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   198cc:	b2c0      	uxtb	r0, r0
   198ce:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   198d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   198d4:	e7f8      	b.n	198c8 <rand_prio_low_vector_get+0x14>
   198d6:	bf00      	nop
   198d8:	00024988 	.word	0x00024988

000198dc <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   198dc:	4901      	ldr	r1, [pc, #4]	; (198e4 <receive_signal_raise+0x8>)
   198de:	4802      	ldr	r0, [pc, #8]	; (198e8 <receive_signal_raise+0xc>)
   198e0:	f00a bcc3 	b.w	2426a <k_work_submit_to_queue>
   198e4:	20002e14 	.word	0x20002e14
   198e8:	20002390 	.word	0x20002390

000198ec <rand_prio_low_vector_get_blocking>:
{
   198ec:	b410      	push	{r4}
   198ee:	4603      	mov	r3, r0
   198f0:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   198f2:	4803      	ldr	r0, [pc, #12]	; (19900 <rand_prio_low_vector_get_blocking+0x14>)
   198f4:	6881      	ldr	r1, [r0, #8]
   198f6:	680c      	ldr	r4, [r1, #0]
   198f8:	4619      	mov	r1, r3
   198fa:	4623      	mov	r3, r4
}
   198fc:	bc10      	pop	{r4}
   198fe:	4718      	bx	r3
   19900:	00024988 	.word	0x00024988

00019904 <hci_driver_receive_process>:
{
   19904:	b537      	push	{r0, r1, r2, r4, r5, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   19906:	f04f 30ff 	mov.w	r0, #4294967295
   1990a:	f04f 31ff 	mov.w	r1, #4294967295
   1990e:	f7ff ff29 	bl	19764 <multithreading_lock_acquire>
	if (!errcode) {
   19912:	2800      	cmp	r0, #0
   19914:	d145      	bne.n	199a2 <hci_driver_receive_process+0x9e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   19916:	4d24      	ldr	r5, [pc, #144]	; (199a8 <hci_driver_receive_process+0xa4>)
   19918:	f10d 0107 	add.w	r1, sp, #7
   1991c:	4628      	mov	r0, r5
   1991e:	f000 fc4b 	bl	1a1b8 <hci_internal_msg_get>
   19922:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   19924:	f7ff ff26 	bl	19774 <multithreading_lock_release>
	if (errcode) {
   19928:	2c00      	cmp	r4, #0
   1992a:	d13a      	bne.n	199a2 <hci_driver_receive_process+0x9e>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1992c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19930:	2b04      	cmp	r3, #4
   19932:	d126      	bne.n	19982 <hci_driver_receive_process+0x7e>
	switch (hdr->evt) {
   19934:	7828      	ldrb	r0, [r5, #0]
   19936:	283e      	cmp	r0, #62	; 0x3e
   19938:	d019      	beq.n	1996e <hci_driver_receive_process+0x6a>
   1993a:	28ff      	cmp	r0, #255	; 0xff
   1993c:	d01e      	beq.n	1997c <hci_driver_receive_process+0x78>
		switch (subevent) {
   1993e:	f04f 32ff 	mov.w	r2, #4294967295
   19942:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19946:	4621      	mov	r1, r4
   19948:	f7f9 fa36 	bl	12db8 <bt_buf_get_evt>
	if (!evt_buf) {
   1994c:	4604      	mov	r4, r0
   1994e:	b148      	cbz	r0, 19964 <hci_driver_receive_process+0x60>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   19950:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19952:	4915      	ldr	r1, [pc, #84]	; (199a8 <hci_driver_receive_process+0xa4>)
   19954:	3202      	adds	r2, #2
   19956:	f104 000c 	add.w	r0, r4, #12
   1995a:	f009 fee2 	bl	23722 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1995e:	4620      	mov	r0, r4
   19960:	f7f9 ff36 	bl	137d0 <bt_recv>
}
   19964:	b003      	add	sp, #12
   19966:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		receive_signal_raise();
   1996a:	f7ff bfb7 	b.w	198dc <receive_signal_raise>
		switch (me->subevent) {
   1996e:	78ab      	ldrb	r3, [r5, #2]
   19970:	2b02      	cmp	r3, #2
		switch (subevent) {
   19972:	d1e4      	bne.n	1993e <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19974:	2200      	movs	r2, #0
   19976:	2300      	movs	r3, #0
			return true;
   19978:	2401      	movs	r4, #1
   1997a:	e7e4      	b.n	19946 <hci_driver_receive_process+0x42>
		switch (subevent) {
   1997c:	78ab      	ldrb	r3, [r5, #2]
   1997e:	2b80      	cmp	r3, #128	; 0x80
   19980:	e7f7      	b.n	19972 <hci_driver_receive_process+0x6e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   19982:	2b02      	cmp	r3, #2
   19984:	d1ee      	bne.n	19964 <hci_driver_receive_process+0x60>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   19986:	f04f 32ff 	mov.w	r2, #4294967295
   1998a:	f04f 33ff 	mov.w	r3, #4294967295
   1998e:	2003      	movs	r0, #3
   19990:	f7f9 f9e2 	bl	12d58 <bt_buf_get_rx>
	if (!data_buf) {
   19994:	4604      	mov	r4, r0
   19996:	2800      	cmp	r0, #0
   19998:	d0e4      	beq.n	19964 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1999a:	886a      	ldrh	r2, [r5, #2]
   1999c:	4629      	mov	r1, r5
   1999e:	3204      	adds	r2, #4
   199a0:	e7d9      	b.n	19956 <hci_driver_receive_process+0x52>
}
   199a2:	b003      	add	sp, #12
   199a4:	bd30      	pop	{r4, r5, pc}
   199a6:	bf00      	nop
   199a8:	200039b7 	.word	0x200039b7

000199ac <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   199ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   199ae:	4cc6      	ldr	r4, [pc, #792]	; (19cc8 <hci_internal_cmd_put+0x31c>)
   199b0:	8806      	ldrh	r6, [r0, #0]
   199b2:	7823      	ldrb	r3, [r4, #0]
{
   199b4:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   199b6:	2b00      	cmp	r3, #0
   199b8:	f040 83f6 	bne.w	1a1a8 <hci_internal_cmd_put+0x7fc>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   199bc:	2304      	movs	r3, #4
   199be:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   199c2:	4bc2      	ldr	r3, [pc, #776]	; (19ccc <hci_internal_cmd_put+0x320>)
   199c4:	681f      	ldr	r7, [r3, #0]
   199c6:	b1b7      	cbz	r7, 199f6 <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   199c8:	f10d 0306 	add.w	r3, sp, #6
   199cc:	f10d 0207 	add.w	r2, sp, #7
   199d0:	1c61      	adds	r1, r4, #1
   199d2:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   199d4:	2801      	cmp	r0, #1
   199d6:	d00e      	beq.n	199f6 <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   199d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   199dc:	2b00      	cmp	r3, #0
   199de:	f040 83c1 	bne.w	1a164 <hci_internal_cmd_put+0x7b8>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   199e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   199e6:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   199e8:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   199ea:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   199ec:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   199ee:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   199f0:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   199f2:	71a0      	strb	r0, [r4, #6]
}
   199f4:	e3bf      	b.n	1a176 <hci_internal_cmd_put+0x7ca>
		switch (BT_OGF(opcode)) {
   199f6:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   199fa:	ea4f 2396 	mov.w	r3, r6, lsr #10
   199fe:	d20f      	bcs.n	19a20 <hci_internal_cmd_put+0x74>
   19a00:	2b00      	cmp	r3, #0
   19a02:	d079      	beq.n	19af8 <hci_internal_cmd_put+0x14c>
   19a04:	3b01      	subs	r3, #1
   19a06:	2b07      	cmp	r3, #7
   19a08:	f200 83a2 	bhi.w	1a150 <hci_internal_cmd_put+0x7a4>
   19a0c:	e8df f013 	tbh	[pc, r3, lsl #1]
   19a10:	03a0000d 	.word	0x03a0000d
   19a14:	008e003f 	.word	0x008e003f
   19a18:	03a003a0 	.word	0x03a003a0
   19a1c:	016203a0 	.word	0x016203a0
   19a20:	2b3f      	cmp	r3, #63	; 0x3f
   19a22:	f000 82e5 	beq.w	19ff0 <hci_internal_cmd_put+0x644>
	switch (opcode)	{
   19a26:	2001      	movs	r0, #1
   19a28:	e324      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
	return ((uint16_t)src[1] << 8) | src[0];
   19a2a:	4628      	mov	r0, r5
	switch (opcode)	{
   19a2c:	f240 4206 	movw	r2, #1030	; 0x406
   19a30:	f930 3b03 	ldrsh.w	r3, [r0], #3
   19a34:	4293      	cmp	r3, r2
   19a36:	d010      	beq.n	19a5a <hci_internal_cmd_put+0xae>
   19a38:	f240 421d 	movw	r2, #1053	; 0x41d
   19a3c:	4293      	cmp	r3, r2
   19a3e:	d023      	beq.n	19a88 <hci_internal_cmd_put+0xdc>
   19a40:	2001      	movs	r0, #1
	switch (hci_opcode) {
   19a42:	f240 4306 	movw	r3, #1030	; 0x406
   19a46:	429e      	cmp	r6, r3
   19a48:	f040 837c 	bne.w	1a144 <hci_internal_cmd_put+0x798>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19a4c:	230f      	movs	r3, #15
   19a4e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   19a50:	2304      	movs	r3, #4
   19a52:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   19a54:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   19a56:	2301      	movs	r3, #1
   19a58:	e033      	b.n	19ac2 <hci_internal_cmd_put+0x116>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   19a5a:	f7f3 fcf1 	bl	d440 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   19a5e:	f242 0332 	movw	r3, #8242	; 0x2032
   19a62:	429e      	cmp	r6, r3
   19a64:	f240 8366 	bls.w	1a134 <hci_internal_cmd_put+0x788>
   19a68:	f242 0385 	movw	r3, #8325	; 0x2085
   19a6c:	429e      	cmp	r6, r3
   19a6e:	d840      	bhi.n	19af2 <hci_internal_cmd_put+0x146>
   19a70:	f242 036c 	movw	r3, #8300	; 0x206c
   19a74:	429e      	cmp	r6, r3
   19a76:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   19a7a:	f200 836b 	bhi.w	1a154 <hci_internal_cmd_put+0x7a8>
   19a7e:	3b03      	subs	r3, #3
   19a80:	b29b      	uxth	r3, r3
   19a82:	2b01      	cmp	r3, #1
   19a84:	d835      	bhi.n	19af2 <hci_internal_cmd_put+0x146>
   19a86:	e7e1      	b.n	19a4c <hci_internal_cmd_put+0xa0>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   19a88:	f7f3 fcdc 	bl	d444 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   19a8c:	e7e7      	b.n	19a5e <hci_internal_cmd_put+0xb2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19a8e:	4628      	mov	r0, r5
	switch (opcode)	{
   19a90:	f640 4263 	movw	r2, #3171	; 0xc63
   19a94:	f930 3b03 	ldrsh.w	r3, [r0], #3
   19a98:	4293      	cmp	r3, r2
   19a9a:	d03b      	beq.n	19b14 <hci_internal_cmd_put+0x168>
   19a9c:	dc16      	bgt.n	19acc <hci_internal_cmd_put+0x120>
   19a9e:	f640 4203 	movw	r2, #3075	; 0xc03
   19aa2:	4293      	cmp	r3, r2
   19aa4:	d02a      	beq.n	19afc <hci_internal_cmd_put+0x150>
   19aa6:	f640 422d 	movw	r2, #3117	; 0xc2d
   19aaa:	4293      	cmp	r3, r2
   19aac:	d029      	beq.n	19b02 <hci_internal_cmd_put+0x156>
   19aae:	f640 4201 	movw	r2, #3073	; 0xc01
   19ab2:	4293      	cmp	r3, r2
   19ab4:	d01b      	beq.n	19aee <hci_internal_cmd_put+0x142>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19ab6:	230f      	movs	r3, #15
   19ab8:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   19aba:	2304      	movs	r3, #4
   19abc:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   19abe:	2301      	movs	r3, #1
   19ac0:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   19ac2:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   19ac4:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   19ac8:	7023      	strb	r3, [r4, #0]
   19aca:	e0d5      	b.n	19c78 <hci_internal_cmd_put+0x2cc>
	switch (opcode)	{
   19acc:	f640 427b 	movw	r2, #3195	; 0xc7b
   19ad0:	4293      	cmp	r3, r2
   19ad2:	d022      	beq.n	19b1a <hci_internal_cmd_put+0x16e>
   19ad4:	f640 427c 	movw	r2, #3196	; 0xc7c
   19ad8:	4293      	cmp	r3, r2
   19ada:	d1ec      	bne.n	19ab6 <hci_internal_cmd_put+0x10a>
		*param_length_out +=
   19adc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   19ae0:	497b      	ldr	r1, [pc, #492]	; (19cd0 <hci_internal_cmd_put+0x324>)
		*param_length_out +=
   19ae2:	3302      	adds	r3, #2
   19ae4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   19ae8:	f7f3 fc0e 	bl	d308 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   19aec:	e001      	b.n	19af2 <hci_internal_cmd_put+0x146>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   19aee:	f7f3 fc01 	bl	d2f4 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   19af2:	2801      	cmp	r0, #1
   19af4:	f47f af75 	bne.w	199e2 <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   19af8:	2001      	movs	r0, #1
   19afa:	e333      	b.n	1a164 <hci_internal_cmd_put+0x7b8>
		return sdc_hci_cmd_cb_reset();
   19afc:	f7e7 f946 	bl	d8c <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   19b00:	e7f7      	b.n	19af2 <hci_internal_cmd_put+0x146>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   19b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   19b06:	4972      	ldr	r1, [pc, #456]	; (19cd0 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   19b08:	3303      	adds	r3, #3
   19b0a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   19b0e:	f7f3 fbef 	bl	d2f0 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   19b12:	e7ee      	b.n	19af2 <hci_internal_cmd_put+0x146>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   19b14:	f7f3 fbf3 	bl	d2fe <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   19b18:	e7eb      	b.n	19af2 <hci_internal_cmd_put+0x146>
		*param_length_out +=
   19b1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   19b1e:	496c      	ldr	r1, [pc, #432]	; (19cd0 <hci_internal_cmd_put+0x324>)
		*param_length_out +=
   19b20:	3304      	adds	r3, #4
   19b22:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   19b26:	f7f3 fbe1 	bl	d2ec <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   19b2a:	e7e2      	b.n	19af2 <hci_internal_cmd_put+0x146>
	switch (opcode)	{
   19b2c:	882b      	ldrh	r3, [r5, #0]
   19b2e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   19b32:	3b01      	subs	r3, #1
   19b34:	2b08      	cmp	r3, #8
   19b36:	d8be      	bhi.n	19ab6 <hci_internal_cmd_put+0x10a>
   19b38:	a201      	add	r2, pc, #4	; (adr r2, 19b40 <hci_internal_cmd_put+0x194>)
   19b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19b3e:	bf00      	nop
   19b40:	00019b65 	.word	0x00019b65
   19b44:	00019b77 	.word	0x00019b77
   19b48:	00019c7f 	.word	0x00019c7f
   19b4c:	00019ab7 	.word	0x00019ab7
   19b50:	00019ab7 	.word	0x00019ab7
   19b54:	00019ab7 	.word	0x00019ab7
   19b58:	00019ab7 	.word	0x00019ab7
   19b5c:	00019ab7 	.word	0x00019ab7
   19b60:	00019cb7 	.word	0x00019cb7
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   19b64:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   19b68:	4859      	ldr	r0, [pc, #356]	; (19cd0 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   19b6a:	3308      	adds	r3, #8
   19b6c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   19b70:	f7f3 fc1f 	bl	d3b2 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   19b74:	e7bd      	b.n	19af2 <hci_internal_cmd_put+0x146>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   19b76:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   19b7a:	4d55      	ldr	r5, [pc, #340]	; (19cd0 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   19b7c:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   19b7e:	2230      	movs	r2, #48	; 0x30
   19b80:	2100      	movs	r1, #0
   19b82:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   19b84:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   19b88:	f006 f9c2 	bl	1ff10 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   19b8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   19b90:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   19b92:	2300      	movs	r3, #0
   19b94:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   19b96:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   19b98:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   19b9a:	f043 0320 	orr.w	r3, r3, #32
   19b9e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   19ba0:	7a63      	ldrb	r3, [r4, #9]
   19ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19ba6:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   19ba8:	7b23      	ldrb	r3, [r4, #12]
   19baa:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19bae:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   19bb0:	7c63      	ldrb	r3, [r4, #17]
   19bb2:	f043 0304 	orr.w	r3, r3, #4
   19bb6:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   19bb8:	7d63      	ldrb	r3, [r4, #21]
   19bba:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   19bbe:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   19bc2:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   19bc4:	7da3      	ldrb	r3, [r4, #22]
   19bc6:	f043 0302 	orr.w	r3, r3, #2
   19bca:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   19bcc:	7f63      	ldrb	r3, [r4, #29]
   19bce:	f043 0304 	orr.w	r3, r3, #4
   19bd2:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   19bd4:	f894 3020 	ldrb.w	r3, [r4, #32]
   19bd8:	f023 0317 	bic.w	r3, r3, #23
   19bdc:	f043 0317 	orr.w	r3, r3, #23
   19be0:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   19be4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   19be8:	f063 0303 	orn	r3, r3, #3
   19bec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   19bf0:	23ff      	movs	r3, #255	; 0xff
   19bf2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   19bf6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   19bfa:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   19bfe:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   19c02:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   19c06:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   19c0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   19c0e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   19c12:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   19c16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19c1a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19c1e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   19c22:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19c26:	220e      	movs	r2, #14
	cmds->hci_le_write_suggested_default_data_length = 1;
   19c28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19c2c:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_write_suggested_default_data_length = 1;
   19c2e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	evt_data->ncmd = 1;
   19c32:	2201      	movs	r2, #1
   19c34:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_write_suggested_default_data_length = 1;
   19c36:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   19c3a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   19c3e:	f063 0301 	orn	r3, r3, #1
   19c42:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   19c46:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   19c4a:	4313      	orrs	r3, r2
   19c4c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   19c50:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   19c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19c58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   19c5c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   19c60:	f043 0304 	orr.w	r3, r3, #4
   19c64:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   19c68:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   19c6c:	f043 0304 	orr.w	r3, r3, #4
   19c70:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmd_complete_or_status.occurred = true;
   19c74:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   19c78:	2000      	movs	r0, #0
}
   19c7a:	b003      	add	sp, #12
   19c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   19c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   19c82:	4d13      	ldr	r5, [pc, #76]	; (19cd0 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   19c84:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   19c86:	2208      	movs	r2, #8
   19c88:	2100      	movs	r1, #0
   19c8a:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   19c8c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   19c90:	f006 f93e 	bl	1ff10 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   19c94:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   19c98:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   19c9a:	2300      	movs	r3, #0
   19c9c:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   19c9e:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   19ca0:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19ca2:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   19ca4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19ca8:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   19caa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   19cae:	2201      	movs	r2, #1
   19cb0:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   19cb2:	72e3      	strb	r3, [r4, #11]
   19cb4:	e7de      	b.n	19c74 <hci_internal_cmd_put+0x2c8>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   19cb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   19cba:	4805      	ldr	r0, [pc, #20]	; (19cd0 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   19cbc:	3306      	adds	r3, #6
   19cbe:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   19cc2:	f7f3 fb74 	bl	d3ae <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   19cc6:	e714      	b.n	19af2 <hci_internal_cmd_put+0x146>
   19cc8:	20003a00 	.word	0x20003a00
   19ccc:	20002e24 	.word	0x20002e24
   19cd0:	20003a07 	.word	0x20003a07
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19cd4:	4628      	mov	r0, r5
	switch (opcode)	{
   19cd6:	f830 3b03 	ldrh.w	r3, [r0], #3
   19cda:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   19cde:	3b01      	subs	r3, #1
   19ce0:	2b5d      	cmp	r3, #93	; 0x5d
   19ce2:	d85f      	bhi.n	19da4 <hci_internal_cmd_put+0x3f8>
   19ce4:	e8df f013 	tbh	[pc, r3, lsl #1]
   19ce8:	00930086 	.word	0x00930086
   19cec:	005e009c 	.word	0x005e009c
   19cf0:	005e00cd 	.word	0x005e00cd
   19cf4:	005e005e 	.word	0x005e005e
   19cf8:	005e005e 	.word	0x005e005e
   19cfc:	00d300d0 	.word	0x00d300d0
   19d00:	00d900d6 	.word	0x00d900d6
   19d04:	00e500dc 	.word	0x00e500dc
   19d08:	00eb00e8 	.word	0x00eb00e8
   19d0c:	00f100ee 	.word	0x00f100ee
   19d10:	00fd00f4 	.word	0x00fd00f4
   19d14:	01090100 	.word	0x01090100
   19d18:	005e0112 	.word	0x005e0112
   19d1c:	0115005e 	.word	0x0115005e
   19d20:	005e005e 	.word	0x005e005e
   19d24:	005e005e 	.word	0x005e005e
   19d28:	012a005e 	.word	0x012a005e
   19d2c:	013c0133 	.word	0x013c0133
   19d30:	0142013f 	.word	0x0142013f
   19d34:	014b0148 	.word	0x014b0148
   19d38:	0151014e 	.word	0x0151014e
   19d3c:	005e005e 	.word	0x005e005e
   19d40:	015d015a 	.word	0x015d015a
   19d44:	01690160 	.word	0x01690160
   19d48:	01750172 	.word	0x01750172
   19d4c:	005e005e 	.word	0x005e005e
   19d50:	005e005e 	.word	0x005e005e
   19d54:	005e005e 	.word	0x005e005e
   19d58:	005e005e 	.word	0x005e005e
   19d5c:	005e005e 	.word	0x005e005e
   19d60:	005e005e 	.word	0x005e005e
   19d64:	005e005e 	.word	0x005e005e
   19d68:	005e005e 	.word	0x005e005e
   19d6c:	005e005e 	.word	0x005e005e
   19d70:	005e005e 	.word	0x005e005e
   19d74:	005e005e 	.word	0x005e005e
   19d78:	005e005e 	.word	0x005e005e
   19d7c:	005e0178 	.word	0x005e0178
   19d80:	0181005e 	.word	0x0181005e
   19d84:	005e005e 	.word	0x005e005e
   19d88:	005e005e 	.word	0x005e005e
   19d8c:	005e005e 	.word	0x005e005e
   19d90:	005e005e 	.word	0x005e005e
   19d94:	005e005e 	.word	0x005e005e
   19d98:	005e005e 	.word	0x005e005e
   19d9c:	005e005e 	.word	0x005e005e
   19da0:	0145005e 	.word	0x0145005e
	switch (hci_opcode) {
   19da4:	f242 0332 	movw	r3, #8242	; 0x2032
   19da8:	429e      	cmp	r6, r3
   19daa:	d017      	beq.n	19ddc <hci_internal_cmd_put+0x430>
   19dac:	f200 81f6 	bhi.w	1a19c <hci_internal_cmd_put+0x7f0>
   19db0:	f242 0326 	movw	r3, #8230	; 0x2026
   19db4:	429e      	cmp	r6, r3
   19db6:	f63f ae9f 	bhi.w	19af8 <hci_internal_cmd_put+0x14c>
   19dba:	2001      	movs	r0, #1
   19dbc:	f242 030c 	movw	r3, #8204	; 0x200c
   19dc0:	429e      	cmp	r6, r3
   19dc2:	f67f ae3e 	bls.w	19a42 <hci_internal_cmd_put+0x96>
   19dc6:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   19dca:	4ac8      	ldr	r2, [pc, #800]	; (1a0ec <hci_internal_cmd_put+0x740>)
   19dcc:	3b0d      	subs	r3, #13
   19dce:	b29b      	uxth	r3, r3
   19dd0:	fa22 f303 	lsr.w	r3, r2, r3
   19dd4:	07db      	lsls	r3, r3, #31
   19dd6:	f57f ae8c 	bpl.w	19af2 <hci_internal_cmd_put+0x146>
   19dda:	e637      	b.n	19a4c <hci_internal_cmd_put+0xa0>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19ddc:	230f      	movs	r3, #15
   19dde:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   19de0:	2304      	movs	r3, #4
   19de2:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   19de4:	2301      	movs	r3, #1
   19de6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   19de8:	2232      	movs	r2, #50	; 0x32
   19dea:	7162      	strb	r2, [r4, #5]
   19dec:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   19dee:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   19df0:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   19df2:	e669      	b.n	19ac8 <hci_internal_cmd_put+0x11c>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   19df4:	f7f3 fb0f 	bl	d416 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   19df8:	f242 0332 	movw	r3, #8242	; 0x2032
   19dfc:	429e      	cmp	r6, r3
   19dfe:	f47f ae2e 	bne.w	19a5e <hci_internal_cmd_put+0xb2>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19e02:	230f      	movs	r3, #15
   19e04:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   19e06:	2304      	movs	r3, #4
   19e08:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   19e0a:	70e0      	strb	r0, [r4, #3]
   19e0c:	e094      	b.n	19f38 <hci_internal_cmd_put+0x58c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   19e0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   19e12:	48b7      	ldr	r0, [pc, #732]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   19e14:	3303      	adds	r3, #3
   19e16:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   19e1a:	f7f3 fae0 	bl	d3de <sdc_hci_cmd_le_read_buffer_size>
   19e1e:	e7eb      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   19e20:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   19e24:	4db2      	ldr	r5, [pc, #712]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   19e26:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   19e28:	2208      	movs	r2, #8
   19e2a:	2100      	movs	r1, #0
   19e2c:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   19e2e:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   19e32:	f006 f86d 	bl	1ff10 <memset>
	features->params.le_encryption = 1;
   19e36:	79e3      	ldrb	r3, [r4, #7]
   19e38:	f063 0302 	orn	r3, r3, #2
   19e3c:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   19e3e:	7a23      	ldrb	r3, [r4, #8]
   19e40:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   19e44:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   19e48:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   19e4a:	f242 0332 	movw	r3, #8242	; 0x2032
   19e4e:	429e      	cmp	r6, r3
   19e50:	d008      	beq.n	19e64 <hci_internal_cmd_put+0x4b8>
   19e52:	f200 819d 	bhi.w	1a190 <hci_internal_cmd_put+0x7e4>
   19e56:	f242 0326 	movw	r3, #8230	; 0x2026
   19e5a:	429e      	cmp	r6, r3
   19e5c:	f240 8170 	bls.w	1a140 <hci_internal_cmd_put+0x794>
		return 0;
   19e60:	2000      	movs	r0, #0
   19e62:	e5be      	b.n	199e2 <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19e64:	230f      	movs	r3, #15
   19e66:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   19e68:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   19e6a:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   19e6c:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   19e6e:	2300      	movs	r3, #0
   19e70:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   19e72:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   19e74:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   19e76:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   19e78:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   19e7a:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   19e7c:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   19e80:	e6fa      	b.n	19c78 <hci_internal_cmd_put+0x2cc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   19e82:	f7f3 fad3 	bl	d42c <sdc_hci_cmd_le_set_random_address>
   19e86:	e7b7      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   19e88:	f7f3 fad6 	bl	d438 <sdc_hci_cmd_le_set_scan_params>
   19e8c:	e7b4      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   19e8e:	f7f3 fad1 	bl	d434 <sdc_hci_cmd_le_set_scan_enable>
   19e92:	e7b1      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   19e94:	f7f3 fa99 	bl	d3ca <sdc_hci_cmd_le_create_conn>
   19e98:	e7ae      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_create_conn_cancel();
   19e9a:	f7f3 fa98 	bl	d3ce <sdc_hci_cmd_le_create_conn_cancel>
   19e9e:	e7ab      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   19ea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   19ea4:	4892      	ldr	r0, [pc, #584]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   19ea6:	3301      	adds	r3, #1
   19ea8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   19eac:	f7f3 fa9b 	bl	d3e6 <sdc_hci_cmd_le_read_filter_accept_list_size>
   19eb0:	e7a2      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   19eb2:	f7f3 fa84 	bl	d3be <sdc_hci_cmd_le_clear_filter_accept_list>
   19eb6:	e79f      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   19eb8:	f7f3 fa7d 	bl	d3b6 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   19ebc:	e79c      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   19ebe:	f7f3 faa0 	bl	d402 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   19ec2:	e799      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   19ec4:	f7f3 fa7f 	bl	d3c6 <sdc_hci_cmd_le_conn_update>
   19ec8:	e796      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   19eca:	f7f3 faa9 	bl	d420 <sdc_hci_cmd_le_set_host_channel_classification>
   19ece:	e793      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   19ed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   19ed4:	4986      	ldr	r1, [pc, #536]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   19ed6:	3307      	adds	r3, #7
   19ed8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   19edc:	f7f3 fa81 	bl	d3e2 <sdc_hci_cmd_le_read_channel_map>
   19ee0:	e78a      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   19ee2:	f7f3 fa86 	bl	d3f2 <sdc_hci_cmd_le_read_remote_features>
   19ee6:	e787      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   19ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19eec:	4980      	ldr	r1, [pc, #512]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   19eee:	3310      	adds	r3, #16
   19ef0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19ef4:	f7f3 fa6f 	bl	d3d6 <sdc_hci_cmd_le_encrypt>
   19ef8:	e77e      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   19efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   19efe:	487c      	ldr	r0, [pc, #496]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   19f00:	3308      	adds	r3, #8
   19f02:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   19f06:	f7f3 fa68 	bl	d3da <sdc_hci_cmd_le_rand>
   19f0a:	e775      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   19f0c:	f7f3 fa61 	bl	d3d2 <sdc_hci_cmd_le_enable_encryption>
   19f10:	e772      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   19f12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19f16:	3308      	adds	r3, #8
   19f18:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   19f1c:	2370      	movs	r3, #112	; 0x70
   19f1e:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   19f20:	2340      	movs	r3, #64	; 0x40
   19f22:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   19f24:	f242 0332 	movw	r3, #8242	; 0x2032
   19f28:	429e      	cmp	r6, r3
   19f2a:	d192      	bne.n	19e52 <hci_internal_cmd_put+0x4a6>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19f2c:	230f      	movs	r3, #15
   19f2e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   19f30:	2304      	movs	r3, #4
   19f32:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   19f34:	2300      	movs	r3, #0
   19f36:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   19f38:	2301      	movs	r3, #1
   19f3a:	e755      	b.n	19de8 <hci_internal_cmd_put+0x43c>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   19f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   19f40:	496b      	ldr	r1, [pc, #428]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   19f42:	3302      	adds	r3, #2
   19f44:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   19f48:	f7f3 fa61 	bl	d40e <sdc_hci_cmd_le_set_data_length>
   19f4c:	e754      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out +=
   19f4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   19f52:	4867      	ldr	r0, [pc, #412]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out +=
   19f54:	3304      	adds	r3, #4
   19f56:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   19f5a:	f7f3 fa4e 	bl	d3fa <sdc_hci_cmd_le_read_suggested_default_data_length>
   19f5e:	e74b      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   19f60:	f7f3 fa6c 	bl	d43c <sdc_hci_cmd_le_write_suggested_default_data_length>
   19f64:	e748      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return hci_cmd_le_read_local_p256_public_key();
   19f66:	f000 fa61 	bl	1a42c <hci_cmd_le_read_local_p256_public_key>
   19f6a:	e745      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   19f6c:	f009 fe6e 	bl	23c4c <hci_cmd_le_generate_dhkey>
   19f70:	e742      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   19f72:	f009 fe6e 	bl	23c52 <hci_cmd_le_generate_dhkey_v2>
   19f76:	e73f      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   19f78:	f7f3 fa1f 	bl	d3ba <sdc_hci_cmd_le_add_device_to_resolving_list>
   19f7c:	e73c      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   19f7e:	f7f3 fa42 	bl	d406 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   19f82:	e739      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_clear_resolving_list();
   19f84:	f7f3 fa1d 	bl	d3c2 <sdc_hci_cmd_le_clear_resolving_list>
   19f88:	e736      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   19f8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19f8e:	4858      	ldr	r0, [pc, #352]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   19f90:	3301      	adds	r3, #1
   19f92:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19f96:	f7f3 fa2e 	bl	d3f6 <sdc_hci_cmd_le_read_resolving_list_size>
   19f9a:	e72d      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   19f9c:	f7f3 fa35 	bl	d40a <sdc_hci_cmd_le_set_address_resolution_enable>
   19fa0:	e72a      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   19fa2:	f7f3 fa45 	bl	d430 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   19fa6:	e727      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   19fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   19fac:	4850      	ldr	r0, [pc, #320]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   19fae:	3308      	adds	r3, #8
   19fb0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   19fb4:	f7f3 fa19 	bl	d3ea <sdc_hci_cmd_le_read_max_data_length>
   19fb8:	e71e      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   19fba:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   19fbe:	494c      	ldr	r1, [pc, #304]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   19fc0:	3304      	adds	r3, #4
   19fc2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   19fc6:	f7f3 fa12 	bl	d3ee <sdc_hci_cmd_le_read_phy>
   19fca:	e715      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   19fcc:	f7f3 fa21 	bl	d412 <sdc_hci_cmd_le_set_default_phy>
   19fd0:	e712      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   19fd2:	f7f3 fa27 	bl	d424 <sdc_hci_cmd_le_set_phy>
   19fd6:	e70f      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   19fd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19fdc:	4844      	ldr	r0, [pc, #272]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   19fde:	3302      	adds	r3, #2
   19fe0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19fe4:	f7f3 fa0b 	bl	d3fe <sdc_hci_cmd_le_read_transmit_power>
   19fe8:	e706      	b.n	19df8 <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   19fea:	f7f3 fa1d 	bl	d428 <sdc_hci_cmd_le_set_privacy_mode>
   19fee:	e703      	b.n	19df8 <hci_internal_cmd_put+0x44c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19ff0:	4628      	mov	r0, r5
	switch (opcode)	{
   19ff2:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   19ff6:	f830 3b03 	ldrh.w	r3, [r0], #3
   19ffa:	4293      	cmp	r3, r2
   19ffc:	d822      	bhi.n	1a044 <hci_internal_cmd_put+0x698>
   19ffe:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1a002:	f67f ad10 	bls.w	19a26 <hci_internal_cmd_put+0x7a>
   1a006:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1a00a:	3b01      	subs	r3, #1
   1a00c:	2b0a      	cmp	r3, #10
   1a00e:	f63f ad0a 	bhi.w	19a26 <hci_internal_cmd_put+0x7a>
   1a012:	a201      	add	r2, pc, #4	; (adr r2, 1a018 <hci_internal_cmd_put+0x66c>)
   1a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a018:	0001a065 	.word	0x0001a065
   1a01c:	0001a081 	.word	0x0001a081
   1a020:	00019a27 	.word	0x00019a27
   1a024:	00019a27 	.word	0x00019a27
   1a028:	00019a27 	.word	0x00019a27
   1a02c:	0001a0d5 	.word	0x0001a0d5
   1a030:	00019a27 	.word	0x00019a27
   1a034:	00019a27 	.word	0x00019a27
   1a038:	0001a0b1 	.word	0x0001a0b1
   1a03c:	0001a0c3 	.word	0x0001a0c3
   1a040:	0001a0db 	.word	0x0001a0db
   1a044:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1a048:	b292      	uxth	r2, r2
   1a04a:	2a05      	cmp	r2, #5
   1a04c:	f63f aceb 	bhi.w	19a26 <hci_internal_cmd_put+0x7a>
   1a050:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1a054:	3b01      	subs	r3, #1
   1a056:	2b04      	cmp	r3, #4
   1a058:	d84c      	bhi.n	1a0f4 <hci_internal_cmd_put+0x748>
   1a05a:	e8df f003 	tbb	[pc, r3]
   1a05e:	5f5c      	.short	0x5f5c
   1a060:	6562      	.short	0x6562
   1a062:	68          	.byte	0x68
   1a063:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1a064:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1a068:	4821      	ldr	r0, [pc, #132]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1a06a:	330c      	adds	r3, #12
   1a06c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1a070:	f7e6 ff34 	bl	edc <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1a074:	f026 0308 	bic.w	r3, r6, #8
   1a078:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1a07c:	4293      	cmp	r3, r2
   1a07e:	e064      	b.n	1a14a <hci_internal_cmd_put+0x79e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1a080:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a084:	481a      	ldr	r0, [pc, #104]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1a086:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1a088:	2202      	movs	r2, #2
   1a08a:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1a08c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a090:	f005 ff3e 	bl	1ff10 <memset>
	cmds->read_version_info = 1;
   1a094:	79e3      	ldrb	r3, [r4, #7]
   1a096:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1a09a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1a09e:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1a0a0:	7a23      	ldrb	r3, [r4, #8]
   1a0a2:	f023 0307 	bic.w	r3, r3, #7
   1a0a6:	f043 0307 	orr.w	r3, r3, #7
   1a0aa:	7223      	strb	r3, [r4, #8]
		return 0;
   1a0ac:	2000      	movs	r0, #0
   1a0ae:	e7e1      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1a0b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1a0b4:	480e      	ldr	r0, [pc, #56]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1a0b6:	3317      	adds	r3, #23
   1a0b8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1a0bc:	f7e6 fec2 	bl	e44 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1a0c0:	e7d8      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
		*param_length_out +=
   1a0c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1a0c6:	480a      	ldr	r0, [pc, #40]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out +=
   1a0c8:	3320      	adds	r3, #32
   1a0ca:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1a0ce:	f7e6 fe71 	bl	db4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1a0d2:	e7cf      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1a0d4:	f7f3 f969 	bl	d3aa <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1a0d8:	e7cc      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1a0da:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1a0de:	4804      	ldr	r0, [pc, #16]	; (1a0f0 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1a0e0:	3301      	adds	r3, #1
   1a0e2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1a0e6:	f7f3 f94c 	bl	d382 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1a0ea:	e7c3      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
   1a0ec:	03001241 	.word	0x03001241
   1a0f0:	20003a07 	.word	0x20003a07
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1a0f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a0f8:	482d      	ldr	r0, [pc, #180]	; (1a1b0 <hci_internal_cmd_put+0x804>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1a0fa:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1a0fc:	2202      	movs	r2, #2
   1a0fe:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1a100:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a104:	f005 ff04 	bl	1ff10 <memset>
	cmds->read_supported_vs_commands = 1;
   1a108:	79e3      	ldrb	r3, [r4, #7]
   1a10a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1a10e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1a112:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1a114:	e7ca      	b.n	1a0ac <hci_internal_cmd_put+0x700>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1a116:	f7f3 f92d 	bl	d374 <sdc_hci_cmd_vs_llpm_mode_set>
   1a11a:	e7ab      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1a11c:	f7f3 f8fe 	bl	d31c <sdc_hci_cmd_vs_conn_update>
   1a120:	e7a8      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1a122:	f7f3 f8f3 	bl	d30c <sdc_hci_cmd_vs_conn_event_extend>
   1a126:	e7a5      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1a128:	f7f3 f926 	bl	d378 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1a12c:	e7a2      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1a12e:	f7f3 f91f 	bl	d370 <sdc_hci_cmd_vs_event_length_set>
   1a132:	e79f      	b.n	1a074 <hci_internal_cmd_put+0x6c8>
	switch (hci_opcode) {
   1a134:	f242 0326 	movw	r3, #8230	; 0x2026
   1a138:	429e      	cmp	r6, r3
   1a13a:	f67f ae3f 	bls.w	19dbc <hci_internal_cmd_put+0x410>
   1a13e:	e4d8      	b.n	19af2 <hci_internal_cmd_put+0x146>
		return 0;
   1a140:	2000      	movs	r0, #0
   1a142:	e63b      	b.n	19dbc <hci_internal_cmd_put+0x410>
	switch (hci_opcode) {
   1a144:	f240 431d 	movw	r3, #1053	; 0x41d
   1a148:	429e      	cmp	r6, r3
   1a14a:	f43f ac7f 	beq.w	19a4c <hci_internal_cmd_put+0xa0>
   1a14e:	e4d0      	b.n	19af2 <hci_internal_cmd_put+0x146>
		switch (BT_OGF(opcode)) {
   1a150:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1a152:	e4ce      	b.n	19af2 <hci_internal_cmd_put+0x146>
	switch (hci_opcode) {
   1a154:	4a17      	ldr	r2, [pc, #92]	; (1a1b4 <hci_internal_cmd_put+0x808>)
   1a156:	3b2d      	subs	r3, #45	; 0x2d
   1a158:	b29b      	uxth	r3, r3
   1a15a:	fa22 f303 	lsr.w	r3, r2, r3
   1a15e:	07da      	lsls	r2, r3, #31
   1a160:	f57f acc7 	bpl.w	19af2 <hci_internal_cmd_put+0x146>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a164:	230f      	movs	r3, #15
   1a166:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1a168:	2304      	movs	r3, #4
   1a16a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1a16c:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1a16e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1a170:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1a172:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   1a176:	2301      	movs	r3, #1
   1a178:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1a17a:	f242 0383 	movw	r3, #8323	; 0x2083
   1a17e:	429e      	cmp	r6, r3
   1a180:	f47f ad7a 	bne.w	19c78 <hci_internal_cmd_put+0x2cc>
		&&
   1a184:	7863      	ldrb	r3, [r4, #1]
   1a186:	2b0e      	cmp	r3, #14
   1a188:	f47f ad76 	bne.w	19c78 <hci_internal_cmd_put+0x2cc>
		cmd_complete_or_status.occurred = false;
   1a18c:	2300      	movs	r3, #0
   1a18e:	e49b      	b.n	19ac8 <hci_internal_cmd_put+0x11c>
	switch (hci_opcode) {
   1a190:	f242 0385 	movw	r3, #8325	; 0x2085
   1a194:	429e      	cmp	r6, r3
   1a196:	d905      	bls.n	1a1a4 <hci_internal_cmd_put+0x7f8>
		return 0;
   1a198:	2000      	movs	r0, #0
   1a19a:	e4aa      	b.n	19af2 <hci_internal_cmd_put+0x146>
	switch (hci_opcode) {
   1a19c:	f242 0385 	movw	r3, #8325	; 0x2085
   1a1a0:	2001      	movs	r0, #1
   1a1a2:	e463      	b.n	19a6c <hci_internal_cmd_put+0xc0>
		return 0;
   1a1a4:	2000      	movs	r0, #0
   1a1a6:	e463      	b.n	19a70 <hci_internal_cmd_put+0xc4>
		return -NRF_EPERM;
   1a1a8:	f04f 30ff 	mov.w	r0, #4294967295
   1a1ac:	e565      	b.n	19c7a <hci_internal_cmd_put+0x2ce>
   1a1ae:	bf00      	nop
   1a1b0:	20003a07 	.word	0x20003a07
   1a1b4:	01000401 	.word	0x01000401

0001a1b8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1a1b8:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1a1ba:	4c09      	ldr	r4, [pc, #36]	; (1a1e0 <hci_internal_msg_get+0x28>)
   1a1bc:	7823      	ldrb	r3, [r4, #0]
{
   1a1be:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1a1c0:	b91b      	cbnz	r3, 1a1ca <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1a1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1a1c6:	f7f3 b881 	b.w	d2cc <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1a1ca:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1a1cc:	1c61      	adds	r1, r4, #1
   1a1ce:	3202      	adds	r2, #2
   1a1d0:	f005 fe93 	bl	1fefa <memcpy>
		cmd_complete_or_status.occurred = false;
   1a1d4:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1a1d6:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1a1d8:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1a1da:	702b      	strb	r3, [r5, #0]
}
   1a1dc:	bd38      	pop	{r3, r4, r5, pc}
   1a1de:	bf00      	nop
   1a1e0:	20003a00 	.word	0x20003a00

0001a1e4 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1a1e4:	b570      	push	{r4, r5, r6, lr}
   1a1e6:	4605      	mov	r5, r0
   1a1e8:	460e      	mov	r6, r1
   1a1ea:	4c08      	ldr	r4, [pc, #32]	; (1a20c <bt_rand+0x28>)
   1a1ec:	4620      	mov	r0, r4
   1a1ee:	f009 fdeb 	bl	23dc8 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1a1f2:	b138      	cbz	r0, 1a204 <bt_rand+0x20>
   1a1f4:	68a3      	ldr	r3, [r4, #8]
   1a1f6:	b2b2      	uxth	r2, r6
   1a1f8:	4629      	mov	r1, r5
   1a1fa:	4620      	mov	r0, r4
   1a1fc:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1a1fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a202:	4718      	bx	r3
   1a204:	f06f 0012 	mvn.w	r0, #18
   1a208:	bd70      	pop	{r4, r5, r6, pc}
   1a20a:	bf00      	nop
   1a20c:	00024988 	.word	0x00024988

0001a210 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1a212:	4d1c      	ldr	r5, [pc, #112]	; (1a284 <ecdh_p256_common_secret+0x74>)
   1a214:	491c      	ldr	r1, [pc, #112]	; (1a288 <ecdh_p256_common_secret+0x78>)
   1a216:	f105 0220 	add.w	r2, r5, #32
   1a21a:	2800      	cmp	r0, #0
   1a21c:	bf08      	it	eq
   1a21e:	4629      	moveq	r1, r5
   1a220:	4610      	mov	r0, r2
   1a222:	f002 f8f3 	bl	1c40c <ocrypto_ecdh_p256_common_secret>
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a226:	f04f 32ff 	mov.w	r2, #4294967295
	return 0;
   1a22a:	2800      	cmp	r0, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a22c:	f04f 33ff 	mov.w	r3, #4294967295
   1a230:	f04f 0001 	mov.w	r0, #1
	return 0;
   1a234:	bf14      	ite	ne
   1a236:	2712      	movne	r7, #18
   1a238:	2700      	moveq	r7, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a23a:	f7f8 fd8d 	bl	12d58 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1a23e:	f100 060c 	add.w	r6, r0, #12
   1a242:	2102      	movs	r1, #2
   1a244:	4604      	mov	r4, r0
   1a246:	4630      	mov	r0, r6
   1a248:	f009 fa65 	bl	23716 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1a24c:	233e      	movs	r3, #62	; 0x3e
   1a24e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1a250:	2322      	movs	r3, #34	; 0x22
   1a252:	7043      	strb	r3, [r0, #1]
   1a254:	2101      	movs	r1, #1
   1a256:	4630      	mov	r0, r6
   1a258:	f009 fa5d 	bl	23716 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1a25c:	2309      	movs	r3, #9
   1a25e:	7003      	strb	r3, [r0, #0]
   1a260:	2121      	movs	r1, #33	; 0x21
   1a262:	4630      	mov	r0, r6
   1a264:	f009 fa57 	bl	23716 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1a268:	f800 7b01 	strb.w	r7, [r0], #1

	if (status) {
   1a26c:	b12f      	cbz	r7, 1a27a <ecdh_p256_common_secret+0x6a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1a26e:	2220      	movs	r2, #32
   1a270:	21ff      	movs	r1, #255	; 0xff
   1a272:	f005 fe4d 	bl	1ff10 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1a276:	4620      	mov	r0, r4
   1a278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1a27a:	f105 0120 	add.w	r1, r5, #32
   1a27e:	f009 fcdb 	bl	23c38 <sys_memcpy_swap.constprop.0>
   1a282:	e7f8      	b.n	1a276 <ecdh_p256_common_secret+0x66>
   1a284:	20003a47 	.word	0x20003a47
   1a288:	00025d94 	.word	0x00025d94

0001a28c <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a28e:	4b3b      	ldr	r3, [pc, #236]	; (1a37c <ecdh_cmd_process+0xf0>)
   1a290:	f3bf 8f5b 	dmb	ish
   1a294:	681a      	ldr	r2, [r3, #0]
   1a296:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1a29a:	2a02      	cmp	r2, #2
   1a29c:	461f      	mov	r7, r3
   1a29e:	d065      	beq.n	1a36c <ecdh_cmd_process+0xe0>
   1a2a0:	2a04      	cmp	r2, #4
   1a2a2:	d068      	beq.n	1a376 <ecdh_cmd_process+0xea>
   1a2a4:	2a01      	cmp	r2, #1
   1a2a6:	d14a      	bne.n	1a33e <ecdh_cmd_process+0xb2>
		err = bt_rand(ecdh.private_key_be, 32);
   1a2a8:	4c35      	ldr	r4, [pc, #212]	; (1a380 <ecdh_cmd_process+0xf4>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1a2aa:	4e36      	ldr	r6, [pc, #216]	; (1a384 <ecdh_cmd_process+0xf8>)
		err = bt_rand(ecdh.private_key_be, 32);
   1a2ac:	2120      	movs	r1, #32
   1a2ae:	4620      	mov	r0, r4
   1a2b0:	f7ff ff98 	bl	1a1e4 <bt_rand>
		if (err) {
   1a2b4:	2800      	cmp	r0, #0
   1a2b6:	d14e      	bne.n	1a356 <ecdh_cmd_process+0xca>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1a2b8:	2220      	movs	r2, #32
   1a2ba:	4631      	mov	r1, r6
   1a2bc:	4620      	mov	r0, r4
   1a2be:	f005 fdf5 	bl	1feac <memcmp>
   1a2c2:	2800      	cmp	r0, #0
   1a2c4:	d0f2      	beq.n	1a2ac <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1a2c6:	4830      	ldr	r0, [pc, #192]	; (1a388 <ecdh_cmd_process+0xfc>)
   1a2c8:	4621      	mov	r1, r4
   1a2ca:	f002 f88b 	bl	1c3e4 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1a2ce:	4605      	mov	r5, r0
   1a2d0:	2800      	cmp	r0, #0
   1a2d2:	d1eb      	bne.n	1a2ac <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a2d4:	f04f 32ff 	mov.w	r2, #4294967295
   1a2d8:	f04f 33ff 	mov.w	r3, #4294967295
   1a2dc:	2001      	movs	r0, #1
   1a2de:	f7f8 fd3b 	bl	12d58 <bt_buf_get_rx>
   1a2e2:	f100 060c 	add.w	r6, r0, #12
   1a2e6:	2102      	movs	r1, #2
   1a2e8:	4604      	mov	r4, r0
   1a2ea:	4630      	mov	r0, r6
   1a2ec:	f009 fa13 	bl	23716 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1a2f0:	233e      	movs	r3, #62	; 0x3e
   1a2f2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1a2f4:	2342      	movs	r3, #66	; 0x42
   1a2f6:	7043      	strb	r3, [r0, #1]
   1a2f8:	2101      	movs	r1, #1
   1a2fa:	4630      	mov	r0, r6
   1a2fc:	f009 fa0b 	bl	23716 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1a300:	2308      	movs	r3, #8
   1a302:	7003      	strb	r3, [r0, #0]
   1a304:	2141      	movs	r1, #65	; 0x41
   1a306:	4630      	mov	r0, r6
   1a308:	f009 fa05 	bl	23716 <net_buf_simple_add>
   1a30c:	4606      	mov	r6, r0
	evt->status = status;
   1a30e:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1a312:	b315      	cbz	r5, 1a35a <ecdh_cmd_process+0xce>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1a314:	2240      	movs	r2, #64	; 0x40
   1a316:	2100      	movs	r1, #0
   1a318:	f005 fdfa 	bl	1ff10 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a31c:	f3bf 8f5b 	dmb	ish
   1a320:	2300      	movs	r3, #0
   1a322:	e857 2f00 	ldrex	r2, [r7]
   1a326:	e847 3100 	strex	r1, r3, [r7]
   1a32a:	2900      	cmp	r1, #0
   1a32c:	d1f9      	bne.n	1a322 <ecdh_cmd_process+0x96>
   1a32e:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1a332:	b17c      	cbz	r4, 1a354 <ecdh_cmd_process+0xc8>
		bt_recv(buf);
   1a334:	4620      	mov	r0, r4
	}
}
   1a336:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   1a33a:	f7f9 ba49 	b.w	137d0 <bt_recv>
   1a33e:	2200      	movs	r2, #0
   1a340:	f3bf 8f5b 	dmb	ish
   1a344:	e853 1f00 	ldrex	r1, [r3]
   1a348:	e843 2000 	strex	r0, r2, [r3]
   1a34c:	2800      	cmp	r0, #0
   1a34e:	d1f9      	bne.n	1a344 <ecdh_cmd_process+0xb8>
   1a350:	f3bf 8f5b 	dmb	ish
}
   1a354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_UNSPECIFIED;
   1a356:	251f      	movs	r5, #31
   1a358:	e7bc      	b.n	1a2d4 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1a35a:	490b      	ldr	r1, [pc, #44]	; (1a388 <ecdh_cmd_process+0xfc>)
   1a35c:	f009 fc6c 	bl	23c38 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1a360:	3120      	adds	r1, #32
   1a362:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1a366:	f009 fc67 	bl	23c38 <sys_memcpy_swap.constprop.0>
		break;
   1a36a:	e7d7      	b.n	1a31c <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   1a36c:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1a36e:	f7ff ff4f 	bl	1a210 <ecdh_p256_common_secret>
   1a372:	4604      	mov	r4, r0
		break;
   1a374:	e7d2      	b.n	1a31c <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   1a376:	2001      	movs	r0, #1
   1a378:	e7f9      	b.n	1a36e <ecdh_cmd_process+0xe2>
   1a37a:	bf00      	nop
   1a37c:	20002e38 	.word	0x20002e38
   1a380:	20003a47 	.word	0x20003a47
   1a384:	00025d94 	.word	0x00025d94
   1a388:	20003a67 	.word	0x20003a67

0001a38c <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1a38c:	b510      	push	{r4, lr}
   1a38e:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1a390:	2210      	movs	r2, #16
   1a392:	2100      	movs	r1, #0
   1a394:	a801      	add	r0, sp, #4
   1a396:	f005 fdbb 	bl	1ff10 <memset>
   1a39a:	4c0b      	ldr	r4, [pc, #44]	; (1a3c8 <ecdh_thread+0x3c>)
   1a39c:	9405      	str	r4, [sp, #20]
   1a39e:	2301      	movs	r3, #1
   1a3a0:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1a3a4:	f04f 32ff 	mov.w	r2, #4294967295
   1a3a8:	f04f 33ff 	mov.w	r3, #4294967295
   1a3ac:	2101      	movs	r1, #1
   1a3ae:	a801      	add	r0, sp, #4
   1a3b0:	f001 ff6e 	bl	1c290 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1a3b4:	4620      	mov	r0, r4
   1a3b6:	f00a fa5b 	bl	24870 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1a3ba:	9b04      	ldr	r3, [sp, #16]
   1a3bc:	f36f 3394 	bfc	r3, #14, #7
   1a3c0:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1a3c2:	f7ff ff63 	bl	1a28c <ecdh_cmd_process>
	while (true) {
   1a3c6:	e7ed      	b.n	1a3a4 <ecdh_thread+0x18>
   1a3c8:	20002e28 	.word	0x20002e28

0001a3cc <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1a3cc:	b510      	push	{r4, lr}
   1a3ce:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1a3d0:	480e      	ldr	r0, [pc, #56]	; (1a40c <hci_ecdh_init+0x40>)
   1a3d2:	f00a fa48 	bl	24866 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a3d6:	4c0e      	ldr	r4, [pc, #56]	; (1a410 <hci_ecdh_init+0x44>)
   1a3d8:	490e      	ldr	r1, [pc, #56]	; (1a414 <hci_ecdh_init+0x48>)
   1a3da:	2200      	movs	r2, #0
   1a3dc:	2300      	movs	r3, #0
   1a3de:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a3e2:	2300      	movs	r3, #0
   1a3e4:	220a      	movs	r2, #10
   1a3e6:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1a3ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1a3ee:	9300      	str	r3, [sp, #0]
   1a3f0:	f44f 7262 	mov.w	r2, #904	; 0x388
   1a3f4:	4b08      	ldr	r3, [pc, #32]	; (1a418 <hci_ecdh_init+0x4c>)
   1a3f6:	4620      	mov	r0, r4
   1a3f8:	f000 fef0 	bl	1b1dc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a3fc:	4907      	ldr	r1, [pc, #28]	; (1a41c <hci_ecdh_init+0x50>)
   1a3fe:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1a400:	b008      	add	sp, #32
   1a402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a406:	f009 bdce 	b.w	23fa6 <z_impl_k_thread_name_set>
   1a40a:	bf00      	nop
   1a40c:	20002e28 	.word	0x20002e28
   1a410:	20002310 	.word	0x20002310
   1a414:	20004cc0 	.word	0x20004cc0
   1a418:	0001a38d 	.word	0x0001a38d
   1a41c:	00025d87 	.word	0x00025d87

0001a420 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1a420:	4801      	ldr	r0, [pc, #4]	; (1a428 <hci_ecdh_uninit+0x8>)
   1a422:	f7f8 bae3 	b.w	129ec <z_impl_k_thread_abort>
   1a426:	bf00      	nop
   1a428:	20002310 	.word	0x20002310

0001a42c <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1a42c:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a42e:	4b0b      	ldr	r3, [pc, #44]	; (1a45c <hci_cmd_le_read_local_p256_public_key+0x30>)
   1a430:	f3bf 8f5b 	dmb	ish
   1a434:	2201      	movs	r2, #1
   1a436:	e853 1f00 	ldrex	r1, [r3]
   1a43a:	2900      	cmp	r1, #0
   1a43c:	d103      	bne.n	1a446 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1a43e:	e843 2000 	strex	r0, r2, [r3]
   1a442:	2800      	cmp	r0, #0
   1a444:	d1f7      	bne.n	1a436 <hci_cmd_le_read_local_p256_public_key+0xa>
   1a446:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1a44a:	d105      	bne.n	1a458 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1a44c:	4804      	ldr	r0, [pc, #16]	; (1a460 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1a44e:	2100      	movs	r1, #0
   1a450:	f001 ff7a 	bl	1c348 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1a454:	2000      	movs	r0, #0
}
   1a456:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a458:	200c      	movs	r0, #12
   1a45a:	e7fc      	b.n	1a456 <hci_cmd_le_read_local_p256_public_key+0x2a>
   1a45c:	20002e38 	.word	0x20002e38
   1a460:	20002e28 	.word	0x20002e28

0001a464 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1a464:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1a466:	2900      	cmp	r1, #0
   1a468:	4b11      	ldr	r3, [pc, #68]	; (1a4b0 <cmd_le_generate_dhkey+0x4c>)
   1a46a:	f3bf 8f5b 	dmb	ish
{
   1a46e:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1a470:	bf0c      	ite	eq
   1a472:	2202      	moveq	r2, #2
   1a474:	2204      	movne	r2, #4
   1a476:	e853 1f00 	ldrex	r1, [r3]
   1a47a:	2900      	cmp	r1, #0
   1a47c:	d103      	bne.n	1a486 <cmd_le_generate_dhkey+0x22>
   1a47e:	e843 2000 	strex	r0, r2, [r3]
   1a482:	2800      	cmp	r0, #0
   1a484:	d1f7      	bne.n	1a476 <cmd_le_generate_dhkey+0x12>
   1a486:	f3bf 8f5b 	dmb	ish
   1a48a:	d10e      	bne.n	1a4aa <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1a48c:	4621      	mov	r1, r4
   1a48e:	4809      	ldr	r0, [pc, #36]	; (1a4b4 <cmd_le_generate_dhkey+0x50>)
   1a490:	f009 fbd2 	bl	23c38 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1a494:	4808      	ldr	r0, [pc, #32]	; (1a4b8 <cmd_le_generate_dhkey+0x54>)
   1a496:	f104 0120 	add.w	r1, r4, #32
   1a49a:	f009 fbcd 	bl	23c38 <sys_memcpy_swap.constprop.0>
   1a49e:	4807      	ldr	r0, [pc, #28]	; (1a4bc <cmd_le_generate_dhkey+0x58>)
   1a4a0:	2100      	movs	r1, #0
   1a4a2:	f001 ff51 	bl	1c348 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1a4a6:	2000      	movs	r0, #0
}
   1a4a8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a4aa:	200c      	movs	r0, #12
   1a4ac:	e7fc      	b.n	1a4a8 <cmd_le_generate_dhkey+0x44>
   1a4ae:	bf00      	nop
   1a4b0:	20002e38 	.word	0x20002e38
   1a4b4:	20003a67 	.word	0x20003a67
   1a4b8:	20003a87 	.word	0x20003a87
   1a4bc:	20002e28 	.word	0x20002e28

0001a4c0 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1a4c0:	4901      	ldr	r1, [pc, #4]	; (1a4c8 <mpsl_low_prio_irq_handler+0x8>)
   1a4c2:	4802      	ldr	r0, [pc, #8]	; (1a4cc <mpsl_low_prio_irq_handler+0xc>)
   1a4c4:	f009 bed1 	b.w	2426a <k_work_submit_to_queue>
   1a4c8:	20002e3c 	.word	0x20002e3c
   1a4cc:	20002390 	.word	0x20002390

0001a4d0 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   1a4d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1a4d2:	2332      	movs	r3, #50	; 0x32
   1a4d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a4d8:	4a10      	ldr	r2, [pc, #64]	; (1a51c <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1a4da:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1a4dc:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a4de:	2119      	movs	r1, #25
   1a4e0:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1a4e2:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1a4e6:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1a4ea:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a4ee:	f7f2 f863 	bl	c5b8 <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1a4f2:	4604      	mov	r4, r0
   1a4f4:	b970      	cbnz	r0, 1a514 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a4f6:	4601      	mov	r1, r0
   1a4f8:	462a      	mov	r2, r5
   1a4fa:	2008      	movs	r0, #8
   1a4fc:	f7f7 ff9a 	bl	12434 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a500:	462a      	mov	r2, r5
   1a502:	4621      	mov	r1, r4
   1a504:	200b      	movs	r0, #11
   1a506:	f7f7 ff95 	bl	12434 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a50a:	462a      	mov	r2, r5
   1a50c:	4621      	mov	r1, r4
   1a50e:	4628      	mov	r0, r5
   1a510:	f7f7 ff90 	bl	12434 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1a514:	4620      	mov	r0, r4
   1a516:	b003      	add	sp, #12
   1a518:	bd30      	pop	{r4, r5, pc}
   1a51a:	bf00      	nop
   1a51c:	00023c63 	.word	0x00023c63

0001a520 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   1a520:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1a522:	4d0d      	ldr	r5, [pc, #52]	; (1a558 <mpsl_low_prio_init+0x38>)
   1a524:	490d      	ldr	r1, [pc, #52]	; (1a55c <mpsl_low_prio_init+0x3c>)
   1a526:	2400      	movs	r4, #0
   1a528:	9400      	str	r4, [sp, #0]
   1a52a:	f06f 0309 	mvn.w	r3, #9
   1a52e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a532:	4628      	mov	r0, r5
   1a534:	f001 f962 	bl	1b7fc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1a538:	4909      	ldr	r1, [pc, #36]	; (1a560 <mpsl_low_prio_init+0x40>)
   1a53a:	4628      	mov	r0, r5
   1a53c:	f009 fd33 	bl	23fa6 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1a540:	4908      	ldr	r1, [pc, #32]	; (1a564 <mpsl_low_prio_init+0x44>)
   1a542:	4809      	ldr	r0, [pc, #36]	; (1a568 <mpsl_low_prio_init+0x48>)
   1a544:	f009 fe64 	bl	24210 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1a548:	4622      	mov	r2, r4
   1a54a:	2104      	movs	r1, #4
   1a54c:	2019      	movs	r0, #25
   1a54e:	f7f7 ff71 	bl	12434 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1a552:	4620      	mov	r0, r4
   1a554:	b003      	add	sp, #12
   1a556:	bd30      	pop	{r4, r5, pc}
   1a558:	20002390 	.word	0x20002390
   1a55c:	200050c0 	.word	0x200050c0
   1a560:	00025dc0 	.word	0x00025dc0
   1a564:	00023c8f 	.word	0x00023c8f
   1a568:	20002e3c 	.word	0x20002e3c

0001a56c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a56c:	4b01      	ldr	r3, [pc, #4]	; (1a574 <mpsl_hfclk_callback+0x8>)
   1a56e:	2000      	movs	r0, #0
   1a570:	681b      	ldr	r3, [r3, #0]
   1a572:	4718      	bx	r3
   1a574:	20002e4c 	.word	0x20002e4c

0001a578 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1a578:	b120      	cbz	r0, 1a584 <nrfx_clock_start+0xc>
   1a57a:	2801      	cmp	r0, #1
   1a57c:	d106      	bne.n	1a58c <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1a57e:	4804      	ldr	r0, [pc, #16]	; (1a590 <nrfx_clock_start+0x18>)
   1a580:	f7f1 be9a 	b.w	c2b8 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a584:	4b03      	ldr	r3, [pc, #12]	; (1a594 <nrfx_clock_start+0x1c>)
   1a586:	2001      	movs	r0, #1
   1a588:	681b      	ldr	r3, [r3, #0]
   1a58a:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1a58c:	4770      	bx	lr
   1a58e:	bf00      	nop
   1a590:	0001a56d 	.word	0x0001a56d
   1a594:	20002e4c 	.word	0x20002e4c

0001a598 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1a598:	4b01      	ldr	r3, [pc, #4]	; (1a5a0 <nrfx_clock_init+0x8>)
   1a59a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1a59c:	4801      	ldr	r0, [pc, #4]	; (1a5a4 <nrfx_clock_init+0xc>)
   1a59e:	4770      	bx	lr
   1a5a0:	20002e4c 	.word	0x20002e4c
   1a5a4:	0bad0000 	.word	0x0bad0000

0001a5a8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a5a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a5ac:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1a5b0:	2a08      	cmp	r2, #8
   1a5b2:	d106      	bne.n	1a5c2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a5b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1a5b8:	2b05      	cmp	r3, #5
   1a5ba:	d802      	bhi.n	1a5c2 <nrf52_errata_103+0x1a>
   1a5bc:	4a02      	ldr	r2, [pc, #8]	; (1a5c8 <nrf52_errata_103+0x20>)
   1a5be:	5cd0      	ldrb	r0, [r2, r3]
   1a5c0:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
   1a5c2:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   1a5c4:	4770      	bx	lr
   1a5c6:	bf00      	nop
   1a5c8:	00025dda 	.word	0x00025dda

0001a5cc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a5cc:	4a02      	ldr	r2, [pc, #8]	; (1a5d8 <nvmc_wait+0xc>)
   1a5ce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1a5d2:	2b00      	cmp	r3, #0
   1a5d4:	d0fb      	beq.n	1a5ce <nvmc_wait+0x2>
}
   1a5d6:	4770      	bx	lr
   1a5d8:	4001e000 	.word	0x4001e000

0001a5dc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   1a5dc:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a5de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1a5e2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1a5e6:	2a08      	cmp	r2, #8
   1a5e8:	d14e      	bne.n	1a688 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1a5ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a5ee:	2100      	movs	r1, #0
   1a5f0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1a5f4:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1a5f8:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1a5fc:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   1a600:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   1a604:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1a608:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   1a60c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1a610:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   1a614:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1a618:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1a61c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1a620:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   1a624:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1a628:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1a62c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1a630:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   1a634:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1a638:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1a63c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1a640:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   1a644:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1a648:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1a64c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1a650:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   1a654:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1a658:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   1a65c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1a660:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   1a664:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1a668:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   1a66c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1a670:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   1a674:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1a678:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1a67c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1a680:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1a684:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1a688:	f7ff ff8e 	bl	1a5a8 <nrf52_errata_103>
   1a68c:	b118      	cbz	r0, 1a696 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1a68e:	4b3a      	ldr	r3, [pc, #232]	; (1a778 <SystemInit+0x19c>)
   1a690:	4a3a      	ldr	r2, [pc, #232]	; (1a77c <SystemInit+0x1a0>)
   1a692:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1a696:	f7ff ff87 	bl	1a5a8 <nrf52_errata_103>
   1a69a:	b118      	cbz	r0, 1a6a4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1a69c:	4b38      	ldr	r3, [pc, #224]	; (1a780 <SystemInit+0x1a4>)
   1a69e:	22fb      	movs	r2, #251	; 0xfb
   1a6a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1a6a4:	f7ff ff80 	bl	1a5a8 <nrf52_errata_103>
   1a6a8:	b170      	cbz	r0, 1a6c8 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1a6aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1a6ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a6b2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1a6b6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1a6ba:	f022 020f 	bic.w	r2, r2, #15
   1a6be:	f003 030f 	and.w	r3, r3, #15
   1a6c2:	4313      	orrs	r3, r2
   1a6c4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1a6c8:	f7ff ff6e 	bl	1a5a8 <nrf52_errata_103>
   1a6cc:	b120      	cbz	r0, 1a6d8 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1a6ce:	4b2d      	ldr	r3, [pc, #180]	; (1a784 <SystemInit+0x1a8>)
   1a6d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1a6d4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a6d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1a6dc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1a6e0:	2b08      	cmp	r3, #8
   1a6e2:	d11a      	bne.n	1a71a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1a6e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a6e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1a6ec:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1a6ee:	bf44      	itt	mi
   1a6f0:	f06f 0201 	mvnmi.w	r2, #1
   1a6f4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a6f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a6fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   1a700:	2b05      	cmp	r3, #5
   1a702:	d802      	bhi.n	1a70a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1a704:	4a20      	ldr	r2, [pc, #128]	; (1a788 <SystemInit+0x1ac>)
   1a706:	5cd3      	ldrb	r3, [r2, r3]
   1a708:	b13b      	cbz	r3, 1a71a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1a70a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a70e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1a712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a716:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a71a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a71e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1a722:	2a00      	cmp	r2, #0
   1a724:	db03      	blt.n	1a72e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1a726:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a72a:	2b00      	cmp	r3, #0
   1a72c:	da22      	bge.n	1a774 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a72e:	4917      	ldr	r1, [pc, #92]	; (1a78c <SystemInit+0x1b0>)
   1a730:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a732:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a736:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a73a:	2412      	movs	r4, #18
    nvmc_wait();
   1a73c:	f7ff ff46 	bl	1a5cc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a740:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1a744:	f7ff ff42 	bl	1a5cc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1a748:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1a74c:	f7ff ff3e 	bl	1a5cc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a750:	2300      	movs	r3, #0
   1a752:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1a756:	f7ff ff39 	bl	1a5cc <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1a75a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1a75e:	490c      	ldr	r1, [pc, #48]	; (1a790 <SystemInit+0x1b4>)
   1a760:	4b0c      	ldr	r3, [pc, #48]	; (1a794 <SystemInit+0x1b8>)
   1a762:	68ca      	ldr	r2, [r1, #12]
   1a764:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a768:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1a76a:	60cb      	str	r3, [r1, #12]
   1a76c:	f3bf 8f4f 	dsb	sy
    __NOP();
   1a770:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1a772:	e7fd      	b.n	1a770 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   1a774:	bd10      	pop	{r4, pc}
   1a776:	bf00      	nop
   1a778:	40005000 	.word	0x40005000
   1a77c:	00038148 	.word	0x00038148
   1a780:	4000f000 	.word	0x4000f000
   1a784:	40029000 	.word	0x40029000
   1a788:	00025dd4 	.word	0x00025dd4
   1a78c:	4001e000 	.word	0x4001e000
   1a790:	e000ed00 	.word	0xe000ed00
   1a794:	05fa0004 	.word	0x05fa0004

0001a798 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1a798:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1a79a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1a79c:	6802      	ldr	r2, [r0, #0]
   1a79e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1a7a2:	fab2 f382 	clz	r3, r2
   1a7a6:	f1c3 031f 	rsb	r3, r3, #31
   1a7aa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1a7ac:	fa05 f403 	lsl.w	r4, r5, r3
   1a7b0:	ea22 0404 	bic.w	r4, r2, r4
   1a7b4:	e850 6f00 	ldrex	r6, [r0]
   1a7b8:	4296      	cmp	r6, r2
   1a7ba:	d104      	bne.n	1a7c6 <nrfx_flag32_alloc+0x2e>
   1a7bc:	e840 4c00 	strex	ip, r4, [r0]
   1a7c0:	f1bc 0f00 	cmp.w	ip, #0
   1a7c4:	d1f6      	bne.n	1a7b4 <nrfx_flag32_alloc+0x1c>
   1a7c6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1a7ca:	d1e7      	bne.n	1a79c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1a7cc:	4801      	ldr	r0, [pc, #4]	; (1a7d4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1a7ce:	700b      	strb	r3, [r1, #0]
}
   1a7d0:	bd70      	pop	{r4, r5, r6, pc}
   1a7d2:	bf00      	nop
   1a7d4:	0bad0000 	.word	0x0bad0000

0001a7d8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1a7d8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1a7da:	6803      	ldr	r3, [r0, #0]
   1a7dc:	40cb      	lsrs	r3, r1
   1a7de:	07db      	lsls	r3, r3, #31
   1a7e0:	d414      	bmi.n	1a80c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1a7e2:	2301      	movs	r3, #1
   1a7e4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1a7e6:	6802      	ldr	r2, [r0, #0]
   1a7e8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1a7ec:	ea43 0102 	orr.w	r1, r3, r2
   1a7f0:	e850 4f00 	ldrex	r4, [r0]
   1a7f4:	4294      	cmp	r4, r2
   1a7f6:	d104      	bne.n	1a802 <nrfx_flag32_free+0x2a>
   1a7f8:	e840 1c00 	strex	ip, r1, [r0]
   1a7fc:	f1bc 0f00 	cmp.w	ip, #0
   1a800:	d1f6      	bne.n	1a7f0 <nrfx_flag32_free+0x18>
   1a802:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1a806:	d1ee      	bne.n	1a7e6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1a808:	4801      	ldr	r0, [pc, #4]	; (1a810 <nrfx_flag32_free+0x38>)
}
   1a80a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1a80c:	4801      	ldr	r0, [pc, #4]	; (1a814 <nrfx_flag32_free+0x3c>)
   1a80e:	e7fc      	b.n	1a80a <nrfx_flag32_free+0x32>
   1a810:	0bad0000 	.word	0x0bad0000
   1a814:	0bad0004 	.word	0x0bad0004

0001a818 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1a818:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1a81a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a81e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1a820:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1a822:	6002      	str	r2, [r0, #0]
}
   1a824:	4802      	ldr	r0, [pc, #8]	; (1a830 <nrf_gpio_pin_port_decode+0x18>)
   1a826:	bf18      	it	ne
   1a828:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1a82c:	4770      	bx	lr
   1a82e:	bf00      	nop
   1a830:	50000300 	.word	0x50000300

0001a834 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a834:	4b03      	ldr	r3, [pc, #12]	; (1a844 <pin_in_use_by_te+0x10>)
   1a836:	3008      	adds	r0, #8
   1a838:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1a83c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a840:	4770      	bx	lr
   1a842:	bf00      	nop
   1a844:	20000608 	.word	0x20000608

0001a848 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1a848:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1a84a:	f100 0308 	add.w	r3, r0, #8
   1a84e:	4c0c      	ldr	r4, [pc, #48]	; (1a880 <call_handler+0x38>)
   1a850:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1a854:	05da      	lsls	r2, r3, #23
{
   1a856:	4605      	mov	r5, r0
   1a858:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1a85a:	d507      	bpl.n	1a86c <call_handler+0x24>
   1a85c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1a860:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1a864:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1a868:	6852      	ldr	r2, [r2, #4]
   1a86a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1a86c:	68a3      	ldr	r3, [r4, #8]
   1a86e:	b12b      	cbz	r3, 1a87c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1a870:	68e2      	ldr	r2, [r4, #12]
   1a872:	4631      	mov	r1, r6
   1a874:	4628      	mov	r0, r5
    }
}
   1a876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1a87a:	4718      	bx	r3
}
   1a87c:	bd70      	pop	{r4, r5, r6, pc}
   1a87e:	bf00      	nop
   1a880:	20000608 	.word	0x20000608

0001a884 <release_handler>:
{
   1a884:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1a886:	4a12      	ldr	r2, [pc, #72]	; (1a8d0 <release_handler+0x4c>)
   1a888:	3008      	adds	r0, #8
   1a88a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1a88e:	05d9      	lsls	r1, r3, #23
   1a890:	d51b      	bpl.n	1a8ca <release_handler+0x46>
   1a892:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1a896:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1a89a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1a89e:	f102 040e 	add.w	r4, r2, #14
   1a8a2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1a8a4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1a8a8:	f413 7f80 	tst.w	r3, #256	; 0x100
   1a8ac:	d003      	beq.n	1a8b6 <release_handler+0x32>
   1a8ae:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1a8b2:	4299      	cmp	r1, r3
   1a8b4:	d009      	beq.n	1a8ca <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1a8b6:	3001      	adds	r0, #1
   1a8b8:	2830      	cmp	r0, #48	; 0x30
   1a8ba:	d1f3      	bne.n	1a8a4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1a8bc:	2300      	movs	r3, #0
   1a8be:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1a8c2:	4804      	ldr	r0, [pc, #16]	; (1a8d4 <release_handler+0x50>)
}
   1a8c4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1a8c6:	f7ff bf87 	b.w	1a7d8 <nrfx_flag32_free>
}
   1a8ca:	bc10      	pop	{r4}
   1a8cc:	4770      	bx	lr
   1a8ce:	bf00      	nop
   1a8d0:	20000608 	.word	0x20000608
   1a8d4:	2000067c 	.word	0x2000067c

0001a8d8 <pin_handler_trigger_uninit>:
{
   1a8d8:	b538      	push	{r3, r4, r5, lr}
   1a8da:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1a8dc:	f7ff ffaa 	bl	1a834 <pin_in_use_by_te>
   1a8e0:	4c09      	ldr	r4, [pc, #36]	; (1a908 <pin_handler_trigger_uninit+0x30>)
   1a8e2:	f102 0508 	add.w	r5, r2, #8
   1a8e6:	b140      	cbz	r0, 1a8fa <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a8e8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1a8ec:	4907      	ldr	r1, [pc, #28]	; (1a90c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1a8ee:	0b5b      	lsrs	r3, r3, #13
   1a8f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1a8f4:	2000      	movs	r0, #0
   1a8f6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1a8fa:	4610      	mov	r0, r2
   1a8fc:	f7ff ffc2 	bl	1a884 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1a900:	2300      	movs	r3, #0
   1a902:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1a906:	bd38      	pop	{r3, r4, r5, pc}
   1a908:	20000608 	.word	0x20000608
   1a90c:	40006000 	.word	0x40006000

0001a910 <nrfx_gpiote_input_configure>:
{
   1a910:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a914:	4604      	mov	r4, r0
   1a916:	4616      	mov	r6, r2
   1a918:	461d      	mov	r5, r3
    if (p_input_config)
   1a91a:	b301      	cbz	r1, 1a95e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a91c:	4f4e      	ldr	r7, [pc, #312]	; (1aa58 <nrfx_gpiote_input_configure+0x148>)
   1a91e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1a922:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1a926:	079b      	lsls	r3, r3, #30
   1a928:	d502      	bpl.n	1a930 <nrfx_gpiote_input_configure+0x20>
   1a92a:	f7ff ff83 	bl	1a834 <pin_in_use_by_te>
   1a92e:	bb10      	cbnz	r0, 1a976 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1a930:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1a932:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1a936:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1a93a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1a93e:	f10d 020f 	add.w	r2, sp, #15
   1a942:	460b      	mov	r3, r1
   1a944:	4620      	mov	r0, r4
   1a946:	f10d 010e 	add.w	r1, sp, #14
   1a94a:	f009 f9e4 	bl	23d16 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1a94e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1a952:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1a956:	f043 0301 	orr.w	r3, r3, #1
   1a95a:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   1a95e:	b346      	cbz	r6, 1a9b2 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a960:	4b3d      	ldr	r3, [pc, #244]	; (1aa58 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1a962:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1a966:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a968:	f104 0708 	add.w	r7, r4, #8
   1a96c:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   1a970:	0788      	lsls	r0, r1, #30
   1a972:	d502      	bpl.n	1a97a <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   1a974:	b1aa      	cbz	r2, 1a9a2 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   1a976:	4839      	ldr	r0, [pc, #228]	; (1aa5c <nrfx_gpiote_input_configure+0x14c>)
   1a978:	e01d      	b.n	1a9b6 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1a97a:	f021 0120 	bic.w	r1, r1, #32
   1a97e:	04c9      	lsls	r1, r1, #19
   1a980:	0cc9      	lsrs	r1, r1, #19
   1a982:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   1a986:	b162      	cbz	r2, 1a9a2 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   1a988:	f1bc 0f03 	cmp.w	ip, #3
   1a98c:	d8f3      	bhi.n	1a976 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1a98e:	6872      	ldr	r2, [r6, #4]
   1a990:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1a992:	f1bc 0f00 	cmp.w	ip, #0
   1a996:	d111      	bne.n	1a9bc <nrfx_gpiote_input_configure+0xac>
   1a998:	4a31      	ldr	r2, [pc, #196]	; (1aa60 <nrfx_gpiote_input_configure+0x150>)
   1a99a:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   1a99e:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1a9a2:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   1a9a6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1a9aa:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   1a9ae:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   1a9b2:	bb45      	cbnz	r5, 1aa06 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   1a9b4:	482b      	ldr	r0, [pc, #172]	; (1aa64 <nrfx_gpiote_input_configure+0x154>)
}
   1a9b6:	b004      	add	sp, #16
   1a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1a9bc:	00b2      	lsls	r2, r6, #2
   1a9be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a9c2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1a9c6:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   1a9ca:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1a9ce:	f020 0003 	bic.w	r0, r0, #3
   1a9d2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a9d6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1a9da:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1a9de:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1a9e2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a9e6:	0220      	lsls	r0, r4, #8
   1a9e8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1a9ec:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1a9f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1a9f4:	ea40 000e 	orr.w	r0, r0, lr
   1a9f8:	f041 0120 	orr.w	r1, r1, #32
   1a9fc:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   1aa00:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1aa04:	e7cd      	b.n	1a9a2 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1aa06:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1aa0a:	4620      	mov	r0, r4
   1aa0c:	f7ff ff3a 	bl	1a884 <release_handler>
    if (!handler)
   1aa10:	2e00      	cmp	r6, #0
   1aa12:	d0cf      	beq.n	1a9b4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1aa14:	4d10      	ldr	r5, [pc, #64]	; (1aa58 <nrfx_gpiote_input_configure+0x148>)
   1aa16:	e9d5 2300 	ldrd	r2, r3, [r5]
   1aa1a:	4296      	cmp	r6, r2
   1aa1c:	d101      	bne.n	1aa22 <nrfx_gpiote_input_configure+0x112>
   1aa1e:	429f      	cmp	r7, r3
   1aa20:	d018      	beq.n	1aa54 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1aa22:	4811      	ldr	r0, [pc, #68]	; (1aa68 <nrfx_gpiote_input_configure+0x158>)
   1aa24:	f10d 010f 	add.w	r1, sp, #15
   1aa28:	f7ff feb6 	bl	1a798 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1aa2c:	4b0d      	ldr	r3, [pc, #52]	; (1aa64 <nrfx_gpiote_input_configure+0x154>)
   1aa2e:	4298      	cmp	r0, r3
   1aa30:	d1c1      	bne.n	1a9b6 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1aa32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1aa36:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1aa3a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1aa3e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1aa40:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1aa42:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1aa46:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1aa4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1aa4e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1aa52:	e7af      	b.n	1a9b4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1aa54:	2200      	movs	r2, #0
   1aa56:	e7ee      	b.n	1aa36 <nrfx_gpiote_input_configure+0x126>
   1aa58:	20000608 	.word	0x20000608
   1aa5c:	0bad0004 	.word	0x0bad0004
   1aa60:	40006000 	.word	0x40006000
   1aa64:	0bad0000 	.word	0x0bad0000
   1aa68:	2000067c 	.word	0x2000067c

0001aa6c <nrfx_gpiote_output_configure>:
{
   1aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa6e:	4604      	mov	r4, r0
   1aa70:	b085      	sub	sp, #20
   1aa72:	4615      	mov	r5, r2
    if (p_config)
   1aa74:	b319      	cbz	r1, 1aabe <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1aa76:	4e33      	ldr	r6, [pc, #204]	; (1ab44 <nrfx_gpiote_output_configure+0xd8>)
   1aa78:	f100 0708 	add.w	r7, r0, #8
   1aa7c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1aa80:	0793      	lsls	r3, r2, #30
   1aa82:	d403      	bmi.n	1aa8c <nrfx_gpiote_output_configure+0x20>
   1aa84:	f7ff fed6 	bl	1a834 <pin_in_use_by_te>
   1aa88:	2800      	cmp	r0, #0
   1aa8a:	d158      	bne.n	1ab3e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1aa8c:	f012 0f1c 	tst.w	r2, #28
   1aa90:	d002      	beq.n	1aa98 <nrfx_gpiote_output_configure+0x2c>
   1aa92:	784b      	ldrb	r3, [r1, #1]
   1aa94:	2b01      	cmp	r3, #1
   1aa96:	d052      	beq.n	1ab3e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1aa98:	2301      	movs	r3, #1
   1aa9a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1aa9e:	2300      	movs	r3, #0
   1aaa0:	e9cd 1300 	strd	r1, r3, [sp]
   1aaa4:	1c4a      	adds	r2, r1, #1
   1aaa6:	1c8b      	adds	r3, r1, #2
   1aaa8:	4620      	mov	r0, r4
   1aaaa:	f10d 010f 	add.w	r1, sp, #15
   1aaae:	f009 f932 	bl	23d16 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1aab2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1aab6:	f043 0303 	orr.w	r3, r3, #3
   1aaba:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1aabe:	b915      	cbnz	r5, 1aac6 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1aac0:	4821      	ldr	r0, [pc, #132]	; (1ab48 <nrfx_gpiote_output_configure+0xdc>)
}
   1aac2:	b005      	add	sp, #20
   1aac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1aac6:	4e1f      	ldr	r6, [pc, #124]	; (1ab44 <nrfx_gpiote_output_configure+0xd8>)
   1aac8:	f104 0708 	add.w	r7, r4, #8
   1aacc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1aad0:	0783      	lsls	r3, r0, #30
   1aad2:	d534      	bpl.n	1ab3e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1aad4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1aad8:	4661      	mov	r1, ip
   1aada:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1aadc:	f020 0020 	bic.w	r0, r0, #32
   1aae0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1aae4:	04c0      	lsls	r0, r0, #19
   1aae6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1aaea:	0cc0      	lsrs	r0, r0, #19
   1aaec:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1aaf0:	2300      	movs	r3, #0
   1aaf2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1aaf6:	786a      	ldrb	r2, [r5, #1]
   1aaf8:	2a00      	cmp	r2, #0
   1aafa:	d0e1      	beq.n	1aac0 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1aafc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1ab00:	78ad      	ldrb	r5, [r5, #2]
   1ab02:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1ab06:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1ab0a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ab0e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1ab12:	0223      	lsls	r3, r4, #8
   1ab14:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1ab18:	0412      	lsls	r2, r2, #16
   1ab1a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ab1e:	ea43 030e 	orr.w	r3, r3, lr
   1ab22:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1ab24:	052a      	lsls	r2, r5, #20
   1ab26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1ab2a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ab2e:	4313      	orrs	r3, r2
   1ab30:	f040 0020 	orr.w	r0, r0, #32
   1ab34:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1ab38:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1ab3c:	e7c0      	b.n	1aac0 <nrfx_gpiote_output_configure+0x54>
{
   1ab3e:	4803      	ldr	r0, [pc, #12]	; (1ab4c <nrfx_gpiote_output_configure+0xe0>)
   1ab40:	e7bf      	b.n	1aac2 <nrfx_gpiote_output_configure+0x56>
   1ab42:	bf00      	nop
   1ab44:	20000608 	.word	0x20000608
   1ab48:	0bad0000 	.word	0x0bad0000
   1ab4c:	0bad0004 	.word	0x0bad0004

0001ab50 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1ab50:	4b01      	ldr	r3, [pc, #4]	; (1ab58 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1ab52:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1ab56:	4770      	bx	lr
   1ab58:	20000608 	.word	0x20000608

0001ab5c <nrfx_gpiote_channel_get>:
{
   1ab5c:	b508      	push	{r3, lr}
   1ab5e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1ab60:	f7ff fe68 	bl	1a834 <pin_in_use_by_te>
   1ab64:	b138      	cbz	r0, 1ab76 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ab66:	4b05      	ldr	r3, [pc, #20]	; (1ab7c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1ab68:	4805      	ldr	r0, [pc, #20]	; (1ab80 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ab6a:	3208      	adds	r2, #8
   1ab6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1ab70:	0b5b      	lsrs	r3, r3, #13
   1ab72:	700b      	strb	r3, [r1, #0]
}
   1ab74:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ab76:	4803      	ldr	r0, [pc, #12]	; (1ab84 <nrfx_gpiote_channel_get+0x28>)
   1ab78:	e7fc      	b.n	1ab74 <nrfx_gpiote_channel_get+0x18>
   1ab7a:	bf00      	nop
   1ab7c:	20000608 	.word	0x20000608
   1ab80:	0bad0000 	.word	0x0bad0000
   1ab84:	0bad0004 	.word	0x0bad0004

0001ab88 <nrfx_gpiote_init>:
{
   1ab88:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ab8a:	4c0f      	ldr	r4, [pc, #60]	; (1abc8 <nrfx_gpiote_init+0x40>)
   1ab8c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1ab90:	b9bd      	cbnz	r5, 1abc2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1ab92:	2260      	movs	r2, #96	; 0x60
   1ab94:	4629      	mov	r1, r5
   1ab96:	f104 0010 	add.w	r0, r4, #16
   1ab9a:	f005 f9b9 	bl	1ff10 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1ab9e:	2006      	movs	r0, #6
   1aba0:	f7f7 fc18 	bl	123d4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1aba4:	4b09      	ldr	r3, [pc, #36]	; (1abcc <nrfx_gpiote_init+0x44>)
    return err_code;
   1aba6:	480a      	ldr	r0, [pc, #40]	; (1abd0 <nrfx_gpiote_init+0x48>)
   1aba8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1abac:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1abb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1abb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1abb8:	2301      	movs	r3, #1
   1abba:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1abbe:	6763      	str	r3, [r4, #116]	; 0x74
}
   1abc0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1abc2:	4804      	ldr	r0, [pc, #16]	; (1abd4 <nrfx_gpiote_init+0x4c>)
   1abc4:	e7fc      	b.n	1abc0 <nrfx_gpiote_init+0x38>
   1abc6:	bf00      	nop
   1abc8:	20000608 	.word	0x20000608
   1abcc:	40006000 	.word	0x40006000
   1abd0:	0bad0000 	.word	0x0bad0000
   1abd4:	0bad0005 	.word	0x0bad0005

0001abd8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1abd8:	4b03      	ldr	r3, [pc, #12]	; (1abe8 <nrfx_gpiote_is_init+0x10>)
   1abda:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1abde:	3800      	subs	r0, #0
   1abe0:	bf18      	it	ne
   1abe2:	2001      	movne	r0, #1
   1abe4:	4770      	bx	lr
   1abe6:	bf00      	nop
   1abe8:	20000608 	.word	0x20000608

0001abec <nrfx_gpiote_channel_free>:
{
   1abec:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1abee:	4801      	ldr	r0, [pc, #4]	; (1abf4 <nrfx_gpiote_channel_free+0x8>)
   1abf0:	f7ff bdf2 	b.w	1a7d8 <nrfx_flag32_free>
   1abf4:	20000678 	.word	0x20000678

0001abf8 <nrfx_gpiote_channel_alloc>:
{
   1abf8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1abfa:	4801      	ldr	r0, [pc, #4]	; (1ac00 <nrfx_gpiote_channel_alloc+0x8>)
   1abfc:	f7ff bdcc 	b.w	1a798 <nrfx_flag32_alloc>
   1ac00:	20000678 	.word	0x20000678

0001ac04 <nrfx_gpiote_trigger_enable>:
{
   1ac04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ac06:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ac08:	f7ff fe14 	bl	1a834 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ac0c:	f104 0208 	add.w	r2, r4, #8
   1ac10:	4b1e      	ldr	r3, [pc, #120]	; (1ac8c <nrfx_gpiote_trigger_enable+0x88>)
   1ac12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ac16:	b1e8      	cbz	r0, 1ac54 <nrfx_gpiote_trigger_enable+0x50>
   1ac18:	f013 0502 	ands.w	r5, r3, #2
   1ac1c:	d11a      	bne.n	1ac54 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ac1e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1ac20:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1ac22:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1ac26:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1ac2a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ac2e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ac32:	6005      	str	r5, [r0, #0]
   1ac34:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ac36:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ac3a:	f040 0001 	orr.w	r0, r0, #1
   1ac3e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1ac42:	b129      	cbz	r1, 1ac50 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1ac44:	2201      	movs	r2, #1
   1ac46:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1ac4a:	4a11      	ldr	r2, [pc, #68]	; (1ac90 <nrfx_gpiote_trigger_enable+0x8c>)
   1ac4c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1ac50:	b003      	add	sp, #12
   1ac52:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ac54:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1ac58:	2b04      	cmp	r3, #4
   1ac5a:	d012      	beq.n	1ac82 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1ac5c:	2b05      	cmp	r3, #5
   1ac5e:	d012      	beq.n	1ac86 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ac60:	a801      	add	r0, sp, #4
   1ac62:	9401      	str	r4, [sp, #4]
   1ac64:	f7ff fdd8 	bl	1a818 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1ac68:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1ac6a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1ac6e:	40d9      	lsrs	r1, r3
   1ac70:	f001 0101 	and.w	r1, r1, #1
   1ac74:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1ac76:	4620      	mov	r0, r4
}
   1ac78:	b003      	add	sp, #12
   1ac7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1ac7e:	f009 b893 	b.w	23da8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1ac82:	2103      	movs	r1, #3
   1ac84:	e7f7      	b.n	1ac76 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1ac86:	2102      	movs	r1, #2
   1ac88:	e7f5      	b.n	1ac76 <nrfx_gpiote_trigger_enable+0x72>
   1ac8a:	bf00      	nop
   1ac8c:	20000608 	.word	0x20000608
   1ac90:	40006000 	.word	0x40006000

0001ac94 <nrfx_gpiote_trigger_disable>:
{
   1ac94:	b508      	push	{r3, lr}
   1ac96:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ac98:	f7ff fdcc 	bl	1a834 <pin_in_use_by_te>
   1ac9c:	b1c0      	cbz	r0, 1acd0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ac9e:	f102 0108 	add.w	r1, r2, #8
   1aca2:	4b0e      	ldr	r3, [pc, #56]	; (1acdc <nrfx_gpiote_trigger_disable+0x48>)
   1aca4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1aca8:	0799      	lsls	r1, r3, #30
   1acaa:	d411      	bmi.n	1acd0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1acac:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1acae:	2201      	movs	r2, #1
   1acb0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1acb2:	009b      	lsls	r3, r3, #2
   1acb4:	490a      	ldr	r1, [pc, #40]	; (1ace0 <nrfx_gpiote_trigger_disable+0x4c>)
   1acb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1acba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1acbe:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1acc2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1acc6:	f022 0203 	bic.w	r2, r2, #3
   1acca:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1acce:	bd08      	pop	{r3, pc}
   1acd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1acd4:	2100      	movs	r1, #0
   1acd6:	4610      	mov	r0, r2
   1acd8:	f009 b866 	b.w	23da8 <nrf_gpio_cfg_sense_set>
   1acdc:	20000608 	.word	0x20000608
   1ace0:	40006000 	.word	0x40006000

0001ace4 <nrfx_gpiote_pin_uninit>:
{
   1ace4:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1ace6:	4b0e      	ldr	r3, [pc, #56]	; (1ad20 <nrfx_gpiote_pin_uninit+0x3c>)
   1ace8:	f100 0208 	add.w	r2, r0, #8
{
   1acec:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1acee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1acf2:	07db      	lsls	r3, r3, #31
   1acf4:	d511      	bpl.n	1ad1a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1acf6:	f7ff ffcd 	bl	1ac94 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1acfa:	4620      	mov	r0, r4
   1acfc:	f7ff fdec 	bl	1a8d8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ad00:	a801      	add	r0, sp, #4
   1ad02:	9401      	str	r4, [sp, #4]
   1ad04:	f7ff fd88 	bl	1a818 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ad08:	9b01      	ldr	r3, [sp, #4]
   1ad0a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ad0e:	2202      	movs	r2, #2
   1ad10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1ad14:	4803      	ldr	r0, [pc, #12]	; (1ad24 <nrfx_gpiote_pin_uninit+0x40>)
}
   1ad16:	b002      	add	sp, #8
   1ad18:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ad1a:	4803      	ldr	r0, [pc, #12]	; (1ad28 <nrfx_gpiote_pin_uninit+0x44>)
   1ad1c:	e7fb      	b.n	1ad16 <nrfx_gpiote_pin_uninit+0x32>
   1ad1e:	bf00      	nop
   1ad20:	20000608 	.word	0x20000608
   1ad24:	0bad0000 	.word	0x0bad0000
   1ad28:	0bad0004 	.word	0x0bad0004

0001ad2c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1ad2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad30:	4b68      	ldr	r3, [pc, #416]	; (1aed4 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   1ad32:	4869      	ldr	r0, [pc, #420]	; (1aed8 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ad34:	4969      	ldr	r1, [pc, #420]	; (1aedc <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   1ad36:	2600      	movs	r6, #0
{
   1ad38:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1ad3a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ad3c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ad3e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1ad40:	b135      	cbz	r5, 1ad50 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1ad42:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1ad46:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ad48:	bf1e      	ittt	ne
   1ad4a:	601c      	strne	r4, [r3, #0]
   1ad4c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1ad4e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ad50:	3304      	adds	r3, #4
   1ad52:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1ad54:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ad58:	d1f1      	bne.n	1ad3e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ad5a:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1aed8 <nrfx_gpiote_irq_handler+0x1ac>
   1ad5e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1ad62:	2b00      	cmp	r3, #0
   1ad64:	f000 8099 	beq.w	1ae9a <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   1ad68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ad6c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1ad70:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1ad72:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1ad76:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1ad7a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1ad7c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ad80:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1ad84:	f10d 0a10 	add.w	sl, sp, #16
   1ad88:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1ad8c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1ad8e:	f04f 0b01 	mov.w	fp, #1
   1ad92:	e049      	b.n	1ae28 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   1ad94:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ad96:	4a52      	ldr	r2, [pc, #328]	; (1aee0 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1ad98:	fa94 f4a4 	rbit	r4, r4
   1ad9c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1ada0:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1ada2:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ada4:	f104 0308 	add.w	r3, r4, #8
   1ada8:	9403      	str	r4, [sp, #12]
   1adaa:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1adae:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1adb2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1adb6:	fa0b f202 	lsl.w	r2, fp, r2
   1adba:	ea23 0302 	bic.w	r3, r3, r2
   1adbe:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1adc2:	a803      	add	r0, sp, #12
   1adc4:	f7ff fd28 	bl	1a818 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1adc8:	9b03      	ldr	r3, [sp, #12]
   1adca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1adce:	08b9      	lsrs	r1, r7, #2
   1add0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1add4:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1add8:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1adda:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1addc:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1ade0:	d52c      	bpl.n	1ae3c <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   1ade2:	4620      	mov	r0, r4
   1ade4:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ade6:	b2dd      	uxtb	r5, r3
   1ade8:	f7ff fd2e 	bl	1a848 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1adec:	a803      	add	r0, sp, #12
   1adee:	9403      	str	r4, [sp, #12]
   1adf0:	f7ff fd12 	bl	1a818 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1adf4:	9b03      	ldr	r3, [sp, #12]
   1adf6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1adfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1adfe:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1ae02:	429d      	cmp	r5, r3
   1ae04:	d107      	bne.n	1ae16 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ae06:	2100      	movs	r1, #0
   1ae08:	4620      	mov	r0, r4
   1ae0a:	f008 ffcd 	bl	23da8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1ae0e:	4629      	mov	r1, r5
   1ae10:	4620      	mov	r0, r4
   1ae12:	f008 ffc9 	bl	23da8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ae16:	a803      	add	r0, sp, #12
   1ae18:	9403      	str	r4, [sp, #12]
   1ae1a:	f7ff fcfd 	bl	1a818 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1ae1e:	9b03      	ldr	r3, [sp, #12]
   1ae20:	fa0b f303 	lsl.w	r3, fp, r3
   1ae24:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1ae28:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1ae2c:	2c00      	cmp	r4, #0
   1ae2e:	d1b1      	bne.n	1ad94 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ae30:	f1b8 0f00 	cmp.w	r8, #0
   1ae34:	d11d      	bne.n	1ae72 <nrfx_gpiote_irq_handler+0x146>
   1ae36:	f04f 0801 	mov.w	r8, #1
   1ae3a:	e7a5      	b.n	1ad88 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1ae3c:	2b02      	cmp	r3, #2
   1ae3e:	d10c      	bne.n	1ae5a <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ae40:	2103      	movs	r1, #3
   1ae42:	4620      	mov	r0, r4
   1ae44:	f008 ffb0 	bl	23da8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1ae48:	f005 0305 	and.w	r3, r5, #5
   1ae4c:	2b01      	cmp	r3, #1
   1ae4e:	d1e2      	bne.n	1ae16 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1ae50:	4639      	mov	r1, r7
   1ae52:	4620      	mov	r0, r4
   1ae54:	f7ff fcf8 	bl	1a848 <call_handler>
   1ae58:	e7dd      	b.n	1ae16 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ae5a:	2102      	movs	r1, #2
   1ae5c:	4620      	mov	r0, r4
   1ae5e:	9301      	str	r3, [sp, #4]
   1ae60:	f008 ffa2 	bl	23da8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1ae64:	2d03      	cmp	r5, #3
   1ae66:	d0f3      	beq.n	1ae50 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1ae68:	9b01      	ldr	r3, [sp, #4]
   1ae6a:	2b03      	cmp	r3, #3
   1ae6c:	d1d3      	bne.n	1ae16 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1ae6e:	2d02      	cmp	r5, #2
   1ae70:	e7ed      	b.n	1ae4e <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1ae72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ae76:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1ae7a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1ae7e:	4919      	ldr	r1, [pc, #100]	; (1aee4 <nrfx_gpiote_irq_handler+0x1b8>)
   1ae80:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1ae84:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1ae86:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1ae8a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1ae8e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1ae90:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1ae92:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1ae96:	f47f af73 	bne.w	1ad80 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1ae9a:	2401      	movs	r4, #1
    while (mask)
   1ae9c:	b916      	cbnz	r6, 1aea4 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1ae9e:	b007      	add	sp, #28
   1aea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1aea4:	fa96 f3a6 	rbit	r3, r6
   1aea8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1aeac:	fa04 f203 	lsl.w	r2, r4, r3
   1aeb0:	009b      	lsls	r3, r3, #2
   1aeb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1aeb6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1aeba:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1aebe:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1aec2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1aec6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1aeca:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1aece:	f7ff fcbb 	bl	1a848 <call_handler>
   1aed2:	e7e3      	b.n	1ae9c <nrfx_gpiote_irq_handler+0x170>
   1aed4:	40006100 	.word	0x40006100
   1aed8:	40006000 	.word	0x40006000
   1aedc:	40006120 	.word	0x40006120
   1aee0:	20000608 	.word	0x20000608
   1aee4:	50000300 	.word	0x50000300

0001aee8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1aee8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1aeea:	4801      	ldr	r0, [pc, #4]	; (1aef0 <nrfx_ppi_channel_alloc+0x8>)
   1aeec:	f7ff bc54 	b.w	1a798 <nrfx_flag32_alloc>
   1aef0:	20000684 	.word	0x20000684

0001aef4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aef4:	4b10      	ldr	r3, [pc, #64]	; (1af38 <z_sys_init_run_level+0x44>)
{
   1aef6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1aef8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1aefc:	3001      	adds	r0, #1
   1aefe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1af02:	42a6      	cmp	r6, r4
   1af04:	d800      	bhi.n	1af08 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   1af06:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   1af08:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   1af0c:	b18d      	cbz	r5, 1af32 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   1af0e:	4628      	mov	r0, r5
   1af10:	4798      	blx	r3
			if (rc != 0) {
   1af12:	b138      	cbz	r0, 1af24 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1af14:	2800      	cmp	r0, #0
   1af16:	bfb8      	it	lt
   1af18:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1af1a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1af1c:	28ff      	cmp	r0, #255	; 0xff
   1af1e:	bfa8      	it	ge
   1af20:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1af22:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1af24:	68ea      	ldr	r2, [r5, #12]
   1af26:	7853      	ldrb	r3, [r2, #1]
   1af28:	f043 0301 	orr.w	r3, r3, #1
   1af2c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1af2e:	3408      	adds	r4, #8
   1af30:	e7e7      	b.n	1af02 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   1af32:	4798      	blx	r3
   1af34:	e7fb      	b.n	1af2e <z_sys_init_run_level+0x3a>
   1af36:	bf00      	nop
   1af38:	00025390 	.word	0x00025390

0001af3c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1af3c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1af3e:	4b0a      	ldr	r3, [pc, #40]	; (1af68 <bg_thread_main+0x2c>)
   1af40:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1af42:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1af44:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1af46:	f7ff ffd5 	bl	1aef4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1af4a:	f001 fa45 	bl	1c3d8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1af4e:	2004      	movs	r0, #4
   1af50:	f7ff ffd0 	bl	1aef4 <z_sys_init_run_level>

	z_init_static_threads();
   1af54:	f000 f96e 	bl	1b234 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   1af58:	f004 f9fa 	bl	1f350 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1af5c:	4a03      	ldr	r2, [pc, #12]	; (1af6c <bg_thread_main+0x30>)
   1af5e:	7b13      	ldrb	r3, [r2, #12]
   1af60:	f023 0301 	bic.w	r3, r3, #1
   1af64:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1af66:	bd08      	pop	{r3, pc}
   1af68:	20003aa7 	.word	0x20003aa7
   1af6c:	200024b0 	.word	0x200024b0

0001af70 <z_bss_zero>:
{
   1af70:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1af72:	4803      	ldr	r0, [pc, #12]	; (1af80 <z_bss_zero+0x10>)
   1af74:	4a03      	ldr	r2, [pc, #12]	; (1af84 <z_bss_zero+0x14>)
   1af76:	2100      	movs	r1, #0
   1af78:	1a12      	subs	r2, r2, r0
   1af7a:	f008 ff4b 	bl	23e14 <z_early_memset>
}
   1af7e:	bd08      	pop	{r3, pc}
   1af80:	20000980 	.word	0x20000980
   1af84:	20003aac 	.word	0x20003aac

0001af88 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1af88:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1af8a:	2300      	movs	r3, #0
{
   1af8c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1af8e:	2201      	movs	r2, #1
   1af90:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1af94:	4e13      	ldr	r6, [pc, #76]	; (1afe4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1af96:	4d14      	ldr	r5, [pc, #80]	; (1afe8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1af98:	9301      	str	r3, [sp, #4]
   1af9a:	220f      	movs	r2, #15
   1af9c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1afa0:	4912      	ldr	r1, [pc, #72]	; (1afec <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1afa2:	2314      	movs	r3, #20
   1afa4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1afa8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1afac:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1afae:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1afb2:	fb00 1104 	mla	r1, r0, r4, r1
   1afb6:	4b0e      	ldr	r3, [pc, #56]	; (1aff0 <z_init_cpu+0x68>)
   1afb8:	9500      	str	r5, [sp, #0]
   1afba:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1afbe:	4630      	mov	r0, r6
   1afc0:	f000 f8da 	bl	1b178 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1afc4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1afc6:	4a0b      	ldr	r2, [pc, #44]	; (1aff4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1afc8:	60ee      	str	r6, [r5, #12]
   1afca:	f023 0304 	bic.w	r3, r3, #4
   1afce:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1afd0:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1afd4:	fb04 3303 	mla	r3, r4, r3, r3
   1afd8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1afda:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   1afdc:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1afde:	b006      	add	sp, #24
   1afe0:	bd70      	pop	{r4, r5, r6, pc}
   1afe2:	bf00      	nop
   1afe4:	20002430 	.word	0x20002430
   1afe8:	20002e50 	.word	0x20002e50
   1afec:	20005d40 	.word	0x20005d40
   1aff0:	0001b2ed 	.word	0x0001b2ed
   1aff4:	20005500 	.word	0x20005500

0001aff8 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1aff8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1affa:	2000      	movs	r0, #0
{
   1affc:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1affe:	f7ff ff79 	bl	1aef4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1b002:	4b2d      	ldr	r3, [pc, #180]	; (1b0b8 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b004:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1b008:	4d2c      	ldr	r5, [pc, #176]	; (1b0bc <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1b00a:	4e2d      	ldr	r6, [pc, #180]	; (1b0c0 <z_cstart+0xc8>)
   1b00c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b00e:	4f2d      	ldr	r7, [pc, #180]	; (1b0c4 <z_cstart+0xcc>)
   1b010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b014:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b016:	23e0      	movs	r3, #224	; 0xe0
   1b018:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b01c:	2400      	movs	r4, #0
   1b01e:	2320      	movs	r3, #32
   1b020:	77eb      	strb	r3, [r5, #31]
   1b022:	762c      	strb	r4, [r5, #24]
   1b024:	766c      	strb	r4, [r5, #25]
   1b026:	76ac      	strb	r4, [r5, #26]
   1b028:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b02c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b02e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b032:	626b      	str	r3, [r5, #36]	; 0x24
   1b034:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b038:	f7f7 fc4c 	bl	128d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b03c:	f7f7 f9aa 	bl	12394 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b040:	f04f 33ff 	mov.w	r3, #4294967295
   1b044:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b046:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1b048:	f7f7 fd7e 	bl	12b48 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1b04c:	f7f7 fce4 	bl	12a18 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1b050:	f240 1301 	movw	r3, #257	; 0x101
   1b054:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1b058:	ab06      	add	r3, sp, #24
   1b05a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1b05c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1b060:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1b062:	f008 feb0 	bl	23dc6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1b066:	2001      	movs	r0, #1
   1b068:	f7ff ff44 	bl	1aef4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1b06c:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1b06e:	4d16      	ldr	r5, [pc, #88]	; (1b0c8 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1b070:	f7ff ff40 	bl	1aef4 <z_sys_init_run_level>
	z_sched_init();
   1b074:	f000 fe96 	bl	1bda4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b078:	4b14      	ldr	r3, [pc, #80]	; (1b0cc <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   1b07a:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b07c:	9305      	str	r3, [sp, #20]
   1b07e:	2301      	movs	r3, #1
   1b080:	4913      	ldr	r1, [pc, #76]	; (1b0d0 <z_cstart+0xd8>)
   1b082:	9400      	str	r4, [sp, #0]
   1b084:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1b088:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b08c:	463b      	mov	r3, r7
   1b08e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1b092:	4628      	mov	r0, r5
   1b094:	f000 f870 	bl	1b178 <z_setup_new_thread>
   1b098:	7b6a      	ldrb	r2, [r5, #13]
   1b09a:	4606      	mov	r6, r0
   1b09c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1b0a0:	4628      	mov	r0, r5
   1b0a2:	736a      	strb	r2, [r5, #13]
   1b0a4:	f009 f98e 	bl	243c4 <z_ready_thread>
	z_init_cpu(0);
   1b0a8:	4620      	mov	r0, r4
   1b0aa:	f7ff ff6d 	bl	1af88 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b0ae:	463a      	mov	r2, r7
   1b0b0:	4631      	mov	r1, r6
   1b0b2:	4628      	mov	r0, r5
   1b0b4:	f7f7 fa8c 	bl	125d0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b0b8:	20005d40 	.word	0x20005d40
   1b0bc:	e000ed00 	.word	0xe000ed00
   1b0c0:	20002e50 	.word	0x20002e50
   1b0c4:	0001af3d 	.word	0x0001af3d
   1b0c8:	200024b0 	.word	0x200024b0
   1b0cc:	00025df5 	.word	0x00025df5
   1b0d0:	20005ec0 	.word	0x20005ec0

0001b0d4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   1b0d4:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1b0d6:	4c06      	ldr	r4, [pc, #24]	; (1b0f0 <statics_init+0x1c>)
   1b0d8:	4d06      	ldr	r5, [pc, #24]	; (1b0f4 <statics_init+0x20>)
   1b0da:	42ac      	cmp	r4, r5
   1b0dc:	d301      	bcc.n	1b0e2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1b0de:	2000      	movs	r0, #0
   1b0e0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1b0e2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1b0e6:	4620      	mov	r0, r4
   1b0e8:	f008 fe98 	bl	23e1c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1b0ec:	3414      	adds	r4, #20
   1b0ee:	e7f4      	b.n	1b0da <statics_init+0x6>
   1b0f0:	200007cc 	.word	0x200007cc
   1b0f4:	200007cc 	.word	0x200007cc

0001b0f8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   1b0f8:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b0fa:	4c06      	ldr	r4, [pc, #24]	; (1b114 <init_mem_slab_module+0x1c>)
   1b0fc:	4d06      	ldr	r5, [pc, #24]	; (1b118 <init_mem_slab_module+0x20>)
	int rc = 0;
   1b0fe:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b100:	42ac      	cmp	r4, r5
   1b102:	d300      	bcc.n	1b106 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1b104:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1b106:	4620      	mov	r0, r4
   1b108:	f008 fefa 	bl	23f00 <create_free_list>
		if (rc < 0) {
   1b10c:	2800      	cmp	r0, #0
   1b10e:	dbf9      	blt.n	1b104 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b110:	341c      	adds	r4, #28
   1b112:	e7f5      	b.n	1b100 <init_mem_slab_module+0x8>
   1b114:	20000778 	.word	0x20000778
   1b118:	200007cc 	.word	0x200007cc

0001b11c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1b11c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b11e:	460c      	mov	r4, r1
	__asm__ volatile(
   1b120:	f04f 0540 	mov.w	r5, #64	; 0x40
   1b124:	f3ef 8111 	mrs	r1, BASEPRI
   1b128:	f385 8812 	msr	BASEPRI_MAX, r5
   1b12c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1b130:	6945      	ldr	r5, [r0, #20]
   1b132:	b15d      	cbz	r5, 1b14c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1b134:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b136:	682b      	ldr	r3, [r5, #0]
   1b138:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b13a:	6983      	ldr	r3, [r0, #24]
   1b13c:	3301      	adds	r3, #1
   1b13e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1b140:	2000      	movs	r0, #0
	__asm__ volatile(
   1b142:	f381 8811 	msr	BASEPRI, r1
   1b146:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1b14a:	e011      	b.n	1b170 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1b14c:	ea52 0603 	orrs.w	r6, r2, r3
   1b150:	d103      	bne.n	1b15a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1b152:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1b154:	f06f 000b 	mvn.w	r0, #11
   1b158:	e7f3      	b.n	1b142 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1b15a:	e9cd 2300 	strd	r2, r3, [sp]
   1b15e:	4602      	mov	r2, r0
   1b160:	3008      	adds	r0, #8
   1b162:	f000 fd29 	bl	1bbb8 <z_pend_curr>
		if (result == 0) {
   1b166:	b918      	cbnz	r0, 1b170 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1b168:	4b02      	ldr	r3, [pc, #8]	; (1b174 <k_mem_slab_alloc+0x58>)
   1b16a:	689b      	ldr	r3, [r3, #8]
   1b16c:	695b      	ldr	r3, [r3, #20]
   1b16e:	6023      	str	r3, [r4, #0]
}
   1b170:	b002      	add	sp, #8
   1b172:	bd70      	pop	{r4, r5, r6, pc}
   1b174:	20002e50 	.word	0x20002e50

0001b178 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b178:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1b17c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1b17e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1b180:	2604      	movs	r6, #4
   1b182:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1b184:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1b186:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b188:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1b18c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b18e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1b190:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1b196:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b198:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1b19c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1b19e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1b1a2:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1b1a6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1b1a8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1b1aa:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b1ac:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b1b0:	9202      	str	r2, [sp, #8]
   1b1b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b1b4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1b1b6:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b1b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b1ba:	9200      	str	r2, [sp, #0]
   1b1bc:	4642      	mov	r2, r8
{
   1b1be:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b1c0:	f7f7 f9d4 	bl	1256c <arch_new_thread>
	if (!_current) {
   1b1c4:	4b04      	ldr	r3, [pc, #16]	; (1b1d8 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1b1c6:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1b1c8:	689b      	ldr	r3, [r3, #8]
   1b1ca:	b103      	cbz	r3, 1b1ce <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1b1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1b1ce:	6763      	str	r3, [r4, #116]	; 0x74
}
   1b1d0:	4640      	mov	r0, r8
   1b1d2:	b004      	add	sp, #16
   1b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b1d8:	20002e50 	.word	0x20002e50

0001b1dc <z_impl_k_thread_create>:
{
   1b1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1de:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b1e0:	2500      	movs	r5, #0
   1b1e2:	9505      	str	r5, [sp, #20]
   1b1e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1b1e6:	9504      	str	r5, [sp, #16]
   1b1e8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1b1ea:	9503      	str	r5, [sp, #12]
   1b1ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b1ee:	9502      	str	r5, [sp, #8]
{
   1b1f0:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b1f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b1f6:	9501      	str	r5, [sp, #4]
   1b1f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b1fa:	9500      	str	r5, [sp, #0]
{
   1b1fc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b1fe:	f7ff ffbb 	bl	1b178 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1b202:	f1b6 3fff 	cmp.w	r6, #4294967295
   1b206:	bf08      	it	eq
   1b208:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1b20c:	d005      	beq.n	1b21a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b20e:	ea56 0307 	orrs.w	r3, r6, r7
   1b212:	d105      	bne.n	1b220 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1b214:	4620      	mov	r0, r4
   1b216:	f000 fd45 	bl	1bca4 <z_sched_start>
}
   1b21a:	4620      	mov	r0, r4
   1b21c:	b007      	add	sp, #28
   1b21e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b220:	4903      	ldr	r1, [pc, #12]	; (1b230 <z_impl_k_thread_create+0x54>)
   1b222:	463a      	mov	r2, r7
   1b224:	4633      	mov	r3, r6
   1b226:	f104 0018 	add.w	r0, r4, #24
   1b22a:	f000 ff37 	bl	1c09c <z_add_timeout>
   1b22e:	e7f4      	b.n	1b21a <z_impl_k_thread_create+0x3e>
   1b230:	00024429 	.word	0x00024429

0001b234 <z_init_static_threads>:
{
   1b234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b238:	4c29      	ldr	r4, [pc, #164]	; (1b2e0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1b23a:	4d2a      	ldr	r5, [pc, #168]	; (1b2e4 <z_init_static_threads+0xb0>)
{
   1b23c:	b087      	sub	sp, #28
   1b23e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1b240:	42ae      	cmp	r6, r5
   1b242:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   1b246:	d30f      	bcc.n	1b268 <z_init_static_threads+0x34>
	k_sched_lock();
   1b248:	f000 fd7c 	bl	1bd44 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b24c:	4c24      	ldr	r4, [pc, #144]	; (1b2e0 <z_init_static_threads+0xac>)
   1b24e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1b2e8 <z_init_static_threads+0xb4>
   1b252:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b256:	f240 37e7 	movw	r7, #999	; 0x3e7
   1b25a:	42ac      	cmp	r4, r5
   1b25c:	d320      	bcc.n	1b2a0 <z_init_static_threads+0x6c>
}
   1b25e:	b007      	add	sp, #28
   1b260:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1b264:	f000 bd82 	b.w	1bd6c <k_sched_unlock>
		z_setup_new_thread(
   1b268:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b26c:	9305      	str	r3, [sp, #20]
   1b26e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1b272:	9304      	str	r3, [sp, #16]
   1b274:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b278:	9303      	str	r3, [sp, #12]
   1b27a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b27e:	9302      	str	r3, [sp, #8]
   1b280:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b284:	9301      	str	r3, [sp, #4]
   1b286:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b28a:	9300      	str	r3, [sp, #0]
   1b28c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   1b290:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   1b294:	f7ff ff70 	bl	1b178 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b298:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   1b29c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1b29e:	e7ce      	b.n	1b23e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b2a2:	1c5a      	adds	r2, r3, #1
   1b2a4:	d00d      	beq.n	1b2c2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1b2a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b2aa:	2100      	movs	r1, #0
   1b2ac:	4638      	mov	r0, r7
   1b2ae:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b2b2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1b2b6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b2ba:	d104      	bne.n	1b2c6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1b2bc:	4640      	mov	r0, r8
   1b2be:	f000 fcf1 	bl	1bca4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b2c2:	342c      	adds	r4, #44	; 0x2c
   1b2c4:	e7c9      	b.n	1b25a <z_init_static_threads+0x26>
   1b2c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b2ca:	2300      	movs	r3, #0
   1b2cc:	f7e4 ff18 	bl	100 <__aeabi_uldivmod>
   1b2d0:	4602      	mov	r2, r0
   1b2d2:	460b      	mov	r3, r1
   1b2d4:	f108 0018 	add.w	r0, r8, #24
   1b2d8:	4649      	mov	r1, r9
   1b2da:	f000 fedf 	bl	1c09c <z_add_timeout>
   1b2de:	e7f0      	b.n	1b2c2 <z_init_static_threads+0x8e>
   1b2e0:	00024b68 	.word	0x00024b68
   1b2e4:	00024b68 	.word	0x00024b68
   1b2e8:	00024429 	.word	0x00024429

0001b2ec <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1b2ec:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1b2ee:	4c0b      	ldr	r4, [pc, #44]	; (1b31c <idle+0x30>)
	return !z_sys_post_kernel;
   1b2f0:	4d0b      	ldr	r5, [pc, #44]	; (1b320 <idle+0x34>)
	__asm__ volatile(
   1b2f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b2f6:	f3ef 8311 	mrs	r3, BASEPRI
   1b2fa:	f382 8812 	msr	BASEPRI_MAX, r2
   1b2fe:	f3bf 8f6f 	isb	sy
   1b302:	f009 f928 	bl	24556 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1b306:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1b308:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1b30a:	b913      	cbnz	r3, 1b312 <idle+0x26>
	arch_cpu_idle();
   1b30c:	f7f7 f848 	bl	123a0 <arch_cpu_idle>
}
   1b310:	e7ef      	b.n	1b2f2 <idle+0x6>
   1b312:	f7f6 fe27 	bl	11f64 <pm_system_suspend>
   1b316:	2800      	cmp	r0, #0
   1b318:	d1eb      	bne.n	1b2f2 <idle+0x6>
   1b31a:	e7f7      	b.n	1b30c <idle+0x20>
   1b31c:	20002e50 	.word	0x20002e50
   1b320:	20003aa7 	.word	0x20003aa7

0001b324 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b328:	4604      	mov	r4, r0
   1b32a:	4617      	mov	r7, r2
   1b32c:	461e      	mov	r6, r3
   1b32e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b332:	f3ef 8811 	mrs	r8, BASEPRI
   1b336:	f383 8812 	msr	BASEPRI_MAX, r3
   1b33a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b33e:	68c3      	ldr	r3, [r0, #12]
   1b340:	4a33      	ldr	r2, [pc, #204]	; (1b410 <z_impl_k_mutex_lock+0xec>)
   1b342:	b17b      	cbz	r3, 1b364 <z_impl_k_mutex_lock+0x40>
   1b344:	6880      	ldr	r0, [r0, #8]
   1b346:	6891      	ldr	r1, [r2, #8]
   1b348:	4288      	cmp	r0, r1
   1b34a:	d019      	beq.n	1b380 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b34c:	ea57 0306 	orrs.w	r3, r7, r6
   1b350:	d118      	bne.n	1b384 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1b352:	f388 8811 	msr	BASEPRI, r8
   1b356:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1b35a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1b35e:	b002      	add	sp, #8
   1b360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1b364:	6891      	ldr	r1, [r2, #8]
   1b366:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b36a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1b36c:	3301      	adds	r3, #1
   1b36e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1b370:	6893      	ldr	r3, [r2, #8]
   1b372:	60a3      	str	r3, [r4, #8]
   1b374:	f388 8811 	msr	BASEPRI, r8
   1b378:	f3bf 8f6f 	isb	sy
		return 0;
   1b37c:	2000      	movs	r0, #0
   1b37e:	e7ee      	b.n	1b35e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1b380:	6921      	ldr	r1, [r4, #16]
   1b382:	e7f2      	b.n	1b36a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b384:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1b388:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1b38c:	4299      	cmp	r1, r3
   1b38e:	bfa8      	it	ge
   1b390:	4619      	movge	r1, r3
   1b392:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1b396:	4291      	cmp	r1, r2
   1b398:	bfb8      	it	lt
   1b39a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b39c:	428b      	cmp	r3, r1
   1b39e:	dd2e      	ble.n	1b3fe <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1b3a0:	f008 fe0d 	bl	23fbe <adjust_owner_prio.isra.0>
   1b3a4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b3a6:	e9cd 7600 	strd	r7, r6, [sp]
   1b3aa:	481a      	ldr	r0, [pc, #104]	; (1b414 <z_impl_k_mutex_lock+0xf0>)
   1b3ac:	4622      	mov	r2, r4
   1b3ae:	4641      	mov	r1, r8
   1b3b0:	f000 fc02 	bl	1bbb8 <z_pend_curr>
	if (got_mutex == 0) {
   1b3b4:	2800      	cmp	r0, #0
   1b3b6:	d0e1      	beq.n	1b37c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1b3b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b3bc:	f3ef 8611 	mrs	r6, BASEPRI
   1b3c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3c4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1b3c8:	68a0      	ldr	r0, [r4, #8]
   1b3ca:	b1d0      	cbz	r0, 1b402 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b3cc:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b3ce:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b3d0:	429c      	cmp	r4, r3
   1b3d2:	d00a      	beq.n	1b3ea <z_impl_k_mutex_lock+0xc6>
   1b3d4:	b14b      	cbz	r3, 1b3ea <z_impl_k_mutex_lock+0xc6>
   1b3d6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b3da:	4299      	cmp	r1, r3
   1b3dc:	bfa8      	it	ge
   1b3de:	4619      	movge	r1, r3
   1b3e0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1b3e4:	4299      	cmp	r1, r3
   1b3e6:	bfb8      	it	lt
   1b3e8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b3ea:	f008 fde8 	bl	23fbe <adjust_owner_prio.isra.0>
   1b3ee:	b140      	cbz	r0, 1b402 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1b3f0:	4808      	ldr	r0, [pc, #32]	; (1b414 <z_impl_k_mutex_lock+0xf0>)
   1b3f2:	4631      	mov	r1, r6
   1b3f4:	f000 fc44 	bl	1bc80 <z_reschedule>
	return -EAGAIN;
   1b3f8:	f06f 000a 	mvn.w	r0, #10
   1b3fc:	e7af      	b.n	1b35e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1b3fe:	2500      	movs	r5, #0
   1b400:	e7d1      	b.n	1b3a6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1b402:	2d00      	cmp	r5, #0
   1b404:	d1f4      	bne.n	1b3f0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1b406:	f386 8811 	msr	BASEPRI, r6
   1b40a:	f3bf 8f6f 	isb	sy
   1b40e:	e7f3      	b.n	1b3f8 <z_impl_k_mutex_lock+0xd4>
   1b410:	20002e50 	.word	0x20002e50
   1b414:	20003aa8 	.word	0x20003aa8

0001b418 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b418:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1b41a:	6883      	ldr	r3, [r0, #8]
{
   1b41c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1b41e:	b36b      	cbz	r3, 1b47c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1b420:	4a19      	ldr	r2, [pc, #100]	; (1b488 <z_impl_k_mutex_unlock+0x70>)
   1b422:	6892      	ldr	r2, [r2, #8]
   1b424:	4293      	cmp	r3, r2
   1b426:	d12c      	bne.n	1b482 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1b428:	68c3      	ldr	r3, [r0, #12]
   1b42a:	2b01      	cmp	r3, #1
   1b42c:	d903      	bls.n	1b436 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1b42e:	3b01      	subs	r3, #1
   1b430:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1b432:	2000      	movs	r0, #0
}
   1b434:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b436:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b43a:	f3ef 8511 	mrs	r5, BASEPRI
   1b43e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b442:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b446:	6901      	ldr	r1, [r0, #16]
   1b448:	6880      	ldr	r0, [r0, #8]
   1b44a:	f008 fdb8 	bl	23fbe <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b44e:	4620      	mov	r0, r4
   1b450:	f008 ffee 	bl	24430 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b454:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b456:	b158      	cbz	r0, 1b470 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b458:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b45c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b45e:	2200      	movs	r2, #0
   1b460:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1b462:	f008 ffaf 	bl	243c4 <z_ready_thread>
		z_reschedule(&lock, key);
   1b466:	4809      	ldr	r0, [pc, #36]	; (1b48c <z_impl_k_mutex_unlock+0x74>)
   1b468:	4629      	mov	r1, r5
   1b46a:	f000 fc09 	bl	1bc80 <z_reschedule>
   1b46e:	e7e0      	b.n	1b432 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1b470:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b472:	f385 8811 	msr	BASEPRI, r5
   1b476:	f3bf 8f6f 	isb	sy
   1b47a:	e7da      	b.n	1b432 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1b47c:	f06f 0015 	mvn.w	r0, #21
   1b480:	e7d8      	b.n	1b434 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1b482:	f04f 30ff 	mov.w	r0, #4294967295
   1b486:	e7d5      	b.n	1b434 <z_impl_k_mutex_unlock+0x1c>
   1b488:	20002e50 	.word	0x20002e50
   1b48c:	20003aa8 	.word	0x20003aa8

0001b490 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1b490:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b492:	4611      	mov	r1, r2
	__asm__ volatile(
   1b494:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b498:	f3ef 8511 	mrs	r5, BASEPRI
   1b49c:	f382 8812 	msr	BASEPRI_MAX, r2
   1b4a0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1b4a4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b4a6:	b19c      	cbz	r4, 1b4d0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b4a8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b4aa:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b4ac:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b4b0:	4294      	cmp	r4, r2
	list->head = node;
   1b4b2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1b4b4:	bf08      	it	eq
   1b4b6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b4b8:	2101      	movs	r1, #1
   1b4ba:	4620      	mov	r0, r4
   1b4bc:	f008 fdf4 	bl	240a8 <z_queue_node_peek>
   1b4c0:	4604      	mov	r4, r0
	__asm__ volatile(
   1b4c2:	f385 8811 	msr	BASEPRI, r5
   1b4c6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b4ca:	4620      	mov	r0, r4
   1b4cc:	b003      	add	sp, #12
   1b4ce:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b4d0:	ea51 0203 	orrs.w	r2, r1, r3
   1b4d4:	d0f5      	beq.n	1b4c2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b4d6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b4da:	e9cd 1300 	strd	r1, r3, [sp]
   1b4de:	4610      	mov	r0, r2
   1b4e0:	4629      	mov	r1, r5
   1b4e2:	f000 fb69 	bl	1bbb8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	d1ef      	bne.n	1b4ca <z_impl_k_queue_get+0x3a>
   1b4ea:	4b02      	ldr	r3, [pc, #8]	; (1b4f4 <z_impl_k_queue_get+0x64>)
   1b4ec:	689b      	ldr	r3, [r3, #8]
   1b4ee:	695c      	ldr	r4, [r3, #20]
   1b4f0:	e7eb      	b.n	1b4ca <z_impl_k_queue_get+0x3a>
   1b4f2:	bf00      	nop
   1b4f4:	20002e50 	.word	0x20002e50

0001b4f8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b4f8:	b538      	push	{r3, r4, r5, lr}
   1b4fa:	4604      	mov	r4, r0
	__asm__ volatile(
   1b4fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b500:	f3ef 8511 	mrs	r5, BASEPRI
   1b504:	f383 8812 	msr	BASEPRI_MAX, r3
   1b508:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1b50c:	f008 ff90 	bl	24430 <z_unpend_first_thread>

	if (thread != NULL) {
   1b510:	b148      	cbz	r0, 1b526 <z_impl_k_sem_give+0x2e>
   1b512:	2200      	movs	r2, #0
   1b514:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b516:	f008 ff55 	bl	243c4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b51a:	4629      	mov	r1, r5
   1b51c:	4808      	ldr	r0, [pc, #32]	; (1b540 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1b51e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b522:	f000 bbad 	b.w	1bc80 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b526:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b52a:	429a      	cmp	r2, r3
   1b52c:	bf18      	it	ne
   1b52e:	3301      	addne	r3, #1
   1b530:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b532:	2102      	movs	r1, #2
   1b534:	f104 0010 	add.w	r0, r4, #16
   1b538:	f009 f987 	bl	2484a <z_handle_obj_poll_events>
}
   1b53c:	e7ed      	b.n	1b51a <z_impl_k_sem_give+0x22>
   1b53e:	bf00      	nop
   1b540:	20003aa8 	.word	0x20003aa8

0001b544 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b544:	b513      	push	{r0, r1, r4, lr}
   1b546:	f04f 0440 	mov.w	r4, #64	; 0x40
   1b54a:	f3ef 8111 	mrs	r1, BASEPRI
   1b54e:	f384 8812 	msr	BASEPRI_MAX, r4
   1b552:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1b556:	6884      	ldr	r4, [r0, #8]
   1b558:	b144      	cbz	r4, 1b56c <z_impl_k_sem_take+0x28>
		sem->count--;
   1b55a:	3c01      	subs	r4, #1
   1b55c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1b55e:	f381 8811 	msr	BASEPRI, r1
   1b562:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b566:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1b568:	b002      	add	sp, #8
   1b56a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b56c:	ea52 0403 	orrs.w	r4, r2, r3
   1b570:	d106      	bne.n	1b580 <z_impl_k_sem_take+0x3c>
   1b572:	f381 8811 	msr	BASEPRI, r1
   1b576:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b57a:	f06f 000f 	mvn.w	r0, #15
   1b57e:	e7f3      	b.n	1b568 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b580:	e9cd 2300 	strd	r2, r3, [sp]
   1b584:	4602      	mov	r2, r0
   1b586:	4802      	ldr	r0, [pc, #8]	; (1b590 <z_impl_k_sem_take+0x4c>)
   1b588:	f000 fb16 	bl	1bbb8 <z_pend_curr>
	return ret;
   1b58c:	e7ec      	b.n	1b568 <z_impl_k_sem_take+0x24>
   1b58e:	bf00      	nop
   1b590:	20003aa8 	.word	0x20003aa8

0001b594 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   1b594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   1b596:	4b09      	ldr	r3, [pc, #36]	; (1b5bc <k_sys_work_q_init+0x28>)
   1b598:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1b59a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1b59c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1b59e:	9300      	str	r3, [sp, #0]
   1b5a0:	4907      	ldr	r1, [pc, #28]	; (1b5c0 <k_sys_work_q_init+0x2c>)
   1b5a2:	4808      	ldr	r0, [pc, #32]	; (1b5c4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1b5a4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1b5a8:	f04f 33ff 	mov.w	r3, #4294967295
   1b5ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b5b0:	f000 f924 	bl	1b7fc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	b004      	add	sp, #16
   1b5b8:	bd10      	pop	{r4, pc}
   1b5ba:	bf00      	nop
   1b5bc:	00025dfd 	.word	0x00025dfd
   1b5c0:	20006700 	.word	0x20006700
   1b5c4:	20002530 	.word	0x20002530

0001b5c8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1b5cc:	4e4a      	ldr	r6, [pc, #296]	; (1b6f8 <work_queue_main+0x130>)
   1b5ce:	b085      	sub	sp, #20
   1b5d0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1b5d2:	f04f 38ff 	mov.w	r8, #4294967295
   1b5d6:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1b5da:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5de:	f3ef 8711 	mrs	r7, BASEPRI
   1b5e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5e6:	f3bf 8f6f 	isb	sy
   1b5ea:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1b5ee:	b98d      	cbnz	r5, 1b614 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1b5f0:	2102      	movs	r1, #2
   1b5f2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b5f6:	f008 fd98 	bl	2412a <flag_test_and_clear>
   1b5fa:	2800      	cmp	r0, #0
   1b5fc:	d143      	bne.n	1b686 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1b5fe:	2300      	movs	r3, #0
   1b600:	e9cd 8900 	strd	r8, r9, [sp]
   1b604:	9302      	str	r3, [sp, #8]
   1b606:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1b60a:	4639      	mov	r1, r7
   1b60c:	483b      	ldr	r0, [pc, #236]	; (1b6fc <work_queue_main+0x134>)
   1b60e:	f000 fcd3 	bl	1bfb8 <z_sched_wait>
			continue;
   1b612:	e7e2      	b.n	1b5da <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b614:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1b618:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b61a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b61e:	4295      	cmp	r5, r2
	list->tail = node;
   1b620:	bf08      	it	eq
   1b622:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1b626:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b62a:	f043 0302 	orr.w	r3, r3, #2
   1b62e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1b632:	68eb      	ldr	r3, [r5, #12]
   1b634:	f023 0304 	bic.w	r3, r3, #4
   1b638:	f043 0301 	orr.w	r3, r3, #1
   1b63c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1b63e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1b640:	f387 8811 	msr	BASEPRI, r7
   1b644:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1b648:	4628      	mov	r0, r5
   1b64a:	4798      	blx	r3
	__asm__ volatile(
   1b64c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b650:	f3ef 8b11 	mrs	fp, BASEPRI
   1b654:	f383 8812 	msr	BASEPRI_MAX, r3
   1b658:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1b65c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b65e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1b660:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b664:	d419      	bmi.n	1b69a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1b666:	60ea      	str	r2, [r5, #12]
   1b668:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b66c:	f023 0302 	bic.w	r3, r3, #2
   1b670:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1b674:	f38b 8811 	msr	BASEPRI, fp
   1b678:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1b67c:	05db      	lsls	r3, r3, #23
   1b67e:	d4ac      	bmi.n	1b5da <work_queue_main+0x12>
	z_impl_k_yield();
   1b680:	f000 fb98 	bl	1bdb4 <z_impl_k_yield>
}
   1b684:	e7a9      	b.n	1b5da <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1b686:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1b68a:	2200      	movs	r2, #0
   1b68c:	2101      	movs	r1, #1
   1b68e:	4628      	mov	r0, r5
   1b690:	f008 ff28 	bl	244e4 <z_sched_wake>
   1b694:	2800      	cmp	r0, #0
   1b696:	d1f8      	bne.n	1b68a <work_queue_main+0xc2>
   1b698:	e7b1      	b.n	1b5fe <work_queue_main+0x36>
	return list->head;
   1b69a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1b69c:	f023 0303 	bic.w	r3, r3, #3
   1b6a0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b6a2:	2800      	cmp	r0, #0
   1b6a4:	d0e0      	beq.n	1b668 <work_queue_main+0xa0>
	return node->next;
   1b6a6:	2700      	movs	r7, #0
   1b6a8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1b6ac:	463b      	mov	r3, r7
   1b6ae:	2800      	cmp	r0, #0
   1b6b0:	d0da      	beq.n	1b668 <work_queue_main+0xa0>
		if (wc->work == work) {
   1b6b2:	6842      	ldr	r2, [r0, #4]
   1b6b4:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1b6b6:	4601      	mov	r1, r0
		if (wc->work == work) {
   1b6b8:	d10c      	bne.n	1b6d4 <work_queue_main+0x10c>
	return node->next;
   1b6ba:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b6bc:	b99f      	cbnz	r7, 1b6e6 <work_queue_main+0x11e>
   1b6be:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1b6c0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b6c2:	4282      	cmp	r2, r0
   1b6c4:	d100      	bne.n	1b6c8 <work_queue_main+0x100>
	list->tail = node;
   1b6c6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1b6c8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1b6cc:	f7ff ff14 	bl	1b4f8 <z_impl_k_sem_give>
}
   1b6d0:	4639      	mov	r1, r7
   1b6d2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b6d4:	f1ba 0f00 	cmp.w	sl, #0
   1b6d8:	d00b      	beq.n	1b6f2 <work_queue_main+0x12a>
	return node->next;
   1b6da:	f8da 2000 	ldr.w	r2, [sl]
   1b6de:	4650      	mov	r0, sl
   1b6e0:	460f      	mov	r7, r1
   1b6e2:	4692      	mov	sl, r2
   1b6e4:	e7e3      	b.n	1b6ae <work_queue_main+0xe6>
	parent->next = child;
   1b6e6:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b6e8:	6872      	ldr	r2, [r6, #4]
   1b6ea:	4282      	cmp	r2, r0
	list->tail = node;
   1b6ec:	bf08      	it	eq
   1b6ee:	6077      	streq	r7, [r6, #4]
}
   1b6f0:	e7ea      	b.n	1b6c8 <work_queue_main+0x100>
   1b6f2:	4652      	mov	r2, sl
   1b6f4:	e7f3      	b.n	1b6de <work_queue_main+0x116>
   1b6f6:	bf00      	nop
   1b6f8:	20002e74 	.word	0x20002e74
   1b6fc:	20003aa8 	.word	0x20003aa8

0001b700 <cancel_sync_locked>:
{
   1b700:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b702:	68c3      	ldr	r3, [r0, #12]
   1b704:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1b708:	079b      	lsls	r3, r3, #30
{
   1b70a:	4605      	mov	r5, r0
   1b70c:	460c      	mov	r4, r1
	if (ret) {
   1b70e:	d50d      	bpl.n	1b72c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b710:	2201      	movs	r2, #1
   1b712:	2100      	movs	r1, #0
   1b714:	f104 0008 	add.w	r0, r4, #8
   1b718:	f008 fcf7 	bl	2410a <z_impl_k_sem_init>
	parent->next = child;
   1b71c:	2300      	movs	r3, #0
   1b71e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b720:	4b05      	ldr	r3, [pc, #20]	; (1b738 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1b722:	6065      	str	r5, [r4, #4]
   1b724:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1b726:	b91a      	cbnz	r2, 1b730 <cancel_sync_locked+0x30>
	list->head = node;
   1b728:	e9c3 4400 	strd	r4, r4, [r3]
}
   1b72c:	4630      	mov	r0, r6
   1b72e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1b730:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b732:	605c      	str	r4, [r3, #4]
}
   1b734:	e7fa      	b.n	1b72c <cancel_sync_locked+0x2c>
   1b736:	bf00      	nop
   1b738:	20002e74 	.word	0x20002e74

0001b73c <submit_to_queue_locked>:
{
   1b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b73e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b740:	079a      	lsls	r2, r3, #30
{
   1b742:	4604      	mov	r4, r0
   1b744:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b746:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1b74a:	d42c      	bmi.n	1b7a6 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1b74c:	075b      	lsls	r3, r3, #29
   1b74e:	d41a      	bmi.n	1b786 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1b750:	680b      	ldr	r3, [r1, #0]
   1b752:	b90b      	cbnz	r3, 1b758 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1b754:	6883      	ldr	r3, [r0, #8]
   1b756:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1b758:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1b75a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1b75c:	bf44      	itt	mi
   1b75e:	68a3      	ldrmi	r3, [r4, #8]
   1b760:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1b762:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1b764:	bf4c      	ite	mi
   1b766:	2602      	movmi	r6, #2
		ret = 1;
   1b768:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1b76a:	2d00      	cmp	r5, #0
   1b76c:	d03a      	beq.n	1b7e4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b76e:	4b1f      	ldr	r3, [pc, #124]	; (1b7ec <submit_to_queue_locked+0xb0>)
   1b770:	689b      	ldr	r3, [r3, #8]
   1b772:	42ab      	cmp	r3, r5
   1b774:	d00a      	beq.n	1b78c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1b776:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b77a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1b77c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b780:	d414      	bmi.n	1b7ac <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1b782:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1b786:	2300      	movs	r3, #0
   1b788:	603b      	str	r3, [r7, #0]
	return ret;
   1b78a:	e025      	b.n	1b7d8 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b78c:	f008 fc05 	bl	23f9a <k_is_in_isr>
   1b790:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1b794:	2800      	cmp	r0, #0
   1b796:	d1f0      	bne.n	1b77a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b798:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1b79a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b79e:	d5f0      	bpl.n	1b782 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1b7a0:	b152      	cbz	r2, 1b7b8 <submit_to_queue_locked+0x7c>
   1b7a2:	075b      	lsls	r3, r3, #29
   1b7a4:	d408      	bmi.n	1b7b8 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1b7a6:	f06f 060f 	mvn.w	r6, #15
   1b7aa:	e7ec      	b.n	1b786 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1b7ac:	2a00      	cmp	r2, #0
   1b7ae:	d1fa      	bne.n	1b7a6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1b7b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1b7b4:	2b00      	cmp	r3, #0
   1b7b6:	d1f6      	bne.n	1b7a6 <submit_to_queue_locked+0x6a>
	parent->next = child;
   1b7b8:	2300      	movs	r3, #0
   1b7ba:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b7bc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1b7c0:	b963      	cbnz	r3, 1b7dc <submit_to_queue_locked+0xa0>
	list->head = node;
   1b7c2:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1b7c6:	4628      	mov	r0, r5
   1b7c8:	f008 fcc9 	bl	2415e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1b7cc:	68e3      	ldr	r3, [r4, #12]
   1b7ce:	f043 0304 	orr.w	r3, r3, #4
   1b7d2:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1b7d4:	683b      	ldr	r3, [r7, #0]
   1b7d6:	60a3      	str	r3, [r4, #8]
}
   1b7d8:	4630      	mov	r0, r6
   1b7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1b7dc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b7de:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   1b7e2:	e7f0      	b.n	1b7c6 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1b7e4:	f06f 0615 	mvn.w	r6, #21
   1b7e8:	e7cd      	b.n	1b786 <submit_to_queue_locked+0x4a>
   1b7ea:	bf00      	nop
   1b7ec:	20002e50 	.word	0x20002e50

0001b7f0 <k_work_submit>:
{
   1b7f0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1b7f2:	4801      	ldr	r0, [pc, #4]	; (1b7f8 <k_work_submit+0x8>)
   1b7f4:	f008 bd39 	b.w	2426a <k_work_submit_to_queue>
   1b7f8:	20002530 	.word	0x20002530

0001b7fc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7fe:	b089      	sub	sp, #36	; 0x24
   1b800:	4604      	mov	r4, r0
	list->head = NULL;
   1b802:	2000      	movs	r0, #0
	list->tail = NULL;
   1b804:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1b808:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b80a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1b80e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1b812:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b816:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1b81a:	b31d      	cbz	r5, 1b864 <k_work_queue_start+0x68>
   1b81c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1b81e:	2800      	cmp	r0, #0
   1b820:	f240 1001 	movw	r0, #257	; 0x101
   1b824:	bf08      	it	eq
   1b826:	2001      	moveq	r0, #1
	*flagp = flags;
   1b828:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b82c:	2000      	movs	r0, #0
   1b82e:	f04f 36ff 	mov.w	r6, #4294967295
   1b832:	f04f 37ff 	mov.w	r7, #4294967295
   1b836:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1b83a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b83e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b842:	4b09      	ldr	r3, [pc, #36]	; (1b868 <k_work_queue_start+0x6c>)
   1b844:	9400      	str	r4, [sp, #0]
   1b846:	4620      	mov	r0, r4
   1b848:	f7ff fcc8 	bl	1b1dc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1b84c:	b125      	cbz	r5, 1b858 <k_work_queue_start+0x5c>
   1b84e:	6829      	ldr	r1, [r5, #0]
   1b850:	b111      	cbz	r1, 1b858 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1b852:	4620      	mov	r0, r4
   1b854:	f008 fba7 	bl	23fa6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b858:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1b85a:	b009      	add	sp, #36	; 0x24
   1b85c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b860:	f008 bba4 	b.w	23fac <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b864:	2001      	movs	r0, #1
   1b866:	e7df      	b.n	1b828 <k_work_queue_start+0x2c>
   1b868:	0001b5c9 	.word	0x0001b5c9

0001b86c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1b86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b86e:	9001      	str	r0, [sp, #4]
   1b870:	4608      	mov	r0, r1
	__asm__ volatile(
   1b872:	f04f 0140 	mov.w	r1, #64	; 0x40
   1b876:	f3ef 8411 	mrs	r4, BASEPRI
   1b87a:	f381 8812 	msr	BASEPRI_MAX, r1
   1b87e:	f3bf 8f6f 	isb	sy
	return *flagp;
   1b882:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1b884:	f011 0f0e 	tst.w	r1, #14
   1b888:	d116      	bne.n	1b8b8 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b88a:	ea53 0502 	orrs.w	r5, r3, r2
   1b88e:	d108      	bne.n	1b8a2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1b890:	a901      	add	r1, sp, #4
   1b892:	f7ff ff53 	bl	1b73c <submit_to_queue_locked>
	__asm__ volatile(
   1b896:	f384 8811 	msr	BASEPRI, r4
   1b89a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b89e:	b003      	add	sp, #12
   1b8a0:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1b8a2:	f041 0108 	orr.w	r1, r1, #8
   1b8a6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1b8a8:	9901      	ldr	r1, [sp, #4]
   1b8aa:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b8ac:	3010      	adds	r0, #16
   1b8ae:	4903      	ldr	r1, [pc, #12]	; (1b8bc <k_work_schedule_for_queue+0x50>)
   1b8b0:	f000 fbf4 	bl	1c09c <z_add_timeout>
	return ret;
   1b8b4:	2001      	movs	r0, #1
   1b8b6:	e7ee      	b.n	1b896 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1b8b8:	2000      	movs	r0, #0
   1b8ba:	e7ec      	b.n	1b896 <k_work_schedule_for_queue+0x2a>
   1b8bc:	000241d3 	.word	0x000241d3

0001b8c0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b8c0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b8c2:	4801      	ldr	r0, [pc, #4]	; (1b8c8 <k_work_schedule+0x8>)
   1b8c4:	f7ff bfd2 	b.w	1b86c <k_work_schedule_for_queue>
   1b8c8:	20002530 	.word	0x20002530

0001b8cc <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1b8cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b8ce:	460c      	mov	r4, r1
   1b8d0:	9001      	str	r0, [sp, #4]
   1b8d2:	4616      	mov	r6, r2
   1b8d4:	461d      	mov	r5, r3
	__asm__ volatile(
   1b8d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8da:	f3ef 8711 	mrs	r7, BASEPRI
   1b8de:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8e2:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1b8e6:	4608      	mov	r0, r1
   1b8e8:	f008 fc2a 	bl	24140 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b8ec:	ea55 0306 	orrs.w	r3, r5, r6
   1b8f0:	d109      	bne.n	1b906 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1b8f2:	a901      	add	r1, sp, #4
   1b8f4:	4620      	mov	r0, r4
   1b8f6:	f7ff ff21 	bl	1b73c <submit_to_queue_locked>
	__asm__ volatile(
   1b8fa:	f387 8811 	msr	BASEPRI, r7
   1b8fe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b902:	b003      	add	sp, #12
   1b904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b906:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b908:	4906      	ldr	r1, [pc, #24]	; (1b924 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1b90a:	f043 0308 	orr.w	r3, r3, #8
   1b90e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b910:	9b01      	ldr	r3, [sp, #4]
   1b912:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b914:	f104 0010 	add.w	r0, r4, #16
   1b918:	4632      	mov	r2, r6
   1b91a:	462b      	mov	r3, r5
   1b91c:	f000 fbbe 	bl	1c09c <z_add_timeout>
	return ret;
   1b920:	2001      	movs	r0, #1
   1b922:	e7ea      	b.n	1b8fa <k_work_reschedule_for_queue+0x2e>
   1b924:	000241d3 	.word	0x000241d3

0001b928 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b928:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b92a:	4801      	ldr	r0, [pc, #4]	; (1b930 <k_work_reschedule+0x8>)
   1b92c:	f7ff bfce 	b.w	1b8cc <k_work_reschedule_for_queue>
   1b930:	20002530 	.word	0x20002530

0001b934 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   1b934:	89c3      	ldrh	r3, [r0, #14]
   1b936:	2b7f      	cmp	r3, #127	; 0x7f
   1b938:	d812      	bhi.n	1b960 <sliceable+0x2c>
	int ret = slice_ticks;
   1b93a:	4b0a      	ldr	r3, [pc, #40]	; (1b964 <sliceable+0x30>)
   1b93c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   1b93e:	b163      	cbz	r3, 1b95a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b940:	4b09      	ldr	r3, [pc, #36]	; (1b968 <sliceable+0x34>)
   1b942:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b946:	681b      	ldr	r3, [r3, #0]
   1b948:	429a      	cmp	r2, r3
   1b94a:	db09      	blt.n	1b960 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   1b94c:	7b43      	ldrb	r3, [r0, #13]
   1b94e:	06db      	lsls	r3, r3, #27
   1b950:	d106      	bne.n	1b960 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   1b952:	4b06      	ldr	r3, [pc, #24]	; (1b96c <sliceable+0x38>)
   1b954:	1ac3      	subs	r3, r0, r3
   1b956:	bf18      	it	ne
   1b958:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   1b95a:	f003 0001 	and.w	r0, r3, #1
   1b95e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   1b960:	2300      	movs	r3, #0
   1b962:	e7fa      	b.n	1b95a <sliceable+0x26>
   1b964:	20002e84 	.word	0x20002e84
   1b968:	20002e80 	.word	0x20002e80
   1b96c:	20002430 	.word	0x20002430

0001b970 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   1b970:	4b04      	ldr	r3, [pc, #16]	; (1b984 <slice_timeout+0x14>)
   1b972:	1ac0      	subs	r0, r0, r3
   1b974:	4b04      	ldr	r3, [pc, #16]	; (1b988 <slice_timeout+0x18>)
   1b976:	10c0      	asrs	r0, r0, #3
   1b978:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   1b97a:	4b04      	ldr	r3, [pc, #16]	; (1b98c <slice_timeout+0x1c>)
   1b97c:	2201      	movs	r2, #1
   1b97e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   1b980:	4770      	bx	lr
   1b982:	bf00      	nop
   1b984:	200025d0 	.word	0x200025d0
   1b988:	aaaaaaab 	.word	0xaaaaaaab
   1b98c:	20003aa8 	.word	0x20003aa8

0001b990 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   1b990:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   1b992:	4b0e      	ldr	r3, [pc, #56]	; (1b9cc <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   1b994:	4c0e      	ldr	r4, [pc, #56]	; (1b9d0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   1b996:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   1b998:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1b99c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   1b9a0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   1b9a2:	4620      	mov	r0, r4
   1b9a4:	f008 fdc1 	bl	2452a <z_abort_timeout>
	slice_expired[cpu] = false;
   1b9a8:	4b0a      	ldr	r3, [pc, #40]	; (1b9d4 <z_reset_time_slice+0x44>)
   1b9aa:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   1b9ac:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   1b9ae:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   1b9b0:	f7ff ffc0 	bl	1b934 <sliceable>
   1b9b4:	b148      	cbz	r0, 1b9ca <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   1b9b6:	4b08      	ldr	r3, [pc, #32]	; (1b9d8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1b9b8:	4908      	ldr	r1, [pc, #32]	; (1b9dc <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   1b9ba:	681a      	ldr	r2, [r3, #0]
   1b9bc:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1b9be:	4620      	mov	r0, r4
   1b9c0:	17d3      	asrs	r3, r2, #31
	}
}
   1b9c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1b9c6:	f000 bb69 	b.w	1c09c <z_add_timeout>
}
   1b9ca:	bd70      	pop	{r4, r5, r6, pc}
   1b9cc:	20002e50 	.word	0x20002e50
   1b9d0:	200025d0 	.word	0x200025d0
   1b9d4:	20003aa8 	.word	0x20003aa8
   1b9d8:	20002e84 	.word	0x20002e84
   1b9dc:	0001b971 	.word	0x0001b971

0001b9e0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1b9e0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1b9e2:	4d0d      	ldr	r5, [pc, #52]	; (1ba18 <update_cache+0x38>)
   1b9e4:	462b      	mov	r3, r5
   1b9e6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b9ea:	429c      	cmp	r4, r3
   1b9ec:	d000      	beq.n	1b9f0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b9ee:	b904      	cbnz	r4, 1b9f2 <update_cache+0x12>
   1b9f0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1b9f2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1b9f4:	b938      	cbnz	r0, 1ba06 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1b9f6:	7b5a      	ldrb	r2, [r3, #13]
   1b9f8:	06d2      	lsls	r2, r2, #27
   1b9fa:	d104      	bne.n	1ba06 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b9fc:	69a2      	ldr	r2, [r4, #24]
   1b9fe:	b912      	cbnz	r2, 1ba06 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1ba00:	89da      	ldrh	r2, [r3, #14]
   1ba02:	2a7f      	cmp	r2, #127	; 0x7f
   1ba04:	d805      	bhi.n	1ba12 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1ba06:	429c      	cmp	r4, r3
   1ba08:	d002      	beq.n	1ba10 <update_cache+0x30>
			z_reset_time_slice(thread);
   1ba0a:	4620      	mov	r0, r4
   1ba0c:	f7ff ffc0 	bl	1b990 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1ba10:	4623      	mov	r3, r4
   1ba12:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1ba14:	bd38      	pop	{r3, r4, r5, pc}
   1ba16:	bf00      	nop
   1ba18:	20002e50 	.word	0x20002e50

0001ba1c <move_thread_to_end_of_prio_q>:
{
   1ba1c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ba1e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1ba22:	7b43      	ldrb	r3, [r0, #13]
   1ba24:	2a00      	cmp	r2, #0
{
   1ba26:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ba28:	da04      	bge.n	1ba34 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ba2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ba2e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ba30:	f008 fc85 	bl	2433e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ba34:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1ba36:	4a15      	ldr	r2, [pc, #84]	; (1ba8c <move_thread_to_end_of_prio_q+0x70>)
   1ba38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ba3c:	4610      	mov	r0, r2
   1ba3e:	734b      	strb	r3, [r1, #13]
   1ba40:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1ba44:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba46:	4283      	cmp	r3, r0
   1ba48:	bf08      	it	eq
   1ba4a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba4c:	b923      	cbnz	r3, 1ba58 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1ba4e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1ba52:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1ba54:	6211      	str	r1, [r2, #32]
}
   1ba56:	e00c      	b.n	1ba72 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1ba58:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1ba5c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1ba60:	42b5      	cmp	r5, r6
   1ba62:	d00e      	beq.n	1ba82 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ba64:	42ae      	cmp	r6, r5
   1ba66:	dd0c      	ble.n	1ba82 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1ba68:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1ba6a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1ba6e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1ba70:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1ba72:	6890      	ldr	r0, [r2, #8]
   1ba74:	1a43      	subs	r3, r0, r1
   1ba76:	4258      	negs	r0, r3
}
   1ba78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ba7c:	4158      	adcs	r0, r3
   1ba7e:	f7ff bfaf 	b.w	1b9e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ba82:	429c      	cmp	r4, r3
   1ba84:	d0e3      	beq.n	1ba4e <move_thread_to_end_of_prio_q+0x32>
   1ba86:	681b      	ldr	r3, [r3, #0]
   1ba88:	e7e0      	b.n	1ba4c <move_thread_to_end_of_prio_q+0x30>
   1ba8a:	bf00      	nop
   1ba8c:	20002e50 	.word	0x20002e50

0001ba90 <ready_thread>:
{
   1ba90:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ba92:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1ba96:	7b42      	ldrb	r2, [r0, #13]
   1ba98:	2b00      	cmp	r3, #0
   1ba9a:	db29      	blt.n	1baf0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ba9c:	06d3      	lsls	r3, r2, #27
   1ba9e:	d127      	bne.n	1baf0 <ready_thread+0x60>
	return node->next != NULL;
   1baa0:	6983      	ldr	r3, [r0, #24]
   1baa2:	bb2b      	cbnz	r3, 1baf0 <ready_thread+0x60>
	return list->head == list;
   1baa4:	4913      	ldr	r1, [pc, #76]	; (1baf4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1baa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1baaa:	7342      	strb	r2, [r0, #13]
   1baac:	460a      	mov	r2, r1
   1baae:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bab2:	4294      	cmp	r4, r2
   1bab4:	bf18      	it	ne
   1bab6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1bab8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1baba:	b923      	cbnz	r3, 1bac6 <ready_thread+0x36>
	node->prev = tail;
   1babc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1bac0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1bac2:	6208      	str	r0, [r1, #32]
}
   1bac4:	e00c      	b.n	1bae0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1bac6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1baca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1bace:	42b5      	cmp	r5, r6
   1bad0:	d00a      	beq.n	1bae8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bad2:	42ae      	cmp	r6, r5
   1bad4:	dd08      	ble.n	1bae8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1bad6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bad8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1badc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1bade:	6058      	str	r0, [r3, #4]
}
   1bae0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1bae2:	2000      	movs	r0, #0
   1bae4:	f7ff bf7c 	b.w	1b9e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1bae8:	42a3      	cmp	r3, r4
   1baea:	d0e7      	beq.n	1babc <ready_thread+0x2c>
   1baec:	681b      	ldr	r3, [r3, #0]
   1baee:	e7e4      	b.n	1baba <ready_thread+0x2a>
}
   1baf0:	bc70      	pop	{r4, r5, r6}
   1baf2:	4770      	bx	lr
   1baf4:	20002e50 	.word	0x20002e50

0001baf8 <unready_thread>:
{
   1baf8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1bafa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1bafe:	7b43      	ldrb	r3, [r0, #13]
   1bb00:	2a00      	cmp	r2, #0
{
   1bb02:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1bb04:	da04      	bge.n	1bb10 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bb06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bb0a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bb0c:	f008 fc17 	bl	2433e <sys_dlist_remove>
	update_cache(thread == _current);
   1bb10:	4b04      	ldr	r3, [pc, #16]	; (1bb24 <unready_thread+0x2c>)
   1bb12:	6898      	ldr	r0, [r3, #8]
   1bb14:	1a43      	subs	r3, r0, r1
   1bb16:	4258      	negs	r0, r3
   1bb18:	4158      	adcs	r0, r3
}
   1bb1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1bb1e:	f7ff bf5f 	b.w	1b9e0 <update_cache>
   1bb22:	bf00      	nop
   1bb24:	20002e50 	.word	0x20002e50

0001bb28 <pend_locked>:
{
   1bb28:	b570      	push	{r4, r5, r6, lr}
   1bb2a:	4615      	mov	r5, r2
   1bb2c:	461c      	mov	r4, r3
   1bb2e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1bb30:	f008 fc20 	bl	24374 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bb34:	f1b4 3fff 	cmp.w	r4, #4294967295
   1bb38:	bf08      	it	eq
   1bb3a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1bb3e:	d008      	beq.n	1bb52 <pend_locked+0x2a>
   1bb40:	462a      	mov	r2, r5
   1bb42:	4623      	mov	r3, r4
   1bb44:	f106 0018 	add.w	r0, r6, #24
   1bb48:	4902      	ldr	r1, [pc, #8]	; (1bb54 <pend_locked+0x2c>)
}
   1bb4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bb4e:	f000 baa5 	b.w	1c09c <z_add_timeout>
   1bb52:	bd70      	pop	{r4, r5, r6, pc}
   1bb54:	00024429 	.word	0x00024429

0001bb58 <z_time_slice>:
{
   1bb58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bb5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb5e:	f3ef 8511 	mrs	r5, BASEPRI
   1bb62:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb66:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   1bb6a:	4b10      	ldr	r3, [pc, #64]	; (1bbac <z_time_slice+0x54>)
	if (pending_current == curr) {
   1bb6c:	4a10      	ldr	r2, [pc, #64]	; (1bbb0 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   1bb6e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   1bb70:	6810      	ldr	r0, [r2, #0]
   1bb72:	42a0      	cmp	r0, r4
   1bb74:	d106      	bne.n	1bb84 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   1bb76:	f7ff ff0b 	bl	1b990 <z_reset_time_slice>
	__asm__ volatile(
   1bb7a:	f385 8811 	msr	BASEPRI, r5
   1bb7e:	f3bf 8f6f 	isb	sy
}
   1bb82:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1bb84:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1bb86:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   1bb88:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1bb8a:	4a0a      	ldr	r2, [pc, #40]	; (1bbb4 <z_time_slice+0x5c>)
   1bb8c:	5cd3      	ldrb	r3, [r2, r3]
   1bb8e:	2b00      	cmp	r3, #0
   1bb90:	d0f3      	beq.n	1bb7a <z_time_slice+0x22>
   1bb92:	4620      	mov	r0, r4
   1bb94:	f7ff fece 	bl	1b934 <sliceable>
   1bb98:	2800      	cmp	r0, #0
   1bb9a:	d0ee      	beq.n	1bb7a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   1bb9c:	7b63      	ldrb	r3, [r4, #13]
   1bb9e:	06db      	lsls	r3, r3, #27
   1bba0:	d102      	bne.n	1bba8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   1bba2:	4620      	mov	r0, r4
   1bba4:	f7ff ff3a 	bl	1ba1c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   1bba8:	4620      	mov	r0, r4
   1bbaa:	e7e4      	b.n	1bb76 <z_time_slice+0x1e>
   1bbac:	20002e50 	.word	0x20002e50
   1bbb0:	20002e7c 	.word	0x20002e7c
   1bbb4:	20003aa8 	.word	0x20003aa8

0001bbb8 <z_pend_curr>:
{
   1bbb8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1bbba:	480c      	ldr	r0, [pc, #48]	; (1bbec <z_pend_curr+0x34>)
   1bbbc:	4d0c      	ldr	r5, [pc, #48]	; (1bbf0 <z_pend_curr+0x38>)
   1bbbe:	6886      	ldr	r6, [r0, #8]
   1bbc0:	602e      	str	r6, [r5, #0]
{
   1bbc2:	460c      	mov	r4, r1
   1bbc4:	4611      	mov	r1, r2
   1bbc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1bbca:	f04f 0640 	mov.w	r6, #64	; 0x40
   1bbce:	f3ef 8511 	mrs	r5, BASEPRI
   1bbd2:	f386 8812 	msr	BASEPRI_MAX, r6
   1bbd6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1bbda:	6880      	ldr	r0, [r0, #8]
   1bbdc:	f7ff ffa4 	bl	1bb28 <pend_locked>
	ret = arch_swap(key);
   1bbe0:	4620      	mov	r0, r4
}
   1bbe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bbe6:	f7f6 bc6d 	b.w	124c4 <arch_swap>
   1bbea:	bf00      	nop
   1bbec:	20002e50 	.word	0x20002e50
   1bbf0:	20002e7c 	.word	0x20002e7c

0001bbf4 <z_set_prio>:
{
   1bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbf6:	4604      	mov	r4, r0
   1bbf8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbfc:	f3ef 8611 	mrs	r6, BASEPRI
   1bc00:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc04:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1bc08:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1bc0a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1bc0c:	b249      	sxtb	r1, r1
   1bc0e:	d119      	bne.n	1bc44 <z_set_prio+0x50>
	return node->next != NULL;
   1bc10:	6985      	ldr	r5, [r0, #24]
   1bc12:	b9bd      	cbnz	r5, 1bc44 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bc14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bc18:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bc1a:	f008 fb90 	bl	2433e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1bc1e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1bc20:	4a16      	ldr	r2, [pc, #88]	; (1bc7c <z_set_prio+0x88>)
				thread->base.prio = prio;
   1bc22:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bc24:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bc28:	7343      	strb	r3, [r0, #13]
   1bc2a:	4613      	mov	r3, r2
   1bc2c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc30:	4298      	cmp	r0, r3
   1bc32:	bf18      	it	ne
   1bc34:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1bc36:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc38:	b95d      	cbnz	r5, 1bc52 <z_set_prio+0x5e>
	node->prev = tail;
   1bc3a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1bc3e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1bc40:	6214      	str	r4, [r2, #32]
}
   1bc42:	e011      	b.n	1bc68 <z_set_prio+0x74>
			thread->base.prio = prio;
   1bc44:	73a1      	strb	r1, [r4, #14]
   1bc46:	2000      	movs	r0, #0
	__asm__ volatile(
   1bc48:	f386 8811 	msr	BASEPRI, r6
   1bc4c:	f3bf 8f6f 	isb	sy
}
   1bc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1bc52:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1bc56:	42b9      	cmp	r1, r7
   1bc58:	d00b      	beq.n	1bc72 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bc5a:	428f      	cmp	r7, r1
   1bc5c:	dd09      	ble.n	1bc72 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1bc5e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1bc60:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1bc64:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1bc66:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1bc68:	2001      	movs	r0, #1
   1bc6a:	f7ff feb9 	bl	1b9e0 <update_cache>
   1bc6e:	2001      	movs	r0, #1
   1bc70:	e7ea      	b.n	1bc48 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1bc72:	42a8      	cmp	r0, r5
   1bc74:	d0e1      	beq.n	1bc3a <z_set_prio+0x46>
   1bc76:	682d      	ldr	r5, [r5, #0]
   1bc78:	e7de      	b.n	1bc38 <z_set_prio+0x44>
   1bc7a:	bf00      	nop
   1bc7c:	20002e50 	.word	0x20002e50

0001bc80 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1bc80:	b949      	cbnz	r1, 1bc96 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bc82:	f3ef 8005 	mrs	r0, IPSR
   1bc86:	b930      	cbnz	r0, 1bc96 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1bc88:	4b05      	ldr	r3, [pc, #20]	; (1bca0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1bc8a:	699a      	ldr	r2, [r3, #24]
   1bc8c:	689b      	ldr	r3, [r3, #8]
   1bc8e:	429a      	cmp	r2, r3
   1bc90:	d001      	beq.n	1bc96 <z_reschedule+0x16>
   1bc92:	f7f6 bc17 	b.w	124c4 <arch_swap>
   1bc96:	f381 8811 	msr	BASEPRI, r1
   1bc9a:	f3bf 8f6f 	isb	sy
}
   1bc9e:	4770      	bx	lr
   1bca0:	20002e50 	.word	0x20002e50

0001bca4 <z_sched_start>:
{
   1bca4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bca6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bcaa:	f3ef 8411 	mrs	r4, BASEPRI
   1bcae:	f382 8812 	msr	BASEPRI_MAX, r2
   1bcb2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1bcb6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1bcb8:	0751      	lsls	r1, r2, #29
   1bcba:	d404      	bmi.n	1bcc6 <z_sched_start+0x22>
	__asm__ volatile(
   1bcbc:	f384 8811 	msr	BASEPRI, r4
   1bcc0:	f3bf 8f6f 	isb	sy
}
   1bcc4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bcc6:	f022 0204 	bic.w	r2, r2, #4
   1bcca:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1bccc:	f7ff fee0 	bl	1ba90 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1bcd0:	4621      	mov	r1, r4
   1bcd2:	4802      	ldr	r0, [pc, #8]	; (1bcdc <z_sched_start+0x38>)
}
   1bcd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1bcd8:	f7ff bfd2 	b.w	1bc80 <z_reschedule>
   1bcdc:	20003aa9 	.word	0x20003aa9

0001bce0 <z_impl_k_thread_suspend>:
{
   1bce0:	b570      	push	{r4, r5, r6, lr}
   1bce2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1bce4:	3018      	adds	r0, #24
   1bce6:	f008 fc20 	bl	2452a <z_abort_timeout>
	__asm__ volatile(
   1bcea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bcee:	f3ef 8611 	mrs	r6, BASEPRI
   1bcf2:	f383 8812 	msr	BASEPRI_MAX, r3
   1bcf6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1bcfa:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1bcfe:	7b63      	ldrb	r3, [r4, #13]
   1bd00:	2a00      	cmp	r2, #0
   1bd02:	da05      	bge.n	1bd10 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bd04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bd08:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	f008 fb17 	bl	2433e <sys_dlist_remove>
		update_cache(thread == _current);
   1bd10:	4d0b      	ldr	r5, [pc, #44]	; (1bd40 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bd12:	7b63      	ldrb	r3, [r4, #13]
   1bd14:	68a8      	ldr	r0, [r5, #8]
   1bd16:	f043 0310 	orr.w	r3, r3, #16
   1bd1a:	7363      	strb	r3, [r4, #13]
   1bd1c:	1b03      	subs	r3, r0, r4
   1bd1e:	4258      	negs	r0, r3
   1bd20:	4158      	adcs	r0, r3
   1bd22:	f7ff fe5d 	bl	1b9e0 <update_cache>
	__asm__ volatile(
   1bd26:	f386 8811 	msr	BASEPRI, r6
   1bd2a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1bd2e:	68ab      	ldr	r3, [r5, #8]
   1bd30:	42a3      	cmp	r3, r4
   1bd32:	d103      	bne.n	1bd3c <z_impl_k_thread_suspend+0x5c>
}
   1bd34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1bd38:	f008 bbba 	b.w	244b0 <z_reschedule_unlocked>
}
   1bd3c:	bd70      	pop	{r4, r5, r6, pc}
   1bd3e:	bf00      	nop
   1bd40:	20002e50 	.word	0x20002e50

0001bd44 <k_sched_lock>:
	__asm__ volatile(
   1bd44:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd48:	f3ef 8111 	mrs	r1, BASEPRI
   1bd4c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd50:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1bd54:	4b04      	ldr	r3, [pc, #16]	; (1bd68 <k_sched_lock+0x24>)
   1bd56:	689a      	ldr	r2, [r3, #8]
   1bd58:	7bd3      	ldrb	r3, [r2, #15]
   1bd5a:	3b01      	subs	r3, #1
   1bd5c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1bd5e:	f381 8811 	msr	BASEPRI, r1
   1bd62:	f3bf 8f6f 	isb	sy
}
   1bd66:	4770      	bx	lr
   1bd68:	20002e50 	.word	0x20002e50

0001bd6c <k_sched_unlock>:
{
   1bd6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bd6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd72:	f3ef 8411 	mrs	r4, BASEPRI
   1bd76:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd7a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1bd7e:	4b08      	ldr	r3, [pc, #32]	; (1bda0 <k_sched_unlock+0x34>)
   1bd80:	689a      	ldr	r2, [r3, #8]
   1bd82:	7bd3      	ldrb	r3, [r2, #15]
   1bd84:	3301      	adds	r3, #1
   1bd86:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1bd88:	2000      	movs	r0, #0
   1bd8a:	f7ff fe29 	bl	1b9e0 <update_cache>
	__asm__ volatile(
   1bd8e:	f384 8811 	msr	BASEPRI, r4
   1bd92:	f3bf 8f6f 	isb	sy
}
   1bd96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1bd9a:	f008 bb89 	b.w	244b0 <z_reschedule_unlocked>
   1bd9e:	bf00      	nop
   1bda0:	20002e50 	.word	0x20002e50

0001bda4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1bda4:	4b02      	ldr	r3, [pc, #8]	; (1bdb0 <z_sched_init+0xc>)
   1bda6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   1bdaa:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   1bdae:	4770      	bx	lr
   1bdb0:	20002e50 	.word	0x20002e50

0001bdb4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1bdb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdba:	f3ef 8511 	mrs	r5, BASEPRI
   1bdbe:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdc2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1bdc6:	4919      	ldr	r1, [pc, #100]	; (1be2c <z_impl_k_yield+0x78>)
   1bdc8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bdca:	7b43      	ldrb	r3, [r0, #13]
   1bdcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bdd0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bdd2:	f008 fab4 	bl	2433e <sys_dlist_remove>
	}
	queue_thread(_current);
   1bdd6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bdd8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1bdda:	4608      	mov	r0, r1
   1bddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1bde0:	735a      	strb	r2, [r3, #13]
   1bde2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   1bde6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bde8:	4282      	cmp	r2, r0
   1bdea:	bf08      	it	eq
   1bdec:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bdee:	b922      	cbnz	r2, 1bdfa <z_impl_k_yield+0x46>
	node->prev = tail;
   1bdf0:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   1bdf4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1bdf6:	620b      	str	r3, [r1, #32]
}
   1bdf8:	e00c      	b.n	1be14 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1bdfa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1bdfe:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1be02:	42be      	cmp	r6, r7
   1be04:	d00e      	beq.n	1be24 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1be06:	42b7      	cmp	r7, r6
   1be08:	dd0c      	ble.n	1be24 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1be0a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1be0c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1be10:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1be12:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1be14:	2001      	movs	r0, #1
   1be16:	f7ff fde3 	bl	1b9e0 <update_cache>
   1be1a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1be1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1be20:	f7f6 bb50 	b.w	124c4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1be24:	42a2      	cmp	r2, r4
   1be26:	d0e3      	beq.n	1bdf0 <z_impl_k_yield+0x3c>
   1be28:	6812      	ldr	r2, [r2, #0]
   1be2a:	e7e0      	b.n	1bdee <z_impl_k_yield+0x3a>
   1be2c:	20002e50 	.word	0x20002e50

0001be30 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1be30:	ea50 0301 	orrs.w	r3, r0, r1
{
   1be34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be38:	4605      	mov	r5, r0
   1be3a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1be3c:	d103      	bne.n	1be46 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1be3e:	f7ff ffb9 	bl	1bdb4 <z_impl_k_yield>
		k_yield();
		return 0;
   1be42:	2000      	movs	r0, #0
   1be44:	e02c      	b.n	1bea0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1be46:	1c83      	adds	r3, r0, #2
   1be48:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1be4c:	db2a      	blt.n	1bea4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1be4e:	f008 fb92 	bl	24576 <sys_clock_tick_get_32>
   1be52:	182c      	adds	r4, r5, r0
   1be54:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be58:	f3ef 8811 	mrs	r8, BASEPRI
   1be5c:	f383 8812 	msr	BASEPRI_MAX, r3
   1be60:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1be64:	4f11      	ldr	r7, [pc, #68]	; (1beac <z_tick_sleep+0x7c>)
   1be66:	4b12      	ldr	r3, [pc, #72]	; (1beb0 <z_tick_sleep+0x80>)
   1be68:	68b8      	ldr	r0, [r7, #8]
   1be6a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1be6c:	f7ff fe44 	bl	1baf8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1be70:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1be72:	4910      	ldr	r1, [pc, #64]	; (1beb4 <z_tick_sleep+0x84>)
   1be74:	462a      	mov	r2, r5
   1be76:	4633      	mov	r3, r6
   1be78:	3018      	adds	r0, #24
   1be7a:	f000 f90f 	bl	1c09c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1be7e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1be80:	7b53      	ldrb	r3, [r2, #13]
   1be82:	f043 0310 	orr.w	r3, r3, #16
   1be86:	7353      	strb	r3, [r2, #13]
   1be88:	4640      	mov	r0, r8
   1be8a:	f7f6 fb1b 	bl	124c4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1be8e:	f008 fb72 	bl	24576 <sys_clock_tick_get_32>
   1be92:	1a20      	subs	r0, r4, r0
   1be94:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1be98:	2801      	cmp	r0, #1
   1be9a:	f173 0300 	sbcs.w	r3, r3, #0
   1be9e:	dbd0      	blt.n	1be42 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   1bea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1bea4:	f06f 0401 	mvn.w	r4, #1
   1bea8:	1a24      	subs	r4, r4, r0
   1beaa:	e7d3      	b.n	1be54 <z_tick_sleep+0x24>
   1beac:	20002e50 	.word	0x20002e50
   1beb0:	20002e7c 	.word	0x20002e7c
   1beb4:	00024429 	.word	0x00024429

0001beb8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1beb8:	f1b1 3fff 	cmp.w	r1, #4294967295
   1bebc:	bf08      	it	eq
   1bebe:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1bec2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bec4:	d106      	bne.n	1bed4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1bec6:	4b08      	ldr	r3, [pc, #32]	; (1bee8 <z_impl_k_sleep+0x30>)
   1bec8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1beca:	f7ff ff09 	bl	1bce0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1bece:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1bed2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1bed4:	f7ff ffac 	bl	1be30 <z_tick_sleep>
   1bed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1bedc:	fb80 0303 	smull	r0, r3, r0, r3
   1bee0:	0bc0      	lsrs	r0, r0, #15
   1bee2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1bee6:	e7f4      	b.n	1bed2 <z_impl_k_sleep+0x1a>
   1bee8:	20002e50 	.word	0x20002e50

0001beec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1beec:	4b01      	ldr	r3, [pc, #4]	; (1bef4 <z_impl_z_current_get+0x8>)
   1beee:	6898      	ldr	r0, [r3, #8]
   1bef0:	4770      	bx	lr
   1bef2:	bf00      	nop
   1bef4:	20002e50 	.word	0x20002e50

0001bef8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1bef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1befc:	4604      	mov	r4, r0
   1befe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf02:	f3ef 8611 	mrs	r6, BASEPRI
   1bf06:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf0a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1bf0e:	7b03      	ldrb	r3, [r0, #12]
   1bf10:	07d9      	lsls	r1, r3, #31
   1bf12:	d50b      	bpl.n	1bf2c <z_thread_abort+0x34>
	__asm__ volatile(
   1bf14:	f386 8811 	msr	BASEPRI, r6
   1bf18:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1bf1c:	4040      	eors	r0, r0
   1bf1e:	f380 8811 	msr	BASEPRI, r0
   1bf22:	f04f 0004 	mov.w	r0, #4
   1bf26:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1bf2c:	7b43      	ldrb	r3, [r0, #13]
   1bf2e:	071a      	lsls	r2, r3, #28
   1bf30:	d504      	bpl.n	1bf3c <z_thread_abort+0x44>
   1bf32:	f386 8811 	msr	BASEPRI, r6
   1bf36:	f3bf 8f6f 	isb	sy
   1bf3a:	e7f5      	b.n	1bf28 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bf3c:	f023 0220 	bic.w	r2, r3, #32
   1bf40:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1bf44:	09d2      	lsrs	r2, r2, #7
   1bf46:	d120      	bne.n	1bf8a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bf48:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1bf4a:	68a3      	ldr	r3, [r4, #8]
   1bf4c:	b113      	cbz	r3, 1bf54 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1bf4e:	4620      	mov	r0, r4
   1bf50:	f008 f9fd 	bl	2434e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1bf54:	f104 0018 	add.w	r0, r4, #24
   1bf58:	f008 fae7 	bl	2452a <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1bf5c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1bf60:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1bf64:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf66:	42bd      	cmp	r5, r7
   1bf68:	d000      	beq.n	1bf6c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1bf6a:	b9b5      	cbnz	r5, 1bf9a <z_thread_abort+0xa2>
		update_cache(1);
   1bf6c:	2001      	movs	r0, #1
   1bf6e:	f7ff fd37 	bl	1b9e0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1bf72:	4b10      	ldr	r3, [pc, #64]	; (1bfb4 <z_thread_abort+0xbc>)
   1bf74:	689b      	ldr	r3, [r3, #8]
   1bf76:	42a3      	cmp	r3, r4
   1bf78:	d1db      	bne.n	1bf32 <z_thread_abort+0x3a>
   1bf7a:	f3ef 8305 	mrs	r3, IPSR
   1bf7e:	2b00      	cmp	r3, #0
   1bf80:	d1d7      	bne.n	1bf32 <z_thread_abort+0x3a>
   1bf82:	4630      	mov	r0, r6
   1bf84:	f7f6 fa9e 	bl	124c4 <arch_swap>
	return ret;
   1bf88:	e7d3      	b.n	1bf32 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bf8a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1bf8e:	f043 0308 	orr.w	r3, r3, #8
   1bf92:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bf94:	f008 f9d3 	bl	2433e <sys_dlist_remove>
}
   1bf98:	e7d7      	b.n	1bf4a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1bf9a:	4628      	mov	r0, r5
   1bf9c:	f008 f9d7 	bl	2434e <unpend_thread_no_timeout>
   1bfa0:	f105 0018 	add.w	r0, r5, #24
   1bfa4:	f008 fac1 	bl	2452a <z_abort_timeout>
   1bfa8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1bfac:	4628      	mov	r0, r5
   1bfae:	f7ff fd6f 	bl	1ba90 <ready_thread>
   1bfb2:	e7d7      	b.n	1bf64 <z_thread_abort+0x6c>
   1bfb4:	20002e50 	.word	0x20002e50

0001bfb8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bfb8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bfba:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1bfbe:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bfc0:	e9cd 6700 	strd	r6, r7, [sp]
   1bfc4:	f7ff fdf8 	bl	1bbb8 <z_pend_curr>

	if (data != NULL) {
   1bfc8:	b11c      	cbz	r4, 1bfd2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1bfca:	4b03      	ldr	r3, [pc, #12]	; (1bfd8 <z_sched_wait+0x20>)
   1bfcc:	689b      	ldr	r3, [r3, #8]
   1bfce:	695b      	ldr	r3, [r3, #20]
   1bfd0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1bfd2:	b002      	add	sp, #8
   1bfd4:	bdd0      	pop	{r4, r6, r7, pc}
   1bfd6:	bf00      	nop
   1bfd8:	20002e50 	.word	0x20002e50

0001bfdc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1bfdc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1bfde:	4806      	ldr	r0, [pc, #24]	; (1bff8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1bfe0:	4a06      	ldr	r2, [pc, #24]	; (1bffc <z_data_copy+0x20>)
   1bfe2:	4907      	ldr	r1, [pc, #28]	; (1c000 <z_data_copy+0x24>)
   1bfe4:	1a12      	subs	r2, r2, r0
   1bfe6:	f007 ff17 	bl	23e18 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bfea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1bfee:	4a05      	ldr	r2, [pc, #20]	; (1c004 <z_data_copy+0x28>)
   1bff0:	4905      	ldr	r1, [pc, #20]	; (1c008 <z_data_copy+0x2c>)
   1bff2:	4806      	ldr	r0, [pc, #24]	; (1c00c <z_data_copy+0x30>)
   1bff4:	f007 bf10 	b.w	23e18 <z_early_memcpy>
   1bff8:	20000000 	.word	0x20000000
   1bffc:	20000980 	.word	0x20000980
   1c000:	00025e34 	.word	0x00025e34
   1c004:	00000000 	.word	0x00000000
   1c008:	00025e34 	.word	0x00025e34
   1c00c:	20000000 	.word	0x20000000

0001c010 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c010:	4b03      	ldr	r3, [pc, #12]	; (1c020 <elapsed+0x10>)
   1c012:	681b      	ldr	r3, [r3, #0]
   1c014:	b90b      	cbnz	r3, 1c01a <elapsed+0xa>
   1c016:	f7fd bb83 	b.w	19720 <sys_clock_elapsed>
}
   1c01a:	2000      	movs	r0, #0
   1c01c:	4770      	bx	lr
   1c01e:	bf00      	nop
   1c020:	20002e88 	.word	0x20002e88

0001c024 <next_timeout>:

static int32_t next_timeout(void)
{
   1c024:	b510      	push	{r4, lr}
	return list->head == list;
   1c026:	4b0e      	ldr	r3, [pc, #56]	; (1c060 <next_timeout+0x3c>)
   1c028:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c02a:	429c      	cmp	r4, r3
   1c02c:	d104      	bne.n	1c038 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1c02e:	f7ff ffef 	bl	1c010 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1c032:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   1c036:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1c038:	f7ff ffea 	bl	1c010 <elapsed>
	if ((to == NULL) ||
   1c03c:	2c00      	cmp	r4, #0
   1c03e:	d0f8      	beq.n	1c032 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1c040:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1c044:	1a1b      	subs	r3, r3, r0
   1c046:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1c04a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1c04e:	f172 0100 	sbcs.w	r1, r2, #0
   1c052:	daee      	bge.n	1c032 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1c054:	2a00      	cmp	r2, #0
   1c056:	bfac      	ite	ge
   1c058:	4618      	movge	r0, r3
   1c05a:	2000      	movlt	r0, #0
	return ret;
   1c05c:	e7eb      	b.n	1c036 <next_timeout+0x12>
   1c05e:	bf00      	nop
   1c060:	20000688 	.word	0x20000688

0001c064 <remove_timeout>:
{
   1c064:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c066:	b170      	cbz	r0, 1c086 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1c068:	4b0b      	ldr	r3, [pc, #44]	; (1c098 <remove_timeout+0x34>)
   1c06a:	685b      	ldr	r3, [r3, #4]
   1c06c:	4298      	cmp	r0, r3
   1c06e:	d00a      	beq.n	1c086 <remove_timeout+0x22>
   1c070:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1c072:	b143      	cbz	r3, 1c086 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1c074:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1c078:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c07c:	1912      	adds	r2, r2, r4
   1c07e:	eb41 0105 	adc.w	r1, r1, r5
   1c082:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1c086:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1c08a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c08c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c08e:	2300      	movs	r3, #0
	node->prev = NULL;
   1c090:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c094:	bd30      	pop	{r4, r5, pc}
   1c096:	bf00      	nop
   1c098:	20000688 	.word	0x20000688

0001c09c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c09c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c0a0:	bf08      	it	eq
   1c0a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1c0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c0a8:	4604      	mov	r4, r0
   1c0aa:	461d      	mov	r5, r3
   1c0ac:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c0ae:	d05c      	beq.n	1c16a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c0b0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1c0b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c0b6:	f3ef 8711 	mrs	r7, BASEPRI
   1c0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0be:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1c0c2:	3201      	adds	r2, #1
   1c0c4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1c0c8:	da24      	bge.n	1c114 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1c0ca:	492d      	ldr	r1, [pc, #180]	; (1c180 <z_add_timeout+0xe4>)
   1c0cc:	e9d1 2000 	ldrd	r2, r0, [r1]
   1c0d0:	f06f 0301 	mvn.w	r3, #1
   1c0d4:	1a9b      	subs	r3, r3, r2
   1c0d6:	f04f 32ff 	mov.w	r2, #4294967295
   1c0da:	eb62 0000 	sbc.w	r0, r2, r0
   1c0de:	1b9e      	subs	r6, r3, r6
   1c0e0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1c0e4:	2e01      	cmp	r6, #1
   1c0e6:	f170 0300 	sbcs.w	r3, r0, #0
   1c0ea:	da01      	bge.n	1c0f0 <z_add_timeout+0x54>
   1c0ec:	2601      	movs	r6, #1
   1c0ee:	2000      	movs	r0, #0
   1c0f0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1c0f4:	4e23      	ldr	r6, [pc, #140]	; (1c184 <z_add_timeout+0xe8>)
   1c0f6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1c0fa:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c0fc:	45b4      	cmp	ip, r6
   1c0fe:	bf08      	it	eq
   1c100:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1c104:	f1bc 0f00 	cmp.w	ip, #0
   1c108:	d10d      	bne.n	1c126 <z_add_timeout+0x8a>
	node->prev = tail;
   1c10a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   1c10e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c110:	6074      	str	r4, [r6, #4]
}
   1c112:	e01c      	b.n	1c14e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1c114:	f7ff ff7c 	bl	1c010 <elapsed>
   1c118:	3601      	adds	r6, #1
   1c11a:	f145 0500 	adc.w	r5, r5, #0
   1c11e:	1836      	adds	r6, r6, r0
   1c120:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1c124:	e7e4      	b.n	1c0f0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1c126:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1c12a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1c12e:	4293      	cmp	r3, r2
   1c130:	eb71 0e00 	sbcs.w	lr, r1, r0
   1c134:	da1a      	bge.n	1c16c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   1c136:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1c138:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1c13c:	eb60 0001 	sbc.w	r0, r0, r1
   1c140:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   1c144:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1c148:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c14a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   1c14e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c150:	42b3      	cmp	r3, r6
   1c152:	d006      	beq.n	1c162 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c154:	429c      	cmp	r4, r3
   1c156:	d104      	bne.n	1c162 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   1c158:	f7ff ff64 	bl	1c024 <next_timeout>
   1c15c:	2100      	movs	r1, #0
   1c15e:	f7fd faad 	bl	196bc <sys_clock_set_timeout>
	__asm__ volatile(
   1c162:	f387 8811 	msr	BASEPRI, r7
   1c166:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   1c16c:	1a9b      	subs	r3, r3, r2
   1c16e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1c172:	45ac      	cmp	ip, r5
   1c174:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1c178:	d0c7      	beq.n	1c10a <z_add_timeout+0x6e>
   1c17a:	f8dc c000 	ldr.w	ip, [ip]
   1c17e:	e7c1      	b.n	1c104 <z_add_timeout+0x68>
   1c180:	200025e8 	.word	0x200025e8
   1c184:	20000688 	.word	0x20000688

0001c188 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   1c188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   1c18c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c190:	f3ef 8c11 	mrs	ip, BASEPRI
   1c194:	f383 8812 	msr	BASEPRI_MAX, r3
   1c198:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1c19c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1c250 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1c1a0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1c254 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   1c1a4:	4f2c      	ldr	r7, [pc, #176]	; (1c258 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   1c1a6:	f8c9 0000 	str.w	r0, [r9]
   1c1aa:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   1c1ae:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c1b0:	4550      	cmp	r0, sl
   1c1b2:	bf08      	it	eq
   1c1b4:	2000      	moveq	r0, #0
   1c1b6:	2500      	movs	r5, #0
		curr_tick += dt;
   1c1b8:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   1c1bc:	f8d9 3000 	ldr.w	r3, [r9]
   1c1c0:	46e0      	mov	r8, ip
   1c1c2:	b380      	cbz	r0, 1c226 <sys_clock_announce+0x9e>
   1c1c4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   1c1c8:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   1c1cc:	42b3      	cmp	r3, r6
   1c1ce:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   1c1d2:	da05      	bge.n	1c1e0 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   1c1d4:	1af6      	subs	r6, r6, r3
   1c1d6:	eb6c 040e 	sbc.w	r4, ip, lr
   1c1da:	e9c0 6404 	strd	r6, r4, [r0, #16]
   1c1de:	e022      	b.n	1c226 <sys_clock_announce+0x9e>
		curr_tick += dt;
   1c1e0:	18b2      	adds	r2, r6, r2
   1c1e2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   1c1e6:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   1c1ea:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   1c1ee:	f7ff ff39 	bl	1c064 <remove_timeout>
	__asm__ volatile(
   1c1f2:	f388 8811 	msr	BASEPRI, r8
   1c1f6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c1fa:	6883      	ldr	r3, [r0, #8]
   1c1fc:	4798      	blx	r3
	__asm__ volatile(
   1c1fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c202:	f3ef 8811 	mrs	r8, BASEPRI
   1c206:	f383 8812 	msr	BASEPRI_MAX, r3
   1c20a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1c20e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   1c212:	f8da 0000 	ldr.w	r0, [sl]
   1c216:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c218:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   1c21a:	46c4      	mov	ip, r8
   1c21c:	f8c9 3000 	str.w	r3, [r9]
   1c220:	d1ca      	bne.n	1c1b8 <sys_clock_announce+0x30>
		curr_tick += dt;
   1c222:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   1c226:	189a      	adds	r2, r3, r2
   1c228:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   1c22c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c22e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   1c232:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   1c236:	f7ff fef5 	bl	1c024 <next_timeout>
   1c23a:	4621      	mov	r1, r4
   1c23c:	f7fd fa3e 	bl	196bc <sys_clock_set_timeout>
	__asm__ volatile(
   1c240:	f388 8811 	msr	BASEPRI, r8
   1c244:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   1c248:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   1c24c:	f7ff bc84 	b.w	1bb58 <z_time_slice>
   1c250:	20000688 	.word	0x20000688
   1c254:	20002e88 	.word	0x20002e88
   1c258:	200025e8 	.word	0x200025e8

0001c25c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1c25c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c25e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c262:	f3ef 8411 	mrs	r4, BASEPRI
   1c266:	f383 8812 	msr	BASEPRI_MAX, r3
   1c26a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1c26e:	f7ff fecf 	bl	1c010 <elapsed>
   1c272:	4a06      	ldr	r2, [pc, #24]	; (1c28c <sys_clock_tick_get+0x30>)
   1c274:	4603      	mov	r3, r0
   1c276:	e9d2 0100 	ldrd	r0, r1, [r2]
   1c27a:	1818      	adds	r0, r3, r0
   1c27c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   1c280:	f384 8811 	msr	BASEPRI, r4
   1c284:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c288:	bd10      	pop	{r4, pc}
   1c28a:	bf00      	nop
   1c28c:	200025e8 	.word	0x200025e8

0001c290 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c290:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c294:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c296:	4b29      	ldr	r3, [pc, #164]	; (1c33c <z_impl_k_poll+0xac>)
   1c298:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1c29a:	2301      	movs	r3, #1
   1c29c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c2a0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1c2a4:	ea52 0305 	orrs.w	r3, r2, r5
{
   1c2a8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1c2aa:	bf0c      	ite	eq
   1c2ac:	2301      	moveq	r3, #1
   1c2ae:	2300      	movne	r3, #0
   1c2b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1c2b4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1c2b6:	f008 f9b9 	bl	2462c <register_events>
   1c2ba:	4681      	mov	r9, r0
	__asm__ volatile(
   1c2bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c2c0:	f3ef 8a11 	mrs	sl, BASEPRI
   1c2c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2c8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c2cc:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1c2d0:	b964      	cbnz	r4, 1c2ec <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1c2d2:	4601      	mov	r1, r0
   1c2d4:	4652      	mov	r2, sl
   1c2d6:	4640      	mov	r0, r8
   1c2d8:	f008 fa79 	bl	247ce <clear_event_registrations>
	__asm__ volatile(
   1c2dc:	f38a 8811 	msr	BASEPRI, sl
   1c2e0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c2e4:	4620      	mov	r0, r4
   1c2e6:	b002      	add	sp, #8
   1c2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1c2ec:	2300      	movs	r3, #0
   1c2ee:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c2f2:	ea56 0305 	orrs.w	r3, r6, r5
   1c2f6:	d106      	bne.n	1c306 <z_impl_k_poll+0x76>
   1c2f8:	f38a 8811 	msr	BASEPRI, sl
   1c2fc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c300:	f06f 040a 	mvn.w	r4, #10
   1c304:	e7ee      	b.n	1c2e4 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c306:	e9cd 6500 	strd	r6, r5, [sp]
   1c30a:	4a0d      	ldr	r2, [pc, #52]	; (1c340 <z_impl_k_poll+0xb0>)
   1c30c:	480d      	ldr	r0, [pc, #52]	; (1c344 <z_impl_k_poll+0xb4>)
   1c30e:	4651      	mov	r1, sl
   1c310:	f7ff fc52 	bl	1bbb8 <z_pend_curr>
   1c314:	4604      	mov	r4, r0
	__asm__ volatile(
   1c316:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c31a:	f3ef 8511 	mrs	r5, BASEPRI
   1c31e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c322:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1c326:	462a      	mov	r2, r5
   1c328:	4649      	mov	r1, r9
   1c32a:	4640      	mov	r0, r8
   1c32c:	f008 fa4f 	bl	247ce <clear_event_registrations>
	__asm__ volatile(
   1c330:	f385 8811 	msr	BASEPRI, r5
   1c334:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c338:	e7d4      	b.n	1c2e4 <z_impl_k_poll+0x54>
   1c33a:	bf00      	nop
   1c33c:	20002e50 	.word	0x20002e50
   1c340:	20000690 	.word	0x20000690
   1c344:	20003aa9 	.word	0x20003aa9

0001c348 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c348:	b538      	push	{r3, r4, r5, lr}
   1c34a:	4603      	mov	r3, r0
	__asm__ volatile(
   1c34c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c350:	f3ef 8511 	mrs	r5, BASEPRI
   1c354:	f382 8812 	msr	BASEPRI_MAX, r2
   1c358:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1c35c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1c35e:	2101      	movs	r1, #1
   1c360:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1c362:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c364:	4283      	cmp	r3, r0
   1c366:	d106      	bne.n	1c376 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1c368:	f385 8811 	msr	BASEPRI, r5
   1c36c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1c370:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1c372:	4620      	mov	r0, r4
   1c374:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1c376:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c37a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c37c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c37e:	2300      	movs	r3, #0
	node->prev = NULL;
   1c380:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c384:	f008 f9c9 	bl	2471a <signal_poll_event>
	z_reschedule(&lock, key);
   1c388:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c38a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c38c:	4801      	ldr	r0, [pc, #4]	; (1c394 <z_impl_k_poll_signal_raise+0x4c>)
   1c38e:	f7ff fc77 	bl	1bc80 <z_reschedule>
	return rc;
   1c392:	e7ee      	b.n	1c372 <z_impl_k_poll_signal_raise+0x2a>
   1c394:	20003aa9 	.word	0x20003aa9

0001c398 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c398:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c39a:	4606      	mov	r6, r0
   1c39c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c39e:	f007 fdfc 	bl	23f9a <k_is_in_isr>
   1c3a2:	b978      	cbnz	r0, 1c3c4 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c3a4:	4b0b      	ldr	r3, [pc, #44]	; (1c3d4 <z_thread_aligned_alloc+0x3c>)
   1c3a6:	689b      	ldr	r3, [r3, #8]
   1c3a8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1c3aa:	b17c      	cbz	r4, 1c3cc <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1c3ac:	1d2a      	adds	r2, r5, #4
   1c3ae:	d209      	bcs.n	1c3c4 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1c3b0:	2000      	movs	r0, #0
   1c3b2:	2100      	movs	r1, #0
   1c3b4:	e9cd 0100 	strd	r0, r1, [sp]
   1c3b8:	f046 0104 	orr.w	r1, r6, #4
   1c3bc:	4620      	mov	r0, r4
   1c3be:	f007 fd35 	bl	23e2c <k_heap_aligned_alloc>
	if (mem == NULL) {
   1c3c2:	b908      	cbnz	r0, 1c3c8 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1c3c4:	2400      	movs	r4, #0
	}

	return ret;
   1c3c6:	e001      	b.n	1c3cc <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1c3c8:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1c3ca:	1d04      	adds	r4, r0, #4
}
   1c3cc:	4620      	mov	r0, r4
   1c3ce:	b002      	add	sp, #8
   1c3d0:	bd70      	pop	{r4, r5, r6, pc}
   1c3d2:	bf00      	nop
   1c3d4:	20002e50 	.word	0x20002e50

0001c3d8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1c3d8:	4801      	ldr	r0, [pc, #4]	; (1c3e0 <boot_banner+0x8>)
   1c3da:	f002 bfd2 	b.w	1f382 <printk>
   1c3de:	bf00      	nop
   1c3e0:	00025e06 	.word	0x00025e06

0001c3e4 <ocrypto_ecdh_p256_public_key>:
   1c3e4:	b530      	push	{r4, r5, lr}
   1c3e6:	b099      	sub	sp, #100	; 0x64
   1c3e8:	4605      	mov	r5, r0
   1c3ea:	4668      	mov	r0, sp
   1c3ec:	f000 f828 	bl	1c440 <ocrypto_sc_p256_from32bytes>
   1c3f0:	4669      	mov	r1, sp
   1c3f2:	4604      	mov	r4, r0
   1c3f4:	a808      	add	r0, sp, #32
   1c3f6:	f000 fa53 	bl	1c8a0 <ocrypto_curve_p256_scalarmult_base>
   1c3fa:	a908      	add	r1, sp, #32
   1c3fc:	4304      	orrs	r4, r0
   1c3fe:	4628      	mov	r0, r5
   1c400:	f000 f98a 	bl	1c718 <ocrypto_curve_p256_to64bytes>
   1c404:	4620      	mov	r0, r4
   1c406:	b019      	add	sp, #100	; 0x64
   1c408:	bd30      	pop	{r4, r5, pc}
   1c40a:	bf00      	nop

0001c40c <ocrypto_ecdh_p256_common_secret>:
   1c40c:	b570      	push	{r4, r5, r6, lr}
   1c40e:	b098      	sub	sp, #96	; 0x60
   1c410:	4605      	mov	r5, r0
   1c412:	4668      	mov	r0, sp
   1c414:	4616      	mov	r6, r2
   1c416:	f000 f813 	bl	1c440 <ocrypto_sc_p256_from32bytes>
   1c41a:	4631      	mov	r1, r6
   1c41c:	4604      	mov	r4, r0
   1c41e:	a808      	add	r0, sp, #32
   1c420:	f000 f946 	bl	1c6b0 <ocrypto_curve_p256_from64bytes>
   1c424:	a908      	add	r1, sp, #32
   1c426:	466a      	mov	r2, sp
   1c428:	4304      	orrs	r4, r0
   1c42a:	4608      	mov	r0, r1
   1c42c:	f000 f982 	bl	1c734 <ocrypto_curve_p256_scalarmult>
   1c430:	a908      	add	r1, sp, #32
   1c432:	4304      	orrs	r4, r0
   1c434:	4628      	mov	r0, r5
   1c436:	f000 f96d 	bl	1c714 <ocrypto_curve_p256_to32bytes>
   1c43a:	4620      	mov	r0, r4
   1c43c:	b018      	add	sp, #96	; 0x60
   1c43e:	bd70      	pop	{r4, r5, r6, pc}

0001c440 <ocrypto_sc_p256_from32bytes>:
   1c440:	b570      	push	{r4, r5, r6, lr}
   1c442:	680b      	ldr	r3, [r1, #0]
   1c444:	4e12      	ldr	r6, [pc, #72]	; (1c490 <ocrypto_sc_p256_from32bytes+0x50>)
   1c446:	ba1b      	rev	r3, r3
   1c448:	61c3      	str	r3, [r0, #28]
   1c44a:	684b      	ldr	r3, [r1, #4]
   1c44c:	ba1b      	rev	r3, r3
   1c44e:	6183      	str	r3, [r0, #24]
   1c450:	688b      	ldr	r3, [r1, #8]
   1c452:	ba1b      	rev	r3, r3
   1c454:	6143      	str	r3, [r0, #20]
   1c456:	68cb      	ldr	r3, [r1, #12]
   1c458:	ba1b      	rev	r3, r3
   1c45a:	6103      	str	r3, [r0, #16]
   1c45c:	690b      	ldr	r3, [r1, #16]
   1c45e:	ba1b      	rev	r3, r3
   1c460:	60c3      	str	r3, [r0, #12]
   1c462:	694b      	ldr	r3, [r1, #20]
   1c464:	ba1b      	rev	r3, r3
   1c466:	6083      	str	r3, [r0, #8]
   1c468:	698b      	ldr	r3, [r1, #24]
   1c46a:	ba1b      	rev	r3, r3
   1c46c:	6043      	str	r3, [r0, #4]
   1c46e:	69cb      	ldr	r3, [r1, #28]
   1c470:	ba1b      	rev	r3, r3
   1c472:	4632      	mov	r2, r6
   1c474:	6003      	str	r3, [r0, #0]
   1c476:	4601      	mov	r1, r0
   1c478:	4604      	mov	r4, r0
   1c47a:	f7e3 fe7b 	bl	174 <ocrypto_bigint_sub256>
   1c47e:	4631      	mov	r1, r6
   1c480:	4605      	mov	r5, r0
   1c482:	4602      	mov	r2, r0
   1c484:	4620      	mov	r0, r4
   1c486:	f7e3 fe95 	bl	1b4 <ocrypto_bigint_cadd256>
   1c48a:	1e68      	subs	r0, r5, #1
   1c48c:	bd70      	pop	{r4, r5, r6, pc}
   1c48e:	bf00      	nop
   1c490:	000253a8 	.word	0x000253a8

0001c494 <p256_zdblu>:
   1c494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c498:	b088      	sub	sp, #32
   1c49a:	460c      	mov	r4, r1
   1c49c:	4606      	mov	r6, r0
   1c49e:	f102 0120 	add.w	r1, r2, #32
   1c4a2:	4668      	mov	r0, sp
   1c4a4:	f106 0720 	add.w	r7, r6, #32
   1c4a8:	4690      	mov	r8, r2
   1c4aa:	f7e4 f95d 	bl	768 <ocrypto_mod_p256_sqr>
   1c4ae:	466a      	mov	r2, sp
   1c4b0:	4669      	mov	r1, sp
   1c4b2:	4668      	mov	r0, sp
   1c4b4:	f7e4 f87a 	bl	5ac <ocrypto_mod_p256_add>
   1c4b8:	4669      	mov	r1, sp
   1c4ba:	4638      	mov	r0, r7
   1c4bc:	f7e4 f954 	bl	768 <ocrypto_mod_p256_sqr>
   1c4c0:	463a      	mov	r2, r7
   1c4c2:	4639      	mov	r1, r7
   1c4c4:	4638      	mov	r0, r7
   1c4c6:	f104 0520 	add.w	r5, r4, #32
   1c4ca:	f7e4 f86f 	bl	5ac <ocrypto_mod_p256_add>
   1c4ce:	466a      	mov	r2, sp
   1c4d0:	4669      	mov	r1, sp
   1c4d2:	4668      	mov	r0, sp
   1c4d4:	f7e4 f86a 	bl	5ac <ocrypto_mod_p256_add>
   1c4d8:	4641      	mov	r1, r8
   1c4da:	4628      	mov	r0, r5
   1c4dc:	f7e4 f944 	bl	768 <ocrypto_mod_p256_sqr>
   1c4e0:	466a      	mov	r2, sp
   1c4e2:	4641      	mov	r1, r8
   1c4e4:	4630      	mov	r0, r6
   1c4e6:	f7e4 f927 	bl	738 <ocrypto_mod_p256_mul>
   1c4ea:	462a      	mov	r2, r5
   1c4ec:	4629      	mov	r1, r5
   1c4ee:	4668      	mov	r0, sp
   1c4f0:	f7e4 f85c 	bl	5ac <ocrypto_mod_p256_add>
   1c4f4:	462a      	mov	r2, r5
   1c4f6:	4669      	mov	r1, sp
   1c4f8:	4668      	mov	r0, sp
   1c4fa:	f7e4 f857 	bl	5ac <ocrypto_mod_p256_add>
   1c4fe:	4a12      	ldr	r2, [pc, #72]	; (1c548 <p256_zdblu+0xb4>)
   1c500:	4669      	mov	r1, sp
   1c502:	4668      	mov	r0, sp
   1c504:	f7e4 f852 	bl	5ac <ocrypto_mod_p256_add>
   1c508:	4669      	mov	r1, sp
   1c50a:	4620      	mov	r0, r4
   1c50c:	f7e4 f92c 	bl	768 <ocrypto_mod_p256_sqr>
   1c510:	4632      	mov	r2, r6
   1c512:	4621      	mov	r1, r4
   1c514:	4620      	mov	r0, r4
   1c516:	f7e4 f887 	bl	628 <ocrypto_mod_p256_sub>
   1c51a:	4632      	mov	r2, r6
   1c51c:	4621      	mov	r1, r4
   1c51e:	4620      	mov	r0, r4
   1c520:	f7e4 f882 	bl	628 <ocrypto_mod_p256_sub>
   1c524:	4622      	mov	r2, r4
   1c526:	4631      	mov	r1, r6
   1c528:	4628      	mov	r0, r5
   1c52a:	f7e4 f87d 	bl	628 <ocrypto_mod_p256_sub>
   1c52e:	466a      	mov	r2, sp
   1c530:	4629      	mov	r1, r5
   1c532:	4628      	mov	r0, r5
   1c534:	f7e4 f900 	bl	738 <ocrypto_mod_p256_mul>
   1c538:	463a      	mov	r2, r7
   1c53a:	4629      	mov	r1, r5
   1c53c:	4628      	mov	r0, r5
   1c53e:	f7e4 f873 	bl	628 <ocrypto_mod_p256_sub>
   1c542:	b008      	add	sp, #32
   1c544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c548:	00025488 	.word	0x00025488

0001c54c <p256_zaddc>:
   1c54c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c54e:	b099      	sub	sp, #100	; 0x64
   1c550:	4604      	mov	r4, r0
   1c552:	460d      	mov	r5, r1
   1c554:	460a      	mov	r2, r1
   1c556:	4601      	mov	r1, r0
   1c558:	4668      	mov	r0, sp
   1c55a:	f7e4 f865 	bl	628 <ocrypto_mod_p256_sub>
   1c55e:	4669      	mov	r1, sp
   1c560:	4668      	mov	r0, sp
   1c562:	f7e4 f901 	bl	768 <ocrypto_mod_p256_sqr>
   1c566:	466a      	mov	r2, sp
   1c568:	4621      	mov	r1, r4
   1c56a:	a808      	add	r0, sp, #32
   1c56c:	f105 0620 	add.w	r6, r5, #32
   1c570:	f104 0720 	add.w	r7, r4, #32
   1c574:	f7e4 f8e0 	bl	738 <ocrypto_mod_p256_mul>
   1c578:	466a      	mov	r2, sp
   1c57a:	4629      	mov	r1, r5
   1c57c:	4668      	mov	r0, sp
   1c57e:	f7e4 f8db 	bl	738 <ocrypto_mod_p256_mul>
   1c582:	4632      	mov	r2, r6
   1c584:	4639      	mov	r1, r7
   1c586:	a810      	add	r0, sp, #64	; 0x40
   1c588:	f7e4 f810 	bl	5ac <ocrypto_mod_p256_add>
   1c58c:	4632      	mov	r2, r6
   1c58e:	4639      	mov	r1, r7
   1c590:	4630      	mov	r0, r6
   1c592:	f7e4 f849 	bl	628 <ocrypto_mod_p256_sub>
   1c596:	4631      	mov	r1, r6
   1c598:	4628      	mov	r0, r5
   1c59a:	f7e4 f8e5 	bl	768 <ocrypto_mod_p256_sqr>
   1c59e:	466a      	mov	r2, sp
   1c5a0:	a908      	add	r1, sp, #32
   1c5a2:	4620      	mov	r0, r4
   1c5a4:	f7e4 f802 	bl	5ac <ocrypto_mod_p256_add>
   1c5a8:	4622      	mov	r2, r4
   1c5aa:	4629      	mov	r1, r5
   1c5ac:	4628      	mov	r0, r5
   1c5ae:	f7e4 f83b 	bl	628 <ocrypto_mod_p256_sub>
   1c5b2:	466a      	mov	r2, sp
   1c5b4:	a908      	add	r1, sp, #32
   1c5b6:	4668      	mov	r0, sp
   1c5b8:	f7e4 f836 	bl	628 <ocrypto_mod_p256_sub>
   1c5bc:	466a      	mov	r2, sp
   1c5be:	4639      	mov	r1, r7
   1c5c0:	4638      	mov	r0, r7
   1c5c2:	f7e4 f8b9 	bl	738 <ocrypto_mod_p256_mul>
   1c5c6:	462a      	mov	r2, r5
   1c5c8:	a908      	add	r1, sp, #32
   1c5ca:	4668      	mov	r0, sp
   1c5cc:	f7e4 f82c 	bl	628 <ocrypto_mod_p256_sub>
   1c5d0:	466a      	mov	r2, sp
   1c5d2:	4631      	mov	r1, r6
   1c5d4:	4630      	mov	r0, r6
   1c5d6:	f7e4 f8af 	bl	738 <ocrypto_mod_p256_mul>
   1c5da:	463a      	mov	r2, r7
   1c5dc:	4631      	mov	r1, r6
   1c5de:	4630      	mov	r0, r6
   1c5e0:	f7e4 f822 	bl	628 <ocrypto_mod_p256_sub>
   1c5e4:	a910      	add	r1, sp, #64	; 0x40
   1c5e6:	4668      	mov	r0, sp
   1c5e8:	f7e4 f8be 	bl	768 <ocrypto_mod_p256_sqr>
   1c5ec:	4622      	mov	r2, r4
   1c5ee:	4669      	mov	r1, sp
   1c5f0:	4620      	mov	r0, r4
   1c5f2:	f7e4 f819 	bl	628 <ocrypto_mod_p256_sub>
   1c5f6:	a908      	add	r1, sp, #32
   1c5f8:	4622      	mov	r2, r4
   1c5fa:	4608      	mov	r0, r1
   1c5fc:	f7e4 f814 	bl	628 <ocrypto_mod_p256_sub>
   1c600:	a910      	add	r1, sp, #64	; 0x40
   1c602:	aa08      	add	r2, sp, #32
   1c604:	4608      	mov	r0, r1
   1c606:	f7e4 f897 	bl	738 <ocrypto_mod_p256_mul>
   1c60a:	463a      	mov	r2, r7
   1c60c:	a910      	add	r1, sp, #64	; 0x40
   1c60e:	4638      	mov	r0, r7
   1c610:	f7e4 f80a 	bl	628 <ocrypto_mod_p256_sub>
   1c614:	b019      	add	sp, #100	; 0x64
   1c616:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c618 <p256_zaddu>:
   1c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c61c:	b088      	sub	sp, #32
   1c61e:	460c      	mov	r4, r1
   1c620:	4605      	mov	r5, r0
   1c622:	4690      	mov	r8, r2
   1c624:	460a      	mov	r2, r1
   1c626:	4601      	mov	r1, r0
   1c628:	4668      	mov	r0, sp
   1c62a:	f7e3 fffd 	bl	628 <ocrypto_mod_p256_sub>
   1c62e:	4669      	mov	r1, sp
   1c630:	4668      	mov	r0, sp
   1c632:	f7e4 f899 	bl	768 <ocrypto_mod_p256_sqr>
   1c636:	466a      	mov	r2, sp
   1c638:	4629      	mov	r1, r5
   1c63a:	4628      	mov	r0, r5
   1c63c:	f104 0620 	add.w	r6, r4, #32
   1c640:	f7e4 f87a 	bl	738 <ocrypto_mod_p256_mul>
   1c644:	f105 0720 	add.w	r7, r5, #32
   1c648:	466a      	mov	r2, sp
   1c64a:	4621      	mov	r1, r4
   1c64c:	4668      	mov	r0, sp
   1c64e:	f7e4 f873 	bl	738 <ocrypto_mod_p256_mul>
   1c652:	4632      	mov	r2, r6
   1c654:	4639      	mov	r1, r7
   1c656:	4630      	mov	r0, r6
   1c658:	f7e3 ffe6 	bl	628 <ocrypto_mod_p256_sub>
   1c65c:	4631      	mov	r1, r6
   1c65e:	4620      	mov	r0, r4
   1c660:	f7e4 f882 	bl	768 <ocrypto_mod_p256_sqr>
   1c664:	462a      	mov	r2, r5
   1c666:	4621      	mov	r1, r4
   1c668:	4620      	mov	r0, r4
   1c66a:	f7e3 ffdd 	bl	628 <ocrypto_mod_p256_sub>
   1c66e:	466a      	mov	r2, sp
   1c670:	4621      	mov	r1, r4
   1c672:	4620      	mov	r0, r4
   1c674:	f7e3 ffd8 	bl	628 <ocrypto_mod_p256_sub>
   1c678:	466a      	mov	r2, sp
   1c67a:	4629      	mov	r1, r5
   1c67c:	4640      	mov	r0, r8
   1c67e:	f7e3 ffd3 	bl	628 <ocrypto_mod_p256_sub>
   1c682:	4642      	mov	r2, r8
   1c684:	4639      	mov	r1, r7
   1c686:	4638      	mov	r0, r7
   1c688:	f7e4 f856 	bl	738 <ocrypto_mod_p256_mul>
   1c68c:	4622      	mov	r2, r4
   1c68e:	4629      	mov	r1, r5
   1c690:	4668      	mov	r0, sp
   1c692:	f7e3 ffc9 	bl	628 <ocrypto_mod_p256_sub>
   1c696:	466a      	mov	r2, sp
   1c698:	4631      	mov	r1, r6
   1c69a:	4630      	mov	r0, r6
   1c69c:	f7e4 f84c 	bl	738 <ocrypto_mod_p256_mul>
   1c6a0:	463a      	mov	r2, r7
   1c6a2:	4631      	mov	r1, r6
   1c6a4:	4630      	mov	r0, r6
   1c6a6:	f7e3 ffbf 	bl	628 <ocrypto_mod_p256_sub>
   1c6aa:	b008      	add	sp, #32
   1c6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c6b0 <ocrypto_curve_p256_from64bytes>:
   1c6b0:	b570      	push	{r4, r5, r6, lr}
   1c6b2:	f100 0620 	add.w	r6, r0, #32
   1c6b6:	b090      	sub	sp, #64	; 0x40
   1c6b8:	460d      	mov	r5, r1
   1c6ba:	4604      	mov	r4, r0
   1c6bc:	f000 f914 	bl	1c8e8 <ocrypto_mod_p256_from_bytes>
   1c6c0:	f105 0120 	add.w	r1, r5, #32
   1c6c4:	4630      	mov	r0, r6
   1c6c6:	f000 f90f 	bl	1c8e8 <ocrypto_mod_p256_from_bytes>
   1c6ca:	4621      	mov	r1, r4
   1c6cc:	a808      	add	r0, sp, #32
   1c6ce:	f7e4 f84b 	bl	768 <ocrypto_mod_p256_sqr>
   1c6d2:	a908      	add	r1, sp, #32
   1c6d4:	4608      	mov	r0, r1
   1c6d6:	4a0d      	ldr	r2, [pc, #52]	; (1c70c <ocrypto_curve_p256_from64bytes+0x5c>)
   1c6d8:	f7e3 ff68 	bl	5ac <ocrypto_mod_p256_add>
   1c6dc:	a908      	add	r1, sp, #32
   1c6de:	4622      	mov	r2, r4
   1c6e0:	4608      	mov	r0, r1
   1c6e2:	f7e4 f829 	bl	738 <ocrypto_mod_p256_mul>
   1c6e6:	a908      	add	r1, sp, #32
   1c6e8:	4a09      	ldr	r2, [pc, #36]	; (1c710 <ocrypto_curve_p256_from64bytes+0x60>)
   1c6ea:	4608      	mov	r0, r1
   1c6ec:	f7e3 ff5e 	bl	5ac <ocrypto_mod_p256_add>
   1c6f0:	4631      	mov	r1, r6
   1c6f2:	4668      	mov	r0, sp
   1c6f4:	f7e4 f838 	bl	768 <ocrypto_mod_p256_sqr>
   1c6f8:	2220      	movs	r2, #32
   1c6fa:	4669      	mov	r1, sp
   1c6fc:	eb0d 0002 	add.w	r0, sp, r2
   1c700:	f7e3 ff26 	bl	550 <ocrypto_constant_time_equal>
   1c704:	3801      	subs	r0, #1
   1c706:	b010      	add	sp, #64	; 0x40
   1c708:	bd70      	pop	{r4, r5, r6, pc}
   1c70a:	bf00      	nop
   1c70c:	00025488 	.word	0x00025488
   1c710:	00025468 	.word	0x00025468

0001c714 <ocrypto_curve_p256_to32bytes>:
   1c714:	f000 b902 	b.w	1c91c <ocrypto_mod_p256_to_bytes>

0001c718 <ocrypto_curve_p256_to64bytes>:
   1c718:	b538      	push	{r3, r4, r5, lr}
   1c71a:	4604      	mov	r4, r0
   1c71c:	460d      	mov	r5, r1
   1c71e:	f000 f8fd 	bl	1c91c <ocrypto_mod_p256_to_bytes>
   1c722:	f105 0120 	add.w	r1, r5, #32
   1c726:	f104 0020 	add.w	r0, r4, #32
   1c72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c72e:	f000 b8f5 	b.w	1c91c <ocrypto_mod_p256_to_bytes>
   1c732:	bf00      	nop

0001c734 <ocrypto_curve_p256_scalarmult>:
   1c734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c738:	4613      	mov	r3, r2
   1c73a:	b0b8      	sub	sp, #224	; 0xe0
   1c73c:	4a54      	ldr	r2, [pc, #336]	; (1c890 <ocrypto_curve_p256_scalarmult+0x15c>)
   1c73e:	4689      	mov	r9, r1
   1c740:	4680      	mov	r8, r0
   1c742:	4619      	mov	r1, r3
   1c744:	a810      	add	r0, sp, #64	; 0x40
   1c746:	f7e3 fd15 	bl	174 <ocrypto_bigint_sub256>
   1c74a:	4952      	ldr	r1, [pc, #328]	; (1c894 <ocrypto_curve_p256_scalarmult+0x160>)
   1c74c:	4602      	mov	r2, r0
   1c74e:	a810      	add	r0, sp, #64	; 0x40
   1c750:	f7e3 fd30 	bl	1b4 <ocrypto_bigint_cadd256>
   1c754:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1c756:	494e      	ldr	r1, [pc, #312]	; (1c890 <ocrypto_curve_p256_scalarmult+0x15c>)
   1c758:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   1c75c:	4607      	mov	r7, r0
   1c75e:	f1c6 0201 	rsb	r2, r6, #1
   1c762:	a810      	add	r0, sp, #64	; 0x40
   1c764:	f7e3 fd26 	bl	1b4 <ocrypto_bigint_cadd256>
   1c768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c76a:	464a      	mov	r2, r9
   1c76c:	ea6f 0a03 	mvn.w	sl, r3
   1c770:	a928      	add	r1, sp, #160	; 0xa0
   1c772:	a818      	add	r0, sp, #96	; 0x60
   1c774:	f7ff fe8e 	bl	1c494 <p256_zdblu>
   1c778:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   1c77c:	a920      	add	r1, sp, #128	; 0x80
   1c77e:	f1ca 0201 	rsb	r2, sl, #1
   1c782:	4608      	mov	r0, r1
   1c784:	f000 f892 	bl	1c8ac <ocrypto_mod_p256_cneg>
   1c788:	f1c7 0701 	rsb	r7, r7, #1
   1c78c:	24fe      	movs	r4, #254	; 0xfe
   1c78e:	466a      	mov	r2, sp
   1c790:	a918      	add	r1, sp, #96	; 0x60
   1c792:	a828      	add	r0, sp, #160	; 0xa0
   1c794:	f7ff ff40 	bl	1c618 <p256_zaddu>
   1c798:	1163      	asrs	r3, r4, #5
   1c79a:	aa38      	add	r2, sp, #224	; 0xe0
   1c79c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1c7a0:	f004 021f 	and.w	r2, r4, #31
   1c7a4:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   1c7a8:	40d3      	lsrs	r3, r2
   1c7aa:	4655      	mov	r5, sl
   1c7ac:	f003 0a01 	and.w	sl, r3, #1
   1c7b0:	ea8a 0505 	eor.w	r5, sl, r5
   1c7b4:	462a      	mov	r2, r5
   1c7b6:	a928      	add	r1, sp, #160	; 0xa0
   1c7b8:	a818      	add	r0, sp, #96	; 0x60
   1c7ba:	f7e3 fd57 	bl	26c <ocrypto_bigint_cswap256>
   1c7be:	462a      	mov	r2, r5
   1c7c0:	a930      	add	r1, sp, #192	; 0xc0
   1c7c2:	a820      	add	r0, sp, #128	; 0x80
   1c7c4:	f7e3 fd52 	bl	26c <ocrypto_bigint_cswap256>
   1c7c8:	3c01      	subs	r4, #1
   1c7ca:	a928      	add	r1, sp, #160	; 0xa0
   1c7cc:	a818      	add	r0, sp, #96	; 0x60
   1c7ce:	f7ff febd 	bl	1c54c <p256_zaddc>
   1c7d2:	1c63      	adds	r3, r4, #1
   1c7d4:	d1db      	bne.n	1c78e <ocrypto_curve_p256_scalarmult+0x5a>
   1c7d6:	f1ca 0201 	rsb	r2, sl, #1
   1c7da:	a920      	add	r1, sp, #128	; 0x80
   1c7dc:	a808      	add	r0, sp, #32
   1c7de:	f000 f865 	bl	1c8ac <ocrypto_mod_p256_cneg>
   1c7e2:	ea86 060a 	eor.w	r6, r6, sl
   1c7e6:	466a      	mov	r2, sp
   1c7e8:	a918      	add	r1, sp, #96	; 0x60
   1c7ea:	a828      	add	r0, sp, #160	; 0xa0
   1c7ec:	f7ff ff14 	bl	1c618 <p256_zaddu>
   1c7f0:	a928      	add	r1, sp, #160	; 0xa0
   1c7f2:	4632      	mov	r2, r6
   1c7f4:	a818      	add	r0, sp, #96	; 0x60
   1c7f6:	f7e3 fd39 	bl	26c <ocrypto_bigint_cswap256>
   1c7fa:	4632      	mov	r2, r6
   1c7fc:	a930      	add	r1, sp, #192	; 0xc0
   1c7fe:	a820      	add	r0, sp, #128	; 0x80
   1c800:	f7e3 fd34 	bl	26c <ocrypto_bigint_cswap256>
   1c804:	a908      	add	r1, sp, #32
   1c806:	466a      	mov	r2, sp
   1c808:	4608      	mov	r0, r1
   1c80a:	f7e3 ff95 	bl	738 <ocrypto_mod_p256_mul>
   1c80e:	a908      	add	r1, sp, #32
   1c810:	4608      	mov	r0, r1
   1c812:	f000 f89d 	bl	1c950 <ocrypto_mod_p256_inv>
   1c816:	a908      	add	r1, sp, #32
   1c818:	f108 0420 	add.w	r4, r8, #32
   1c81c:	f109 0220 	add.w	r2, r9, #32
   1c820:	4608      	mov	r0, r1
   1c822:	f7e3 ff89 	bl	738 <ocrypto_mod_p256_mul>
   1c826:	a920      	add	r1, sp, #128	; 0x80
   1c828:	aa08      	add	r2, sp, #32
   1c82a:	4620      	mov	r0, r4
   1c82c:	f7e3 ff84 	bl	738 <ocrypto_mod_p256_mul>
   1c830:	aa08      	add	r2, sp, #32
   1c832:	a918      	add	r1, sp, #96	; 0x60
   1c834:	4668      	mov	r0, sp
   1c836:	f7e3 ff7f 	bl	738 <ocrypto_mod_p256_mul>
   1c83a:	4669      	mov	r1, sp
   1c83c:	4668      	mov	r0, sp
   1c83e:	f7e3 ff93 	bl	768 <ocrypto_mod_p256_sqr>
   1c842:	aa18      	add	r2, sp, #96	; 0x60
   1c844:	4669      	mov	r1, sp
   1c846:	a808      	add	r0, sp, #32
   1c848:	f7e3 ff76 	bl	738 <ocrypto_mod_p256_mul>
   1c84c:	4621      	mov	r1, r4
   1c84e:	4668      	mov	r0, sp
   1c850:	f7e3 ff8a 	bl	768 <ocrypto_mod_p256_sqr>
   1c854:	aa08      	add	r2, sp, #32
   1c856:	4669      	mov	r1, sp
   1c858:	4610      	mov	r0, r2
   1c85a:	f7e3 fee5 	bl	628 <ocrypto_mod_p256_sub>
   1c85e:	4a0e      	ldr	r2, [pc, #56]	; (1c898 <ocrypto_curve_p256_scalarmult+0x164>)
   1c860:	a908      	add	r1, sp, #32
   1c862:	4668      	mov	r0, sp
   1c864:	f7e3 fee0 	bl	628 <ocrypto_mod_p256_sub>
   1c868:	4620      	mov	r0, r4
   1c86a:	2120      	movs	r1, #32
   1c86c:	f7e3 fe84 	bl	578 <ocrypto_constant_time_is_zero>
   1c870:	a908      	add	r1, sp, #32
   1c872:	4602      	mov	r2, r0
   1c874:	4244      	negs	r4, r0
   1c876:	4668      	mov	r0, sp
   1c878:	f7e3 fcf8 	bl	26c <ocrypto_bigint_cswap256>
   1c87c:	4640      	mov	r0, r8
   1c87e:	4a07      	ldr	r2, [pc, #28]	; (1c89c <ocrypto_curve_p256_scalarmult+0x168>)
   1c880:	4669      	mov	r1, sp
   1c882:	f7e3 ff59 	bl	738 <ocrypto_mod_p256_mul>
   1c886:	433c      	orrs	r4, r7
   1c888:	4620      	mov	r0, r4
   1c88a:	b038      	add	sp, #224	; 0xe0
   1c88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c890:	000253e8 	.word	0x000253e8
   1c894:	00025408 	.word	0x00025408
   1c898:	00025468 	.word	0x00025468
   1c89c:	000253c8 	.word	0x000253c8

0001c8a0 <ocrypto_curve_p256_scalarmult_base>:
   1c8a0:	460a      	mov	r2, r1
   1c8a2:	4901      	ldr	r1, [pc, #4]	; (1c8a8 <ocrypto_curve_p256_scalarmult_base+0x8>)
   1c8a4:	f7ff bf46 	b.w	1c734 <ocrypto_curve_p256_scalarmult>
   1c8a8:	00025428 	.word	0x00025428

0001c8ac <ocrypto_mod_p256_cneg>:
   1c8ac:	b570      	push	{r4, r5, r6, lr}
   1c8ae:	b088      	sub	sp, #32
   1c8b0:	4604      	mov	r4, r0
   1c8b2:	460d      	mov	r5, r1
   1c8b4:	4616      	mov	r6, r2
   1c8b6:	2100      	movs	r1, #0
   1c8b8:	2220      	movs	r2, #32
   1c8ba:	4668      	mov	r0, sp
   1c8bc:	f003 fb28 	bl	1ff10 <memset>
   1c8c0:	2300      	movs	r3, #0
   1c8c2:	4629      	mov	r1, r5
   1c8c4:	2220      	movs	r2, #32
   1c8c6:	4620      	mov	r0, r4
   1c8c8:	9300      	str	r3, [sp, #0]
   1c8ca:	f003 fb16 	bl	1fefa <memcpy>
   1c8ce:	462a      	mov	r2, r5
   1c8d0:	4669      	mov	r1, sp
   1c8d2:	4668      	mov	r0, sp
   1c8d4:	f7e3 fea8 	bl	628 <ocrypto_mod_p256_sub>
   1c8d8:	4632      	mov	r2, r6
   1c8da:	4669      	mov	r1, sp
   1c8dc:	4620      	mov	r0, r4
   1c8de:	f7e3 fcc5 	bl	26c <ocrypto_bigint_cswap256>
   1c8e2:	b008      	add	sp, #32
   1c8e4:	bd70      	pop	{r4, r5, r6, pc}
   1c8e6:	bf00      	nop

0001c8e8 <ocrypto_mod_p256_from_bytes>:
   1c8e8:	680b      	ldr	r3, [r1, #0]
   1c8ea:	ba1b      	rev	r3, r3
   1c8ec:	61c3      	str	r3, [r0, #28]
   1c8ee:	684b      	ldr	r3, [r1, #4]
   1c8f0:	ba1b      	rev	r3, r3
   1c8f2:	6183      	str	r3, [r0, #24]
   1c8f4:	688b      	ldr	r3, [r1, #8]
   1c8f6:	ba1b      	rev	r3, r3
   1c8f8:	6143      	str	r3, [r0, #20]
   1c8fa:	68cb      	ldr	r3, [r1, #12]
   1c8fc:	ba1b      	rev	r3, r3
   1c8fe:	6103      	str	r3, [r0, #16]
   1c900:	690b      	ldr	r3, [r1, #16]
   1c902:	ba1b      	rev	r3, r3
   1c904:	60c3      	str	r3, [r0, #12]
   1c906:	694b      	ldr	r3, [r1, #20]
   1c908:	ba1b      	rev	r3, r3
   1c90a:	6083      	str	r3, [r0, #8]
   1c90c:	698b      	ldr	r3, [r1, #24]
   1c90e:	ba1b      	rev	r3, r3
   1c910:	6043      	str	r3, [r0, #4]
   1c912:	69cb      	ldr	r3, [r1, #28]
   1c914:	ba1b      	rev	r3, r3
   1c916:	6003      	str	r3, [r0, #0]
   1c918:	4770      	bx	lr
   1c91a:	bf00      	nop

0001c91c <ocrypto_mod_p256_to_bytes>:
   1c91c:	69cb      	ldr	r3, [r1, #28]
   1c91e:	ba1b      	rev	r3, r3
   1c920:	6003      	str	r3, [r0, #0]
   1c922:	698b      	ldr	r3, [r1, #24]
   1c924:	ba1b      	rev	r3, r3
   1c926:	6043      	str	r3, [r0, #4]
   1c928:	694b      	ldr	r3, [r1, #20]
   1c92a:	ba1b      	rev	r3, r3
   1c92c:	6083      	str	r3, [r0, #8]
   1c92e:	690b      	ldr	r3, [r1, #16]
   1c930:	ba1b      	rev	r3, r3
   1c932:	60c3      	str	r3, [r0, #12]
   1c934:	68cb      	ldr	r3, [r1, #12]
   1c936:	ba1b      	rev	r3, r3
   1c938:	6103      	str	r3, [r0, #16]
   1c93a:	688b      	ldr	r3, [r1, #8]
   1c93c:	ba1b      	rev	r3, r3
   1c93e:	6143      	str	r3, [r0, #20]
   1c940:	684b      	ldr	r3, [r1, #4]
   1c942:	ba1b      	rev	r3, r3
   1c944:	6183      	str	r3, [r0, #24]
   1c946:	680b      	ldr	r3, [r1, #0]
   1c948:	ba1b      	rev	r3, r3
   1c94a:	61c3      	str	r3, [r0, #28]
   1c94c:	4770      	bx	lr
   1c94e:	bf00      	nop

0001c950 <ocrypto_mod_p256_inv>:
   1c950:	b570      	push	{r4, r5, r6, lr}
   1c952:	b098      	sub	sp, #96	; 0x60
   1c954:	460d      	mov	r5, r1
   1c956:	4606      	mov	r6, r0
   1c958:	a810      	add	r0, sp, #64	; 0x40
   1c95a:	f7e3 ff05 	bl	768 <ocrypto_mod_p256_sqr>
   1c95e:	462a      	mov	r2, r5
   1c960:	a910      	add	r1, sp, #64	; 0x40
   1c962:	4668      	mov	r0, sp
   1c964:	f7e3 fee8 	bl	738 <ocrypto_mod_p256_mul>
   1c968:	4669      	mov	r1, sp
   1c96a:	a810      	add	r0, sp, #64	; 0x40
   1c96c:	f7e3 fefc 	bl	768 <ocrypto_mod_p256_sqr>
   1c970:	a910      	add	r1, sp, #64	; 0x40
   1c972:	4608      	mov	r0, r1
   1c974:	f7e3 fef8 	bl	768 <ocrypto_mod_p256_sqr>
   1c978:	466a      	mov	r2, sp
   1c97a:	a910      	add	r1, sp, #64	; 0x40
   1c97c:	a808      	add	r0, sp, #32
   1c97e:	f7e3 fedb 	bl	738 <ocrypto_mod_p256_mul>
   1c982:	a908      	add	r1, sp, #32
   1c984:	a810      	add	r0, sp, #64	; 0x40
   1c986:	f7e3 feef 	bl	768 <ocrypto_mod_p256_sqr>
   1c98a:	a910      	add	r1, sp, #64	; 0x40
   1c98c:	4608      	mov	r0, r1
   1c98e:	f7e3 feeb 	bl	768 <ocrypto_mod_p256_sqr>
   1c992:	a910      	add	r1, sp, #64	; 0x40
   1c994:	4608      	mov	r0, r1
   1c996:	f7e3 fee7 	bl	768 <ocrypto_mod_p256_sqr>
   1c99a:	a910      	add	r1, sp, #64	; 0x40
   1c99c:	4608      	mov	r0, r1
   1c99e:	f7e3 fee3 	bl	768 <ocrypto_mod_p256_sqr>
   1c9a2:	a910      	add	r1, sp, #64	; 0x40
   1c9a4:	aa08      	add	r2, sp, #32
   1c9a6:	4608      	mov	r0, r1
   1c9a8:	f7e3 fec6 	bl	738 <ocrypto_mod_p256_mul>
   1c9ac:	a910      	add	r1, sp, #64	; 0x40
   1c9ae:	4608      	mov	r0, r1
   1c9b0:	f7e3 feda 	bl	768 <ocrypto_mod_p256_sqr>
   1c9b4:	a910      	add	r1, sp, #64	; 0x40
   1c9b6:	4608      	mov	r0, r1
   1c9b8:	f7e3 fed6 	bl	768 <ocrypto_mod_p256_sqr>
   1c9bc:	a910      	add	r1, sp, #64	; 0x40
   1c9be:	466a      	mov	r2, sp
   1c9c0:	a808      	add	r0, sp, #32
   1c9c2:	f7e3 feb9 	bl	738 <ocrypto_mod_p256_mul>
   1c9c6:	2405      	movs	r4, #5
   1c9c8:	a908      	add	r1, sp, #32
   1c9ca:	a810      	add	r0, sp, #64	; 0x40
   1c9cc:	f7e3 fecc 	bl	768 <ocrypto_mod_p256_sqr>
   1c9d0:	a910      	add	r1, sp, #64	; 0x40
   1c9d2:	4608      	mov	r0, r1
   1c9d4:	f7e3 fec8 	bl	768 <ocrypto_mod_p256_sqr>
   1c9d8:	3c01      	subs	r4, #1
   1c9da:	a910      	add	r1, sp, #64	; 0x40
   1c9dc:	d1f5      	bne.n	1c9ca <ocrypto_mod_p256_inv+0x7a>
   1c9de:	aa08      	add	r2, sp, #32
   1c9e0:	4608      	mov	r0, r1
   1c9e2:	f7e3 fea9 	bl	738 <ocrypto_mod_p256_mul>
   1c9e6:	2405      	movs	r4, #5
   1c9e8:	a910      	add	r1, sp, #64	; 0x40
   1c9ea:	4608      	mov	r0, r1
   1c9ec:	f7e3 febc 	bl	768 <ocrypto_mod_p256_sqr>
   1c9f0:	a910      	add	r1, sp, #64	; 0x40
   1c9f2:	4608      	mov	r0, r1
   1c9f4:	f7e3 feb8 	bl	768 <ocrypto_mod_p256_sqr>
   1c9f8:	3c01      	subs	r4, #1
   1c9fa:	d1f5      	bne.n	1c9e8 <ocrypto_mod_p256_inv+0x98>
   1c9fc:	a910      	add	r1, sp, #64	; 0x40
   1c9fe:	aa08      	add	r2, sp, #32
   1ca00:	4608      	mov	r0, r1
   1ca02:	f7e3 fe99 	bl	738 <ocrypto_mod_p256_mul>
   1ca06:	a910      	add	r1, sp, #64	; 0x40
   1ca08:	a808      	add	r0, sp, #32
   1ca0a:	f7e3 fead 	bl	768 <ocrypto_mod_p256_sqr>
   1ca0e:	a908      	add	r1, sp, #32
   1ca10:	4608      	mov	r0, r1
   1ca12:	f7e3 fea9 	bl	768 <ocrypto_mod_p256_sqr>
   1ca16:	a908      	add	r1, sp, #32
   1ca18:	466a      	mov	r2, sp
   1ca1a:	4668      	mov	r0, sp
   1ca1c:	f7e3 fe8c 	bl	738 <ocrypto_mod_p256_mul>
   1ca20:	2410      	movs	r4, #16
   1ca22:	4669      	mov	r1, sp
   1ca24:	a810      	add	r0, sp, #64	; 0x40
   1ca26:	f7e3 fe9f 	bl	768 <ocrypto_mod_p256_sqr>
   1ca2a:	a910      	add	r1, sp, #64	; 0x40
   1ca2c:	4608      	mov	r0, r1
   1ca2e:	f7e3 fe9b 	bl	768 <ocrypto_mod_p256_sqr>
   1ca32:	3c01      	subs	r4, #1
   1ca34:	a910      	add	r1, sp, #64	; 0x40
   1ca36:	d1f5      	bne.n	1ca24 <ocrypto_mod_p256_inv+0xd4>
   1ca38:	462a      	mov	r2, r5
   1ca3a:	4608      	mov	r0, r1
   1ca3c:	f7e3 fe7c 	bl	738 <ocrypto_mod_p256_mul>
   1ca40:	2440      	movs	r4, #64	; 0x40
   1ca42:	a910      	add	r1, sp, #64	; 0x40
   1ca44:	4608      	mov	r0, r1
   1ca46:	f7e3 fe8f 	bl	768 <ocrypto_mod_p256_sqr>
   1ca4a:	a910      	add	r1, sp, #64	; 0x40
   1ca4c:	4608      	mov	r0, r1
   1ca4e:	f7e3 fe8b 	bl	768 <ocrypto_mod_p256_sqr>
   1ca52:	3c01      	subs	r4, #1
   1ca54:	d1f5      	bne.n	1ca42 <ocrypto_mod_p256_inv+0xf2>
   1ca56:	a910      	add	r1, sp, #64	; 0x40
   1ca58:	466a      	mov	r2, sp
   1ca5a:	4608      	mov	r0, r1
   1ca5c:	f7e3 fe6c 	bl	738 <ocrypto_mod_p256_mul>
   1ca60:	2410      	movs	r4, #16
   1ca62:	a910      	add	r1, sp, #64	; 0x40
   1ca64:	4608      	mov	r0, r1
   1ca66:	f7e3 fe7f 	bl	768 <ocrypto_mod_p256_sqr>
   1ca6a:	a910      	add	r1, sp, #64	; 0x40
   1ca6c:	4608      	mov	r0, r1
   1ca6e:	f7e3 fe7b 	bl	768 <ocrypto_mod_p256_sqr>
   1ca72:	3c01      	subs	r4, #1
   1ca74:	d1f5      	bne.n	1ca62 <ocrypto_mod_p256_inv+0x112>
   1ca76:	a910      	add	r1, sp, #64	; 0x40
   1ca78:	466a      	mov	r2, sp
   1ca7a:	4608      	mov	r0, r1
   1ca7c:	f7e3 fe5c 	bl	738 <ocrypto_mod_p256_mul>
   1ca80:	2410      	movs	r4, #16
   1ca82:	a910      	add	r1, sp, #64	; 0x40
   1ca84:	4608      	mov	r0, r1
   1ca86:	f7e3 fe6f 	bl	768 <ocrypto_mod_p256_sqr>
   1ca8a:	a910      	add	r1, sp, #64	; 0x40
   1ca8c:	4608      	mov	r0, r1
   1ca8e:	f7e3 fe6b 	bl	768 <ocrypto_mod_p256_sqr>
   1ca92:	3c01      	subs	r4, #1
   1ca94:	d1f5      	bne.n	1ca82 <ocrypto_mod_p256_inv+0x132>
   1ca96:	a910      	add	r1, sp, #64	; 0x40
   1ca98:	aa08      	add	r2, sp, #32
   1ca9a:	4608      	mov	r0, r1
   1ca9c:	f7e3 fe4c 	bl	738 <ocrypto_mod_p256_mul>
   1caa0:	462a      	mov	r2, r5
   1caa2:	a910      	add	r1, sp, #64	; 0x40
   1caa4:	4630      	mov	r0, r6
   1caa6:	f7e3 fe47 	bl	738 <ocrypto_mod_p256_mul>
   1caaa:	b018      	add	sp, #96	; 0x60
   1caac:	bd70      	pop	{r4, r5, r6, pc}
   1caae:	bf00      	nop

0001cab0 <nrf_cc3xx_platform_init>:
   1cab0:	b510      	push	{r4, lr}
   1cab2:	4c0c      	ldr	r4, [pc, #48]	; (1cae4 <nrf_cc3xx_platform_init+0x34>)
   1cab4:	6823      	ldr	r3, [r4, #0]
   1cab6:	b113      	cbz	r3, 1cabe <nrf_cc3xx_platform_init+0xe>
   1cab8:	4b0b      	ldr	r3, [pc, #44]	; (1cae8 <nrf_cc3xx_platform_init+0x38>)
   1caba:	681b      	ldr	r3, [r3, #0]
   1cabc:	b92b      	cbnz	r3, 1caca <nrf_cc3xx_platform_init+0x1a>
   1cabe:	f000 fe29 	bl	1d714 <CC_LibInit>
   1cac2:	b930      	cbnz	r0, 1cad2 <nrf_cc3xx_platform_init+0x22>
   1cac4:	4b08      	ldr	r3, [pc, #32]	; (1cae8 <nrf_cc3xx_platform_init+0x38>)
   1cac6:	2201      	movs	r2, #1
   1cac8:	601a      	str	r2, [r3, #0]
   1caca:	2301      	movs	r3, #1
   1cacc:	6023      	str	r3, [r4, #0]
   1cace:	2000      	movs	r0, #0
   1cad0:	bd10      	pop	{r4, pc}
   1cad2:	3801      	subs	r0, #1
   1cad4:	2806      	cmp	r0, #6
   1cad6:	d901      	bls.n	1cadc <nrf_cc3xx_platform_init+0x2c>
   1cad8:	4804      	ldr	r0, [pc, #16]	; (1caec <nrf_cc3xx_platform_init+0x3c>)
   1cada:	bd10      	pop	{r4, pc}
   1cadc:	4b04      	ldr	r3, [pc, #16]	; (1caf0 <nrf_cc3xx_platform_init+0x40>)
   1cade:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1cae2:	bd10      	pop	{r4, pc}
   1cae4:	20002e90 	.word	0x20002e90
   1cae8:	20002e8c 	.word	0x20002e8c
   1caec:	ffff8ffe 	.word	0xffff8ffe
   1caf0:	000254a8 	.word	0x000254a8

0001caf4 <nrf_cc3xx_platform_abort>:
   1caf4:	f3bf 8f4f 	dsb	sy
   1caf8:	4905      	ldr	r1, [pc, #20]	; (1cb10 <nrf_cc3xx_platform_abort+0x1c>)
   1cafa:	4b06      	ldr	r3, [pc, #24]	; (1cb14 <nrf_cc3xx_platform_abort+0x20>)
   1cafc:	68ca      	ldr	r2, [r1, #12]
   1cafe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1cb02:	4313      	orrs	r3, r2
   1cb04:	60cb      	str	r3, [r1, #12]
   1cb06:	f3bf 8f4f 	dsb	sy
   1cb0a:	bf00      	nop
   1cb0c:	e7fd      	b.n	1cb0a <nrf_cc3xx_platform_abort+0x16>
   1cb0e:	bf00      	nop
   1cb10:	e000ed00 	.word	0xe000ed00
   1cb14:	05fa0004 	.word	0x05fa0004

0001cb18 <CC_PalAbort>:
   1cb18:	b410      	push	{r4}
   1cb1a:	4b09      	ldr	r3, [pc, #36]	; (1cb40 <CC_PalAbort+0x28>)
   1cb1c:	4909      	ldr	r1, [pc, #36]	; (1cb44 <CC_PalAbort+0x2c>)
   1cb1e:	4c0a      	ldr	r4, [pc, #40]	; (1cb48 <CC_PalAbort+0x30>)
   1cb20:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1cb24:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1cb28:	6849      	ldr	r1, [r1, #4]
   1cb2a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1cb2e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1cb32:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1cb36:	2300      	movs	r3, #0
   1cb38:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1cb3c:	bc10      	pop	{r4}
   1cb3e:	4708      	bx	r1
   1cb40:	5002b000 	.word	0x5002b000
   1cb44:	20000698 	.word	0x20000698
   1cb48:	5002a000 	.word	0x5002a000

0001cb4c <nrf_cc3xx_platform_set_abort>:
   1cb4c:	e9d0 1200 	ldrd	r1, r2, [r0]
   1cb50:	4b01      	ldr	r3, [pc, #4]	; (1cb58 <nrf_cc3xx_platform_set_abort+0xc>)
   1cb52:	e9c3 1200 	strd	r1, r2, [r3]
   1cb56:	4770      	bx	lr
   1cb58:	20000698 	.word	0x20000698

0001cb5c <nrf_cc3xx_platform_ctr_drbg_init>:
   1cb5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb60:	4b13      	ldr	r3, [pc, #76]	; (1cbb0 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   1cb62:	4e14      	ldr	r6, [pc, #80]	; (1cbb4 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   1cb64:	2800      	cmp	r0, #0
   1cb66:	bf14      	ite	ne
   1cb68:	4604      	movne	r4, r0
   1cb6a:	461c      	moveq	r4, r3
   1cb6c:	b083      	sub	sp, #12
   1cb6e:	6823      	ldr	r3, [r4, #0]
   1cb70:	42b3      	cmp	r3, r6
   1cb72:	d019      	beq.n	1cba8 <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   1cb74:	460d      	mov	r5, r1
   1cb76:	4620      	mov	r0, r4
   1cb78:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1cb7c:	f104 0904 	add.w	r9, r4, #4
   1cb80:	4617      	mov	r7, r2
   1cb82:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1cb86:	f000 f8e9 	bl	1cd5c <mbedtls_platform_zeroize>
   1cb8a:	4648      	mov	r0, r9
   1cb8c:	f000 fcac 	bl	1d4e8 <cc_mbedtls_entropy_init>
   1cb90:	4640      	mov	r0, r8
   1cb92:	f000 fadb 	bl	1d14c <cc_mbedtls_ctr_drbg_init>
   1cb96:	4908      	ldr	r1, [pc, #32]	; (1cbb8 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1cb98:	9700      	str	r7, [sp, #0]
   1cb9a:	462b      	mov	r3, r5
   1cb9c:	464a      	mov	r2, r9
   1cb9e:	4640      	mov	r0, r8
   1cba0:	f000 faea 	bl	1d178 <cc_mbedtls_ctr_drbg_seed>
   1cba4:	b908      	cbnz	r0, 1cbaa <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1cba6:	6026      	str	r6, [r4, #0]
   1cba8:	2000      	movs	r0, #0
   1cbaa:	b003      	add	sp, #12
   1cbac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cbb0:	20002e94 	.word	0x20002e94
   1cbb4:	5ac9bca5 	.word	0x5ac9bca5
   1cbb8:	0001d571 	.word	0x0001d571

0001cbbc <nrf_cc3xx_platform_ctr_drbg_get>:
   1cbbc:	b570      	push	{r4, r5, r6, lr}
   1cbbe:	461d      	mov	r5, r3
   1cbc0:	4b0c      	ldr	r3, [pc, #48]	; (1cbf4 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1cbc2:	2800      	cmp	r0, #0
   1cbc4:	bf18      	it	ne
   1cbc6:	4603      	movne	r3, r0
   1cbc8:	480b      	ldr	r0, [pc, #44]	; (1cbf8 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1cbca:	681e      	ldr	r6, [r3, #0]
   1cbcc:	4286      	cmp	r6, r0
   1cbce:	b082      	sub	sp, #8
   1cbd0:	d10d      	bne.n	1cbee <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1cbd2:	2600      	movs	r6, #0
   1cbd4:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   1cbd8:	9600      	str	r6, [sp, #0]
   1cbda:	4633      	mov	r3, r6
   1cbdc:	4614      	mov	r4, r2
   1cbde:	f000 fb17 	bl	1d210 <cc_mbedtls_ctr_drbg_random_with_add>
   1cbe2:	2800      	cmp	r0, #0
   1cbe4:	bf18      	it	ne
   1cbe6:	4634      	movne	r4, r6
   1cbe8:	602c      	str	r4, [r5, #0]
   1cbea:	b002      	add	sp, #8
   1cbec:	bd70      	pop	{r4, r5, r6, pc}
   1cbee:	4803      	ldr	r0, [pc, #12]	; (1cbfc <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1cbf0:	e7fb      	b.n	1cbea <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1cbf2:	bf00      	nop
   1cbf4:	20002e94 	.word	0x20002e94
   1cbf8:	5ac9bca5 	.word	0x5ac9bca5
   1cbfc:	ffff8fe8 	.word	0xffff8fe8

0001cc00 <mutex_free>:
   1cc00:	b510      	push	{r4, lr}
   1cc02:	4604      	mov	r4, r0
   1cc04:	b150      	cbz	r0, 1cc1c <mutex_free+0x1c>
   1cc06:	6863      	ldr	r3, [r4, #4]
   1cc08:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1cc0c:	d005      	beq.n	1cc1a <mutex_free+0x1a>
   1cc0e:	4a06      	ldr	r2, [pc, #24]	; (1cc28 <mutex_free+0x28>)
   1cc10:	4293      	cmp	r3, r2
   1cc12:	d002      	beq.n	1cc1a <mutex_free+0x1a>
   1cc14:	2300      	movs	r3, #0
   1cc16:	6023      	str	r3, [r4, #0]
   1cc18:	6062      	str	r2, [r4, #4]
   1cc1a:	bd10      	pop	{r4, pc}
   1cc1c:	4b03      	ldr	r3, [pc, #12]	; (1cc2c <mutex_free+0x2c>)
   1cc1e:	4804      	ldr	r0, [pc, #16]	; (1cc30 <mutex_free+0x30>)
   1cc20:	685b      	ldr	r3, [r3, #4]
   1cc22:	4798      	blx	r3
   1cc24:	e7ef      	b.n	1cc06 <mutex_free+0x6>
   1cc26:	bf00      	nop
   1cc28:	a95c5f2c 	.word	0xa95c5f2c
   1cc2c:	20000698 	.word	0x20000698
   1cc30:	000254c4 	.word	0x000254c4

0001cc34 <mutex_lock>:
   1cc34:	b1c8      	cbz	r0, 1cc6a <mutex_lock+0x36>
   1cc36:	6843      	ldr	r3, [r0, #4]
   1cc38:	4a0d      	ldr	r2, [pc, #52]	; (1cc70 <mutex_lock+0x3c>)
   1cc3a:	4293      	cmp	r3, r2
   1cc3c:	d013      	beq.n	1cc66 <mutex_lock+0x32>
   1cc3e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1cc42:	d00e      	beq.n	1cc62 <mutex_lock+0x2e>
   1cc44:	2301      	movs	r3, #1
   1cc46:	e850 2f00 	ldrex	r2, [r0]
   1cc4a:	4619      	mov	r1, r3
   1cc4c:	e840 1c00 	strex	ip, r1, [r0]
   1cc50:	f09c 0f00 	teq	ip, #0
   1cc54:	d1f7      	bne.n	1cc46 <mutex_lock+0x12>
   1cc56:	2a01      	cmp	r2, #1
   1cc58:	d0f5      	beq.n	1cc46 <mutex_lock+0x12>
   1cc5a:	f3bf 8f5f 	dmb	sy
   1cc5e:	2000      	movs	r0, #0
   1cc60:	4770      	bx	lr
   1cc62:	4804      	ldr	r0, [pc, #16]	; (1cc74 <mutex_lock+0x40>)
   1cc64:	4770      	bx	lr
   1cc66:	4804      	ldr	r0, [pc, #16]	; (1cc78 <mutex_lock+0x44>)
   1cc68:	4770      	bx	lr
   1cc6a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1cc6e:	4770      	bx	lr
   1cc70:	a95c5f2c 	.word	0xa95c5f2c
   1cc74:	ffff8fe9 	.word	0xffff8fe9
   1cc78:	ffff8fea 	.word	0xffff8fea

0001cc7c <mutex_unlock>:
   1cc7c:	b180      	cbz	r0, 1cca0 <mutex_unlock+0x24>
   1cc7e:	6843      	ldr	r3, [r0, #4]
   1cc80:	4a09      	ldr	r2, [pc, #36]	; (1cca8 <mutex_unlock+0x2c>)
   1cc82:	4293      	cmp	r3, r2
   1cc84:	d00a      	beq.n	1cc9c <mutex_unlock+0x20>
   1cc86:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1cc8a:	d005      	beq.n	1cc98 <mutex_unlock+0x1c>
   1cc8c:	f3bf 8f5f 	dmb	sy
   1cc90:	2300      	movs	r3, #0
   1cc92:	6003      	str	r3, [r0, #0]
   1cc94:	4618      	mov	r0, r3
   1cc96:	4770      	bx	lr
   1cc98:	4804      	ldr	r0, [pc, #16]	; (1ccac <mutex_unlock+0x30>)
   1cc9a:	4770      	bx	lr
   1cc9c:	4804      	ldr	r0, [pc, #16]	; (1ccb0 <mutex_unlock+0x34>)
   1cc9e:	4770      	bx	lr
   1cca0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1cca4:	4770      	bx	lr
   1cca6:	bf00      	nop
   1cca8:	a95c5f2c 	.word	0xa95c5f2c
   1ccac:	ffff8fe9 	.word	0xffff8fe9
   1ccb0:	ffff8fea 	.word	0xffff8fea

0001ccb4 <mutex_init>:
   1ccb4:	b510      	push	{r4, lr}
   1ccb6:	4604      	mov	r4, r0
   1ccb8:	b120      	cbz	r0, 1ccc4 <mutex_init+0x10>
   1ccba:	4b04      	ldr	r3, [pc, #16]	; (1cccc <mutex_init+0x18>)
   1ccbc:	6063      	str	r3, [r4, #4]
   1ccbe:	2200      	movs	r2, #0
   1ccc0:	6022      	str	r2, [r4, #0]
   1ccc2:	bd10      	pop	{r4, pc}
   1ccc4:	4802      	ldr	r0, [pc, #8]	; (1ccd0 <mutex_init+0x1c>)
   1ccc6:	f7ff ff27 	bl	1cb18 <CC_PalAbort>
   1ccca:	e7f6      	b.n	1ccba <mutex_init+0x6>
   1cccc:	3a00003a 	.word	0x3a00003a
   1ccd0:	000254ec 	.word	0x000254ec

0001ccd4 <nrf_cc3xx_platform_set_mutexes>:
   1ccd4:	b570      	push	{r4, r5, r6, lr}
   1ccd6:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ccda:	4c17      	ldr	r4, [pc, #92]	; (1cd38 <nrf_cc3xx_platform_set_mutexes+0x64>)
   1ccdc:	4d17      	ldr	r5, [pc, #92]	; (1cd3c <nrf_cc3xx_platform_set_mutexes+0x68>)
   1ccde:	6063      	str	r3, [r4, #4]
   1cce0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   1cce4:	e9c4 3002 	strd	r3, r0, [r4, #8]
   1cce8:	6022      	str	r2, [r4, #0]
   1ccea:	6848      	ldr	r0, [r1, #4]
   1ccec:	f8d1 c000 	ldr.w	ip, [r1]
   1ccf0:	4b13      	ldr	r3, [pc, #76]	; (1cd40 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   1ccf2:	e9c3 c000 	strd	ip, r0, [r3]
   1ccf6:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   1ccfa:	f8d1 c008 	ldr.w	ip, [r1, #8]
   1ccfe:	f8c3 c008 	str.w	ip, [r3, #8]
   1cd02:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   1cd06:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   1cd0a:	6909      	ldr	r1, [r1, #16]
   1cd0c:	f8c3 c00c 	str.w	ip, [r3, #12]
   1cd10:	6119      	str	r1, [r3, #16]
   1cd12:	d010      	beq.n	1cd36 <nrf_cc3xx_platform_set_mutexes+0x62>
   1cd14:	490b      	ldr	r1, [pc, #44]	; (1cd44 <nrf_cc3xx_platform_set_mutexes+0x70>)
   1cd16:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   1cd1a:	2300      	movs	r3, #0
   1cd1c:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   1cd20:	f505 708a 	add.w	r0, r5, #276	; 0x114
   1cd24:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   1cd28:	4790      	blx	r2
   1cd2a:	6823      	ldr	r3, [r4, #0]
   1cd2c:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1cd30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cd34:	4718      	bx	r3
   1cd36:	bd70      	pop	{r4, r5, r6, pc}
   1cd38:	200006b4 	.word	0x200006b4
   1cd3c:	20002e94 	.word	0x20002e94
   1cd40:	200006a0 	.word	0x200006a0
   1cd44:	a95c5f2c 	.word	0xa95c5f2c

0001cd48 <mbedtls_zeroize_internal>:
   1cd48:	b138      	cbz	r0, 1cd5a <mbedtls_zeroize_internal+0x12>
   1cd4a:	b131      	cbz	r1, 1cd5a <mbedtls_zeroize_internal+0x12>
   1cd4c:	4401      	add	r1, r0
   1cd4e:	2200      	movs	r2, #0
   1cd50:	4603      	mov	r3, r0
   1cd52:	3001      	adds	r0, #1
   1cd54:	4281      	cmp	r1, r0
   1cd56:	701a      	strb	r2, [r3, #0]
   1cd58:	d1fa      	bne.n	1cd50 <mbedtls_zeroize_internal+0x8>
   1cd5a:	4770      	bx	lr

0001cd5c <mbedtls_platform_zeroize>:
   1cd5c:	b138      	cbz	r0, 1cd6e <mbedtls_platform_zeroize+0x12>
   1cd5e:	b131      	cbz	r1, 1cd6e <mbedtls_platform_zeroize+0x12>
   1cd60:	4401      	add	r1, r0
   1cd62:	2200      	movs	r2, #0
   1cd64:	4603      	mov	r3, r0
   1cd66:	3001      	adds	r0, #1
   1cd68:	4288      	cmp	r0, r1
   1cd6a:	701a      	strb	r2, [r3, #0]
   1cd6c:	d1fa      	bne.n	1cd64 <mbedtls_platform_zeroize+0x8>
   1cd6e:	4770      	bx	lr

0001cd70 <block_cipher_df>:
   1cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd74:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1cd78:	b0b5      	sub	sp, #212	; 0xd4
   1cd7a:	f200 80d7 	bhi.w	1cf2c <block_cipher_df+0x1bc>
   1cd7e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 1cf34 <block_cipher_df+0x1c4>
   1cd82:	4614      	mov	r4, r2
   1cd84:	460d      	mov	r5, r1
   1cd86:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1cd8a:	2100      	movs	r1, #0
   1cd8c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   1cd90:	4607      	mov	r7, r0
   1cd92:	4648      	mov	r0, r9
   1cd94:	f003 f8bc 	bl	1ff10 <memset>
   1cd98:	4640      	mov	r0, r8
   1cd9a:	f001 f951 	bl	1e040 <cc_mbedtls_aes_init>
   1cd9e:	2300      	movs	r3, #0
   1cda0:	f8a9 3010 	strh.w	r3, [r9, #16]
   1cda4:	ba63      	rev16	r3, r4
   1cda6:	f109 0618 	add.w	r6, r9, #24
   1cdaa:	f8a9 3012 	strh.w	r3, [r9, #18]
   1cdae:	2320      	movs	r3, #32
   1cdb0:	4629      	mov	r1, r5
   1cdb2:	4622      	mov	r2, r4
   1cdb4:	f889 3017 	strb.w	r3, [r9, #23]
   1cdb8:	4630      	mov	r0, r6
   1cdba:	f003 f89e 	bl	1fefa <memcpy>
   1cdbe:	4b5e      	ldr	r3, [pc, #376]	; (1cf38 <block_cipher_df+0x1c8>)
   1cdc0:	9307      	str	r3, [sp, #28]
   1cdc2:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1cdc6:	2280      	movs	r2, #128	; 0x80
   1cdc8:	9308      	str	r3, [sp, #32]
   1cdca:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1cdce:	9309      	str	r3, [sp, #36]	; 0x24
   1cdd0:	5532      	strb	r2, [r6, r4]
   1cdd2:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1cdd6:	a907      	add	r1, sp, #28
   1cdd8:	4640      	mov	r0, r8
   1cdda:	930a      	str	r3, [sp, #40]	; 0x28
   1cddc:	f001 f946 	bl	1e06c <cc_mbedtls_aes_setkey_enc>
   1cde0:	4682      	mov	sl, r0
   1cde2:	2800      	cmp	r0, #0
   1cde4:	d17f      	bne.n	1cee6 <block_cipher_df+0x176>
   1cde6:	f104 0319 	add.w	r3, r4, #25
   1cdea:	ae0b      	add	r6, sp, #44	; 0x2c
   1cdec:	ac0f      	add	r4, sp, #60	; 0x3c
   1cdee:	9302      	str	r3, [sp, #8]
   1cdf0:	9703      	str	r7, [sp, #12]
   1cdf2:	9601      	str	r6, [sp, #4]
   1cdf4:	9404      	str	r4, [sp, #16]
   1cdf6:	9801      	ldr	r0, [sp, #4]
   1cdf8:	f8df b140 	ldr.w	fp, [pc, #320]	; 1cf3c <block_cipher_df+0x1cc>
   1cdfc:	2210      	movs	r2, #16
   1cdfe:	2100      	movs	r1, #0
   1ce00:	f003 f886 	bl	1ff10 <memset>
   1ce04:	f8dd a008 	ldr.w	sl, [sp, #8]
   1ce08:	9405      	str	r4, [sp, #20]
   1ce0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ce0c:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   1ce10:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   1ce14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ce16:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   1ce1a:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   1ce1e:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   1ce22:	405c      	eors	r4, r3
   1ce24:	9b01      	ldr	r3, [sp, #4]
   1ce26:	407e      	eors	r6, r7
   1ce28:	4055      	eors	r5, r2
   1ce2a:	ea81 0700 	eor.w	r7, r1, r0
   1ce2e:	461a      	mov	r2, r3
   1ce30:	2101      	movs	r1, #1
   1ce32:	4640      	mov	r0, r8
   1ce34:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   1ce38:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   1ce3c:	f001 f930 	bl	1e0a0 <cc_mbedtls_aes_crypt_ecb>
   1ce40:	f1ba 0f10 	cmp.w	sl, #16
   1ce44:	bf94      	ite	ls
   1ce46:	ebaa 0a0a 	subls.w	sl, sl, sl
   1ce4a:	f1aa 0a10 	subhi.w	sl, sl, #16
   1ce4e:	f10b 0b10 	add.w	fp, fp, #16
   1ce52:	2800      	cmp	r0, #0
   1ce54:	d165      	bne.n	1cf22 <block_cipher_df+0x1b2>
   1ce56:	f1ba 0f00 	cmp.w	sl, #0
   1ce5a:	d1d6      	bne.n	1ce0a <block_cipher_df+0x9a>
   1ce5c:	9c05      	ldr	r4, [sp, #20]
   1ce5e:	9901      	ldr	r1, [sp, #4]
   1ce60:	4620      	mov	r0, r4
   1ce62:	2210      	movs	r2, #16
   1ce64:	f003 f849 	bl	1fefa <memcpy>
   1ce68:	f899 3003 	ldrb.w	r3, [r9, #3]
   1ce6c:	3410      	adds	r4, #16
   1ce6e:	3301      	adds	r3, #1
   1ce70:	45a0      	cmp	r8, r4
   1ce72:	f889 3003 	strb.w	r3, [r9, #3]
   1ce76:	d1be      	bne.n	1cdf6 <block_cipher_df+0x86>
   1ce78:	9c04      	ldr	r4, [sp, #16]
   1ce7a:	9f03      	ldr	r7, [sp, #12]
   1ce7c:	9e01      	ldr	r6, [sp, #4]
   1ce7e:	2280      	movs	r2, #128	; 0x80
   1ce80:	4621      	mov	r1, r4
   1ce82:	4640      	mov	r0, r8
   1ce84:	f001 f8f2 	bl	1e06c <cc_mbedtls_aes_setkey_enc>
   1ce88:	4682      	mov	sl, r0
   1ce8a:	bb70      	cbnz	r0, 1ceea <block_cipher_df+0x17a>
   1ce8c:	f107 0920 	add.w	r9, r7, #32
   1ce90:	463d      	mov	r5, r7
   1ce92:	ab13      	add	r3, sp, #76	; 0x4c
   1ce94:	461a      	mov	r2, r3
   1ce96:	2101      	movs	r1, #1
   1ce98:	4640      	mov	r0, r8
   1ce9a:	f001 f901 	bl	1e0a0 <cc_mbedtls_aes_crypt_ecb>
   1ce9e:	2210      	movs	r2, #16
   1cea0:	4682      	mov	sl, r0
   1cea2:	a913      	add	r1, sp, #76	; 0x4c
   1cea4:	4628      	mov	r0, r5
   1cea6:	4415      	add	r5, r2
   1cea8:	f1ba 0f00 	cmp.w	sl, #0
   1ceac:	d11d      	bne.n	1ceea <block_cipher_df+0x17a>
   1ceae:	f003 f824 	bl	1fefa <memcpy>
   1ceb2:	454d      	cmp	r5, r9
   1ceb4:	d1ed      	bne.n	1ce92 <block_cipher_df+0x122>
   1ceb6:	4640      	mov	r0, r8
   1ceb8:	f001 f8d2 	bl	1e060 <cc_mbedtls_aes_free>
   1cebc:	481d      	ldr	r0, [pc, #116]	; (1cf34 <block_cipher_df+0x1c4>)
   1cebe:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1cec2:	f7ff ff4b 	bl	1cd5c <mbedtls_platform_zeroize>
   1cec6:	4620      	mov	r0, r4
   1cec8:	2120      	movs	r1, #32
   1ceca:	f7ff ff47 	bl	1cd5c <mbedtls_platform_zeroize>
   1cece:	a807      	add	r0, sp, #28
   1ced0:	2110      	movs	r1, #16
   1ced2:	f7ff ff43 	bl	1cd5c <mbedtls_platform_zeroize>
   1ced6:	4630      	mov	r0, r6
   1ced8:	2110      	movs	r1, #16
   1ceda:	f7ff ff3f 	bl	1cd5c <mbedtls_platform_zeroize>
   1cede:	4650      	mov	r0, sl
   1cee0:	b035      	add	sp, #212	; 0xd4
   1cee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cee6:	ac0f      	add	r4, sp, #60	; 0x3c
   1cee8:	ae0b      	add	r6, sp, #44	; 0x2c
   1ceea:	4640      	mov	r0, r8
   1ceec:	f001 f8b8 	bl	1e060 <cc_mbedtls_aes_free>
   1cef0:	4810      	ldr	r0, [pc, #64]	; (1cf34 <block_cipher_df+0x1c4>)
   1cef2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1cef6:	f7ff ff31 	bl	1cd5c <mbedtls_platform_zeroize>
   1cefa:	4620      	mov	r0, r4
   1cefc:	2120      	movs	r1, #32
   1cefe:	f7ff ff2d 	bl	1cd5c <mbedtls_platform_zeroize>
   1cf02:	a807      	add	r0, sp, #28
   1cf04:	2110      	movs	r1, #16
   1cf06:	f7ff ff29 	bl	1cd5c <mbedtls_platform_zeroize>
   1cf0a:	2110      	movs	r1, #16
   1cf0c:	4630      	mov	r0, r6
   1cf0e:	f7ff ff25 	bl	1cd5c <mbedtls_platform_zeroize>
   1cf12:	2120      	movs	r1, #32
   1cf14:	4638      	mov	r0, r7
   1cf16:	f7ff ff21 	bl	1cd5c <mbedtls_platform_zeroize>
   1cf1a:	4650      	mov	r0, sl
   1cf1c:	b035      	add	sp, #212	; 0xd4
   1cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf22:	9f03      	ldr	r7, [sp, #12]
   1cf24:	9e01      	ldr	r6, [sp, #4]
   1cf26:	9c04      	ldr	r4, [sp, #16]
   1cf28:	4682      	mov	sl, r0
   1cf2a:	e7de      	b.n	1ceea <block_cipher_df+0x17a>
   1cf2c:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   1cf30:	e7f3      	b.n	1cf1a <block_cipher_df+0x1aa>
   1cf32:	bf00      	nop
   1cf34:	20003064 	.word	0x20003064
   1cf38:	03020100 	.word	0x03020100
   1cf3c:	20003074 	.word	0x20003074

0001cf40 <ctr_drbg_update_internal>:
   1cf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf44:	b088      	sub	sp, #32
   1cf46:	4604      	mov	r4, r0
   1cf48:	460d      	mov	r5, r1
   1cf4a:	2220      	movs	r2, #32
   1cf4c:	2100      	movs	r1, #0
   1cf4e:	4668      	mov	r0, sp
   1cf50:	f002 ffde 	bl	1ff10 <memset>
   1cf54:	f104 0620 	add.w	r6, r4, #32
   1cf58:	466f      	mov	r7, sp
   1cf5a:	7be2      	ldrb	r2, [r4, #15]
   1cf5c:	3201      	adds	r2, #1
   1cf5e:	b2d2      	uxtb	r2, r2
   1cf60:	73e2      	strb	r2, [r4, #15]
   1cf62:	2a00      	cmp	r2, #0
   1cf64:	d14d      	bne.n	1d002 <ctr_drbg_update_internal+0xc2>
   1cf66:	7ba2      	ldrb	r2, [r4, #14]
   1cf68:	3201      	adds	r2, #1
   1cf6a:	b2d2      	uxtb	r2, r2
   1cf6c:	73a2      	strb	r2, [r4, #14]
   1cf6e:	2a00      	cmp	r2, #0
   1cf70:	d147      	bne.n	1d002 <ctr_drbg_update_internal+0xc2>
   1cf72:	7b63      	ldrb	r3, [r4, #13]
   1cf74:	3301      	adds	r3, #1
   1cf76:	b2db      	uxtb	r3, r3
   1cf78:	7363      	strb	r3, [r4, #13]
   1cf7a:	2b00      	cmp	r3, #0
   1cf7c:	d141      	bne.n	1d002 <ctr_drbg_update_internal+0xc2>
   1cf7e:	7b23      	ldrb	r3, [r4, #12]
   1cf80:	3301      	adds	r3, #1
   1cf82:	b2db      	uxtb	r3, r3
   1cf84:	7323      	strb	r3, [r4, #12]
   1cf86:	2b00      	cmp	r3, #0
   1cf88:	d13b      	bne.n	1d002 <ctr_drbg_update_internal+0xc2>
   1cf8a:	7ae3      	ldrb	r3, [r4, #11]
   1cf8c:	3301      	adds	r3, #1
   1cf8e:	b2db      	uxtb	r3, r3
   1cf90:	72e3      	strb	r3, [r4, #11]
   1cf92:	2b00      	cmp	r3, #0
   1cf94:	d135      	bne.n	1d002 <ctr_drbg_update_internal+0xc2>
   1cf96:	7aa3      	ldrb	r3, [r4, #10]
   1cf98:	3301      	adds	r3, #1
   1cf9a:	b2db      	uxtb	r3, r3
   1cf9c:	72a3      	strb	r3, [r4, #10]
   1cf9e:	2b00      	cmp	r3, #0
   1cfa0:	d12f      	bne.n	1d002 <ctr_drbg_update_internal+0xc2>
   1cfa2:	7a63      	ldrb	r3, [r4, #9]
   1cfa4:	3301      	adds	r3, #1
   1cfa6:	b2db      	uxtb	r3, r3
   1cfa8:	7263      	strb	r3, [r4, #9]
   1cfaa:	bb53      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cfac:	7a23      	ldrb	r3, [r4, #8]
   1cfae:	3301      	adds	r3, #1
   1cfb0:	b2db      	uxtb	r3, r3
   1cfb2:	7223      	strb	r3, [r4, #8]
   1cfb4:	bb2b      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cfb6:	79e3      	ldrb	r3, [r4, #7]
   1cfb8:	3301      	adds	r3, #1
   1cfba:	b2db      	uxtb	r3, r3
   1cfbc:	71e3      	strb	r3, [r4, #7]
   1cfbe:	bb03      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cfc0:	79a3      	ldrb	r3, [r4, #6]
   1cfc2:	3301      	adds	r3, #1
   1cfc4:	b2db      	uxtb	r3, r3
   1cfc6:	71a3      	strb	r3, [r4, #6]
   1cfc8:	b9db      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cfca:	7963      	ldrb	r3, [r4, #5]
   1cfcc:	3301      	adds	r3, #1
   1cfce:	b2db      	uxtb	r3, r3
   1cfd0:	7163      	strb	r3, [r4, #5]
   1cfd2:	b9b3      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cfd4:	7923      	ldrb	r3, [r4, #4]
   1cfd6:	3301      	adds	r3, #1
   1cfd8:	b2db      	uxtb	r3, r3
   1cfda:	7123      	strb	r3, [r4, #4]
   1cfdc:	b98b      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cfde:	78e3      	ldrb	r3, [r4, #3]
   1cfe0:	3301      	adds	r3, #1
   1cfe2:	b2db      	uxtb	r3, r3
   1cfe4:	70e3      	strb	r3, [r4, #3]
   1cfe6:	b963      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cfe8:	78a3      	ldrb	r3, [r4, #2]
   1cfea:	3301      	adds	r3, #1
   1cfec:	b2db      	uxtb	r3, r3
   1cfee:	70a3      	strb	r3, [r4, #2]
   1cff0:	b93b      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cff2:	7863      	ldrb	r3, [r4, #1]
   1cff4:	3301      	adds	r3, #1
   1cff6:	b2db      	uxtb	r3, r3
   1cff8:	7063      	strb	r3, [r4, #1]
   1cffa:	b913      	cbnz	r3, 1d002 <ctr_drbg_update_internal+0xc2>
   1cffc:	7823      	ldrb	r3, [r4, #0]
   1cffe:	3301      	adds	r3, #1
   1d000:	7023      	strb	r3, [r4, #0]
   1d002:	463b      	mov	r3, r7
   1d004:	4622      	mov	r2, r4
   1d006:	2101      	movs	r1, #1
   1d008:	4630      	mov	r0, r6
   1d00a:	f001 f849 	bl	1e0a0 <cc_mbedtls_aes_crypt_ecb>
   1d00e:	4680      	mov	r8, r0
   1d010:	bb50      	cbnz	r0, 1d068 <ctr_drbg_update_internal+0x128>
   1d012:	3710      	adds	r7, #16
   1d014:	ab08      	add	r3, sp, #32
   1d016:	429f      	cmp	r7, r3
   1d018:	d19f      	bne.n	1cf5a <ctr_drbg_update_internal+0x1a>
   1d01a:	9a02      	ldr	r2, [sp, #8]
   1d01c:	68ab      	ldr	r3, [r5, #8]
   1d01e:	9f03      	ldr	r7, [sp, #12]
   1d020:	9907      	ldr	r1, [sp, #28]
   1d022:	4053      	eors	r3, r2
   1d024:	9302      	str	r3, [sp, #8]
   1d026:	4630      	mov	r0, r6
   1d028:	68ee      	ldr	r6, [r5, #12]
   1d02a:	9b00      	ldr	r3, [sp, #0]
   1d02c:	407e      	eors	r6, r7
   1d02e:	9603      	str	r6, [sp, #12]
   1d030:	9f04      	ldr	r7, [sp, #16]
   1d032:	692e      	ldr	r6, [r5, #16]
   1d034:	407e      	eors	r6, r7
   1d036:	9604      	str	r6, [sp, #16]
   1d038:	696e      	ldr	r6, [r5, #20]
   1d03a:	9f05      	ldr	r7, [sp, #20]
   1d03c:	407e      	eors	r6, r7
   1d03e:	9605      	str	r6, [sp, #20]
   1d040:	9f06      	ldr	r7, [sp, #24]
   1d042:	69ae      	ldr	r6, [r5, #24]
   1d044:	407e      	eors	r6, r7
   1d046:	9606      	str	r6, [sp, #24]
   1d048:	69ee      	ldr	r6, [r5, #28]
   1d04a:	4071      	eors	r1, r6
   1d04c:	9107      	str	r1, [sp, #28]
   1d04e:	6829      	ldr	r1, [r5, #0]
   1d050:	404b      	eors	r3, r1
   1d052:	9300      	str	r3, [sp, #0]
   1d054:	9901      	ldr	r1, [sp, #4]
   1d056:	686b      	ldr	r3, [r5, #4]
   1d058:	2280      	movs	r2, #128	; 0x80
   1d05a:	404b      	eors	r3, r1
   1d05c:	4669      	mov	r1, sp
   1d05e:	9301      	str	r3, [sp, #4]
   1d060:	f001 f804 	bl	1e06c <cc_mbedtls_aes_setkey_enc>
   1d064:	4680      	mov	r8, r0
   1d066:	b138      	cbz	r0, 1d078 <ctr_drbg_update_internal+0x138>
   1d068:	4668      	mov	r0, sp
   1d06a:	2120      	movs	r1, #32
   1d06c:	f7ff fe76 	bl	1cd5c <mbedtls_platform_zeroize>
   1d070:	4640      	mov	r0, r8
   1d072:	b008      	add	sp, #32
   1d074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d078:	2210      	movs	r2, #16
   1d07a:	eb0d 0102 	add.w	r1, sp, r2
   1d07e:	4620      	mov	r0, r4
   1d080:	f002 ff3b 	bl	1fefa <memcpy>
   1d084:	e7f0      	b.n	1d068 <ctr_drbg_update_internal+0x128>
   1d086:	bf00      	nop

0001d088 <mbedtls_ctr_drbg_reseed_internal>:
   1d088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d08c:	4604      	mov	r4, r0
   1d08e:	6980      	ldr	r0, [r0, #24]
   1d090:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1d094:	d852      	bhi.n	1d13c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d096:	461d      	mov	r5, r3
   1d098:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1d09c:	42ab      	cmp	r3, r5
   1d09e:	d34d      	bcc.n	1d13c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d0a0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1d0a4:	1a1b      	subs	r3, r3, r0
   1d0a6:	4293      	cmp	r3, r2
   1d0a8:	4616      	mov	r6, r2
   1d0aa:	d347      	bcc.n	1d13c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d0ac:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1d148 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1d0b0:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1d0b4:	460f      	mov	r7, r1
   1d0b6:	4648      	mov	r0, r9
   1d0b8:	2100      	movs	r1, #0
   1d0ba:	f002 ff29 	bl	1ff10 <memset>
   1d0be:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1d0c2:	69a2      	ldr	r2, [r4, #24]
   1d0c4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1d0c8:	4649      	mov	r1, r9
   1d0ca:	4798      	blx	r3
   1d0cc:	2800      	cmp	r0, #0
   1d0ce:	d138      	bne.n	1d142 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1d0d0:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1d0d4:	b13d      	cbz	r5, 1d0e6 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1d0d6:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1d0da:	462a      	mov	r2, r5
   1d0dc:	eb09 0108 	add.w	r1, r9, r8
   1d0e0:	4798      	blx	r3
   1d0e2:	bb70      	cbnz	r0, 1d142 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1d0e4:	44a8      	add	r8, r5
   1d0e6:	b107      	cbz	r7, 1d0ea <mbedtls_ctr_drbg_reseed_internal+0x62>
   1d0e8:	b9c6      	cbnz	r6, 1d11c <mbedtls_ctr_drbg_reseed_internal+0x94>
   1d0ea:	4917      	ldr	r1, [pc, #92]	; (1d148 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d0ec:	4642      	mov	r2, r8
   1d0ee:	4608      	mov	r0, r1
   1d0f0:	f7ff fe3e 	bl	1cd70 <block_cipher_df>
   1d0f4:	4605      	mov	r5, r0
   1d0f6:	b138      	cbz	r0, 1d108 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1d0f8:	4813      	ldr	r0, [pc, #76]	; (1d148 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d0fa:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1d0fe:	f7ff fe2d 	bl	1cd5c <mbedtls_platform_zeroize>
   1d102:	4628      	mov	r0, r5
   1d104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d108:	490f      	ldr	r1, [pc, #60]	; (1d148 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d10a:	4620      	mov	r0, r4
   1d10c:	f7ff ff18 	bl	1cf40 <ctr_drbg_update_internal>
   1d110:	4605      	mov	r5, r0
   1d112:	2800      	cmp	r0, #0
   1d114:	d1f0      	bne.n	1d0f8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d116:	2301      	movs	r3, #1
   1d118:	6123      	str	r3, [r4, #16]
   1d11a:	e7ed      	b.n	1d0f8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d11c:	eb09 0008 	add.w	r0, r9, r8
   1d120:	4639      	mov	r1, r7
   1d122:	4632      	mov	r2, r6
   1d124:	f002 fee9 	bl	1fefa <memcpy>
   1d128:	4907      	ldr	r1, [pc, #28]	; (1d148 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d12a:	44b0      	add	r8, r6
   1d12c:	4642      	mov	r2, r8
   1d12e:	4608      	mov	r0, r1
   1d130:	f7ff fe1e 	bl	1cd70 <block_cipher_df>
   1d134:	4605      	mov	r5, r0
   1d136:	2800      	cmp	r0, #0
   1d138:	d1de      	bne.n	1d0f8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d13a:	e7e5      	b.n	1d108 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1d13c:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1d140:	e7df      	b.n	1d102 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1d142:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1d146:	e7dc      	b.n	1d102 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1d148:	20003204 	.word	0x20003204

0001d14c <cc_mbedtls_ctr_drbg_init>:
   1d14c:	b510      	push	{r4, lr}
   1d14e:	22a4      	movs	r2, #164	; 0xa4
   1d150:	4604      	mov	r4, r0
   1d152:	2100      	movs	r1, #0
   1d154:	f002 fedc 	bl	1ff10 <memset>
   1d158:	4b06      	ldr	r3, [pc, #24]	; (1d174 <cc_mbedtls_ctr_drbg_init+0x28>)
   1d15a:	f04f 31ff 	mov.w	r1, #4294967295
   1d15e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1d162:	6121      	str	r1, [r4, #16]
   1d164:	61e2      	str	r2, [r4, #28]
   1d166:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1d16a:	681b      	ldr	r3, [r3, #0]
   1d16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d170:	4718      	bx	r3
   1d172:	bf00      	nop
   1d174:	20000704 	.word	0x20000704

0001d178 <cc_mbedtls_ctr_drbg_seed>:
   1d178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d17c:	b085      	sub	sp, #20
   1d17e:	4605      	mov	r5, r0
   1d180:	460f      	mov	r7, r1
   1d182:	4616      	mov	r6, r2
   1d184:	2100      	movs	r1, #0
   1d186:	2210      	movs	r2, #16
   1d188:	4668      	mov	r0, sp
   1d18a:	4699      	mov	r9, r3
   1d18c:	f002 fec0 	bl	1ff10 <memset>
   1d190:	4b1d      	ldr	r3, [pc, #116]	; (1d208 <cc_mbedtls_ctr_drbg_seed+0x90>)
   1d192:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1d196:	681b      	ldr	r3, [r3, #0]
   1d198:	4640      	mov	r0, r8
   1d19a:	4798      	blx	r3
   1d19c:	b120      	cbz	r0, 1d1a8 <cc_mbedtls_ctr_drbg_seed+0x30>
   1d19e:	4604      	mov	r4, r0
   1d1a0:	4620      	mov	r0, r4
   1d1a2:	b005      	add	sp, #20
   1d1a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d1a8:	f105 0420 	add.w	r4, r5, #32
   1d1ac:	4620      	mov	r0, r4
   1d1ae:	f000 ff47 	bl	1e040 <cc_mbedtls_aes_init>
   1d1b2:	69aa      	ldr	r2, [r5, #24]
   1d1b4:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1d1b8:	692e      	ldr	r6, [r5, #16]
   1d1ba:	b9e2      	cbnz	r2, 1d1f6 <cc_mbedtls_ctr_drbg_seed+0x7e>
   1d1bc:	2220      	movs	r2, #32
   1d1be:	2e00      	cmp	r6, #0
   1d1c0:	61aa      	str	r2, [r5, #24]
   1d1c2:	db1f      	blt.n	1d204 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1d1c4:	4620      	mov	r0, r4
   1d1c6:	4669      	mov	r1, sp
   1d1c8:	2280      	movs	r2, #128	; 0x80
   1d1ca:	f000 ff4f 	bl	1e06c <cc_mbedtls_aes_setkey_enc>
   1d1ce:	4604      	mov	r4, r0
   1d1d0:	b930      	cbnz	r0, 1d1e0 <cc_mbedtls_ctr_drbg_seed+0x68>
   1d1d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d1d4:	4633      	mov	r3, r6
   1d1d6:	4649      	mov	r1, r9
   1d1d8:	4628      	mov	r0, r5
   1d1da:	f7ff ff55 	bl	1d088 <mbedtls_ctr_drbg_reseed_internal>
   1d1de:	4604      	mov	r4, r0
   1d1e0:	4b0a      	ldr	r3, [pc, #40]	; (1d20c <cc_mbedtls_ctr_drbg_seed+0x94>)
   1d1e2:	4640      	mov	r0, r8
   1d1e4:	681b      	ldr	r3, [r3, #0]
   1d1e6:	4798      	blx	r3
   1d1e8:	2800      	cmp	r0, #0
   1d1ea:	bf18      	it	ne
   1d1ec:	4604      	movne	r4, r0
   1d1ee:	4620      	mov	r0, r4
   1d1f0:	b005      	add	sp, #20
   1d1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d1f6:	2e00      	cmp	r6, #0
   1d1f8:	dae4      	bge.n	1d1c4 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d1fa:	2a17      	cmp	r2, #23
   1d1fc:	d802      	bhi.n	1d204 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1d1fe:	3201      	adds	r2, #1
   1d200:	0856      	lsrs	r6, r2, #1
   1d202:	e7df      	b.n	1d1c4 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d204:	2600      	movs	r6, #0
   1d206:	e7dd      	b.n	1d1c4 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d208:	20000700 	.word	0x20000700
   1d20c:	200006fc 	.word	0x200006fc

0001d210 <cc_mbedtls_ctr_drbg_random_with_add>:
   1d210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d214:	b08d      	sub	sp, #52	; 0x34
   1d216:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1d21a:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1d21c:	f200 80e3 	bhi.w	1d3e6 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   1d220:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1d224:	f200 80dc 	bhi.w	1d3e0 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   1d228:	4604      	mov	r4, r0
   1d22a:	4615      	mov	r5, r2
   1d22c:	460e      	mov	r6, r1
   1d22e:	2220      	movs	r2, #32
   1d230:	2100      	movs	r1, #0
   1d232:	a804      	add	r0, sp, #16
   1d234:	4698      	mov	r8, r3
   1d236:	f002 fe6b 	bl	1ff10 <memset>
   1d23a:	4b6c      	ldr	r3, [pc, #432]	; (1d3ec <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   1d23c:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1d240:	681b      	ldr	r3, [r3, #0]
   1d242:	4648      	mov	r0, r9
   1d244:	4798      	blx	r3
   1d246:	4683      	mov	fp, r0
   1d248:	2800      	cmp	r0, #0
   1d24a:	f040 8092 	bne.w	1d372 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d24e:	6922      	ldr	r2, [r4, #16]
   1d250:	69e3      	ldr	r3, [r4, #28]
   1d252:	429a      	cmp	r2, r3
   1d254:	f300 8091 	bgt.w	1d37a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1d258:	6963      	ldr	r3, [r4, #20]
   1d25a:	2b00      	cmp	r3, #0
   1d25c:	f040 808d 	bne.w	1d37a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1d260:	2f00      	cmp	r7, #0
   1d262:	f040 80a9 	bne.w	1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1d266:	f8df a188 	ldr.w	sl, [pc, #392]	; 1d3f0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1d26a:	466f      	mov	r7, sp
   1d26c:	2d00      	cmp	r5, #0
   1d26e:	f000 8098 	beq.w	1d3a2 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1d272:	f104 0820 	add.w	r8, r4, #32
   1d276:	466f      	mov	r7, sp
   1d278:	e00e      	b.n	1d298 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1d27a:	2d10      	cmp	r5, #16
   1d27c:	46ab      	mov	fp, r5
   1d27e:	bf28      	it	cs
   1d280:	f04f 0b10 	movcs.w	fp, #16
   1d284:	4630      	mov	r0, r6
   1d286:	465a      	mov	r2, fp
   1d288:	4639      	mov	r1, r7
   1d28a:	f002 fe36 	bl	1fefa <memcpy>
   1d28e:	ebb5 050b 	subs.w	r5, r5, fp
   1d292:	445e      	add	r6, fp
   1d294:	f000 8085 	beq.w	1d3a2 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1d298:	7be3      	ldrb	r3, [r4, #15]
   1d29a:	3301      	adds	r3, #1
   1d29c:	b2db      	uxtb	r3, r3
   1d29e:	73e3      	strb	r3, [r4, #15]
   1d2a0:	2b00      	cmp	r3, #0
   1d2a2:	d14d      	bne.n	1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2a4:	7ba3      	ldrb	r3, [r4, #14]
   1d2a6:	3301      	adds	r3, #1
   1d2a8:	b2db      	uxtb	r3, r3
   1d2aa:	73a3      	strb	r3, [r4, #14]
   1d2ac:	2b00      	cmp	r3, #0
   1d2ae:	d147      	bne.n	1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2b0:	7b63      	ldrb	r3, [r4, #13]
   1d2b2:	3301      	adds	r3, #1
   1d2b4:	b2db      	uxtb	r3, r3
   1d2b6:	7363      	strb	r3, [r4, #13]
   1d2b8:	2b00      	cmp	r3, #0
   1d2ba:	d141      	bne.n	1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2bc:	7b23      	ldrb	r3, [r4, #12]
   1d2be:	3301      	adds	r3, #1
   1d2c0:	b2db      	uxtb	r3, r3
   1d2c2:	7323      	strb	r3, [r4, #12]
   1d2c4:	2b00      	cmp	r3, #0
   1d2c6:	d13b      	bne.n	1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2c8:	7ae3      	ldrb	r3, [r4, #11]
   1d2ca:	3301      	adds	r3, #1
   1d2cc:	b2db      	uxtb	r3, r3
   1d2ce:	72e3      	strb	r3, [r4, #11]
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	d135      	bne.n	1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2d4:	7aa3      	ldrb	r3, [r4, #10]
   1d2d6:	3301      	adds	r3, #1
   1d2d8:	b2db      	uxtb	r3, r3
   1d2da:	72a3      	strb	r3, [r4, #10]
   1d2dc:	2b00      	cmp	r3, #0
   1d2de:	d12f      	bne.n	1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2e0:	7a63      	ldrb	r3, [r4, #9]
   1d2e2:	3301      	adds	r3, #1
   1d2e4:	b2db      	uxtb	r3, r3
   1d2e6:	7263      	strb	r3, [r4, #9]
   1d2e8:	bb53      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2ea:	7a23      	ldrb	r3, [r4, #8]
   1d2ec:	3301      	adds	r3, #1
   1d2ee:	b2db      	uxtb	r3, r3
   1d2f0:	7223      	strb	r3, [r4, #8]
   1d2f2:	bb2b      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2f4:	79e3      	ldrb	r3, [r4, #7]
   1d2f6:	3301      	adds	r3, #1
   1d2f8:	b2db      	uxtb	r3, r3
   1d2fa:	71e3      	strb	r3, [r4, #7]
   1d2fc:	bb03      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d2fe:	79a3      	ldrb	r3, [r4, #6]
   1d300:	3301      	adds	r3, #1
   1d302:	b2db      	uxtb	r3, r3
   1d304:	71a3      	strb	r3, [r4, #6]
   1d306:	b9db      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d308:	7963      	ldrb	r3, [r4, #5]
   1d30a:	3301      	adds	r3, #1
   1d30c:	b2db      	uxtb	r3, r3
   1d30e:	7163      	strb	r3, [r4, #5]
   1d310:	b9b3      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d312:	7923      	ldrb	r3, [r4, #4]
   1d314:	3301      	adds	r3, #1
   1d316:	b2db      	uxtb	r3, r3
   1d318:	7123      	strb	r3, [r4, #4]
   1d31a:	b98b      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d31c:	78e3      	ldrb	r3, [r4, #3]
   1d31e:	3301      	adds	r3, #1
   1d320:	b2db      	uxtb	r3, r3
   1d322:	70e3      	strb	r3, [r4, #3]
   1d324:	b963      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d326:	78a3      	ldrb	r3, [r4, #2]
   1d328:	3301      	adds	r3, #1
   1d32a:	b2db      	uxtb	r3, r3
   1d32c:	70a3      	strb	r3, [r4, #2]
   1d32e:	b93b      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d330:	7863      	ldrb	r3, [r4, #1]
   1d332:	3301      	adds	r3, #1
   1d334:	b2db      	uxtb	r3, r3
   1d336:	7063      	strb	r3, [r4, #1]
   1d338:	b913      	cbnz	r3, 1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d33a:	7823      	ldrb	r3, [r4, #0]
   1d33c:	3301      	adds	r3, #1
   1d33e:	7023      	strb	r3, [r4, #0]
   1d340:	463b      	mov	r3, r7
   1d342:	4622      	mov	r2, r4
   1d344:	2101      	movs	r1, #1
   1d346:	4640      	mov	r0, r8
   1d348:	f000 feaa 	bl	1e0a0 <cc_mbedtls_aes_crypt_ecb>
   1d34c:	4683      	mov	fp, r0
   1d34e:	2800      	cmp	r0, #0
   1d350:	d093      	beq.n	1d27a <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1d352:	f8da 3000 	ldr.w	r3, [sl]
   1d356:	4648      	mov	r0, r9
   1d358:	4798      	blx	r3
   1d35a:	2120      	movs	r1, #32
   1d35c:	4603      	mov	r3, r0
   1d35e:	a804      	add	r0, sp, #16
   1d360:	2b00      	cmp	r3, #0
   1d362:	bf18      	it	ne
   1d364:	469b      	movne	fp, r3
   1d366:	f7ff fcf9 	bl	1cd5c <mbedtls_platform_zeroize>
   1d36a:	2110      	movs	r1, #16
   1d36c:	4638      	mov	r0, r7
   1d36e:	f7ff fcf5 	bl	1cd5c <mbedtls_platform_zeroize>
   1d372:	4658      	mov	r0, fp
   1d374:	b00d      	add	sp, #52	; 0x34
   1d376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d37a:	463a      	mov	r2, r7
   1d37c:	4641      	mov	r1, r8
   1d37e:	2300      	movs	r3, #0
   1d380:	4620      	mov	r0, r4
   1d382:	f7ff fe81 	bl	1d088 <mbedtls_ctr_drbg_reseed_internal>
   1d386:	f8df a068 	ldr.w	sl, [pc, #104]	; 1d3f0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1d38a:	2800      	cmp	r0, #0
   1d38c:	f43f af6d 	beq.w	1d26a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1d390:	f8da 3000 	ldr.w	r3, [sl]
   1d394:	4648      	mov	r0, r9
   1d396:	4798      	blx	r3
   1d398:	4683      	mov	fp, r0
   1d39a:	2800      	cmp	r0, #0
   1d39c:	f43f af65 	beq.w	1d26a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1d3a0:	e7e7      	b.n	1d372 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d3a2:	a904      	add	r1, sp, #16
   1d3a4:	4620      	mov	r0, r4
   1d3a6:	f7ff fdcb 	bl	1cf40 <ctr_drbg_update_internal>
   1d3aa:	4683      	mov	fp, r0
   1d3ac:	2800      	cmp	r0, #0
   1d3ae:	d1d0      	bne.n	1d352 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d3b0:	6923      	ldr	r3, [r4, #16]
   1d3b2:	3301      	adds	r3, #1
   1d3b4:	6123      	str	r3, [r4, #16]
   1d3b6:	e7cc      	b.n	1d352 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d3b8:	463a      	mov	r2, r7
   1d3ba:	4641      	mov	r1, r8
   1d3bc:	a804      	add	r0, sp, #16
   1d3be:	f7ff fcd7 	bl	1cd70 <block_cipher_df>
   1d3c2:	4683      	mov	fp, r0
   1d3c4:	b118      	cbz	r0, 1d3ce <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1d3c6:	f8df a028 	ldr.w	sl, [pc, #40]	; 1d3f0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1d3ca:	466f      	mov	r7, sp
   1d3cc:	e7c1      	b.n	1d352 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d3ce:	a904      	add	r1, sp, #16
   1d3d0:	4620      	mov	r0, r4
   1d3d2:	f7ff fdb5 	bl	1cf40 <ctr_drbg_update_internal>
   1d3d6:	4683      	mov	fp, r0
   1d3d8:	2800      	cmp	r0, #0
   1d3da:	f43f af44 	beq.w	1d266 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1d3de:	e7f2      	b.n	1d3c6 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1d3e0:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1d3e4:	e7c5      	b.n	1d372 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d3e6:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1d3ea:	e7c2      	b.n	1d372 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d3ec:	20000700 	.word	0x20000700
   1d3f0:	200006fc 	.word	0x200006fc

0001d3f4 <entropy_update>:
   1d3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d3f8:	2b20      	cmp	r3, #32
   1d3fa:	b08b      	sub	sp, #44	; 0x2c
   1d3fc:	461d      	mov	r5, r3
   1d3fe:	4606      	mov	r6, r0
   1d400:	4688      	mov	r8, r1
   1d402:	4691      	mov	r9, r2
   1d404:	d826      	bhi.n	1d454 <entropy_update+0x60>
   1d406:	b2db      	uxtb	r3, r3
   1d408:	af02      	add	r7, sp, #8
   1d40a:	f88d 8004 	strb.w	r8, [sp, #4]
   1d40e:	46b0      	mov	r8, r6
   1d410:	f88d 3005 	strb.w	r3, [sp, #5]
   1d414:	f858 1b04 	ldr.w	r1, [r8], #4
   1d418:	b921      	cbnz	r1, 1d424 <entropy_update+0x30>
   1d41a:	4640      	mov	r0, r8
   1d41c:	f000 fe84 	bl	1e128 <cc_mbedtls_sha256_starts>
   1d420:	4604      	mov	r4, r0
   1d422:	b940      	cbnz	r0, 1d436 <entropy_update+0x42>
   1d424:	2301      	movs	r3, #1
   1d426:	6033      	str	r3, [r6, #0]
   1d428:	2202      	movs	r2, #2
   1d42a:	a901      	add	r1, sp, #4
   1d42c:	4640      	mov	r0, r8
   1d42e:	f000 fe8f 	bl	1e150 <cc_mbedtls_sha256_update>
   1d432:	4604      	mov	r4, r0
   1d434:	b138      	cbz	r0, 1d446 <entropy_update+0x52>
   1d436:	4638      	mov	r0, r7
   1d438:	2120      	movs	r1, #32
   1d43a:	f7ff fc8f 	bl	1cd5c <mbedtls_platform_zeroize>
   1d43e:	4620      	mov	r0, r4
   1d440:	b00b      	add	sp, #44	; 0x2c
   1d442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d446:	462a      	mov	r2, r5
   1d448:	4649      	mov	r1, r9
   1d44a:	4640      	mov	r0, r8
   1d44c:	f000 fe80 	bl	1e150 <cc_mbedtls_sha256_update>
   1d450:	4604      	mov	r4, r0
   1d452:	e7f0      	b.n	1d436 <entropy_update+0x42>
   1d454:	af02      	add	r7, sp, #8
   1d456:	4619      	mov	r1, r3
   1d458:	4610      	mov	r0, r2
   1d45a:	2300      	movs	r3, #0
   1d45c:	463a      	mov	r2, r7
   1d45e:	f000 fffd 	bl	1e45c <cc_mbedtls_sha256>
   1d462:	4604      	mov	r4, r0
   1d464:	2800      	cmp	r0, #0
   1d466:	d1e6      	bne.n	1d436 <entropy_update+0x42>
   1d468:	2320      	movs	r3, #32
   1d46a:	46b9      	mov	r9, r7
   1d46c:	461d      	mov	r5, r3
   1d46e:	e7cc      	b.n	1d40a <entropy_update+0x16>

0001d470 <entropy_gather_internal.part.0>:
   1d470:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d472:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1d476:	b0a7      	sub	sp, #156	; 0x9c
   1d478:	2b00      	cmp	r3, #0
   1d47a:	bfd8      	it	le
   1d47c:	ae02      	addle	r6, sp, #8
   1d47e:	dd2c      	ble.n	1d4da <entropy_gather_internal.part.0+0x6a>
   1d480:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1d484:	4605      	mov	r5, r0
   1d486:	2300      	movs	r3, #0
   1d488:	ae02      	add	r6, sp, #8
   1d48a:	9301      	str	r3, [sp, #4]
   1d48c:	f1a4 0701 	sub.w	r7, r4, #1
   1d490:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1d494:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1d498:	ab01      	add	r3, sp, #4
   1d49a:	2290      	movs	r2, #144	; 0x90
   1d49c:	4631      	mov	r1, r6
   1d49e:	47a0      	blx	r4
   1d4a0:	fab7 f787 	clz	r7, r7
   1d4a4:	097f      	lsrs	r7, r7, #5
   1d4a6:	4604      	mov	r4, r0
   1d4a8:	b910      	cbnz	r0, 1d4b0 <entropy_gather_internal.part.0+0x40>
   1d4aa:	9b01      	ldr	r3, [sp, #4]
   1d4ac:	b93b      	cbnz	r3, 1d4be <entropy_gather_internal.part.0+0x4e>
   1d4ae:	b1a7      	cbz	r7, 1d4da <entropy_gather_internal.part.0+0x6a>
   1d4b0:	4630      	mov	r0, r6
   1d4b2:	2190      	movs	r1, #144	; 0x90
   1d4b4:	f7ff fc52 	bl	1cd5c <mbedtls_platform_zeroize>
   1d4b8:	4620      	mov	r0, r4
   1d4ba:	b027      	add	sp, #156	; 0x9c
   1d4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d4be:	4601      	mov	r1, r0
   1d4c0:	4632      	mov	r2, r6
   1d4c2:	4628      	mov	r0, r5
   1d4c4:	f7ff ff96 	bl	1d3f4 <entropy_update>
   1d4c8:	b950      	cbnz	r0, 1d4e0 <entropy_gather_internal.part.0+0x70>
   1d4ca:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1d4ce:	9a01      	ldr	r2, [sp, #4]
   1d4d0:	4413      	add	r3, r2
   1d4d2:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1d4d6:	2f00      	cmp	r7, #0
   1d4d8:	d1ea      	bne.n	1d4b0 <entropy_gather_internal.part.0+0x40>
   1d4da:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1d4de:	e7e7      	b.n	1d4b0 <entropy_gather_internal.part.0+0x40>
   1d4e0:	4604      	mov	r4, r0
   1d4e2:	4620      	mov	r0, r4
   1d4e4:	b027      	add	sp, #156	; 0x9c
   1d4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d4e8 <cc_mbedtls_entropy_init>:
   1d4e8:	b570      	push	{r4, r5, r6, lr}
   1d4ea:	2500      	movs	r5, #0
   1d4ec:	4604      	mov	r4, r0
   1d4ee:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1d4f2:	2214      	movs	r2, #20
   1d4f4:	4629      	mov	r1, r5
   1d4f6:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   1d4fa:	30fc      	adds	r0, #252	; 0xfc
   1d4fc:	f002 fd08 	bl	1ff10 <memset>
   1d500:	2208      	movs	r2, #8
   1d502:	4629      	mov	r1, r5
   1d504:	4630      	mov	r0, r6
   1d506:	f002 fd03 	bl	1ff10 <memset>
   1d50a:	4b15      	ldr	r3, [pc, #84]	; (1d560 <cc_mbedtls_entropy_init+0x78>)
   1d50c:	4630      	mov	r0, r6
   1d50e:	681b      	ldr	r3, [r3, #0]
   1d510:	4798      	blx	r3
   1d512:	4620      	mov	r0, r4
   1d514:	f840 5b04 	str.w	r5, [r0], #4
   1d518:	f000 fdec 	bl	1e0f4 <cc_mbedtls_sha256_init>
   1d51c:	4b11      	ldr	r3, [pc, #68]	; (1d564 <cc_mbedtls_entropy_init+0x7c>)
   1d51e:	4630      	mov	r0, r6
   1d520:	681b      	ldr	r3, [r3, #0]
   1d522:	4798      	blx	r3
   1d524:	b9d8      	cbnz	r0, 1d55e <cc_mbedtls_entropy_init+0x76>
   1d526:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d52a:	42ab      	cmp	r3, r5
   1d52c:	dc11      	bgt.n	1d552 <cc_mbedtls_entropy_init+0x6a>
   1d52e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1d532:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1d536:	2120      	movs	r1, #32
   1d538:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   1d53c:	2101      	movs	r1, #1
   1d53e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   1d542:	3301      	adds	r3, #1
   1d544:	4908      	ldr	r1, [pc, #32]	; (1d568 <cc_mbedtls_entropy_init+0x80>)
   1d546:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   1d54a:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   1d54e:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1d552:	4b06      	ldr	r3, [pc, #24]	; (1d56c <cc_mbedtls_entropy_init+0x84>)
   1d554:	4630      	mov	r0, r6
   1d556:	681b      	ldr	r3, [r3, #0]
   1d558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d55c:	4718      	bx	r3
   1d55e:	bd70      	pop	{r4, r5, r6, pc}
   1d560:	20000704 	.word	0x20000704
   1d564:	20000700 	.word	0x20000700
   1d568:	0001df45 	.word	0x0001df45
   1d56c:	200006fc 	.word	0x200006fc

0001d570 <cc_mbedtls_entropy_func>:
   1d570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d574:	2a20      	cmp	r2, #32
   1d576:	b088      	sub	sp, #32
   1d578:	d879      	bhi.n	1d66e <cc_mbedtls_entropy_func+0xfe>
   1d57a:	4b3e      	ldr	r3, [pc, #248]	; (1d674 <cc_mbedtls_entropy_func+0x104>)
   1d57c:	f500 7988 	add.w	r9, r0, #272	; 0x110
   1d580:	681b      	ldr	r3, [r3, #0]
   1d582:	4604      	mov	r4, r0
   1d584:	4648      	mov	r0, r9
   1d586:	4617      	mov	r7, r2
   1d588:	4688      	mov	r8, r1
   1d58a:	4798      	blx	r3
   1d58c:	4605      	mov	r5, r0
   1d58e:	b9f8      	cbnz	r0, 1d5d0 <cc_mbedtls_entropy_func+0x60>
   1d590:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d594:	f240 1601 	movw	r6, #257	; 0x101
   1d598:	2b00      	cmp	r3, #0
   1d59a:	d064      	beq.n	1d666 <cc_mbedtls_entropy_func+0xf6>
   1d59c:	4620      	mov	r0, r4
   1d59e:	f7ff ff67 	bl	1d470 <entropy_gather_internal.part.0>
   1d5a2:	4605      	mov	r5, r0
   1d5a4:	b938      	cbnz	r0, 1d5b6 <cc_mbedtls_entropy_func+0x46>
   1d5a6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d5aa:	2b00      	cmp	r3, #0
   1d5ac:	dc14      	bgt.n	1d5d8 <cc_mbedtls_entropy_func+0x68>
   1d5ae:	3e01      	subs	r6, #1
   1d5b0:	d1f2      	bne.n	1d598 <cc_mbedtls_entropy_func+0x28>
   1d5b2:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d5b6:	466e      	mov	r6, sp
   1d5b8:	2120      	movs	r1, #32
   1d5ba:	4630      	mov	r0, r6
   1d5bc:	f7ff fbce 	bl	1cd5c <mbedtls_platform_zeroize>
   1d5c0:	4b2d      	ldr	r3, [pc, #180]	; (1d678 <cc_mbedtls_entropy_func+0x108>)
   1d5c2:	4648      	mov	r0, r9
   1d5c4:	681b      	ldr	r3, [r3, #0]
   1d5c6:	4798      	blx	r3
   1d5c8:	2800      	cmp	r0, #0
   1d5ca:	bf18      	it	ne
   1d5cc:	f06f 051d 	mvnne.w	r5, #29
   1d5d0:	4628      	mov	r0, r5
   1d5d2:	b008      	add	sp, #32
   1d5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d5d8:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   1d5dc:	4293      	cmp	r3, r2
   1d5de:	d303      	bcc.n	1d5e8 <cc_mbedtls_entropy_func+0x78>
   1d5e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d5e4:	2a01      	cmp	r2, #1
   1d5e6:	d002      	beq.n	1d5ee <cc_mbedtls_entropy_func+0x7e>
   1d5e8:	3e01      	subs	r6, #1
   1d5ea:	d1d7      	bne.n	1d59c <cc_mbedtls_entropy_func+0x2c>
   1d5ec:	e7e1      	b.n	1d5b2 <cc_mbedtls_entropy_func+0x42>
   1d5ee:	2b1f      	cmp	r3, #31
   1d5f0:	d9fa      	bls.n	1d5e8 <cc_mbedtls_entropy_func+0x78>
   1d5f2:	466e      	mov	r6, sp
   1d5f4:	4601      	mov	r1, r0
   1d5f6:	2220      	movs	r2, #32
   1d5f8:	4630      	mov	r0, r6
   1d5fa:	f104 0a04 	add.w	sl, r4, #4
   1d5fe:	f002 fc87 	bl	1ff10 <memset>
   1d602:	4631      	mov	r1, r6
   1d604:	4650      	mov	r0, sl
   1d606:	f000 fdcd 	bl	1e1a4 <cc_mbedtls_sha256_finish>
   1d60a:	4605      	mov	r5, r0
   1d60c:	2800      	cmp	r0, #0
   1d60e:	d1d3      	bne.n	1d5b8 <cc_mbedtls_entropy_func+0x48>
   1d610:	4650      	mov	r0, sl
   1d612:	f000 fd83 	bl	1e11c <cc_mbedtls_sha256_free>
   1d616:	4650      	mov	r0, sl
   1d618:	f000 fd6c 	bl	1e0f4 <cc_mbedtls_sha256_init>
   1d61c:	4629      	mov	r1, r5
   1d61e:	4650      	mov	r0, sl
   1d620:	f000 fd82 	bl	1e128 <cc_mbedtls_sha256_starts>
   1d624:	4605      	mov	r5, r0
   1d626:	2800      	cmp	r0, #0
   1d628:	d1c6      	bne.n	1d5b8 <cc_mbedtls_entropy_func+0x48>
   1d62a:	4650      	mov	r0, sl
   1d62c:	2220      	movs	r2, #32
   1d62e:	4631      	mov	r1, r6
   1d630:	f000 fd8e 	bl	1e150 <cc_mbedtls_sha256_update>
   1d634:	4605      	mov	r5, r0
   1d636:	2800      	cmp	r0, #0
   1d638:	d1be      	bne.n	1d5b8 <cc_mbedtls_entropy_func+0x48>
   1d63a:	4603      	mov	r3, r0
   1d63c:	4632      	mov	r2, r6
   1d63e:	2120      	movs	r1, #32
   1d640:	4630      	mov	r0, r6
   1d642:	f000 ff0b 	bl	1e45c <cc_mbedtls_sha256>
   1d646:	4605      	mov	r5, r0
   1d648:	2800      	cmp	r0, #0
   1d64a:	d1b5      	bne.n	1d5b8 <cc_mbedtls_entropy_func+0x48>
   1d64c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d650:	2b00      	cmp	r3, #0
   1d652:	bfc4      	itt	gt
   1d654:	2300      	movgt	r3, #0
   1d656:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1d65a:	463a      	mov	r2, r7
   1d65c:	4640      	mov	r0, r8
   1d65e:	4631      	mov	r1, r6
   1d660:	f002 fc4b 	bl	1fefa <memcpy>
   1d664:	e7a8      	b.n	1d5b8 <cc_mbedtls_entropy_func+0x48>
   1d666:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1d66a:	466e      	mov	r6, sp
   1d66c:	e7a4      	b.n	1d5b8 <cc_mbedtls_entropy_func+0x48>
   1d66e:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d672:	e7ad      	b.n	1d5d0 <cc_mbedtls_entropy_func+0x60>
   1d674:	20000700 	.word	0x20000700
   1d678:	200006fc 	.word	0x200006fc

0001d67c <RndStartupTest.constprop.0>:
   1d67c:	b530      	push	{r4, r5, lr}
   1d67e:	b08d      	sub	sp, #52	; 0x34
   1d680:	2100      	movs	r1, #0
   1d682:	2228      	movs	r2, #40	; 0x28
   1d684:	a802      	add	r0, sp, #8
   1d686:	9101      	str	r1, [sp, #4]
   1d688:	f002 fc42 	bl	1ff10 <memset>
   1d68c:	a802      	add	r0, sp, #8
   1d68e:	f000 ff0d 	bl	1e4ac <RNG_PLAT_SetUserRngParameters>
   1d692:	4604      	mov	r4, r0
   1d694:	b110      	cbz	r0, 1d69c <RndStartupTest.constprop.0+0x20>
   1d696:	4620      	mov	r0, r4
   1d698:	b00d      	add	sp, #52	; 0x34
   1d69a:	bd30      	pop	{r4, r5, pc}
   1d69c:	4d17      	ldr	r5, [pc, #92]	; (1d6fc <RndStartupTest.constprop.0+0x80>)
   1d69e:	f04f 31ff 	mov.w	r1, #4294967295
   1d6a2:	6828      	ldr	r0, [r5, #0]
   1d6a4:	f000 f944 	bl	1d930 <CC_PalMutexLock>
   1d6a8:	4604      	mov	r4, r0
   1d6aa:	b120      	cbz	r0, 1d6b6 <RndStartupTest.constprop.0+0x3a>
   1d6ac:	4814      	ldr	r0, [pc, #80]	; (1d700 <RndStartupTest.constprop.0+0x84>)
   1d6ae:	f7ff fa33 	bl	1cb18 <CC_PalAbort>
   1d6b2:	2c01      	cmp	r4, #1
   1d6b4:	d018      	beq.n	1d6e8 <RndStartupTest.constprop.0+0x6c>
   1d6b6:	2000      	movs	r0, #0
   1d6b8:	f000 f96a 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1d6bc:	b9d0      	cbnz	r0, 1d6f4 <RndStartupTest.constprop.0+0x78>
   1d6be:	4a11      	ldr	r2, [pc, #68]	; (1d704 <RndStartupTest.constprop.0+0x88>)
   1d6c0:	a902      	add	r1, sp, #8
   1d6c2:	a801      	add	r0, sp, #4
   1d6c4:	f000 fc30 	bl	1df28 <LLF_RND_RunTrngStartupTest>
   1d6c8:	4604      	mov	r4, r0
   1d6ca:	2001      	movs	r0, #1
   1d6cc:	f000 f960 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1d6d0:	b960      	cbnz	r0, 1d6ec <RndStartupTest.constprop.0+0x70>
   1d6d2:	6828      	ldr	r0, [r5, #0]
   1d6d4:	f000 f934 	bl	1d940 <CC_PalMutexUnlock>
   1d6d8:	2800      	cmp	r0, #0
   1d6da:	d0dc      	beq.n	1d696 <RndStartupTest.constprop.0+0x1a>
   1d6dc:	480a      	ldr	r0, [pc, #40]	; (1d708 <RndStartupTest.constprop.0+0x8c>)
   1d6de:	f7ff fa1b 	bl	1cb18 <CC_PalAbort>
   1d6e2:	4620      	mov	r0, r4
   1d6e4:	b00d      	add	sp, #52	; 0x34
   1d6e6:	bd30      	pop	{r4, r5, pc}
   1d6e8:	2405      	movs	r4, #5
   1d6ea:	e7f2      	b.n	1d6d2 <RndStartupTest.constprop.0+0x56>
   1d6ec:	4807      	ldr	r0, [pc, #28]	; (1d70c <RndStartupTest.constprop.0+0x90>)
   1d6ee:	f7ff fa13 	bl	1cb18 <CC_PalAbort>
   1d6f2:	e7ee      	b.n	1d6d2 <RndStartupTest.constprop.0+0x56>
   1d6f4:	4806      	ldr	r0, [pc, #24]	; (1d710 <RndStartupTest.constprop.0+0x94>)
   1d6f6:	f7ff fa0f 	bl	1cb18 <CC_PalAbort>
   1d6fa:	e7e0      	b.n	1d6be <RndStartupTest.constprop.0+0x42>
   1d6fc:	200006e8 	.word	0x200006e8
   1d700:	00025510 	.word	0x00025510
   1d704:	20003384 	.word	0x20003384
   1d708:	00025568 	.word	0x00025568
   1d70c:	00025548 	.word	0x00025548
   1d710:	00025528 	.word	0x00025528

0001d714 <CC_LibInit>:
   1d714:	b530      	push	{r4, r5, lr}
   1d716:	b083      	sub	sp, #12
   1d718:	f000 f85c 	bl	1d7d4 <CC_HalInit>
   1d71c:	b128      	cbz	r0, 1d72a <CC_LibInit+0x16>
   1d71e:	f000 f8ab 	bl	1d878 <CC_PalTerminate>
   1d722:	2403      	movs	r4, #3
   1d724:	4620      	mov	r0, r4
   1d726:	b003      	add	sp, #12
   1d728:	bd30      	pop	{r4, r5, pc}
   1d72a:	f000 f877 	bl	1d81c <CC_PalInit>
   1d72e:	b9d8      	cbnz	r0, 1d768 <CC_LibInit+0x54>
   1d730:	f000 f92e 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1d734:	b9e0      	cbnz	r0, 1d770 <CC_LibInit+0x5c>
   1d736:	4c22      	ldr	r4, [pc, #136]	; (1d7c0 <CC_LibInit+0xac>)
   1d738:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   1d73c:	0e1b      	lsrs	r3, r3, #24
   1d73e:	2bf0      	cmp	r3, #240	; 0xf0
   1d740:	d10a      	bne.n	1d758 <CC_LibInit+0x44>
   1d742:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1d746:	4b1f      	ldr	r3, [pc, #124]	; (1d7c4 <CC_LibInit+0xb0>)
   1d748:	429a      	cmp	r2, r3
   1d74a:	d031      	beq.n	1d7b0 <CC_LibInit+0x9c>
   1d74c:	f000 f844 	bl	1d7d8 <CC_HalTerminate>
   1d750:	2407      	movs	r4, #7
   1d752:	f000 f891 	bl	1d878 <CC_PalTerminate>
   1d756:	e7e5      	b.n	1d724 <CC_LibInit+0x10>
   1d758:	f000 f83e 	bl	1d7d8 <CC_HalTerminate>
   1d75c:	f000 f88c 	bl	1d878 <CC_PalTerminate>
   1d760:	2406      	movs	r4, #6
   1d762:	4620      	mov	r0, r4
   1d764:	b003      	add	sp, #12
   1d766:	bd30      	pop	{r4, r5, pc}
   1d768:	2404      	movs	r4, #4
   1d76a:	4620      	mov	r0, r4
   1d76c:	b003      	add	sp, #12
   1d76e:	bd30      	pop	{r4, r5, pc}
   1d770:	f000 f832 	bl	1d7d8 <CC_HalTerminate>
   1d774:	f000 f880 	bl	1d878 <CC_PalTerminate>
   1d778:	f7ff ff80 	bl	1d67c <RndStartupTest.constprop.0>
   1d77c:	4604      	mov	r4, r0
   1d77e:	b998      	cbnz	r0, 1d7a8 <CC_LibInit+0x94>
   1d780:	4d11      	ldr	r5, [pc, #68]	; (1d7c8 <CC_LibInit+0xb4>)
   1d782:	682b      	ldr	r3, [r5, #0]
   1d784:	2b00      	cmp	r3, #0
   1d786:	d1cd      	bne.n	1d724 <CC_LibInit+0x10>
   1d788:	4602      	mov	r2, r0
   1d78a:	4601      	mov	r1, r0
   1d78c:	f7ff f9e6 	bl	1cb5c <nrf_cc3xx_platform_ctr_drbg_init>
   1d790:	b950      	cbnz	r0, 1d7a8 <CC_LibInit+0x94>
   1d792:	490e      	ldr	r1, [pc, #56]	; (1d7cc <CC_LibInit+0xb8>)
   1d794:	ab01      	add	r3, sp, #4
   1d796:	2268      	movs	r2, #104	; 0x68
   1d798:	f7ff fa10 	bl	1cbbc <nrf_cc3xx_platform_ctr_drbg_get>
   1d79c:	b920      	cbnz	r0, 1d7a8 <CC_LibInit+0x94>
   1d79e:	4b0c      	ldr	r3, [pc, #48]	; (1d7d0 <CC_LibInit+0xbc>)
   1d7a0:	602b      	str	r3, [r5, #0]
   1d7a2:	4620      	mov	r0, r4
   1d7a4:	b003      	add	sp, #12
   1d7a6:	bd30      	pop	{r4, r5, pc}
   1d7a8:	2405      	movs	r4, #5
   1d7aa:	4620      	mov	r0, r4
   1d7ac:	b003      	add	sp, #12
   1d7ae:	bd30      	pop	{r4, r5, pc}
   1d7b0:	2001      	movs	r0, #1
   1d7b2:	f000 f8ed 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1d7b6:	2800      	cmp	r0, #0
   1d7b8:	d1da      	bne.n	1d770 <CC_LibInit+0x5c>
   1d7ba:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   1d7be:	e7db      	b.n	1d778 <CC_LibInit+0x64>
   1d7c0:	5002b000 	.word	0x5002b000
   1d7c4:	20e00000 	.word	0x20e00000
   1d7c8:	200035a4 	.word	0x200035a4
   1d7cc:	200035a8 	.word	0x200035a8
   1d7d0:	5a5aea5a 	.word	0x5a5aea5a

0001d7d4 <CC_HalInit>:
   1d7d4:	2000      	movs	r0, #0
   1d7d6:	4770      	bx	lr

0001d7d8 <CC_HalTerminate>:
   1d7d8:	2000      	movs	r0, #0
   1d7da:	4770      	bx	lr

0001d7dc <CC_HalClearInterruptBit>:
   1d7dc:	0543      	lsls	r3, r0, #21
   1d7de:	d504      	bpl.n	1d7ea <CC_HalClearInterruptBit+0xe>
   1d7e0:	4b04      	ldr	r3, [pc, #16]	; (1d7f4 <CC_HalClearInterruptBit+0x18>)
   1d7e2:	f04f 32ff 	mov.w	r2, #4294967295
   1d7e6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d7ea:	4b02      	ldr	r3, [pc, #8]	; (1d7f4 <CC_HalClearInterruptBit+0x18>)
   1d7ec:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   1d7f0:	4770      	bx	lr
   1d7f2:	bf00      	nop
   1d7f4:	5002b000 	.word	0x5002b000

0001d7f8 <CC_HalMaskInterrupt>:
   1d7f8:	4b01      	ldr	r3, [pc, #4]	; (1d800 <CC_HalMaskInterrupt+0x8>)
   1d7fa:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1d7fe:	4770      	bx	lr
   1d800:	5002b000 	.word	0x5002b000

0001d804 <CC_HalWaitInterrupt>:
   1d804:	b108      	cbz	r0, 1d80a <CC_HalWaitInterrupt+0x6>
   1d806:	f000 b86b 	b.w	1d8e0 <CC_PalWaitInterrupt>
   1d80a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d80e:	4770      	bx	lr

0001d810 <CC_HalWaitInterruptRND>:
   1d810:	b108      	cbz	r0, 1d816 <CC_HalWaitInterruptRND+0x6>
   1d812:	f000 b84f 	b.w	1d8b4 <CC_PalWaitInterruptRND>
   1d816:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d81a:	4770      	bx	lr

0001d81c <CC_PalInit>:
   1d81c:	b510      	push	{r4, lr}
   1d81e:	4811      	ldr	r0, [pc, #68]	; (1d864 <CC_PalInit+0x48>)
   1d820:	f000 f872 	bl	1d908 <CC_PalMutexCreate>
   1d824:	b100      	cbz	r0, 1d828 <CC_PalInit+0xc>
   1d826:	bd10      	pop	{r4, pc}
   1d828:	480f      	ldr	r0, [pc, #60]	; (1d868 <CC_PalInit+0x4c>)
   1d82a:	f000 f86d 	bl	1d908 <CC_PalMutexCreate>
   1d82e:	2800      	cmp	r0, #0
   1d830:	d1f9      	bne.n	1d826 <CC_PalInit+0xa>
   1d832:	4c0e      	ldr	r4, [pc, #56]	; (1d86c <CC_PalInit+0x50>)
   1d834:	4620      	mov	r0, r4
   1d836:	f000 f867 	bl	1d908 <CC_PalMutexCreate>
   1d83a:	2800      	cmp	r0, #0
   1d83c:	d1f3      	bne.n	1d826 <CC_PalInit+0xa>
   1d83e:	4b0c      	ldr	r3, [pc, #48]	; (1d870 <CC_PalInit+0x54>)
   1d840:	480c      	ldr	r0, [pc, #48]	; (1d874 <CC_PalInit+0x58>)
   1d842:	601c      	str	r4, [r3, #0]
   1d844:	f000 f860 	bl	1d908 <CC_PalMutexCreate>
   1d848:	4601      	mov	r1, r0
   1d84a:	2800      	cmp	r0, #0
   1d84c:	d1eb      	bne.n	1d826 <CC_PalInit+0xa>
   1d84e:	f000 f82d 	bl	1d8ac <CC_PalDmaInit>
   1d852:	4604      	mov	r4, r0
   1d854:	b108      	cbz	r0, 1d85a <CC_PalInit+0x3e>
   1d856:	4620      	mov	r0, r4
   1d858:	bd10      	pop	{r4, pc}
   1d85a:	f000 f87b 	bl	1d954 <CC_PalPowerSaveModeInit>
   1d85e:	4620      	mov	r0, r4
   1d860:	e7fa      	b.n	1d858 <CC_PalInit+0x3c>
   1d862:	bf00      	nop
   1d864:	200006f8 	.word	0x200006f8
   1d868:	200006f4 	.word	0x200006f4
   1d86c:	200006f0 	.word	0x200006f0
   1d870:	200006e8 	.word	0x200006e8
   1d874:	200006ec 	.word	0x200006ec

0001d878 <CC_PalTerminate>:
   1d878:	b508      	push	{r3, lr}
   1d87a:	4808      	ldr	r0, [pc, #32]	; (1d89c <CC_PalTerminate+0x24>)
   1d87c:	f000 f84e 	bl	1d91c <CC_PalMutexDestroy>
   1d880:	4807      	ldr	r0, [pc, #28]	; (1d8a0 <CC_PalTerminate+0x28>)
   1d882:	f000 f84b 	bl	1d91c <CC_PalMutexDestroy>
   1d886:	4807      	ldr	r0, [pc, #28]	; (1d8a4 <CC_PalTerminate+0x2c>)
   1d888:	f000 f848 	bl	1d91c <CC_PalMutexDestroy>
   1d88c:	4806      	ldr	r0, [pc, #24]	; (1d8a8 <CC_PalTerminate+0x30>)
   1d88e:	f000 f845 	bl	1d91c <CC_PalMutexDestroy>
   1d892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d896:	f000 b80b 	b.w	1d8b0 <CC_PalDmaTerminate>
   1d89a:	bf00      	nop
   1d89c:	200006f8 	.word	0x200006f8
   1d8a0:	200006f4 	.word	0x200006f4
   1d8a4:	200006f0 	.word	0x200006f0
   1d8a8:	200006ec 	.word	0x200006ec

0001d8ac <CC_PalDmaInit>:
   1d8ac:	2000      	movs	r0, #0
   1d8ae:	4770      	bx	lr

0001d8b0 <CC_PalDmaTerminate>:
   1d8b0:	4770      	bx	lr
   1d8b2:	bf00      	nop

0001d8b4 <CC_PalWaitInterruptRND>:
   1d8b4:	b410      	push	{r4}
   1d8b6:	4c09      	ldr	r4, [pc, #36]	; (1d8dc <CC_PalWaitInterruptRND+0x28>)
   1d8b8:	4602      	mov	r2, r0
   1d8ba:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   1d8be:	4213      	tst	r3, r2
   1d8c0:	d0fb      	beq.n	1d8ba <CC_PalWaitInterruptRND+0x6>
   1d8c2:	b121      	cbz	r1, 1d8ce <CC_PalWaitInterruptRND+0x1a>
   1d8c4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d8c8:	600b      	str	r3, [r1, #0]
   1d8ca:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1d8ce:	4b03      	ldr	r3, [pc, #12]	; (1d8dc <CC_PalWaitInterruptRND+0x28>)
   1d8d0:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   1d8d4:	2000      	movs	r0, #0
   1d8d6:	bc10      	pop	{r4}
   1d8d8:	4770      	bx	lr
   1d8da:	bf00      	nop
   1d8dc:	5002b000 	.word	0x5002b000

0001d8e0 <CC_PalWaitInterrupt>:
   1d8e0:	4a04      	ldr	r2, [pc, #16]	; (1d8f4 <CC_PalWaitInterrupt+0x14>)
   1d8e2:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   1d8e6:	4218      	tst	r0, r3
   1d8e8:	d0fb      	beq.n	1d8e2 <CC_PalWaitInterrupt+0x2>
   1d8ea:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   1d8ee:	2000      	movs	r0, #0
   1d8f0:	4770      	bx	lr
   1d8f2:	bf00      	nop
   1d8f4:	5002b000 	.word	0x5002b000

0001d8f8 <CC_PalMemCopyPlat>:
   1d8f8:	f002 bae8 	b.w	1fecc <memmove>

0001d8fc <CC_PalMemSetPlat>:
   1d8fc:	f002 bb08 	b.w	1ff10 <memset>

0001d900 <CC_PalMemSetZeroPlat>:
   1d900:	460a      	mov	r2, r1
   1d902:	2100      	movs	r1, #0
   1d904:	f002 bb04 	b.w	1ff10 <memset>

0001d908 <CC_PalMutexCreate>:
   1d908:	b508      	push	{r3, lr}
   1d90a:	4b03      	ldr	r3, [pc, #12]	; (1d918 <CC_PalMutexCreate+0x10>)
   1d90c:	6802      	ldr	r2, [r0, #0]
   1d90e:	681b      	ldr	r3, [r3, #0]
   1d910:	6810      	ldr	r0, [r2, #0]
   1d912:	4798      	blx	r3
   1d914:	2000      	movs	r0, #0
   1d916:	bd08      	pop	{r3, pc}
   1d918:	200006b4 	.word	0x200006b4

0001d91c <CC_PalMutexDestroy>:
   1d91c:	b508      	push	{r3, lr}
   1d91e:	4b03      	ldr	r3, [pc, #12]	; (1d92c <CC_PalMutexDestroy+0x10>)
   1d920:	6802      	ldr	r2, [r0, #0]
   1d922:	685b      	ldr	r3, [r3, #4]
   1d924:	6810      	ldr	r0, [r2, #0]
   1d926:	4798      	blx	r3
   1d928:	2000      	movs	r0, #0
   1d92a:	bd08      	pop	{r3, pc}
   1d92c:	200006b4 	.word	0x200006b4

0001d930 <CC_PalMutexLock>:
   1d930:	4b02      	ldr	r3, [pc, #8]	; (1d93c <CC_PalMutexLock+0xc>)
   1d932:	6802      	ldr	r2, [r0, #0]
   1d934:	689b      	ldr	r3, [r3, #8]
   1d936:	6810      	ldr	r0, [r2, #0]
   1d938:	4718      	bx	r3
   1d93a:	bf00      	nop
   1d93c:	200006b4 	.word	0x200006b4

0001d940 <CC_PalMutexUnlock>:
   1d940:	b508      	push	{r3, lr}
   1d942:	4b03      	ldr	r3, [pc, #12]	; (1d950 <CC_PalMutexUnlock+0x10>)
   1d944:	6802      	ldr	r2, [r0, #0]
   1d946:	68db      	ldr	r3, [r3, #12]
   1d948:	6810      	ldr	r0, [r2, #0]
   1d94a:	4798      	blx	r3
   1d94c:	2000      	movs	r0, #0
   1d94e:	bd08      	pop	{r3, pc}
   1d950:	200006b4 	.word	0x200006b4

0001d954 <CC_PalPowerSaveModeInit>:
   1d954:	b570      	push	{r4, r5, r6, lr}
   1d956:	4c09      	ldr	r4, [pc, #36]	; (1d97c <CC_PalPowerSaveModeInit+0x28>)
   1d958:	4d09      	ldr	r5, [pc, #36]	; (1d980 <CC_PalPowerSaveModeInit+0x2c>)
   1d95a:	6920      	ldr	r0, [r4, #16]
   1d95c:	68ab      	ldr	r3, [r5, #8]
   1d95e:	4798      	blx	r3
   1d960:	b118      	cbz	r0, 1d96a <CC_PalPowerSaveModeInit+0x16>
   1d962:	4b08      	ldr	r3, [pc, #32]	; (1d984 <CC_PalPowerSaveModeInit+0x30>)
   1d964:	4808      	ldr	r0, [pc, #32]	; (1d988 <CC_PalPowerSaveModeInit+0x34>)
   1d966:	685b      	ldr	r3, [r3, #4]
   1d968:	4798      	blx	r3
   1d96a:	4a08      	ldr	r2, [pc, #32]	; (1d98c <CC_PalPowerSaveModeInit+0x38>)
   1d96c:	68eb      	ldr	r3, [r5, #12]
   1d96e:	6920      	ldr	r0, [r4, #16]
   1d970:	2100      	movs	r1, #0
   1d972:	6011      	str	r1, [r2, #0]
   1d974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d978:	4718      	bx	r3
   1d97a:	bf00      	nop
   1d97c:	200006a0 	.word	0x200006a0
   1d980:	200006b4 	.word	0x200006b4
   1d984:	20000698 	.word	0x20000698
   1d988:	00025580 	.word	0x00025580
   1d98c:	20003610 	.word	0x20003610

0001d990 <CC_PalPowerSaveModeSelect>:
   1d990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d992:	4d1a      	ldr	r5, [pc, #104]	; (1d9fc <CC_PalPowerSaveModeSelect+0x6c>)
   1d994:	4e1a      	ldr	r6, [pc, #104]	; (1da00 <CC_PalPowerSaveModeSelect+0x70>)
   1d996:	4604      	mov	r4, r0
   1d998:	68b2      	ldr	r2, [r6, #8]
   1d99a:	6928      	ldr	r0, [r5, #16]
   1d99c:	4790      	blx	r2
   1d99e:	b9e8      	cbnz	r0, 1d9dc <CC_PalPowerSaveModeSelect+0x4c>
   1d9a0:	4f18      	ldr	r7, [pc, #96]	; (1da04 <CC_PalPowerSaveModeSelect+0x74>)
   1d9a2:	683b      	ldr	r3, [r7, #0]
   1d9a4:	b14c      	cbz	r4, 1d9ba <CC_PalPowerSaveModeSelect+0x2a>
   1d9a6:	b1a3      	cbz	r3, 1d9d2 <CC_PalPowerSaveModeSelect+0x42>
   1d9a8:	2b01      	cmp	r3, #1
   1d9aa:	d019      	beq.n	1d9e0 <CC_PalPowerSaveModeSelect+0x50>
   1d9ac:	3b01      	subs	r3, #1
   1d9ae:	603b      	str	r3, [r7, #0]
   1d9b0:	6928      	ldr	r0, [r5, #16]
   1d9b2:	68f3      	ldr	r3, [r6, #12]
   1d9b4:	4798      	blx	r3
   1d9b6:	2000      	movs	r0, #0
   1d9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d9ba:	b943      	cbnz	r3, 1d9ce <CC_PalPowerSaveModeSelect+0x3e>
   1d9bc:	4a12      	ldr	r2, [pc, #72]	; (1da08 <CC_PalPowerSaveModeSelect+0x78>)
   1d9be:	2101      	movs	r1, #1
   1d9c0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1d9c4:	4911      	ldr	r1, [pc, #68]	; (1da0c <CC_PalPowerSaveModeSelect+0x7c>)
   1d9c6:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   1d9ca:	2a00      	cmp	r2, #0
   1d9cc:	d1fb      	bne.n	1d9c6 <CC_PalPowerSaveModeSelect+0x36>
   1d9ce:	3301      	adds	r3, #1
   1d9d0:	603b      	str	r3, [r7, #0]
   1d9d2:	68f3      	ldr	r3, [r6, #12]
   1d9d4:	6928      	ldr	r0, [r5, #16]
   1d9d6:	4798      	blx	r3
   1d9d8:	2000      	movs	r0, #0
   1d9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d9dc:	480c      	ldr	r0, [pc, #48]	; (1da10 <CC_PalPowerSaveModeSelect+0x80>)
   1d9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d9e0:	4a0a      	ldr	r2, [pc, #40]	; (1da0c <CC_PalPowerSaveModeSelect+0x7c>)
   1d9e2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1d9e6:	2b00      	cmp	r3, #0
   1d9e8:	d1fb      	bne.n	1d9e2 <CC_PalPowerSaveModeSelect+0x52>
   1d9ea:	4a07      	ldr	r2, [pc, #28]	; (1da08 <CC_PalPowerSaveModeSelect+0x78>)
   1d9ec:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1d9f0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1d9f4:	f7ff ff00 	bl	1d7f8 <CC_HalMaskInterrupt>
   1d9f8:	683b      	ldr	r3, [r7, #0]
   1d9fa:	e7d7      	b.n	1d9ac <CC_PalPowerSaveModeSelect+0x1c>
   1d9fc:	200006a0 	.word	0x200006a0
   1da00:	200006b4 	.word	0x200006b4
   1da04:	20003610 	.word	0x20003610
   1da08:	5002a000 	.word	0x5002a000
   1da0c:	5002b000 	.word	0x5002b000
   1da10:	ffff8fe9 	.word	0xffff8fe9

0001da14 <mutex_init>:
   1da14:	4b01      	ldr	r3, [pc, #4]	; (1da1c <mutex_init+0x8>)
   1da16:	681b      	ldr	r3, [r3, #0]
   1da18:	4718      	bx	r3
   1da1a:	bf00      	nop
   1da1c:	200006b4 	.word	0x200006b4

0001da20 <mutex_lock>:
   1da20:	4b01      	ldr	r3, [pc, #4]	; (1da28 <mutex_lock+0x8>)
   1da22:	689b      	ldr	r3, [r3, #8]
   1da24:	4718      	bx	r3
   1da26:	bf00      	nop
   1da28:	200006b4 	.word	0x200006b4

0001da2c <mutex_unlock>:
   1da2c:	4b01      	ldr	r3, [pc, #4]	; (1da34 <mutex_unlock+0x8>)
   1da2e:	68db      	ldr	r3, [r3, #12]
   1da30:	4718      	bx	r3
   1da32:	bf00      	nop
   1da34:	200006b4 	.word	0x200006b4

0001da38 <startTrngHW>:
   1da38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1da3c:	2800      	cmp	r0, #0
   1da3e:	d078      	beq.n	1db32 <startTrngHW+0xfa>
   1da40:	460c      	mov	r4, r1
   1da42:	2900      	cmp	r1, #0
   1da44:	d075      	beq.n	1db32 <startTrngHW+0xfa>
   1da46:	461d      	mov	r5, r3
   1da48:	2b00      	cmp	r3, #0
   1da4a:	d072      	beq.n	1db32 <startTrngHW+0xfa>
   1da4c:	4607      	mov	r7, r0
   1da4e:	b11a      	cbz	r2, 1da58 <startTrngHW+0x20>
   1da50:	2201      	movs	r2, #1
   1da52:	2300      	movs	r3, #0
   1da54:	602a      	str	r2, [r5, #0]
   1da56:	6003      	str	r3, [r0, #0]
   1da58:	682b      	ldr	r3, [r5, #0]
   1da5a:	2b00      	cmp	r3, #0
   1da5c:	d064      	beq.n	1db28 <startTrngHW+0xf0>
   1da5e:	4629      	mov	r1, r5
   1da60:	4620      	mov	r0, r4
   1da62:	f000 fddb 	bl	1e61c <LLF_RND_GetFastestRosc>
   1da66:	4680      	mov	r8, r0
   1da68:	2800      	cmp	r0, #0
   1da6a:	d15f      	bne.n	1db2c <startTrngHW+0xf4>
   1da6c:	6828      	ldr	r0, [r5, #0]
   1da6e:	4621      	mov	r1, r4
   1da70:	f000 fdba 	bl	1e5e8 <LLF_RND_GetRoscSampleCnt>
   1da74:	4680      	mov	r8, r0
   1da76:	2800      	cmp	r0, #0
   1da78:	d158      	bne.n	1db2c <startTrngHW+0xf4>
   1da7a:	682b      	ldr	r3, [r5, #0]
   1da7c:	2b08      	cmp	r3, #8
   1da7e:	d06c      	beq.n	1db5a <startTrngHW+0x122>
   1da80:	2b04      	cmp	r3, #4
   1da82:	d06d      	beq.n	1db60 <startTrngHW+0x128>
   1da84:	f1a3 0902 	sub.w	r9, r3, #2
   1da88:	fab9 f989 	clz	r9, r9
   1da8c:	ea4f 1959 	mov.w	r9, r9, lsr #5
   1da90:	4e35      	ldr	r6, [pc, #212]	; (1db68 <startTrngHW+0x130>)
   1da92:	2101      	movs	r1, #1
   1da94:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   1da98:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   1da9c:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   1daa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1daa2:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   1daa6:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   1daaa:	4293      	cmp	r3, r2
   1daac:	d1f6      	bne.n	1da9c <startTrngHW+0x64>
   1daae:	f04f 0a00 	mov.w	sl, #0
   1dab2:	f04f 30ff 	mov.w	r0, #4294967295
   1dab6:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   1daba:	f7ff fe8f 	bl	1d7dc <CC_HalClearInterruptBit>
   1dabe:	f06f 031b 	mvn.w	r3, #27
   1dac2:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   1dac6:	4650      	mov	r0, sl
   1dac8:	f7ff fe96 	bl	1d7f8 <CC_HalMaskInterrupt>
   1dacc:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   1dad0:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   1dad4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1dad8:	f7ff fe8e 	bl	1d7f8 <CC_HalMaskInterrupt>
   1dadc:	230a      	movs	r3, #10
   1dade:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   1dae2:	9b08      	ldr	r3, [sp, #32]
   1dae4:	2b01      	cmp	r3, #1
   1dae6:	d029      	beq.n	1db3c <startTrngHW+0x104>
   1dae8:	6923      	ldr	r3, [r4, #16]
   1daea:	4a20      	ldr	r2, [pc, #128]	; (1db6c <startTrngHW+0x134>)
   1daec:	fba2 2303 	umull	r2, r3, r2, r3
   1daf0:	091b      	lsrs	r3, r3, #4
   1daf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1daf4:	fb02 f303 	mul.w	r3, r2, r3
   1daf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1dafc:	4a1a      	ldr	r2, [pc, #104]	; (1db68 <startTrngHW+0x130>)
   1dafe:	03db      	lsls	r3, r3, #15
   1db00:	099b      	lsrs	r3, r3, #6
   1db02:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   1db06:	2301      	movs	r3, #1
   1db08:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   1db0c:	683b      	ldr	r3, [r7, #0]
   1db0e:	682a      	ldr	r2, [r5, #0]
   1db10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1db14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1db18:	603b      	str	r3, [r7, #0]
   1db1a:	682a      	ldr	r2, [r5, #0]
   1db1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1db20:	603b      	str	r3, [r7, #0]
   1db22:	4640      	mov	r0, r8
   1db24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1db28:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1db70 <startTrngHW+0x138>
   1db2c:	4640      	mov	r0, r8
   1db2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1db32:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1db74 <startTrngHW+0x13c>
   1db36:	4640      	mov	r0, r8
   1db38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1db3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1db40:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   1db44:	3201      	adds	r2, #1
   1db46:	d006      	beq.n	1db56 <startTrngHW+0x11e>
   1db48:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1db4c:	4a07      	ldr	r2, [pc, #28]	; (1db6c <startTrngHW+0x134>)
   1db4e:	fba2 2303 	umull	r2, r3, r2, r3
   1db52:	091b      	lsrs	r3, r3, #4
   1db54:	e7cd      	b.n	1daf2 <startTrngHW+0xba>
   1db56:	2316      	movs	r3, #22
   1db58:	e7cb      	b.n	1daf2 <startTrngHW+0xba>
   1db5a:	f04f 0903 	mov.w	r9, #3
   1db5e:	e797      	b.n	1da90 <startTrngHW+0x58>
   1db60:	f04f 0902 	mov.w	r9, #2
   1db64:	e794      	b.n	1da90 <startTrngHW+0x58>
   1db66:	bf00      	nop
   1db68:	5002b000 	.word	0x5002b000
   1db6c:	aaaaaaab 	.word	0xaaaaaaab
   1db70:	00f10c31 	.word	0x00f10c31
   1db74:	00f10c35 	.word	0x00f10c35

0001db78 <LLF_RND_RepetitionCounterTest>:
   1db78:	b350      	cbz	r0, 1dbd0 <LLF_RND_RepetitionCounterTest+0x58>
   1db7a:	1e4b      	subs	r3, r1, #1
   1db7c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   1db80:	d226      	bcs.n	1dbd0 <LLF_RND_RepetitionCounterTest+0x58>
   1db82:	f04f 0c00 	mov.w	ip, #0
   1db86:	b530      	push	{r4, r5, lr}
   1db88:	00cd      	lsls	r5, r1, #3
   1db8a:	46e6      	mov	lr, ip
   1db8c:	4664      	mov	r4, ip
   1db8e:	0963      	lsrs	r3, r4, #5
   1db90:	f004 011f 	and.w	r1, r4, #31
   1db94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1db98:	291f      	cmp	r1, #31
   1db9a:	fa23 f301 	lsr.w	r3, r3, r1
   1db9e:	d006      	beq.n	1dbae <LLF_RND_RepetitionCounterTest+0x36>
   1dba0:	f003 0301 	and.w	r3, r3, #1
   1dba4:	b91c      	cbnz	r4, 1dbae <LLF_RND_RepetitionCounterTest+0x36>
   1dba6:	2401      	movs	r4, #1
   1dba8:	469e      	mov	lr, r3
   1dbaa:	46a4      	mov	ip, r4
   1dbac:	e7ef      	b.n	1db8e <LLF_RND_RepetitionCounterTest+0x16>
   1dbae:	459e      	cmp	lr, r3
   1dbb0:	f104 0401 	add.w	r4, r4, #1
   1dbb4:	d006      	beq.n	1dbc4 <LLF_RND_RepetitionCounterTest+0x4c>
   1dbb6:	469e      	mov	lr, r3
   1dbb8:	f04f 0c01 	mov.w	ip, #1
   1dbbc:	42ac      	cmp	r4, r5
   1dbbe:	d1e6      	bne.n	1db8e <LLF_RND_RepetitionCounterTest+0x16>
   1dbc0:	2000      	movs	r0, #0
   1dbc2:	bd30      	pop	{r4, r5, pc}
   1dbc4:	f10c 0c01 	add.w	ip, ip, #1
   1dbc8:	4594      	cmp	ip, r2
   1dbca:	d1f7      	bne.n	1dbbc <LLF_RND_RepetitionCounterTest+0x44>
   1dbcc:	4801      	ldr	r0, [pc, #4]	; (1dbd4 <LLF_RND_RepetitionCounterTest+0x5c>)
   1dbce:	bd30      	pop	{r4, r5, pc}
   1dbd0:	4800      	ldr	r0, [pc, #0]	; (1dbd4 <LLF_RND_RepetitionCounterTest+0x5c>)
   1dbd2:	4770      	bx	lr
   1dbd4:	00f10c36 	.word	0x00f10c36

0001dbd8 <LLF_RND_AdaptiveProportionTest>:
   1dbd8:	b3c8      	cbz	r0, 1dc4e <LLF_RND_AdaptiveProportionTest+0x76>
   1dbda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dbde:	1e4c      	subs	r4, r1, #1
   1dbe0:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1dbe4:	d21c      	bcs.n	1dc20 <LLF_RND_AdaptiveProportionTest+0x48>
   1dbe6:	b1db      	cbz	r3, 1dc20 <LLF_RND_AdaptiveProportionTest+0x48>
   1dbe8:	b1d2      	cbz	r2, 1dc20 <LLF_RND_AdaptiveProportionTest+0x48>
   1dbea:	f04f 0e00 	mov.w	lr, #0
   1dbee:	00cf      	lsls	r7, r1, #3
   1dbf0:	4676      	mov	r6, lr
   1dbf2:	46f0      	mov	r8, lr
   1dbf4:	4675      	mov	r5, lr
   1dbf6:	f103 39ff 	add.w	r9, r3, #4294967295
   1dbfa:	096c      	lsrs	r4, r5, #5
   1dbfc:	f005 011f 	and.w	r1, r5, #31
   1dc00:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1dc04:	291f      	cmp	r1, #31
   1dc06:	fa24 fc01 	lsr.w	ip, r4, r1
   1dc0a:	d00c      	beq.n	1dc26 <LLF_RND_AdaptiveProportionTest+0x4e>
   1dc0c:	f00c 0c01 	and.w	ip, ip, #1
   1dc10:	b94d      	cbnz	r5, 1dc26 <LLF_RND_AdaptiveProportionTest+0x4e>
   1dc12:	2601      	movs	r6, #1
   1dc14:	46e0      	mov	r8, ip
   1dc16:	4635      	mov	r5, r6
   1dc18:	46b6      	mov	lr, r6
   1dc1a:	e7ee      	b.n	1dbfa <LLF_RND_AdaptiveProportionTest+0x22>
   1dc1c:	4296      	cmp	r6, r2
   1dc1e:	d918      	bls.n	1dc52 <LLF_RND_AdaptiveProportionTest+0x7a>
   1dc20:	480d      	ldr	r0, [pc, #52]	; (1dc58 <LLF_RND_AdaptiveProportionTest+0x80>)
   1dc22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dc26:	4573      	cmp	r3, lr
   1dc28:	d00c      	beq.n	1dc44 <LLF_RND_AdaptiveProportionTest+0x6c>
   1dc2a:	45c4      	cmp	ip, r8
   1dc2c:	bf08      	it	eq
   1dc2e:	3601      	addeq	r6, #1
   1dc30:	45f1      	cmp	r9, lr
   1dc32:	d0f3      	beq.n	1dc1c <LLF_RND_AdaptiveProportionTest+0x44>
   1dc34:	f10e 0e01 	add.w	lr, lr, #1
   1dc38:	3501      	adds	r5, #1
   1dc3a:	42bd      	cmp	r5, r7
   1dc3c:	d1dd      	bne.n	1dbfa <LLF_RND_AdaptiveProportionTest+0x22>
   1dc3e:	2000      	movs	r0, #0
   1dc40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dc44:	f04f 0e01 	mov.w	lr, #1
   1dc48:	46e0      	mov	r8, ip
   1dc4a:	4676      	mov	r6, lr
   1dc4c:	e7f4      	b.n	1dc38 <LLF_RND_AdaptiveProportionTest+0x60>
   1dc4e:	4802      	ldr	r0, [pc, #8]	; (1dc58 <LLF_RND_AdaptiveProportionTest+0x80>)
   1dc50:	4770      	bx	lr
   1dc52:	469e      	mov	lr, r3
   1dc54:	e7f0      	b.n	1dc38 <LLF_RND_AdaptiveProportionTest+0x60>
   1dc56:	bf00      	nop
   1dc58:	00f10c37 	.word	0x00f10c37

0001dc5c <getTrngSource>:
   1dc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc60:	b091      	sub	sp, #68	; 0x44
   1dc62:	460d      	mov	r5, r1
   1dc64:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   1dc68:	4682      	mov	sl, r0
   1dc6a:	2900      	cmp	r1, #0
   1dc6c:	d16e      	bne.n	1dd4c <getTrngSource+0xf0>
   1dc6e:	6928      	ldr	r0, [r5, #16]
   1dc70:	9006      	str	r0, [sp, #24]
   1dc72:	981a      	ldr	r0, [sp, #104]	; 0x68
   1dc74:	601c      	str	r4, [r3, #0]
   1dc76:	2300      	movs	r3, #0
   1dc78:	6003      	str	r3, [r0, #0]
   1dc7a:	2a00      	cmp	r2, #0
   1dc7c:	f000 812e 	beq.w	1dedc <getTrngSource+0x280>
   1dc80:	4b9c      	ldr	r3, [pc, #624]	; (1def4 <getTrngSource+0x298>)
   1dc82:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1dc84:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1dc88:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1dc8c:	429a      	cmp	r2, r3
   1dc8e:	d169      	bne.n	1dd64 <getTrngSource+0x108>
   1dc90:	290a      	cmp	r1, #10
   1dc92:	d167      	bne.n	1dd64 <getTrngSource+0x108>
   1dc94:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1dc98:	9308      	str	r3, [sp, #32]
   1dc9a:	f104 0308 	add.w	r3, r4, #8
   1dc9e:	9906      	ldr	r1, [sp, #24]
   1dca0:	9307      	str	r3, [sp, #28]
   1dca2:	4b95      	ldr	r3, [pc, #596]	; (1def8 <getTrngSource+0x29c>)
   1dca4:	4c93      	ldr	r4, [pc, #588]	; (1def4 <getTrngSource+0x298>)
   1dca6:	fba3 2301 	umull	r2, r3, r3, r1
   1dcaa:	089b      	lsrs	r3, r3, #2
   1dcac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1dcb0:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   1dcb4:	9303      	str	r3, [sp, #12]
   1dcb6:	2304      	movs	r3, #4
   1dcb8:	9305      	str	r3, [sp, #20]
   1dcba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1dcbc:	9e06      	ldr	r6, [sp, #24]
   1dcbe:	601e      	str	r6, [r3, #0]
   1dcc0:	2e00      	cmp	r6, #0
   1dcc2:	f000 80e9 	beq.w	1de98 <getTrngSource+0x23c>
   1dcc6:	2700      	movs	r7, #0
   1dcc8:	f000 fcb8 	bl	1e63c <LLF_RND_TurnOffTrng>
   1dccc:	9709      	str	r7, [sp, #36]	; 0x24
   1dcce:	f1ba 0f00 	cmp.w	sl, #0
   1dcd2:	f000 80d5 	beq.w	1de80 <getTrngSource+0x224>
   1dcd6:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1dcda:	f04f 0901 	mov.w	r9, #1
   1dcde:	2d00      	cmp	r5, #0
   1dce0:	f000 80ce 	beq.w	1de80 <getTrngSource+0x224>
   1dce4:	9b08      	ldr	r3, [sp, #32]
   1dce6:	2b00      	cmp	r3, #0
   1dce8:	d03e      	beq.n	1dd68 <getTrngSource+0x10c>
   1dcea:	a908      	add	r1, sp, #32
   1dcec:	4628      	mov	r0, r5
   1dcee:	f000 fc95 	bl	1e61c <LLF_RND_GetFastestRosc>
   1dcf2:	2800      	cmp	r0, #0
   1dcf4:	d03a      	beq.n	1dd6c <getTrngSource+0x110>
   1dcf6:	4b81      	ldr	r3, [pc, #516]	; (1defc <getTrngSource+0x2a0>)
   1dcf8:	4298      	cmp	r0, r3
   1dcfa:	d020      	beq.n	1dd3e <getTrngSource+0xe2>
   1dcfc:	9b08      	ldr	r3, [sp, #32]
   1dcfe:	2b08      	cmp	r3, #8
   1dd00:	f000 80e4 	beq.w	1decc <getTrngSource+0x270>
   1dd04:	005b      	lsls	r3, r3, #1
   1dd06:	2200      	movs	r2, #0
   1dd08:	9308      	str	r3, [sp, #32]
   1dd0a:	9200      	str	r2, [sp, #0]
   1dd0c:	ab08      	add	r3, sp, #32
   1dd0e:	4629      	mov	r1, r5
   1dd10:	4650      	mov	r0, sl
   1dd12:	f7ff fe91 	bl	1da38 <startTrngHW>
   1dd16:	4b7a      	ldr	r3, [pc, #488]	; (1df00 <getTrngSource+0x2a4>)
   1dd18:	4298      	cmp	r0, r3
   1dd1a:	f000 80d3 	beq.w	1dec4 <getTrngSource+0x268>
   1dd1e:	b970      	cbnz	r0, 1dd3e <getTrngSource+0xe2>
   1dd20:	f8da 2000 	ldr.w	r2, [sl]
   1dd24:	0a13      	lsrs	r3, r2, #8
   1dd26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1dd2a:	4313      	orrs	r3, r2
   1dd2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1dd30:	f8ca 3000 	str.w	r3, [sl]
   1dd34:	9b05      	ldr	r3, [sp, #20]
   1dd36:	3b01      	subs	r3, #1
   1dd38:	9305      	str	r3, [sp, #20]
   1dd3a:	d1be      	bne.n	1dcba <getTrngSource+0x5e>
   1dd3c:	2000      	movs	r0, #0
   1dd3e:	9003      	str	r0, [sp, #12]
   1dd40:	f000 fc7c 	bl	1e63c <LLF_RND_TurnOffTrng>
   1dd44:	9803      	ldr	r0, [sp, #12]
   1dd46:	b011      	add	sp, #68	; 0x44
   1dd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1dd50:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   1dd54:	3601      	adds	r6, #1
   1dd56:	bf14      	ite	ne
   1dd58:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   1dd5c:	f44f 7004 	moveq.w	r0, #528	; 0x210
   1dd60:	9006      	str	r0, [sp, #24]
   1dd62:	e786      	b.n	1dc72 <getTrngSource+0x16>
   1dd64:	4867      	ldr	r0, [pc, #412]	; (1df04 <getTrngSource+0x2a8>)
   1dd66:	e7ea      	b.n	1dd3e <getTrngSource+0xe2>
   1dd68:	4865      	ldr	r0, [pc, #404]	; (1df00 <getTrngSource+0x2a4>)
   1dd6a:	e7c4      	b.n	1dcf6 <getTrngSource+0x9a>
   1dd6c:	9808      	ldr	r0, [sp, #32]
   1dd6e:	4629      	mov	r1, r5
   1dd70:	f000 fc3a 	bl	1e5e8 <LLF_RND_GetRoscSampleCnt>
   1dd74:	2800      	cmp	r0, #0
   1dd76:	d1be      	bne.n	1dcf6 <getTrngSource+0x9a>
   1dd78:	9b08      	ldr	r3, [sp, #32]
   1dd7a:	2b08      	cmp	r3, #8
   1dd7c:	f000 80a8 	beq.w	1ded0 <getTrngSource+0x274>
   1dd80:	2b04      	cmp	r3, #4
   1dd82:	f000 80a8 	beq.w	1ded6 <getTrngSource+0x27a>
   1dd86:	f1a3 0302 	sub.w	r3, r3, #2
   1dd8a:	fab3 f383 	clz	r3, r3
   1dd8e:	095b      	lsrs	r3, r3, #5
   1dd90:	9304      	str	r3, [sp, #16]
   1dd92:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1dd96:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1dd9a:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1dd9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1dda0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1dda4:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1dda8:	4293      	cmp	r3, r2
   1ddaa:	d1f6      	bne.n	1dd9a <getTrngSource+0x13e>
   1ddac:	f04f 0b00 	mov.w	fp, #0
   1ddb0:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   1ddb4:	f04f 30ff 	mov.w	r0, #4294967295
   1ddb8:	f7ff fd10 	bl	1d7dc <CC_HalClearInterruptBit>
   1ddbc:	f06f 031b 	mvn.w	r3, #27
   1ddc0:	4658      	mov	r0, fp
   1ddc2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ddc6:	f7ff fd17 	bl	1d7f8 <CC_HalMaskInterrupt>
   1ddca:	9b04      	ldr	r3, [sp, #16]
   1ddcc:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1ddd0:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1ddd4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1ddd8:	f7ff fd0e 	bl	1d7f8 <CC_HalMaskInterrupt>
   1dddc:	230a      	movs	r3, #10
   1ddde:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1dde2:	692b      	ldr	r3, [r5, #16]
   1dde4:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   1dde8:	fbab 2303 	umull	r2, r3, fp, r3
   1ddec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1ddee:	091b      	lsrs	r3, r3, #4
   1ddf0:	fb02 f303 	mul.w	r3, r2, r3
   1ddf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ddf8:	03db      	lsls	r3, r3, #15
   1ddfa:	099b      	lsrs	r3, r3, #6
   1ddfc:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   1de00:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1de04:	f8da 3000 	ldr.w	r3, [sl]
   1de08:	9908      	ldr	r1, [sp, #32]
   1de0a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1de0e:	020b      	lsls	r3, r1, #8
   1de10:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1de14:	4313      	orrs	r3, r2
   1de16:	f8ca 3000 	str.w	r3, [sl]
   1de1a:	a809      	add	r0, sp, #36	; 0x24
   1de1c:	f000 fbd4 	bl	1e5c8 <LLF_RND_WaitRngInterrupt>
   1de20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1de22:	f003 031a 	and.w	r3, r3, #26
   1de26:	4303      	orrs	r3, r0
   1de28:	f47f af68 	bne.w	1dcfc <getTrngSource+0xa0>
   1de2c:	fbab 3b06 	umull	r3, fp, fp, r6
   1de30:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1de34:	930a      	str	r3, [sp, #40]	; 0x28
   1de36:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1de3a:	930b      	str	r3, [sp, #44]	; 0x2c
   1de3c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1de40:	930c      	str	r3, [sp, #48]	; 0x30
   1de42:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1de46:	930d      	str	r3, [sp, #52]	; 0x34
   1de48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1de4c:	930e      	str	r3, [sp, #56]	; 0x38
   1de4e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1de52:	930f      	str	r3, [sp, #60]	; 0x3c
   1de54:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   1de58:	d101      	bne.n	1de5e <getTrngSource+0x202>
   1de5a:	9b03      	ldr	r3, [sp, #12]
   1de5c:	b993      	cbnz	r3, 1de84 <getTrngSource+0x228>
   1de5e:	4640      	mov	r0, r8
   1de60:	2218      	movs	r2, #24
   1de62:	a90a      	add	r1, sp, #40	; 0x28
   1de64:	3e18      	subs	r6, #24
   1de66:	f7ff fd47 	bl	1d8f8 <CC_PalMemCopyPlat>
   1de6a:	f108 0818 	add.w	r8, r8, #24
   1de6e:	3701      	adds	r7, #1
   1de70:	b196      	cbz	r6, 1de98 <getTrngSource+0x23c>
   1de72:	f000 fbe3 	bl	1e63c <LLF_RND_TurnOffTrng>
   1de76:	2300      	movs	r3, #0
   1de78:	9309      	str	r3, [sp, #36]	; 0x24
   1de7a:	2d00      	cmp	r5, #0
   1de7c:	f47f af32 	bne.w	1dce4 <getTrngSource+0x88>
   1de80:	4821      	ldr	r0, [pc, #132]	; (1df08 <getTrngSource+0x2ac>)
   1de82:	e738      	b.n	1dcf6 <getTrngSource+0x9a>
   1de84:	4640      	mov	r0, r8
   1de86:	1af6      	subs	r6, r6, r3
   1de88:	461a      	mov	r2, r3
   1de8a:	a90a      	add	r1, sp, #40	; 0x28
   1de8c:	4498      	add	r8, r3
   1de8e:	3701      	adds	r7, #1
   1de90:	f7ff fd32 	bl	1d8f8 <CC_PalMemCopyPlat>
   1de94:	2e00      	cmp	r6, #0
   1de96:	d1ec      	bne.n	1de72 <getTrngSource+0x216>
   1de98:	9f06      	ldr	r7, [sp, #24]
   1de9a:	9e07      	ldr	r6, [sp, #28]
   1de9c:	696a      	ldr	r2, [r5, #20]
   1de9e:	4639      	mov	r1, r7
   1dea0:	4630      	mov	r0, r6
   1dea2:	f7ff fe69 	bl	1db78 <LLF_RND_RepetitionCounterTest>
   1dea6:	69aa      	ldr	r2, [r5, #24]
   1dea8:	b940      	cbnz	r0, 1debc <getTrngSource+0x260>
   1deaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1deae:	4639      	mov	r1, r7
   1deb0:	4630      	mov	r0, r6
   1deb2:	f7ff fe91 	bl	1dbd8 <LLF_RND_AdaptiveProportionTest>
   1deb6:	2800      	cmp	r0, #0
   1deb8:	f43f af40 	beq.w	1dd3c <getTrngSource+0xe0>
   1debc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1debe:	2300      	movs	r3, #0
   1dec0:	6013      	str	r3, [r2, #0]
   1dec2:	e718      	b.n	1dcf6 <getTrngSource+0x9a>
   1dec4:	6a2b      	ldr	r3, [r5, #32]
   1dec6:	2b00      	cmp	r3, #0
   1dec8:	f43f af39 	beq.w	1dd3e <getTrngSource+0xe2>
   1decc:	480f      	ldr	r0, [pc, #60]	; (1df0c <getTrngSource+0x2b0>)
   1dece:	e736      	b.n	1dd3e <getTrngSource+0xe2>
   1ded0:	2303      	movs	r3, #3
   1ded2:	9304      	str	r3, [sp, #16]
   1ded4:	e75d      	b.n	1dd92 <getTrngSource+0x136>
   1ded6:	2302      	movs	r3, #2
   1ded8:	9304      	str	r3, [sp, #16]
   1deda:	e75a      	b.n	1dd92 <getTrngSource+0x136>
   1dedc:	9100      	str	r1, [sp, #0]
   1dede:	ab08      	add	r3, sp, #32
   1dee0:	2201      	movs	r2, #1
   1dee2:	4629      	mov	r1, r5
   1dee4:	4650      	mov	r0, sl
   1dee6:	f7ff fda7 	bl	1da38 <startTrngHW>
   1deea:	2800      	cmp	r0, #0
   1deec:	f43f aed5 	beq.w	1dc9a <getTrngSource+0x3e>
   1def0:	e725      	b.n	1dd3e <getTrngSource+0xe2>
   1def2:	bf00      	nop
   1def4:	5002b000 	.word	0x5002b000
   1def8:	aaaaaaab 	.word	0xaaaaaaab
   1defc:	00f10c02 	.word	0x00f10c02
   1df00:	00f10c31 	.word	0x00f10c31
   1df04:	00f10c30 	.word	0x00f10c30
   1df08:	00f10c35 	.word	0x00f10c35
   1df0c:	00f10c32 	.word	0x00f10c32

0001df10 <LLF_RND_GetTrngSource>:
   1df10:	b410      	push	{r4}
   1df12:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   1df16:	9401      	str	r4, [sp, #4]
   1df18:	9c03      	ldr	r4, [sp, #12]
   1df1a:	9402      	str	r4, [sp, #8]
   1df1c:	2400      	movs	r4, #0
   1df1e:	9403      	str	r4, [sp, #12]
   1df20:	bc10      	pop	{r4}
   1df22:	f7ff be9b 	b.w	1dc5c <getTrngSource>
   1df26:	bf00      	nop

0001df28 <LLF_RND_RunTrngStartupTest>:
   1df28:	b510      	push	{r4, lr}
   1df2a:	b086      	sub	sp, #24
   1df2c:	ab05      	add	r3, sp, #20
   1df2e:	2401      	movs	r4, #1
   1df30:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1df34:	9300      	str	r3, [sp, #0]
   1df36:	2200      	movs	r2, #0
   1df38:	ab04      	add	r3, sp, #16
   1df3a:	f7ff fe8f 	bl	1dc5c <getTrngSource>
   1df3e:	b006      	add	sp, #24
   1df40:	bd10      	pop	{r4, pc}
   1df42:	bf00      	nop

0001df44 <mbedtls_hardware_poll>:
   1df44:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df46:	b087      	sub	sp, #28
   1df48:	2900      	cmp	r1, #0
   1df4a:	d066      	beq.n	1e01a <mbedtls_hardware_poll+0xd6>
   1df4c:	461e      	mov	r6, r3
   1df4e:	2b00      	cmp	r3, #0
   1df50:	d063      	beq.n	1e01a <mbedtls_hardware_poll+0xd6>
   1df52:	4614      	mov	r4, r2
   1df54:	2a00      	cmp	r2, #0
   1df56:	d060      	beq.n	1e01a <mbedtls_hardware_poll+0xd6>
   1df58:	4f31      	ldr	r7, [pc, #196]	; (1e020 <mbedtls_hardware_poll+0xdc>)
   1df5a:	460d      	mov	r5, r1
   1df5c:	6838      	ldr	r0, [r7, #0]
   1df5e:	f04f 31ff 	mov.w	r1, #4294967295
   1df62:	f7ff fce5 	bl	1d930 <CC_PalMutexLock>
   1df66:	2800      	cmp	r0, #0
   1df68:	d14d      	bne.n	1e006 <mbedtls_hardware_poll+0xc2>
   1df6a:	2000      	movs	r0, #0
   1df6c:	f7ff fd10 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1df70:	2800      	cmp	r0, #0
   1df72:	d144      	bne.n	1dffe <mbedtls_hardware_poll+0xba>
   1df74:	482b      	ldr	r0, [pc, #172]	; (1e024 <mbedtls_hardware_poll+0xe0>)
   1df76:	f000 fa99 	bl	1e4ac <RNG_PLAT_SetUserRngParameters>
   1df7a:	4603      	mov	r3, r0
   1df7c:	b1d8      	cbz	r0, 1dfb6 <mbedtls_hardware_poll+0x72>
   1df7e:	2001      	movs	r0, #1
   1df80:	f04f 35ff 	mov.w	r5, #4294967295
   1df84:	f7ff fd04 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1df88:	2800      	cmp	r0, #0
   1df8a:	d134      	bne.n	1dff6 <mbedtls_hardware_poll+0xb2>
   1df8c:	4826      	ldr	r0, [pc, #152]	; (1e028 <mbedtls_hardware_poll+0xe4>)
   1df8e:	f44f 7108 	mov.w	r1, #544	; 0x220
   1df92:	f7fe fed9 	bl	1cd48 <mbedtls_zeroize_internal>
   1df96:	4825      	ldr	r0, [pc, #148]	; (1e02c <mbedtls_hardware_poll+0xe8>)
   1df98:	2104      	movs	r1, #4
   1df9a:	f7fe fed5 	bl	1cd48 <mbedtls_zeroize_internal>
   1df9e:	4821      	ldr	r0, [pc, #132]	; (1e024 <mbedtls_hardware_poll+0xe0>)
   1dfa0:	2128      	movs	r1, #40	; 0x28
   1dfa2:	f7fe fed1 	bl	1cd48 <mbedtls_zeroize_internal>
   1dfa6:	6838      	ldr	r0, [r7, #0]
   1dfa8:	f7ff fcca 	bl	1d940 <CC_PalMutexUnlock>
   1dfac:	2800      	cmp	r0, #0
   1dfae:	d12e      	bne.n	1e00e <mbedtls_hardware_poll+0xca>
   1dfb0:	4628      	mov	r0, r5
   1dfb2:	b007      	add	sp, #28
   1dfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dfb6:	4a1c      	ldr	r2, [pc, #112]	; (1e028 <mbedtls_hardware_poll+0xe4>)
   1dfb8:	9202      	str	r2, [sp, #8]
   1dfba:	aa05      	add	r2, sp, #20
   1dfbc:	9201      	str	r2, [sp, #4]
   1dfbe:	aa04      	add	r2, sp, #16
   1dfc0:	9003      	str	r0, [sp, #12]
   1dfc2:	9200      	str	r2, [sp, #0]
   1dfc4:	4917      	ldr	r1, [pc, #92]	; (1e024 <mbedtls_hardware_poll+0xe0>)
   1dfc6:	4819      	ldr	r0, [pc, #100]	; (1e02c <mbedtls_hardware_poll+0xe8>)
   1dfc8:	461a      	mov	r2, r3
   1dfca:	f7ff ffa1 	bl	1df10 <LLF_RND_GetTrngSource>
   1dfce:	4603      	mov	r3, r0
   1dfd0:	2800      	cmp	r0, #0
   1dfd2:	d1d4      	bne.n	1df7e <mbedtls_hardware_poll+0x3a>
   1dfd4:	4628      	mov	r0, r5
   1dfd6:	461d      	mov	r5, r3
   1dfd8:	9b05      	ldr	r3, [sp, #20]
   1dfda:	9904      	ldr	r1, [sp, #16]
   1dfdc:	429c      	cmp	r4, r3
   1dfde:	4622      	mov	r2, r4
   1dfe0:	bf28      	it	cs
   1dfe2:	461a      	movcs	r2, r3
   1dfe4:	6032      	str	r2, [r6, #0]
   1dfe6:	3108      	adds	r1, #8
   1dfe8:	f7ff fc86 	bl	1d8f8 <CC_PalMemCopyPlat>
   1dfec:	2001      	movs	r0, #1
   1dfee:	f7ff fccf 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1dff2:	2800      	cmp	r0, #0
   1dff4:	d0ca      	beq.n	1df8c <mbedtls_hardware_poll+0x48>
   1dff6:	480e      	ldr	r0, [pc, #56]	; (1e030 <mbedtls_hardware_poll+0xec>)
   1dff8:	f7fe fd8e 	bl	1cb18 <CC_PalAbort>
   1dffc:	e7c6      	b.n	1df8c <mbedtls_hardware_poll+0x48>
   1dffe:	480d      	ldr	r0, [pc, #52]	; (1e034 <mbedtls_hardware_poll+0xf0>)
   1e000:	f7fe fd8a 	bl	1cb18 <CC_PalAbort>
   1e004:	e7b6      	b.n	1df74 <mbedtls_hardware_poll+0x30>
   1e006:	480c      	ldr	r0, [pc, #48]	; (1e038 <mbedtls_hardware_poll+0xf4>)
   1e008:	f7fe fd86 	bl	1cb18 <CC_PalAbort>
   1e00c:	e7ad      	b.n	1df6a <mbedtls_hardware_poll+0x26>
   1e00e:	480b      	ldr	r0, [pc, #44]	; (1e03c <mbedtls_hardware_poll+0xf8>)
   1e010:	f7fe fd82 	bl	1cb18 <CC_PalAbort>
   1e014:	4628      	mov	r0, r5
   1e016:	b007      	add	sp, #28
   1e018:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e01a:	f04f 35ff 	mov.w	r5, #4294967295
   1e01e:	e7c7      	b.n	1dfb0 <mbedtls_hardware_poll+0x6c>
   1e020:	200006e8 	.word	0x200006e8
   1e024:	20003618 	.word	0x20003618
   1e028:	20003640 	.word	0x20003640
   1e02c:	20003614 	.word	0x20003614
   1e030:	00025548 	.word	0x00025548
   1e034:	00025528 	.word	0x00025528
   1e038:	00025510 	.word	0x00025510
   1e03c:	000255a0 	.word	0x000255a0

0001e040 <cc_mbedtls_aes_init>:
   1e040:	b510      	push	{r4, lr}
   1e042:	4604      	mov	r4, r0
   1e044:	b130      	cbz	r0, 1e054 <cc_mbedtls_aes_init+0x14>
   1e046:	2200      	movs	r2, #0
   1e048:	2301      	movs	r3, #1
   1e04a:	6562      	str	r2, [r4, #84]	; 0x54
   1e04c:	65a2      	str	r2, [r4, #88]	; 0x58
   1e04e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e050:	6623      	str	r3, [r4, #96]	; 0x60
   1e052:	bd10      	pop	{r4, pc}
   1e054:	4801      	ldr	r0, [pc, #4]	; (1e05c <cc_mbedtls_aes_init+0x1c>)
   1e056:	f7fe fd5f 	bl	1cb18 <CC_PalAbort>
   1e05a:	e7f4      	b.n	1e046 <cc_mbedtls_aes_init+0x6>
   1e05c:	000255b8 	.word	0x000255b8

0001e060 <cc_mbedtls_aes_free>:
   1e060:	b118      	cbz	r0, 1e06a <cc_mbedtls_aes_free+0xa>
   1e062:	2274      	movs	r2, #116	; 0x74
   1e064:	2100      	movs	r1, #0
   1e066:	f7ff bc49 	b.w	1d8fc <CC_PalMemSetPlat>
   1e06a:	4770      	bx	lr

0001e06c <cc_mbedtls_aes_setkey_enc>:
   1e06c:	b190      	cbz	r0, 1e094 <cc_mbedtls_aes_setkey_enc+0x28>
   1e06e:	b1a1      	cbz	r1, 1e09a <cc_mbedtls_aes_setkey_enc+0x2e>
   1e070:	b510      	push	{r4, lr}
   1e072:	2a80      	cmp	r2, #128	; 0x80
   1e074:	f04f 0400 	mov.w	r4, #0
   1e078:	6384      	str	r4, [r0, #56]	; 0x38
   1e07a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1e07e:	d106      	bne.n	1e08e <cc_mbedtls_aes_setkey_enc+0x22>
   1e080:	2210      	movs	r2, #16
   1e082:	6304      	str	r4, [r0, #48]	; 0x30
   1e084:	4410      	add	r0, r2
   1e086:	f7ff fc37 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e08a:	4620      	mov	r0, r4
   1e08c:	bd10      	pop	{r4, pc}
   1e08e:	f06f 001f 	mvn.w	r0, #31
   1e092:	bd10      	pop	{r4, pc}
   1e094:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e098:	4770      	bx	lr
   1e09a:	f06f 001f 	mvn.w	r0, #31
   1e09e:	4770      	bx	lr

0001e0a0 <cc_mbedtls_aes_crypt_ecb>:
   1e0a0:	b328      	cbz	r0, 1e0ee <cc_mbedtls_aes_crypt_ecb+0x4e>
   1e0a2:	b322      	cbz	r2, 1e0ee <cc_mbedtls_aes_crypt_ecb+0x4e>
   1e0a4:	b31b      	cbz	r3, 1e0ee <cc_mbedtls_aes_crypt_ecb+0x4e>
   1e0a6:	2901      	cmp	r1, #1
   1e0a8:	d821      	bhi.n	1e0ee <cc_mbedtls_aes_crypt_ecb+0x4e>
   1e0aa:	b570      	push	{r4, r5, r6, lr}
   1e0ac:	4604      	mov	r4, r0
   1e0ae:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1e0b0:	b086      	sub	sp, #24
   1e0b2:	d017      	beq.n	1e0e4 <cc_mbedtls_aes_crypt_ecb+0x44>
   1e0b4:	2901      	cmp	r1, #1
   1e0b6:	d117      	bne.n	1e0e8 <cc_mbedtls_aes_crypt_ecb+0x48>
   1e0b8:	2510      	movs	r5, #16
   1e0ba:	2100      	movs	r1, #0
   1e0bc:	eb0d 0605 	add.w	r6, sp, r5
   1e0c0:	6361      	str	r1, [r4, #52]	; 0x34
   1e0c2:	4610      	mov	r0, r2
   1e0c4:	9500      	str	r5, [sp, #0]
   1e0c6:	9601      	str	r6, [sp, #4]
   1e0c8:	aa02      	add	r2, sp, #8
   1e0ca:	4629      	mov	r1, r5
   1e0cc:	f000 fac2 	bl	1e654 <SetDataBuffersInfo>
   1e0d0:	b950      	cbnz	r0, 1e0e8 <cc_mbedtls_aes_crypt_ecb+0x48>
   1e0d2:	462b      	mov	r3, r5
   1e0d4:	4632      	mov	r2, r6
   1e0d6:	a902      	add	r1, sp, #8
   1e0d8:	4620      	mov	r0, r4
   1e0da:	f000 fd43 	bl	1eb64 <ProcessAesDrv>
   1e0de:	b918      	cbnz	r0, 1e0e8 <cc_mbedtls_aes_crypt_ecb+0x48>
   1e0e0:	b006      	add	sp, #24
   1e0e2:	bd70      	pop	{r4, r5, r6, pc}
   1e0e4:	2900      	cmp	r1, #0
   1e0e6:	d0e7      	beq.n	1e0b8 <cc_mbedtls_aes_crypt_ecb+0x18>
   1e0e8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e0ec:	e7f8      	b.n	1e0e0 <cc_mbedtls_aes_crypt_ecb+0x40>
   1e0ee:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e0f2:	4770      	bx	lr

0001e0f4 <cc_mbedtls_sha256_init>:
   1e0f4:	b510      	push	{r4, lr}
   1e0f6:	4604      	mov	r4, r0
   1e0f8:	b128      	cbz	r0, 1e106 <cc_mbedtls_sha256_init+0x12>
   1e0fa:	4620      	mov	r0, r4
   1e0fc:	21f4      	movs	r1, #244	; 0xf4
   1e0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e102:	f7ff bbfd 	b.w	1d900 <CC_PalMemSetZeroPlat>
   1e106:	4804      	ldr	r0, [pc, #16]	; (1e118 <cc_mbedtls_sha256_init+0x24>)
   1e108:	f7fe fd06 	bl	1cb18 <CC_PalAbort>
   1e10c:	4620      	mov	r0, r4
   1e10e:	21f4      	movs	r1, #244	; 0xf4
   1e110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e114:	f7ff bbf4 	b.w	1d900 <CC_PalMemSetZeroPlat>
   1e118:	000255cc 	.word	0x000255cc

0001e11c <cc_mbedtls_sha256_free>:
   1e11c:	b110      	cbz	r0, 1e124 <cc_mbedtls_sha256_free+0x8>
   1e11e:	21f4      	movs	r1, #244	; 0xf4
   1e120:	f7fe be12 	b.w	1cd48 <mbedtls_zeroize_internal>
   1e124:	4770      	bx	lr
   1e126:	bf00      	nop

0001e128 <cc_mbedtls_sha256_starts>:
   1e128:	b508      	push	{r3, lr}
   1e12a:	b121      	cbz	r1, 1e136 <cc_mbedtls_sha256_starts+0xe>
   1e12c:	2901      	cmp	r1, #1
   1e12e:	d008      	beq.n	1e142 <cc_mbedtls_sha256_starts+0x1a>
   1e130:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e134:	bd08      	pop	{r3, pc}
   1e136:	2101      	movs	r1, #1
   1e138:	f000 f858 	bl	1e1ec <mbedtls_sha_starts_internal>
   1e13c:	2800      	cmp	r0, #0
   1e13e:	d1f7      	bne.n	1e130 <cc_mbedtls_sha256_starts+0x8>
   1e140:	bd08      	pop	{r3, pc}
   1e142:	2102      	movs	r1, #2
   1e144:	f000 f852 	bl	1e1ec <mbedtls_sha_starts_internal>
   1e148:	2800      	cmp	r0, #0
   1e14a:	d0f9      	beq.n	1e140 <cc_mbedtls_sha256_starts+0x18>
   1e14c:	e7f0      	b.n	1e130 <cc_mbedtls_sha256_starts+0x8>
   1e14e:	bf00      	nop

0001e150 <cc_mbedtls_sha256_update>:
   1e150:	b530      	push	{r4, r5, lr}
   1e152:	4605      	mov	r5, r0
   1e154:	1888      	adds	r0, r1, r2
   1e156:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1e15a:	b0a1      	sub	sp, #132	; 0x84
   1e15c:	460b      	mov	r3, r1
   1e15e:	4614      	mov	r4, r2
   1e160:	d801      	bhi.n	1e166 <cc_mbedtls_sha256_update+0x16>
   1e162:	2a80      	cmp	r2, #128	; 0x80
   1e164:	d90c      	bls.n	1e180 <cc_mbedtls_sha256_update+0x30>
   1e166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e16a:	d917      	bls.n	1e19c <cc_mbedtls_sha256_update+0x4c>
   1e16c:	4622      	mov	r2, r4
   1e16e:	4619      	mov	r1, r3
   1e170:	4628      	mov	r0, r5
   1e172:	f000 f87d 	bl	1e270 <mbedtls_sha_update_internal>
   1e176:	4604      	mov	r4, r0
   1e178:	b984      	cbnz	r4, 1e19c <cc_mbedtls_sha256_update+0x4c>
   1e17a:	4620      	mov	r0, r4
   1e17c:	b021      	add	sp, #132	; 0x84
   1e17e:	bd30      	pop	{r4, r5, pc}
   1e180:	4668      	mov	r0, sp
   1e182:	f7ff fbb9 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e186:	4622      	mov	r2, r4
   1e188:	4669      	mov	r1, sp
   1e18a:	4628      	mov	r0, r5
   1e18c:	f000 f870 	bl	1e270 <mbedtls_sha_update_internal>
   1e190:	2180      	movs	r1, #128	; 0x80
   1e192:	4604      	mov	r4, r0
   1e194:	4668      	mov	r0, sp
   1e196:	f7ff fbb3 	bl	1d900 <CC_PalMemSetZeroPlat>
   1e19a:	e7ed      	b.n	1e178 <cc_mbedtls_sha256_update+0x28>
   1e19c:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1e1a0:	e7eb      	b.n	1e17a <cc_mbedtls_sha256_update+0x2a>
   1e1a2:	bf00      	nop

0001e1a4 <cc_mbedtls_sha256_finish>:
   1e1a4:	b570      	push	{r4, r5, r6, lr}
   1e1a6:	b1e8      	cbz	r0, 1e1e4 <cc_mbedtls_sha256_finish+0x40>
   1e1a8:	460e      	mov	r6, r1
   1e1aa:	b1d9      	cbz	r1, 1e1e4 <cc_mbedtls_sha256_finish+0x40>
   1e1ac:	4604      	mov	r4, r0
   1e1ae:	f000 f831 	bl	1e214 <mbedtls_sha_finish_internal>
   1e1b2:	4605      	mov	r5, r0
   1e1b4:	b9b0      	cbnz	r0, 1e1e4 <cc_mbedtls_sha256_finish+0x40>
   1e1b6:	6823      	ldr	r3, [r4, #0]
   1e1b8:	2b01      	cmp	r3, #1
   1e1ba:	d00b      	beq.n	1e1d4 <cc_mbedtls_sha256_finish+0x30>
   1e1bc:	2b02      	cmp	r3, #2
   1e1be:	d001      	beq.n	1e1c4 <cc_mbedtls_sha256_finish+0x20>
   1e1c0:	4628      	mov	r0, r5
   1e1c2:	bd70      	pop	{r4, r5, r6, pc}
   1e1c4:	221c      	movs	r2, #28
   1e1c6:	f104 0108 	add.w	r1, r4, #8
   1e1ca:	4630      	mov	r0, r6
   1e1cc:	f7ff fb94 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e1d0:	4628      	mov	r0, r5
   1e1d2:	bd70      	pop	{r4, r5, r6, pc}
   1e1d4:	2220      	movs	r2, #32
   1e1d6:	f104 0108 	add.w	r1, r4, #8
   1e1da:	4630      	mov	r0, r6
   1e1dc:	f7ff fb8c 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e1e0:	4628      	mov	r0, r5
   1e1e2:	bd70      	pop	{r4, r5, r6, pc}
   1e1e4:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1e1e8:	e7ea      	b.n	1e1c0 <cc_mbedtls_sha256_finish+0x1c>
   1e1ea:	bf00      	nop

0001e1ec <mbedtls_sha_starts_internal>:
   1e1ec:	b178      	cbz	r0, 1e20e <mbedtls_sha_starts_internal+0x22>
   1e1ee:	b538      	push	{r3, r4, r5, lr}
   1e1f0:	4604      	mov	r4, r0
   1e1f2:	460d      	mov	r5, r1
   1e1f4:	21f0      	movs	r1, #240	; 0xf0
   1e1f6:	f7ff fb83 	bl	1d900 <CC_PalMemSetZeroPlat>
   1e1fa:	2340      	movs	r3, #64	; 0x40
   1e1fc:	6025      	str	r5, [r4, #0]
   1e1fe:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e200:	4620      	mov	r0, r4
   1e202:	f000 fa5b 	bl	1e6bc <InitHashDrv>
   1e206:	3800      	subs	r0, #0
   1e208:	bf18      	it	ne
   1e20a:	2001      	movne	r0, #1
   1e20c:	bd38      	pop	{r3, r4, r5, pc}
   1e20e:	2001      	movs	r0, #1
   1e210:	4770      	bx	lr
   1e212:	bf00      	nop

0001e214 <mbedtls_sha_finish_internal>:
   1e214:	b570      	push	{r4, r5, r6, lr}
   1e216:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1e218:	b0a4      	sub	sp, #144	; 0x90
   1e21a:	4604      	mov	r4, r0
   1e21c:	ae04      	add	r6, sp, #16
   1e21e:	b9e5      	cbnz	r5, 1e25a <mbedtls_sha_finish_internal+0x46>
   1e220:	2201      	movs	r2, #1
   1e222:	2300      	movs	r3, #0
   1e224:	6062      	str	r2, [r4, #4]
   1e226:	4630      	mov	r0, r6
   1e228:	e9cd 3300 	strd	r3, r3, [sp]
   1e22c:	aa02      	add	r2, sp, #8
   1e22e:	4629      	mov	r1, r5
   1e230:	f000 fa10 	bl	1e654 <SetDataBuffersInfo>
   1e234:	b110      	cbz	r0, 1e23c <mbedtls_sha_finish_internal+0x28>
   1e236:	2001      	movs	r0, #1
   1e238:	b024      	add	sp, #144	; 0x90
   1e23a:	bd70      	pop	{r4, r5, r6, pc}
   1e23c:	462a      	mov	r2, r5
   1e23e:	a902      	add	r1, sp, #8
   1e240:	4620      	mov	r0, r4
   1e242:	f000 fa63 	bl	1e70c <ProcessHashDrv>
   1e246:	2800      	cmp	r0, #0
   1e248:	d1f5      	bne.n	1e236 <mbedtls_sha_finish_internal+0x22>
   1e24a:	4620      	mov	r0, r4
   1e24c:	f000 fb74 	bl	1e938 <FinishHashDrv>
   1e250:	2800      	cmp	r0, #0
   1e252:	d1f0      	bne.n	1e236 <mbedtls_sha_finish_internal+0x22>
   1e254:	6620      	str	r0, [r4, #96]	; 0x60
   1e256:	b024      	add	sp, #144	; 0x90
   1e258:	bd70      	pop	{r4, r5, r6, pc}
   1e25a:	2d80      	cmp	r5, #128	; 0x80
   1e25c:	462a      	mov	r2, r5
   1e25e:	f100 0164 	add.w	r1, r0, #100	; 0x64
   1e262:	bf28      	it	cs
   1e264:	2280      	movcs	r2, #128	; 0x80
   1e266:	4630      	mov	r0, r6
   1e268:	f7ff fb46 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e26c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e26e:	e7d7      	b.n	1e220 <mbedtls_sha_finish_internal+0xc>

0001e270 <mbedtls_sha_update_internal>:
   1e270:	2800      	cmp	r0, #0
   1e272:	f000 80ae 	beq.w	1e3d2 <mbedtls_sha_update_internal+0x162>
   1e276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e27a:	4614      	mov	r4, r2
   1e27c:	b0a5      	sub	sp, #148	; 0x94
   1e27e:	2a00      	cmp	r2, #0
   1e280:	d03d      	beq.n	1e2fe <mbedtls_sha_update_internal+0x8e>
   1e282:	460f      	mov	r7, r1
   1e284:	2900      	cmp	r1, #0
   1e286:	d049      	beq.n	1e31c <mbedtls_sha_update_internal+0xac>
   1e288:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1e28c:	4605      	mov	r5, r0
   1e28e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1e290:	d320      	bcc.n	1e2d4 <mbedtls_sha_update_internal+0x64>
   1e292:	f64f 78ff 	movw	r8, #65535	; 0xffff
   1e296:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   1e29a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e29c:	1a1a      	subs	r2, r3, r0
   1e29e:	fbb2 f1f3 	udiv	r1, r2, r3
   1e2a2:	fb03 2211 	mls	r2, r3, r1, r2
   1e2a6:	2a00      	cmp	r2, #0
   1e2a8:	d165      	bne.n	1e376 <mbedtls_sha_update_internal+0x106>
   1e2aa:	4283      	cmp	r3, r0
   1e2ac:	46b9      	mov	r9, r7
   1e2ae:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e2b2:	d072      	beq.n	1e39a <mbedtls_sha_update_internal+0x12a>
   1e2b4:	fbb6 fbf3 	udiv	fp, r6, r3
   1e2b8:	fb03 fb0b 	mul.w	fp, r3, fp
   1e2bc:	f1bb 0f00 	cmp.w	fp, #0
   1e2c0:	d130      	bne.n	1e324 <mbedtls_sha_update_internal+0xb4>
   1e2c2:	2e00      	cmp	r6, #0
   1e2c4:	d145      	bne.n	1e352 <mbedtls_sha_update_internal+0xe2>
   1e2c6:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   1e2ca:	3cff      	subs	r4, #255	; 0xff
   1e2cc:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1e2d0:	4447      	add	r7, r8
   1e2d2:	d2e2      	bcs.n	1e29a <mbedtls_sha_update_internal+0x2a>
   1e2d4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e2d6:	1a16      	subs	r6, r2, r0
   1e2d8:	fbb6 f3f2 	udiv	r3, r6, r2
   1e2dc:	fb02 6613 	mls	r6, r2, r3, r6
   1e2e0:	42a6      	cmp	r6, r4
   1e2e2:	bf28      	it	cs
   1e2e4:	4626      	movcs	r6, r4
   1e2e6:	2e00      	cmp	r6, #0
   1e2e8:	d175      	bne.n	1e3d6 <mbedtls_sha_update_internal+0x166>
   1e2ea:	4282      	cmp	r2, r0
   1e2ec:	f000 808d 	beq.w	1e40a <mbedtls_sha_update_internal+0x19a>
   1e2f0:	fbb4 f6f2 	udiv	r6, r4, r2
   1e2f4:	fb02 f606 	mul.w	r6, r2, r6
   1e2f8:	b92e      	cbnz	r6, 1e306 <mbedtls_sha_update_internal+0x96>
   1e2fa:	2c00      	cmp	r4, #0
   1e2fc:	d179      	bne.n	1e3f2 <mbedtls_sha_update_internal+0x182>
   1e2fe:	2000      	movs	r0, #0
   1e300:	b025      	add	sp, #148	; 0x94
   1e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e306:	2300      	movs	r3, #0
   1e308:	e9cd 3300 	strd	r3, r3, [sp]
   1e30c:	aa02      	add	r2, sp, #8
   1e30e:	4631      	mov	r1, r6
   1e310:	4638      	mov	r0, r7
   1e312:	f000 f99f 	bl	1e654 <SetDataBuffersInfo>
   1e316:	2800      	cmp	r0, #0
   1e318:	f000 8095 	beq.w	1e446 <mbedtls_sha_update_internal+0x1d6>
   1e31c:	2001      	movs	r0, #1
   1e31e:	b025      	add	sp, #148	; 0x94
   1e320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e324:	2300      	movs	r3, #0
   1e326:	e9cd 3300 	strd	r3, r3, [sp]
   1e32a:	aa02      	add	r2, sp, #8
   1e32c:	4659      	mov	r1, fp
   1e32e:	4648      	mov	r0, r9
   1e330:	f000 f990 	bl	1e654 <SetDataBuffersInfo>
   1e334:	2800      	cmp	r0, #0
   1e336:	d1f1      	bne.n	1e31c <mbedtls_sha_update_internal+0xac>
   1e338:	a902      	add	r1, sp, #8
   1e33a:	465a      	mov	r2, fp
   1e33c:	4628      	mov	r0, r5
   1e33e:	f000 f9e5 	bl	1e70c <ProcessHashDrv>
   1e342:	2800      	cmp	r0, #0
   1e344:	d1ea      	bne.n	1e31c <mbedtls_sha_update_internal+0xac>
   1e346:	eba6 060b 	sub.w	r6, r6, fp
   1e34a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e34c:	44d9      	add	r9, fp
   1e34e:	2e00      	cmp	r6, #0
   1e350:	d0b9      	beq.n	1e2c6 <mbedtls_sha_update_internal+0x56>
   1e352:	3019      	adds	r0, #25
   1e354:	4649      	mov	r1, r9
   1e356:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1e35a:	4632      	mov	r2, r6
   1e35c:	f7ff facc 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e360:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   1e364:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e366:	3cff      	subs	r4, #255	; 0xff
   1e368:	4430      	add	r0, r6
   1e36a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1e36e:	4447      	add	r7, r8
   1e370:	6628      	str	r0, [r5, #96]	; 0x60
   1e372:	d292      	bcs.n	1e29a <mbedtls_sha_update_internal+0x2a>
   1e374:	e7ae      	b.n	1e2d4 <mbedtls_sha_update_internal+0x64>
   1e376:	4542      	cmp	r2, r8
   1e378:	bf28      	it	cs
   1e37a:	4642      	movcs	r2, r8
   1e37c:	4450      	add	r0, sl
   1e37e:	4639      	mov	r1, r7
   1e380:	4616      	mov	r6, r2
   1e382:	f7ff fab9 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e386:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e388:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e38a:	4430      	add	r0, r6
   1e38c:	4283      	cmp	r3, r0
   1e38e:	eb07 0906 	add.w	r9, r7, r6
   1e392:	6628      	str	r0, [r5, #96]	; 0x60
   1e394:	eba8 0606 	sub.w	r6, r8, r6
   1e398:	d18c      	bne.n	1e2b4 <mbedtls_sha_update_internal+0x44>
   1e39a:	2b80      	cmp	r3, #128	; 0x80
   1e39c:	bf28      	it	cs
   1e39e:	2380      	movcs	r3, #128	; 0x80
   1e3a0:	461a      	mov	r2, r3
   1e3a2:	4651      	mov	r1, sl
   1e3a4:	a804      	add	r0, sp, #16
   1e3a6:	f7ff faa7 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e3aa:	2300      	movs	r3, #0
   1e3ac:	e9cd 3300 	strd	r3, r3, [sp]
   1e3b0:	aa02      	add	r2, sp, #8
   1e3b2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e3b4:	a804      	add	r0, sp, #16
   1e3b6:	f000 f94d 	bl	1e654 <SetDataBuffersInfo>
   1e3ba:	2800      	cmp	r0, #0
   1e3bc:	d1ae      	bne.n	1e31c <mbedtls_sha_update_internal+0xac>
   1e3be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e3c0:	a902      	add	r1, sp, #8
   1e3c2:	4628      	mov	r0, r5
   1e3c4:	f000 f9a2 	bl	1e70c <ProcessHashDrv>
   1e3c8:	2800      	cmp	r0, #0
   1e3ca:	d1a7      	bne.n	1e31c <mbedtls_sha_update_internal+0xac>
   1e3cc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e3ce:	6628      	str	r0, [r5, #96]	; 0x60
   1e3d0:	e770      	b.n	1e2b4 <mbedtls_sha_update_internal+0x44>
   1e3d2:	2001      	movs	r0, #1
   1e3d4:	4770      	bx	lr
   1e3d6:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1e3da:	4639      	mov	r1, r7
   1e3dc:	4632      	mov	r2, r6
   1e3de:	4418      	add	r0, r3
   1e3e0:	f7ff fa8a 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e3e4:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e3e6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e3e8:	4430      	add	r0, r6
   1e3ea:	1ba4      	subs	r4, r4, r6
   1e3ec:	4437      	add	r7, r6
   1e3ee:	6628      	str	r0, [r5, #96]	; 0x60
   1e3f0:	e77b      	b.n	1e2ea <mbedtls_sha_update_internal+0x7a>
   1e3f2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e3f4:	3319      	adds	r3, #25
   1e3f6:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   1e3fa:	4622      	mov	r2, r4
   1e3fc:	4639      	mov	r1, r7
   1e3fe:	f7ff fa7b 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e402:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e404:	4423      	add	r3, r4
   1e406:	662b      	str	r3, [r5, #96]	; 0x60
   1e408:	e779      	b.n	1e2fe <mbedtls_sha_update_internal+0x8e>
   1e40a:	2a80      	cmp	r2, #128	; 0x80
   1e40c:	bf28      	it	cs
   1e40e:	2280      	movcs	r2, #128	; 0x80
   1e410:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1e414:	a804      	add	r0, sp, #16
   1e416:	f7ff fa6f 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e41a:	2300      	movs	r3, #0
   1e41c:	e9cd 3300 	strd	r3, r3, [sp]
   1e420:	a804      	add	r0, sp, #16
   1e422:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e424:	aa02      	add	r2, sp, #8
   1e426:	f000 f915 	bl	1e654 <SetDataBuffersInfo>
   1e42a:	2800      	cmp	r0, #0
   1e42c:	f47f af76 	bne.w	1e31c <mbedtls_sha_update_internal+0xac>
   1e430:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e432:	a902      	add	r1, sp, #8
   1e434:	4628      	mov	r0, r5
   1e436:	f000 f969 	bl	1e70c <ProcessHashDrv>
   1e43a:	2800      	cmp	r0, #0
   1e43c:	f47f af6e 	bne.w	1e31c <mbedtls_sha_update_internal+0xac>
   1e440:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e442:	6628      	str	r0, [r5, #96]	; 0x60
   1e444:	e754      	b.n	1e2f0 <mbedtls_sha_update_internal+0x80>
   1e446:	a902      	add	r1, sp, #8
   1e448:	4632      	mov	r2, r6
   1e44a:	4628      	mov	r0, r5
   1e44c:	f000 f95e 	bl	1e70c <ProcessHashDrv>
   1e450:	2800      	cmp	r0, #0
   1e452:	f47f af63 	bne.w	1e31c <mbedtls_sha_update_internal+0xac>
   1e456:	4437      	add	r7, r6
   1e458:	1ba4      	subs	r4, r4, r6
   1e45a:	e74e      	b.n	1e2fa <mbedtls_sha_update_internal+0x8a>

0001e45c <cc_mbedtls_sha256>:
   1e45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e45e:	461c      	mov	r4, r3
   1e460:	4605      	mov	r5, r0
   1e462:	4811      	ldr	r0, [pc, #68]	; (1e4a8 <cc_mbedtls_sha256+0x4c>)
   1e464:	460e      	mov	r6, r1
   1e466:	4617      	mov	r7, r2
   1e468:	f7ff fe44 	bl	1e0f4 <cc_mbedtls_sha256_init>
   1e46c:	4621      	mov	r1, r4
   1e46e:	480e      	ldr	r0, [pc, #56]	; (1e4a8 <cc_mbedtls_sha256+0x4c>)
   1e470:	f7ff fe5a 	bl	1e128 <cc_mbedtls_sha256_starts>
   1e474:	4604      	mov	r4, r0
   1e476:	b120      	cbz	r0, 1e482 <cc_mbedtls_sha256+0x26>
   1e478:	480b      	ldr	r0, [pc, #44]	; (1e4a8 <cc_mbedtls_sha256+0x4c>)
   1e47a:	f7ff fe4f 	bl	1e11c <cc_mbedtls_sha256_free>
   1e47e:	4620      	mov	r0, r4
   1e480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e482:	4809      	ldr	r0, [pc, #36]	; (1e4a8 <cc_mbedtls_sha256+0x4c>)
   1e484:	4632      	mov	r2, r6
   1e486:	4629      	mov	r1, r5
   1e488:	f7ff fe62 	bl	1e150 <cc_mbedtls_sha256_update>
   1e48c:	4604      	mov	r4, r0
   1e48e:	2800      	cmp	r0, #0
   1e490:	d1f2      	bne.n	1e478 <cc_mbedtls_sha256+0x1c>
   1e492:	4639      	mov	r1, r7
   1e494:	4804      	ldr	r0, [pc, #16]	; (1e4a8 <cc_mbedtls_sha256+0x4c>)
   1e496:	f7ff fe85 	bl	1e1a4 <cc_mbedtls_sha256_finish>
   1e49a:	4604      	mov	r4, r0
   1e49c:	4802      	ldr	r0, [pc, #8]	; (1e4a8 <cc_mbedtls_sha256+0x4c>)
   1e49e:	f7ff fe3d 	bl	1e11c <cc_mbedtls_sha256_free>
   1e4a2:	4620      	mov	r0, r4
   1e4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4a6:	bf00      	nop
   1e4a8:	20003860 	.word	0x20003860

0001e4ac <RNG_PLAT_SetUserRngParameters>:
   1e4ac:	b530      	push	{r4, r5, lr}
   1e4ae:	b083      	sub	sp, #12
   1e4b0:	231c      	movs	r3, #28
   1e4b2:	a901      	add	r1, sp, #4
   1e4b4:	4605      	mov	r5, r0
   1e4b6:	9301      	str	r3, [sp, #4]
   1e4b8:	f000 f832 	bl	1e520 <CC_PalTrngParamGet>
   1e4bc:	4604      	mov	r4, r0
   1e4be:	b938      	cbnz	r0, 1e4d0 <RNG_PLAT_SetUserRngParameters+0x24>
   1e4c0:	9b01      	ldr	r3, [sp, #4]
   1e4c2:	2b1c      	cmp	r3, #28
   1e4c4:	d007      	beq.n	1e4d6 <RNG_PLAT_SetUserRngParameters+0x2a>
   1e4c6:	4c14      	ldr	r4, [pc, #80]	; (1e518 <RNG_PLAT_SetUserRngParameters+0x6c>)
   1e4c8:	211c      	movs	r1, #28
   1e4ca:	4628      	mov	r0, r5
   1e4cc:	f7ff fa18 	bl	1d900 <CC_PalMemSetZeroPlat>
   1e4d0:	4620      	mov	r0, r4
   1e4d2:	b003      	add	sp, #12
   1e4d4:	bd30      	pop	{r4, r5, pc}
   1e4d6:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   1e4da:	1e13      	subs	r3, r2, #0
   1e4dc:	bf18      	it	ne
   1e4de:	2301      	movne	r3, #1
   1e4e0:	3900      	subs	r1, #0
   1e4e2:	682a      	ldr	r2, [r5, #0]
   1e4e4:	bf18      	it	ne
   1e4e6:	2101      	movne	r1, #1
   1e4e8:	009b      	lsls	r3, r3, #2
   1e4ea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   1e4ee:	2a00      	cmp	r2, #0
   1e4f0:	bf18      	it	ne
   1e4f2:	f043 0301 	orrne.w	r3, r3, #1
   1e4f6:	68ea      	ldr	r2, [r5, #12]
   1e4f8:	2001      	movs	r0, #1
   1e4fa:	61e8      	str	r0, [r5, #28]
   1e4fc:	b92a      	cbnz	r2, 1e50a <RNG_PLAT_SetUserRngParameters+0x5e>
   1e4fe:	e9c5 3408 	strd	r3, r4, [r5, #32]
   1e502:	2b00      	cmp	r3, #0
   1e504:	d1e4      	bne.n	1e4d0 <RNG_PLAT_SetUserRngParameters+0x24>
   1e506:	4c05      	ldr	r4, [pc, #20]	; (1e51c <RNG_PLAT_SetUserRngParameters+0x70>)
   1e508:	e7de      	b.n	1e4c8 <RNG_PLAT_SetUserRngParameters+0x1c>
   1e50a:	f043 0308 	orr.w	r3, r3, #8
   1e50e:	4620      	mov	r0, r4
   1e510:	e9c5 3408 	strd	r3, r4, [r5, #32]
   1e514:	b003      	add	sp, #12
   1e516:	bd30      	pop	{r4, r5, pc}
   1e518:	00f00c37 	.word	0x00f00c37
   1e51c:	00f00c0e 	.word	0x00f00c0e

0001e520 <CC_PalTrngParamGet>:
   1e520:	b118      	cbz	r0, 1e52a <CC_PalTrngParamGet+0xa>
   1e522:	b111      	cbz	r1, 1e52a <CC_PalTrngParamGet+0xa>
   1e524:	680b      	ldr	r3, [r1, #0]
   1e526:	2b1c      	cmp	r3, #28
   1e528:	d001      	beq.n	1e52e <CC_PalTrngParamGet+0xe>
   1e52a:	2001      	movs	r0, #1
   1e52c:	4770      	bx	lr
   1e52e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e532:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1e536:	3201      	adds	r2, #1
   1e538:	bf14      	ite	ne
   1e53a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1e53e:	f241 225c 	movweq	r2, #4700	; 0x125c
   1e542:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e546:	6002      	str	r2, [r0, #0]
   1e548:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1e54c:	3201      	adds	r2, #1
   1e54e:	bf14      	ite	ne
   1e550:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1e554:	f641 1264 	movweq	r2, #6500	; 0x1964
   1e558:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e55c:	6042      	str	r2, [r0, #4]
   1e55e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1e562:	3201      	adds	r2, #1
   1e564:	bf14      	ite	ne
   1e566:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1e56a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1e56e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e572:	6082      	str	r2, [r0, #8]
   1e574:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1e578:	3201      	adds	r2, #1
   1e57a:	bf14      	ite	ne
   1e57c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1e580:	f241 3288 	movweq	r2, #5000	; 0x1388
   1e584:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e588:	60c2      	str	r2, [r0, #12]
   1e58a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1e58e:	3201      	adds	r2, #1
   1e590:	bf14      	ite	ne
   1e592:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1e596:	2290      	moveq	r2, #144	; 0x90
   1e598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e59c:	6102      	str	r2, [r0, #16]
   1e59e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1e5a2:	3201      	adds	r2, #1
   1e5a4:	bf14      	ite	ne
   1e5a6:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1e5aa:	2251      	moveq	r2, #81	; 0x51
   1e5ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e5b0:	6142      	str	r2, [r0, #20]
   1e5b2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1e5b6:	3201      	adds	r2, #1
   1e5b8:	bf14      	ite	ne
   1e5ba:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1e5be:	f240 3337 	movweq	r3, #823	; 0x337
   1e5c2:	6183      	str	r3, [r0, #24]
   1e5c4:	2000      	movs	r0, #0
   1e5c6:	4770      	bx	lr

0001e5c8 <LLF_RND_WaitRngInterrupt>:
   1e5c8:	b508      	push	{r3, lr}
   1e5ca:	4601      	mov	r1, r0
   1e5cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e5d0:	f7ff f91e 	bl	1d810 <CC_HalWaitInterruptRND>
   1e5d4:	4b03      	ldr	r3, [pc, #12]	; (1e5e4 <LLF_RND_WaitRngInterrupt+0x1c>)
   1e5d6:	2200      	movs	r2, #0
   1e5d8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1e5dc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1e5e0:	bd08      	pop	{r3, pc}
   1e5e2:	bf00      	nop
   1e5e4:	5002b000 	.word	0x5002b000

0001e5e8 <LLF_RND_GetRoscSampleCnt>:
   1e5e8:	3801      	subs	r0, #1
   1e5ea:	2807      	cmp	r0, #7
   1e5ec:	d805      	bhi.n	1e5fa <LLF_RND_GetRoscSampleCnt+0x12>
   1e5ee:	e8df f000 	tbb	[pc, r0]
   1e5f2:	0e10      	.short	0x0e10
   1e5f4:	04040a04 	.word	0x04040a04
   1e5f8:	0604      	.short	0x0604
   1e5fa:	4807      	ldr	r0, [pc, #28]	; (1e618 <LLF_RND_GetRoscSampleCnt+0x30>)
   1e5fc:	4770      	bx	lr
   1e5fe:	68cb      	ldr	r3, [r1, #12]
   1e600:	624b      	str	r3, [r1, #36]	; 0x24
   1e602:	2000      	movs	r0, #0
   1e604:	4770      	bx	lr
   1e606:	688b      	ldr	r3, [r1, #8]
   1e608:	624b      	str	r3, [r1, #36]	; 0x24
   1e60a:	2000      	movs	r0, #0
   1e60c:	4770      	bx	lr
   1e60e:	684b      	ldr	r3, [r1, #4]
   1e610:	e7f6      	b.n	1e600 <LLF_RND_GetRoscSampleCnt+0x18>
   1e612:	680b      	ldr	r3, [r1, #0]
   1e614:	e7f4      	b.n	1e600 <LLF_RND_GetRoscSampleCnt+0x18>
   1e616:	bf00      	nop
   1e618:	00f10c31 	.word	0x00f10c31

0001e61c <LLF_RND_GetFastestRosc>:
   1e61c:	680b      	ldr	r3, [r1, #0]
   1e61e:	e002      	b.n	1e626 <LLF_RND_GetFastestRosc+0xa>
   1e620:	2b08      	cmp	r3, #8
   1e622:	600b      	str	r3, [r1, #0]
   1e624:	d806      	bhi.n	1e634 <LLF_RND_GetFastestRosc+0x18>
   1e626:	6a02      	ldr	r2, [r0, #32]
   1e628:	4213      	tst	r3, r2
   1e62a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1e62e:	d0f7      	beq.n	1e620 <LLF_RND_GetFastestRosc+0x4>
   1e630:	2000      	movs	r0, #0
   1e632:	4770      	bx	lr
   1e634:	4800      	ldr	r0, [pc, #0]	; (1e638 <LLF_RND_GetFastestRosc+0x1c>)
   1e636:	4770      	bx	lr
   1e638:	00f10c31 	.word	0x00f10c31

0001e63c <LLF_RND_TurnOffTrng>:
   1e63c:	4b04      	ldr	r3, [pc, #16]	; (1e650 <LLF_RND_TurnOffTrng+0x14>)
   1e63e:	2200      	movs	r2, #0
   1e640:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1e644:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e648:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   1e64c:	f7ff b8c6 	b.w	1d7dc <CC_HalClearInterruptBit>
   1e650:	5002b000 	.word	0x5002b000

0001e654 <SetDataBuffersInfo>:
   1e654:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e656:	b083      	sub	sp, #12
   1e658:	461d      	mov	r5, r3
   1e65a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1e65e:	f04f 0300 	mov.w	r3, #0
   1e662:	f88d 3007 	strb.w	r3, [sp, #7]
   1e666:	d324      	bcc.n	1e6b2 <SetDataBuffersInfo+0x5e>
   1e668:	468c      	mov	ip, r1
   1e66a:	4484      	add	ip, r0
   1e66c:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   1e670:	4604      	mov	r4, r0
   1e672:	d81e      	bhi.n	1e6b2 <SetDataBuffersInfo+0x5e>
   1e674:	4617      	mov	r7, r2
   1e676:	f10d 0307 	add.w	r3, sp, #7
   1e67a:	2201      	movs	r2, #1
   1e67c:	f000 fe64 	bl	1f348 <CC_PalDataBufferAttrGet>
   1e680:	4606      	mov	r6, r0
   1e682:	b9b0      	cbnz	r0, 1e6b2 <SetDataBuffersInfo+0x5e>
   1e684:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e686:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e68a:	603c      	str	r4, [r7, #0]
   1e68c:	713b      	strb	r3, [r7, #4]
   1e68e:	b192      	cbz	r2, 1e6b6 <SetDataBuffersInfo+0x62>
   1e690:	b14d      	cbz	r5, 1e6a6 <SetDataBuffersInfo+0x52>
   1e692:	4602      	mov	r2, r0
   1e694:	9908      	ldr	r1, [sp, #32]
   1e696:	f10d 0307 	add.w	r3, sp, #7
   1e69a:	4628      	mov	r0, r5
   1e69c:	f000 fe54 	bl	1f348 <CC_PalDataBufferAttrGet>
   1e6a0:	b938      	cbnz	r0, 1e6b2 <SetDataBuffersInfo+0x5e>
   1e6a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e6a8:	4630      	mov	r0, r6
   1e6aa:	6015      	str	r5, [r2, #0]
   1e6ac:	7113      	strb	r3, [r2, #4]
   1e6ae:	b003      	add	sp, #12
   1e6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6b2:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1e6b6:	4630      	mov	r0, r6
   1e6b8:	b003      	add	sp, #12
   1e6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e6bc <InitHashDrv>:
   1e6bc:	b1d8      	cbz	r0, 1e6f6 <InitHashDrv+0x3a>
   1e6be:	b508      	push	{r3, lr}
   1e6c0:	6803      	ldr	r3, [r0, #0]
   1e6c2:	2b01      	cmp	r3, #1
   1e6c4:	d004      	beq.n	1e6d0 <InitHashDrv+0x14>
   1e6c6:	2b02      	cmp	r3, #2
   1e6c8:	d00f      	beq.n	1e6ea <InitHashDrv+0x2e>
   1e6ca:	b143      	cbz	r3, 1e6de <InitHashDrv+0x22>
   1e6cc:	480b      	ldr	r0, [pc, #44]	; (1e6fc <InitHashDrv+0x40>)
   1e6ce:	bd08      	pop	{r3, pc}
   1e6d0:	490b      	ldr	r1, [pc, #44]	; (1e700 <InitHashDrv+0x44>)
   1e6d2:	2220      	movs	r2, #32
   1e6d4:	3008      	adds	r0, #8
   1e6d6:	f7ff f90f 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e6da:	2000      	movs	r0, #0
   1e6dc:	bd08      	pop	{r3, pc}
   1e6de:	4909      	ldr	r1, [pc, #36]	; (1e704 <InitHashDrv+0x48>)
   1e6e0:	2214      	movs	r2, #20
   1e6e2:	3008      	adds	r0, #8
   1e6e4:	f7ff f908 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e6e8:	e7f7      	b.n	1e6da <InitHashDrv+0x1e>
   1e6ea:	4907      	ldr	r1, [pc, #28]	; (1e708 <InitHashDrv+0x4c>)
   1e6ec:	2220      	movs	r2, #32
   1e6ee:	3008      	adds	r0, #8
   1e6f0:	f7ff f902 	bl	1d8f8 <CC_PalMemCopyPlat>
   1e6f4:	e7f1      	b.n	1e6da <InitHashDrv+0x1e>
   1e6f6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e6fa:	4770      	bx	lr
   1e6fc:	00f30001 	.word	0x00f30001
   1e700:	000255dc 	.word	0x000255dc
   1e704:	0002561c 	.word	0x0002561c
   1e708:	000255fc 	.word	0x000255fc

0001e70c <ProcessHashDrv>:
   1e70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e710:	2900      	cmp	r1, #0
   1e712:	f000 80f9 	beq.w	1e908 <ProcessHashDrv+0x1fc>
   1e716:	4604      	mov	r4, r0
   1e718:	2800      	cmp	r0, #0
   1e71a:	f000 80f9 	beq.w	1e910 <ProcessHashDrv+0x204>
   1e71e:	6803      	ldr	r3, [r0, #0]
   1e720:	4690      	mov	r8, r2
   1e722:	460f      	mov	r7, r1
   1e724:	2b00      	cmp	r3, #0
   1e726:	f000 80c3 	beq.w	1e8b0 <ProcessHashDrv+0x1a4>
   1e72a:	3b01      	subs	r3, #1
   1e72c:	2b01      	cmp	r3, #1
   1e72e:	f200 80d7 	bhi.w	1e8e0 <ProcessHashDrv+0x1d4>
   1e732:	4879      	ldr	r0, [pc, #484]	; (1e918 <ProcessHashDrv+0x20c>)
   1e734:	f04f 31ff 	mov.w	r1, #4294967295
   1e738:	f04f 0902 	mov.w	r9, #2
   1e73c:	f7ff f8f8 	bl	1d930 <CC_PalMutexLock>
   1e740:	2800      	cmp	r0, #0
   1e742:	f040 80bf 	bne.w	1e8c4 <ProcessHashDrv+0x1b8>
   1e746:	2000      	movs	r0, #0
   1e748:	f7ff f922 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1e74c:	4606      	mov	r6, r0
   1e74e:	2800      	cmp	r0, #0
   1e750:	f040 80c2 	bne.w	1e8d8 <ProcessHashDrv+0x1cc>
   1e754:	4a71      	ldr	r2, [pc, #452]	; (1e91c <ProcessHashDrv+0x210>)
   1e756:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1e75a:	2b00      	cmp	r3, #0
   1e75c:	d1fb      	bne.n	1e756 <ProcessHashDrv+0x4a>
   1e75e:	4d6f      	ldr	r5, [pc, #444]	; (1e91c <ProcessHashDrv+0x210>)
   1e760:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   1e764:	2b00      	cmp	r3, #0
   1e766:	d1fb      	bne.n	1e760 <ProcessHashDrv+0x54>
   1e768:	f04f 30ff 	mov.w	r0, #4294967295
   1e76c:	f7ff f836 	bl	1d7dc <CC_HalClearInterruptBit>
   1e770:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e774:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1e778:	f7ff f83e 	bl	1d7f8 <CC_HalMaskInterrupt>
   1e77c:	2301      	movs	r3, #1
   1e77e:	2207      	movs	r2, #7
   1e780:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   1e784:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   1e788:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1e78c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e78e:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   1e792:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e794:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   1e798:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   1e79c:	6823      	ldr	r3, [r4, #0]
   1e79e:	b15b      	cbz	r3, 1e7b8 <ProcessHashDrv+0xac>
   1e7a0:	3b01      	subs	r3, #1
   1e7a2:	2b01      	cmp	r3, #1
   1e7a4:	d818      	bhi.n	1e7d8 <ProcessHashDrv+0xcc>
   1e7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e7a8:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1e7ac:	6a23      	ldr	r3, [r4, #32]
   1e7ae:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   1e7b2:	69e3      	ldr	r3, [r4, #28]
   1e7b4:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   1e7b8:	4b58      	ldr	r3, [pc, #352]	; (1e91c <ProcessHashDrv+0x210>)
   1e7ba:	69a2      	ldr	r2, [r4, #24]
   1e7bc:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1e7c0:	6962      	ldr	r2, [r4, #20]
   1e7c2:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   1e7c6:	6922      	ldr	r2, [r4, #16]
   1e7c8:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1e7cc:	68e2      	ldr	r2, [r4, #12]
   1e7ce:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   1e7d2:	68a2      	ldr	r2, [r4, #8]
   1e7d4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   1e7d8:	4a50      	ldr	r2, [pc, #320]	; (1e91c <ProcessHashDrv+0x210>)
   1e7da:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e7de:	2b00      	cmp	r3, #0
   1e7e0:	d1fb      	bne.n	1e7da <ProcessHashDrv+0xce>
   1e7e2:	f1b8 0f00 	cmp.w	r8, #0
   1e7e6:	d05f      	beq.n	1e8a8 <ProcessHashDrv+0x19c>
   1e7e8:	6863      	ldr	r3, [r4, #4]
   1e7ea:	2b01      	cmp	r3, #1
   1e7ec:	bf08      	it	eq
   1e7ee:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   1e7f2:	4b4a      	ldr	r3, [pc, #296]	; (1e91c <ProcessHashDrv+0x210>)
   1e7f4:	683a      	ldr	r2, [r7, #0]
   1e7f6:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1e7fa:	2040      	movs	r0, #64	; 0x40
   1e7fc:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   1e800:	f7ff f800 	bl	1d804 <CC_HalWaitInterrupt>
   1e804:	4606      	mov	r6, r0
   1e806:	4a45      	ldr	r2, [pc, #276]	; (1e91c <ProcessHashDrv+0x210>)
   1e808:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e80c:	2b00      	cmp	r3, #0
   1e80e:	d1fb      	bne.n	1e808 <ProcessHashDrv+0xfc>
   1e810:	4a42      	ldr	r2, [pc, #264]	; (1e91c <ProcessHashDrv+0x210>)
   1e812:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e816:	2b00      	cmp	r3, #0
   1e818:	d1fb      	bne.n	1e812 <ProcessHashDrv+0x106>
   1e81a:	6823      	ldr	r3, [r4, #0]
   1e81c:	b15b      	cbz	r3, 1e836 <ProcessHashDrv+0x12a>
   1e81e:	3b01      	subs	r3, #1
   1e820:	2b01      	cmp	r3, #1
   1e822:	d818      	bhi.n	1e856 <ProcessHashDrv+0x14a>
   1e824:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   1e828:	6263      	str	r3, [r4, #36]	; 0x24
   1e82a:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   1e82e:	6223      	str	r3, [r4, #32]
   1e830:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   1e834:	61e3      	str	r3, [r4, #28]
   1e836:	4b39      	ldr	r3, [pc, #228]	; (1e91c <ProcessHashDrv+0x210>)
   1e838:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e83c:	61a2      	str	r2, [r4, #24]
   1e83e:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   1e842:	6162      	str	r2, [r4, #20]
   1e844:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   1e848:	6122      	str	r2, [r4, #16]
   1e84a:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   1e84e:	60e2      	str	r2, [r4, #12]
   1e850:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   1e854:	60a3      	str	r3, [r4, #8]
   1e856:	4a31      	ldr	r2, [pc, #196]	; (1e91c <ProcessHashDrv+0x210>)
   1e858:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   1e85c:	64a1      	str	r1, [r4, #72]	; 0x48
   1e85e:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   1e862:	64e1      	str	r1, [r4, #76]	; 0x4c
   1e864:	2300      	movs	r3, #0
   1e866:	2101      	movs	r1, #1
   1e868:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   1e86c:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   1e870:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e874:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e878:	2b00      	cmp	r3, #0
   1e87a:	d1fb      	bne.n	1e874 <ProcessHashDrv+0x168>
   1e87c:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   1e880:	2e00      	cmp	r6, #0
   1e882:	d13b      	bne.n	1e8fc <ProcessHashDrv+0x1f0>
   1e884:	4b25      	ldr	r3, [pc, #148]	; (1e91c <ProcessHashDrv+0x210>)
   1e886:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e88a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1e88e:	f7fe ffb3 	bl	1d7f8 <CC_HalMaskInterrupt>
   1e892:	2001      	movs	r0, #1
   1e894:	f7ff f87c 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1e898:	bb60      	cbnz	r0, 1e8f4 <ProcessHashDrv+0x1e8>
   1e89a:	481f      	ldr	r0, [pc, #124]	; (1e918 <ProcessHashDrv+0x20c>)
   1e89c:	f7ff f850 	bl	1d940 <CC_PalMutexUnlock>
   1e8a0:	bb10      	cbnz	r0, 1e8e8 <ProcessHashDrv+0x1dc>
   1e8a2:	4630      	mov	r0, r6
   1e8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e8a8:	2304      	movs	r3, #4
   1e8aa:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e8ae:	e7aa      	b.n	1e806 <ProcessHashDrv+0xfa>
   1e8b0:	4819      	ldr	r0, [pc, #100]	; (1e918 <ProcessHashDrv+0x20c>)
   1e8b2:	f04f 31ff 	mov.w	r1, #4294967295
   1e8b6:	f04f 0901 	mov.w	r9, #1
   1e8ba:	f7ff f839 	bl	1d930 <CC_PalMutexLock>
   1e8be:	2800      	cmp	r0, #0
   1e8c0:	f43f af41 	beq.w	1e746 <ProcessHashDrv+0x3a>
   1e8c4:	4816      	ldr	r0, [pc, #88]	; (1e920 <ProcessHashDrv+0x214>)
   1e8c6:	f7fe f927 	bl	1cb18 <CC_PalAbort>
   1e8ca:	2000      	movs	r0, #0
   1e8cc:	f7ff f860 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1e8d0:	4606      	mov	r6, r0
   1e8d2:	2800      	cmp	r0, #0
   1e8d4:	f43f af3e 	beq.w	1e754 <ProcessHashDrv+0x48>
   1e8d8:	4812      	ldr	r0, [pc, #72]	; (1e924 <ProcessHashDrv+0x218>)
   1e8da:	f7fe f91d 	bl	1cb18 <CC_PalAbort>
   1e8de:	e739      	b.n	1e754 <ProcessHashDrv+0x48>
   1e8e0:	4e11      	ldr	r6, [pc, #68]	; (1e928 <ProcessHashDrv+0x21c>)
   1e8e2:	4630      	mov	r0, r6
   1e8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e8e8:	4810      	ldr	r0, [pc, #64]	; (1e92c <ProcessHashDrv+0x220>)
   1e8ea:	f7fe f915 	bl	1cb18 <CC_PalAbort>
   1e8ee:	4630      	mov	r0, r6
   1e8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e8f4:	480e      	ldr	r0, [pc, #56]	; (1e930 <ProcessHashDrv+0x224>)
   1e8f6:	f7fe f90f 	bl	1cb18 <CC_PalAbort>
   1e8fa:	e7ce      	b.n	1e89a <ProcessHashDrv+0x18e>
   1e8fc:	2110      	movs	r1, #16
   1e8fe:	f104 0008 	add.w	r0, r4, #8
   1e902:	f7fe fffd 	bl	1d900 <CC_PalMemSetZeroPlat>
   1e906:	e7bd      	b.n	1e884 <ProcessHashDrv+0x178>
   1e908:	4e0a      	ldr	r6, [pc, #40]	; (1e934 <ProcessHashDrv+0x228>)
   1e90a:	4630      	mov	r0, r6
   1e90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e910:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   1e914:	e7c5      	b.n	1e8a2 <ProcessHashDrv+0x196>
   1e916:	bf00      	nop
   1e918:	200006f8 	.word	0x200006f8
   1e91c:	5002b000 	.word	0x5002b000
   1e920:	00025510 	.word	0x00025510
   1e924:	00025528 	.word	0x00025528
   1e928:	00f30001 	.word	0x00f30001
   1e92c:	00025568 	.word	0x00025568
   1e930:	00025548 	.word	0x00025548
   1e934:	00f30003 	.word	0x00f30003

0001e938 <FinishHashDrv>:
   1e938:	b398      	cbz	r0, 1e9a2 <FinishHashDrv+0x6a>
   1e93a:	b470      	push	{r4, r5, r6}
   1e93c:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   1e940:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1e944:	ba26      	rev	r6, r4
   1e946:	ba0d      	rev	r5, r1
   1e948:	ba14      	rev	r4, r2
   1e94a:	ba19      	rev	r1, r3
   1e94c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   1e950:	ba12      	rev	r2, r2
   1e952:	e9c0 4104 	strd	r4, r1, [r0, #16]
   1e956:	6182      	str	r2, [r0, #24]
   1e958:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   1e95c:	e9c0 6502 	strd	r6, r5, [r0, #8]
   1e960:	ba1b      	rev	r3, r3
   1e962:	ba25      	rev	r5, r4
   1e964:	e9c0 3507 	strd	r3, r5, [r0, #28]
   1e968:	ba14      	rev	r4, r2
   1e96a:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   1e96e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1e970:	ba12      	rev	r2, r2
   1e972:	ba09      	rev	r1, r1
   1e974:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   1e978:	62c2      	str	r2, [r0, #44]	; 0x2c
   1e97a:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   1e97e:	ba1b      	rev	r3, r3
   1e980:	ba25      	rev	r5, r4
   1e982:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   1e986:	ba14      	rev	r4, r2
   1e988:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   1e98c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1e98e:	ba12      	rev	r2, r2
   1e990:	ba09      	rev	r1, r1
   1e992:	ba1b      	rev	r3, r3
   1e994:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1e998:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1e99c:	2000      	movs	r0, #0
   1e99e:	bc70      	pop	{r4, r5, r6}
   1e9a0:	4770      	bx	lr
   1e9a2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e9a6:	4770      	bx	lr

0001e9a8 <LoadAesKey>:
   1e9a8:	2800      	cmp	r0, #0
   1e9aa:	d047      	beq.n	1ea3c <LoadAesKey+0x94>
   1e9ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1e9b0:	2b00      	cmp	r3, #0
   1e9b2:	d034      	beq.n	1ea1e <LoadAesKey+0x76>
   1e9b4:	2b03      	cmp	r3, #3
   1e9b6:	b510      	push	{r4, lr}
   1e9b8:	d013      	beq.n	1e9e2 <LoadAesKey+0x3a>
   1e9ba:	4822      	ldr	r0, [pc, #136]	; (1ea44 <LoadAesKey+0x9c>)
   1e9bc:	4c22      	ldr	r4, [pc, #136]	; (1ea48 <LoadAesKey+0xa0>)
   1e9be:	6822      	ldr	r2, [r4, #0]
   1e9c0:	4b22      	ldr	r3, [pc, #136]	; (1ea4c <LoadAesKey+0xa4>)
   1e9c2:	6812      	ldr	r2, [r2, #0]
   1e9c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e9c8:	6822      	ldr	r2, [r4, #0]
   1e9ca:	6852      	ldr	r2, [r2, #4]
   1e9cc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e9d0:	6822      	ldr	r2, [r4, #0]
   1e9d2:	6892      	ldr	r2, [r2, #8]
   1e9d4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e9d8:	6822      	ldr	r2, [r4, #0]
   1e9da:	68d2      	ldr	r2, [r2, #12]
   1e9dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e9e0:	bd10      	pop	{r4, pc}
   1e9e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e9e4:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1e9e6:	4c18      	ldr	r4, [pc, #96]	; (1ea48 <LoadAesKey+0xa0>)
   1e9e8:	f000 fba8 	bl	1f13c <kmu_validate_kdr_slot_and_size>
   1e9ec:	2800      	cmp	r0, #0
   1e9ee:	d1e6      	bne.n	1e9be <LoadAesKey+0x16>
   1e9f0:	6822      	ldr	r2, [r4, #0]
   1e9f2:	4b16      	ldr	r3, [pc, #88]	; (1ea4c <LoadAesKey+0xa4>)
   1e9f4:	6812      	ldr	r2, [r2, #0]
   1e9f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e9fa:	6822      	ldr	r2, [r4, #0]
   1e9fc:	6852      	ldr	r2, [r2, #4]
   1e9fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1ea02:	6822      	ldr	r2, [r4, #0]
   1ea04:	6892      	ldr	r2, [r2, #8]
   1ea06:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1ea0a:	6822      	ldr	r2, [r4, #0]
   1ea0c:	68d2      	ldr	r2, [r2, #12]
   1ea0e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1ea12:	f000 fba1 	bl	1f158 <kmu_use_kdr_key>
   1ea16:	2800      	cmp	r0, #0
   1ea18:	d1d1      	bne.n	1e9be <LoadAesKey+0x16>
   1ea1a:	2000      	movs	r0, #0
   1ea1c:	bd10      	pop	{r4, pc}
   1ea1e:	4b0b      	ldr	r3, [pc, #44]	; (1ea4c <LoadAesKey+0xa4>)
   1ea20:	6902      	ldr	r2, [r0, #16]
   1ea22:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1ea26:	6942      	ldr	r2, [r0, #20]
   1ea28:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1ea2c:	6982      	ldr	r2, [r0, #24]
   1ea2e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1ea32:	69c2      	ldr	r2, [r0, #28]
   1ea34:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1ea38:	2000      	movs	r0, #0
   1ea3a:	4770      	bx	lr
   1ea3c:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1ea40:	4770      	bx	lr
   1ea42:	bf00      	nop
   1ea44:	00f10009 	.word	0x00f10009
   1ea48:	200006e4 	.word	0x200006e4
   1ea4c:	5002b000 	.word	0x5002b000

0001ea50 <InitAes.part.0>:
   1ea50:	4a37      	ldr	r2, [pc, #220]	; (1eb30 <InitAes.part.0+0xe0>)
   1ea52:	b538      	push	{r3, r4, r5, lr}
   1ea54:	4604      	mov	r4, r0
   1ea56:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1ea5a:	2b00      	cmp	r3, #0
   1ea5c:	d1fb      	bne.n	1ea56 <InitAes.part.0+0x6>
   1ea5e:	4a34      	ldr	r2, [pc, #208]	; (1eb30 <InitAes.part.0+0xe0>)
   1ea60:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1ea64:	2b00      	cmp	r3, #0
   1ea66:	d1fb      	bne.n	1ea60 <InitAes.part.0+0x10>
   1ea68:	4a31      	ldr	r2, [pc, #196]	; (1eb30 <InitAes.part.0+0xe0>)
   1ea6a:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   1ea6e:	2b00      	cmp	r3, #0
   1ea70:	d1fb      	bne.n	1ea6a <InitAes.part.0+0x1a>
   1ea72:	4a2f      	ldr	r2, [pc, #188]	; (1eb30 <InitAes.part.0+0xe0>)
   1ea74:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1ea78:	2b00      	cmp	r3, #0
   1ea7a:	d1fb      	bne.n	1ea74 <InitAes.part.0+0x24>
   1ea7c:	4a2c      	ldr	r2, [pc, #176]	; (1eb30 <InitAes.part.0+0xe0>)
   1ea7e:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1ea82:	2b00      	cmp	r3, #0
   1ea84:	d1fb      	bne.n	1ea7e <InitAes.part.0+0x2e>
   1ea86:	4d2a      	ldr	r5, [pc, #168]	; (1eb30 <InitAes.part.0+0xe0>)
   1ea88:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   1ea8c:	2b00      	cmp	r3, #0
   1ea8e:	d1fb      	bne.n	1ea88 <InitAes.part.0+0x38>
   1ea90:	f04f 30ff 	mov.w	r0, #4294967295
   1ea94:	f7fe fea2 	bl	1d7dc <CC_HalClearInterruptBit>
   1ea98:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ea9a:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1ea9e:	f023 0304 	bic.w	r3, r3, #4
   1eaa2:	2b03      	cmp	r3, #3
   1eaa4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1eaa6:	d039      	beq.n	1eb1c <InitAes.part.0+0xcc>
   1eaa8:	2b01      	cmp	r3, #1
   1eaaa:	bf0c      	ite	eq
   1eaac:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1eab0:	f020 0020 	bicne.w	r0, r0, #32
   1eab4:	f7fe fea0 	bl	1d7f8 <CC_HalMaskInterrupt>
   1eab8:	4a1d      	ldr	r2, [pc, #116]	; (1eb30 <InitAes.part.0+0xe0>)
   1eaba:	2301      	movs	r3, #1
   1eabc:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   1eac0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1eac4:	2b00      	cmp	r3, #0
   1eac6:	d1fb      	bne.n	1eac0 <InitAes.part.0+0x70>
   1eac8:	4a19      	ldr	r2, [pc, #100]	; (1eb30 <InitAes.part.0+0xe0>)
   1eaca:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1eace:	2b00      	cmp	r3, #0
   1ead0:	d1fb      	bne.n	1eaca <InitAes.part.0+0x7a>
   1ead2:	4917      	ldr	r1, [pc, #92]	; (1eb30 <InitAes.part.0+0xe0>)
   1ead4:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   1ead8:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   1eadc:	2b00      	cmp	r3, #0
   1eade:	d1fb      	bne.n	1ead8 <InitAes.part.0+0x88>
   1eae0:	4a13      	ldr	r2, [pc, #76]	; (1eb30 <InitAes.part.0+0xe0>)
   1eae2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1eae6:	2b00      	cmp	r3, #0
   1eae8:	d1fb      	bne.n	1eae2 <InitAes.part.0+0x92>
   1eaea:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1eaec:	f022 0104 	bic.w	r1, r2, #4
   1eaf0:	2903      	cmp	r1, #3
   1eaf2:	bf18      	it	ne
   1eaf4:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1eaf6:	490e      	ldr	r1, [pc, #56]	; (1eb30 <InitAes.part.0+0xe0>)
   1eaf8:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1eafc:	bf18      	it	ne
   1eafe:	f003 0301 	andne.w	r3, r3, #1
   1eb02:	f002 021c 	and.w	r2, r2, #28
   1eb06:	431a      	orrs	r2, r3
   1eb08:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   1eb0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1eb0e:	2b07      	cmp	r3, #7
   1eb10:	bf04      	itt	eq
   1eb12:	2301      	moveq	r3, #1
   1eb14:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   1eb18:	2000      	movs	r0, #0
   1eb1a:	bd38      	pop	{r3, r4, r5, pc}
   1eb1c:	2b01      	cmp	r3, #1
   1eb1e:	bf0c      	ite	eq
   1eb20:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1eb24:	f020 0010 	bicne.w	r0, r0, #16
   1eb28:	f7fe fe66 	bl	1d7f8 <CC_HalMaskInterrupt>
   1eb2c:	e7c4      	b.n	1eab8 <InitAes.part.0+0x68>
   1eb2e:	bf00      	nop
   1eb30:	5002b000 	.word	0x5002b000

0001eb34 <write_invalid_key>:
   1eb34:	4a09      	ldr	r2, [pc, #36]	; (1eb5c <write_invalid_key+0x28>)
   1eb36:	4b0a      	ldr	r3, [pc, #40]	; (1eb60 <write_invalid_key+0x2c>)
   1eb38:	6811      	ldr	r1, [r2, #0]
   1eb3a:	6809      	ldr	r1, [r1, #0]
   1eb3c:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   1eb40:	6811      	ldr	r1, [r2, #0]
   1eb42:	6849      	ldr	r1, [r1, #4]
   1eb44:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   1eb48:	6811      	ldr	r1, [r2, #0]
   1eb4a:	6889      	ldr	r1, [r1, #8]
   1eb4c:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   1eb50:	6812      	ldr	r2, [r2, #0]
   1eb52:	68d2      	ldr	r2, [r2, #12]
   1eb54:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1eb58:	4770      	bx	lr
   1eb5a:	bf00      	nop
   1eb5c:	200006e4 	.word	0x200006e4
   1eb60:	5002b000 	.word	0x5002b000

0001eb64 <ProcessAesDrv>:
   1eb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb68:	b085      	sub	sp, #20
   1eb6a:	2900      	cmp	r1, #0
   1eb6c:	f000 80ec 	beq.w	1ed48 <ProcessAesDrv+0x1e4>
   1eb70:	4690      	mov	r8, r2
   1eb72:	2a00      	cmp	r2, #0
   1eb74:	f000 80e8 	beq.w	1ed48 <ProcessAesDrv+0x1e4>
   1eb78:	4605      	mov	r5, r0
   1eb7a:	2800      	cmp	r0, #0
   1eb7c:	f000 8129 	beq.w	1edd2 <ProcessAesDrv+0x26e>
   1eb80:	4699      	mov	r9, r3
   1eb82:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1eb84:	460e      	mov	r6, r1
   1eb86:	2b00      	cmp	r3, #0
   1eb88:	d152      	bne.n	1ec30 <ProcessAesDrv+0xcc>
   1eb8a:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   1eb8e:	d254      	bcs.n	1ec3a <ProcessAesDrv+0xd6>
   1eb90:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1eb94:	2b04      	cmp	r3, #4
   1eb96:	f000 80ff 	beq.w	1ed98 <ProcessAesDrv+0x234>
   1eb9a:	2700      	movs	r7, #0
   1eb9c:	48ad      	ldr	r0, [pc, #692]	; (1ee54 <ProcessAesDrv+0x2f0>)
   1eb9e:	f04f 31ff 	mov.w	r1, #4294967295
   1eba2:	f7fe fec5 	bl	1d930 <CC_PalMutexLock>
   1eba6:	2800      	cmp	r0, #0
   1eba8:	f040 80d5 	bne.w	1ed56 <ProcessAesDrv+0x1f2>
   1ebac:	2000      	movs	r0, #0
   1ebae:	f7fe feef 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1ebb2:	2800      	cmp	r0, #0
   1ebb4:	f040 80d8 	bne.w	1ed68 <ProcessAesDrv+0x204>
   1ebb8:	48a7      	ldr	r0, [pc, #668]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ebba:	2301      	movs	r3, #1
   1ebbc:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   1ebc0:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   1ebc4:	2c00      	cmp	r4, #0
   1ebc6:	d1fb      	bne.n	1ebc0 <ProcessAesDrv+0x5c>
   1ebc8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ebca:	2b03      	cmp	r3, #3
   1ebcc:	dc3a      	bgt.n	1ec44 <ProcessAesDrv+0xe0>
   1ebce:	2b00      	cmp	r3, #0
   1ebd0:	da3b      	bge.n	1ec4a <ProcessAesDrv+0xe6>
   1ebd2:	4ca2      	ldr	r4, [pc, #648]	; (1ee5c <ProcessAesDrv+0x2f8>)
   1ebd4:	4aa0      	ldr	r2, [pc, #640]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ebd6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1ebda:	2b00      	cmp	r3, #0
   1ebdc:	d1fb      	bne.n	1ebd6 <ProcessAesDrv+0x72>
   1ebde:	2f00      	cmp	r7, #0
   1ebe0:	f040 80d1 	bne.w	1ed86 <ProcessAesDrv+0x222>
   1ebe4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ebe6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1ebe8:	f023 0304 	bic.w	r3, r3, #4
   1ebec:	2b03      	cmp	r3, #3
   1ebee:	4b9a      	ldr	r3, [pc, #616]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ebf0:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1ebf4:	f000 809f 	beq.w	1ed36 <ProcessAesDrv+0x1d2>
   1ebf8:	2a01      	cmp	r2, #1
   1ebfa:	bf0c      	ite	eq
   1ebfc:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1ec00:	f040 0020 	orrne.w	r0, r0, #32
   1ec04:	f7fe fdf8 	bl	1d7f8 <CC_HalMaskInterrupt>
   1ec08:	4b93      	ldr	r3, [pc, #588]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ec0a:	2200      	movs	r2, #0
   1ec0c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   1ec10:	2001      	movs	r0, #1
   1ec12:	f7fe febd 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1ec16:	2800      	cmp	r0, #0
   1ec18:	f040 80b1 	bne.w	1ed7e <ProcessAesDrv+0x21a>
   1ec1c:	488d      	ldr	r0, [pc, #564]	; (1ee54 <ProcessAesDrv+0x2f0>)
   1ec1e:	f7fe fe8f 	bl	1d940 <CC_PalMutexUnlock>
   1ec22:	2800      	cmp	r0, #0
   1ec24:	f040 80a4 	bne.w	1ed70 <ProcessAesDrv+0x20c>
   1ec28:	4620      	mov	r0, r4
   1ec2a:	b005      	add	sp, #20
   1ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec30:	2b01      	cmp	r3, #1
   1ec32:	d1ad      	bne.n	1eb90 <ProcessAesDrv+0x2c>
   1ec34:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   1ec38:	d3aa      	bcc.n	1eb90 <ProcessAesDrv+0x2c>
   1ec3a:	4c89      	ldr	r4, [pc, #548]	; (1ee60 <ProcessAesDrv+0x2fc>)
   1ec3c:	4620      	mov	r0, r4
   1ec3e:	b005      	add	sp, #20
   1ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec44:	3b06      	subs	r3, #6
   1ec46:	2b01      	cmp	r3, #1
   1ec48:	d8c3      	bhi.n	1ebd2 <ProcessAesDrv+0x6e>
   1ec4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1ec4c:	2b01      	cmp	r3, #1
   1ec4e:	f200 80be 	bhi.w	1edce <ProcessAesDrv+0x26a>
   1ec52:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ec54:	2b01      	cmp	r3, #1
   1ec56:	d87c      	bhi.n	1ed52 <ProcessAesDrv+0x1ee>
   1ec58:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1ec5a:	2b01      	cmp	r3, #1
   1ec5c:	f200 80e8 	bhi.w	1ee30 <ProcessAesDrv+0x2cc>
   1ec60:	4628      	mov	r0, r5
   1ec62:	f7ff fef5 	bl	1ea50 <InitAes.part.0>
   1ec66:	4604      	mov	r4, r0
   1ec68:	2800      	cmp	r0, #0
   1ec6a:	d1b3      	bne.n	1ebd4 <ProcessAesDrv+0x70>
   1ec6c:	4628      	mov	r0, r5
   1ec6e:	f7ff fe9b 	bl	1e9a8 <LoadAesKey>
   1ec72:	4604      	mov	r4, r0
   1ec74:	2800      	cmp	r0, #0
   1ec76:	d1ad      	bne.n	1ebd4 <ProcessAesDrv+0x70>
   1ec78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ec7a:	2b07      	cmp	r3, #7
   1ec7c:	d8a9      	bhi.n	1ebd2 <ProcessAesDrv+0x6e>
   1ec7e:	2201      	movs	r2, #1
   1ec80:	409a      	lsls	r2, r3
   1ec82:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   1ec86:	f040 80d5 	bne.w	1ee34 <ProcessAesDrv+0x2d0>
   1ec8a:	f012 0f44 	tst.w	r2, #68	; 0x44
   1ec8e:	f040 80ba 	bne.w	1ee06 <ProcessAesDrv+0x2a2>
   1ec92:	07d2      	lsls	r2, r2, #31
   1ec94:	d59d      	bpl.n	1ebd2 <ProcessAesDrv+0x6e>
   1ec96:	f023 0304 	bic.w	r3, r3, #4
   1ec9a:	2b03      	cmp	r3, #3
   1ec9c:	6832      	ldr	r2, [r6, #0]
   1ec9e:	d00d      	beq.n	1ecbc <ProcessAesDrv+0x158>
   1eca0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1eca2:	f8d8 1000 	ldr.w	r1, [r8]
   1eca6:	2b01      	cmp	r3, #1
   1eca8:	4b6b      	ldr	r3, [pc, #428]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ecaa:	bf0b      	itete	eq
   1ecac:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   1ecb0:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   1ecb4:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   1ecb8:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   1ecbc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ecbe:	2b01      	cmp	r3, #1
   1ecc0:	4b65      	ldr	r3, [pc, #404]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ecc2:	bf0b      	itete	eq
   1ecc4:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   1ecc8:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   1eccc:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   1ecd0:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   1ecd4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ecd6:	f023 0304 	bic.w	r3, r3, #4
   1ecda:	2b03      	cmp	r3, #3
   1ecdc:	f000 80a2 	beq.w	1ee24 <ProcessAesDrv+0x2c0>
   1ece0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1ece2:	2b01      	cmp	r3, #1
   1ece4:	bf14      	ite	ne
   1ece6:	2020      	movne	r0, #32
   1ece8:	2080      	moveq	r0, #128	; 0x80
   1ecea:	f7fe fd8b 	bl	1d804 <CC_HalWaitInterrupt>
   1ecee:	4604      	mov	r4, r0
   1ecf0:	2800      	cmp	r0, #0
   1ecf2:	f47f af6f 	bne.w	1ebd4 <ProcessAesDrv+0x70>
   1ecf6:	4b58      	ldr	r3, [pc, #352]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ecf8:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   1ecfc:	2c00      	cmp	r4, #0
   1ecfe:	d1fb      	bne.n	1ecf8 <ProcessAesDrv+0x194>
   1ed00:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1ed02:	2907      	cmp	r1, #7
   1ed04:	d814      	bhi.n	1ed30 <ProcessAesDrv+0x1cc>
   1ed06:	2201      	movs	r2, #1
   1ed08:	408a      	lsls	r2, r1
   1ed0a:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   1ed0e:	f040 80bb 	bne.w	1ee88 <ProcessAesDrv+0x324>
   1ed12:	f012 0f44 	tst.w	r2, #68	; 0x44
   1ed16:	d00b      	beq.n	1ed30 <ProcessAesDrv+0x1cc>
   1ed18:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1ed1c:	602a      	str	r2, [r5, #0]
   1ed1e:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1ed22:	606a      	str	r2, [r5, #4]
   1ed24:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1ed28:	60aa      	str	r2, [r5, #8]
   1ed2a:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1ed2e:	60eb      	str	r3, [r5, #12]
   1ed30:	2301      	movs	r3, #1
   1ed32:	65ab      	str	r3, [r5, #88]	; 0x58
   1ed34:	e74e      	b.n	1ebd4 <ProcessAesDrv+0x70>
   1ed36:	2a01      	cmp	r2, #1
   1ed38:	bf0c      	ite	eq
   1ed3a:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1ed3e:	f040 0010 	orrne.w	r0, r0, #16
   1ed42:	f7fe fd59 	bl	1d7f8 <CC_HalMaskInterrupt>
   1ed46:	e75f      	b.n	1ec08 <ProcessAesDrv+0xa4>
   1ed48:	4c46      	ldr	r4, [pc, #280]	; (1ee64 <ProcessAesDrv+0x300>)
   1ed4a:	4620      	mov	r0, r4
   1ed4c:	b005      	add	sp, #20
   1ed4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed52:	4c45      	ldr	r4, [pc, #276]	; (1ee68 <ProcessAesDrv+0x304>)
   1ed54:	e73e      	b.n	1ebd4 <ProcessAesDrv+0x70>
   1ed56:	4845      	ldr	r0, [pc, #276]	; (1ee6c <ProcessAesDrv+0x308>)
   1ed58:	f7fd fede 	bl	1cb18 <CC_PalAbort>
   1ed5c:	2000      	movs	r0, #0
   1ed5e:	f7fe fe17 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1ed62:	2800      	cmp	r0, #0
   1ed64:	f43f af28 	beq.w	1ebb8 <ProcessAesDrv+0x54>
   1ed68:	4841      	ldr	r0, [pc, #260]	; (1ee70 <ProcessAesDrv+0x30c>)
   1ed6a:	f7fd fed5 	bl	1cb18 <CC_PalAbort>
   1ed6e:	e723      	b.n	1ebb8 <ProcessAesDrv+0x54>
   1ed70:	4840      	ldr	r0, [pc, #256]	; (1ee74 <ProcessAesDrv+0x310>)
   1ed72:	f7fd fed1 	bl	1cb18 <CC_PalAbort>
   1ed76:	4620      	mov	r0, r4
   1ed78:	b005      	add	sp, #20
   1ed7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed7e:	483e      	ldr	r0, [pc, #248]	; (1ee78 <ProcessAesDrv+0x314>)
   1ed80:	f7fd feca 	bl	1cb18 <CC_PalAbort>
   1ed84:	e74a      	b.n	1ec1c <ProcessAesDrv+0xb8>
   1ed86:	2304      	movs	r3, #4
   1ed88:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1ed8c:	2120      	movs	r1, #32
   1ed8e:	f105 0010 	add.w	r0, r5, #16
   1ed92:	f7fe fdb5 	bl	1d900 <CC_PalMemSetZeroPlat>
   1ed96:	e725      	b.n	1ebe4 <ProcessAesDrv+0x80>
   1ed98:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1ed9a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1ed9c:	f000 f9c0 	bl	1f120 <kmu_validate_slot_and_size>
   1eda0:	b998      	cbnz	r0, 1edca <ProcessAesDrv+0x266>
   1eda2:	4f36      	ldr	r7, [pc, #216]	; (1ee7c <ProcessAesDrv+0x318>)
   1eda4:	4c2c      	ldr	r4, [pc, #176]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1eda6:	683b      	ldr	r3, [r7, #0]
   1eda8:	681b      	ldr	r3, [r3, #0]
   1edaa:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1edae:	683b      	ldr	r3, [r7, #0]
   1edb0:	685b      	ldr	r3, [r3, #4]
   1edb2:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1edb6:	683b      	ldr	r3, [r7, #0]
   1edb8:	689b      	ldr	r3, [r3, #8]
   1edba:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1edbe:	683b      	ldr	r3, [r7, #0]
   1edc0:	68db      	ldr	r3, [r3, #12]
   1edc2:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1edc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1edc8:	b131      	cbz	r1, 1edd8 <ProcessAesDrv+0x274>
   1edca:	2701      	movs	r7, #1
   1edcc:	e6e6      	b.n	1eb9c <ProcessAesDrv+0x38>
   1edce:	4c2c      	ldr	r4, [pc, #176]	; (1ee80 <ProcessAesDrv+0x31c>)
   1edd0:	e700      	b.n	1ebd4 <ProcessAesDrv+0x70>
   1edd2:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   1edd6:	e727      	b.n	1ec28 <ProcessAesDrv+0xc4>
   1edd8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1edda:	9301      	str	r3, [sp, #4]
   1eddc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1edde:	9300      	str	r3, [sp, #0]
   1ede0:	f105 0a10 	add.w	sl, r5, #16
   1ede4:	f04f 0b10 	mov.w	fp, #16
   1ede8:	f8cd a008 	str.w	sl, [sp, #8]
   1edec:	f8cd b00c 	str.w	fp, [sp, #12]
   1edf0:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   1edf4:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1edf6:	f000 f9b9 	bl	1f16c <kmu_derive_cmac>
   1edfa:	2800      	cmp	r0, #0
   1edfc:	d151      	bne.n	1eea2 <ProcessAesDrv+0x33e>
   1edfe:	2300      	movs	r3, #0
   1ee00:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1ee04:	e7e1      	b.n	1edca <ProcessAesDrv+0x266>
   1ee06:	4b14      	ldr	r3, [pc, #80]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ee08:	682a      	ldr	r2, [r5, #0]
   1ee0a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1ee0e:	686a      	ldr	r2, [r5, #4]
   1ee10:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1ee14:	68aa      	ldr	r2, [r5, #8]
   1ee16:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1ee1a:	68ea      	ldr	r2, [r5, #12]
   1ee1c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1ee20:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ee22:	e738      	b.n	1ec96 <ProcessAesDrv+0x132>
   1ee24:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ee26:	2b01      	cmp	r3, #1
   1ee28:	bf14      	ite	ne
   1ee2a:	2010      	movne	r0, #16
   1ee2c:	2040      	moveq	r0, #64	; 0x40
   1ee2e:	e75c      	b.n	1ecea <ProcessAesDrv+0x186>
   1ee30:	4c14      	ldr	r4, [pc, #80]	; (1ee84 <ProcessAesDrv+0x320>)
   1ee32:	e6cf      	b.n	1ebd4 <ProcessAesDrv+0x70>
   1ee34:	4b08      	ldr	r3, [pc, #32]	; (1ee58 <ProcessAesDrv+0x2f4>)
   1ee36:	682a      	ldr	r2, [r5, #0]
   1ee38:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1ee3c:	686a      	ldr	r2, [r5, #4]
   1ee3e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1ee42:	68aa      	ldr	r2, [r5, #8]
   1ee44:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1ee48:	68ea      	ldr	r2, [r5, #12]
   1ee4a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1ee4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ee50:	e721      	b.n	1ec96 <ProcessAesDrv+0x132>
   1ee52:	bf00      	nop
   1ee54:	200006f8 	.word	0x200006f8
   1ee58:	5002b000 	.word	0x5002b000
   1ee5c:	00f10001 	.word	0x00f10001
   1ee60:	00f10005 	.word	0x00f10005
   1ee64:	00f1000b 	.word	0x00f1000b
   1ee68:	00f10003 	.word	0x00f10003
   1ee6c:	00025510 	.word	0x00025510
   1ee70:	00025528 	.word	0x00025528
   1ee74:	00025568 	.word	0x00025568
   1ee78:	00025548 	.word	0x00025548
   1ee7c:	200006e4 	.word	0x200006e4
   1ee80:	00f10002 	.word	0x00f10002
   1ee84:	00f10004 	.word	0x00f10004
   1ee88:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1ee8c:	602a      	str	r2, [r5, #0]
   1ee8e:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1ee92:	606a      	str	r2, [r5, #4]
   1ee94:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1ee98:	60aa      	str	r2, [r5, #8]
   1ee9a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1ee9e:	60eb      	str	r3, [r5, #12]
   1eea0:	e746      	b.n	1ed30 <ProcessAesDrv+0x1cc>
   1eea2:	683b      	ldr	r3, [r7, #0]
   1eea4:	681b      	ldr	r3, [r3, #0]
   1eea6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1eeaa:	683b      	ldr	r3, [r7, #0]
   1eeac:	685b      	ldr	r3, [r3, #4]
   1eeae:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1eeb2:	683b      	ldr	r3, [r7, #0]
   1eeb4:	689b      	ldr	r3, [r3, #8]
   1eeb6:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1eeba:	683b      	ldr	r3, [r7, #0]
   1eebc:	68db      	ldr	r3, [r3, #12]
   1eebe:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1eec2:	4659      	mov	r1, fp
   1eec4:	4650      	mov	r0, sl
   1eec6:	f7fe fd1b 	bl	1d900 <CC_PalMemSetZeroPlat>
   1eeca:	e798      	b.n	1edfe <ProcessAesDrv+0x29a>

0001eecc <FinishAesDrv>:
   1eecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eed0:	b309      	cbz	r1, 1ef16 <FinishAesDrv+0x4a>
   1eed2:	b302      	cbz	r2, 1ef16 <FinishAesDrv+0x4a>
   1eed4:	4604      	mov	r4, r0
   1eed6:	2800      	cmp	r0, #0
   1eed8:	f000 80af 	beq.w	1f03a <FinishAesDrv+0x16e>
   1eedc:	461d      	mov	r5, r3
   1eede:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1eee0:	2b07      	cmp	r3, #7
   1eee2:	460e      	mov	r6, r1
   1eee4:	d01b      	beq.n	1ef1e <FinishAesDrv+0x52>
   1eee6:	b95d      	cbnz	r5, 1ef00 <FinishAesDrv+0x34>
   1eee8:	2b03      	cmp	r3, #3
   1eeea:	d110      	bne.n	1ef0e <FinishAesDrv+0x42>
   1eeec:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1eeee:	b973      	cbnz	r3, 1ef0e <FinishAesDrv+0x42>
   1eef0:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1eef4:	6645      	str	r5, [r0, #100]	; 0x64
   1eef6:	6685      	str	r5, [r0, #104]	; 0x68
   1eef8:	66c5      	str	r5, [r0, #108]	; 0x6c
   1eefa:	6705      	str	r5, [r0, #112]	; 0x70
   1eefc:	600b      	str	r3, [r1, #0]
   1eefe:	2510      	movs	r5, #16
   1ef00:	462b      	mov	r3, r5
   1ef02:	4631      	mov	r1, r6
   1ef04:	4620      	mov	r0, r4
   1ef06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ef0a:	f7ff be2b 	b.w	1eb64 <ProcessAesDrv>
   1ef0e:	462f      	mov	r7, r5
   1ef10:	4638      	mov	r0, r7
   1ef12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef16:	4f76      	ldr	r7, [pc, #472]	; (1f0f0 <FinishAesDrv+0x224>)
   1ef18:	4638      	mov	r0, r7
   1ef1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef1e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1ef20:	2b00      	cmp	r3, #0
   1ef22:	f040 808d 	bne.w	1f040 <FinishAesDrv+0x174>
   1ef26:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1ef2a:	f080 8090 	bcs.w	1f04e <FinishAesDrv+0x182>
   1ef2e:	b91d      	cbnz	r5, 1ef38 <FinishAesDrv+0x6c>
   1ef30:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1ef32:	2b00      	cmp	r3, #0
   1ef34:	f040 808b 	bne.w	1f04e <FinishAesDrv+0x182>
   1ef38:	486e      	ldr	r0, [pc, #440]	; (1f0f4 <FinishAesDrv+0x228>)
   1ef3a:	f04f 31ff 	mov.w	r1, #4294967295
   1ef3e:	f7fe fcf7 	bl	1d930 <CC_PalMutexLock>
   1ef42:	2800      	cmp	r0, #0
   1ef44:	f040 808f 	bne.w	1f066 <FinishAesDrv+0x19a>
   1ef48:	2000      	movs	r0, #0
   1ef4a:	f7fe fd21 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1ef4e:	2800      	cmp	r0, #0
   1ef50:	f040 8085 	bne.w	1f05e <FinishAesDrv+0x192>
   1ef54:	4a68      	ldr	r2, [pc, #416]	; (1f0f8 <FinishAesDrv+0x22c>)
   1ef56:	2301      	movs	r3, #1
   1ef58:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1ef5c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1ef60:	2b00      	cmp	r3, #0
   1ef62:	d1fb      	bne.n	1ef5c <FinishAesDrv+0x90>
   1ef64:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ef66:	2b03      	cmp	r3, #3
   1ef68:	dd4f      	ble.n	1f00a <FinishAesDrv+0x13e>
   1ef6a:	3b06      	subs	r3, #6
   1ef6c:	2b01      	cmp	r3, #1
   1ef6e:	d84e      	bhi.n	1f00e <FinishAesDrv+0x142>
   1ef70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ef72:	2b01      	cmp	r3, #1
   1ef74:	d86d      	bhi.n	1f052 <FinishAesDrv+0x186>
   1ef76:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ef78:	2b01      	cmp	r3, #1
   1ef7a:	d878      	bhi.n	1f06e <FinishAesDrv+0x1a2>
   1ef7c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ef7e:	2b01      	cmp	r3, #1
   1ef80:	d877      	bhi.n	1f072 <FinishAesDrv+0x1a6>
   1ef82:	4620      	mov	r0, r4
   1ef84:	f7ff fd64 	bl	1ea50 <InitAes.part.0>
   1ef88:	4607      	mov	r7, r0
   1ef8a:	2800      	cmp	r0, #0
   1ef8c:	d140      	bne.n	1f010 <FinishAesDrv+0x144>
   1ef8e:	4620      	mov	r0, r4
   1ef90:	f7ff fd0a 	bl	1e9a8 <LoadAesKey>
   1ef94:	4607      	mov	r7, r0
   1ef96:	2800      	cmp	r0, #0
   1ef98:	d13a      	bne.n	1f010 <FinishAesDrv+0x144>
   1ef9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1ef9c:	2a07      	cmp	r2, #7
   1ef9e:	d836      	bhi.n	1f00e <FinishAesDrv+0x142>
   1efa0:	2301      	movs	r3, #1
   1efa2:	4093      	lsls	r3, r2
   1efa4:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   1efa8:	f040 8081 	bne.w	1f0ae <FinishAesDrv+0x1e2>
   1efac:	f013 0f44 	tst.w	r3, #68	; 0x44
   1efb0:	d16f      	bne.n	1f092 <FinishAesDrv+0x1c6>
   1efb2:	07db      	lsls	r3, r3, #31
   1efb4:	d52b      	bpl.n	1f00e <FinishAesDrv+0x142>
   1efb6:	4b50      	ldr	r3, [pc, #320]	; (1f0f8 <FinishAesDrv+0x22c>)
   1efb8:	2201      	movs	r2, #1
   1efba:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   1efbe:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   1efc2:	6831      	ldr	r1, [r6, #0]
   1efc4:	2d00      	cmp	r5, #0
   1efc6:	d156      	bne.n	1f076 <FinishAesDrv+0x1aa>
   1efc8:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1efca:	b909      	cbnz	r1, 1efd0 <FinishAesDrv+0x104>
   1efcc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   1efd0:	4b49      	ldr	r3, [pc, #292]	; (1f0f8 <FinishAesDrv+0x22c>)
   1efd2:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   1efd6:	2f00      	cmp	r7, #0
   1efd8:	d1fb      	bne.n	1efd2 <FinishAesDrv+0x106>
   1efda:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1efdc:	2907      	cmp	r1, #7
   1efde:	d817      	bhi.n	1f010 <FinishAesDrv+0x144>
   1efe0:	2201      	movs	r2, #1
   1efe2:	408a      	lsls	r2, r1
   1efe4:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   1efe8:	d16f      	bne.n	1f0ca <FinishAesDrv+0x1fe>
   1efea:	f012 0f44 	tst.w	r2, #68	; 0x44
   1efee:	d00f      	beq.n	1f010 <FinishAesDrv+0x144>
   1eff0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1eff4:	6022      	str	r2, [r4, #0]
   1eff6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1effa:	6062      	str	r2, [r4, #4]
   1effc:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1f000:	60a2      	str	r2, [r4, #8]
   1f002:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1f006:	60e3      	str	r3, [r4, #12]
   1f008:	e002      	b.n	1f010 <FinishAesDrv+0x144>
   1f00a:	2b00      	cmp	r3, #0
   1f00c:	dab0      	bge.n	1ef70 <FinishAesDrv+0xa4>
   1f00e:	4f3b      	ldr	r7, [pc, #236]	; (1f0fc <FinishAesDrv+0x230>)
   1f010:	4a39      	ldr	r2, [pc, #228]	; (1f0f8 <FinishAesDrv+0x22c>)
   1f012:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1f016:	2b00      	cmp	r3, #0
   1f018:	d1fb      	bne.n	1f012 <FinishAesDrv+0x146>
   1f01a:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1f01e:	2001      	movs	r0, #1
   1f020:	f7fe fcb6 	bl	1d990 <CC_PalPowerSaveModeSelect>
   1f024:	b9b8      	cbnz	r0, 1f056 <FinishAesDrv+0x18a>
   1f026:	4833      	ldr	r0, [pc, #204]	; (1f0f4 <FinishAesDrv+0x228>)
   1f028:	f7fe fc8a 	bl	1d940 <CC_PalMutexUnlock>
   1f02c:	2800      	cmp	r0, #0
   1f02e:	f43f af6f 	beq.w	1ef10 <FinishAesDrv+0x44>
   1f032:	4833      	ldr	r0, [pc, #204]	; (1f100 <FinishAesDrv+0x234>)
   1f034:	f7fd fd70 	bl	1cb18 <CC_PalAbort>
   1f038:	e76a      	b.n	1ef10 <FinishAesDrv+0x44>
   1f03a:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1f03e:	e767      	b.n	1ef10 <FinishAesDrv+0x44>
   1f040:	2b01      	cmp	r3, #1
   1f042:	f47f af74 	bne.w	1ef2e <FinishAesDrv+0x62>
   1f046:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1f04a:	f4ff af70 	bcc.w	1ef2e <FinishAesDrv+0x62>
   1f04e:	4f2d      	ldr	r7, [pc, #180]	; (1f104 <FinishAesDrv+0x238>)
   1f050:	e75e      	b.n	1ef10 <FinishAesDrv+0x44>
   1f052:	4f2d      	ldr	r7, [pc, #180]	; (1f108 <FinishAesDrv+0x23c>)
   1f054:	e7dc      	b.n	1f010 <FinishAesDrv+0x144>
   1f056:	482d      	ldr	r0, [pc, #180]	; (1f10c <FinishAesDrv+0x240>)
   1f058:	f7fd fd5e 	bl	1cb18 <CC_PalAbort>
   1f05c:	e7e3      	b.n	1f026 <FinishAesDrv+0x15a>
   1f05e:	482c      	ldr	r0, [pc, #176]	; (1f110 <FinishAesDrv+0x244>)
   1f060:	f7fd fd5a 	bl	1cb18 <CC_PalAbort>
   1f064:	e776      	b.n	1ef54 <FinishAesDrv+0x88>
   1f066:	482b      	ldr	r0, [pc, #172]	; (1f114 <FinishAesDrv+0x248>)
   1f068:	f7fd fd56 	bl	1cb18 <CC_PalAbort>
   1f06c:	e76c      	b.n	1ef48 <FinishAesDrv+0x7c>
   1f06e:	4f2a      	ldr	r7, [pc, #168]	; (1f118 <FinishAesDrv+0x24c>)
   1f070:	e7ce      	b.n	1f010 <FinishAesDrv+0x144>
   1f072:	4f2a      	ldr	r7, [pc, #168]	; (1f11c <FinishAesDrv+0x250>)
   1f074:	e7cc      	b.n	1f010 <FinishAesDrv+0x144>
   1f076:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1f078:	2a01      	cmp	r2, #1
   1f07a:	d033      	beq.n	1f0e4 <FinishAesDrv+0x218>
   1f07c:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   1f080:	2010      	movs	r0, #16
   1f082:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1f086:	f7fe fbbd 	bl	1d804 <CC_HalWaitInterrupt>
   1f08a:	4607      	mov	r7, r0
   1f08c:	2800      	cmp	r0, #0
   1f08e:	d09f      	beq.n	1efd0 <FinishAesDrv+0x104>
   1f090:	e7be      	b.n	1f010 <FinishAesDrv+0x144>
   1f092:	4b19      	ldr	r3, [pc, #100]	; (1f0f8 <FinishAesDrv+0x22c>)
   1f094:	6822      	ldr	r2, [r4, #0]
   1f096:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1f09a:	6862      	ldr	r2, [r4, #4]
   1f09c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1f0a0:	68a2      	ldr	r2, [r4, #8]
   1f0a2:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1f0a6:	68e2      	ldr	r2, [r4, #12]
   1f0a8:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1f0ac:	e783      	b.n	1efb6 <FinishAesDrv+0xea>
   1f0ae:	4b12      	ldr	r3, [pc, #72]	; (1f0f8 <FinishAesDrv+0x22c>)
   1f0b0:	6822      	ldr	r2, [r4, #0]
   1f0b2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1f0b6:	6862      	ldr	r2, [r4, #4]
   1f0b8:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1f0bc:	68a2      	ldr	r2, [r4, #8]
   1f0be:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1f0c2:	68e2      	ldr	r2, [r4, #12]
   1f0c4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1f0c8:	e775      	b.n	1efb6 <FinishAesDrv+0xea>
   1f0ca:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1f0ce:	6022      	str	r2, [r4, #0]
   1f0d0:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1f0d4:	6062      	str	r2, [r4, #4]
   1f0d6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1f0da:	60a2      	str	r2, [r4, #8]
   1f0dc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1f0e0:	60e3      	str	r3, [r4, #12]
   1f0e2:	e795      	b.n	1f010 <FinishAesDrv+0x144>
   1f0e4:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   1f0e8:	2040      	movs	r0, #64	; 0x40
   1f0ea:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   1f0ee:	e7ca      	b.n	1f086 <FinishAesDrv+0x1ba>
   1f0f0:	00f1000b 	.word	0x00f1000b
   1f0f4:	200006f8 	.word	0x200006f8
   1f0f8:	5002b000 	.word	0x5002b000
   1f0fc:	00f10001 	.word	0x00f10001
   1f100:	00025568 	.word	0x00025568
   1f104:	00f10005 	.word	0x00f10005
   1f108:	00f10002 	.word	0x00f10002
   1f10c:	00025548 	.word	0x00025548
   1f110:	00025528 	.word	0x00025528
   1f114:	00025510 	.word	0x00025510
   1f118:	00f10003 	.word	0x00f10003
   1f11c:	00f10004 	.word	0x00f10004

0001f120 <kmu_validate_slot_and_size>:
   1f120:	b929      	cbnz	r1, 1f12e <kmu_validate_slot_and_size+0xe>
   1f122:	4b04      	ldr	r3, [pc, #16]	; (1f134 <kmu_validate_slot_and_size+0x14>)
   1f124:	2800      	cmp	r0, #0
   1f126:	bf14      	ite	ne
   1f128:	4618      	movne	r0, r3
   1f12a:	2000      	moveq	r0, #0
   1f12c:	4770      	bx	lr
   1f12e:	4802      	ldr	r0, [pc, #8]	; (1f138 <kmu_validate_slot_and_size+0x18>)
   1f130:	4770      	bx	lr
   1f132:	bf00      	nop
   1f134:	00f70001 	.word	0x00f70001
   1f138:	00f70003 	.word	0x00f70003

0001f13c <kmu_validate_kdr_slot_and_size>:
   1f13c:	b929      	cbnz	r1, 1f14a <kmu_validate_kdr_slot_and_size+0xe>
   1f13e:	4b04      	ldr	r3, [pc, #16]	; (1f150 <kmu_validate_kdr_slot_and_size+0x14>)
   1f140:	2800      	cmp	r0, #0
   1f142:	bf14      	ite	ne
   1f144:	4618      	movne	r0, r3
   1f146:	2000      	moveq	r0, #0
   1f148:	4770      	bx	lr
   1f14a:	4802      	ldr	r0, [pc, #8]	; (1f154 <kmu_validate_kdr_slot_and_size+0x18>)
   1f14c:	4770      	bx	lr
   1f14e:	bf00      	nop
   1f150:	00f70001 	.word	0x00f70001
   1f154:	00f70003 	.word	0x00f70003

0001f158 <kmu_use_kdr_key>:
   1f158:	4b03      	ldr	r3, [pc, #12]	; (1f168 <kmu_use_kdr_key+0x10>)
   1f15a:	2000      	movs	r0, #0
   1f15c:	2201      	movs	r2, #1
   1f15e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   1f162:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   1f166:	4770      	bx	lr
   1f168:	5002b000 	.word	0x5002b000

0001f16c <kmu_derive_cmac>:
   1f16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f170:	b0cc      	sub	sp, #304	; 0x130
   1f172:	2400      	movs	r4, #0
   1f174:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   1f176:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1f17a:	4682      	mov	sl, r0
   1f17c:	4689      	mov	r9, r1
   1f17e:	4616      	mov	r6, r2
   1f180:	4621      	mov	r1, r4
   1f182:	2274      	movs	r2, #116	; 0x74
   1f184:	a80e      	add	r0, sp, #56	; 0x38
   1f186:	461f      	mov	r7, r3
   1f188:	f000 fec2 	bl	1ff10 <memset>
   1f18c:	2280      	movs	r2, #128	; 0x80
   1f18e:	4621      	mov	r1, r4
   1f190:	a82c      	add	r0, sp, #176	; 0xb0
   1f192:	942b      	str	r4, [sp, #172]	; 0xac
   1f194:	f000 febc 	bl	1ff10 <memset>
   1f198:	2384      	movs	r3, #132	; 0x84
   1f19a:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f19e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1f1a2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1f1a6:	9305      	str	r3, [sp, #20]
   1f1a8:	d863      	bhi.n	1f272 <kmu_derive_cmac+0x106>
   1f1aa:	f7ff fcc3 	bl	1eb34 <write_invalid_key>
   1f1ae:	ab05      	add	r3, sp, #20
   1f1b0:	4630      	mov	r0, r6
   1f1b2:	ae2b      	add	r6, sp, #172	; 0xac
   1f1b4:	9301      	str	r3, [sp, #4]
   1f1b6:	9502      	str	r5, [sp, #8]
   1f1b8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1f1bc:	4639      	mov	r1, r7
   1f1be:	9600      	str	r6, [sp, #0]
   1f1c0:	f000 f862 	bl	1f288 <UtilCmacBuildDataForDerivation>
   1f1c4:	2800      	cmp	r0, #0
   1f1c6:	d14f      	bne.n	1f268 <kmu_derive_cmac+0xfc>
   1f1c8:	2303      	movs	r3, #3
   1f1ca:	f88d 3013 	strb.w	r3, [sp, #19]
   1f1ce:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f1d2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1f1d6:	2307      	movs	r3, #7
   1f1d8:	2200      	movs	r2, #0
   1f1da:	901c      	str	r0, [sp, #112]	; 0x70
   1f1dc:	2110      	movs	r1, #16
   1f1de:	a80e      	add	r0, sp, #56	; 0x38
   1f1e0:	931b      	str	r3, [sp, #108]	; 0x6c
   1f1e2:	2401      	movs	r4, #1
   1f1e4:	2301      	movs	r3, #1
   1f1e6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1f1ea:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   1f1ee:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   1f1f2:	9426      	str	r4, [sp, #152]	; 0x98
   1f1f4:	f10d 0920 	add.w	r9, sp, #32
   1f1f8:	f7fe fb82 	bl	1d900 <CC_PalMemSetZeroPlat>
   1f1fc:	2210      	movs	r2, #16
   1f1fe:	9200      	str	r2, [sp, #0]
   1f200:	9905      	ldr	r1, [sp, #20]
   1f202:	f8cd 9004 	str.w	r9, [sp, #4]
   1f206:	ab0a      	add	r3, sp, #40	; 0x28
   1f208:	4630      	mov	r0, r6
   1f20a:	aa06      	add	r2, sp, #24
   1f20c:	f7ff fa22 	bl	1e654 <SetDataBuffersInfo>
   1f210:	4607      	mov	r7, r0
   1f212:	b170      	cbz	r0, 1f232 <kmu_derive_cmac+0xc6>
   1f214:	e01d      	b.n	1f252 <kmu_derive_cmac+0xe6>
   1f216:	a90e      	add	r1, sp, #56	; 0x38
   1f218:	eb08 0007 	add.w	r0, r8, r7
   1f21c:	f7fe fb6c 	bl	1d8f8 <CC_PalMemCopyPlat>
   1f220:	2110      	movs	r1, #16
   1f222:	a80e      	add	r0, sp, #56	; 0x38
   1f224:	f7fe fb6c 	bl	1d900 <CC_PalMemSetZeroPlat>
   1f228:	3401      	adds	r4, #1
   1f22a:	1bad      	subs	r5, r5, r6
   1f22c:	4437      	add	r7, r6
   1f22e:	b2e4      	uxtb	r4, r4
   1f230:	d024      	beq.n	1f27c <kmu_derive_cmac+0x110>
   1f232:	2d10      	cmp	r5, #16
   1f234:	464a      	mov	r2, r9
   1f236:	9b05      	ldr	r3, [sp, #20]
   1f238:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1f23c:	a906      	add	r1, sp, #24
   1f23e:	a80e      	add	r0, sp, #56	; 0x38
   1f240:	462e      	mov	r6, r5
   1f242:	bf28      	it	cs
   1f244:	2610      	movcs	r6, #16
   1f246:	f7ff fe41 	bl	1eecc <FinishAesDrv>
   1f24a:	4632      	mov	r2, r6
   1f24c:	2800      	cmp	r0, #0
   1f24e:	d0e2      	beq.n	1f216 <kmu_derive_cmac+0xaa>
   1f250:	4607      	mov	r7, r0
   1f252:	a80e      	add	r0, sp, #56	; 0x38
   1f254:	2274      	movs	r2, #116	; 0x74
   1f256:	2100      	movs	r1, #0
   1f258:	f7fe fb50 	bl	1d8fc <CC_PalMemSetPlat>
   1f25c:	f7ff fc6a 	bl	1eb34 <write_invalid_key>
   1f260:	4638      	mov	r0, r7
   1f262:	b04c      	add	sp, #304	; 0x130
   1f264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f268:	4f05      	ldr	r7, [pc, #20]	; (1f280 <kmu_derive_cmac+0x114>)
   1f26a:	4638      	mov	r0, r7
   1f26c:	b04c      	add	sp, #304	; 0x130
   1f26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f272:	4f04      	ldr	r7, [pc, #16]	; (1f284 <kmu_derive_cmac+0x118>)
   1f274:	4638      	mov	r0, r7
   1f276:	b04c      	add	sp, #304	; 0x130
   1f278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f27c:	462f      	mov	r7, r5
   1f27e:	e7e8      	b.n	1f252 <kmu_derive_cmac+0xe6>
   1f280:	00f1000e 	.word	0x00f1000e
   1f284:	00f1000f 	.word	0x00f1000f

0001f288 <UtilCmacBuildDataForDerivation>:
   1f288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f28c:	b082      	sub	sp, #8
   1f28e:	461e      	mov	r6, r3
   1f290:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f292:	2300      	movs	r3, #0
   1f294:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f298:	9301      	str	r3, [sp, #4]
   1f29a:	d83e      	bhi.n	1f31a <UtilCmacBuildDataForDerivation+0x92>
   1f29c:	00ed      	lsls	r5, r5, #3
   1f29e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   1f2a2:	4617      	mov	r7, r2
   1f2a4:	f101 32ff 	add.w	r2, r1, #4294967295
   1f2a8:	bf34      	ite	cc
   1f2aa:	2303      	movcc	r3, #3
   1f2ac:	2304      	movcs	r3, #4
   1f2ae:	2a3f      	cmp	r2, #63	; 0x3f
   1f2b0:	460c      	mov	r4, r1
   1f2b2:	9300      	str	r3, [sp, #0]
   1f2b4:	d831      	bhi.n	1f31a <UtilCmacBuildDataForDerivation+0x92>
   1f2b6:	b380      	cbz	r0, 1f31a <UtilCmacBuildDataForDerivation+0x92>
   1f2b8:	bb66      	cbnz	r6, 1f314 <UtilCmacBuildDataForDerivation+0x8c>
   1f2ba:	9a08      	ldr	r2, [sp, #32]
   1f2bc:	b36a      	cbz	r2, 1f31a <UtilCmacBuildDataForDerivation+0x92>
   1f2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f2c0:	6811      	ldr	r1, [r2, #0]
   1f2c2:	b351      	cbz	r1, 1f31a <UtilCmacBuildDataForDerivation+0x92>
   1f2c4:	19a2      	adds	r2, r4, r6
   1f2c6:	4413      	add	r3, r2
   1f2c8:	4299      	cmp	r1, r3
   1f2ca:	d326      	bcc.n	1f31a <UtilCmacBuildDataForDerivation+0x92>
   1f2cc:	9b08      	ldr	r3, [sp, #32]
   1f2ce:	4601      	mov	r1, r0
   1f2d0:	4622      	mov	r2, r4
   1f2d2:	1c58      	adds	r0, r3, #1
   1f2d4:	f7fe fb10 	bl	1d8f8 <CC_PalMemCopyPlat>
   1f2d8:	9b08      	ldr	r3, [sp, #32]
   1f2da:	f104 0802 	add.w	r8, r4, #2
   1f2de:	441c      	add	r4, r3
   1f2e0:	2300      	movs	r3, #0
   1f2e2:	7063      	strb	r3, [r4, #1]
   1f2e4:	bb26      	cbnz	r6, 1f330 <UtilCmacBuildDataForDerivation+0xa8>
   1f2e6:	9b08      	ldr	r3, [sp, #32]
   1f2e8:	9500      	str	r5, [sp, #0]
   1f2ea:	2dff      	cmp	r5, #255	; 0xff
   1f2ec:	eb03 0008 	add.w	r0, r3, r8
   1f2f0:	d917      	bls.n	1f322 <UtilCmacBuildDataForDerivation+0x9a>
   1f2f2:	022b      	lsls	r3, r5, #8
   1f2f4:	b29b      	uxth	r3, r3
   1f2f6:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   1f2fa:	2202      	movs	r2, #2
   1f2fc:	a901      	add	r1, sp, #4
   1f2fe:	9301      	str	r3, [sp, #4]
   1f300:	f7fe fafa 	bl	1d8f8 <CC_PalMemCopyPlat>
   1f304:	f108 0302 	add.w	r3, r8, #2
   1f308:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f30a:	2000      	movs	r0, #0
   1f30c:	6013      	str	r3, [r2, #0]
   1f30e:	b002      	add	sp, #8
   1f310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f314:	b10f      	cbz	r7, 1f31a <UtilCmacBuildDataForDerivation+0x92>
   1f316:	2e40      	cmp	r6, #64	; 0x40
   1f318:	d9cf      	bls.n	1f2ba <UtilCmacBuildDataForDerivation+0x32>
   1f31a:	480a      	ldr	r0, [pc, #40]	; (1f344 <UtilCmacBuildDataForDerivation+0xbc>)
   1f31c:	b002      	add	sp, #8
   1f31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f322:	2201      	movs	r2, #1
   1f324:	4669      	mov	r1, sp
   1f326:	f7fe fae7 	bl	1d8f8 <CC_PalMemCopyPlat>
   1f32a:	f108 0301 	add.w	r3, r8, #1
   1f32e:	e7eb      	b.n	1f308 <UtilCmacBuildDataForDerivation+0x80>
   1f330:	9b08      	ldr	r3, [sp, #32]
   1f332:	4632      	mov	r2, r6
   1f334:	eb03 0008 	add.w	r0, r3, r8
   1f338:	4639      	mov	r1, r7
   1f33a:	f7fe fadd 	bl	1d8f8 <CC_PalMemCopyPlat>
   1f33e:	44b0      	add	r8, r6
   1f340:	e7d1      	b.n	1f2e6 <UtilCmacBuildDataForDerivation+0x5e>
   1f342:	bf00      	nop
   1f344:	80000006 	.word	0x80000006

0001f348 <CC_PalDataBufferAttrGet>:
   1f348:	2000      	movs	r0, #0
   1f34a:	7018      	strb	r0, [r3, #0]
   1f34c:	4770      	bx	lr
   1f34e:	bf00      	nop

0001f350 <main>:

/* 1000 msec = 1 sec */
#define SLEEP_TIME_MS 1000

int main(void)
{
   1f350:	b508      	push	{r3, lr}
	// Show init status 1
	// leds_init();
	bluetooth_init();
   1f352:	f7f2 f87d 	bl	11450 <bluetooth_init>
	// Led green on successful initialization.

	while (1)
   1f356:	e7fe      	b.n	1f356 <main+0x6>

0001f358 <arch_printk_char_out>:
}
   1f358:	2000      	movs	r0, #0
   1f35a:	4770      	bx	lr

0001f35c <str_out>:
{
   1f35c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f35e:	688a      	ldr	r2, [r1, #8]
   1f360:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1f362:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f364:	b114      	cbz	r4, 1f36c <str_out+0x10>
   1f366:	684b      	ldr	r3, [r1, #4]
   1f368:	4293      	cmp	r3, r2
   1f36a:	dc01      	bgt.n	1f370 <str_out+0x14>
		ctx->count++;
   1f36c:	608d      	str	r5, [r1, #8]
}
   1f36e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1f370:	3b01      	subs	r3, #1
   1f372:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1f374:	bf08      	it	eq
   1f376:	2200      	moveq	r2, #0
   1f378:	608d      	str	r5, [r1, #8]
   1f37a:	bf0c      	ite	eq
   1f37c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1f37e:	54a0      	strbne	r0, [r4, r2]
   1f380:	e7f5      	b.n	1f36e <str_out+0x12>

0001f382 <printk>:
{
   1f382:	b40f      	push	{r0, r1, r2, r3}
   1f384:	b507      	push	{r0, r1, r2, lr}
   1f386:	a904      	add	r1, sp, #16
   1f388:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1f38c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1f38e:	f7f2 f881 	bl	11494 <vprintk>
}
   1f392:	b003      	add	sp, #12
   1f394:	f85d eb04 	ldr.w	lr, [sp], #4
   1f398:	b004      	add	sp, #16
   1f39a:	4770      	bx	lr

0001f39c <snprintk>:
{
   1f39c:	b40c      	push	{r2, r3}
   1f39e:	b507      	push	{r0, r1, r2, lr}
   1f3a0:	ab04      	add	r3, sp, #16
   1f3a2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1f3a6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1f3a8:	f7f2 f882 	bl	114b0 <vsnprintk>
}
   1f3ac:	b003      	add	sp, #12
   1f3ae:	f85d eb04 	ldr.w	lr, [sp], #4
   1f3b2:	b002      	add	sp, #8
   1f3b4:	4770      	bx	lr

0001f3b6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1f3b6:	4604      	mov	r4, r0
   1f3b8:	b508      	push	{r3, lr}
   1f3ba:	4608      	mov	r0, r1
   1f3bc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1f3be:	461a      	mov	r2, r3
   1f3c0:	47a0      	blx	r4
	return z_impl_z_current_get();
   1f3c2:	f7fc fd93 	bl	1beec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1f3c6:	f7f3 fb11 	bl	129ec <z_impl_k_thread_abort>

0001f3ca <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1f3ca:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1f3ce:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1f3d0:	0840      	lsrs	r0, r0, #1
   1f3d2:	4770      	bx	lr

0001f3d4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3d6:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f3d8:	f7ff fff7 	bl	1f3ca <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1f3dc:	fab0 f080 	clz	r0, r0
   1f3e0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1f3e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1f3e8:	00ca      	lsls	r2, r1, #3
   1f3ea:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1f3ee:	1d17      	adds	r7, r2, #4
{
   1f3f0:	460c      	mov	r4, r1
   1f3f2:	3206      	adds	r2, #6
   1f3f4:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1f3f6:	b956      	cbnz	r6, 1f40e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1f3f8:	2101      	movs	r1, #1
   1f3fa:	fa01 f000 	lsl.w	r0, r1, r0
   1f3fe:	68d9      	ldr	r1, [r3, #12]
   1f400:	4301      	orrs	r1, r0
   1f402:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1f404:	f8cc 4010 	str.w	r4, [ip, #16]
   1f408:	53dd      	strh	r5, [r3, r7]
   1f40a:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1f40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1f40e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1f410:	3104      	adds	r1, #4
   1f412:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1f414:	53d8      	strh	r0, [r3, r7]
   1f416:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f41a:	529e      	strh	r6, [r3, r2]
   1f41c:	80c5      	strh	r5, [r0, #6]
   1f41e:	525d      	strh	r5, [r3, r1]
   1f420:	e7f4      	b.n	1f40c <free_list_add+0x38>

0001f422 <free_list_remove_bidx>:
{
   1f422:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1f424:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1f428:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1f42a:	4299      	cmp	r1, r3
   1f42c:	f102 0104 	add.w	r1, r2, #4
   1f430:	d10a      	bne.n	1f448 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1f432:	2301      	movs	r3, #1
   1f434:	fa03 f202 	lsl.w	r2, r3, r2
   1f438:	68c3      	ldr	r3, [r0, #12]
   1f43a:	ea23 0302 	bic.w	r3, r3, r2
   1f43e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1f440:	2300      	movs	r3, #0
   1f442:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1f446:	bd10      	pop	{r4, pc}
   1f448:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1f44a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1f44e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1f452:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1f456:	80cb      	strh	r3, [r1, #6]
   1f458:	8082      	strh	r2, [r0, #4]
}
   1f45a:	e7f4      	b.n	1f446 <free_list_remove_bidx+0x24>

0001f45c <free_list_remove>:
{
   1f45c:	b508      	push	{r3, lr}
   1f45e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f460:	f7ff ffb3 	bl	1f3ca <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1f464:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1f468:	f1c2 021f 	rsb	r2, r2, #31
   1f46c:	4618      	mov	r0, r3
}
   1f46e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1f472:	f7ff bfd6 	b.w	1f422 <free_list_remove_bidx>

0001f476 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1f476:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f47a:	fab1 f581 	clz	r5, r1
   1f47e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1f482:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   1f486:	4603      	mov	r3, r0
	if (b->next) {
   1f488:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1f48c:	460e      	mov	r6, r1
	if (b->next) {
   1f48e:	b1c2      	cbz	r2, 1f4c2 <alloc_chunk+0x4c>
   1f490:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1f492:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1f496:	4618      	mov	r0, r3
   1f498:	4621      	mov	r1, r4
   1f49a:	f7ff ff96 	bl	1f3ca <chunk_size>
   1f49e:	42b0      	cmp	r0, r6
   1f4a0:	d306      	bcc.n	1f4b0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1f4a2:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1f4a4:	4618      	mov	r0, r3
   1f4a6:	f7ff ffbc 	bl	1f422 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1f4aa:	4620      	mov	r0, r4
   1f4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1f4b0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1f4b4:	3f01      	subs	r7, #1
   1f4b6:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   1f4b8:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1f4bc:	d001      	beq.n	1f4c2 <alloc_chunk+0x4c>
   1f4be:	4282      	cmp	r2, r0
   1f4c0:	d1e7      	bne.n	1f492 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1f4c2:	f1c5 0220 	rsb	r2, r5, #32
   1f4c6:	f04f 34ff 	mov.w	r4, #4294967295
   1f4ca:	4094      	lsls	r4, r2
   1f4cc:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1f4ce:	4014      	ands	r4, r2
   1f4d0:	d0eb      	beq.n	1f4aa <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1f4d2:	fa94 f2a4 	rbit	r2, r4
   1f4d6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1f4da:	1d11      	adds	r1, r2, #4
   1f4dc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1f4e0:	4621      	mov	r1, r4
   1f4e2:	e7df      	b.n	1f4a4 <alloc_chunk+0x2e>

0001f4e4 <merge_chunks>:
{
   1f4e4:	b538      	push	{r3, r4, r5, lr}
   1f4e6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1f4e8:	f7ff ff6f 	bl	1f3ca <chunk_size>
{
   1f4ec:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1f4ee:	4604      	mov	r4, r0
   1f4f0:	4611      	mov	r1, r2
   1f4f2:	4618      	mov	r0, r3
   1f4f4:	f7ff ff69 	bl	1f3ca <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1f4f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1f4fc:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f4fe:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1f500:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1f502:	4618      	mov	r0, r3
   1f504:	f7ff ff61 	bl	1f3ca <chunk_size>
	void *cmem = &buf[c];
   1f508:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1f50a:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1f50e:	bd38      	pop	{r3, r4, r5, pc}

0001f510 <split_chunks>:
{
   1f510:	b538      	push	{r3, r4, r5, lr}
   1f512:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1f514:	f7ff ff59 	bl	1f3ca <chunk_size>
{
   1f518:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1f51a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1f51c:	1a51      	subs	r1, r2, r1
   1f51e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1f522:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f524:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1f526:	8060      	strh	r0, [r4, #2]
   1f528:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f52c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1f52e:	8044      	strh	r4, [r0, #2]
   1f530:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1f534:	4618      	mov	r0, r3
   1f536:	4611      	mov	r1, r2
   1f538:	f7ff ff47 	bl	1f3ca <chunk_size>
	void *cmem = &buf[c];
   1f53c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1f53e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1f542:	bd38      	pop	{r3, r4, r5, pc}

0001f544 <free_chunk>:
{
   1f544:	b538      	push	{r3, r4, r5, lr}
   1f546:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1f548:	f7ff ff3f 	bl	1f3ca <chunk_size>
   1f54c:	460c      	mov	r4, r1
   1f54e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1f550:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f554:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1f556:	07da      	lsls	r2, r3, #31
   1f558:	d40a      	bmi.n	1f570 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1f55a:	4628      	mov	r0, r5
   1f55c:	f7ff ff7e 	bl	1f45c <free_list_remove>
	return c + chunk_size(h, c);
   1f560:	4621      	mov	r1, r4
   1f562:	4628      	mov	r0, r5
   1f564:	f7ff ff31 	bl	1f3ca <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1f568:	1822      	adds	r2, r4, r0
   1f56a:	4628      	mov	r0, r5
   1f56c:	f7ff ffba 	bl	1f4e4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1f570:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1f574:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1f576:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f57a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1f57c:	07db      	lsls	r3, r3, #31
   1f57e:	d40c      	bmi.n	1f59a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1f580:	4628      	mov	r0, r5
   1f582:	f7ff ff6b 	bl	1f45c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1f586:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1f58a:	4622      	mov	r2, r4
   1f58c:	1a61      	subs	r1, r4, r1
   1f58e:	4628      	mov	r0, r5
   1f590:	f7ff ffa8 	bl	1f4e4 <merge_chunks>
   1f594:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1f598:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1f59a:	4621      	mov	r1, r4
   1f59c:	4628      	mov	r0, r5
}
   1f59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1f5a2:	f7ff bf17 	b.w	1f3d4 <free_list_add>

0001f5a6 <sys_heap_free>:
	if (mem == NULL) {
   1f5a6:	b161      	cbz	r1, 1f5c2 <sys_heap_free+0x1c>
   1f5a8:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f5aa:	3904      	subs	r1, #4
   1f5ac:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1f5ae:	f021 0307 	bic.w	r3, r1, #7
   1f5b2:	4403      	add	r3, r0
	free_chunk(h, c);
   1f5b4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f5b6:	885a      	ldrh	r2, [r3, #2]
   1f5b8:	f022 0201 	bic.w	r2, r2, #1
   1f5bc:	805a      	strh	r2, [r3, #2]
   1f5be:	f7ff bfc1 	b.w	1f544 <free_chunk>
}
   1f5c2:	4770      	bx	lr

0001f5c4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1f5c4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1f5c6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1f5c8:	b909      	cbnz	r1, 1f5ce <sys_heap_alloc+0xa>
		return NULL;
   1f5ca:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1f5cc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1f5ce:	68ab      	ldr	r3, [r5, #8]
   1f5d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1f5d4:	d9f9      	bls.n	1f5ca <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f5d6:	310b      	adds	r1, #11
   1f5d8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1f5da:	4621      	mov	r1, r4
   1f5dc:	4628      	mov	r0, r5
   1f5de:	f7ff ff4a 	bl	1f476 <alloc_chunk>
	if (c == 0U) {
   1f5e2:	4606      	mov	r6, r0
   1f5e4:	2800      	cmp	r0, #0
   1f5e6:	d0f0      	beq.n	1f5ca <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1f5e8:	4601      	mov	r1, r0
   1f5ea:	4628      	mov	r0, r5
   1f5ec:	f7ff feed 	bl	1f3ca <chunk_size>
   1f5f0:	42a0      	cmp	r0, r4
   1f5f2:	d907      	bls.n	1f604 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1f5f4:	1932      	adds	r2, r6, r4
   1f5f6:	4628      	mov	r0, r5
   1f5f8:	f7ff ff8a 	bl	1f510 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1f5fc:	4611      	mov	r1, r2
   1f5fe:	4628      	mov	r0, r5
   1f600:	f7ff fee8 	bl	1f3d4 <free_list_add>
	void *cmem = &buf[c];
   1f604:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1f608:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f60a:	8853      	ldrh	r3, [r2, #2]
   1f60c:	f043 0301 	orr.w	r3, r3, #1
   1f610:	8053      	strh	r3, [r2, #2]
   1f612:	3004      	adds	r0, #4
	return mem;
   1f614:	e7da      	b.n	1f5cc <sys_heap_alloc+0x8>

0001f616 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1f616:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f61a:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1f61e:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   1f622:	6806      	ldr	r6, [r0, #0]
{
   1f624:	460f      	mov	r7, r1
   1f626:	4614      	mov	r4, r2
	if (align != rew) {
   1f628:	d00c      	beq.n	1f644 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   1f62a:	424b      	negs	r3, r1
   1f62c:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1f62e:	2b04      	cmp	r3, #4
   1f630:	461a      	mov	r2, r3
   1f632:	464f      	mov	r7, r9
   1f634:	bf28      	it	cs
   1f636:	2204      	movcs	r2, #4
	rew = align & -align;
   1f638:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1f63a:	b964      	cbnz	r4, 1f656 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1f63c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1f63e:	4628      	mov	r0, r5
   1f640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1f644:	2904      	cmp	r1, #4
   1f646:	d804      	bhi.n	1f652 <sys_heap_aligned_alloc+0x3c>
}
   1f648:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1f64c:	4611      	mov	r1, r2
   1f64e:	f7ff bfb9 	b.w	1f5c4 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1f652:	2204      	movs	r2, #4
   1f654:	e7f1      	b.n	1f63a <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1f656:	68b3      	ldr	r3, [r6, #8]
   1f658:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1f65c:	d9ee      	bls.n	1f63c <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f65e:	f104 010b 	add.w	r1, r4, #11
   1f662:	4439      	add	r1, r7
   1f664:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1f666:	08c9      	lsrs	r1, r1, #3
   1f668:	4630      	mov	r0, r6
   1f66a:	f7ff ff04 	bl	1f476 <alloc_chunk>
	if (c0 == 0) {
   1f66e:	4680      	mov	r8, r0
   1f670:	2800      	cmp	r0, #0
   1f672:	d0e3      	beq.n	1f63c <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1f674:	f109 0504 	add.w	r5, r9, #4
   1f678:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1f67c:	1e7b      	subs	r3, r7, #1
   1f67e:	4435      	add	r5, r6
   1f680:	441d      	add	r5, r3
   1f682:	427f      	negs	r7, r7
   1f684:	403d      	ands	r5, r7
   1f686:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f68a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f68c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f68e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f690:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f692:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1f696:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1f698:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f69c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1f6a0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1f6a4:	d208      	bcs.n	1f6b8 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   1f6a6:	4601      	mov	r1, r0
   1f6a8:	463a      	mov	r2, r7
   1f6aa:	4630      	mov	r0, r6
   1f6ac:	f7ff ff30 	bl	1f510 <split_chunks>
		free_list_add(h, c0);
   1f6b0:	4641      	mov	r1, r8
   1f6b2:	4630      	mov	r0, r6
   1f6b4:	f7ff fe8e 	bl	1f3d4 <free_list_add>
	return c + chunk_size(h, c);
   1f6b8:	4639      	mov	r1, r7
   1f6ba:	4630      	mov	r0, r6
   1f6bc:	f7ff fe85 	bl	1f3ca <chunk_size>
   1f6c0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1f6c2:	4284      	cmp	r4, r0
   1f6c4:	d207      	bcs.n	1f6d6 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   1f6c6:	4630      	mov	r0, r6
   1f6c8:	4622      	mov	r2, r4
   1f6ca:	f7ff ff21 	bl	1f510 <split_chunks>
		free_list_add(h, c_end);
   1f6ce:	4621      	mov	r1, r4
   1f6d0:	4630      	mov	r0, r6
   1f6d2:	f7ff fe7f 	bl	1f3d4 <free_list_add>
	void *cmem = &buf[c];
   1f6d6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f6da:	8873      	ldrh	r3, [r6, #2]
   1f6dc:	f043 0301 	orr.w	r3, r3, #1
   1f6e0:	8073      	strh	r3, [r6, #2]
   1f6e2:	e7ac      	b.n	1f63e <sys_heap_aligned_alloc+0x28>

0001f6e4 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1f6e4:	3a04      	subs	r2, #4
{
   1f6e6:	b4f0      	push	{r4, r5, r6, r7}
   1f6e8:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1f6ea:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1f6ec:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1f6ee:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1f6f2:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1f6f6:	1a0e      	subs	r6, r1, r0
   1f6f8:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1f6fa:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   1f6fc:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1f700:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1f702:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   1f706:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   1f708:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1f70a:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   1f70c:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f710:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1f712:	f1c2 0220 	rsb	r2, r2, #32
   1f716:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1f718:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   1f71c:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1f720:	4294      	cmp	r4, r2
   1f722:	d1fb      	bne.n	1f71c <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f724:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f726:	f042 0201 	orr.w	r2, r2, #1
   1f72a:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   1f72c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1f730:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f732:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1f734:	8007      	strh	r7, [r0, #0]
   1f736:	8065      	strh	r5, [r4, #2]
   1f738:	1984      	adds	r4, r0, r6
   1f73a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1f73e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1f742:	8067      	strh	r7, [r4, #2]
   1f744:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f746:	885a      	ldrh	r2, [r3, #2]
   1f748:	f042 0201 	orr.w	r2, r2, #1
   1f74c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1f74e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1f750:	f7ff be40 	b.w	1f3d4 <free_list_add>

0001f754 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f754:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f756:	f013 0307 	ands.w	r3, r3, #7
   1f75a:	d105      	bne.n	1f768 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f75c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1f75e:	2b00      	cmp	r3, #0
   1f760:	bf0c      	ite	eq
   1f762:	2000      	moveq	r0, #0
   1f764:	2003      	movne	r0, #3
   1f766:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f768:	2b02      	cmp	r3, #2
   1f76a:	d105      	bne.n	1f778 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f76c:	8b40      	ldrh	r0, [r0, #26]
   1f76e:	fab0 f080 	clz	r0, r0
   1f772:	0940      	lsrs	r0, r0, #5
   1f774:	0080      	lsls	r0, r0, #2
   1f776:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f778:	2b01      	cmp	r3, #1
   1f77a:	d105      	bne.n	1f788 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f77c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1f77e:	2b00      	cmp	r3, #0
   1f780:	bf0c      	ite	eq
   1f782:	2000      	moveq	r0, #0
   1f784:	2005      	movne	r0, #5
   1f786:	4770      	bx	lr
	int evt = EVT_NOP;
   1f788:	2000      	movs	r0, #0
}
   1f78a:	4770      	bx	lr

0001f78c <validate_args>:
{
   1f78c:	b510      	push	{r4, lr}
   1f78e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f790:	b100      	cbz	r0, 1f794 <validate_args+0x8>
   1f792:	b911      	cbnz	r1, 1f79a <validate_args+0xe>
		return -EINVAL;
   1f794:	f06f 0015 	mvn.w	r0, #21
}
   1f798:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1f79a:	1d08      	adds	r0, r1, #4
   1f79c:	f000 f895 	bl	1f8ca <sys_notify_validate>
	if ((rv == 0)
   1f7a0:	2800      	cmp	r0, #0
   1f7a2:	d1f9      	bne.n	1f798 <validate_args+0xc>
	    && ((cli->notify.flags
   1f7a4:	68a3      	ldr	r3, [r4, #8]
   1f7a6:	2b03      	cmp	r3, #3
   1f7a8:	d9f6      	bls.n	1f798 <validate_args+0xc>
   1f7aa:	e7f3      	b.n	1f794 <validate_args+0x8>

0001f7ac <notify_one>:
{
   1f7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7b0:	460d      	mov	r5, r1
   1f7b2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f7b4:	4619      	mov	r1, r3
   1f7b6:	1d28      	adds	r0, r5, #4
{
   1f7b8:	4690      	mov	r8, r2
   1f7ba:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f7bc:	f000 f899 	bl	1f8f2 <sys_notify_finalize>
	if (cb) {
   1f7c0:	4604      	mov	r4, r0
   1f7c2:	b138      	cbz	r0, 1f7d4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f7c4:	4633      	mov	r3, r6
   1f7c6:	4642      	mov	r2, r8
   1f7c8:	4629      	mov	r1, r5
   1f7ca:	4638      	mov	r0, r7
   1f7cc:	46a4      	mov	ip, r4
}
   1f7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f7d2:	4760      	bx	ip
}
   1f7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f7d8 <transition_complete>:
{
   1f7d8:	b410      	push	{r4}
	__asm__ volatile(
   1f7da:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f7de:	f3ef 8211 	mrs	r2, BASEPRI
   1f7e2:	f384 8812 	msr	BASEPRI_MAX, r4
   1f7e6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f7ea:	6141      	str	r1, [r0, #20]
}
   1f7ec:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f7ee:	2101      	movs	r1, #1
   1f7f0:	f7f1 be74 	b.w	114dc <process_event>

0001f7f4 <onoff_manager_init>:
{
   1f7f4:	b538      	push	{r3, r4, r5, lr}
   1f7f6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f7f8:	4605      	mov	r5, r0
   1f7fa:	b158      	cbz	r0, 1f814 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f7fc:	b151      	cbz	r1, 1f814 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f7fe:	680b      	ldr	r3, [r1, #0]
   1f800:	b143      	cbz	r3, 1f814 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f802:	684b      	ldr	r3, [r1, #4]
   1f804:	b133      	cbz	r3, 1f814 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f806:	221c      	movs	r2, #28
   1f808:	2100      	movs	r1, #0
   1f80a:	f000 fb81 	bl	1ff10 <memset>
   1f80e:	612c      	str	r4, [r5, #16]
	return 0;
   1f810:	2000      	movs	r0, #0
}
   1f812:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f814:	f06f 0015 	mvn.w	r0, #21
   1f818:	e7fb      	b.n	1f812 <onoff_manager_init+0x1e>

0001f81a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f81a:	b570      	push	{r4, r5, r6, lr}
   1f81c:	4605      	mov	r5, r0
   1f81e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f820:	f7ff ffb4 	bl	1f78c <validate_args>

	if (rv < 0) {
   1f824:	1e04      	subs	r4, r0, #0
   1f826:	db15      	blt.n	1f854 <onoff_request+0x3a>
   1f828:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f82c:	f3ef 8211 	mrs	r2, BASEPRI
   1f830:	f383 8812 	msr	BASEPRI_MAX, r3
   1f834:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f838:	8b6b      	ldrh	r3, [r5, #26]
   1f83a:	8b2c      	ldrh	r4, [r5, #24]
   1f83c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f840:	428b      	cmp	r3, r1
   1f842:	f004 0407 	and.w	r4, r4, #7
   1f846:	d107      	bne.n	1f858 <onoff_request+0x3e>
	__asm__ volatile(
   1f848:	f382 8811 	msr	BASEPRI, r2
   1f84c:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1f850:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1f854:	4620      	mov	r0, r4
   1f856:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1f858:	2c02      	cmp	r4, #2
   1f85a:	d10c      	bne.n	1f876 <onoff_request+0x5c>
		mgr->refs += 1U;
   1f85c:	3301      	adds	r3, #1
   1f85e:	836b      	strh	r3, [r5, #26]
   1f860:	f382 8811 	msr	BASEPRI, r2
   1f864:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1f868:	2300      	movs	r3, #0
   1f86a:	4622      	mov	r2, r4
   1f86c:	4631      	mov	r1, r6
   1f86e:	4628      	mov	r0, r5
   1f870:	f7ff ff9c 	bl	1f7ac <notify_one>
   1f874:	e7ee      	b.n	1f854 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1f876:	2c06      	cmp	r4, #6
   1f878:	d814      	bhi.n	1f8a4 <onoff_request+0x8a>
   1f87a:	e8df f004 	tbb	[pc, r4]
   1f87e:	1304      	.short	0x1304
   1f880:	1a041313 	.word	0x1a041313
   1f884:	04          	.byte	0x04
   1f885:	00          	.byte	0x00
	parent->next = child;
   1f886:	2300      	movs	r3, #0
   1f888:	6033      	str	r3, [r6, #0]
	return list->tail;
   1f88a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1f88c:	b93b      	cbnz	r3, 1f89e <onoff_request+0x84>
	list->head = node;
   1f88e:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1f892:	b9ac      	cbnz	r4, 1f8c0 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1f894:	2102      	movs	r1, #2
   1f896:	4628      	mov	r0, r5
   1f898:	f7f1 fe20 	bl	114dc <process_event>
   1f89c:	e7da      	b.n	1f854 <onoff_request+0x3a>
	parent->next = child;
   1f89e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f8a0:	606e      	str	r6, [r5, #4]
}
   1f8a2:	e7f6      	b.n	1f892 <onoff_request+0x78>
   1f8a4:	f382 8811 	msr	BASEPRI, r2
   1f8a8:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1f8ac:	f06f 0404 	mvn.w	r4, #4
   1f8b0:	e7d0      	b.n	1f854 <onoff_request+0x3a>
   1f8b2:	f382 8811 	msr	BASEPRI, r2
   1f8b6:	f3bf 8f6f 	isb	sy
   1f8ba:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1f8be:	e7c9      	b.n	1f854 <onoff_request+0x3a>
   1f8c0:	f382 8811 	msr	BASEPRI, r2
   1f8c4:	f3bf 8f6f 	isb	sy
		if (notify) {
   1f8c8:	e7c4      	b.n	1f854 <onoff_request+0x3a>

0001f8ca <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f8ca:	4603      	mov	r3, r0
   1f8cc:	b140      	cbz	r0, 1f8e0 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f8ce:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f8d0:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f8d4:	2a02      	cmp	r2, #2
   1f8d6:	d006      	beq.n	1f8e6 <sys_notify_validate+0x1c>
   1f8d8:	2a03      	cmp	r2, #3
   1f8da:	d004      	beq.n	1f8e6 <sys_notify_validate+0x1c>
   1f8dc:	2a01      	cmp	r2, #1
   1f8de:	d005      	beq.n	1f8ec <sys_notify_validate+0x22>
   1f8e0:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f8e4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f8e6:	681a      	ldr	r2, [r3, #0]
   1f8e8:	2a00      	cmp	r2, #0
   1f8ea:	d0f9      	beq.n	1f8e0 <sys_notify_validate+0x16>
		notify->result = 0;
   1f8ec:	2000      	movs	r0, #0
   1f8ee:	6098      	str	r0, [r3, #8]
   1f8f0:	4770      	bx	lr

0001f8f2 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1f8f2:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f8f4:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1f8f6:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f8f8:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   1f8fc:	2a02      	cmp	r2, #2
{
   1f8fe:	4603      	mov	r3, r0
	switch (method) {
   1f900:	f04f 0400 	mov.w	r4, #0
   1f904:	d007      	beq.n	1f916 <sys_notify_finalize+0x24>
   1f906:	2a03      	cmp	r2, #3
   1f908:	d002      	beq.n	1f910 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f90a:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1f90c:	2000      	movs	r0, #0
   1f90e:	e001      	b.n	1f914 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1f910:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f912:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f914:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f916:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f918:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f91a:	2800      	cmp	r0, #0
   1f91c:	d0f6      	beq.n	1f90c <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   1f91e:	f7fc fd13 	bl	1c348 <z_impl_k_poll_signal_raise>
   1f922:	e7f3      	b.n	1f90c <sys_notify_finalize+0x1a>

0001f924 <encode_uint>:
{
   1f924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f928:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   1f92a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1f92c:	2b6f      	cmp	r3, #111	; 0x6f
{
   1f92e:	4680      	mov	r8, r0
   1f930:	460f      	mov	r7, r1
   1f932:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1f934:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1f938:	d029      	beq.n	1f98e <encode_uint+0x6a>
   1f93a:	d824      	bhi.n	1f986 <encode_uint+0x62>
		return 10;
   1f93c:	2b58      	cmp	r3, #88	; 0x58
   1f93e:	bf0c      	ite	eq
   1f940:	2610      	moveq	r6, #16
   1f942:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1f944:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1f948:	4632      	mov	r2, r6
   1f94a:	2300      	movs	r3, #0
   1f94c:	4640      	mov	r0, r8
   1f94e:	4639      	mov	r1, r7
   1f950:	f7e0 fbd6 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f954:	2a09      	cmp	r2, #9
   1f956:	b2d4      	uxtb	r4, r2
   1f958:	d81e      	bhi.n	1f998 <encode_uint+0x74>
   1f95a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1f95c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f95e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1f960:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f964:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1f968:	d301      	bcc.n	1f96e <encode_uint+0x4a>
   1f96a:	45d1      	cmp	r9, sl
   1f96c:	d811      	bhi.n	1f992 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1f96e:	782b      	ldrb	r3, [r5, #0]
   1f970:	069b      	lsls	r3, r3, #26
   1f972:	d505      	bpl.n	1f980 <encode_uint+0x5c>
		if (radix == 8) {
   1f974:	2e08      	cmp	r6, #8
   1f976:	d115      	bne.n	1f9a4 <encode_uint+0x80>
			conv->altform_0 = true;
   1f978:	78ab      	ldrb	r3, [r5, #2]
   1f97a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1f97e:	70ab      	strb	r3, [r5, #2]
}
   1f980:	4648      	mov	r0, r9
   1f982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1f986:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1f98a:	2b70      	cmp	r3, #112	; 0x70
   1f98c:	e7d7      	b.n	1f93e <encode_uint+0x1a>
	switch (specifier) {
   1f98e:	2608      	movs	r6, #8
   1f990:	e7d8      	b.n	1f944 <encode_uint+0x20>
		value /= radix;
   1f992:	4680      	mov	r8, r0
   1f994:	460f      	mov	r7, r1
   1f996:	e7d7      	b.n	1f948 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f998:	f1bb 0f19 	cmp.w	fp, #25
   1f99c:	bf94      	ite	ls
   1f99e:	3437      	addls	r4, #55	; 0x37
   1f9a0:	3457      	addhi	r4, #87	; 0x57
   1f9a2:	e7db      	b.n	1f95c <encode_uint+0x38>
		} else if (radix == 16) {
   1f9a4:	2e10      	cmp	r6, #16
   1f9a6:	d1eb      	bne.n	1f980 <encode_uint+0x5c>
			conv->altform_0c = true;
   1f9a8:	78ab      	ldrb	r3, [r5, #2]
   1f9aa:	f043 0310 	orr.w	r3, r3, #16
   1f9ae:	e7e6      	b.n	1f97e <encode_uint+0x5a>

0001f9b0 <outs>:
{
   1f9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9b4:	4607      	mov	r7, r0
   1f9b6:	4688      	mov	r8, r1
   1f9b8:	4615      	mov	r5, r2
   1f9ba:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1f9bc:	4614      	mov	r4, r2
   1f9be:	42b4      	cmp	r4, r6
   1f9c0:	d305      	bcc.n	1f9ce <outs+0x1e>
   1f9c2:	b10e      	cbz	r6, 1f9c8 <outs+0x18>
	return (int)count;
   1f9c4:	1b60      	subs	r0, r4, r5
   1f9c6:	e008      	b.n	1f9da <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1f9c8:	7823      	ldrb	r3, [r4, #0]
   1f9ca:	2b00      	cmp	r3, #0
   1f9cc:	d0fa      	beq.n	1f9c4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1f9ce:	f814 0b01 	ldrb.w	r0, [r4], #1
   1f9d2:	4641      	mov	r1, r8
   1f9d4:	47b8      	blx	r7
		if (rc < 0) {
   1f9d6:	2800      	cmp	r0, #0
   1f9d8:	daf1      	bge.n	1f9be <outs+0xe>
}
   1f9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f9de <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1f9de:	b40f      	push	{r0, r1, r2, r3}
   1f9e0:	b507      	push	{r0, r1, r2, lr}
   1f9e2:	a904      	add	r1, sp, #16
   1f9e4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1f9e8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1f9ea:	f7f1 fd53 	bl	11494 <vprintk>

	va_end(ap);
}
   1f9ee:	b003      	add	sp, #12
   1f9f0:	f85d eb04 	ldr.w	lr, [sp], #4
   1f9f4:	b004      	add	sp, #16
   1f9f6:	4770      	bx	lr

0001f9f8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1f9f8:	4770      	bx	lr

0001f9fa <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1f9fa:	b538      	push	{r3, r4, r5, lr}
   1f9fc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1f9fe:	42ab      	cmp	r3, r5
{
   1fa00:	4611      	mov	r1, r2
   1fa02:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1fa04:	d804      	bhi.n	1fa10 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1fa06:	461a      	mov	r2, r3
   1fa08:	f000 fa77 	bl	1fefa <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1fa0c:	4620      	mov	r0, r4
   1fa0e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1fa10:	2400      	movs	r4, #0
   1fa12:	e7fb      	b.n	1fa0c <_copy+0x12>

0001fa14 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1fa14:	f000 ba7c 	b.w	1ff10 <memset>

0001fa18 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1fa18:	09c3      	lsrs	r3, r0, #7
   1fa1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1fa1e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1fa22:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1fa26:	b2c0      	uxtb	r0, r0
   1fa28:	4770      	bx	lr

0001fa2a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1fa2a:	78cb      	ldrb	r3, [r1, #3]
   1fa2c:	7802      	ldrb	r2, [r0, #0]
   1fa2e:	4053      	eors	r3, r2
   1fa30:	7003      	strb	r3, [r0, #0]
   1fa32:	884b      	ldrh	r3, [r1, #2]
   1fa34:	7842      	ldrb	r2, [r0, #1]
   1fa36:	4053      	eors	r3, r2
   1fa38:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1fa3a:	680a      	ldr	r2, [r1, #0]
   1fa3c:	7883      	ldrb	r3, [r0, #2]
   1fa3e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fa42:	7083      	strb	r3, [r0, #2]
   1fa44:	680a      	ldr	r2, [r1, #0]
   1fa46:	78c3      	ldrb	r3, [r0, #3]
   1fa48:	4053      	eors	r3, r2
   1fa4a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1fa4c:	79cb      	ldrb	r3, [r1, #7]
   1fa4e:	7902      	ldrb	r2, [r0, #4]
   1fa50:	4053      	eors	r3, r2
   1fa52:	7103      	strb	r3, [r0, #4]
   1fa54:	88cb      	ldrh	r3, [r1, #6]
   1fa56:	7942      	ldrb	r2, [r0, #5]
   1fa58:	4053      	eors	r3, r2
   1fa5a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1fa5c:	684a      	ldr	r2, [r1, #4]
   1fa5e:	7983      	ldrb	r3, [r0, #6]
   1fa60:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fa64:	7183      	strb	r3, [r0, #6]
   1fa66:	684a      	ldr	r2, [r1, #4]
   1fa68:	79c3      	ldrb	r3, [r0, #7]
   1fa6a:	4053      	eors	r3, r2
   1fa6c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1fa6e:	7acb      	ldrb	r3, [r1, #11]
   1fa70:	7a02      	ldrb	r2, [r0, #8]
   1fa72:	4053      	eors	r3, r2
   1fa74:	7203      	strb	r3, [r0, #8]
   1fa76:	7a42      	ldrb	r2, [r0, #9]
   1fa78:	894b      	ldrh	r3, [r1, #10]
   1fa7a:	4053      	eors	r3, r2
   1fa7c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1fa7e:	688a      	ldr	r2, [r1, #8]
   1fa80:	7a83      	ldrb	r3, [r0, #10]
   1fa82:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fa86:	7283      	strb	r3, [r0, #10]
   1fa88:	688a      	ldr	r2, [r1, #8]
   1fa8a:	7ac3      	ldrb	r3, [r0, #11]
   1fa8c:	4053      	eors	r3, r2
   1fa8e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1fa90:	7bcb      	ldrb	r3, [r1, #15]
   1fa92:	7b02      	ldrb	r2, [r0, #12]
   1fa94:	4053      	eors	r3, r2
   1fa96:	7303      	strb	r3, [r0, #12]
   1fa98:	89cb      	ldrh	r3, [r1, #14]
   1fa9a:	7b42      	ldrb	r2, [r0, #13]
   1fa9c:	4053      	eors	r3, r2
   1fa9e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1faa0:	68ca      	ldr	r2, [r1, #12]
   1faa2:	7b83      	ldrb	r3, [r0, #14]
   1faa4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1faa8:	7383      	strb	r3, [r0, #14]
   1faaa:	68ca      	ldr	r2, [r1, #12]
   1faac:	7bc3      	ldrb	r3, [r0, #15]
   1faae:	4053      	eors	r3, r2
   1fab0:	73c3      	strb	r3, [r0, #15]
}
   1fab2:	4770      	bx	lr

0001fab4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1fab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1fab6:	7802      	ldrb	r2, [r0, #0]
   1fab8:	f88d 2000 	strb.w	r2, [sp]
   1fabc:	7942      	ldrb	r2, [r0, #5]
   1fabe:	f88d 2001 	strb.w	r2, [sp, #1]
   1fac2:	7a82      	ldrb	r2, [r0, #10]
   1fac4:	f88d 2002 	strb.w	r2, [sp, #2]
   1fac8:	7bc2      	ldrb	r2, [r0, #15]
   1faca:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1face:	7902      	ldrb	r2, [r0, #4]
   1fad0:	f88d 2004 	strb.w	r2, [sp, #4]
   1fad4:	7a42      	ldrb	r2, [r0, #9]
   1fad6:	f88d 2005 	strb.w	r2, [sp, #5]
   1fada:	7b82      	ldrb	r2, [r0, #14]
   1fadc:	f88d 2006 	strb.w	r2, [sp, #6]
   1fae0:	78c2      	ldrb	r2, [r0, #3]
   1fae2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1fae6:	7a02      	ldrb	r2, [r0, #8]
   1fae8:	f88d 2008 	strb.w	r2, [sp, #8]
   1faec:	7b42      	ldrb	r2, [r0, #13]
   1faee:	f88d 2009 	strb.w	r2, [sp, #9]
   1faf2:	7882      	ldrb	r2, [r0, #2]
   1faf4:	f88d 200a 	strb.w	r2, [sp, #10]
   1faf8:	79c2      	ldrb	r2, [r0, #7]
   1fafa:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1fafe:	7b02      	ldrb	r2, [r0, #12]
   1fb00:	f88d 200c 	strb.w	r2, [sp, #12]
   1fb04:	7842      	ldrb	r2, [r0, #1]
   1fb06:	7ac3      	ldrb	r3, [r0, #11]
   1fb08:	f88d 200d 	strb.w	r2, [sp, #13]
   1fb0c:	7982      	ldrb	r2, [r0, #6]
   1fb0e:	f88d 200e 	strb.w	r2, [sp, #14]
   1fb12:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1fb16:	2310      	movs	r3, #16
   1fb18:	466a      	mov	r2, sp
   1fb1a:	4619      	mov	r1, r3
   1fb1c:	f7ff ff6d 	bl	1f9fa <_copy>
}
   1fb20:	b005      	add	sp, #20
   1fb22:	f85d fb04 	ldr.w	pc, [sp], #4

0001fb26 <mult_row_column>:
{
   1fb26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb28:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fb2a:	7808      	ldrb	r0, [r1, #0]
{
   1fb2c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fb2e:	f7ff ff73 	bl	1fa18 <_double_byte>
   1fb32:	4605      	mov	r5, r0
   1fb34:	7860      	ldrb	r0, [r4, #1]
   1fb36:	f7ff ff6f 	bl	1fa18 <_double_byte>
   1fb3a:	78a2      	ldrb	r2, [r4, #2]
   1fb3c:	7863      	ldrb	r3, [r4, #1]
   1fb3e:	4053      	eors	r3, r2
   1fb40:	78e2      	ldrb	r2, [r4, #3]
   1fb42:	4053      	eors	r3, r2
   1fb44:	405d      	eors	r5, r3
   1fb46:	4068      	eors	r0, r5
   1fb48:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1fb4a:	7860      	ldrb	r0, [r4, #1]
   1fb4c:	7827      	ldrb	r7, [r4, #0]
   1fb4e:	f7ff ff63 	bl	1fa18 <_double_byte>
   1fb52:	4605      	mov	r5, r0
   1fb54:	78a0      	ldrb	r0, [r4, #2]
   1fb56:	f7ff ff5f 	bl	1fa18 <_double_byte>
   1fb5a:	78a3      	ldrb	r3, [r4, #2]
   1fb5c:	405f      	eors	r7, r3
   1fb5e:	78e3      	ldrb	r3, [r4, #3]
   1fb60:	405f      	eors	r7, r3
   1fb62:	407d      	eors	r5, r7
   1fb64:	4068      	eors	r0, r5
   1fb66:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1fb68:	7863      	ldrb	r3, [r4, #1]
   1fb6a:	7827      	ldrb	r7, [r4, #0]
   1fb6c:	78a0      	ldrb	r0, [r4, #2]
   1fb6e:	405f      	eors	r7, r3
   1fb70:	f7ff ff52 	bl	1fa18 <_double_byte>
   1fb74:	4605      	mov	r5, r0
   1fb76:	78e0      	ldrb	r0, [r4, #3]
   1fb78:	f7ff ff4e 	bl	1fa18 <_double_byte>
   1fb7c:	78e3      	ldrb	r3, [r4, #3]
   1fb7e:	405f      	eors	r7, r3
   1fb80:	407d      	eors	r5, r7
   1fb82:	4068      	eors	r0, r5
   1fb84:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1fb86:	7820      	ldrb	r0, [r4, #0]
   1fb88:	f7ff ff46 	bl	1fa18 <_double_byte>
   1fb8c:	7862      	ldrb	r2, [r4, #1]
   1fb8e:	7823      	ldrb	r3, [r4, #0]
   1fb90:	4053      	eors	r3, r2
   1fb92:	78a2      	ldrb	r2, [r4, #2]
   1fb94:	4053      	eors	r3, r2
   1fb96:	ea80 0503 	eor.w	r5, r0, r3
   1fb9a:	78e0      	ldrb	r0, [r4, #3]
   1fb9c:	f7ff ff3c 	bl	1fa18 <_double_byte>
   1fba0:	b2ed      	uxtb	r5, r5
   1fba2:	4045      	eors	r5, r0
   1fba4:	70f5      	strb	r5, [r6, #3]
}
   1fba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fba8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1fba8:	b570      	push	{r4, r5, r6, lr}
   1fbaa:	4614      	mov	r4, r2
   1fbac:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1fbae:	4605      	mov	r5, r0
   1fbb0:	2800      	cmp	r0, #0
   1fbb2:	d049      	beq.n	1fc48 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1fbb4:	2900      	cmp	r1, #0
   1fbb6:	d049      	beq.n	1fc4c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1fbb8:	2a00      	cmp	r2, #0
   1fbba:	d049      	beq.n	1fc50 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1fbbc:	2310      	movs	r3, #16
   1fbbe:	460a      	mov	r2, r1
   1fbc0:	4668      	mov	r0, sp
   1fbc2:	4619      	mov	r1, r3
   1fbc4:	f7ff ff19 	bl	1f9fa <_copy>
	add_round_key(state, s->words);
   1fbc8:	4621      	mov	r1, r4
   1fbca:	4668      	mov	r0, sp
   1fbcc:	f7ff ff2d 	bl	1fa2a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1fbd0:	3410      	adds	r4, #16
   1fbd2:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1fbd6:	4668      	mov	r0, sp
   1fbd8:	f7f2 fa92 	bl	12100 <sub_bytes>
		shift_rows(state);
   1fbdc:	4668      	mov	r0, sp
   1fbde:	f7ff ff69 	bl	1fab4 <shift_rows>
	mult_row_column(t, s);
   1fbe2:	4669      	mov	r1, sp
   1fbe4:	a804      	add	r0, sp, #16
   1fbe6:	f7ff ff9e 	bl	1fb26 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1fbea:	a901      	add	r1, sp, #4
   1fbec:	a805      	add	r0, sp, #20
   1fbee:	f7ff ff9a 	bl	1fb26 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1fbf2:	a902      	add	r1, sp, #8
   1fbf4:	a806      	add	r0, sp, #24
   1fbf6:	f7ff ff96 	bl	1fb26 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1fbfa:	a903      	add	r1, sp, #12
   1fbfc:	a807      	add	r0, sp, #28
   1fbfe:	f7ff ff92 	bl	1fb26 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1fc02:	2310      	movs	r3, #16
   1fc04:	4619      	mov	r1, r3
   1fc06:	eb0d 0203 	add.w	r2, sp, r3
   1fc0a:	4668      	mov	r0, sp
   1fc0c:	f7ff fef5 	bl	1f9fa <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1fc10:	4621      	mov	r1, r4
   1fc12:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1fc14:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1fc16:	f7ff ff08 	bl	1fa2a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1fc1a:	42b4      	cmp	r4, r6
   1fc1c:	d1db      	bne.n	1fbd6 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1fc1e:	f7f2 fa6f 	bl	12100 <sub_bytes>
	shift_rows(state);
   1fc22:	4668      	mov	r0, sp
   1fc24:	f7ff ff46 	bl	1fab4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1fc28:	4621      	mov	r1, r4
   1fc2a:	4668      	mov	r0, sp
   1fc2c:	f7ff fefd 	bl	1fa2a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1fc30:	2310      	movs	r3, #16
   1fc32:	4619      	mov	r1, r3
   1fc34:	466a      	mov	r2, sp
   1fc36:	4628      	mov	r0, r5
   1fc38:	f7ff fedf 	bl	1f9fa <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1fc3c:	4668      	mov	r0, sp
   1fc3e:	2210      	movs	r2, #16
   1fc40:	2100      	movs	r1, #0
   1fc42:	f7ff fee7 	bl	1fa14 <_set>

	return TC_CRYPTO_SUCCESS;
   1fc46:	2001      	movs	r0, #1
}
   1fc48:	b008      	add	sp, #32
   1fc4a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1fc4c:	4608      	mov	r0, r1
   1fc4e:	e7fb      	b.n	1fc48 <tc_aes_encrypt+0xa0>
   1fc50:	4610      	mov	r0, r2
   1fc52:	e7f9      	b.n	1fc48 <tc_aes_encrypt+0xa0>

0001fc54 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1fc54:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fc56:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1fc58:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fc5a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1fc5e:	2b00      	cmp	r3, #0
   1fc60:	bfac      	ite	ge
   1fc62:	2300      	movge	r3, #0
   1fc64:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1fc66:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1fc6a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1fc6e:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1fc70:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1fc74:	d002      	beq.n	1fc7c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1fc76:	7813      	ldrb	r3, [r2, #0]
   1fc78:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1fc7a:	e7f4      	b.n	1fc66 <gf_double+0x12>
	}
}
   1fc7c:	bd10      	pop	{r4, pc}

0001fc7e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1fc7e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1fc80:	b120      	cbz	r0, 1fc8c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1fc82:	2258      	movs	r2, #88	; 0x58
   1fc84:	2100      	movs	r1, #0
   1fc86:	f7ff fec5 	bl	1fa14 <_set>
   1fc8a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fc8c:	bd08      	pop	{r3, pc}

0001fc8e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1fc8e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1fc90:	4604      	mov	r4, r0
   1fc92:	b188      	cbz	r0, 1fcb8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1fc94:	2210      	movs	r2, #16
   1fc96:	2100      	movs	r1, #0
   1fc98:	f7ff febc 	bl	1fa14 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1fc9c:	2210      	movs	r2, #16
   1fc9e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fca2:	2100      	movs	r1, #0
   1fca4:	f7ff feb6 	bl	1fa14 <_set>
	s->leftover_offset = 0;
   1fca8:	2300      	movs	r3, #0
   1fcaa:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1fcac:	2200      	movs	r2, #0
   1fcae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fcb2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1fcb6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fcb8:	bd10      	pop	{r4, pc}

0001fcba <tc_cmac_setup>:
{
   1fcba:	b570      	push	{r4, r5, r6, lr}
   1fcbc:	4604      	mov	r4, r0
   1fcbe:	460d      	mov	r5, r1
   1fcc0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1fcc2:	b310      	cbz	r0, 1fd0a <tc_cmac_setup+0x50>
   1fcc4:	b311      	cbz	r1, 1fd0c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1fcc6:	2258      	movs	r2, #88	; 0x58
   1fcc8:	2100      	movs	r1, #0
   1fcca:	f7ff fea3 	bl	1fa14 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1fcce:	4629      	mov	r1, r5
	s->sched = sched;
   1fcd0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1fcd2:	4630      	mov	r0, r6
   1fcd4:	f7f2 fa20 	bl	12118 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1fcd8:	2210      	movs	r2, #16
   1fcda:	2100      	movs	r1, #0
   1fcdc:	4620      	mov	r0, r4
   1fcde:	f7ff fe99 	bl	1fa14 <_set>
	gf_double (s->K1, s->iv);
   1fce2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fce6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fce8:	4621      	mov	r1, r4
   1fcea:	4620      	mov	r0, r4
   1fcec:	f7ff ff5c 	bl	1fba8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1fcf0:	4621      	mov	r1, r4
   1fcf2:	4628      	mov	r0, r5
   1fcf4:	f7ff ffae 	bl	1fc54 <gf_double>
	gf_double (s->K2, s->K1);
   1fcf8:	4629      	mov	r1, r5
   1fcfa:	f104 0020 	add.w	r0, r4, #32
   1fcfe:	f7ff ffa9 	bl	1fc54 <gf_double>
	tc_cmac_init(s);
   1fd02:	4620      	mov	r0, r4
   1fd04:	f7ff ffc3 	bl	1fc8e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1fd08:	2001      	movs	r0, #1
}
   1fd0a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1fd0c:	4608      	mov	r0, r1
   1fd0e:	e7fc      	b.n	1fd0a <tc_cmac_setup+0x50>

0001fd10 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1fd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd14:	460e      	mov	r6, r1
   1fd16:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1fd18:	4604      	mov	r4, r0
   1fd1a:	2800      	cmp	r0, #0
   1fd1c:	d060      	beq.n	1fde0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1fd1e:	b1fa      	cbz	r2, 1fd60 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1fd20:	2900      	cmp	r1, #0
   1fd22:	d05d      	beq.n	1fde0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1fd24:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1fd28:	ea53 0102 	orrs.w	r1, r3, r2
   1fd2c:	d058      	beq.n	1fde0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1fd2e:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1fd30:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1fd34:	f142 32ff 	adc.w	r2, r2, #4294967295
   1fd38:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1fd3c:	f1b8 0f00 	cmp.w	r8, #0
   1fd40:	d02c      	beq.n	1fd9c <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1fd42:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1fd46:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1fd4a:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1fd4c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1fd4e:	d20a      	bcs.n	1fd66 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1fd50:	462b      	mov	r3, r5
   1fd52:	4632      	mov	r2, r6
   1fd54:	4629      	mov	r1, r5
   1fd56:	f7ff fe50 	bl	1f9fa <_copy>
			s->leftover_offset += data_length;
   1fd5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1fd5c:	442b      	add	r3, r5
   1fd5e:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1fd60:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1fd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1fd66:	463b      	mov	r3, r7
   1fd68:	4632      	mov	r2, r6
   1fd6a:	4639      	mov	r1, r7
   1fd6c:	f7ff fe45 	bl	1f9fa <_copy>
		data_length -= remaining_space;
   1fd70:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   1fd72:	2300      	movs	r3, #0
   1fd74:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1fd76:	4445      	add	r5, r8
		data += remaining_space;
   1fd78:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd7a:	1e63      	subs	r3, r4, #1
   1fd7c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1fd80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fd84:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd88:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1fd8a:	ea82 0200 	eor.w	r2, r2, r0
   1fd8e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fd90:	d1f6      	bne.n	1fd80 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fd92:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fd94:	4621      	mov	r1, r4
   1fd96:	4620      	mov	r0, r4
   1fd98:	f7ff ff06 	bl	1fba8 <tc_aes_encrypt>
   1fd9c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1fda0:	2d10      	cmp	r5, #16
   1fda2:	d80a      	bhi.n	1fdba <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1fda4:	2d00      	cmp	r5, #0
   1fda6:	d0db      	beq.n	1fd60 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1fda8:	462b      	mov	r3, r5
   1fdaa:	4632      	mov	r2, r6
   1fdac:	4629      	mov	r1, r5
   1fdae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fdb2:	f7ff fe22 	bl	1f9fa <_copy>
		s->leftover_offset = data_length;
   1fdb6:	6465      	str	r5, [r4, #68]	; 0x44
   1fdb8:	e7d2      	b.n	1fd60 <tc_cmac_update+0x50>
   1fdba:	1e63      	subs	r3, r4, #1
   1fdbc:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1fdbe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fdc2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fdc6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1fdc8:	ea82 0200 	eor.w	r2, r2, r0
   1fdcc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fdce:	d1f6      	bne.n	1fdbe <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fdd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fdd2:	4621      	mov	r1, r4
   1fdd4:	4620      	mov	r0, r4
   1fdd6:	f7ff fee7 	bl	1fba8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1fdda:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1fddc:	3d10      	subs	r5, #16
   1fdde:	e7df      	b.n	1fda0 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1fde0:	2000      	movs	r0, #0
   1fde2:	e7be      	b.n	1fd62 <tc_cmac_update+0x52>

0001fde4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1fde4:	b570      	push	{r4, r5, r6, lr}
   1fde6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1fde8:	4605      	mov	r5, r0
   1fdea:	b1e8      	cbz	r0, 1fe28 <tc_cmac_final+0x44>
   1fdec:	b369      	cbz	r1, 1fe4a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1fdee:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1fdf0:	2a10      	cmp	r2, #16
   1fdf2:	d11a      	bne.n	1fe2a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1fdf4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fdf6:	1e63      	subs	r3, r4, #1
   1fdf8:	3901      	subs	r1, #1
   1fdfa:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1fdfe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fe02:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1fe06:	4072      	eors	r2, r6
   1fe08:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fe0c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1fe0e:	ea82 0206 	eor.w	r2, r2, r6
   1fe12:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fe14:	d1f3      	bne.n	1fdfe <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1fe16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fe18:	4621      	mov	r1, r4
   1fe1a:	4628      	mov	r0, r5
   1fe1c:	f7ff fec4 	bl	1fba8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1fe20:	4620      	mov	r0, r4
   1fe22:	f7ff ff2c 	bl	1fc7e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1fe26:	2001      	movs	r0, #1
}
   1fe28:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1fe2a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1fe2e:	2100      	movs	r1, #0
   1fe30:	f1c2 0210 	rsb	r2, r2, #16
   1fe34:	4420      	add	r0, r4
   1fe36:	f7ff fded 	bl	1fa14 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1fe3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1fe3c:	4423      	add	r3, r4
   1fe3e:	2280      	movs	r2, #128	; 0x80
   1fe40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1fe44:	f104 0120 	add.w	r1, r4, #32
   1fe48:	e7d5      	b.n	1fdf6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1fe4a:	4608      	mov	r0, r1
   1fe4c:	e7ec      	b.n	1fe28 <tc_cmac_final+0x44>

0001fe4e <abort_function>:
{
   1fe4e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1fe50:	2000      	movs	r0, #0
   1fe52:	f7f2 f803 	bl	11e5c <sys_reboot>

0001fe56 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1fe56:	f003 bfc2 	b.w	23dde <z_fatal_error>

0001fe5a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1fe5a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1fe5c:	6800      	ldr	r0, [r0, #0]
   1fe5e:	f003 bfbe 	b.w	23dde <z_fatal_error>

0001fe62 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1fe62:	2100      	movs	r1, #0
   1fe64:	2001      	movs	r0, #1
   1fe66:	f7ff bff6 	b.w	1fe56 <z_arm_fatal_error>

0001fe6a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1fe6a:	b508      	push	{r3, lr}
	handler();
   1fe6c:	f7f2 fb0a 	bl	12484 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1fe70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1fe74:	f7f2 bbe2 	b.w	1263c <z_arm_exc_exit>

0001fe78 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1fe78:	3901      	subs	r1, #1
   1fe7a:	4603      	mov	r3, r0
   1fe7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1fe80:	b90a      	cbnz	r2, 1fe86 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1fe82:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1fe84:	4770      	bx	lr
		*d = *s;
   1fe86:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1fe8a:	e7f7      	b.n	1fe7c <strcpy+0x4>

0001fe8c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1fe8c:	4603      	mov	r3, r0
	size_t n = 0;
   1fe8e:	2000      	movs	r0, #0

	while (*s != '\0') {
   1fe90:	5c1a      	ldrb	r2, [r3, r0]
   1fe92:	b902      	cbnz	r2, 1fe96 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1fe94:	4770      	bx	lr
		n++;
   1fe96:	3001      	adds	r0, #1
   1fe98:	e7fa      	b.n	1fe90 <strlen+0x4>

0001fe9a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1fe9a:	4603      	mov	r3, r0
	size_t n = 0;
   1fe9c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1fe9e:	5c1a      	ldrb	r2, [r3, r0]
   1fea0:	b10a      	cbz	r2, 1fea6 <strnlen+0xc>
   1fea2:	4288      	cmp	r0, r1
   1fea4:	d100      	bne.n	1fea8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1fea6:	4770      	bx	lr
		n++;
   1fea8:	3001      	adds	r0, #1
   1feaa:	e7f8      	b.n	1fe9e <strnlen+0x4>

0001feac <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1feac:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1feae:	b15a      	cbz	r2, 1fec8 <memcmp+0x1c>
   1feb0:	3901      	subs	r1, #1
   1feb2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1feb4:	f810 2b01 	ldrb.w	r2, [r0], #1
   1feb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1febc:	42a0      	cmp	r0, r4
   1febe:	d001      	beq.n	1fec4 <memcmp+0x18>
   1fec0:	429a      	cmp	r2, r3
   1fec2:	d0f7      	beq.n	1feb4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1fec4:	1ad0      	subs	r0, r2, r3
}
   1fec6:	bd10      	pop	{r4, pc}
		return 0;
   1fec8:	4610      	mov	r0, r2
   1feca:	e7fc      	b.n	1fec6 <memcmp+0x1a>

0001fecc <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1fecc:	1a43      	subs	r3, r0, r1
   1fece:	4293      	cmp	r3, r2
{
   1fed0:	b510      	push	{r4, lr}
   1fed2:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1fed6:	d308      	bcc.n	1feea <memmove+0x1e>
   1fed8:	3901      	subs	r1, #1
	char *dest = d;
   1feda:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1fedc:	429a      	cmp	r2, r3
   1fede:	d00b      	beq.n	1fef8 <memmove+0x2c>
			*dest = *src;
   1fee0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1fee4:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1fee8:	e7f8      	b.n	1fedc <memmove+0x10>
   1feea:	440a      	add	r2, r1
			dest[n] = src[n];
   1feec:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1fef0:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1fef4:	428a      	cmp	r2, r1
   1fef6:	d1f9      	bne.n	1feec <memmove+0x20>
		}
	}

	return d;
}
   1fef8:	bd10      	pop	{r4, pc}

0001fefa <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1fefa:	b510      	push	{r4, lr}
   1fefc:	1e43      	subs	r3, r0, #1
   1fefe:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1ff00:	4291      	cmp	r1, r2
   1ff02:	d100      	bne.n	1ff06 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1ff04:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1ff06:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ff0a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1ff0e:	e7f7      	b.n	1ff00 <memcpy+0x6>

0001ff10 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1ff10:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1ff12:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1ff14:	4603      	mov	r3, r0
	while (n > 0) {
   1ff16:	4293      	cmp	r3, r2
   1ff18:	d100      	bne.n	1ff1c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1ff1a:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1ff1c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ff20:	e7f9      	b.n	1ff16 <memset+0x6>

0001ff22 <_stdout_hook_default>:
}
   1ff22:	f04f 30ff 	mov.w	r0, #4294967295
   1ff26:	4770      	bx	lr

0001ff28 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1ff28:	2806      	cmp	r0, #6
   1ff2a:	d108      	bne.n	1ff3e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1ff2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ff30:	2201      	movs	r2, #1
   1ff32:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1ff36:	f3bf 8f4f 	dsb	sy
        __WFE();
   1ff3a:	bf20      	wfe
    while (true)
   1ff3c:	e7fd      	b.n	1ff3a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1ff3e:	4770      	bx	lr

0001ff40 <pm_state_exit_post_ops>:
   1ff40:	2300      	movs	r3, #0
   1ff42:	f383 8811 	msr	BASEPRI, r3
   1ff46:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1ff4a:	4770      	bx	lr

0001ff4c <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1ff4c:	b530      	push	{r4, r5, lr}
   1ff4e:	b085      	sub	sp, #20
   1ff50:	4604      	mov	r4, r0
   1ff52:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1ff54:	4668      	mov	r0, sp
   1ff56:	2203      	movs	r2, #3
   1ff58:	f7ff ffcf 	bl	1fefa <memcpy>
	(void)memset(res + 3, 0, 13);
   1ff5c:	220d      	movs	r2, #13
   1ff5e:	2100      	movs	r1, #0
   1ff60:	f10d 0003 	add.w	r0, sp, #3
   1ff64:	f7ff ffd4 	bl	1ff10 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1ff68:	4620      	mov	r0, r4
   1ff6a:	466a      	mov	r2, sp
   1ff6c:	4669      	mov	r1, sp
   1ff6e:	f003 fe2e 	bl	23bce <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1ff72:	4604      	mov	r4, r0
   1ff74:	b920      	cbnz	r0, 1ff80 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1ff76:	2203      	movs	r2, #3
   1ff78:	4669      	mov	r1, sp
   1ff7a:	4628      	mov	r0, r5
   1ff7c:	f7ff ffbd 	bl	1fefa <memcpy>

	return 0;
}
   1ff80:	4620      	mov	r0, r4
   1ff82:	b005      	add	sp, #20
   1ff84:	bd30      	pop	{r4, r5, pc}

0001ff86 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1ff86:	b513      	push	{r0, r1, r4, lr}
   1ff88:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1ff8a:	aa01      	add	r2, sp, #4
   1ff8c:	3103      	adds	r1, #3
   1ff8e:	f7ff ffdd 	bl	1ff4c <ah>
	if (err) {
   1ff92:	b948      	cbnz	r0, 1ffa8 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1ff94:	2203      	movs	r2, #3
   1ff96:	a901      	add	r1, sp, #4
   1ff98:	4620      	mov	r0, r4
   1ff9a:	f7ff ff87 	bl	1feac <memcmp>
   1ff9e:	fab0 f080 	clz	r0, r0
   1ffa2:	0940      	lsrs	r0, r0, #5
}
   1ffa4:	b002      	add	sp, #8
   1ffa6:	bd10      	pop	{r4, pc}
		return false;
   1ffa8:	2000      	movs	r0, #0
   1ffaa:	e7fb      	b.n	1ffa4 <bt_rpa_irk_matches+0x1e>

0001ffac <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1ffac:	b510      	push	{r4, lr}
   1ffae:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1ffb0:	7801      	ldrb	r1, [r0, #0]
   1ffb2:	7822      	ldrb	r2, [r4, #0]
   1ffb4:	428a      	cmp	r2, r1
{
   1ffb6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1ffb8:	d00f      	beq.n	1ffda <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1ffba:	4669      	mov	r1, sp
   1ffbc:	f7f2 fe96 	bl	12cec <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1ffc0:	a905      	add	r1, sp, #20
   1ffc2:	4620      	mov	r0, r4
   1ffc4:	f7f2 fe92 	bl	12cec <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1ffc8:	2210      	movs	r2, #16
   1ffca:	f10d 0115 	add.w	r1, sp, #21
   1ffce:	f10d 0001 	add.w	r0, sp, #1
   1ffd2:	f7ff ff6b 	bl	1feac <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1ffd6:	b00a      	add	sp, #40	; 0x28
   1ffd8:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1ffda:	2a01      	cmp	r2, #1
   1ffdc:	d006      	beq.n	1ffec <bt_uuid_cmp+0x40>
   1ffde:	2a02      	cmp	r2, #2
   1ffe0:	d007      	beq.n	1fff2 <bt_uuid_cmp+0x46>
   1ffe2:	b972      	cbnz	r2, 20002 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1ffe4:	8840      	ldrh	r0, [r0, #2]
   1ffe6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1ffe8:	1ac0      	subs	r0, r0, r3
   1ffea:	e7f4      	b.n	1ffd6 <bt_uuid_cmp+0x2a>
   1ffec:	6840      	ldr	r0, [r0, #4]
   1ffee:	6863      	ldr	r3, [r4, #4]
   1fff0:	e7fa      	b.n	1ffe8 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1fff2:	2210      	movs	r2, #16
   1fff4:	1c61      	adds	r1, r4, #1
   1fff6:	3001      	adds	r0, #1
}
   1fff8:	b00a      	add	sp, #40	; 0x28
   1fffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1fffe:	f7ff bf55 	b.w	1feac <memcmp>
	switch (u1->type) {
   20002:	f06f 0015 	mvn.w	r0, #21
   20006:	e7e6      	b.n	1ffd6 <bt_uuid_cmp+0x2a>

00020008 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20008:	2a04      	cmp	r2, #4
{
   2000a:	b510      	push	{r4, lr}
	switch (data_len) {
   2000c:	d00a      	beq.n	20024 <bt_uuid_create+0x1c>
   2000e:	2a10      	cmp	r2, #16
   20010:	d00d      	beq.n	2002e <bt_uuid_create+0x26>
   20012:	2a02      	cmp	r2, #2
   20014:	f04f 0300 	mov.w	r3, #0
   20018:	d10f      	bne.n	2003a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2001a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2001c:	880b      	ldrh	r3, [r1, #0]
   2001e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20020:	2001      	movs	r0, #1
}
   20022:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   20024:	2301      	movs	r3, #1
   20026:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20028:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2002a:	6043      	str	r3, [r0, #4]
		break;
   2002c:	e7f8      	b.n	20020 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2002e:	2302      	movs	r3, #2
   20030:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   20034:	f7ff ff61 	bl	1fefa <memcpy>
		break;
   20038:	e7f2      	b.n	20020 <bt_uuid_create+0x18>
	switch (data_len) {
   2003a:	4618      	mov	r0, r3
   2003c:	e7f1      	b.n	20022 <bt_uuid_create+0x1a>

0002003e <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2003e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   20040:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   20042:	2106      	movs	r1, #6
{
   20044:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   20046:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2004a:	f7fa f8cb 	bl	1a1e4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2004e:	b918      	cbnz	r0, 20058 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   20050:	79a3      	ldrb	r3, [r4, #6]
   20052:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20056:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   20058:	bd10      	pop	{r4, pc}

0002005a <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   2005a:	b510      	push	{r4, lr}
   2005c:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   2005e:	2207      	movs	r2, #7
   20060:	f7ff ff4b 	bl	1fefa <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   20064:	7823      	ldrb	r3, [r4, #0]
   20066:	f023 0302 	bic.w	r3, r3, #2
   2006a:	7023      	strb	r3, [r4, #0]
}
   2006c:	bd10      	pop	{r4, pc}

0002006e <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   2006e:	7800      	ldrb	r0, [r0, #0]
}
   20070:	f3c0 0040 	ubfx	r0, r0, #1, #1
   20074:	4770      	bx	lr

00020076 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   20076:	280f      	cmp	r0, #15
   20078:	d807      	bhi.n	2008a <bt_hci_evt_get_flags+0x14>
   2007a:	280d      	cmp	r0, #13
   2007c:	d80b      	bhi.n	20096 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2007e:	2805      	cmp	r0, #5
   20080:	bf08      	it	eq
   20082:	2003      	moveq	r0, #3
   20084:	bf18      	it	ne
   20086:	2002      	movne	r0, #2
   20088:	4770      	bx	lr
	switch (evt) {
   2008a:	2813      	cmp	r0, #19
   2008c:	d003      	beq.n	20096 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2008e:	281a      	cmp	r0, #26
   20090:	bf08      	it	eq
   20092:	2001      	moveq	r0, #1
   20094:	e7f6      	b.n	20084 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   20096:	2001      	movs	r0, #1
	}
}
   20098:	4770      	bx	lr

0002009a <hci_data_buf_overflow>:
}
   2009a:	4770      	bx	lr

0002009c <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2009c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   200a0:	b183      	cbz	r3, 200c4 <update_sec_level+0x28>
   200a2:	7b5a      	ldrb	r2, [r3, #13]
   200a4:	07d1      	lsls	r1, r2, #31
   200a6:	d50d      	bpl.n	200c4 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   200a8:	06d2      	lsls	r2, r2, #27
   200aa:	d50d      	bpl.n	200c8 <update_sec_level+0x2c>
   200ac:	7b1b      	ldrb	r3, [r3, #12]
   200ae:	2b10      	cmp	r3, #16
   200b0:	bf14      	ite	ne
   200b2:	2303      	movne	r3, #3
   200b4:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   200b6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   200b8:	7a80      	ldrb	r0, [r0, #10]
}
   200ba:	4298      	cmp	r0, r3
   200bc:	bf8c      	ite	hi
   200be:	2000      	movhi	r0, #0
   200c0:	2001      	movls	r0, #1
   200c2:	4770      	bx	lr
   200c4:	2302      	movs	r3, #2
   200c6:	e7f6      	b.n	200b6 <update_sec_level+0x1a>
   200c8:	2303      	movs	r3, #3
   200ca:	e7f4      	b.n	200b6 <update_sec_level+0x1a>

000200cc <bt_addr_le_copy>:
   200cc:	2207      	movs	r2, #7
   200ce:	f7ff bf14 	b.w	1fefa <memcpy>

000200d2 <hci_disconn_complete>:
{
   200d2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   200d4:	68c6      	ldr	r6, [r0, #12]
	if (evt->status) {
   200d6:	7835      	ldrb	r5, [r6, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   200d8:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	if (evt->status) {
   200dc:	b9fd      	cbnz	r5, 2011e <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   200de:	f7f4 fc83 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   200e2:	4604      	mov	r4, r0
   200e4:	b1d8      	cbz	r0, 2011e <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   200e6:	78f3      	ldrb	r3, [r6, #3]
   200e8:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   200ea:	4629      	mov	r1, r5
   200ec:	f7f4 fc84 	bl	149f8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   200f0:	78a3      	ldrb	r3, [r4, #2]
   200f2:	2b01      	cmp	r3, #1
   200f4:	d004      	beq.n	20100 <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   200f6:	4620      	mov	r0, r4
}
   200f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   200fc:	f000 bcad 	b.w	20a5a <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20100:	f3bf 8f5b 	dmb	ish
   20104:	6863      	ldr	r3, [r4, #4]
   20106:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   2010a:	07db      	lsls	r3, r3, #31
   2010c:	d5f3      	bpl.n	200f6 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   2010e:	4620      	mov	r0, r4
   20110:	2102      	movs	r1, #2
   20112:	f7f4 fc71 	bl	149f8 <bt_conn_set_state>
		bt_le_scan_update(false);
   20116:	4628      	mov	r0, r5
   20118:	f7f3 ffae 	bl	14078 <bt_le_scan_update>
   2011c:	e7eb      	b.n	200f6 <hci_disconn_complete+0x24>
}
   2011e:	bd70      	pop	{r4, r5, r6, pc}

00020120 <le_phy_update_complete>:
{
   20120:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   20122:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   20124:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   20128:	f7f4 fc5e 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   2012c:	b118      	cbz	r0, 20136 <le_phy_update_complete+0x16>
}
   2012e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   20132:	f000 bc92 	b.w	20a5a <bt_conn_unref>
}
   20136:	bd08      	pop	{r3, pc}

00020138 <le_data_len_change>:
{
   20138:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2013a:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   2013c:	8818      	ldrh	r0, [r3, #0]
   2013e:	f7f4 fc53 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   20142:	b118      	cbz	r0, 2014c <le_data_len_change+0x14>
}
   20144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   20148:	f000 bc87 	b.w	20a5a <bt_conn_unref>
}
   2014c:	bd08      	pop	{r3, pc}

0002014e <atomic_or>:
{
   2014e:	b510      	push	{r4, lr}
   20150:	4603      	mov	r3, r0
}
   20152:	f3bf 8f5b 	dmb	ish
   20156:	e853 0f00 	ldrex	r0, [r3]
   2015a:	ea40 0201 	orr.w	r2, r0, r1
   2015e:	e843 2400 	strex	r4, r2, [r3]
   20162:	2c00      	cmp	r4, #0
   20164:	d1f7      	bne.n	20156 <atomic_or+0x8>
   20166:	f3bf 8f5b 	dmb	ish
   2016a:	bd10      	pop	{r4, pc}

0002016c <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   2016c:	2101      	movs	r1, #1
   2016e:	300c      	adds	r0, #12
   20170:	f003 bb02 	b.w	23778 <net_buf_simple_pull_mem>

00020174 <le_conn_update_complete>:
{
   20174:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   20176:	68c5      	ldr	r5, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   20178:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   2017c:	f7f4 fc34 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   20180:	4604      	mov	r4, r0
   20182:	b370      	cbz	r0, 201e2 <le_conn_update_complete+0x6e>
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   20184:	782b      	ldrb	r3, [r5, #0]
   20186:	2b1a      	cmp	r3, #26
   20188:	d119      	bne.n	201be <le_conn_update_complete+0x4a>
   2018a:	78c3      	ldrb	r3, [r0, #3]
   2018c:	2b01      	cmp	r3, #1
   2018e:	d124      	bne.n	201da <le_conn_update_complete+0x66>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   20190:	f44f 6180 	mov.w	r1, #1024	; 0x400
   20194:	3004      	adds	r0, #4
   20196:	f7ff ffda 	bl	2014e <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   2019a:	0543      	lsls	r3, r0, #21
   2019c:	d40f      	bmi.n	201be <le_conn_update_complete+0x4a>
		param.interval_min = conn->le.interval_min;
   2019e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   201a2:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   201a4:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   201a6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   201aa:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   201ac:	4620      	mov	r0, r4
   201ae:	f7f5 f8ff 	bl	153b0 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   201b2:	4620      	mov	r0, r4
}
   201b4:	b003      	add	sp, #12
   201b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   201ba:	f000 bc4e 	b.w	20a5a <bt_conn_unref>
		if (!evt->status) {
   201be:	782b      	ldrb	r3, [r5, #0]
   201c0:	b95b      	cbnz	r3, 201da <le_conn_update_complete+0x66>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   201c2:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   201c6:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   201ca:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   201ce:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   201d2:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   201d6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		notify_le_param_updated(conn);
   201da:	4620      	mov	r0, r4
   201dc:	f7f4 fd04 	bl	14be8 <notify_le_param_updated>
   201e0:	e7e7      	b.n	201b2 <le_conn_update_complete+0x3e>
}
   201e2:	b003      	add	sp, #12
   201e4:	bd30      	pop	{r4, r5, pc}

000201e6 <le_remote_feat_complete>:
{
   201e6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   201e8:	68c5      	ldr	r5, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   201ea:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   201ee:	f7f4 fbfb 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   201f2:	4604      	mov	r4, r0
   201f4:	b180      	cbz	r0, 20218 <le_remote_feat_complete+0x32>
	if (!evt->status) {
   201f6:	782b      	ldrb	r3, [r5, #0]
   201f8:	b923      	cbnz	r3, 20204 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   201fa:	2208      	movs	r2, #8
   201fc:	1ce9      	adds	r1, r5, #3
   201fe:	30ac      	adds	r0, #172	; 0xac
   20200:	f7ff fe7b 	bl	1fefa <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   20204:	1d20      	adds	r0, r4, #4
   20206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   2020a:	f7ff ffa0 	bl	2014e <atomic_or>
	bt_conn_unref(conn);
   2020e:	4620      	mov	r0, r4
}
   20210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   20214:	f000 bc21 	b.w	20a5a <bt_conn_unref>
}
   20218:	bd38      	pop	{r3, r4, r5, pc}

0002021a <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   2021a:	b430      	push	{r4, r5}
   2021c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20220:	4604      	mov	r4, r0
   20222:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   20224:	429a      	cmp	r2, r3
   20226:	d101      	bne.n	2022c <handle_event_common.isra.0+0x12>
}
   20228:	bc30      	pop	{r4, r5}
   2022a:	4770      	bx	lr
		if (handler->event != event) {
   2022c:	4611      	mov	r1, r2
   2022e:	f811 5b08 	ldrb.w	r5, [r1], #8
   20232:	42a5      	cmp	r5, r4
   20234:	d106      	bne.n	20244 <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   20236:	8a01      	ldrh	r1, [r0, #16]
   20238:	7853      	ldrb	r3, [r2, #1]
   2023a:	4299      	cmp	r1, r3
   2023c:	d3f4      	bcc.n	20228 <handle_event_common.isra.0+0xe>
}
   2023e:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   20240:	6853      	ldr	r3, [r2, #4]
   20242:	4718      	bx	r3
   20244:	460a      	mov	r2, r1
   20246:	e7ed      	b.n	20224 <handle_event_common.isra.0+0xa>

00020248 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20248:	f3bf 8f5b 	dmb	ish
   2024c:	e850 3f00 	ldrex	r3, [r0]
   20250:	400b      	ands	r3, r1
   20252:	e840 3200 	strex	r2, r3, [r0]
   20256:	2a00      	cmp	r2, #0
   20258:	d1f8      	bne.n	2024c <atomic_and.isra.0+0x4>
   2025a:	f3bf 8f5b 	dmb	ish
}
   2025e:	4770      	bx	lr

00020260 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   20260:	4770      	bx	lr

00020262 <sys_put_le64>:
	dst[1] = val >> 8;
   20262:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   20266:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   20268:	0e00      	lsrs	r0, r0, #24
   2026a:	7053      	strb	r3, [r2, #1]
   2026c:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2026e:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   20270:	f3c1 2007 	ubfx	r0, r1, #8, #8
   20274:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   20276:	7093      	strb	r3, [r2, #2]
   20278:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2027a:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2027c:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2027e:	71d1      	strb	r1, [r2, #7]
}
   20280:	4770      	bx	lr

00020282 <hci_num_completed_packets>:
{
   20282:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   20286:	68c7      	ldr	r7, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   20288:	783a      	ldrb	r2, [r7, #0]
   2028a:	2301      	movs	r3, #1
   2028c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   20290:	8a02      	ldrh	r2, [r0, #16]
   20292:	4293      	cmp	r3, r2
   20294:	d95e      	bls.n	20354 <hci_num_completed_packets+0xd2>
}
   20296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   2029a:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2029c:	2b00      	cmp	r3, #0
   2029e:	d132      	bne.n	20306 <hci_num_completed_packets+0x84>
   202a0:	f382 8811 	msr	BASEPRI, r2
   202a4:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   202a8:	4620      	mov	r0, r4
   202aa:	f000 fbd6 	bl	20a5a <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   202ae:	3501      	adds	r5, #1
   202b0:	783b      	ldrb	r3, [r7, #0]
   202b2:	429d      	cmp	r5, r3
   202b4:	daef      	bge.n	20296 <hci_num_completed_packets+0x14>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   202b6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   202ba:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   202be:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   202c2:	f7f4 fb91 	bl	149e8 <bt_conn_lookup_handle>
		if (!conn) {
   202c6:	4604      	mov	r4, r0
   202c8:	2800      	cmp	r0, #0
   202ca:	d0f0      	beq.n	202ae <hci_num_completed_packets+0x2c>
			k_work_submit(&conn->tx_complete_work);
   202cc:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   202d0:	2e00      	cmp	r6, #0
   202d2:	d0e9      	beq.n	202a8 <hci_num_completed_packets+0x26>
	__asm__ volatile(
   202d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   202d8:	f3ef 8211 	mrs	r2, BASEPRI
   202dc:	f383 8812 	msr	BASEPRI_MAX, r3
   202e0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   202e4:	69e3      	ldr	r3, [r4, #28]
   202e6:	2b00      	cmp	r3, #0
   202e8:	d0d7      	beq.n	2029a <hci_num_completed_packets+0x18>
				conn->pending_no_cb--;
   202ea:	3b01      	subs	r3, #1
   202ec:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   202ee:	f382 8811 	msr	BASEPRI, r2
   202f2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   202f6:	4620      	mov	r0, r4
   202f8:	f7f4 faac 	bl	14854 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   202fc:	3e01      	subs	r6, #1
   202fe:	f7fb f8fb 	bl	1b4f8 <z_impl_k_sem_give>
   20302:	b2b6      	uxth	r6, r6
   20304:	e7e4      	b.n	202d0 <hci_num_completed_packets+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20306:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   20308:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   2030a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2030c:	428b      	cmp	r3, r1
	list->tail = node;
   2030e:	bf08      	it	eq
   20310:	61a0      	streq	r0, [r4, #24]
   20312:	f382 8811 	msr	BASEPRI, r2
   20316:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2031a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2031e:	f3ef 8111 	mrs	r1, BASEPRI
   20322:	f382 8812 	msr	BASEPRI_MAX, r2
   20326:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   2032a:	68da      	ldr	r2, [r3, #12]
   2032c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   2032e:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   20332:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   20336:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   20338:	b94a      	cbnz	r2, 2034e <hci_num_completed_packets+0xcc>
	list->head = node;
   2033a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   2033e:	f381 8811 	msr	BASEPRI, r1
   20342:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   20346:	4648      	mov	r0, r9
   20348:	f7fb fa52 	bl	1b7f0 <k_work_submit>
   2034c:	e7d3      	b.n	202f6 <hci_num_completed_packets+0x74>
	parent->next = child;
   2034e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20350:	6263      	str	r3, [r4, #36]	; 0x24
}
   20352:	e7f4      	b.n	2033e <hci_num_completed_packets+0xbc>
	for (i = 0; i < evt->num_handles; i++) {
   20354:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   20356:	46a8      	mov	r8, r5
   20358:	e7aa      	b.n	202b0 <hci_num_completed_packets+0x2e>

0002035a <hci_le_read_max_data_len>:
{
   2035a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2035c:	4606      	mov	r6, r0
   2035e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   20360:	aa01      	add	r2, sp, #4
   20362:	2100      	movs	r1, #0
   20364:	f242 002f 	movw	r0, #8239	; 0x202f
   20368:	f7f2 fee4 	bl	13134 <bt_hci_cmd_send_sync>
	if (err) {
   2036c:	4604      	mov	r4, r0
   2036e:	b948      	cbnz	r0, 20384 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   20370:	9801      	ldr	r0, [sp, #4]
   20372:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   20374:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   20378:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   2037a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   2037e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   20380:	f7f8 f970 	bl	18664 <net_buf_unref>
}
   20384:	4620      	mov	r0, r4
   20386:	b002      	add	sp, #8
   20388:	bd70      	pop	{r4, r5, r6, pc}

0002038a <bt_hci_disconnect>:
{
   2038a:	b570      	push	{r4, r5, r6, lr}
   2038c:	4606      	mov	r6, r0
   2038e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20390:	f240 4006 	movw	r0, #1030	; 0x406
   20394:	2103      	movs	r1, #3
   20396:	f7f2 fe93 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   2039a:	4604      	mov	r4, r0
   2039c:	b168      	cbz	r0, 203ba <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2039e:	2103      	movs	r1, #3
   203a0:	300c      	adds	r0, #12
   203a2:	f003 f9b8 	bl	23716 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   203a6:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   203a8:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   203aa:	4621      	mov	r1, r4
   203ac:	2200      	movs	r2, #0
}
   203ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   203b2:	f240 4006 	movw	r0, #1030	; 0x406
   203b6:	f7f2 bebd 	b.w	13134 <bt_hci_cmd_send_sync>
}
   203ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   203be:	bd70      	pop	{r4, r5, r6, pc}

000203c0 <bt_le_set_data_len>:
{
   203c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203c2:	4607      	mov	r7, r0
   203c4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   203c6:	f242 0022 	movw	r0, #8226	; 0x2022
   203ca:	2106      	movs	r1, #6
{
   203cc:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   203ce:	f7f2 fe77 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   203d2:	4604      	mov	r4, r0
   203d4:	b178      	cbz	r0, 203f6 <bt_le_set_data_len+0x36>
   203d6:	2106      	movs	r1, #6
   203d8:	300c      	adds	r0, #12
   203da:	f003 f99c 	bl	23716 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   203de:	883b      	ldrh	r3, [r7, #0]
   203e0:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   203e2:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   203e4:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   203e6:	4621      	mov	r1, r4
   203e8:	2200      	movs	r2, #0
}
   203ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   203ee:	f242 0022 	movw	r0, #8226	; 0x2022
   203f2:	f7f2 be9f 	b.w	13134 <bt_hci_cmd_send_sync>
}
   203f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   203fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000203fc <bt_le_set_phy>:
{
   203fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20400:	4681      	mov	r9, r0
   20402:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20404:	f242 0032 	movw	r0, #8242	; 0x2032
   20408:	2107      	movs	r1, #7
{
   2040a:	f89d a020 	ldrb.w	sl, [sp, #32]
   2040e:	4617      	mov	r7, r2
   20410:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20412:	f7f2 fe55 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   20416:	4605      	mov	r5, r0
   20418:	b1a0      	cbz	r0, 20444 <bt_le_set_phy+0x48>
   2041a:	2107      	movs	r1, #7
   2041c:	300c      	adds	r0, #12
   2041e:	f003 f97a 	bl	23716 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20422:	f8b9 3000 	ldrh.w	r3, [r9]
   20426:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   20428:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2042c:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2042e:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   20430:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   20434:	4629      	mov	r1, r5
   20436:	2200      	movs	r2, #0
}
   20438:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2043c:	f242 0032 	movw	r0, #8242	; 0x2032
   20440:	f7f2 be78 	b.w	13134 <bt_hci_cmd_send_sync>
}
   20444:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002044c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2044c:	68c0      	ldr	r0, [r0, #12]
   2044e:	f7f2 bf81 	b.w	13354 <bt_hci_le_enh_conn_complete>

00020452 <bt_le_conn_params_valid>:
{
   20452:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   20454:	8803      	ldrh	r3, [r0, #0]
   20456:	8842      	ldrh	r2, [r0, #2]
   20458:	4293      	cmp	r3, r2
   2045a:	d819      	bhi.n	20490 <bt_le_conn_params_valid+0x3e>
   2045c:	2b05      	cmp	r3, #5
   2045e:	d917      	bls.n	20490 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20460:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   20464:	d814      	bhi.n	20490 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   20466:	8883      	ldrh	r3, [r0, #4]
   20468:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2046c:	d210      	bcs.n	20490 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2046e:	88c0      	ldrh	r0, [r0, #6]
   20470:	f1a0 010a 	sub.w	r1, r0, #10
   20474:	b289      	uxth	r1, r1
   20476:	f640 4476 	movw	r4, #3190	; 0xc76
   2047a:	42a1      	cmp	r1, r4
   2047c:	d808      	bhi.n	20490 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2047e:	3301      	adds	r3, #1
   20480:	b29b      	uxth	r3, r3
   20482:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   20484:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   20488:	bf34      	ite	cc
   2048a:	2001      	movcc	r0, #1
   2048c:	2000      	movcs	r0, #0
}
   2048e:	bd10      	pop	{r4, pc}
		return false;
   20490:	2000      	movs	r0, #0
   20492:	e7fc      	b.n	2048e <bt_le_conn_params_valid+0x3c>

00020494 <hci_encrypt_key_refresh_complete>:
{
   20494:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   20496:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   20498:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   2049c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   2049e:	f7f4 faa3 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   204a2:	4604      	mov	r4, r0
   204a4:	b320      	cbz	r0, 204f0 <hci_encrypt_key_refresh_complete+0x5c>
	if (status) {
   204a6:	b165      	cbz	r5, 204c2 <hci_encrypt_key_refresh_complete+0x2e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   204a8:	4628      	mov	r0, r5
   204aa:	f7f3 f87f 	bl	135ac <bt_security_err_get>
   204ae:	4629      	mov	r1, r5
   204b0:	4602      	mov	r2, r0
   204b2:	4620      	mov	r0, r4
   204b4:	f7f4 fc42 	bl	14d3c <bt_conn_security_changed>
	bt_conn_unref(conn);
   204b8:	4620      	mov	r0, r4
}
   204ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   204be:	f000 bacc 	b.w	20a5a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   204c2:	7883      	ldrb	r3, [r0, #2]
   204c4:	2b01      	cmp	r3, #1
   204c6:	d1ef      	bne.n	204a8 <hci_encrypt_key_refresh_complete+0x14>
		bt_smp_update_keys(conn);
   204c8:	f002 ff72 	bl	233b0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   204cc:	4620      	mov	r0, r4
   204ce:	f7ff fde5 	bl	2009c <update_sec_level>
   204d2:	2800      	cmp	r0, #0
   204d4:	d1e8      	bne.n	204a8 <hci_encrypt_key_refresh_complete+0x14>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   204d6:	2005      	movs	r0, #5
   204d8:	f7f3 f868 	bl	135ac <bt_security_err_get>
   204dc:	2105      	movs	r1, #5
   204de:	4602      	mov	r2, r0
   204e0:	4620      	mov	r0, r4
   204e2:	f7f4 fc2b 	bl	14d3c <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   204e6:	2105      	movs	r1, #5
   204e8:	4620      	mov	r0, r4
   204ea:	f000 fb96 	bl	20c1a <bt_conn_disconnect>
   204ee:	e7e3      	b.n	204b8 <hci_encrypt_key_refresh_complete+0x24>
}
   204f0:	bd38      	pop	{r3, r4, r5, pc}

000204f2 <hci_encrypt_change>:
{
   204f2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   204f4:	68c6      	ldr	r6, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   204f6:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   204fa:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   204fc:	f7f4 fa74 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   20500:	4604      	mov	r4, r0
   20502:	b368      	cbz	r0, 20560 <hci_encrypt_change+0x6e>
	if (status) {
   20504:	b165      	cbz	r5, 20520 <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   20506:	4628      	mov	r0, r5
   20508:	f7f3 f850 	bl	135ac <bt_security_err_get>
   2050c:	4629      	mov	r1, r5
   2050e:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   20510:	4620      	mov	r0, r4
   20512:	f7f4 fc13 	bl	14d3c <bt_conn_security_changed>
	bt_conn_unref(conn);
   20516:	4620      	mov	r0, r4
}
   20518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2051c:	f000 ba9d 	b.w	20a5a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   20520:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   20522:	78f3      	ldrb	r3, [r6, #3]
   20524:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   20526:	2a01      	cmp	r2, #1
   20528:	d005      	beq.n	20536 <hci_encrypt_change+0x44>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   2052a:	2000      	movs	r0, #0
   2052c:	f7f3 f83e 	bl	135ac <bt_security_err_get>
   20530:	2100      	movs	r1, #0
   20532:	4602      	mov	r2, r0
   20534:	e7ec      	b.n	20510 <hci_encrypt_change+0x1e>
		if (conn->encrypt) {
   20536:	b10b      	cbz	r3, 2053c <hci_encrypt_change+0x4a>
			bt_smp_update_keys(conn);
   20538:	f002 ff3a 	bl	233b0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   2053c:	4620      	mov	r0, r4
   2053e:	f7ff fdad 	bl	2009c <update_sec_level>
   20542:	2800      	cmp	r0, #0
   20544:	d1f1      	bne.n	2052a <hci_encrypt_change+0x38>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   20546:	2005      	movs	r0, #5
   20548:	f7f3 f830 	bl	135ac <bt_security_err_get>
   2054c:	2105      	movs	r1, #5
   2054e:	4602      	mov	r2, r0
   20550:	4620      	mov	r0, r4
   20552:	f7f4 fbf3 	bl	14d3c <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   20556:	2105      	movs	r1, #5
   20558:	4620      	mov	r0, r4
   2055a:	f000 fb5e 	bl	20c1a <bt_conn_disconnect>
   2055e:	e7da      	b.n	20516 <hci_encrypt_change+0x24>
}
   20560:	bd70      	pop	{r4, r5, r6, pc}

00020562 <le_ltk_request>:
{
   20562:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   20564:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   20566:	8826      	ldrh	r6, [r4, #0]
{
   20568:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   2056a:	b2b0      	uxth	r0, r6
   2056c:	f7f4 fa3c 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   20570:	4605      	mov	r5, r0
   20572:	b318      	cbz	r0, 205bc <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   20574:	af02      	add	r7, sp, #8
   20576:	f8d4 2002 	ldr.w	r2, [r4, #2]
   2057a:	f8d4 3006 	ldr.w	r3, [r4, #6]
   2057e:	9701      	str	r7, [sp, #4]
   20580:	8961      	ldrh	r1, [r4, #10]
   20582:	9100      	str	r1, [sp, #0]
   20584:	f002 fc40 	bl	22e08 <bt_smp_request_ltk>
   20588:	b1d0      	cbz	r0, 205c0 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   2058a:	2112      	movs	r1, #18
   2058c:	f242 001a 	movw	r0, #8218	; 0x201a
   20590:	f7f2 fd96 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   20594:	4604      	mov	r4, r0
   20596:	b170      	cbz	r0, 205b6 <le_ltk_request+0x54>
   20598:	2112      	movs	r1, #18
   2059a:	300c      	adds	r0, #12
   2059c:	f003 f8bb 	bl	23716 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   205a0:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   205a2:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   205a6:	2210      	movs	r2, #16
   205a8:	f7ff fca7 	bl	1fefa <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   205ac:	4621      	mov	r1, r4
   205ae:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   205b2:	f7f3 f80b 	bl	135cc <bt_hci_cmd_send>
	bt_conn_unref(conn);
   205b6:	4628      	mov	r0, r5
   205b8:	f000 fa4f 	bl	20a5a <bt_conn_unref>
}
   205bc:	b007      	add	sp, #28
   205be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   205c0:	2102      	movs	r1, #2
   205c2:	f242 001b 	movw	r0, #8219	; 0x201b
   205c6:	f7f2 fd7b 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   205ca:	4604      	mov	r4, r0
   205cc:	2800      	cmp	r0, #0
   205ce:	d0f2      	beq.n	205b6 <le_ltk_request+0x54>
   205d0:	2102      	movs	r1, #2
   205d2:	300c      	adds	r0, #12
   205d4:	f003 f89f 	bl	23716 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   205d8:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   205da:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   205dc:	f242 001b 	movw	r0, #8219	; 0x201b
   205e0:	e7e7      	b.n	205b2 <le_ltk_request+0x50>

000205e2 <le_conn_param_neg_reply>:
{
   205e2:	b570      	push	{r4, r5, r6, lr}
   205e4:	4606      	mov	r6, r0
   205e6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   205e8:	f242 0021 	movw	r0, #8225	; 0x2021
   205ec:	2103      	movs	r1, #3
   205ee:	f7f2 fd67 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   205f2:	4604      	mov	r4, r0
   205f4:	b160      	cbz	r0, 20610 <le_conn_param_neg_reply+0x2e>
   205f6:	2103      	movs	r1, #3
   205f8:	300c      	adds	r0, #12
   205fa:	f003 f88c 	bl	23716 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   205fe:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   20600:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20602:	4621      	mov	r1, r4
   20604:	f242 0021 	movw	r0, #8225	; 0x2021
}
   20608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2060c:	f7f2 bfde 	b.w	135cc <bt_hci_cmd_send>
}
   20610:	bd70      	pop	{r4, r5, r6, pc}

00020612 <le_conn_param_req>:
{
   20612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   20614:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20616:	78d9      	ldrb	r1, [r3, #3]
   20618:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   2061a:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   2061c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20620:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   20624:	7959      	ldrb	r1, [r3, #5]
   20626:	791a      	ldrb	r2, [r3, #4]
   20628:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2062c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   20630:	799a      	ldrb	r2, [r3, #6]
   20632:	79d9      	ldrb	r1, [r3, #7]
   20634:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20638:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2063c:	7a1a      	ldrb	r2, [r3, #8]
   2063e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   20640:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20642:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   20646:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20648:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   2064c:	f7f4 f9cc 	bl	149e8 <bt_conn_lookup_handle>
	if (!conn) {
   20650:	4606      	mov	r6, r0
   20652:	b928      	cbnz	r0, 20660 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   20654:	2102      	movs	r1, #2
   20656:	4620      	mov	r0, r4
   20658:	f7ff ffc3 	bl	205e2 <le_conn_param_neg_reply>
}
   2065c:	b003      	add	sp, #12
   2065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   20660:	4669      	mov	r1, sp
   20662:	f7f4 fb03 	bl	14c6c <le_param_req>
   20666:	b938      	cbnz	r0, 20678 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   20668:	211e      	movs	r1, #30
   2066a:	4620      	mov	r0, r4
   2066c:	f7ff ffb9 	bl	205e2 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   20670:	4630      	mov	r0, r6
   20672:	f000 f9f2 	bl	20a5a <bt_conn_unref>
   20676:	e7f1      	b.n	2065c <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   20678:	210e      	movs	r1, #14
   2067a:	f242 0020 	movw	r0, #8224	; 0x2020
   2067e:	f7f2 fd1f 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   20682:	4605      	mov	r5, r0
   20684:	2800      	cmp	r0, #0
   20686:	d0f3      	beq.n	20670 <le_conn_param_req+0x5e>
   20688:	210e      	movs	r1, #14
   2068a:	300c      	adds	r0, #12
   2068c:	f003 f843 	bl	23716 <net_buf_simple_add>
   20690:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   20692:	220e      	movs	r2, #14
   20694:	2100      	movs	r1, #0
   20696:	f7ff fc3b 	bl	1ff10 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   2069a:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2069c:	f8bd 3000 	ldrh.w	r3, [sp]
   206a0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   206a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   206a6:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   206a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   206ac:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   206ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   206b2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   206b4:	4629      	mov	r1, r5
   206b6:	f242 0020 	movw	r0, #8224	; 0x2020
   206ba:	f7f2 ff87 	bl	135cc <bt_hci_cmd_send>
   206be:	e7d7      	b.n	20670 <le_conn_param_req+0x5e>

000206c0 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   206c0:	2000      	movs	r0, #0
   206c2:	4770      	bx	lr

000206c4 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   206c4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   206c6:	f7f7 fe5f 	bl	18388 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   206ca:	b118      	cbz	r0, 206d4 <bt_addr_le_is_bonded+0x10>
   206cc:	89c0      	ldrh	r0, [r0, #14]
   206ce:	3800      	subs	r0, #0
   206d0:	bf18      	it	ne
   206d2:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   206d4:	bd08      	pop	{r3, pc}

000206d6 <bt_addr_le_eq>:
{
   206d6:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   206d8:	2207      	movs	r2, #7
   206da:	f7ff fbe7 	bl	1feac <memcmp>
}
   206de:	fab0 f080 	clz	r0, r0
   206e2:	0940      	lsrs	r0, r0, #5
   206e4:	bd08      	pop	{r3, pc}

000206e6 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   206e6:	2207      	movs	r2, #7
   206e8:	f7ff bc07 	b.w	1fefa <memcpy>

000206ec <hci_id_add>:
{
   206ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206f0:	4688      	mov	r8, r1
   206f2:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   206f4:	4605      	mov	r5, r0
   206f6:	bb08      	cbnz	r0, 2073c <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   206f8:	2127      	movs	r1, #39	; 0x27
   206fa:	f242 0027 	movw	r0, #8231	; 0x2027
   206fe:	f7f2 fcdf 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   20702:	4604      	mov	r4, r0
   20704:	b1f0      	cbz	r0, 20744 <hci_id_add+0x58>
   20706:	2127      	movs	r1, #39	; 0x27
   20708:	300c      	adds	r0, #12
   2070a:	f003 f804 	bl	23716 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2070e:	4641      	mov	r1, r8
   20710:	4606      	mov	r6, r0
   20712:	f7ff ffe8 	bl	206e6 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   20716:	4639      	mov	r1, r7
   20718:	2210      	movs	r2, #16
   2071a:	1df0      	adds	r0, r6, #7
   2071c:	f7ff fbed 	bl	1fefa <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   20720:	4629      	mov	r1, r5
   20722:	2210      	movs	r2, #16
   20724:	f106 0017 	add.w	r0, r6, #23
   20728:	f7ff fbf2 	bl	1ff10 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2072c:	462a      	mov	r2, r5
   2072e:	4621      	mov	r1, r4
   20730:	f242 0027 	movw	r0, #8231	; 0x2027
}
   20734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   20738:	f7f2 bcfc 	b.w	13134 <bt_hci_cmd_send_sync>
		return -EINVAL;
   2073c:	f06f 0015 	mvn.w	r0, #21
}
   20740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   20744:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20748:	e7fa      	b.n	20740 <hci_id_add+0x54>

0002074a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2074a:	7a03      	ldrb	r3, [r0, #8]
   2074c:	075b      	lsls	r3, r3, #29
{
   2074e:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   20750:	d505      	bpl.n	2075e <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   20752:	4601      	mov	r1, r0
   20754:	322a      	adds	r2, #42	; 0x2a
   20756:	f811 0b01 	ldrb.w	r0, [r1], #1
   2075a:	f7ff bfc7 	b.w	206ec <hci_id_add>
}
   2075e:	4770      	bx	lr

00020760 <addr_res_enable>:
{
   20760:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   20762:	2101      	movs	r1, #1
{
   20764:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   20766:	f242 002d 	movw	r0, #8237	; 0x202d
   2076a:	f7f2 fca9 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   2076e:	4604      	mov	r4, r0
   20770:	b158      	cbz	r0, 2078a <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   20772:	4629      	mov	r1, r5
   20774:	300c      	adds	r0, #12
   20776:	f002 ffdd 	bl	23734 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2077a:	4621      	mov	r1, r4
   2077c:	2200      	movs	r2, #0
}
   2077e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   20782:	f242 002d 	movw	r0, #8237	; 0x202d
   20786:	f7f2 bcd5 	b.w	13134 <bt_hci_cmd_send_sync>
}
   2078a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2078e:	bd38      	pop	{r3, r4, r5, pc}

00020790 <find_rl_conflict>:
{
   20790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   20794:	684f      	ldr	r7, [r1, #4]
{
   20796:	b086      	sub	sp, #24
   20798:	4605      	mov	r5, r0
   2079a:	460c      	mov	r4, r1
	if (conflict->found) {
   2079c:	b9c7      	cbnz	r7, 207d0 <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   2079e:	7a03      	ldrb	r3, [r0, #8]
   207a0:	075b      	lsls	r3, r3, #29
   207a2:	d515      	bpl.n	207d0 <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   207a4:	6808      	ldr	r0, [r1, #0]
   207a6:	1c69      	adds	r1, r5, #1
   207a8:	3001      	adds	r0, #1
   207aa:	f7ff ff94 	bl	206d6 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   207ae:	f8d4 8000 	ldr.w	r8, [r4]
   207b2:	2216      	movs	r2, #22
   207b4:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   207b6:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   207b8:	4668      	mov	r0, sp
   207ba:	f7ff fba9 	bl	1ff10 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   207be:	2210      	movs	r2, #16
   207c0:	4669      	mov	r1, sp
   207c2:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   207c6:	f7ff fb71 	bl	1feac <memcmp>
   207ca:	b920      	cbnz	r0, 207d6 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   207cc:	b106      	cbz	r6, 207d0 <find_rl_conflict+0x40>
		conflict->found = resident;
   207ce:	6065      	str	r5, [r4, #4]
}
   207d0:	b006      	add	sp, #24
   207d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207d6:	6820      	ldr	r0, [r4, #0]
   207d8:	2210      	movs	r2, #16
   207da:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   207de:	302a      	adds	r0, #42	; 0x2a
   207e0:	f7ff fb64 	bl	1feac <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   207e4:	2800      	cmp	r0, #0
   207e6:	d0f2      	beq.n	207ce <find_rl_conflict+0x3e>
   207e8:	e7f0      	b.n	207cc <find_rl_conflict+0x3c>

000207ea <bt_lookup_id_addr>:
{
   207ea:	b510      	push	{r4, lr}
   207ec:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   207ee:	b930      	cbnz	r0, 207fe <bt_lookup_id_addr+0x14>
   207f0:	b119      	cbz	r1, 207fa <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   207f2:	f7f7 fd85 	bl	18300 <bt_keys_find_irk>
		if (keys) {
   207f6:	b100      	cbz	r0, 207fa <bt_lookup_id_addr+0x10>
			return &keys->addr;
   207f8:	1c44      	adds	r4, r0, #1
}
   207fa:	4620      	mov	r0, r4
   207fc:	bd10      	pop	{r4, pc}
		return NULL;
   207fe:	2400      	movs	r4, #0
   20800:	e7fb      	b.n	207fa <bt_lookup_id_addr+0x10>

00020802 <bt_id_set_private_addr>:
{
   20802:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   20804:	b980      	cbnz	r0, 20828 <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20806:	2106      	movs	r1, #6
   20808:	4668      	mov	r0, sp
   2080a:	f7f9 fceb 	bl	1a1e4 <bt_rand>
	if (err) {
   2080e:	b940      	cbnz	r0, 20822 <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   20810:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   20814:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2081a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2081e:	f7f3 f8fd 	bl	13a1c <set_random_address>
}
   20822:	b003      	add	sp, #12
   20824:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   20828:	f06f 0015 	mvn.w	r0, #21
   2082c:	e7f9      	b.n	20822 <bt_id_set_private_addr+0x20>

0002082e <bt_id_scan_random_addr_check>:
}
   2082e:	2001      	movs	r0, #1
   20830:	4770      	bx	lr

00020832 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   20832:	7a03      	ldrb	r3, [r0, #8]
   20834:	07d9      	lsls	r1, r3, #31
   20836:	d504      	bpl.n	20842 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   20838:	f023 0301 	bic.w	r3, r3, #1
   2083c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2083e:	f7f3 b943 	b.w	13ac8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   20842:	0799      	lsls	r1, r3, #30
   20844:	d504      	bpl.n	20850 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   20846:	f023 0302 	bic.w	r3, r3, #2
   2084a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2084c:	f7f3 b9d8 	b.w	13c00 <bt_id_del>
}
   20850:	4770      	bx	lr

00020852 <atomic_and>:
{
   20852:	b510      	push	{r4, lr}
   20854:	4603      	mov	r3, r0
}
   20856:	f3bf 8f5b 	dmb	ish
   2085a:	e853 0f00 	ldrex	r0, [r3]
   2085e:	ea00 0201 	and.w	r2, r0, r1
   20862:	e843 2400 	strex	r4, r2, [r3]
   20866:	2c00      	cmp	r4, #0
   20868:	d1f7      	bne.n	2085a <atomic_and+0x8>
   2086a:	f3bf 8f5b 	dmb	ish
   2086e:	bd10      	pop	{r4, pc}

00020870 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   20870:	f7f3 bb7a 	b.w	13f68 <bt_le_scan_set_enable_legacy>

00020874 <sys_slist_find_and_remove>:
	return list->head;
   20874:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20876:	2200      	movs	r2, #0
   20878:	b90b      	cbnz	r3, 2087e <sys_slist_find_and_remove+0xa>
   2087a:	4618      	mov	r0, r3
   2087c:	4770      	bx	lr
   2087e:	428b      	cmp	r3, r1
   20880:	d110      	bne.n	208a4 <sys_slist_find_and_remove+0x30>
	return node->next;
   20882:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   20884:	b942      	cbnz	r2, 20898 <sys_slist_find_and_remove+0x24>
   20886:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   20888:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2088a:	4291      	cmp	r1, r2
   2088c:	d100      	bne.n	20890 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2088e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   20890:	2300      	movs	r3, #0
   20892:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20894:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   20896:	4770      	bx	lr
	parent->next = child;
   20898:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2089a:	6843      	ldr	r3, [r0, #4]
   2089c:	4299      	cmp	r1, r3
	list->tail = node;
   2089e:	bf08      	it	eq
   208a0:	6042      	streq	r2, [r0, #4]
}
   208a2:	e7f5      	b.n	20890 <sys_slist_find_and_remove+0x1c>
	return node->next;
   208a4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   208a6:	681b      	ldr	r3, [r3, #0]
   208a8:	e7e6      	b.n	20878 <sys_slist_find_and_remove+0x4>

000208aa <atomic_and>:
{
   208aa:	b510      	push	{r4, lr}
   208ac:	4603      	mov	r3, r0
}
   208ae:	f3bf 8f5b 	dmb	ish
   208b2:	e853 0f00 	ldrex	r0, [r3]
   208b6:	ea00 0201 	and.w	r2, r0, r1
   208ba:	e843 2400 	strex	r4, r2, [r3]
   208be:	2c00      	cmp	r4, #0
   208c0:	d1f7      	bne.n	208b2 <atomic_and+0x8>
   208c2:	f3bf 8f5b 	dmb	ish
   208c6:	bd10      	pop	{r4, pc}

000208c8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   208c8:	f3bf 8f5b 	dmb	ish
   208cc:	6800      	ldr	r0, [r0, #0]
   208ce:	f3bf 8f5b 	dmb	ish
}
   208d2:	4770      	bx	lr

000208d4 <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   208d4:	f3bf 8f5b 	dmb	ish
   208d8:	e850 3f00 	ldrex	r3, [r0]
   208dc:	3b01      	subs	r3, #1
   208de:	e840 3200 	strex	r2, r3, [r0]
   208e2:	2a00      	cmp	r2, #0
   208e4:	d1f8      	bne.n	208d8 <atomic_dec.isra.0+0x4>
   208e6:	f3bf 8f5b 	dmb	ish
}
   208ea:	4770      	bx	lr

000208ec <tx_complete_work>:
	tx_notify(conn);
   208ec:	3828      	subs	r0, #40	; 0x28
   208ee:	f7f3 bebb 	b.w	14668 <tx_notify>

000208f2 <bt_conn_reset_rx_state>:
{
   208f2:	b510      	push	{r4, lr}
   208f4:	4604      	mov	r4, r0
	if (!conn->rx) {
   208f6:	6900      	ldr	r0, [r0, #16]
   208f8:	b118      	cbz	r0, 20902 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   208fa:	f7f7 feb3 	bl	18664 <net_buf_unref>
	conn->rx = NULL;
   208fe:	2300      	movs	r3, #0
   20900:	6123      	str	r3, [r4, #16]
}
   20902:	bd10      	pop	{r4, pc}

00020904 <conn_cleanup>:
{
   20904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20908:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2090a:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2090c:	f104 0638 	add.w	r6, r4, #56	; 0x38
   20910:	2300      	movs	r3, #0
   20912:	2200      	movs	r2, #0
   20914:	4630      	mov	r0, r6
   20916:	f002 fe9d 	bl	23654 <net_buf_get>
   2091a:	4603      	mov	r3, r0
   2091c:	b950      	cbnz	r0, 20934 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   2091e:	4620      	mov	r0, r4
   20920:	f7ff ffe7 	bl	208f2 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20924:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20928:	2200      	movs	r2, #0
}
   2092a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2092e:	2300      	movs	r3, #0
   20930:	f7fa bffa 	b.w	1b928 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   20934:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   20936:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   20938:	f7f7 fe94 	bl	18664 <net_buf_unref>
		if (tx) {
   2093c:	2d00      	cmp	r5, #0
   2093e:	d0e7      	beq.n	20910 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   20940:	4629      	mov	r1, r5
   20942:	4620      	mov	r0, r4
   20944:	f7f3 fec0 	bl	146c8 <conn_tx_destroy>
   20948:	e7e0      	b.n	2090c <conn_cleanup+0x8>

0002094a <bt_conn_recv>:
{
   2094a:	b570      	push	{r4, r5, r6, lr}
   2094c:	4616      	mov	r6, r2
   2094e:	4604      	mov	r4, r0
   20950:	460d      	mov	r5, r1
	tx_notify(conn);
   20952:	f7f3 fe89 	bl	14668 <tx_notify>
	switch (flags) {
   20956:	2e01      	cmp	r6, #1
   20958:	d017      	beq.n	2098a <bt_conn_recv+0x40>
   2095a:	2e02      	cmp	r6, #2
   2095c:	d117      	bne.n	2098e <bt_conn_recv+0x44>
		if (conn->rx) {
   2095e:	6923      	ldr	r3, [r4, #16]
   20960:	b113      	cbz	r3, 20968 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   20962:	4620      	mov	r0, r4
   20964:	f7ff ffc5 	bl	208f2 <bt_conn_reset_rx_state>
		conn->rx = buf;
   20968:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   2096a:	6921      	ldr	r1, [r4, #16]
   2096c:	8a0a      	ldrh	r2, [r1, #16]
   2096e:	2a01      	cmp	r2, #1
   20970:	d937      	bls.n	209e2 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   20972:	68cb      	ldr	r3, [r1, #12]
   20974:	881b      	ldrh	r3, [r3, #0]
   20976:	3304      	adds	r3, #4
   20978:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   2097a:	429a      	cmp	r2, r3
   2097c:	d331      	bcc.n	209e2 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   2097e:	d928      	bls.n	209d2 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   20980:	4620      	mov	r0, r4
}
   20982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   20986:	f7ff bfb4 	b.w	208f2 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   2098a:	6920      	ldr	r0, [r4, #16]
   2098c:	b918      	cbnz	r0, 20996 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   2098e:	4620      	mov	r0, r4
   20990:	f7ff ffaf 	bl	208f2 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   20994:	e001      	b.n	2099a <bt_conn_recv+0x50>
		if (!buf->len) {
   20996:	8a2e      	ldrh	r6, [r5, #16]
   20998:	b926      	cbnz	r6, 209a4 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   2099a:	4628      	mov	r0, r5
}
   2099c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   209a0:	f7f7 be60 	b.w	18664 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   209a4:	300c      	adds	r0, #12
   209a6:	f002 ff03 	bl	237b0 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   209aa:	4286      	cmp	r6, r0
   209ac:	d907      	bls.n	209be <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   209ae:	6921      	ldr	r1, [r4, #16]
   209b0:	2200      	movs	r2, #0
   209b2:	4620      	mov	r0, r4
   209b4:	f000 fa9e 	bl	20ef4 <bt_l2cap_recv>
			conn->rx = NULL;
   209b8:	2300      	movs	r3, #0
   209ba:	6123      	str	r3, [r4, #16]
   209bc:	e7ed      	b.n	2099a <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   209be:	6920      	ldr	r0, [r4, #16]
   209c0:	8a2a      	ldrh	r2, [r5, #16]
   209c2:	68e9      	ldr	r1, [r5, #12]
   209c4:	300c      	adds	r0, #12
   209c6:	f002 feac 	bl	23722 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   209ca:	4628      	mov	r0, r5
   209cc:	f7f7 fe4a 	bl	18664 <net_buf_unref>
		break;
   209d0:	e7cb      	b.n	2096a <bt_conn_recv+0x20>
	conn->rx = NULL;
   209d2:	2300      	movs	r3, #0
   209d4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   209d6:	4620      	mov	r0, r4
   209d8:	2201      	movs	r2, #1
}
   209da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   209de:	f000 ba89 	b.w	20ef4 <bt_l2cap_recv>
}
   209e2:	bd70      	pop	{r4, r5, r6, pc}

000209e4 <bt_conn_ref>:
{
   209e4:	b510      	push	{r4, lr}
   209e6:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   209e8:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   209ec:	4610      	mov	r0, r2
   209ee:	f7ff ff6b 	bl	208c8 <atomic_get>
		if (!old) {
   209f2:	b180      	cbz	r0, 20a16 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   209f4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   209f8:	1c41      	adds	r1, r0, #1
   209fa:	e852 4f00 	ldrex	r4, [r2]
   209fe:	4284      	cmp	r4, r0
   20a00:	d104      	bne.n	20a0c <bt_conn_ref+0x28>
   20a02:	e842 1c00 	strex	ip, r1, [r2]
   20a06:	f1bc 0f00 	cmp.w	ip, #0
   20a0a:	d1f6      	bne.n	209fa <bt_conn_ref+0x16>
   20a0c:	f3bf 8f5b 	dmb	ish
   20a10:	d1ec      	bne.n	209ec <bt_conn_ref+0x8>
}
   20a12:	4618      	mov	r0, r3
   20a14:	bd10      	pop	{r4, pc}
			return NULL;
   20a16:	4603      	mov	r3, r0
   20a18:	e7fb      	b.n	20a12 <bt_conn_ref+0x2e>

00020a1a <conn_lookup_handle>:
{
   20a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a1e:	4606      	mov	r6, r0
   20a20:	460d      	mov	r5, r1
   20a22:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   20a24:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20a26:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   20a2a:	42ac      	cmp	r4, r5
   20a2c:	d102      	bne.n	20a34 <conn_lookup_handle+0x1a>
	return NULL;
   20a2e:	2000      	movs	r0, #0
}
   20a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20a34:	fb08 6004 	mla	r0, r8, r4, r6
   20a38:	f7ff ffd4 	bl	209e4 <bt_conn_ref>
		if (!conn) {
   20a3c:	b158      	cbz	r0, 20a56 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   20a3e:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   20a40:	2b01      	cmp	r3, #1
   20a42:	d002      	beq.n	20a4a <conn_lookup_handle+0x30>
   20a44:	3b07      	subs	r3, #7
   20a46:	2b01      	cmp	r3, #1
   20a48:	d802      	bhi.n	20a50 <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   20a4a:	8803      	ldrh	r3, [r0, #0]
   20a4c:	42bb      	cmp	r3, r7
   20a4e:	d0ef      	beq.n	20a30 <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   20a50:	30b8      	adds	r0, #184	; 0xb8
   20a52:	f7ff ff3f 	bl	208d4 <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   20a56:	3401      	adds	r4, #1
   20a58:	e7e7      	b.n	20a2a <conn_lookup_handle+0x10>

00020a5a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   20a5a:	30b8      	adds	r0, #184	; 0xb8
   20a5c:	f7ff bf3a 	b.w	208d4 <atomic_dec.isra.0>

00020a60 <bt_conn_connected>:
{
   20a60:	b510      	push	{r4, lr}
   20a62:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   20a64:	f7f4 fc56 	bl	15314 <bt_l2cap_connected>
	notify_connected(conn);
   20a68:	4620      	mov	r0, r4
}
   20a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   20a6e:	f7f3 bddd 	b.w	1462c <notify_connected>

00020a72 <bt_conn_ltk_present>:
{
   20a72:	b510      	push	{r4, lr}
   20a74:	4604      	mov	r4, r0
	const struct bt_keys *keys = conn->le.keys;
   20a76:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
	if (!keys) {
   20a7a:	b928      	cbnz	r0, 20a88 <bt_conn_ltk_present+0x16>
		keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   20a7c:	7a20      	ldrb	r0, [r4, #8]
   20a7e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   20a82:	f7f7 fc81 	bl	18388 <bt_keys_find_addr>
	if (keys) {
   20a86:	b138      	cbz	r0, 20a98 <bt_conn_ltk_present+0x26>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   20a88:	78e2      	ldrb	r2, [r4, #3]
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   20a8a:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   20a8c:	b92a      	cbnz	r2, 20a9a <bt_conn_ltk_present+0x28>
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   20a8e:	f013 0f21 	tst.w	r3, #33	; 0x21
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   20a92:	bf14      	ite	ne
   20a94:	2001      	movne	r0, #1
   20a96:	2000      	moveq	r0, #0
}
   20a98:	bd10      	pop	{r4, pc}
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   20a9a:	f013 0f24 	tst.w	r3, #36	; 0x24
   20a9e:	e7f8      	b.n	20a92 <bt_conn_ltk_present+0x20>

00020aa0 <bt_conn_le_start_encryption>:
{
   20aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20aa4:	4682      	mov	sl, r0
   20aa6:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   20aa8:	f242 0019 	movw	r0, #8217	; 0x2019
   20aac:	211c      	movs	r1, #28
{
   20aae:	9e08      	ldr	r6, [sp, #32]
   20ab0:	4690      	mov	r8, r2
   20ab2:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   20ab4:	f7f2 fb04 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   20ab8:	4605      	mov	r5, r0
   20aba:	b340      	cbz	r0, 20b0e <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   20abc:	211c      	movs	r1, #28
   20abe:	300c      	adds	r0, #12
   20ac0:	f002 fe29 	bl	23716 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20ac4:	f8ba 3000 	ldrh.w	r3, [sl]
   20ac8:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   20aca:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   20acc:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   20ad0:	4649      	mov	r1, r9
   20ad2:	f7ff fa12 	bl	1fefa <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   20ad6:	2202      	movs	r2, #2
   20ad8:	4641      	mov	r1, r8
   20ada:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   20ade:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   20ae0:	f7ff fa0b 	bl	1fefa <memcpy>
	memcpy(cp->ltk, ltk, len);
   20ae4:	4632      	mov	r2, r6
   20ae6:	4639      	mov	r1, r7
   20ae8:	4620      	mov	r0, r4
   20aea:	f7ff fa06 	bl	1fefa <memcpy>
	if (len < sizeof(cp->ltk)) {
   20aee:	2e0f      	cmp	r6, #15
   20af0:	d805      	bhi.n	20afe <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   20af2:	f1c6 0210 	rsb	r2, r6, #16
   20af6:	2100      	movs	r1, #0
   20af8:	19a0      	adds	r0, r4, r6
   20afa:	f7ff fa09 	bl	1ff10 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   20afe:	4629      	mov	r1, r5
   20b00:	2200      	movs	r2, #0
}
   20b02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   20b06:	f242 0019 	movw	r0, #8217	; 0x2019
   20b0a:	f7f2 bb13 	b.w	13134 <bt_hci_cmd_send_sync>
}
   20b0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020b16 <bt_conn_set_security>:
{
   20b16:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   20b18:	7b43      	ldrb	r3, [r0, #13]
   20b1a:	2b07      	cmp	r3, #7
{
   20b1c:	4604      	mov	r4, r0
   20b1e:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   20b20:	d126      	bne.n	20b70 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   20b22:	7a43      	ldrb	r3, [r0, #9]
   20b24:	428b      	cmp	r3, r1
   20b26:	d219      	bcs.n	20b5c <bt_conn_set_security+0x46>
   20b28:	7a83      	ldrb	r3, [r0, #10]
   20b2a:	428b      	cmp	r3, r1
   20b2c:	d216      	bcs.n	20b5c <bt_conn_set_security+0x46>
	if (val) {
   20b2e:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   20b30:	f100 0004 	add.w	r0, r0, #4
   20b34:	d514      	bpl.n	20b60 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20b36:	f3bf 8f5b 	dmb	ish
   20b3a:	e850 3f00 	ldrex	r3, [r0]
   20b3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   20b42:	e840 3200 	strex	r2, r3, [r0]
   20b46:	2a00      	cmp	r2, #0
   20b48:	d1f7      	bne.n	20b3a <bt_conn_set_security+0x24>
   20b4a:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   20b4e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   20b52:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   20b54:	4620      	mov	r0, r4
   20b56:	f002 f9e4 	bl	22f22 <bt_smp_start_security>
	if (err) {
   20b5a:	b930      	cbnz	r0, 20b6a <bt_conn_set_security+0x54>
		return -ENOTCONN;
   20b5c:	2000      	movs	r0, #0
}
   20b5e:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20b60:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   20b64:	f7ff fea1 	bl	208aa <atomic_and>
   20b68:	e7f1      	b.n	20b4e <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   20b6a:	7a63      	ldrb	r3, [r4, #9]
   20b6c:	72a3      	strb	r3, [r4, #10]
   20b6e:	e7f6      	b.n	20b5e <bt_conn_set_security+0x48>
		return -ENOTCONN;
   20b70:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   20b74:	e7f3      	b.n	20b5e <bt_conn_set_security+0x48>

00020b76 <bt_conn_get_security>:
}
   20b76:	7a40      	ldrb	r0, [r0, #9]
   20b78:	4770      	bx	lr

00020b7a <conn_le_create_helper>:
{
   20b7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20b7c:	4605      	mov	r5, r0
   20b7e:	460c      	mov	r4, r1
	if (bt_addr_le_is_resolved(peer)) {
   20b80:	f7ff fa75 	bl	2006e <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(&dst, peer);
   20b84:	4629      	mov	r1, r5
	if (bt_addr_le_is_resolved(peer)) {
   20b86:	b1a8      	cbz	r0, 20bb4 <conn_le_create_helper+0x3a>
		bt_addr_le_copy_resolved(&dst, peer);
   20b88:	4668      	mov	r0, sp
   20b8a:	f7ff fa66 	bl	2005a <bt_addr_le_copy_resolved>
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   20b8e:	4669      	mov	r1, sp
   20b90:	2000      	movs	r0, #0
   20b92:	f7f4 f8f9 	bl	14d88 <bt_conn_add_le>
	if (!conn) {
   20b96:	b158      	cbz	r0, 20bb0 <conn_le_create_helper+0x36>
	conn->le.interval_min = param->interval_min;
   20b98:	8823      	ldrh	r3, [r4, #0]
   20b9a:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   20b9e:	8863      	ldrh	r3, [r4, #2]
   20ba0:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   20ba4:	88a3      	ldrh	r3, [r4, #4]
   20ba6:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   20baa:	88e3      	ldrh	r3, [r4, #6]
   20bac:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   20bb0:	b003      	add	sp, #12
   20bb2:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   20bb4:	f7ff fe19 	bl	207ea <bt_lookup_id_addr>
   20bb8:	2207      	movs	r2, #7
   20bba:	4601      	mov	r1, r0
   20bbc:	4668      	mov	r0, sp
   20bbe:	f7ff f99c 	bl	1fefa <memcpy>
}
   20bc2:	e7e4      	b.n	20b8e <conn_le_create_helper+0x14>

00020bc4 <bt_conn_is_peer_addr_le>:
{
   20bc4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   20bc6:	7a03      	ldrb	r3, [r0, #8]
   20bc8:	428b      	cmp	r3, r1
{
   20bca:	4604      	mov	r4, r0
   20bcc:	4615      	mov	r5, r2
	if (id != conn->id) {
   20bce:	d115      	bne.n	20bfc <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   20bd0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20bd4:	2207      	movs	r2, #7
   20bd6:	4628      	mov	r0, r5
   20bd8:	f7ff f968 	bl	1feac <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   20bdc:	b180      	cbz	r0, 20c00 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   20bde:	78e3      	ldrb	r3, [r4, #3]
   20be0:	2207      	movs	r2, #7
   20be2:	b943      	cbnz	r3, 20bf6 <bt_conn_is_peer_addr_le+0x32>
   20be4:	f104 0196 	add.w	r1, r4, #150	; 0x96
   20be8:	4628      	mov	r0, r5
   20bea:	f7ff f95f 	bl	1feac <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   20bee:	fab0 f080 	clz	r0, r0
   20bf2:	0940      	lsrs	r0, r0, #5
}
   20bf4:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   20bf6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   20bfa:	e7f5      	b.n	20be8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   20bfc:	2000      	movs	r0, #0
   20bfe:	e7f9      	b.n	20bf4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   20c00:	2001      	movs	r0, #1
   20c02:	e7f7      	b.n	20bf4 <bt_conn_is_peer_addr_le+0x30>

00020c04 <bt_conn_exists_le>:
{
   20c04:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   20c06:	f7f4 f8db 	bl	14dc0 <bt_conn_lookup_addr_le>
	if (conn) {
   20c0a:	b118      	cbz	r0, 20c14 <bt_conn_exists_le+0x10>
	old = atomic_dec(&conn->ref);
   20c0c:	30b8      	adds	r0, #184	; 0xb8
   20c0e:	f7ff fe61 	bl	208d4 <atomic_dec.isra.0>
		return true;
   20c12:	2001      	movs	r0, #1
}
   20c14:	bd08      	pop	{r3, pc}

00020c16 <bt_conn_get_dst>:
}
   20c16:	3088      	adds	r0, #136	; 0x88
   20c18:	4770      	bx	lr

00020c1a <bt_conn_disconnect>:
{
   20c1a:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   20c1c:	7883      	ldrb	r3, [r0, #2]
   20c1e:	2b01      	cmp	r3, #1
{
   20c20:	4604      	mov	r4, r0
   20c22:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   20c24:	d103      	bne.n	20c2e <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   20c26:	2100      	movs	r1, #0
   20c28:	3088      	adds	r0, #136	; 0x88
   20c2a:	f7f4 f99b 	bl	14f64 <bt_le_set_auto_conn>
	switch (conn->state) {
   20c2e:	7b63      	ldrb	r3, [r4, #13]
   20c30:	3b02      	subs	r3, #2
   20c32:	2b06      	cmp	r3, #6
   20c34:	d825      	bhi.n	20c82 <bt_conn_disconnect+0x68>
   20c36:	e8df f003 	tbb	[pc, r3]
   20c3a:	2404      	.short	0x2404
   20c3c:	160e2424 	.word	0x160e2424
   20c40:	0c          	.byte	0x0c
   20c41:	00          	.byte	0x00
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20c42:	4620      	mov	r0, r4
		conn->err = reason;
   20c44:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20c46:	2100      	movs	r1, #0
   20c48:	f7f3 fed6 	bl	149f8 <bt_conn_set_state>
			bt_le_scan_update(false);
   20c4c:	2000      	movs	r0, #0
   20c4e:	f7f3 fa13 	bl	14078 <bt_le_scan_update>
{
   20c52:	2000      	movs	r0, #0
}
   20c54:	bd38      	pop	{r3, r4, r5, pc}
			k_work_cancel_delayable(&conn->deferred_work);
   20c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20c5a:	f003 fb2b 	bl	242b4 <k_work_cancel_delayable>
}
   20c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   20c62:	f7f2 bb5d 	b.w	13320 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   20c66:	8820      	ldrh	r0, [r4, #0]
   20c68:	4629      	mov	r1, r5
   20c6a:	f7ff fb8e 	bl	2038a <bt_hci_disconnect>
	if (err) {
   20c6e:	2800      	cmp	r0, #0
   20c70:	d1f0      	bne.n	20c54 <bt_conn_disconnect+0x3a>
	if (conn->state == BT_CONN_CONNECTED) {
   20c72:	7b63      	ldrb	r3, [r4, #13]
   20c74:	2b07      	cmp	r3, #7
   20c76:	d1ec      	bne.n	20c52 <bt_conn_disconnect+0x38>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   20c78:	2108      	movs	r1, #8
   20c7a:	4620      	mov	r0, r4
   20c7c:	f7f3 febc 	bl	149f8 <bt_conn_set_state>
   20c80:	e7e7      	b.n	20c52 <bt_conn_disconnect+0x38>
		return -ENOTCONN;
   20c82:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   20c86:	e7e5      	b.n	20c54 <bt_conn_disconnect+0x3a>

00020c88 <bt_conn_le_conn_update>:
{
   20c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c8a:	4607      	mov	r7, r0
   20c8c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   20c8e:	f242 0013 	movw	r0, #8211	; 0x2013
   20c92:	210e      	movs	r1, #14
   20c94:	f7f2 fa14 	bl	130c0 <bt_hci_cmd_create>
	if (!buf) {
   20c98:	4606      	mov	r6, r0
   20c9a:	b1d0      	cbz	r0, 20cd2 <bt_conn_le_conn_update+0x4a>
   20c9c:	210e      	movs	r1, #14
   20c9e:	300c      	adds	r0, #12
   20ca0:	f002 fd39 	bl	23716 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20ca4:	220e      	movs	r2, #14
   20ca6:	4604      	mov	r4, r0
   20ca8:	2100      	movs	r1, #0
   20caa:	f7ff f931 	bl	1ff10 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   20cae:	883b      	ldrh	r3, [r7, #0]
   20cb0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   20cb2:	882b      	ldrh	r3, [r5, #0]
   20cb4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   20cb6:	886b      	ldrh	r3, [r5, #2]
   20cb8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   20cba:	88ab      	ldrh	r3, [r5, #4]
   20cbc:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   20cbe:	88eb      	ldrh	r3, [r5, #6]
   20cc0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20cc2:	4631      	mov	r1, r6
   20cc4:	2200      	movs	r2, #0
}
   20cc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20cca:	f242 0013 	movw	r0, #8211	; 0x2013
   20cce:	f7f2 ba31 	b.w	13134 <bt_hci_cmd_send_sync>
}
   20cd2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020cd8 <l2cap_connected>:
}
   20cd8:	4770      	bx	lr

00020cda <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   20cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cdc:	4607      	mov	r7, r0
   20cde:	460e      	mov	r6, r1
   20ce0:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   20ce2:	2300      	movs	r3, #0
   20ce4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   20ce8:	2104      	movs	r1, #4
   20cea:	2000      	movs	r0, #0
   20cec:	f7f3 ff6a 	bl	14bc4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   20cf0:	4604      	mov	r4, r0
   20cf2:	b130      	cbz	r0, 20d02 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   20cf4:	2104      	movs	r1, #4
   20cf6:	300c      	adds	r0, #12
   20cf8:	f002 fd0d 	bl	23716 <net_buf_simple_add>
	hdr->code = code;
   20cfc:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   20cfe:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   20d00:	8045      	strh	r5, [r0, #2]
}
   20d02:	4620      	mov	r0, r4
   20d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020d06 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   20d06:	4770      	bx	lr

00020d08 <bt_l2cap_chan_del>:
{
   20d08:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   20d0a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   20d0e:	4604      	mov	r4, r0
	if (!chan->conn) {
   20d10:	b123      	cbz	r3, 20d1c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   20d12:	686b      	ldr	r3, [r5, #4]
   20d14:	b103      	cbz	r3, 20d18 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   20d16:	4798      	blx	r3
	chan->conn = NULL;
   20d18:	2300      	movs	r3, #0
   20d1a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   20d1c:	68e3      	ldr	r3, [r4, #12]
   20d1e:	b10b      	cbz	r3, 20d24 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   20d20:	4620      	mov	r0, r4
   20d22:	4798      	blx	r3
	if (ops->released) {
   20d24:	6a2b      	ldr	r3, [r5, #32]
   20d26:	b11b      	cbz	r3, 20d30 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   20d28:	4620      	mov	r0, r4
}
   20d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   20d2e:	4718      	bx	r3
}
   20d30:	bd70      	pop	{r4, r5, r6, pc}

00020d32 <bt_l2cap_disconnected>:
{
   20d32:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   20d34:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d36:	b130      	cbz	r0, 20d46 <bt_l2cap_disconnected+0x14>
	return node->next;
   20d38:	f850 4908 	ldr.w	r4, [r0], #-8
   20d3c:	b104      	cbz	r4, 20d40 <bt_l2cap_disconnected+0xe>
   20d3e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   20d40:	f7ff ffe2 	bl	20d08 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d44:	b904      	cbnz	r4, 20d48 <bt_l2cap_disconnected+0x16>
}
   20d46:	bd38      	pop	{r3, r4, r5, pc}
   20d48:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d4a:	b12d      	cbz	r5, 20d58 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   20d4c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d4e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   20d50:	f7ff ffda 	bl	20d08 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d54:	462c      	mov	r4, r5
   20d56:	e7f7      	b.n	20d48 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   20d58:	4620      	mov	r0, r4
}
   20d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   20d5e:	f7ff bfd3 	b.w	20d08 <bt_l2cap_chan_del>

00020d62 <bt_l2cap_security_changed>:
{
   20d62:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   20d64:	6d03      	ldr	r3, [r0, #80]	; 0x50
   20d66:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d68:	b1bb      	cbz	r3, 20d9a <bt_l2cap_security_changed+0x38>
   20d6a:	4618      	mov	r0, r3
	return node->next;
   20d6c:	f850 4908 	ldr.w	r4, [r0], #-8
   20d70:	b104      	cbz	r4, 20d74 <bt_l2cap_security_changed+0x12>
   20d72:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   20d74:	f853 3c04 	ldr.w	r3, [r3, #-4]
   20d78:	689b      	ldr	r3, [r3, #8]
   20d7a:	b10b      	cbz	r3, 20d80 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   20d7c:	4629      	mov	r1, r5
   20d7e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d80:	b15c      	cbz	r4, 20d9a <bt_l2cap_security_changed+0x38>
   20d82:	4620      	mov	r0, r4
   20d84:	68a4      	ldr	r4, [r4, #8]
   20d86:	6843      	ldr	r3, [r0, #4]
   20d88:	b124      	cbz	r4, 20d94 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   20d8a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d8c:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   20d8e:	2b00      	cmp	r3, #0
   20d90:	d1f4      	bne.n	20d7c <bt_l2cap_security_changed+0x1a>
   20d92:	e7f6      	b.n	20d82 <bt_l2cap_security_changed+0x20>
   20d94:	689b      	ldr	r3, [r3, #8]
   20d96:	2b00      	cmp	r3, #0
   20d98:	d1f0      	bne.n	20d7c <bt_l2cap_security_changed+0x1a>
}
   20d9a:	bd38      	pop	{r3, r4, r5, pc}

00020d9c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   20d9c:	3104      	adds	r1, #4
   20d9e:	f7f3 bf11 	b.w	14bc4 <bt_conn_create_pdu_timeout>

00020da2 <bt_l2cap_send_cb>:
{
   20da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20da6:	4614      	mov	r4, r2
   20da8:	4605      	mov	r5, r0
   20daa:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   20dac:	f102 000c 	add.w	r0, r2, #12
   20db0:	2104      	movs	r1, #4
   20db2:	461e      	mov	r6, r3
   20db4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20db8:	f002 fcce 	bl	23758 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20dbc:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   20dbe:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20dc0:	3a04      	subs	r2, #4
   20dc2:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20dc4:	4643      	mov	r3, r8
   20dc6:	4632      	mov	r2, r6
   20dc8:	4621      	mov	r1, r4
   20dca:	4628      	mov	r0, r5
}
   20dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20dd0:	f7f3 bd7e 	b.w	148d0 <bt_conn_send_cb>

00020dd4 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   20dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20dd6:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   20dd8:	2202      	movs	r2, #2
   20dda:	2001      	movs	r0, #1
   20ddc:	f7ff ff7d 	bl	20cda <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   20de0:	4604      	mov	r4, r0
   20de2:	b198      	cbz	r0, 20e0c <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   20de4:	2102      	movs	r1, #2
   20de6:	300c      	adds	r0, #12
   20de8:	f002 fc95 	bl	23716 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   20dec:	2300      	movs	r3, #0
   20dee:	7003      	strb	r3, [r0, #0]
   20df0:	7043      	strb	r3, [r0, #1]
   20df2:	4622      	mov	r2, r4
   20df4:	9300      	str	r3, [sp, #0]
   20df6:	2105      	movs	r1, #5
   20df8:	4628      	mov	r0, r5
   20dfa:	f7ff ffd2 	bl	20da2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   20dfe:	b128      	cbz	r0, 20e0c <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   20e00:	4620      	mov	r0, r4
}
   20e02:	b003      	add	sp, #12
   20e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   20e08:	f7f7 bc2c 	b.w	18664 <net_buf_unref>
}
   20e0c:	b003      	add	sp, #12
   20e0e:	bd30      	pop	{r4, r5, pc}

00020e10 <l2cap_recv>:
{
   20e10:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   20e12:	8a0b      	ldrh	r3, [r1, #16]
   20e14:	2b03      	cmp	r3, #3
{
   20e16:	b085      	sub	sp, #20
   20e18:	4604      	mov	r4, r0
   20e1a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   20e1c:	d911      	bls.n	20e42 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   20e1e:	2104      	movs	r1, #4
   20e20:	f105 000c 	add.w	r0, r5, #12
   20e24:	f002 fca8 	bl	23778 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   20e28:	8a2b      	ldrh	r3, [r5, #16]
   20e2a:	8846      	ldrh	r6, [r0, #2]
   20e2c:	429e      	cmp	r6, r3
   20e2e:	d108      	bne.n	20e42 <l2cap_recv+0x32>
	if (!hdr->ident) {
   20e30:	7841      	ldrb	r1, [r0, #1]
   20e32:	b131      	cbz	r1, 20e42 <l2cap_recv+0x32>
	switch (hdr->code) {
   20e34:	7803      	ldrb	r3, [r0, #0]
   20e36:	2b12      	cmp	r3, #18
   20e38:	d006      	beq.n	20e48 <l2cap_recv+0x38>
   20e3a:	2b13      	cmp	r3, #19
   20e3c:	d001      	beq.n	20e42 <l2cap_recv+0x32>
   20e3e:	2b01      	cmp	r3, #1
   20e40:	d142      	bne.n	20ec8 <l2cap_recv+0xb8>
}
   20e42:	2000      	movs	r0, #0
   20e44:	b005      	add	sp, #20
   20e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   20e48:	2e07      	cmp	r6, #7
   20e4a:	6824      	ldr	r4, [r4, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   20e4c:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
   20e4e:	d9f8      	bls.n	20e42 <l2cap_recv+0x32>
	if (conn->state != BT_CONN_CONNECTED) {
   20e50:	7b63      	ldrb	r3, [r4, #13]
   20e52:	2b07      	cmp	r3, #7
   20e54:	d1f5      	bne.n	20e42 <l2cap_recv+0x32>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   20e56:	78e7      	ldrb	r7, [r4, #3]
   20e58:	b11f      	cbz	r7, 20e62 <l2cap_recv+0x52>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   20e5a:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   20e5c:	f7ff ffba 	bl	20dd4 <l2cap_send_reject.constprop.0>
		break;
   20e60:	e7ef      	b.n	20e42 <l2cap_recv+0x32>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   20e62:	8813      	ldrh	r3, [r2, #0]
   20e64:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   20e68:	8853      	ldrh	r3, [r2, #2]
   20e6a:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   20e6e:	8893      	ldrh	r3, [r2, #4]
   20e70:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   20e74:	88d3      	ldrh	r3, [r2, #6]
   20e76:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   20e7a:	2202      	movs	r2, #2
   20e7c:	2013      	movs	r0, #19
   20e7e:	f7ff ff2c 	bl	20cda <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   20e82:	4605      	mov	r5, r0
   20e84:	2800      	cmp	r0, #0
   20e86:	d0dc      	beq.n	20e42 <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   20e88:	a902      	add	r1, sp, #8
   20e8a:	4620      	mov	r0, r4
   20e8c:	f7f3 feee 	bl	14c6c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   20e90:	2102      	movs	r1, #2
   20e92:	4606      	mov	r6, r0
   20e94:	f105 000c 	add.w	r0, r5, #12
   20e98:	f002 fc3d 	bl	23716 <net_buf_simple_add>
	if (accepted) {
   20e9c:	f086 0301 	eor.w	r3, r6, #1
   20ea0:	b2db      	uxtb	r3, r3
   20ea2:	8003      	strh	r3, [r0, #0]
   20ea4:	462a      	mov	r2, r5
   20ea6:	9700      	str	r7, [sp, #0]
   20ea8:	463b      	mov	r3, r7
   20eaa:	2105      	movs	r1, #5
   20eac:	4620      	mov	r0, r4
   20eae:	f7ff ff78 	bl	20da2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   20eb2:	b110      	cbz	r0, 20eba <l2cap_recv+0xaa>
		net_buf_unref(buf);
   20eb4:	4628      	mov	r0, r5
   20eb6:	f7f7 fbd5 	bl	18664 <net_buf_unref>
	if (accepted) {
   20eba:	2e00      	cmp	r6, #0
   20ebc:	d0c1      	beq.n	20e42 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   20ebe:	a902      	add	r1, sp, #8
   20ec0:	4620      	mov	r0, r4
   20ec2:	f7ff fee1 	bl	20c88 <bt_conn_le_conn_update>
   20ec6:	e7bc      	b.n	20e42 <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   20ec8:	6820      	ldr	r0, [r4, #0]
   20eca:	e7c7      	b.n	20e5c <l2cap_recv+0x4c>

00020ecc <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   20ecc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20ece:	b130      	cbz	r0, 20ede <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   20ed0:	8b83      	ldrh	r3, [r0, #28]
   20ed2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20ed4:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   20ed8:	d001      	beq.n	20ede <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   20eda:	6880      	ldr	r0, [r0, #8]
   20edc:	e7f7      	b.n	20ece <bt_l2cap_le_lookup_tx_cid+0x2>
}
   20ede:	4770      	bx	lr

00020ee0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   20ee0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20ee2:	b130      	cbz	r0, 20ef2 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20ee4:	8983      	ldrh	r3, [r0, #12]
   20ee6:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20ee8:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20eec:	d001      	beq.n	20ef2 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   20eee:	6880      	ldr	r0, [r0, #8]
   20ef0:	e7f7      	b.n	20ee2 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   20ef2:	4770      	bx	lr

00020ef4 <bt_l2cap_recv>:
{
   20ef4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   20ef6:	8a0b      	ldrh	r3, [r1, #16]
   20ef8:	2b03      	cmp	r3, #3
{
   20efa:	4605      	mov	r5, r0
   20efc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   20efe:	d804      	bhi.n	20f0a <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   20f00:	4620      	mov	r0, r4
}
   20f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   20f06:	f7f7 bbad 	b.w	18664 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   20f0a:	2104      	movs	r1, #4
   20f0c:	f104 000c 	add.w	r0, r4, #12
   20f10:	f002 fc32 	bl	23778 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   20f14:	8841      	ldrh	r1, [r0, #2]
   20f16:	4628      	mov	r0, r5
   20f18:	f7ff ffe2 	bl	20ee0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   20f1c:	2800      	cmp	r0, #0
   20f1e:	d0ef      	beq.n	20f00 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   20f20:	6843      	ldr	r3, [r0, #4]
   20f22:	4621      	mov	r1, r4
   20f24:	695b      	ldr	r3, [r3, #20]
   20f26:	4798      	blx	r3
   20f28:	e7ea      	b.n	20f00 <bt_l2cap_recv+0xc>

00020f2a <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   20f2a:	4770      	bx	lr

00020f2c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   20f2c:	4603      	mov	r3, r0
	return list->head;
   20f2e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   20f30:	b128      	cbz	r0, 20f3e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20f32:	6859      	ldr	r1, [r3, #4]
	return node->next;
   20f34:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20f36:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20f38:	4288      	cmp	r0, r1
	list->tail = node;
   20f3a:	bf08      	it	eq
   20f3c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   20f3e:	4770      	bx	lr

00020f40 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   20f40:	4603      	mov	r3, r0
	size_t bytes = 0;
   20f42:	2000      	movs	r0, #0

	while (buf) {
   20f44:	b903      	cbnz	r3, 20f48 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   20f46:	4770      	bx	lr
		bytes += buf->len;
   20f48:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   20f4a:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   20f4c:	4410      	add	r0, r2
		buf = buf->frags;
   20f4e:	e7f9      	b.n	20f44 <net_buf_frags_len+0x4>

00020f50 <attr_read_type_cb>:
{
   20f50:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   20f52:	68d4      	ldr	r4, [r2, #12]
   20f54:	7823      	ldrb	r3, [r4, #0]
   20f56:	3102      	adds	r1, #2
   20f58:	b913      	cbnz	r3, 20f60 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   20f5a:	7021      	strb	r1, [r4, #0]
	return true;
   20f5c:	2001      	movs	r0, #1
}
   20f5e:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   20f60:	428b      	cmp	r3, r1
   20f62:	d0fb      	beq.n	20f5c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   20f64:	8a03      	ldrh	r3, [r0, #16]
   20f66:	3b02      	subs	r3, #2
   20f68:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   20f6a:	2000      	movs	r0, #0
   20f6c:	6110      	str	r0, [r2, #16]
		return false;
   20f6e:	e7f6      	b.n	20f5e <attr_read_type_cb+0xe>

00020f70 <att_prepare_write_req>:
}
   20f70:	2006      	movs	r0, #6
   20f72:	4770      	bx	lr

00020f74 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20f74:	f3bf 8f5b 	dmb	ish
   20f78:	6800      	ldr	r0, [r0, #0]
   20f7a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20f7e:	4108      	asrs	r0, r1
}
   20f80:	f000 0001 	and.w	r0, r0, #1
   20f84:	4770      	bx	lr

00020f86 <att_get>:
{
   20f86:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   20f88:	7b43      	ldrb	r3, [r0, #13]
   20f8a:	2b07      	cmp	r3, #7
   20f8c:	d001      	beq.n	20f92 <att_get+0xc>
		return NULL;
   20f8e:	2000      	movs	r0, #0
}
   20f90:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   20f92:	2104      	movs	r1, #4
   20f94:	f7ff ffa4 	bl	20ee0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   20f98:	4603      	mov	r3, r0
   20f9a:	2800      	cmp	r0, #0
   20f9c:	d0f7      	beq.n	20f8e <att_get+0x8>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   20f9e:	2102      	movs	r1, #2
   20fa0:	3030      	adds	r0, #48	; 0x30
   20fa2:	f7ff ffe7 	bl	20f74 <atomic_test_bit>
   20fa6:	2800      	cmp	r0, #0
   20fa8:	d0f1      	beq.n	20f8e <att_get+0x8>
	return att_chan->att;
   20faa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   20fae:	e7ef      	b.n	20f90 <att_get+0xa>

00020fb0 <chan_req_send>:
{
   20fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fb2:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   20fb4:	6888      	ldr	r0, [r1, #8]
   20fb6:	f7ff ffc3 	bl	20f40 <net_buf_frags_len>
   20fba:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   20fbc:	4283      	cmp	r3, r0
{
   20fbe:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   20fc0:	d30b      	bcc.n	20fda <chan_req_send+0x2a>
	chan->req = req;
   20fc2:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   20fc4:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   20fc6:	2600      	movs	r6, #0
   20fc8:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   20fca:	4628      	mov	r0, r5
   20fcc:	4639      	mov	r1, r7
   20fce:	f7f4 fa75 	bl	154bc <chan_send>
	if (err) {
   20fd2:	b108      	cbz	r0, 20fd8 <chan_req_send+0x28>
		req->buf = buf;
   20fd4:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   20fd6:	63ae      	str	r6, [r5, #56]	; 0x38
}
   20fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   20fda:	f06f 0079 	mvn.w	r0, #121	; 0x79
   20fde:	e7fb      	b.n	20fd8 <chan_req_send+0x28>

00020fe0 <att_notify_mult>:
{
   20fe0:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   20fe2:	6803      	ldr	r3, [r0, #0]
   20fe4:	8a0a      	ldrh	r2, [r1, #16]
   20fe6:	6818      	ldr	r0, [r3, #0]
   20fe8:	68c9      	ldr	r1, [r1, #12]
   20fea:	f001 fbe8 	bl	227be <bt_gatt_mult_notification>
}
   20fee:	2000      	movs	r0, #0
   20ff0:	bd08      	pop	{r3, pc}

00020ff2 <att_notify>:
{
   20ff2:	b538      	push	{r3, r4, r5, lr}
   20ff4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   20ff6:	f101 000c 	add.w	r0, r1, #12
   20ffa:	460c      	mov	r4, r1
   20ffc:	f002 fbcc 	bl	23798 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   21000:	682d      	ldr	r5, [r5, #0]
   21002:	8a23      	ldrh	r3, [r4, #16]
   21004:	68e2      	ldr	r2, [r4, #12]
   21006:	4601      	mov	r1, r0
   21008:	6828      	ldr	r0, [r5, #0]
   2100a:	f001 fba5 	bl	22758 <bt_gatt_notification>
}
   2100e:	2000      	movs	r0, #0
   21010:	bd38      	pop	{r3, r4, r5, pc}

00021012 <bt_att_chan_send_rsp>:
{
   21012:	b538      	push	{r3, r4, r5, lr}
   21014:	4604      	mov	r4, r0
   21016:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   21018:	f7f4 fa50 	bl	154bc <chan_send>
	if (err) {
   2101c:	b130      	cbz	r0, 2102c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2101e:	4629      	mov	r1, r5
   21020:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   21024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   21028:	f002 bb43 	b.w	236b2 <net_buf_put>
}
   2102c:	bd38      	pop	{r3, r4, r5, pc}

0002102e <att_chan_mtu_updated>:
{
   2102e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   21030:	6805      	ldr	r5, [r0, #0]
	return list->head;
   21032:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21034:	b352      	cbz	r2, 2108c <att_chan_mtu_updated+0x5e>
	return node->next;
   21036:	6813      	ldr	r3, [r2, #0]
   21038:	b103      	cbz	r3, 2103c <att_chan_mtu_updated+0xe>
   2103a:	3b88      	subs	r3, #136	; 0x88
   2103c:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   21040:	2200      	movs	r2, #0
   21042:	4611      	mov	r1, r2
   21044:	e000      	b.n	21048 <att_chan_mtu_updated+0x1a>
   21046:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   21048:	4284      	cmp	r4, r0
   2104a:	d007      	beq.n	2105c <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2104c:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2104e:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   21050:	42b1      	cmp	r1, r6
   21052:	bf38      	it	cc
   21054:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   21056:	42a2      	cmp	r2, r4
   21058:	bf38      	it	cc
   2105a:	4622      	movcc	r2, r4
   2105c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2105e:	b12b      	cbz	r3, 2106c <att_chan_mtu_updated+0x3e>
   21060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   21064:	2b00      	cmp	r3, #0
   21066:	d1ee      	bne.n	21046 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   21068:	4284      	cmp	r4, r0
   2106a:	d1ef      	bne.n	2104c <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2106c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2106e:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   21070:	428b      	cmp	r3, r1
   21072:	d801      	bhi.n	21078 <att_chan_mtu_updated+0x4a>
   21074:	4290      	cmp	r0, r2
   21076:	d90b      	bls.n	21090 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21078:	4282      	cmp	r2, r0
   2107a:	bf38      	it	cc
   2107c:	4602      	movcc	r2, r0
   2107e:	4299      	cmp	r1, r3
   21080:	6828      	ldr	r0, [r5, #0]
   21082:	bf38      	it	cc
   21084:	4619      	movcc	r1, r3
}
   21086:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21088:	f7f6 b894 	b.w	171b4 <bt_gatt_att_max_mtu_changed>
   2108c:	4611      	mov	r1, r2
   2108e:	e7ed      	b.n	2106c <att_chan_mtu_updated+0x3e>
}
   21090:	bc70      	pop	{r4, r5, r6}
   21092:	4770      	bx	lr

00021094 <write_cb>:
{
   21094:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21096:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   21098:	4601      	mov	r1, r0
{
   2109a:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2109c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   210a0:	6820      	ldr	r0, [r4, #0]
   210a2:	f001 f86a 	bl	2217a <bt_gatt_check_perm>
   210a6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   210a8:	bb00      	cbnz	r0, 210ec <write_cb+0x58>
	if (!data->req) {
   210aa:	7a23      	ldrb	r3, [r4, #8]
   210ac:	b1b3      	cbz	r3, 210dc <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   210ae:	f1a3 0218 	sub.w	r2, r3, #24
   210b2:	4253      	negs	r3, r2
   210b4:	4153      	adcs	r3, r2
   210b6:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   210b8:	9301      	str	r3, [sp, #4]
   210ba:	8a63      	ldrh	r3, [r4, #18]
   210bc:	9300      	str	r3, [sp, #0]
   210be:	68ae      	ldr	r6, [r5, #8]
   210c0:	8a23      	ldrh	r3, [r4, #16]
   210c2:	68e2      	ldr	r2, [r4, #12]
   210c4:	6820      	ldr	r0, [r4, #0]
   210c6:	4629      	mov	r1, r5
   210c8:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   210ca:	2800      	cmp	r0, #0
   210cc:	db08      	blt.n	210e0 <write_cb+0x4c>
   210ce:	8a23      	ldrh	r3, [r4, #16]
   210d0:	4298      	cmp	r0, r3
   210d2:	d10e      	bne.n	210f2 <write_cb+0x5e>
	data->err = 0U;
   210d4:	2300      	movs	r3, #0
   210d6:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   210d8:	2001      	movs	r0, #1
   210da:	e008      	b.n	210ee <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   210dc:	2302      	movs	r3, #2
   210de:	e7eb      	b.n	210b8 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   210e0:	f110 0fff 	cmn.w	r0, #255	; 0xff
   210e4:	d305      	bcc.n	210f2 <write_cb+0x5e>
		return -err;
   210e6:	4240      	negs	r0, r0
   210e8:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   210ea:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   210ec:	2000      	movs	r0, #0
}
   210ee:	b002      	add	sp, #8
   210f0:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   210f2:	200e      	movs	r0, #14
   210f4:	e7f9      	b.n	210ea <write_cb+0x56>

000210f6 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   210f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   210f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   210fc:	2300      	movs	r3, #0
   210fe:	9300      	str	r3, [sp, #0]
   21100:	461a      	mov	r2, r3
   21102:	f7f5 fa8f 	bl	16624 <bt_gatt_foreach_attr_type>
				  user_data);
}
   21106:	b005      	add	sp, #20
   21108:	f85d fb04 	ldr.w	pc, [sp], #4

0002110c <find_type_cb>:
{
   2110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21110:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   21112:	f8d2 9000 	ldr.w	r9, [r2]
{
   21116:	4607      	mov	r7, r0
   21118:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2111a:	2500      	movs	r5, #0
   2111c:	f642 0301 	movw	r3, #10241	; 0x2801
   21120:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   21122:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   21126:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2112a:	a90b      	add	r1, sp, #44	; 0x2c
{
   2112c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2112e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   21132:	f7fe ff3b 	bl	1ffac <bt_uuid_cmp>
   21136:	2800      	cmp	r0, #0
   21138:	d079      	beq.n	2122e <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   2113a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2113e:	6838      	ldr	r0, [r7, #0]
   21140:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   21144:	a90b      	add	r1, sp, #44	; 0x2c
   21146:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2114a:	f7fe ff2f 	bl	1ffac <bt_uuid_cmp>
   2114e:	b138      	cbz	r0, 21160 <find_type_cb+0x54>
		if (data->group &&
   21150:	68a3      	ldr	r3, [r4, #8]
   21152:	b11b      	cbz	r3, 2115c <find_type_cb+0x50>
   21154:	885a      	ldrh	r2, [r3, #2]
   21156:	42b2      	cmp	r2, r6
   21158:	d200      	bcs.n	2115c <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   2115a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2115c:	2001      	movs	r0, #1
   2115e:	e009      	b.n	21174 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   21160:	6861      	ldr	r1, [r4, #4]
   21162:	4608      	mov	r0, r1
   21164:	f7ff feec 	bl	20f40 <net_buf_frags_len>
   21168:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   2116c:	1a1b      	subs	r3, r3, r0
   2116e:	2b03      	cmp	r3, #3
   21170:	d803      	bhi.n	2117a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   21172:	2000      	movs	r0, #0
}
   21174:	b011      	add	sp, #68	; 0x44
   21176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   2117a:	4608      	mov	r0, r1
   2117c:	f002 fa9f 	bl	236be <net_buf_frag_last>
   21180:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   21182:	6860      	ldr	r0, [r4, #4]
   21184:	f7ff fedc 	bl	20f40 <net_buf_frags_len>
   21188:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2118c:	f105 0b0c 	add.w	fp, r5, #12
   21190:	ebaa 0a00 	sub.w	sl, sl, r0
   21194:	4658      	mov	r0, fp
   21196:	f002 fb0b 	bl	237b0 <net_buf_simple_tailroom>
   2119a:	4582      	cmp	sl, r0
   2119c:	d23f      	bcs.n	2121e <find_type_cb+0x112>
   2119e:	6860      	ldr	r0, [r4, #4]
   211a0:	f7ff fece 	bl	20f40 <net_buf_frags_len>
   211a4:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   211a8:	1a18      	subs	r0, r3, r0
	if (!len) {
   211aa:	b970      	cbnz	r0, 211ca <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   211ac:	6863      	ldr	r3, [r4, #4]
   211ae:	7a98      	ldrb	r0, [r3, #10]
   211b0:	f7f7 f996 	bl	184e0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   211b4:	2200      	movs	r2, #0
   211b6:	2300      	movs	r3, #0
   211b8:	f002 fa47 	bl	2364a <net_buf_alloc_fixed>
		if (!frag) {
   211bc:	4605      	mov	r5, r0
   211be:	2800      	cmp	r0, #0
   211c0:	d0d7      	beq.n	21172 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   211c2:	4601      	mov	r1, r0
   211c4:	6860      	ldr	r0, [r4, #4]
   211c6:	f002 fa8b 	bl	236e0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   211ca:	2300      	movs	r3, #0
   211cc:	9300      	str	r3, [sp, #0]
   211ce:	f8d7 9004 	ldr.w	r9, [r7, #4]
   211d2:	4639      	mov	r1, r7
   211d4:	2310      	movs	r3, #16
   211d6:	aa02      	add	r2, sp, #8
   211d8:	4640      	mov	r0, r8
   211da:	47c8      	blx	r9
	if (read < 0) {
   211dc:	1e07      	subs	r7, r0, #0
   211de:	db26      	blt.n	2122e <find_type_cb+0x122>
	if (read != data->value_len) {
   211e0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   211e2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   211e4:	42ba      	cmp	r2, r7
   211e6:	d01e      	beq.n	21226 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   211e8:	4601      	mov	r1, r0
   211ea:	a80b      	add	r0, sp, #44	; 0x2c
   211ec:	f7fe ff0c 	bl	20008 <bt_uuid_create>
   211f0:	b1e8      	cbz	r0, 2122e <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   211f2:	b2fa      	uxtb	r2, r7
   211f4:	a902      	add	r1, sp, #8
   211f6:	a806      	add	r0, sp, #24
   211f8:	f7fe ff06 	bl	20008 <bt_uuid_create>
   211fc:	b1b8      	cbz	r0, 2122e <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   211fe:	a906      	add	r1, sp, #24
   21200:	a80b      	add	r0, sp, #44	; 0x2c
   21202:	f7fe fed3 	bl	1ffac <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   21206:	b990      	cbnz	r0, 2122e <find_type_cb+0x122>
	data->err = 0x00;
   21208:	2300      	movs	r3, #0
   2120a:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   2120c:	2104      	movs	r1, #4
   2120e:	f105 000c 	add.w	r0, r5, #12
   21212:	f002 fa80 	bl	23716 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   21216:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   21218:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2121a:	68a3      	ldr	r3, [r4, #8]
   2121c:	e79d      	b.n	2115a <find_type_cb+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   2121e:	4658      	mov	r0, fp
   21220:	f002 fac6 	bl	237b0 <net_buf_simple_tailroom>
   21224:	e7c1      	b.n	211aa <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   21226:	a902      	add	r1, sp, #8
   21228:	f7fe fe40 	bl	1feac <memcmp>
   2122c:	e7eb      	b.n	21206 <find_type_cb+0xfa>
	data->group = NULL;
   2122e:	2300      	movs	r3, #0
   21230:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   21232:	e793      	b.n	2115c <find_type_cb+0x50>

00021234 <find_info_cb>:
{
   21234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   21236:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   21238:	6817      	ldr	r7, [r2, #0]
{
   2123a:	4605      	mov	r5, r0
   2123c:	460e      	mov	r6, r1
   2123e:	4614      	mov	r4, r2
	if (!data->rsp) {
   21240:	b963      	cbnz	r3, 2125c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   21242:	6850      	ldr	r0, [r2, #4]
   21244:	2101      	movs	r1, #1
   21246:	300c      	adds	r0, #12
   21248:	f002 fa65 	bl	23716 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2124c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2124e:	682b      	ldr	r3, [r5, #0]
   21250:	781b      	ldrb	r3, [r3, #0]
   21252:	2b00      	cmp	r3, #0
   21254:	bf14      	ite	ne
   21256:	2302      	movne	r3, #2
   21258:	2301      	moveq	r3, #1
   2125a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2125c:	68a3      	ldr	r3, [r4, #8]
   2125e:	781b      	ldrb	r3, [r3, #0]
   21260:	2b01      	cmp	r3, #1
   21262:	d003      	beq.n	2126c <find_info_cb+0x38>
   21264:	2b02      	cmp	r3, #2
   21266:	d019      	beq.n	2129c <find_info_cb+0x68>
   21268:	2000      	movs	r0, #0
   2126a:	e016      	b.n	2129a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2126c:	682b      	ldr	r3, [r5, #0]
   2126e:	781b      	ldrb	r3, [r3, #0]
   21270:	2b00      	cmp	r3, #0
   21272:	d1f9      	bne.n	21268 <find_info_cb+0x34>
   21274:	6860      	ldr	r0, [r4, #4]
   21276:	2104      	movs	r1, #4
   21278:	300c      	adds	r0, #12
   2127a:	f002 fa4c 	bl	23716 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2127e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   21280:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   21282:	682a      	ldr	r2, [r5, #0]
   21284:	68e3      	ldr	r3, [r4, #12]
   21286:	8852      	ldrh	r2, [r2, #2]
   21288:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2128a:	6863      	ldr	r3, [r4, #4]
   2128c:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2128e:	8a1b      	ldrh	r3, [r3, #16]
   21290:	1ac0      	subs	r0, r0, r3
   21292:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   21294:	bf94      	ite	ls
   21296:	2000      	movls	r0, #0
   21298:	2001      	movhi	r0, #1
}
   2129a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2129c:	682b      	ldr	r3, [r5, #0]
   2129e:	781b      	ldrb	r3, [r3, #0]
   212a0:	2b02      	cmp	r3, #2
   212a2:	d1e1      	bne.n	21268 <find_info_cb+0x34>
   212a4:	6860      	ldr	r0, [r4, #4]
   212a6:	2112      	movs	r1, #18
   212a8:	300c      	adds	r0, #12
   212aa:	f002 fa34 	bl	23716 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   212ae:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   212b0:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   212b2:	6829      	ldr	r1, [r5, #0]
   212b4:	68e0      	ldr	r0, [r4, #12]
   212b6:	2210      	movs	r2, #16
   212b8:	3101      	adds	r1, #1
   212ba:	3002      	adds	r0, #2
   212bc:	f7fe fe1d 	bl	1fefa <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   212c0:	6863      	ldr	r3, [r4, #4]
   212c2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   212c4:	8a1b      	ldrh	r3, [r3, #16]
   212c6:	1ac0      	subs	r0, r0, r3
   212c8:	2812      	cmp	r0, #18
   212ca:	e7e3      	b.n	21294 <find_info_cb+0x60>

000212cc <attr_read_group_cb>:
	if (!data->rsp->len) {
   212cc:	68d0      	ldr	r0, [r2, #12]
   212ce:	7803      	ldrb	r3, [r0, #0]
   212d0:	3104      	adds	r1, #4
   212d2:	b913      	cbnz	r3, 212da <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   212d4:	7001      	strb	r1, [r0, #0]
	return true;
   212d6:	2001      	movs	r0, #1
   212d8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   212da:	428b      	cmp	r3, r1
   212dc:	d0fb      	beq.n	212d6 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   212de:	6891      	ldr	r1, [r2, #8]
   212e0:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   212e2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   212e4:	3b04      	subs	r3, #4
   212e6:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   212e8:	6110      	str	r0, [r2, #16]
}
   212ea:	4770      	bx	lr

000212ec <process_queue>:
{
   212ec:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   212ee:	2200      	movs	r2, #0
{
   212f0:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   212f2:	2300      	movs	r3, #0
   212f4:	4608      	mov	r0, r1
{
   212f6:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   212f8:	f002 f9ac 	bl	23654 <net_buf_get>
	if (buf) {
   212fc:	4605      	mov	r5, r0
   212fe:	b158      	cbz	r0, 21318 <process_queue+0x2c>
	return chan_send(chan, buf);
   21300:	4601      	mov	r1, r0
   21302:	4620      	mov	r0, r4
   21304:	f7f4 f8da 	bl	154bc <chan_send>
		if (err) {
   21308:	4604      	mov	r4, r0
   2130a:	b118      	cbz	r0, 21314 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2130c:	4629      	mov	r1, r5
   2130e:	4630      	mov	r0, r6
   21310:	f002 feed 	bl	240ee <k_queue_prepend>
}
   21314:	4620      	mov	r0, r4
   21316:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   21318:	f06f 0401 	mvn.w	r4, #1
   2131c:	e7fa      	b.n	21314 <process_queue+0x28>

0002131e <att_chan_read>:
{
   2131e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21322:	4680      	mov	r8, r0
   21324:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21326:	4610      	mov	r0, r2
{
   21328:	4699      	mov	r9, r3
   2132a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2132c:	f7ff fe08 	bl	20f40 <net_buf_frags_len>
   21330:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   21334:	4283      	cmp	r3, r0
{
   21336:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21338:	d97a      	bls.n	21430 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2133a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2133e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   21340:	4630      	mov	r0, r6
   21342:	f002 f9bc 	bl	236be <net_buf_frag_last>
	size_t len, total = 0;
   21346:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2134a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2134c:	4630      	mov	r0, r6
   2134e:	f7ff fdf7 	bl	20f40 <net_buf_frags_len>
   21352:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   21356:	f105 070c 	add.w	r7, r5, #12
   2135a:	1a24      	subs	r4, r4, r0
   2135c:	4638      	mov	r0, r7
   2135e:	f002 fa27 	bl	237b0 <net_buf_simple_tailroom>
   21362:	4284      	cmp	r4, r0
   21364:	d211      	bcs.n	2138a <att_chan_read+0x6c>
   21366:	4630      	mov	r0, r6
   21368:	f7ff fdea 	bl	20f40 <net_buf_frags_len>
   2136c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   21370:	1a24      	subs	r4, r4, r0
		if (!len) {
   21372:	bb34      	cbnz	r4, 213c2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   21374:	7ab0      	ldrb	r0, [r6, #10]
   21376:	f7f7 f8b3 	bl	184e0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2137a:	2200      	movs	r2, #0
   2137c:	2300      	movs	r3, #0
   2137e:	f002 f964 	bl	2364a <net_buf_alloc_fixed>
			if (!frag) {
   21382:	4605      	mov	r5, r0
   21384:	b930      	cbnz	r0, 21394 <att_chan_read+0x76>
	return total;
   21386:	4657      	mov	r7, sl
   21388:	e02c      	b.n	213e4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2138a:	4638      	mov	r0, r7
   2138c:	f002 fa10 	bl	237b0 <net_buf_simple_tailroom>
   21390:	4604      	mov	r4, r0
   21392:	e7ee      	b.n	21372 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   21394:	4601      	mov	r1, r0
   21396:	4630      	mov	r0, r6
   21398:	f002 f9a2 	bl	236e0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2139c:	4630      	mov	r0, r6
   2139e:	f7ff fdcf 	bl	20f40 <net_buf_frags_len>
   213a2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   213a6:	f105 070c 	add.w	r7, r5, #12
   213aa:	1a24      	subs	r4, r4, r0
   213ac:	4638      	mov	r0, r7
   213ae:	f002 f9ff 	bl	237b0 <net_buf_simple_tailroom>
   213b2:	4284      	cmp	r4, r0
   213b4:	d21a      	bcs.n	213ec <att_chan_read+0xce>
   213b6:	4630      	mov	r0, r6
   213b8:	f7ff fdc2 	bl	20f40 <net_buf_frags_len>
   213bc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   213c0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   213c2:	68e9      	ldr	r1, [r5, #12]
   213c4:	8a2a      	ldrh	r2, [r5, #16]
   213c6:	f8cd 9000 	str.w	r9, [sp]
   213ca:	f8db 7004 	ldr.w	r7, [fp, #4]
   213ce:	9803      	ldr	r0, [sp, #12]
   213d0:	440a      	add	r2, r1
   213d2:	b2a3      	uxth	r3, r4
   213d4:	4659      	mov	r1, fp
   213d6:	47b8      	blx	r7
		if (read < 0) {
   213d8:	1e07      	subs	r7, r0, #0
   213da:	da0c      	bge.n	213f6 <att_chan_read+0xd8>
				return total;
   213dc:	f1ba 0f00 	cmp.w	sl, #0
   213e0:	bf18      	it	ne
   213e2:	4657      	movne	r7, sl
}
   213e4:	4638      	mov	r0, r7
   213e6:	b005      	add	sp, #20
   213e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213ec:	4638      	mov	r0, r7
   213ee:	f002 f9df 	bl	237b0 <net_buf_simple_tailroom>
   213f2:	4604      	mov	r4, r0
   213f4:	e7e5      	b.n	213c2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   213f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   213f8:	b993      	cbnz	r3, 21420 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   213fa:	4639      	mov	r1, r7
   213fc:	f105 000c 	add.w	r0, r5, #12
   21400:	f002 f989 	bl	23716 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21404:	4630      	mov	r0, r6
   21406:	f7ff fd9b 	bl	20f40 <net_buf_frags_len>
   2140a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2140e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21410:	4283      	cmp	r3, r0
		total += read;
   21412:	44ba      	add	sl, r7
		offset += read;
   21414:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21418:	d9b5      	bls.n	21386 <att_chan_read+0x68>
   2141a:	42a7      	cmp	r7, r4
   2141c:	d096      	beq.n	2134c <att_chan_read+0x2e>
   2141e:	e7b2      	b.n	21386 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   21420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21424:	4639      	mov	r1, r7
   21426:	4628      	mov	r0, r5
   21428:	4798      	blx	r3
   2142a:	2800      	cmp	r0, #0
   2142c:	d1e5      	bne.n	213fa <att_chan_read+0xdc>
   2142e:	e7aa      	b.n	21386 <att_chan_read+0x68>
		return 0;
   21430:	2700      	movs	r7, #0
   21432:	e7d7      	b.n	213e4 <att_chan_read+0xc6>

00021434 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   21434:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21436:	2200      	movs	r2, #0
   21438:	b903      	cbnz	r3, 2143c <sys_slist_find_and_remove.isra.0+0x8>
   2143a:	4770      	bx	lr
   2143c:	428b      	cmp	r3, r1
   2143e:	d10f      	bne.n	21460 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   21440:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   21442:	b93a      	cbnz	r2, 21454 <sys_slist_find_and_remove.isra.0+0x20>
   21444:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   21446:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21448:	4291      	cmp	r1, r2
   2144a:	d100      	bne.n	2144e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2144c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2144e:	2300      	movs	r3, #0
   21450:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   21452:	4770      	bx	lr
	parent->next = child;
   21454:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21456:	6843      	ldr	r3, [r0, #4]
   21458:	4299      	cmp	r1, r3
	list->tail = node;
   2145a:	bf08      	it	eq
   2145c:	6042      	streq	r2, [r0, #4]
}
   2145e:	e7f6      	b.n	2144e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   21460:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21462:	681b      	ldr	r3, [r3, #0]
   21464:	e7e8      	b.n	21438 <sys_slist_find_and_remove.isra.0+0x4>

00021466 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21466:	2301      	movs	r3, #1
   21468:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2146a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2146c:	f3bf 8f5b 	dmb	ish
   21470:	e850 2f00 	ldrex	r2, [r0]
   21474:	401a      	ands	r2, r3
   21476:	e840 2100 	strex	r1, r2, [r0]
   2147a:	2900      	cmp	r1, #0
   2147c:	d1f8      	bne.n	21470 <atomic_clear_bit+0xa>
   2147e:	f3bf 8f5b 	dmb	ish
}
   21482:	4770      	bx	lr

00021484 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   21484:	2006      	movs	r0, #6
   21486:	4770      	bx	lr

00021488 <read_cb>:
{
   21488:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2148a:	6816      	ldr	r6, [r2, #0]
{
   2148c:	4605      	mov	r5, r0
	data->err = 0x00;
   2148e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   21490:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   21492:	7313      	strb	r3, [r2, #12]
{
   21494:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21496:	4629      	mov	r1, r5
   21498:	2295      	movs	r2, #149	; 0x95
   2149a:	f000 fe6e 	bl	2217a <bt_gatt_check_perm>
   2149e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   214a0:	b980      	cbnz	r0, 214c4 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   214a2:	e9cd 0000 	strd	r0, r0, [sp]
   214a6:	4629      	mov	r1, r5
   214a8:	88a3      	ldrh	r3, [r4, #4]
   214aa:	68a2      	ldr	r2, [r4, #8]
   214ac:	4630      	mov	r0, r6
   214ae:	f7ff ff36 	bl	2131e <att_chan_read>
	if (ret < 0) {
   214b2:	2800      	cmp	r0, #0
   214b4:	da09      	bge.n	214ca <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   214b6:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   214ba:	bf26      	itte	cs
   214bc:	4240      	negcs	r0, r0
   214be:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   214c0:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   214c2:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   214c4:	2000      	movs	r0, #0
}
   214c6:	b002      	add	sp, #8
   214c8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   214ca:	2001      	movs	r0, #1
   214cc:	e7fb      	b.n	214c6 <read_cb+0x3e>

000214ce <read_vl_cb>:
{
   214ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   214d2:	f8d2 8000 	ldr.w	r8, [r2]
{
   214d6:	4606      	mov	r6, r0
	data->err = 0x00;
   214d8:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   214da:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   214de:	7313      	strb	r3, [r2, #12]
{
   214e0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   214e2:	4631      	mov	r1, r6
   214e4:	2295      	movs	r2, #149	; 0x95
   214e6:	f000 fe48 	bl	2217a <bt_gatt_check_perm>
   214ea:	4605      	mov	r5, r0
   214ec:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   214ee:	b9e0      	cbnz	r0, 2152a <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   214f0:	68a0      	ldr	r0, [r4, #8]
   214f2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   214f6:	8a02      	ldrh	r2, [r0, #16]
   214f8:	1a9b      	subs	r3, r3, r2
   214fa:	2b01      	cmp	r3, #1
   214fc:	dd15      	ble.n	2152a <read_vl_cb+0x5c>
   214fe:	2102      	movs	r1, #2
   21500:	300c      	adds	r0, #12
   21502:	f002 f908 	bl	23716 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   21506:	e9cd 5500 	strd	r5, r5, [sp]
   2150a:	4607      	mov	r7, r0
   2150c:	88a3      	ldrh	r3, [r4, #4]
   2150e:	68a2      	ldr	r2, [r4, #8]
   21510:	4631      	mov	r1, r6
   21512:	4640      	mov	r0, r8
   21514:	f7ff ff03 	bl	2131e <att_chan_read>
	if (read < 0) {
   21518:	1e03      	subs	r3, r0, #0
   2151a:	da0a      	bge.n	21532 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2151c:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   21520:	bf26      	itte	cs
   21522:	425b      	negcs	r3, r3
   21524:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   21526:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   21528:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2152a:	2000      	movs	r0, #0
}
   2152c:	b002      	add	sp, #8
   2152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   21532:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   21534:	2001      	movs	r0, #1
   21536:	e7f9      	b.n	2152c <read_vl_cb+0x5e>

00021538 <bt_att_sent>:
{
   21538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   2153a:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   2153e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21540:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   21542:	2104      	movs	r1, #4
   21544:	3030      	adds	r0, #48	; 0x30
   21546:	f7ff ff8e 	bl	21466 <atomic_clear_bit>
	if (!att) {
   2154a:	b304      	cbz	r4, 2158e <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2154c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2154e:	b98b      	cbnz	r3, 21574 <bt_att_sent+0x3c>
   21550:	6863      	ldr	r3, [r4, #4]
   21552:	b17b      	cbz	r3, 21574 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21554:	1d20      	adds	r0, r4, #4
   21556:	f7ff fce9 	bl	20f2c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2155a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2155c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2155e:	4638      	mov	r0, r7
   21560:	f7ff fd26 	bl	20fb0 <chan_req_send>
   21564:	2800      	cmp	r0, #0
   21566:	da12      	bge.n	2158e <bt_att_sent+0x56>
	return list->head;
   21568:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2156a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2156c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2156e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21570:	b903      	cbnz	r3, 21574 <bt_att_sent+0x3c>
	list->tail = node;
   21572:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21574:	f105 0138 	add.w	r1, r5, #56	; 0x38
   21578:	4638      	mov	r0, r7
   2157a:	f7ff feb7 	bl	212ec <process_queue>
	if (!err) {
   2157e:	b130      	cbz	r0, 2158e <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   21580:	f104 010c 	add.w	r1, r4, #12
   21584:	4638      	mov	r0, r7
}
   21586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2158a:	f7ff beaf 	b.w	212ec <process_queue>
}
   2158e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021590 <att_req_send_process>:
{
   21590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   21594:	6a44      	ldr	r4, [r0, #36]	; 0x24
   21596:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21598:	2c00      	cmp	r4, #0
   2159a:	d03a      	beq.n	21612 <att_req_send_process+0x82>
	return node->next;
   2159c:	f854 6988 	ldr.w	r6, [r4], #-136
   215a0:	b106      	cbz	r6, 215a4 <att_req_send_process+0x14>
   215a2:	3e88      	subs	r6, #136	; 0x88
{
   215a4:	2300      	movs	r3, #0
   215a6:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   215a8:	f108 0704 	add.w	r7, r8, #4
   215ac:	e013      	b.n	215d6 <att_req_send_process+0x46>
		if (!req && prev &&
   215ae:	b1bb      	cbz	r3, 215e0 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   215b0:	2103      	movs	r1, #3
   215b2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   215b6:	f7ff fcdd 	bl	20f74 <atomic_test_bit>
   215ba:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   215bc:	f103 0034 	add.w	r0, r3, #52	; 0x34
   215c0:	f7ff fcd8 	bl	20f74 <atomic_test_bit>
		if (!req && prev &&
   215c4:	4282      	cmp	r2, r0
   215c6:	d10b      	bne.n	215e0 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   215c8:	b31e      	cbz	r6, 21612 <att_req_send_process+0x82>
   215ca:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   215ce:	b102      	cbz	r2, 215d2 <att_req_send_process+0x42>
   215d0:	3a88      	subs	r2, #136	; 0x88
{
   215d2:	4634      	mov	r4, r6
   215d4:	4616      	mov	r6, r2
		if (chan->req) {
   215d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   215d8:	2a00      	cmp	r2, #0
   215da:	d1f5      	bne.n	215c8 <att_req_send_process+0x38>
		if (!req && prev &&
   215dc:	2d00      	cmp	r5, #0
   215de:	d0e6      	beq.n	215ae <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   215e0:	4638      	mov	r0, r7
   215e2:	f7ff fca3 	bl	20f2c <sys_slist_get>
	if (node) {
   215e6:	4605      	mov	r5, r0
   215e8:	b908      	cbnz	r0, 215ee <att_req_send_process+0x5e>
   215ea:	4623      	mov	r3, r4
   215ec:	e7ec      	b.n	215c8 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   215ee:	4601      	mov	r1, r0
   215f0:	4620      	mov	r0, r4
   215f2:	f7ff fcdd 	bl	20fb0 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   215f6:	2800      	cmp	r0, #0
   215f8:	da0b      	bge.n	21612 <att_req_send_process+0x82>
	return list->head;
   215fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   215fe:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   21600:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   21604:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   21608:	2b00      	cmp	r3, #0
   2160a:	d1ee      	bne.n	215ea <att_req_send_process+0x5a>
	list->tail = node;
   2160c:	f8c8 5008 	str.w	r5, [r8, #8]
}
   21610:	e7eb      	b.n	215ea <att_req_send_process+0x5a>
}
   21612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021616 <bt_att_status>:
{
   21616:	b538      	push	{r3, r4, r5, lr}
   21618:	4605      	mov	r5, r0
   2161a:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2161c:	2100      	movs	r1, #0
   2161e:	f7ff fca9 	bl	20f74 <atomic_test_bit>
   21622:	b1b8      	cbz	r0, 21654 <bt_att_status+0x3e>
	if (!chan->att) {
   21624:	f855 0c04 	ldr.w	r0, [r5, #-4]
   21628:	b1a0      	cbz	r0, 21654 <bt_att_status+0x3e>
	if (chan->req) {
   2162a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2162c:	b993      	cbnz	r3, 21654 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   2162e:	3004      	adds	r0, #4
   21630:	f7ff fc7c 	bl	20f2c <sys_slist_get>
	if (!node) {
   21634:	4604      	mov	r4, r0
   21636:	b168      	cbz	r0, 21654 <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   21638:	4601      	mov	r1, r0
   2163a:	1f28      	subs	r0, r5, #4
   2163c:	f7ff fcb8 	bl	20fb0 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21640:	2800      	cmp	r0, #0
   21642:	da07      	bge.n	21654 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   21644:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   21648:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2164a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2164c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2164e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   21650:	b902      	cbnz	r2, 21654 <bt_att_status+0x3e>
	list->tail = node;
   21652:	609c      	str	r4, [r3, #8]
}
   21654:	bd38      	pop	{r3, r4, r5, pc}

00021656 <atomic_test_and_set_bit>:
{
   21656:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   21658:	2301      	movs	r3, #1
   2165a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2165e:	f3bf 8f5b 	dmb	ish
   21662:	e850 3f00 	ldrex	r3, [r0]
   21666:	ea43 0201 	orr.w	r2, r3, r1
   2166a:	e840 2400 	strex	r4, r2, [r0]
   2166e:	2c00      	cmp	r4, #0
   21670:	d1f7      	bne.n	21662 <atomic_test_and_set_bit+0xc>
   21672:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21676:	4219      	tst	r1, r3
}
   21678:	bf14      	ite	ne
   2167a:	2001      	movne	r0, #1
   2167c:	2000      	moveq	r0, #0
   2167e:	bd10      	pop	{r4, pc}

00021680 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   21680:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   21682:	6883      	ldr	r3, [r0, #8]
   21684:	699b      	ldr	r3, [r3, #24]
   21686:	b10b      	cbz	r3, 2168c <att_sent+0xc>
		chan->ops->sent(chan);
   21688:	3004      	adds	r0, #4
   2168a:	4718      	bx	r3
}
   2168c:	4770      	bx	lr

0002168e <att_unknown>:
{
   2168e:	b510      	push	{r4, lr}
   21690:	460c      	mov	r4, r1
	if (!err) {
   21692:	b90a      	cbnz	r2, 21698 <att_unknown+0xa>
		att_sent(conn, user_data);
   21694:	f7ff fff4 	bl	21680 <att_sent>
	tx_meta_data_free(user_data);
   21698:	4620      	mov	r0, r4
}
   2169a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2169e:	f7f3 beff 	b.w	154a0 <tx_meta_data_free>

000216a2 <att_tx_complete>:
{
   216a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   216a6:	4606      	mov	r6, r0
   216a8:	460d      	mov	r5, r1
	if (!err) {
   216aa:	4614      	mov	r4, r2
   216ac:	b122      	cbz	r2, 216b8 <att_tx_complete+0x16>
}
   216ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   216b2:	4608      	mov	r0, r1
   216b4:	f7f3 bef4 	b.w	154a0 <tx_meta_data_free>
		att_sent(conn, user_data);
   216b8:	f7ff ffe2 	bl	21680 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   216bc:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   216be:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   216c2:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   216c6:	4628      	mov	r0, r5
   216c8:	f7f3 feea 	bl	154a0 <tx_meta_data_free>
	if (!err && func) {
   216cc:	b92f      	cbnz	r7, 216da <att_tx_complete+0x38>
}
   216ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   216d2:	4649      	mov	r1, r9
   216d4:	4630      	mov	r0, r6
   216d6:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   216d8:	3401      	adds	r4, #1
   216da:	b2a3      	uxth	r3, r4
   216dc:	4543      	cmp	r3, r8
   216de:	d3f8      	bcc.n	216d2 <att_tx_complete+0x30>
   216e0:	e7f5      	b.n	216ce <att_tx_complete+0x2c>

000216e2 <att_req_sent>:
{
   216e2:	b510      	push	{r4, lr}
   216e4:	460c      	mov	r4, r1
	if (!err) {
   216e6:	b90a      	cbnz	r2, 216ec <att_req_sent+0xa>
		att_sent(conn, user_data);
   216e8:	f7ff ffca 	bl	21680 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   216ec:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   216ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   216f0:	b12b      	cbz	r3, 216fe <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   216f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   216f6:	2300      	movs	r3, #0
   216f8:	3058      	adds	r0, #88	; 0x58
   216fa:	f7fa f915 	bl	1b928 <k_work_reschedule>
	tx_meta_data_free(user_data);
   216fe:	4620      	mov	r0, r4
}
   21700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   21704:	f7f3 becc 	b.w	154a0 <tx_meta_data_free>

00021708 <att_cfm_sent>:
{
   21708:	b510      	push	{r4, lr}
   2170a:	460c      	mov	r4, r1
	if (!err) {
   2170c:	b90a      	cbnz	r2, 21712 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2170e:	f7ff ffb7 	bl	21680 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   21712:	6820      	ldr	r0, [r4, #0]
   21714:	2101      	movs	r1, #1
   21716:	3034      	adds	r0, #52	; 0x34
   21718:	f7ff fea5 	bl	21466 <atomic_clear_bit>
	tx_meta_data_free(data);
   2171c:	4620      	mov	r0, r4
}
   2171e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   21722:	f7f3 bebd 	b.w	154a0 <tx_meta_data_free>

00021726 <att_rsp_sent>:
{
   21726:	b510      	push	{r4, lr}
   21728:	460c      	mov	r4, r1
	if (!err) {
   2172a:	b90a      	cbnz	r2, 21730 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2172c:	f7ff ffa8 	bl	21680 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   21730:	6820      	ldr	r0, [r4, #0]
   21732:	2100      	movs	r1, #0
   21734:	3034      	adds	r0, #52	; 0x34
   21736:	f7ff fe96 	bl	21466 <atomic_clear_bit>
	tx_meta_data_free(data);
   2173a:	4620      	mov	r0, r4
}
   2173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   21740:	f7f3 beae 	b.w	154a0 <tx_meta_data_free>

00021744 <att_indicate>:
{
   21744:	b570      	push	{r4, r5, r6, lr}
   21746:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   21748:	f101 000c 	add.w	r0, r1, #12
   2174c:	460d      	mov	r5, r1
   2174e:	f002 f823 	bl	23798 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   21752:	6826      	ldr	r6, [r4, #0]
   21754:	8a2b      	ldrh	r3, [r5, #16]
   21756:	68ea      	ldr	r2, [r5, #12]
   21758:	4601      	mov	r1, r0
   2175a:	6830      	ldr	r0, [r6, #0]
   2175c:	f000 fffc 	bl	22758 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   21760:	211e      	movs	r1, #30
   21762:	2200      	movs	r2, #0
   21764:	4620      	mov	r0, r4
   21766:	f7f4 f81f 	bl	157a8 <bt_att_chan_create_pdu>
	if (!buf) {
   2176a:	4601      	mov	r1, r0
   2176c:	b110      	cbz	r0, 21774 <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   2176e:	4620      	mov	r0, r4
   21770:	f7ff fc4f 	bl	21012 <bt_att_chan_send_rsp>
}
   21774:	2000      	movs	r0, #0
   21776:	bd70      	pop	{r4, r5, r6, pc}

00021778 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2177c:	4688      	mov	r8, r1
   2177e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21780:	2101      	movs	r1, #1
   21782:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21784:	4605      	mov	r5, r0
   21786:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21788:	f7f4 f80e 	bl	157a8 <bt_att_chan_create_pdu>
	if (!buf) {
   2178c:	4604      	mov	r4, r0
   2178e:	b170      	cbz	r0, 217ae <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   21790:	2104      	movs	r1, #4
   21792:	300c      	adds	r0, #12
   21794:	f001 ffbf 	bl	23716 <net_buf_simple_add>
	rsp->request = req;
   21798:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2179c:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   217a0:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   217a2:	4621      	mov	r1, r4
   217a4:	4628      	mov	r0, r5
}
   217a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   217aa:	f7ff bc32 	b.w	21012 <bt_att_chan_send_rsp>
}
   217ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000217b2 <att_write_req>:
{
   217b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   217b4:	460c      	mov	r4, r1
   217b6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   217b8:	f101 000c 	add.w	r0, r1, #12
   217bc:	f001 ffec 	bl	23798 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   217c0:	8a22      	ldrh	r2, [r4, #16]
   217c2:	9201      	str	r2, [sp, #4]
   217c4:	68e2      	ldr	r2, [r4, #12]
   217c6:	9200      	str	r2, [sp, #0]
   217c8:	4603      	mov	r3, r0
   217ca:	2213      	movs	r2, #19
   217cc:	2112      	movs	r1, #18
   217ce:	4628      	mov	r0, r5
   217d0:	f7f4 f892 	bl	158f8 <att_write_rsp.constprop.0>
}
   217d4:	b003      	add	sp, #12
   217d6:	bd30      	pop	{r4, r5, pc}

000217d8 <att_write_cmd>:
{
   217d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   217da:	460c      	mov	r4, r1
   217dc:	4605      	mov	r5, r0
   217de:	f101 000c 	add.w	r0, r1, #12
   217e2:	f001 ffd9 	bl	23798 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   217e6:	8a22      	ldrh	r2, [r4, #16]
   217e8:	9201      	str	r2, [sp, #4]
   217ea:	68e2      	ldr	r2, [r4, #12]
   217ec:	9200      	str	r2, [sp, #0]
   217ee:	2200      	movs	r2, #0
   217f0:	4603      	mov	r3, r0
   217f2:	4611      	mov	r1, r2
   217f4:	4628      	mov	r0, r5
   217f6:	f7f4 f87f 	bl	158f8 <att_write_rsp.constprop.0>
}
   217fa:	b003      	add	sp, #12
   217fc:	bd30      	pop	{r4, r5, pc}

000217fe <bt_att_create_pdu>:
{
   217fe:	b538      	push	{r3, r4, r5, lr}
   21800:	460d      	mov	r5, r1
   21802:	4614      	mov	r4, r2
	att = att_get(conn);
   21804:	f7ff fbbf 	bl	20f86 <att_get>
	if (!att) {
   21808:	b158      	cbz	r0, 21822 <bt_att_create_pdu+0x24>
	return list->head;
   2180a:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2180c:	b14b      	cbz	r3, 21822 <bt_att_create_pdu+0x24>
   2180e:	4618      	mov	r0, r3
	return node->next;
   21810:	f850 3988 	ldr.w	r3, [r0], #-136
   21814:	b103      	cbz	r3, 21818 <bt_att_create_pdu+0x1a>
   21816:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   21818:	1c62      	adds	r2, r4, #1
   2181a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2181c:	428a      	cmp	r2, r1
   2181e:	d90c      	bls.n	2183a <bt_att_create_pdu+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21820:	b90b      	cbnz	r3, 21826 <bt_att_create_pdu+0x28>
}
   21822:	2000      	movs	r0, #0
   21824:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21826:	4618      	mov	r0, r3
   21828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   2182c:	2b00      	cmp	r3, #0
   2182e:	d0f4      	beq.n	2181a <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   21830:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   21832:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21834:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   21838:	d8f5      	bhi.n	21826 <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   2183a:	4622      	mov	r2, r4
   2183c:	4629      	mov	r1, r5
}
   2183e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   21842:	f7f3 bfb1 	b.w	157a8 <bt_att_chan_create_pdu>

00021846 <att_read_blob_req>:
{
   21846:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21848:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2184a:	8813      	ldrh	r3, [r2, #0]
   2184c:	8852      	ldrh	r2, [r2, #2]
   2184e:	9200      	str	r2, [sp, #0]
   21850:	210c      	movs	r1, #12
   21852:	220d      	movs	r2, #13
   21854:	f7f4 f9da 	bl	15c0c <att_read_rsp>
}
   21858:	b003      	add	sp, #12
   2185a:	f85d fb04 	ldr.w	pc, [sp], #4

0002185e <att_read_req>:
{
   2185e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21860:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21862:	2200      	movs	r2, #0
   21864:	881b      	ldrh	r3, [r3, #0]
   21866:	9200      	str	r2, [sp, #0]
   21868:	210a      	movs	r1, #10
   2186a:	220b      	movs	r2, #11
   2186c:	f7f4 f9ce 	bl	15c0c <att_read_rsp>
}
   21870:	b003      	add	sp, #12
   21872:	f85d fb04 	ldr.w	pc, [sp], #4

00021876 <att_mtu_req>:
{
   21876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2187a:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2187c:	f850 2b34 	ldr.w	r2, [r0], #52
{
   21880:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21882:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   21884:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21886:	f7ff fb75 	bl	20f74 <atomic_test_bit>
   2188a:	4604      	mov	r4, r0
   2188c:	bb60      	cbnz	r0, 218e8 <att_mtu_req+0x72>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2188e:	68db      	ldr	r3, [r3, #12]
   21890:	881f      	ldrh	r7, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   21892:	2f16      	cmp	r7, #22
   21894:	d92a      	bls.n	218ec <att_mtu_req+0x76>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   21896:	2202      	movs	r2, #2
   21898:	4630      	mov	r0, r6
   2189a:	f7ff ffb0 	bl	217fe <bt_att_create_pdu>
	if (!pdu) {
   2189e:	4680      	mov	r8, r0
   218a0:	b330      	cbz	r0, 218f0 <att_mtu_req+0x7a>
	return net_buf_simple_add(&buf->b, len);
   218a2:	2102      	movs	r1, #2
   218a4:	300c      	adds	r0, #12
   218a6:	f001 ff36 	bl	23716 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   218aa:	2341      	movs	r3, #65	; 0x41
   218ac:	7003      	strb	r3, [r0, #0]
   218ae:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   218b0:	4641      	mov	r1, r8
   218b2:	4628      	mov	r0, r5
   218b4:	f7ff fbad 	bl	21012 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   218b8:	2f41      	cmp	r7, #65	; 0x41
   218ba:	bf28      	it	cs
   218bc:	2741      	movcs	r7, #65	; 0x41
   218be:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   218c0:	856f      	strh	r7, [r5, #42]	; 0x2a
   218c2:	3604      	adds	r6, #4
   218c4:	f3bf 8f5b 	dmb	ish
   218c8:	e856 3f00 	ldrex	r3, [r6]
   218cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   218d0:	e846 3200 	strex	r2, r3, [r6]
   218d4:	2a00      	cmp	r2, #0
   218d6:	d1f7      	bne.n	218c8 <att_mtu_req+0x52>
   218d8:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   218dc:	4628      	mov	r0, r5
   218de:	f7ff fba6 	bl	2102e <att_chan_mtu_updated>
	return 0;
   218e2:	4620      	mov	r0, r4
}
   218e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   218e8:	2006      	movs	r0, #6
   218ea:	e7fb      	b.n	218e4 <att_mtu_req+0x6e>
		return BT_ATT_ERR_INVALID_PDU;
   218ec:	2004      	movs	r0, #4
   218ee:	e7f9      	b.n	218e4 <att_mtu_req+0x6e>
		return BT_ATT_ERR_UNLIKELY;
   218f0:	200e      	movs	r0, #14
   218f2:	e7f7      	b.n	218e4 <att_mtu_req+0x6e>

000218f4 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   218f4:	8a0a      	ldrh	r2, [r1, #16]
   218f6:	68c9      	ldr	r1, [r1, #12]
   218f8:	2300      	movs	r3, #0
   218fa:	f7f4 bb33 	b.w	15f64 <att_handle_rsp>

000218fe <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   218fe:	f7ff bff9 	b.w	218f4 <att_handle_find_info_rsp>

00021902 <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   21902:	f7ff bff7 	b.w	218f4 <att_handle_find_info_rsp>

00021906 <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   21906:	f7ff bff5 	b.w	218f4 <att_handle_find_info_rsp>

0002190a <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   2190a:	f7ff bff3 	b.w	218f4 <att_handle_find_info_rsp>

0002190e <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   2190e:	f7ff bff1 	b.w	218f4 <att_handle_find_info_rsp>

00021912 <att_handle_read_mult_vl_rsp>:
static uint8_t att_handle_read_mult_vl_rsp(struct bt_att_chan *chan,
   21912:	f7ff bfef 	b.w	218f4 <att_handle_find_info_rsp>

00021916 <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   21916:	f7ff bfed 	b.w	218f4 <att_handle_find_info_rsp>

0002191a <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   2191a:	f7ff bfeb 	b.w	218f4 <att_handle_find_info_rsp>

0002191e <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   2191e:	f7ff bfe9 	b.w	218f4 <att_handle_find_info_rsp>

00021922 <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   21922:	f7ff bfe7 	b.w	218f4 <att_handle_find_info_rsp>

00021926 <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   21926:	f7ff bfe5 	b.w	218f4 <att_handle_find_info_rsp>

0002192a <att_mtu_rsp>:
{
   2192a:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2192c:	68ce      	ldr	r6, [r1, #12]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2192e:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   21930:	2b16      	cmp	r3, #22
{
   21932:	4604      	mov	r4, r0
   21934:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   21936:	d806      	bhi.n	21946 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   21938:	2200      	movs	r2, #0
   2193a:	2304      	movs	r3, #4
   2193c:	4611      	mov	r1, r2
}
   2193e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   21942:	f7f4 bb0f 	b.w	15f64 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   21946:	2b41      	cmp	r3, #65	; 0x41
   21948:	bf28      	it	cs
   2194a:	2341      	movcs	r3, #65	; 0x41
   2194c:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2194e:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   21950:	f7ff fb6d 	bl	2102e <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   21954:	8a2a      	ldrh	r2, [r5, #16]
   21956:	2300      	movs	r3, #0
   21958:	4631      	mov	r1, r6
   2195a:	4620      	mov	r0, r4
   2195c:	e7ef      	b.n	2193e <att_mtu_rsp+0x14>

0002195e <bt_att_encrypt_change>:
{
   2195e:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   21960:	4606      	mov	r6, r0
	if (!att_chan->att) {
   21962:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   21966:	f856 5904 	ldr.w	r5, [r6], #-4
{
   2196a:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2196c:	2b00      	cmp	r3, #0
   2196e:	d036      	beq.n	219de <bt_att_encrypt_change+0x80>
	if (hci_status) {
   21970:	b139      	cbz	r1, 21982 <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   21972:	6b43      	ldr	r3, [r0, #52]	; 0x34
   21974:	2b00      	cmp	r3, #0
   21976:	d032      	beq.n	219de <bt_att_encrypt_change+0x80>
   21978:	7c1b      	ldrb	r3, [r3, #16]
   2197a:	07da      	lsls	r2, r3, #31
   2197c:	d52f      	bpl.n	219de <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2197e:	2305      	movs	r3, #5
   21980:	e020      	b.n	219c4 <bt_att_encrypt_change+0x66>
	bt_gatt_encrypt_change(conn);
   21982:	4628      	mov	r0, r5
   21984:	f7f5 fc2a 	bl	171dc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   21988:	7a6b      	ldrb	r3, [r5, #9]
   2198a:	2b01      	cmp	r3, #1
   2198c:	d027      	beq.n	219de <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2198e:	6b65      	ldr	r5, [r4, #52]	; 0x34
   21990:	b32d      	cbz	r5, 219de <bt_att_encrypt_change+0x80>
   21992:	7c2b      	ldrb	r3, [r5, #16]
   21994:	07db      	lsls	r3, r3, #31
   21996:	d522      	bpl.n	219de <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   21998:	68eb      	ldr	r3, [r5, #12]
   2199a:	2b00      	cmp	r3, #0
   2199c:	d0ef      	beq.n	2197e <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2199e:	696a      	ldr	r2, [r5, #20]
   219a0:	7c69      	ldrb	r1, [r5, #17]
   219a2:	4630      	mov	r0, r6
   219a4:	f7f3 ff00 	bl	157a8 <bt_att_chan_create_pdu>
	if (!buf) {
   219a8:	4604      	mov	r4, r0
   219aa:	b150      	cbz	r0, 219c2 <bt_att_encrypt_change+0x64>
	if (req->encode(buf, req->len, req->user_data)) {
   219ac:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   219b0:	68eb      	ldr	r3, [r5, #12]
   219b2:	4798      	blx	r3
   219b4:	b168      	cbz	r0, 219d2 <bt_att_encrypt_change+0x74>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   219b6:	69a0      	ldr	r0, [r4, #24]
   219b8:	f7f3 fd72 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(buf);
   219bc:	4620      	mov	r0, r4
   219be:	f7f6 fe51 	bl	18664 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   219c2:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   219c4:	2200      	movs	r2, #0
   219c6:	4630      	mov	r0, r6
   219c8:	4611      	mov	r1, r2
}
   219ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   219ce:	f7f4 bac9 	b.w	15f64 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   219d2:	4621      	mov	r1, r4
   219d4:	4630      	mov	r0, r6
   219d6:	f7f3 fd71 	bl	154bc <chan_send>
   219da:	2800      	cmp	r0, #0
   219dc:	d1eb      	bne.n	219b6 <bt_att_encrypt_change+0x58>
}
   219de:	bd70      	pop	{r4, r5, r6, pc}

000219e0 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   219e0:	3854      	subs	r0, #84	; 0x54
   219e2:	f7f4 bb27 	b.w	16034 <bt_att_disconnected>

000219e6 <bt_att_send>:
{
   219e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   219e8:	460d      	mov	r5, r1
	att = att_get(conn);
   219ea:	f7ff facc 	bl	20f86 <att_get>
	if (!att) {
   219ee:	4604      	mov	r4, r0
   219f0:	b940      	cbnz	r0, 21a04 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   219f2:	69a8      	ldr	r0, [r5, #24]
   219f4:	f7f3 fd54 	bl	154a0 <tx_meta_data_free>
		net_buf_unref(buf);
   219f8:	4628      	mov	r0, r5
   219fa:	f7f6 fe33 	bl	18664 <net_buf_unref>
		return -ENOTCONN;
   219fe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   21a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   21a04:	f100 060c 	add.w	r6, r0, #12
   21a08:	4629      	mov	r1, r5
   21a0a:	4630      	mov	r0, r6
   21a0c:	f001 fe51 	bl	236b2 <net_buf_put>
	return list->head;
   21a10:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21a12:	b14d      	cbz	r5, 21a28 <bt_att_send+0x42>
	return node->next;
   21a14:	f855 4988 	ldr.w	r4, [r5], #-136
   21a18:	b104      	cbz	r4, 21a1c <bt_att_send+0x36>
   21a1a:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   21a1c:	4631      	mov	r1, r6
   21a1e:	4628      	mov	r0, r5
   21a20:	f7ff fc64 	bl	212ec <process_queue>
		if (!err) {
   21a24:	4603      	mov	r3, r0
   21a26:	b980      	cbnz	r0, 21a4a <bt_att_send+0x64>
	return 0;
   21a28:	2000      	movs	r0, #0
   21a2a:	e7ea      	b.n	21a02 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   21a2c:	2103      	movs	r1, #3
   21a2e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   21a32:	f7ff fa9f 	bl	20f74 <atomic_test_bit>
   21a36:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   21a38:	f105 0034 	add.w	r0, r5, #52	; 0x34
   21a3c:	f7ff fa9a 	bl	20f74 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   21a40:	4287      	cmp	r7, r0
   21a42:	f06f 0301 	mvn.w	r3, #1
   21a46:	d107      	bne.n	21a58 <bt_att_send+0x72>
   21a48:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21a4a:	2c00      	cmp	r4, #0
   21a4c:	d0ec      	beq.n	21a28 <bt_att_send+0x42>
   21a4e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   21a52:	b922      	cbnz	r2, 21a5e <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   21a54:	3302      	adds	r3, #2
   21a56:	d0e9      	beq.n	21a2c <bt_att_send+0x46>
{
   21a58:	4625      	mov	r5, r4
   21a5a:	4614      	mov	r4, r2
   21a5c:	e7de      	b.n	21a1c <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21a5e:	3a88      	subs	r2, #136	; 0x88
   21a60:	e7f8      	b.n	21a54 <bt_att_send+0x6e>

00021a62 <bt_att_req_send>:
{
   21a62:	b510      	push	{r4, lr}
   21a64:	460c      	mov	r4, r1
	att = att_get(conn);
   21a66:	f7ff fa8e 	bl	20f86 <att_get>
	if (!att) {
   21a6a:	b160      	cbz	r0, 21a86 <bt_att_req_send+0x24>
	parent->next = child;
   21a6c:	2300      	movs	r3, #0
   21a6e:	6023      	str	r3, [r4, #0]
	return list->tail;
   21a70:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   21a72:	b92b      	cbnz	r3, 21a80 <bt_att_req_send+0x1e>
	list->head = node;
   21a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   21a78:	f7ff fd8a 	bl	21590 <att_req_send_process>
	return 0;
   21a7c:	2000      	movs	r0, #0
}
   21a7e:	bd10      	pop	{r4, pc}
	parent->next = child;
   21a80:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21a82:	6084      	str	r4, [r0, #8]
}
   21a84:	e7f8      	b.n	21a78 <bt_att_req_send+0x16>
		return -ENOTCONN;
   21a86:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21a8a:	e7f8      	b.n	21a7e <bt_att_req_send+0x1c>

00021a8c <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   21a8c:	b510      	push	{r4, lr}
   21a8e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   21a90:	f7ff fa79 	bl	20f86 <att_get>
	if (!att) {
   21a94:	b198      	cbz	r0, 21abe <bt_att_find_req_by_user_data+0x32>
	return list->head;
   21a96:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21a98:	b14b      	cbz	r3, 21aae <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   21a9a:	f853 2c50 	ldr.w	r2, [r3, #-80]
   21a9e:	6991      	ldr	r1, [r2, #24]
   21aa0:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21aa2:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (chan->req->user_data == user_data) {
   21aa6:	d009      	beq.n	21abc <bt_att_find_req_by_user_data+0x30>
	return node->next;
   21aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   21aac:	e7f4      	b.n	21a98 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   21aae:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   21ab0:	b128      	cbz	r0, 21abe <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   21ab2:	6983      	ldr	r3, [r0, #24]
   21ab4:	42a3      	cmp	r3, r4
   21ab6:	d002      	beq.n	21abe <bt_att_find_req_by_user_data+0x32>
	return node->next;
   21ab8:	6800      	ldr	r0, [r0, #0]
   21aba:	e7f9      	b.n	21ab0 <bt_att_find_req_by_user_data+0x24>
		if (chan->req->user_data == user_data) {
   21abc:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   21abe:	bd10      	pop	{r4, pc}

00021ac0 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   21ac0:	2001      	movs	r0, #1
   21ac2:	4770      	bx	lr

00021ac4 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   21ac4:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   21ac6:	f7ff fa5e 	bl	20f86 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   21aca:	b150      	cbz	r0, 21ae2 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   21acc:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21ace:	b144      	cbz	r4, 21ae2 <bt_att_clear_out_of_sync_sent+0x1e>
   21ad0:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   21ad2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   21ad6:	2105      	movs	r1, #5
   21ad8:	f7ff fcc5 	bl	21466 <atomic_clear_bit>
	return node->next;
   21adc:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   21ae0:	e7f5      	b.n	21ace <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   21ae2:	bd10      	pop	{r4, pc}

00021ae4 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   21ae4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21ae6:	2104      	movs	r1, #4
   21ae8:	f7ff f9fa 	bl	20ee0 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   21aec:	b128      	cbz	r0, 21afa <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   21aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   21af2:	2105      	movs	r1, #5
   21af4:	3030      	adds	r0, #48	; 0x30
   21af6:	f7ff ba3d 	b.w	20f74 <atomic_test_bit>
}
   21afa:	bd08      	pop	{r3, pc}

00021afc <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   21afc:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   21afe:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   21b02:	2201      	movs	r2, #1
   21b04:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   21b06:	7403      	strb	r3, [r0, #16]
}
   21b08:	4770      	bx	lr

00021b0a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   21b0a:	6010      	str	r0, [r2, #0]
}
   21b0c:	2000      	movs	r0, #0
   21b0e:	4770      	bx	lr

00021b10 <gatt_ccc_changed>:
{
   21b10:	460b      	mov	r3, r1
   21b12:	8909      	ldrh	r1, [r1, #8]
   21b14:	8a5a      	ldrh	r2, [r3, #18]
   21b16:	4291      	cmp	r1, r2
   21b18:	bf38      	it	cc
   21b1a:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   21b1c:	8a9a      	ldrh	r2, [r3, #20]
   21b1e:	428a      	cmp	r2, r1
   21b20:	d003      	beq.n	21b2a <gatt_ccc_changed+0x1a>
		ccc->value = value;
   21b22:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   21b24:	699b      	ldr	r3, [r3, #24]
   21b26:	b103      	cbz	r3, 21b2a <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   21b28:	4718      	bx	r3
}
   21b2a:	4770      	bx	lr

00021b2c <gatt_indicate_rsp>:
{
   21b2c:	b510      	push	{r4, lr}
   21b2e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   21b30:	68a3      	ldr	r3, [r4, #8]
{
   21b32:	460a      	mov	r2, r1
	if (params->func) {
   21b34:	b10b      	cbz	r3, 21b3a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21b36:	4621      	mov	r1, r4
   21b38:	4798      	blx	r3
	params->_ref--;
   21b3a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21b3c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21b3e:	3b01      	subs	r3, #1
   21b40:	b2db      	uxtb	r3, r3
   21b42:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21b44:	b122      	cbz	r2, 21b50 <gatt_indicate_rsp+0x24>
   21b46:	b91b      	cbnz	r3, 21b50 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21b48:	4620      	mov	r0, r4
}
   21b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21b4e:	4710      	bx	r2
}
   21b50:	bd10      	pop	{r4, pc}

00021b52 <match_uuid>:
	data->attr = attr;
   21b52:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   21b54:	8091      	strh	r1, [r2, #4]
}
   21b56:	2000      	movs	r0, #0
   21b58:	4770      	bx	lr

00021b5a <gen_hash_m>:
{
   21b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21b5c:	6807      	ldr	r7, [r0, #0]
   21b5e:	783d      	ldrb	r5, [r7, #0]
{
   21b60:	b089      	sub	sp, #36	; 0x24
   21b62:	4606      	mov	r6, r0
   21b64:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21b66:	b9dd      	cbnz	r5, 21ba0 <gen_hash_m+0x46>
	switch (u16->val) {
   21b68:	887b      	ldrh	r3, [r7, #2]
   21b6a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21b6e:	d004      	beq.n	21b7a <gen_hash_m+0x20>
   21b70:	d810      	bhi.n	21b94 <gen_hash_m+0x3a>
   21b72:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   21b76:	2b03      	cmp	r3, #3
   21b78:	d812      	bhi.n	21ba0 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   21b7a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21b7e:	2202      	movs	r2, #2
   21b80:	f10d 010a 	add.w	r1, sp, #10
   21b84:	4620      	mov	r0, r4
   21b86:	f7fe f8c3 	bl	1fd10 <tc_cmac_update>
   21b8a:	b968      	cbnz	r0, 21ba8 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   21b8c:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   21b90:	65a2      	str	r2, [r4, #88]	; 0x58
   21b92:	e006      	b.n	21ba2 <gen_hash_m+0x48>
	switch (u16->val) {
   21b94:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21b98:	33ff      	adds	r3, #255	; 0xff
   21b9a:	b29b      	uxth	r3, r3
   21b9c:	2b04      	cmp	r3, #4
   21b9e:	d91e      	bls.n	21bde <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   21ba0:	2501      	movs	r5, #1
}
   21ba2:	4628      	mov	r0, r5
   21ba4:	b009      	add	sp, #36	; 0x24
   21ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   21ba8:	887b      	ldrh	r3, [r7, #2]
   21baa:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21bae:	2202      	movs	r2, #2
   21bb0:	f10d 010a 	add.w	r1, sp, #10
   21bb4:	4620      	mov	r0, r4
   21bb6:	f7fe f8ab 	bl	1fd10 <tc_cmac_update>
   21bba:	2800      	cmp	r0, #0
   21bbc:	d0e6      	beq.n	21b8c <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21bbe:	2000      	movs	r0, #0
   21bc0:	9000      	str	r0, [sp, #0]
   21bc2:	aa03      	add	r2, sp, #12
   21bc4:	6877      	ldr	r7, [r6, #4]
   21bc6:	2313      	movs	r3, #19
   21bc8:	4631      	mov	r1, r6
   21bca:	47b8      	blx	r7
		if (len < 0) {
   21bcc:	1e02      	subs	r2, r0, #0
   21bce:	dbdf      	blt.n	21b90 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   21bd0:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21bd2:	4620      	mov	r0, r4
   21bd4:	f7fe f89c 	bl	1fd10 <tc_cmac_update>
   21bd8:	2800      	cmp	r0, #0
   21bda:	d1e1      	bne.n	21ba0 <gen_hash_m+0x46>
   21bdc:	e7d6      	b.n	21b8c <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   21bde:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21be2:	2202      	movs	r2, #2
   21be4:	f10d 010a 	add.w	r1, sp, #10
   21be8:	4620      	mov	r0, r4
   21bea:	f7fe f891 	bl	1fd10 <tc_cmac_update>
   21bee:	2800      	cmp	r0, #0
   21bf0:	d0cc      	beq.n	21b8c <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   21bf2:	887b      	ldrh	r3, [r7, #2]
   21bf4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21bf8:	2202      	movs	r2, #2
   21bfa:	f10d 010a 	add.w	r1, sp, #10
   21bfe:	e7e8      	b.n	21bd2 <gen_hash_m+0x78>

00021c00 <bt_addr_le_eq>:
{
   21c00:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   21c02:	2207      	movs	r2, #7
   21c04:	f7fe f952 	bl	1feac <memcmp>
}
   21c08:	fab0 f080 	clz	r0, r0
   21c0c:	0940      	lsrs	r0, r0, #5
   21c0e:	bd08      	pop	{r3, pc}

00021c10 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21c10:	f3bf 8f5b 	dmb	ish
   21c14:	6800      	ldr	r0, [r0, #0]
   21c16:	f3bf 8f5b 	dmb	ish
}
   21c1a:	4770      	bx	lr

00021c1c <atomic_or>:
{
   21c1c:	b510      	push	{r4, lr}
   21c1e:	4603      	mov	r3, r0
}
   21c20:	f3bf 8f5b 	dmb	ish
   21c24:	e853 0f00 	ldrex	r0, [r3]
   21c28:	ea40 0201 	orr.w	r2, r0, r1
   21c2c:	e843 2400 	strex	r4, r2, [r3]
   21c30:	2c00      	cmp	r4, #0
   21c32:	d1f7      	bne.n	21c24 <atomic_or+0x8>
   21c34:	f3bf 8f5b 	dmb	ish
   21c38:	bd10      	pop	{r4, pc}

00021c3a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   21c3a:	2207      	movs	r2, #7
   21c3c:	f7fe b95d 	b.w	1fefa <memcpy>

00021c40 <atomic_and>:
{
   21c40:	b510      	push	{r4, lr}
   21c42:	4603      	mov	r3, r0
}
   21c44:	f3bf 8f5b 	dmb	ish
   21c48:	e853 0f00 	ldrex	r0, [r3]
   21c4c:	ea00 0201 	and.w	r2, r0, r1
   21c50:	e843 2400 	strex	r4, r2, [r3]
   21c54:	2c00      	cmp	r4, #0
   21c56:	d1f7      	bne.n	21c48 <atomic_and+0x8>
   21c58:	f3bf 8f5b 	dmb	ish
   21c5c:	bd10      	pop	{r4, pc}

00021c5e <gatt_write_ccc_rsp>:
{
   21c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c62:	9c06      	ldr	r4, [sp, #24]
   21c64:	460e      	mov	r6, r1
   21c66:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21c68:	f06f 0104 	mvn.w	r1, #4
   21c6c:	f104 0014 	add.w	r0, r4, #20
   21c70:	f7ff ffe6 	bl	21c40 <atomic_and>
	if (err) {
   21c74:	b1fe      	cbz	r6, 21cb6 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   21c76:	4628      	mov	r0, r5
   21c78:	f7f4 fae4 	bl	16244 <gatt_sub_find>
		if (!sub) {
   21c7c:	4601      	mov	r1, r0
   21c7e:	b358      	cbz	r0, 21cd8 <gatt_write_ccc_rsp+0x7a>
	return list->head;
   21c80:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   21c82:	b14b      	cbz	r3, 21c98 <gatt_write_ccc_rsp+0x3a>
	return node->next;
   21c84:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   21c86:	f104 0718 	add.w	r7, r4, #24
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   21c8a:	b12b      	cbz	r3, 21c98 <gatt_write_ccc_rsp+0x3a>
			if (node == &params->node) {
   21c8c:	42bb      	cmp	r3, r7
   21c8e:	d10b      	bne.n	21ca8 <gatt_write_ccc_rsp+0x4a>
				gatt_sub_remove(conn, sub, tmp, params);
   21c90:	4623      	mov	r3, r4
   21c92:	4628      	mov	r0, r5
   21c94:	f7f4 fb04 	bl	162a0 <gatt_sub_remove>
	if (params->subscribe) {
   21c98:	6863      	ldr	r3, [r4, #4]
   21c9a:	b1b3      	cbz	r3, 21cca <gatt_write_ccc_rsp+0x6c>
		params->subscribe(conn, err, params);
   21c9c:	4622      	mov	r2, r4
   21c9e:	4631      	mov	r1, r6
   21ca0:	4628      	mov	r0, r5
}
   21ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   21ca6:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   21ca8:	b11a      	cbz	r2, 21cb2 <gatt_write_ccc_rsp+0x54>
	return node->next;
   21caa:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   21cac:	4613      	mov	r3, r2
   21cae:	4602      	mov	r2, r0
   21cb0:	e7eb      	b.n	21c8a <gatt_write_ccc_rsp+0x2c>
   21cb2:	4610      	mov	r0, r2
   21cb4:	e7fa      	b.n	21cac <gatt_write_ccc_rsp+0x4e>
	} else if (!params->value) {
   21cb6:	8a23      	ldrh	r3, [r4, #16]
   21cb8:	2b00      	cmp	r3, #0
   21cba:	d1ed      	bne.n	21c98 <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
   21cbc:	6827      	ldr	r7, [r4, #0]
   21cbe:	4633      	mov	r3, r6
   21cc0:	4632      	mov	r2, r6
   21cc2:	4621      	mov	r1, r4
   21cc4:	4628      	mov	r0, r5
   21cc6:	47b8      	blx	r7
   21cc8:	e7e6      	b.n	21c98 <gatt_write_ccc_rsp+0x3a>
	} else if (params->write) {
   21cca:	68a4      	ldr	r4, [r4, #8]
   21ccc:	b124      	cbz	r4, 21cd8 <gatt_write_ccc_rsp+0x7a>
		params->write(conn, err, NULL);
   21cce:	461a      	mov	r2, r3
   21cd0:	4631      	mov	r1, r6
   21cd2:	4628      	mov	r0, r5
   21cd4:	4623      	mov	r3, r4
   21cd6:	e7e4      	b.n	21ca2 <gatt_write_ccc_rsp+0x44>
}
   21cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021cdc <read_included_uuid_encode>:
{
   21cdc:	b510      	push	{r4, lr}
   21cde:	2102      	movs	r1, #2
   21ce0:	300c      	adds	r0, #12
   21ce2:	4614      	mov	r4, r2
   21ce4:	f001 fd17 	bl	23716 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   21ce8:	8963      	ldrh	r3, [r4, #10]
   21cea:	8003      	strh	r3, [r0, #0]
}
   21cec:	2000      	movs	r0, #0
   21cee:	bd10      	pop	{r4, pc}

00021cf0 <gatt_find_info_encode>:
{
   21cf0:	b510      	push	{r4, lr}
   21cf2:	2104      	movs	r1, #4
   21cf4:	300c      	adds	r0, #12
   21cf6:	4614      	mov	r4, r2
   21cf8:	f001 fd0d 	bl	23716 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   21cfc:	8923      	ldrh	r3, [r4, #8]
   21cfe:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   21d00:	89e3      	ldrh	r3, [r4, #14]
   21d02:	8043      	strh	r3, [r0, #2]
}
   21d04:	2000      	movs	r0, #0
   21d06:	bd10      	pop	{r4, pc}

00021d08 <gatt_read_group_encode>:
{
   21d08:	b538      	push	{r3, r4, r5, lr}
   21d0a:	f100 040c 	add.w	r4, r0, #12
   21d0e:	2104      	movs	r1, #4
   21d10:	4620      	mov	r0, r4
   21d12:	4615      	mov	r5, r2
   21d14:	f001 fcff 	bl	23716 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   21d18:	892b      	ldrh	r3, [r5, #8]
   21d1a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   21d1c:	89eb      	ldrh	r3, [r5, #14]
   21d1e:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   21d20:	7c2b      	ldrb	r3, [r5, #16]
   21d22:	b933      	cbnz	r3, 21d32 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   21d24:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   21d28:	4620      	mov	r0, r4
   21d2a:	f001 fd0b 	bl	23744 <net_buf_simple_add_le16>
}
   21d2e:	2000      	movs	r0, #0
   21d30:	bd38      	pop	{r3, r4, r5, pc}
   21d32:	f642 0101 	movw	r1, #10241	; 0x2801
   21d36:	e7f7      	b.n	21d28 <gatt_read_group_encode+0x20>

00021d38 <gatt_read_type_encode>:
{
   21d38:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   21d3a:	f100 040c 	add.w	r4, r0, #12
   21d3e:	2104      	movs	r1, #4
   21d40:	4620      	mov	r0, r4
   21d42:	4615      	mov	r5, r2
   21d44:	f001 fce7 	bl	23716 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   21d48:	892b      	ldrh	r3, [r5, #8]
   21d4a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   21d4c:	89eb      	ldrh	r3, [r5, #14]
   21d4e:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   21d50:	7c2b      	ldrb	r3, [r5, #16]
   21d52:	2b02      	cmp	r3, #2
   21d54:	d004      	beq.n	21d60 <gatt_read_type_encode+0x28>
   21d56:	2b03      	cmp	r3, #3
   21d58:	d009      	beq.n	21d6e <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   21d5a:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   21d5c:	8859      	ldrh	r1, [r3, #2]
   21d5e:	e001      	b.n	21d64 <gatt_read_type_encode+0x2c>
   21d60:	f642 0102 	movw	r1, #10242	; 0x2802
   21d64:	4620      	mov	r0, r4
   21d66:	f001 fced 	bl	23744 <net_buf_simple_add_le16>
}
   21d6a:	2000      	movs	r0, #0
   21d6c:	bd38      	pop	{r3, r4, r5, pc}
   21d6e:	f642 0103 	movw	r1, #10243	; 0x2803
   21d72:	e7f7      	b.n	21d64 <gatt_read_type_encode+0x2c>

00021d74 <gatt_find_type_encode>:
{
   21d74:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   21d76:	f100 050c 	add.w	r5, r0, #12
   21d7a:	2106      	movs	r1, #6
   21d7c:	4628      	mov	r0, r5
   21d7e:	4614      	mov	r4, r2
   21d80:	f001 fcc9 	bl	23716 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   21d84:	8923      	ldrh	r3, [r4, #8]
   21d86:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   21d88:	89e3      	ldrh	r3, [r4, #14]
   21d8a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   21d8c:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   21d8e:	2b00      	cmp	r3, #0
   21d90:	f642 0301 	movw	r3, #10241	; 0x2801
   21d94:	bf08      	it	eq
   21d96:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   21d9a:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   21d9c:	6821      	ldr	r1, [r4, #0]
   21d9e:	780b      	ldrb	r3, [r1, #0]
   21da0:	b11b      	cbz	r3, 21daa <gatt_find_type_encode+0x36>
   21da2:	2b02      	cmp	r3, #2
   21da4:	d006      	beq.n	21db4 <gatt_find_type_encode+0x40>
}
   21da6:	2000      	movs	r0, #0
   21da8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   21daa:	8849      	ldrh	r1, [r1, #2]
   21dac:	4628      	mov	r0, r5
   21dae:	f001 fcc9 	bl	23744 <net_buf_simple_add_le16>
}
   21db2:	e7f8      	b.n	21da6 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21db4:	2210      	movs	r2, #16
   21db6:	3101      	adds	r1, #1
   21db8:	4628      	mov	r0, r5
   21dba:	f001 fcb2 	bl	23722 <net_buf_simple_add_mem>
   21dbe:	e7f2      	b.n	21da6 <gatt_find_type_encode+0x32>

00021dc0 <sc_clear>:
{
   21dc0:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21dc2:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   21dc6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21dc8:	4631      	mov	r1, r6
   21dca:	7a00      	ldrb	r0, [r0, #8]
   21dcc:	f7fe fc7a 	bl	206c4 <bt_addr_le_is_bonded>
   21dd0:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   21dd2:	4631      	mov	r1, r6
   21dd4:	f7f4 f9f0 	bl	161b8 <find_sc_cfg>
	if (!cfg) {
   21dd8:	b128      	cbz	r0, 21de6 <sc_clear+0x26>
}
   21dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   21dde:	220c      	movs	r2, #12
   21de0:	2100      	movs	r1, #0
   21de2:	f7fe b895 	b.w	1ff10 <memset>
}
   21de6:	bd70      	pop	{r4, r5, r6, pc}

00021de8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   21de8:	2a02      	cmp	r2, #2
{
   21dea:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21dec:	d108      	bne.n	21e00 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   21dee:	2300      	movs	r3, #0
   21df0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21df4:	461a      	mov	r2, r3
   21df6:	7a00      	ldrb	r0, [r0, #8]
   21df8:	f7f4 fa92 	bl	16320 <sc_save>
}
   21dfc:	2002      	movs	r0, #2
   21dfe:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   21e00:	f7ff ffde 	bl	21dc0 <sc_clear>
   21e04:	e7fa      	b.n	21dfc <sc_ccc_cfg_write+0x14>

00021e06 <read_appearance>:
{
   21e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21e08:	4615      	mov	r5, r2
   21e0a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   21e0e:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   21e10:	f7fe fc56 	bl	206c0 <bt_get_appearance>
	if (offset > value_len) {
   21e14:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   21e16:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   21e1a:	d80e      	bhi.n	21e3a <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   21e1c:	f1c6 0402 	rsb	r4, r6, #2
   21e20:	42bc      	cmp	r4, r7
   21e22:	bfa8      	it	ge
   21e24:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21e26:	f10d 0306 	add.w	r3, sp, #6
   21e2a:	4622      	mov	r2, r4
   21e2c:	1999      	adds	r1, r3, r6
   21e2e:	4628      	mov	r0, r5
   21e30:	f7fe f863 	bl	1fefa <memcpy>
}
   21e34:	4620      	mov	r0, r4
   21e36:	b003      	add	sp, #12
   21e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21e3a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21e3e:	e7f9      	b.n	21e34 <read_appearance+0x2e>

00021e40 <read_name>:
{
   21e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e44:	4698      	mov	r8, r3
   21e46:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   21e4a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   21e4c:	f7f1 fd92 	bl	13974 <bt_get_name>
   21e50:	4607      	mov	r7, r0
				 strlen(name));
   21e52:	f7fe f81b 	bl	1fe8c <strlen>
	if (offset > value_len) {
   21e56:	b283      	uxth	r3, r0
   21e58:	42b3      	cmp	r3, r6
   21e5a:	d30c      	bcc.n	21e76 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   21e5c:	1b9c      	subs	r4, r3, r6
   21e5e:	4544      	cmp	r4, r8
   21e60:	bfa8      	it	ge
   21e62:	4644      	movge	r4, r8
   21e64:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   21e66:	4622      	mov	r2, r4
   21e68:	19b9      	adds	r1, r7, r6
   21e6a:	4628      	mov	r0, r5
   21e6c:	f7fe f845 	bl	1fefa <memcpy>
}
   21e70:	4620      	mov	r0, r4
   21e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21e76:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21e7a:	e7f9      	b.n	21e70 <read_name+0x30>

00021e7c <cf_read>:
{
   21e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21e7e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   21e80:	2300      	movs	r3, #0
{
   21e82:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   21e86:	f88d 3004 	strb.w	r3, [sp, #4]
{
   21e8a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   21e8c:	f7f4 f966 	bl	1615c <find_cf_cfg>
	if (cfg) {
   21e90:	b128      	cbz	r0, 21e9e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   21e92:	f100 0108 	add.w	r1, r0, #8
   21e96:	2201      	movs	r2, #1
   21e98:	a801      	add	r0, sp, #4
   21e9a:	f7fe f82e 	bl	1fefa <memcpy>
	if (offset > value_len) {
   21e9e:	2e01      	cmp	r6, #1
   21ea0:	d80d      	bhi.n	21ebe <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   21ea2:	f1c6 0401 	rsb	r4, r6, #1
   21ea6:	42bc      	cmp	r4, r7
   21ea8:	bfa8      	it	ge
   21eaa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21eac:	ab01      	add	r3, sp, #4
   21eae:	4622      	mov	r2, r4
   21eb0:	1999      	adds	r1, r3, r6
   21eb2:	4628      	mov	r0, r5
   21eb4:	f7fe f821 	bl	1fefa <memcpy>
}
   21eb8:	4620      	mov	r0, r4
   21eba:	b003      	add	sp, #12
   21ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21ebe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21ec2:	e7f9      	b.n	21eb8 <cf_read+0x3c>

00021ec4 <bt_gatt_attr_read_service>:
{
   21ec4:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   21ec6:	68c9      	ldr	r1, [r1, #12]
{
   21ec8:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   21eca:	780a      	ldrb	r2, [r1, #0]
{
   21ecc:	461c      	mov	r4, r3
   21ece:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   21ed2:	b992      	cbnz	r2, 21efa <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   21ed4:	884a      	ldrh	r2, [r1, #2]
   21ed6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   21eda:	2b02      	cmp	r3, #2
   21edc:	d818      	bhi.n	21f10 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   21ede:	f1c3 0202 	rsb	r2, r3, #2
   21ee2:	4294      	cmp	r4, r2
   21ee4:	bfa8      	it	ge
   21ee6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21ee8:	4622      	mov	r2, r4
   21eea:	f10d 0106 	add.w	r1, sp, #6
   21eee:	4419      	add	r1, r3
   21ef0:	f7fe f803 	bl	1fefa <memcpy>
}
   21ef4:	4620      	mov	r0, r4
   21ef6:	b002      	add	sp, #8
   21ef8:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   21efa:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   21efc:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   21f00:	d806      	bhi.n	21f10 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   21f02:	f1c3 0210 	rsb	r2, r3, #16
   21f06:	4294      	cmp	r4, r2
   21f08:	bfa8      	it	ge
   21f0a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21f0c:	4622      	mov	r2, r4
   21f0e:	e7ee      	b.n	21eee <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f10:	f06f 0406 	mvn.w	r4, #6
   21f14:	e7ee      	b.n	21ef4 <bt_gatt_attr_read_service+0x30>

00021f16 <bt_gatt_attr_read_ccc>:
{
   21f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   21f18:	68c9      	ldr	r1, [r1, #12]
{
   21f1a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   21f1e:	4615      	mov	r5, r2
   21f20:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   21f22:	f7f4 f96b 	bl	161fc <find_ccc_cfg>
	if (cfg) {
   21f26:	b100      	cbz	r0, 21f2a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   21f28:	8900      	ldrh	r0, [r0, #8]
   21f2a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   21f2e:	2e02      	cmp	r6, #2
   21f30:	d80e      	bhi.n	21f50 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   21f32:	f1c6 0402 	rsb	r4, r6, #2
   21f36:	42bc      	cmp	r4, r7
   21f38:	bfa8      	it	ge
   21f3a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21f3c:	f10d 0306 	add.w	r3, sp, #6
   21f40:	4622      	mov	r2, r4
   21f42:	1999      	adds	r1, r3, r6
   21f44:	4628      	mov	r0, r5
   21f46:	f7fd ffd8 	bl	1fefa <memcpy>
}
   21f4a:	4620      	mov	r0, r4
   21f4c:	b003      	add	sp, #12
   21f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f50:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21f54:	e7f9      	b.n	21f4a <bt_gatt_attr_read_ccc+0x34>

00021f56 <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   21f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21f5a:	4606      	mov	r6, r0
   21f5c:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   21f5e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   21f62:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   21f64:	f89d a020 	ldrb.w	sl, [sp, #32]
   21f68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   21f6c:	4690      	mov	r8, r2
   21f6e:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   21f70:	f7f3 ffbe 	bl	15ef0 <bt_att_req_alloc>
	if (!req) {
   21f74:	4604      	mov	r4, r0
   21f76:	b188      	cbz	r0, 21f9c <gatt_req_send.constprop.0+0x46>
	req->func = func;
   21f78:	6045      	str	r5, [r0, #4]
	req->att_op = op;
   21f7a:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   21f7e:	f8c0 9014 	str.w	r9, [r0, #20]
	req->encode = encode;
   21f82:	60c7      	str	r7, [r0, #12]
	req->user_data = params;
   21f84:	f8c0 8018 	str.w	r8, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   21f88:	464a      	mov	r2, r9
   21f8a:	4651      	mov	r1, sl
   21f8c:	4630      	mov	r0, r6
   21f8e:	f7ff fc36 	bl	217fe <bt_att_create_pdu>
   21f92:	4605      	mov	r5, r0
	if (!buf) {
   21f94:	b938      	cbnz	r0, 21fa6 <gatt_req_send.constprop.0+0x50>
		bt_att_req_free(req);
   21f96:	4620      	mov	r0, r4
   21f98:	f7f3 ffcc 	bl	15f34 <bt_att_req_free>
		return -ENOMEM;
   21f9c:	f06f 050b 	mvn.w	r5, #11
}
   21fa0:	4628      	mov	r0, r5
   21fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   21fa6:	2200      	movs	r2, #0
   21fa8:	4611      	mov	r1, r2
   21faa:	2301      	movs	r3, #1
   21fac:	f7ff fda6 	bl	21afc <bt_att_set_tx_meta_data>
	req->buf = buf;
   21fb0:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   21fb2:	4628      	mov	r0, r5
   21fb4:	4642      	mov	r2, r8
   21fb6:	4649      	mov	r1, r9
   21fb8:	47b8      	blx	r7
	if (err) {
   21fba:	4605      	mov	r5, r0
   21fbc:	b118      	cbz	r0, 21fc6 <gatt_req_send.constprop.0+0x70>
		bt_att_req_free(req);
   21fbe:	4620      	mov	r0, r4
   21fc0:	f7f3 ffb8 	bl	15f34 <bt_att_req_free>
   21fc4:	e7ec      	b.n	21fa0 <gatt_req_send.constprop.0+0x4a>
	err = bt_att_req_send(conn, req);
   21fc6:	4621      	mov	r1, r4
   21fc8:	4630      	mov	r0, r6
   21fca:	f7ff fd4a 	bl	21a62 <bt_att_req_send>
	if (err) {
   21fce:	4605      	mov	r5, r0
   21fd0:	2800      	cmp	r0, #0
   21fd2:	d0e5      	beq.n	21fa0 <gatt_req_send.constprop.0+0x4a>
   21fd4:	e7f3      	b.n	21fbe <gatt_req_send.constprop.0+0x68>

00021fd6 <gatt_write_ccc_buf>:
{
   21fd6:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   21fd8:	f100 050c 	add.w	r5, r0, #12
   21fdc:	2102      	movs	r1, #2
   21fde:	4628      	mov	r0, r5
   21fe0:	4614      	mov	r4, r2
   21fe2:	f001 fb98 	bl	23716 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   21fe6:	89e3      	ldrh	r3, [r4, #14]
   21fe8:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   21fea:	8a21      	ldrh	r1, [r4, #16]
   21fec:	4628      	mov	r0, r5
   21fee:	f001 fba9 	bl	23744 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   21ff2:	2104      	movs	r1, #4
   21ff4:	f104 0014 	add.w	r0, r4, #20
   21ff8:	f7ff fe10 	bl	21c1c <atomic_or>
}
   21ffc:	2000      	movs	r0, #0
   21ffe:	bd38      	pop	{r3, r4, r5, pc}

00022000 <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   22000:	2101      	movs	r1, #1
   22002:	300c      	adds	r0, #12
   22004:	f7ff be0a 	b.w	21c1c <atomic_or>

00022008 <cf_write>:
{
   22008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2200c:	461f      	mov	r7, r3
   2200e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   22012:	2b01      	cmp	r3, #1
{
   22014:	4606      	mov	r6, r0
   22016:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   22018:	d82c      	bhi.n	22074 <cf_write+0x6c>
	if (offset + len > sizeof(cfg->data)) {
   2201a:	443b      	add	r3, r7
   2201c:	2b01      	cmp	r3, #1
   2201e:	463d      	mov	r5, r7
   22020:	dc2b      	bgt.n	2207a <cf_write+0x72>
	cfg = find_cf_cfg(conn);
   22022:	f7f4 f89b 	bl	1615c <find_cf_cfg>
	if (!cfg) {
   22026:	4604      	mov	r4, r0
   22028:	b918      	cbnz	r0, 22032 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   2202a:	f7f4 f897 	bl	1615c <find_cf_cfg>
	if (!cfg) {
   2202e:	4604      	mov	r4, r0
   22030:	b330      	cbz	r0, 22080 <cf_write+0x78>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   22032:	b197      	cbz	r7, 2205a <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   22034:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   22036:	f898 2000 	ldrb.w	r2, [r8]
   2203a:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2203c:	fa21 f003 	lsr.w	r0, r1, r3
   22040:	07c7      	lsls	r7, r0, #31
   22042:	d503      	bpl.n	2204c <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   22044:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   22048:	07c0      	lsls	r0, r0, #31
   2204a:	d51c      	bpl.n	22086 <cf_write+0x7e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2204c:	3301      	adds	r3, #1
   2204e:	2b03      	cmp	r3, #3
   22050:	d1f4      	bne.n	2203c <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   22052:	f002 0207 	and.w	r2, r2, #7
   22056:	4311      	orrs	r1, r2
   22058:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2205a:	1c60      	adds	r0, r4, #1
   2205c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   22060:	f7ff fdeb 	bl	21c3a <bt_addr_le_copy>
	cfg->id = conn->id;
   22064:	7a33      	ldrb	r3, [r6, #8]
   22066:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   22068:	4620      	mov	r0, r4
   2206a:	f7ff ffc9 	bl	22000 <set_change_aware_no_store.constprop.0.isra.0>
}
   2206e:	4628      	mov	r0, r5
   22070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22074:	f06f 0506 	mvn.w	r5, #6
   22078:	e7f9      	b.n	2206e <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2207a:	f06f 050c 	mvn.w	r5, #12
   2207e:	e7f6      	b.n	2206e <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   22080:	f06f 0510 	mvn.w	r5, #16
   22084:	e7f3      	b.n	2206e <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   22086:	f06f 0512 	mvn.w	r5, #18
   2208a:	e7f0      	b.n	2206e <cf_write+0x66>

0002208c <sc_restore_rsp>:
{
   2208c:	b538      	push	{r3, r4, r5, lr}
   2208e:	4604      	mov	r4, r0
   22090:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   22092:	f7ff fd15 	bl	21ac0 <bt_att_fixed_chan_only>
   22096:	b140      	cbz	r0, 220aa <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   22098:	4620      	mov	r0, r4
   2209a:	f7f4 f85f 	bl	1615c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2209e:	b120      	cbz	r0, 220aa <sc_restore_rsp+0x1e>
   220a0:	7a03      	ldrb	r3, [r0, #8]
   220a2:	07db      	lsls	r3, r3, #31
   220a4:	d501      	bpl.n	220aa <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   220a6:	f7ff ffab 	bl	22000 <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   220aa:	b965      	cbnz	r5, 220c6 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   220ac:	7a20      	ldrb	r0, [r4, #8]
   220ae:	f104 0188 	add.w	r1, r4, #136	; 0x88
   220b2:	f7f4 f881 	bl	161b8 <find_sc_cfg>
		if (sc_cfg) {
   220b6:	b130      	cbz	r0, 220c6 <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   220b8:	4629      	mov	r1, r5
   220ba:	2204      	movs	r2, #4
}
   220bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   220c0:	3008      	adds	r0, #8
   220c2:	f7fd bf25 	b.w	1ff10 <memset>
}
   220c6:	bd38      	pop	{r3, r4, r5, pc}

000220c8 <bt_gatt_attr_value_handle>:
{
   220c8:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   220ca:	4604      	mov	r4, r0
   220cc:	b910      	cbnz	r0, 220d4 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   220ce:	2000      	movs	r0, #0
}
   220d0:	b002      	add	sp, #8
   220d2:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   220d4:	2300      	movs	r3, #0
   220d6:	f88d 3004 	strb.w	r3, [sp, #4]
   220da:	6800      	ldr	r0, [r0, #0]
   220dc:	f642 0303 	movw	r3, #10243	; 0x2803
   220e0:	a901      	add	r1, sp, #4
   220e2:	f8ad 3006 	strh.w	r3, [sp, #6]
   220e6:	f7fd ff61 	bl	1ffac <bt_uuid_cmp>
   220ea:	2800      	cmp	r0, #0
   220ec:	d1ef      	bne.n	220ce <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   220ee:	68e3      	ldr	r3, [r4, #12]
   220f0:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   220f2:	2800      	cmp	r0, #0
   220f4:	d1ec      	bne.n	220d0 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   220f6:	4620      	mov	r0, r4
   220f8:	f7f4 fa64 	bl	165c4 <bt_gatt_attr_get_handle>
   220fc:	3001      	adds	r0, #1
   220fe:	b280      	uxth	r0, r0
	return handle;
   22100:	e7e6      	b.n	220d0 <bt_gatt_attr_value_handle+0x8>

00022102 <bt_gatt_attr_read_chrc>:
{
   22102:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   22104:	68cc      	ldr	r4, [r1, #12]
{
   22106:	b087      	sub	sp, #28
   22108:	4608      	mov	r0, r1
   2210a:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   2210c:	79a3      	ldrb	r3, [r4, #6]
   2210e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   22112:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   22116:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   22118:	f7ff ffd6 	bl	220c8 <bt_gatt_attr_value_handle>
   2211c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22120:	6821      	ldr	r1, [r4, #0]
   22122:	780b      	ldrb	r3, [r1, #0]
   22124:	b99b      	cbnz	r3, 2214e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   22126:	884b      	ldrh	r3, [r1, #2]
   22128:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2212c:	2405      	movs	r4, #5
	if (offset > value_len) {
   2212e:	42b4      	cmp	r4, r6
   22130:	d315      	bcc.n	2215e <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   22132:	1ba4      	subs	r4, r4, r6
   22134:	42bc      	cmp	r4, r7
   22136:	bfa8      	it	ge
   22138:	463c      	movge	r4, r7
   2213a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2213c:	ab01      	add	r3, sp, #4
   2213e:	4622      	mov	r2, r4
   22140:	1999      	adds	r1, r3, r6
   22142:	4628      	mov	r0, r5
   22144:	f7fd fed9 	bl	1fefa <memcpy>
}
   22148:	4620      	mov	r0, r4
   2214a:	b007      	add	sp, #28
   2214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2214e:	2210      	movs	r2, #16
   22150:	3101      	adds	r1, #1
   22152:	f10d 0007 	add.w	r0, sp, #7
   22156:	f7fd fed0 	bl	1fefa <memcpy>
		value_len += 16U;
   2215a:	2413      	movs	r4, #19
   2215c:	e7e7      	b.n	2212e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2215e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22162:	e7f1      	b.n	22148 <bt_gatt_attr_read_chrc+0x46>

00022164 <bt_gatt_foreach_attr>:
{
   22164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   22166:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2216a:	2300      	movs	r3, #0
   2216c:	9300      	str	r3, [sp, #0]
   2216e:	461a      	mov	r2, r3
   22170:	f7f4 fa58 	bl	16624 <bt_gatt_foreach_attr_type>
}
   22174:	b005      	add	sp, #20
   22176:	f85d fb04 	ldr.w	pc, [sp], #4

0002217a <bt_gatt_check_perm>:
{
   2217a:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2217c:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2217e:	8a4b      	ldrh	r3, [r1, #18]
{
   22180:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   22182:	d504      	bpl.n	2218e <bt_gatt_check_perm+0x14>
   22184:	f013 0f95 	tst.w	r3, #149	; 0x95
   22188:	d02b      	beq.n	221e2 <bt_gatt_check_perm+0x68>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2218a:	6848      	ldr	r0, [r1, #4]
   2218c:	b348      	cbz	r0, 221e2 <bt_gatt_check_perm+0x68>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2218e:	0790      	lsls	r0, r2, #30
   22190:	d504      	bpl.n	2219c <bt_gatt_check_perm+0x22>
   22192:	f413 7f95 	tst.w	r3, #298	; 0x12a
   22196:	d026      	beq.n	221e6 <bt_gatt_check_perm+0x6c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   22198:	6889      	ldr	r1, [r1, #8]
   2219a:	b321      	cbz	r1, 221e6 <bt_gatt_check_perm+0x6c>
	mask &= attr->perm;
   2219c:	ea02 0403 	and.w	r4, r2, r3
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   221a0:	f014 0f3c 	tst.w	r4, #60	; 0x3c
   221a4:	d00d      	beq.n	221c2 <bt_gatt_check_perm+0x48>
		if (!conn->encrypt) {
   221a6:	7aeb      	ldrb	r3, [r5, #11]
   221a8:	b92b      	cbnz	r3, 221b6 <bt_gatt_check_perm+0x3c>
			if (bt_conn_ltk_present(conn)) {
   221aa:	4628      	mov	r0, r5
   221ac:	f7fe fc61 	bl	20a72 <bt_conn_ltk_present>
   221b0:	b9d8      	cbnz	r0, 221ea <bt_gatt_check_perm+0x70>
				return BT_ATT_ERR_AUTHENTICATION;
   221b2:	2005      	movs	r0, #5
}
   221b4:	bd38      	pop	{r3, r4, r5, pc}
		if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   221b6:	f014 0f30 	tst.w	r4, #48	; 0x30
   221ba:	d104      	bne.n	221c6 <bt_gatt_check_perm+0x4c>
		if (mask & BT_GATT_PERM_LESC_MASK) {
   221bc:	f414 7fc0 	tst.w	r4, #384	; 0x180
   221c0:	d107      	bne.n	221d2 <bt_gatt_check_perm+0x58>
	return 0;
   221c2:	2000      	movs	r0, #0
   221c4:	e7f6      	b.n	221b4 <bt_gatt_check_perm+0x3a>
			if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   221c6:	4628      	mov	r0, r5
   221c8:	f7fe fcd5 	bl	20b76 <bt_conn_get_security>
   221cc:	2802      	cmp	r0, #2
   221ce:	d8f5      	bhi.n	221bc <bt_gatt_check_perm+0x42>
   221d0:	e7ef      	b.n	221b2 <bt_gatt_check_perm+0x38>
			const struct bt_keys *keys = conn->le.keys;
   221d2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
			if (!keys || (keys->flags & BT_KEYS_SC) == 0) {
   221d6:	2b00      	cmp	r3, #0
   221d8:	d0eb      	beq.n	221b2 <bt_gatt_check_perm+0x38>
   221da:	7b5b      	ldrb	r3, [r3, #13]
   221dc:	06db      	lsls	r3, r3, #27
   221de:	d5e8      	bpl.n	221b2 <bt_gatt_check_perm+0x38>
   221e0:	e7ef      	b.n	221c2 <bt_gatt_check_perm+0x48>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   221e2:	2002      	movs	r0, #2
   221e4:	e7e6      	b.n	221b4 <bt_gatt_check_perm+0x3a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   221e6:	2003      	movs	r0, #3
   221e8:	e7e4      	b.n	221b4 <bt_gatt_check_perm+0x3a>
				return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   221ea:	200f      	movs	r0, #15
   221ec:	e7e2      	b.n	221b4 <bt_gatt_check_perm+0x3a>

000221ee <bt_gatt_is_subscribed>:
{
   221ee:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   221f2:	7b43      	ldrb	r3, [r0, #13]
   221f4:	2b07      	cmp	r3, #7
{
   221f6:	4605      	mov	r5, r0
   221f8:	460c      	mov	r4, r1
   221fa:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   221fc:	d110      	bne.n	22220 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   221fe:	2300      	movs	r3, #0
   22200:	f88d 300c 	strb.w	r3, [sp, #12]
   22204:	6820      	ldr	r0, [r4, #0]
   22206:	f642 0303 	movw	r3, #10243	; 0x2803
   2220a:	a903      	add	r1, sp, #12
   2220c:	f8ad 300e 	strh.w	r3, [sp, #14]
   22210:	f7fd fecc 	bl	1ffac <bt_uuid_cmp>
   22214:	b960      	cbnz	r0, 22230 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   22216:	68e3      	ldr	r3, [r4, #12]
   22218:	799b      	ldrb	r3, [r3, #6]
   2221a:	f013 0f30 	tst.w	r3, #48	; 0x30
   2221e:	d103      	bne.n	22228 <bt_gatt_is_subscribed+0x3a>
		return false;
   22220:	2000      	movs	r0, #0
}
   22222:	b004      	add	sp, #16
   22224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   22228:	4620      	mov	r0, r4
   2222a:	f7f4 fad1 	bl	167d0 <bt_gatt_attr_next>
   2222e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   22230:	2300      	movs	r3, #0
   22232:	6820      	ldr	r0, [r4, #0]
   22234:	f88d 300c 	strb.w	r3, [sp, #12]
   22238:	a903      	add	r1, sp, #12
   2223a:	f642 1302 	movw	r3, #10498	; 0x2902
   2223e:	f8ad 300e 	strh.w	r3, [sp, #14]
   22242:	f7fd feb3 	bl	1ffac <bt_uuid_cmp>
   22246:	b118      	cbz	r0, 22250 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   22248:	4620      	mov	r0, r4
   2224a:	f7f4 fac1 	bl	167d0 <bt_gatt_attr_next>
   2224e:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   22250:	2700      	movs	r7, #0
   22252:	f642 1802 	movw	r8, #10498	; 0x2902
   22256:	6820      	ldr	r0, [r4, #0]
   22258:	f88d 7000 	strb.w	r7, [sp]
   2225c:	4669      	mov	r1, sp
   2225e:	f8ad 8002 	strh.w	r8, [sp, #2]
   22262:	f7fd fea3 	bl	1ffac <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   22266:	bb20      	cbnz	r0, 222b2 <bt_gatt_is_subscribed+0xc4>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   22268:	2300      	movs	r3, #0
   2226a:	6820      	ldr	r0, [r4, #0]
   2226c:	f88d 300c 	strb.w	r3, [sp, #12]
   22270:	a903      	add	r1, sp, #12
   22272:	f642 1302 	movw	r3, #10498	; 0x2902
   22276:	f8ad 300e 	strh.w	r3, [sp, #14]
   2227a:	f7fd fe97 	bl	1ffac <bt_uuid_cmp>
   2227e:	2800      	cmp	r0, #0
   22280:	d1ce      	bne.n	22220 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   22282:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   22284:	4622      	mov	r2, r4
   22286:	4628      	mov	r0, r5
   22288:	f812 1b01 	ldrb.w	r1, [r2], #1
   2228c:	f7fe fc9a 	bl	20bc4 <bt_conn_is_peer_addr_le>
   22290:	b110      	cbz	r0, 22298 <bt_gatt_is_subscribed+0xaa>
   22292:	8923      	ldrh	r3, [r4, #8]
   22294:	421e      	tst	r6, r3
   22296:	d10a      	bne.n	222ae <bt_gatt_is_subscribed+0xc0>
   22298:	7aa1      	ldrb	r1, [r4, #10]
   2229a:	f104 020b 	add.w	r2, r4, #11
   2229e:	4628      	mov	r0, r5
   222a0:	f7fe fc90 	bl	20bc4 <bt_conn_is_peer_addr_le>
   222a4:	2800      	cmp	r0, #0
   222a6:	d0bb      	beq.n	22220 <bt_gatt_is_subscribed+0x32>
   222a8:	8a63      	ldrh	r3, [r4, #18]
   222aa:	421e      	tst	r6, r3
   222ac:	d0b8      	beq.n	22220 <bt_gatt_is_subscribed+0x32>
			return true;
   222ae:	2001      	movs	r0, #1
   222b0:	e7b7      	b.n	22222 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   222b2:	6820      	ldr	r0, [r4, #0]
   222b4:	f88d 7004 	strb.w	r7, [sp, #4]
   222b8:	f642 0303 	movw	r3, #10243	; 0x2803
   222bc:	a901      	add	r1, sp, #4
   222be:	f8ad 3006 	strh.w	r3, [sp, #6]
   222c2:	f7fd fe73 	bl	1ffac <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   222c6:	2800      	cmp	r0, #0
   222c8:	d0ce      	beq.n	22268 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   222ca:	6820      	ldr	r0, [r4, #0]
   222cc:	f88d 7008 	strb.w	r7, [sp, #8]
   222d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   222d4:	a902      	add	r1, sp, #8
   222d6:	f8ad 300a 	strh.w	r3, [sp, #10]
   222da:	f7fd fe67 	bl	1ffac <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   222de:	2800      	cmp	r0, #0
   222e0:	d0c2      	beq.n	22268 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   222e2:	6820      	ldr	r0, [r4, #0]
   222e4:	f88d 700c 	strb.w	r7, [sp, #12]
   222e8:	f642 0301 	movw	r3, #10241	; 0x2801
   222ec:	a903      	add	r1, sp, #12
   222ee:	f8ad 300e 	strh.w	r3, [sp, #14]
   222f2:	f7fd fe5b 	bl	1ffac <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   222f6:	2800      	cmp	r0, #0
   222f8:	d0b6      	beq.n	22268 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   222fa:	4620      	mov	r0, r4
   222fc:	f7f4 fa68 	bl	167d0 <bt_gatt_attr_next>
		if (!attr) {
   22300:	4604      	mov	r4, r0
   22302:	2800      	cmp	r0, #0
   22304:	d1a7      	bne.n	22256 <bt_gatt_is_subscribed+0x68>
   22306:	e78b      	b.n	22220 <bt_gatt_is_subscribed+0x32>

00022308 <gatt_notify>:
{
   22308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2230c:	4614      	mov	r4, r2
   2230e:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   22310:	2294      	movs	r2, #148	; 0x94
   22312:	6861      	ldr	r1, [r4, #4]
{
   22314:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   22316:	f7ff ff30 	bl	2217a <bt_gatt_check_perm>
   2231a:	bb58      	cbnz	r0, 22374 <gatt_notify+0x6c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   2231c:	6861      	ldr	r1, [r4, #4]
   2231e:	2201      	movs	r2, #1
   22320:	4630      	mov	r0, r6
   22322:	f7ff ff64 	bl	221ee <bt_gatt_is_subscribed>
   22326:	b348      	cbz	r0, 2237c <gatt_notify+0x74>
				sizeof(*nfy) + params->len);
   22328:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2232a:	211b      	movs	r1, #27
   2232c:	3202      	adds	r2, #2
   2232e:	4630      	mov	r0, r6
   22330:	f7ff fa65 	bl	217fe <bt_att_create_pdu>
	if (!buf) {
   22334:	4605      	mov	r5, r0
   22336:	b320      	cbz	r0, 22382 <gatt_notify+0x7a>
	return net_buf_simple_add(&buf->b, len);
   22338:	f100 090c 	add.w	r9, r0, #12
   2233c:	2102      	movs	r1, #2
   2233e:	4648      	mov	r0, r9
   22340:	f001 f9e9 	bl	23716 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   22344:	4607      	mov	r7, r0
   22346:	4648      	mov	r0, r9
   22348:	f827 8b02 	strh.w	r8, [r7], #2
   2234c:	89a1      	ldrh	r1, [r4, #12]
   2234e:	f001 f9e2 	bl	23716 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   22352:	89a2      	ldrh	r2, [r4, #12]
   22354:	68a1      	ldr	r1, [r4, #8]
   22356:	4638      	mov	r0, r7
   22358:	f7fd fdcf 	bl	1fefa <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   2235c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   22360:	4628      	mov	r0, r5
   22362:	2301      	movs	r3, #1
   22364:	f7ff fbca 	bl	21afc <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   22368:	4629      	mov	r1, r5
   2236a:	4630      	mov	r0, r6
}
   2236c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   22370:	f7ff bb39 	b.w	219e6 <bt_att_send>
		return -EPERM;
   22374:	f04f 30ff 	mov.w	r0, #4294967295
}
   22378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   2237c:	f06f 0015 	mvn.w	r0, #21
   22380:	e7fa      	b.n	22378 <gatt_notify+0x70>
		return -ENOMEM;
   22382:	f06f 000b 	mvn.w	r0, #11
   22386:	e7f7      	b.n	22378 <gatt_notify+0x70>

00022388 <gatt_discover_next>:
{
   22388:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   2238a:	460b      	mov	r3, r1
{
   2238c:	4605      	mov	r5, r0
   2238e:	4614      	mov	r4, r2
	if (!last_handle)
   22390:	b929      	cbnz	r1, 2239e <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   22392:	4621      	mov	r1, r4
   22394:	4628      	mov	r0, r5
   22396:	f7f4 fc2f 	bl	16bf8 <bt_gatt_discover>
   2239a:	b928      	cbnz	r0, 223a8 <gatt_discover_next+0x20>
}
   2239c:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2239e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   223a2:	4291      	cmp	r1, r2
   223a4:	d107      	bne.n	223b6 <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   223a6:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   223a8:	6863      	ldr	r3, [r4, #4]
   223aa:	4622      	mov	r2, r4
   223ac:	4628      	mov	r0, r5
   223ae:	2100      	movs	r1, #0
}
   223b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   223b4:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   223b6:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   223b8:	3301      	adds	r3, #1
   223ba:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   223bc:	429a      	cmp	r2, r3
		params->start_handle++;
   223be:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   223c0:	d2e7      	bcs.n	22392 <gatt_discover_next+0xa>
   223c2:	e7f1      	b.n	223a8 <gatt_discover_next+0x20>

000223c4 <gatt_find_type_rsp>:
{
   223c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223c8:	b089      	sub	sp, #36	; 0x24
   223ca:	4606      	mov	r6, r0
   223cc:	9f12      	ldr	r7, [sp, #72]	; 0x48
   223ce:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   223d0:	b911      	cbnz	r1, 223d8 <gatt_find_type_rsp+0x14>
   223d2:	f013 0803 	ands.w	r8, r3, #3
   223d6:	d007      	beq.n	223e8 <gatt_find_type_rsp+0x24>
	params->func(conn, NULL, params);
   223d8:	687b      	ldr	r3, [r7, #4]
   223da:	463a      	mov	r2, r7
   223dc:	2100      	movs	r1, #0
   223de:	4630      	mov	r0, r6
}
   223e0:	b009      	add	sp, #36	; 0x24
   223e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   223e6:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   223e8:	f3c3 0387 	ubfx	r3, r3, #2, #8
   223ec:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   223f0:	46c1      	mov	r9, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   223f2:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   223f6:	42ac      	cmp	r4, r5
   223f8:	d107      	bne.n	2240a <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   223fa:	463a      	mov	r2, r7
   223fc:	4641      	mov	r1, r8
   223fe:	4630      	mov	r0, r6
}
   22400:	b009      	add	sp, #36	; 0x24
   22402:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, end_handle, params);
   22406:	f7ff bfbf 	b.w	22388 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2240a:	7c3a      	ldrb	r2, [r7, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2240c:	8863      	ldrh	r3, [r4, #2]
		value.end_handle = end_handle;
   2240e:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   22412:	2a00      	cmp	r2, #0
   22414:	bf14      	ite	ne
   22416:	4652      	movne	r2, sl
   22418:	f44f 5220 	moveq.w	r2, #10240	; 0x2800
   2241c:	f8ad 2002 	strh.w	r2, [sp, #2]
		attr = (struct bt_gatt_attr) {
   22420:	2210      	movs	r2, #16
   22422:	2100      	movs	r1, #0
   22424:	eb0d 0002 	add.w	r0, sp, r2
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   22428:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2242c:	683b      	ldr	r3, [r7, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2242e:	f8b4 b000 	ldrh.w	fp, [r4]
		value.uuid = params->uuid;
   22432:	9301      	str	r3, [sp, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   22434:	f88d 9000 	strb.w	r9, [sp]
		attr = (struct bt_gatt_attr) {
   22438:	f7fd fd6a 	bl	1ff10 <memset>
   2243c:	ab01      	add	r3, sp, #4
   2243e:	9306      	str	r3, [sp, #24]
   22440:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22444:	687b      	ldr	r3, [r7, #4]
		attr = (struct bt_gatt_attr) {
   22446:	f8ad b01c 	strh.w	fp, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2244a:	463a      	mov	r2, r7
   2244c:	a903      	add	r1, sp, #12
   2244e:	4630      	mov	r0, r6
   22450:	4798      	blx	r3
   22452:	3404      	adds	r4, #4
   22454:	2800      	cmp	r0, #0
   22456:	d1ce      	bne.n	223f6 <gatt_find_type_rsp+0x32>
}
   22458:	b009      	add	sp, #36	; 0x24
   2245a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002245e <gatt_read_group_rsp>:
{
   2245e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22462:	b08f      	sub	sp, #60	; 0x3c
   22464:	4681      	mov	r9, r0
   22466:	9d18      	ldr	r5, [sp, #96]	; 0x60
   22468:	4617      	mov	r7, r2
	if (err) {
   2246a:	b131      	cbz	r1, 2247a <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   2246c:	686b      	ldr	r3, [r5, #4]
   2246e:	462a      	mov	r2, r5
   22470:	2100      	movs	r1, #0
}
   22472:	b00f      	add	sp, #60	; 0x3c
   22474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   22478:	4718      	bx	r3
	switch (rsp->len) {
   2247a:	7812      	ldrb	r2, [r2, #0]
   2247c:	2a06      	cmp	r2, #6
   2247e:	d002      	beq.n	22486 <gatt_read_group_rsp+0x28>
   22480:	2a14      	cmp	r2, #20
   22482:	d10d      	bne.n	224a0 <gatt_read_group_rsp+0x42>
   22484:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   22486:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   22488:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   2248c:	b29c      	uxth	r4, r3
   2248e:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   22492:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   22494:	783b      	ldrb	r3, [r7, #0]
   22496:	42a3      	cmp	r3, r4
   22498:	d90a      	bls.n	224b0 <gatt_read_group_rsp+0x52>
	if (length == 0U && end_handle) {
   2249a:	b90c      	cbnz	r4, 224a0 <gatt_read_group_rsp+0x42>
   2249c:	2e00      	cmp	r6, #0
   2249e:	d150      	bne.n	22542 <gatt_read_group_rsp+0xe4>
	params->func(conn, NULL, params);
   224a0:	686b      	ldr	r3, [r5, #4]
   224a2:	462a      	mov	r2, r5
   224a4:	2100      	movs	r1, #0
   224a6:	4648      	mov	r0, r9
   224a8:	4798      	blx	r3
}
   224aa:	b00f      	add	sp, #60	; 0x3c
   224ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct bt_gatt_attr attr = {};
   224b0:	2214      	movs	r2, #20
   224b2:	2100      	movs	r1, #0
   224b4:	a809      	add	r0, sp, #36	; 0x24
   224b6:	f7fd fd2b 	bl	1ff10 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   224ba:	f8b8 a000 	ldrh.w	sl, [r8]
   224be:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   224c2:	2b00      	cmp	r3, #0
   224c4:	d0ec      	beq.n	224a0 <gatt_read_group_rsp+0x42>
		end_handle = sys_le16_to_cpu(data->end_handle);
   224c6:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   224ca:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   224ce:	2e00      	cmp	r6, #0
   224d0:	d0e6      	beq.n	224a0 <gatt_read_group_rsp+0x42>
   224d2:	42b3      	cmp	r3, r6
   224d4:	d8e4      	bhi.n	224a0 <gatt_read_group_rsp+0x42>
		switch (u.uuid.type) {
   224d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   224da:	b323      	cbz	r3, 22526 <gatt_read_group_rsp+0xc8>
   224dc:	2b02      	cmp	r3, #2
   224de:	d02a      	beq.n	22536 <gatt_read_group_rsp+0xd8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   224e0:	f04f 0300 	mov.w	r3, #0
   224e4:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   224e8:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   224ea:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   224ee:	2b00      	cmp	r3, #0
   224f0:	f642 0301 	movw	r3, #10241	; 0x2801
   224f4:	bf08      	it	eq
   224f6:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   224fa:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   224fe:	ab04      	add	r3, sp, #16
   22500:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   22502:	ab01      	add	r3, sp, #4
   22504:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   22506:	ab02      	add	r3, sp, #8
   22508:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   2250a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2250e:	686b      	ldr	r3, [r5, #4]
   22510:	462a      	mov	r2, r5
   22512:	a909      	add	r1, sp, #36	; 0x24
   22514:	4648      	mov	r0, r9
   22516:	4798      	blx	r3
   22518:	2800      	cmp	r0, #0
   2251a:	d0c6      	beq.n	224aa <gatt_read_group_rsp+0x4c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   2251c:	783b      	ldrb	r3, [r7, #0]
   2251e:	1ae4      	subs	r4, r4, r3
   22520:	b2a4      	uxth	r4, r4
   22522:	4498      	add	r8, r3
   22524:	e7b6      	b.n	22494 <gatt_read_group_rsp+0x36>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   22526:	2202      	movs	r2, #2
   22528:	f108 0104 	add.w	r1, r8, #4
   2252c:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   22530:	f7fd fce3 	bl	1fefa <memcpy>
			break;
   22534:	e7d4      	b.n	224e0 <gatt_read_group_rsp+0x82>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   22536:	2210      	movs	r2, #16
   22538:	f108 0104 	add.w	r1, r8, #4
   2253c:	f10d 0011 	add.w	r0, sp, #17
   22540:	e7f6      	b.n	22530 <gatt_read_group_rsp+0xd2>
	gatt_discover_next(conn, handle, params);
   22542:	462a      	mov	r2, r5
   22544:	4631      	mov	r1, r6
   22546:	4648      	mov	r0, r9
}
   22548:	b00f      	add	sp, #60	; 0x3c
   2254a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   2254e:	f7ff bf1b 	b.w	22388 <gatt_discover_next>

00022552 <read_included_uuid_cb>:
{
   22552:	b5f0      	push	{r4, r5, r6, r7, lr}
   22554:	b08f      	sub	sp, #60	; 0x3c
	if (length != 16U) {
   22556:	2b10      	cmp	r3, #16
{
   22558:	4611      	mov	r1, r2
   2255a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2255c:	4605      	mov	r5, r0
   2255e:	461a      	mov	r2, r3
	if (length != 16U) {
   22560:	d006      	beq.n	22570 <read_included_uuid_cb+0x1e>
		params->func(conn, NULL, params);
   22562:	6863      	ldr	r3, [r4, #4]
   22564:	4622      	mov	r2, r4
   22566:	2100      	movs	r1, #0
}
   22568:	b00f      	add	sp, #60	; 0x3c
   2256a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->func(conn, NULL, params);
   2256e:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   22570:	8963      	ldrh	r3, [r4, #10]
   22572:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   22576:	89a3      	ldrh	r3, [r4, #12]
   22578:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   2257c:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   2257e:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   22580:	f10d 0011 	add.w	r0, sp, #17
	handle = params->_included.attr_handle;
   22584:	8927      	ldrh	r7, [r4, #8]
	value.uuid = &u.uuid;
   22586:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   22588:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   2258c:	f7fd fcb5 	bl	1fefa <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   22590:	6821      	ldr	r1, [r4, #0]
   22592:	b9c1      	cbnz	r1, 225c6 <read_included_uuid_cb+0x74>
		.uuid = BT_UUID_GATT_INCLUDE,
   22594:	2100      	movs	r1, #0
   22596:	f642 0302 	movw	r3, #10242	; 0x2802
	attr = (struct bt_gatt_attr) {
   2259a:	2210      	movs	r2, #16
   2259c:	a80a      	add	r0, sp, #40	; 0x28
		.uuid = BT_UUID_GATT_INCLUDE,
   2259e:	f88d 1004 	strb.w	r1, [sp, #4]
   225a2:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (struct bt_gatt_attr) {
   225a6:	f7fd fcb3 	bl	1ff10 <memset>
   225aa:	ab01      	add	r3, sp, #4
   225ac:	9309      	str	r3, [sp, #36]	; 0x24
   225ae:	ab02      	add	r3, sp, #8
   225b0:	930c      	str	r3, [sp, #48]	; 0x30
   225b2:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   225b6:	6863      	ldr	r3, [r4, #4]
   225b8:	4622      	mov	r2, r4
   225ba:	a909      	add	r1, sp, #36	; 0x24
   225bc:	4628      	mov	r0, r5
   225be:	4798      	blx	r3
   225c0:	b930      	cbnz	r0, 225d0 <read_included_uuid_cb+0x7e>
}
   225c2:	b00f      	add	sp, #60	; 0x3c
   225c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   225c6:	4630      	mov	r0, r6
   225c8:	f7fd fcf0 	bl	1ffac <bt_uuid_cmp>
   225cc:	2800      	cmp	r0, #0
   225ce:	d0e1      	beq.n	22594 <read_included_uuid_cb+0x42>
	gatt_discover_next(conn, params->start_handle, params);
   225d0:	8921      	ldrh	r1, [r4, #8]
   225d2:	4622      	mov	r2, r4
   225d4:	4628      	mov	r0, r5
   225d6:	f7ff fed7 	bl	22388 <gatt_discover_next>
	return;
   225da:	e7f2      	b.n	225c2 <read_included_uuid_cb+0x70>

000225dc <gatt_find_info_rsp>:
{
   225dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225e0:	b08f      	sub	sp, #60	; 0x3c
   225e2:	4680      	mov	r8, r0
   225e4:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   225e6:	2900      	cmp	r1, #0
   225e8:	f040 8091 	bne.w	2270e <gatt_find_info_rsp+0x132>
	switch (rsp->format) {
   225ec:	7810      	ldrb	r0, [r2, #0]
   225ee:	2801      	cmp	r0, #1
   225f0:	d01c      	beq.n	2262c <gatt_find_info_rsp+0x50>
   225f2:	2802      	cmp	r0, #2
   225f4:	f040 808b 	bne.w	2270e <gatt_find_info_rsp+0x132>
   225f8:	4601      	mov	r1, r0
		len = sizeof(*info.i128);
   225fa:	f04f 0a12 	mov.w	sl, #18
	length--;
   225fe:	1e5c      	subs	r4, r3, #1
   22600:	b2a4      	uxth	r4, r4
	if (length < len) {
   22602:	4554      	cmp	r4, sl
		u.uuid.type = BT_UUID_TYPE_16;
   22604:	f88d 1010 	strb.w	r1, [sp, #16]
	if (length < len) {
   22608:	f0c0 8081 	bcc.w	2270e <gatt_find_info_rsp+0x132>
	for (i = length / len, pdu = rsp->info; i != 0;
   2260c:	fbb4 f4fa 	udiv	r4, r4, sl
	bool skip = false;
   22610:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   22614:	1c55      	adds	r5, r2, #1
	uint16_t handle = 0U;
   22616:	f8cd 9000 	str.w	r9, [sp]
			skip = false;
   2261a:	46cb      	mov	fp, r9
   2261c:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   2261e:	b944      	cbnz	r4, 22632 <gatt_find_info_rsp+0x56>
	gatt_discover_next(conn, handle, params);
   22620:	9900      	ldr	r1, [sp, #0]
   22622:	4632      	mov	r2, r6
   22624:	4640      	mov	r0, r8
   22626:	f7ff feaf 	bl	22388 <gatt_discover_next>
	return;
   2262a:	e06d      	b.n	22708 <gatt_find_info_rsp+0x12c>
	switch (rsp->format) {
   2262c:	f04f 0a04 	mov.w	sl, #4
   22630:	e7e5      	b.n	225fe <gatt_find_info_rsp+0x22>
		handle = sys_le16_to_cpu(info.i16->handle);
   22632:	882b      	ldrh	r3, [r5, #0]
   22634:	9301      	str	r3, [sp, #4]
   22636:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2263a:	9300      	str	r3, [sp, #0]
		if (skip) {
   2263c:	f1b9 0f00 	cmp.w	r9, #0
   22640:	d14c      	bne.n	226dc <gatt_find_info_rsp+0x100>
		switch (u.uuid.type) {
   22642:	f89d 3010 	ldrb.w	r3, [sp, #16]
   22646:	b3b3      	cbz	r3, 226b6 <gatt_find_info_rsp+0xda>
   22648:	2b02      	cmp	r3, #2
   2264a:	d03b      	beq.n	226c4 <gatt_find_info_rsp+0xe8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   2264c:	6831      	ldr	r1, [r6, #0]
   2264e:	2900      	cmp	r1, #0
   22650:	d13f      	bne.n	226d2 <gatt_find_info_rsp+0xf6>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   22652:	7c33      	ldrb	r3, [r6, #16]
   22654:	2b04      	cmp	r3, #4
   22656:	d146      	bne.n	226e6 <gatt_find_info_rsp+0x10a>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   22658:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2265c:	a902      	add	r1, sp, #8
   2265e:	4638      	mov	r0, r7
   22660:	f88d b008 	strb.w	fp, [sp, #8]
   22664:	f8ad 300a 	strh.w	r3, [sp, #10]
   22668:	f7fd fca0 	bl	1ffac <bt_uuid_cmp>
   2266c:	b3b0      	cbz	r0, 226dc <gatt_find_info_rsp+0x100>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   2266e:	f642 0301 	movw	r3, #10241	; 0x2801
   22672:	a903      	add	r1, sp, #12
   22674:	4638      	mov	r0, r7
   22676:	f88d b00c 	strb.w	fp, [sp, #12]
   2267a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2267e:	f7fd fc95 	bl	1ffac <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   22682:	b358      	cbz	r0, 226dc <gatt_find_info_rsp+0x100>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   22684:	f642 0302 	movw	r3, #10242	; 0x2802
   22688:	a909      	add	r1, sp, #36	; 0x24
   2268a:	4638      	mov	r0, r7
   2268c:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
   22690:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   22694:	f7fd fc8a 	bl	1ffac <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   22698:	b300      	cbz	r0, 226dc <gatt_find_info_rsp+0x100>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   2269a:	f642 0303 	movw	r3, #10243	; 0x2803
   2269e:	a909      	add	r1, sp, #36	; 0x24
   226a0:	4638      	mov	r0, r7
   226a2:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
   226a6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   226aa:	f7fd fc7f 	bl	1ffac <bt_uuid_cmp>
   226ae:	b9d0      	cbnz	r0, 226e6 <gatt_find_info_rsp+0x10a>
				skip = true;
   226b0:	f04f 0901 	mov.w	r9, #1
   226b4:	e014      	b.n	226e0 <gatt_find_info_rsp+0x104>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   226b6:	78ab      	ldrb	r3, [r5, #2]
   226b8:	78ea      	ldrb	r2, [r5, #3]
   226ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   226be:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   226c2:	e7c3      	b.n	2264c <gatt_find_info_rsp+0x70>
			memcpy(u.u128.val, info.i128->uuid, 16);
   226c4:	2210      	movs	r2, #16
   226c6:	1ca9      	adds	r1, r5, #2
   226c8:	f10d 0011 	add.w	r0, sp, #17
   226cc:	f7fd fc15 	bl	1fefa <memcpy>
			break;
   226d0:	e7bc      	b.n	2264c <gatt_find_info_rsp+0x70>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   226d2:	4638      	mov	r0, r7
   226d4:	f7fd fc6a 	bl	1ffac <bt_uuid_cmp>
   226d8:	2800      	cmp	r0, #0
   226da:	d0ba      	beq.n	22652 <gatt_find_info_rsp+0x76>
			skip = false;
   226dc:	f04f 0900 	mov.w	r9, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   226e0:	3c01      	subs	r4, #1
   226e2:	4455      	add	r5, sl
   226e4:	e79b      	b.n	2261e <gatt_find_info_rsp+0x42>
		attr = (struct bt_gatt_attr) {
   226e6:	2210      	movs	r2, #16
   226e8:	2100      	movs	r1, #0
   226ea:	a80a      	add	r0, sp, #40	; 0x28
   226ec:	f7fd fc10 	bl	1ff10 <memset>
   226f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   226f4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   226f8:	9709      	str	r7, [sp, #36]	; 0x24
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   226fa:	6873      	ldr	r3, [r6, #4]
   226fc:	4632      	mov	r2, r6
   226fe:	a909      	add	r1, sp, #36	; 0x24
   22700:	4640      	mov	r0, r8
   22702:	4798      	blx	r3
   22704:	2800      	cmp	r0, #0
   22706:	d1eb      	bne.n	226e0 <gatt_find_info_rsp+0x104>
}
   22708:	b00f      	add	sp, #60	; 0x3c
   2270a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	params->func(conn, NULL, params);
   2270e:	6873      	ldr	r3, [r6, #4]
   22710:	4632      	mov	r2, r6
   22712:	2100      	movs	r1, #0
   22714:	4640      	mov	r0, r8
   22716:	4798      	blx	r3
   22718:	e7f6      	b.n	22708 <gatt_find_info_rsp+0x12c>

0002271a <bt_gatt_cancel>:
{
   2271a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2271c:	4604      	mov	r4, r0
   2271e:	460d      	mov	r5, r1
	k_sched_lock();
   22720:	f7f9 fb10 	bl	1bd44 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   22724:	4629      	mov	r1, r5
   22726:	4620      	mov	r0, r4
   22728:	f7ff f9b0 	bl	21a8c <bt_att_find_req_by_user_data>
	if (req) {
   2272c:	4601      	mov	r1, r0
   2272e:	b920      	cbnz	r0, 2273a <bt_gatt_cancel+0x20>
}
   22730:	b002      	add	sp, #8
   22732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   22736:	f7f9 bb19 	b.w	1bd6c <k_sched_unlock>
		func = req->func;
   2273a:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2273c:	4620      	mov	r0, r4
   2273e:	f7f3 fce1 	bl	16104 <bt_att_req_cancel>
	k_sched_unlock();
   22742:	f7f9 fb13 	bl	1bd6c <k_sched_unlock>
	if (func) {
   22746:	b12e      	cbz	r6, 22754 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   22748:	2300      	movs	r3, #0
   2274a:	9500      	str	r5, [sp, #0]
   2274c:	461a      	mov	r2, r3
   2274e:	210e      	movs	r1, #14
   22750:	4620      	mov	r0, r4
   22752:	47b0      	blx	r6
}
   22754:	b002      	add	sp, #8
   22756:	bd70      	pop	{r4, r5, r6, pc}

00022758 <bt_gatt_notification>:
{
   22758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2275c:	4606      	mov	r6, r0
   2275e:	4688      	mov	r8, r1
   22760:	4691      	mov	r9, r2
   22762:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   22764:	f7f3 fd6e 	bl	16244 <gatt_sub_find>
	if (!sub) {
   22768:	b320      	cbz	r0, 227b4 <bt_gatt_notification+0x5c>
	return list->head;
   2276a:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2276c:	b314      	cbz	r4, 227b4 <bt_gatt_notification+0x5c>
	return node->next;
   2276e:	6825      	ldr	r5, [r4, #0]
   22770:	b105      	cbz	r5, 22774 <bt_gatt_notification+0x1c>
   22772:	3d18      	subs	r5, #24
		if (handle != params->value_handle) {
   22774:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   22778:	4543      	cmp	r3, r8
   2277a:	d118      	bne.n	227ae <bt_gatt_notification+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2277c:	3c18      	subs	r4, #24
   2277e:	e007      	b.n	22790 <bt_gatt_notification+0x38>
   22780:	462c      	mov	r4, r5
   22782:	69ad      	ldr	r5, [r5, #24]
   22784:	89a3      	ldrh	r3, [r4, #12]
   22786:	b1bd      	cbz	r5, 227b8 <bt_gatt_notification+0x60>
		if (handle != params->value_handle) {
   22788:	4543      	cmp	r3, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2278a:	f1a5 0518 	sub.w	r5, r5, #24
		if (handle != params->value_handle) {
   2278e:	d1f7      	bne.n	22780 <bt_gatt_notification+0x28>
		if (check_subscribe_security_level(conn, params)) {
   22790:	7a72      	ldrb	r2, [r6, #9]
   22792:	7ca3      	ldrb	r3, [r4, #18]
   22794:	429a      	cmp	r2, r3
   22796:	d30a      	bcc.n	227ae <bt_gatt_notification+0x56>
			if (params->notify(conn, params, data, length) ==
   22798:	6827      	ldr	r7, [r4, #0]
   2279a:	4653      	mov	r3, sl
   2279c:	464a      	mov	r2, r9
   2279e:	4621      	mov	r1, r4
   227a0:	4630      	mov	r0, r6
   227a2:	47b8      	blx	r7
   227a4:	b918      	cbnz	r0, 227ae <bt_gatt_notification+0x56>
				bt_gatt_unsubscribe(conn, params);
   227a6:	4621      	mov	r1, r4
   227a8:	4630      	mov	r0, r6
   227aa:	f7f4 fc7d 	bl	170a8 <bt_gatt_unsubscribe>
   227ae:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   227b0:	2d00      	cmp	r5, #0
   227b2:	d1e6      	bne.n	22782 <bt_gatt_notification+0x2a>
}
   227b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   227b8:	4543      	cmp	r3, r8
   227ba:	d0e9      	beq.n	22790 <bt_gatt_notification+0x38>
   227bc:	e7fa      	b.n	227b4 <bt_gatt_notification+0x5c>

000227be <bt_gatt_mult_notification>:
{
   227be:	e92d 4dff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
   227c2:	4680      	mov	r8, r0
   227c4:	460c      	mov	r4, r1
   227c6:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   227c8:	f7f3 fd3c 	bl	16244 <gatt_sub_find>
	if (!sub) {
   227cc:	4607      	mov	r7, r0
   227ce:	b140      	cbz	r0, 227e2 <bt_gatt_mult_notification+0x24>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   227d0:	462a      	mov	r2, r5
   227d2:	4621      	mov	r1, r4
   227d4:	a801      	add	r0, sp, #4
   227d6:	f000 ff94 	bl	23702 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   227da:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   227de:	2b04      	cmp	r3, #4
   227e0:	d802      	bhi.n	227e8 <bt_gatt_mult_notification+0x2a>
}
   227e2:	b004      	add	sp, #16
   227e4:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   227e8:	2104      	movs	r1, #4
   227ea:	eb0d 0001 	add.w	r0, sp, r1
   227ee:	f000 ffc3 	bl	23778 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   227f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   227f6:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		handle = sys_cpu_to_le16(nfy->handle);
   227fa:	f8b0 a000 	ldrh.w	sl, [r0]
		if (len > buf.len) {
   227fe:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   22800:	4606      	mov	r6, r0
		if (len > buf.len) {
   22802:	d3ee      	bcc.n	227e2 <bt_gatt_mult_notification+0x24>
	return list->head;
   22804:	68bc      	ldr	r4, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   22806:	b324      	cbz	r4, 22852 <bt_gatt_mult_notification+0x94>
	return node->next;
   22808:	6825      	ldr	r5, [r4, #0]
   2280a:	b105      	cbz	r5, 2280e <bt_gatt_mult_notification+0x50>
   2280c:	3d18      	subs	r5, #24
			if (handle != params->value_handle) {
   2280e:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   22812:	4553      	cmp	r3, sl
   22814:	d11a      	bne.n	2284c <bt_gatt_mult_notification+0x8e>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   22816:	3c18      	subs	r4, #24
   22818:	e007      	b.n	2282a <bt_gatt_mult_notification+0x6c>
   2281a:	462c      	mov	r4, r5
   2281c:	69ad      	ldr	r5, [r5, #24]
   2281e:	89a3      	ldrh	r3, [r4, #12]
   22820:	b1e5      	cbz	r5, 2285c <bt_gatt_mult_notification+0x9e>
			if (handle != params->value_handle) {
   22822:	4553      	cmp	r3, sl
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   22824:	f1a5 0518 	sub.w	r5, r5, #24
			if (handle != params->value_handle) {
   22828:	d1f7      	bne.n	2281a <bt_gatt_mult_notification+0x5c>
			if (check_subscribe_security_level(conn, params)) {
   2282a:	7ca2      	ldrb	r2, [r4, #18]
   2282c:	f898 3009 	ldrb.w	r3, [r8, #9]
   22830:	429a      	cmp	r2, r3
   22832:	d80b      	bhi.n	2284c <bt_gatt_mult_notification+0x8e>
				if (params->notify(conn, params, nfy->value, len) ==
   22834:	f8d4 c000 	ldr.w	ip, [r4]
   22838:	465b      	mov	r3, fp
   2283a:	1d32      	adds	r2, r6, #4
   2283c:	4621      	mov	r1, r4
   2283e:	4640      	mov	r0, r8
   22840:	47e0      	blx	ip
   22842:	b918      	cbnz	r0, 2284c <bt_gatt_mult_notification+0x8e>
					bt_gatt_unsubscribe(conn, params);
   22844:	4621      	mov	r1, r4
   22846:	4640      	mov	r0, r8
   22848:	f7f4 fc2e 	bl	170a8 <bt_gatt_unsubscribe>
   2284c:	462c      	mov	r4, r5
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   2284e:	2d00      	cmp	r5, #0
   22850:	d1e4      	bne.n	2281c <bt_gatt_mult_notification+0x5e>
		net_buf_simple_pull_mem(&buf, len);
   22852:	4659      	mov	r1, fp
   22854:	a801      	add	r0, sp, #4
   22856:	f000 ff8f 	bl	23778 <net_buf_simple_pull_mem>
   2285a:	e7be      	b.n	227da <bt_gatt_mult_notification+0x1c>
			if (handle != params->value_handle) {
   2285c:	4553      	cmp	r3, sl
   2285e:	d0e4      	beq.n	2282a <bt_gatt_mult_notification+0x6c>
   22860:	e7f7      	b.n	22852 <bt_gatt_mult_notification+0x94>

00022862 <bt_gatt_change_aware>:
{
   22862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22866:	4605      	mov	r5, r0
   22868:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   2286a:	f7f3 fc77 	bl	1615c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2286e:	4604      	mov	r4, r0
   22870:	b1d8      	cbz	r0, 228aa <bt_gatt_change_aware+0x48>
   22872:	7a03      	ldrb	r3, [r0, #8]
   22874:	07db      	lsls	r3, r3, #31
   22876:	d518      	bpl.n	228aa <bt_gatt_change_aware+0x48>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   22878:	f100 070c 	add.w	r7, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2287c:	4638      	mov	r0, r7
   2287e:	f7ff f9c7 	bl	21c10 <atomic_get>
   22882:	f010 0601 	ands.w	r6, r0, #1
   22886:	d110      	bne.n	228aa <bt_gatt_change_aware+0x48>
	if (!req) {
   22888:	f1b8 0f00 	cmp.w	r8, #0
   2288c:	d00e      	beq.n	228ac <bt_gatt_change_aware+0x4a>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2288e:	f06f 0102 	mvn.w	r1, #2
   22892:	4638      	mov	r0, r7
   22894:	f7ff f9d4 	bl	21c40 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   22898:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2289c:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2289e:	d008      	beq.n	228b2 <bt_gatt_change_aware+0x50>
		bt_att_clear_out_of_sync_sent(conn);
   228a0:	f7ff f910 	bl	21ac4 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   228a4:	4620      	mov	r0, r4
   228a6:	f7ff fbab 	bl	22000 <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   228aa:	2601      	movs	r6, #1
}
   228ac:	4630      	mov	r0, r6
   228ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   228b2:	f7ff f905 	bl	21ac0 <bt_att_fixed_chan_only>
   228b6:	2800      	cmp	r0, #0
   228b8:	d0f8      	beq.n	228ac <bt_gatt_change_aware+0x4a>
   228ba:	4628      	mov	r0, r5
   228bc:	f7ff f912 	bl	21ae4 <bt_att_out_of_sync_sent_on_fixed>
   228c0:	2800      	cmp	r0, #0
   228c2:	d0f3      	beq.n	228ac <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   228c4:	f06f 0102 	mvn.w	r1, #2
   228c8:	4638      	mov	r0, r7
   228ca:	f7ff f9b9 	bl	21c40 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   228ce:	4628      	mov	r0, r5
   228d0:	e7e6      	b.n	228a0 <bt_gatt_change_aware+0x3e>

000228d2 <smp_pairing_req>:
}
   228d2:	2007      	movs	r0, #7
   228d4:	4770      	bx	lr

000228d6 <smp_chan_get>:
{
   228d6:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   228d8:	2106      	movs	r1, #6
   228da:	f7fe fb01 	bl	20ee0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   228de:	b100      	cbz	r0, 228e2 <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   228e0:	38ec      	subs	r0, #236	; 0xec
}
   228e2:	bd08      	pop	{r3, pc}

000228e4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   228e4:	f3bf 8f5b 	dmb	ish
   228e8:	6800      	ldr	r0, [r0, #0]
   228ea:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   228ee:	4108      	asrs	r0, r1
}
   228f0:	f000 0001 	and.w	r0, r0, #1
   228f4:	4770      	bx	lr

000228f6 <update_keys_check>:
{
   228f6:	b510      	push	{r4, lr}
   228f8:	4603      	mov	r3, r0
	if (!keys ||
   228fa:	b1d9      	cbz	r1, 22934 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   228fc:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   228fe:	f010 0f24 	tst.w	r0, #36	; 0x24
   22902:	d017      	beq.n	22934 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   22904:	7d1a      	ldrb	r2, [r3, #20]
   22906:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   22908:	7b09      	ldrb	r1, [r1, #12]
   2290a:	42a2      	cmp	r2, r4
   2290c:	bf28      	it	cs
   2290e:	4622      	movcs	r2, r4
   22910:	4291      	cmp	r1, r2
   22912:	d901      	bls.n	22918 <update_keys_check+0x22>
			return false;
   22914:	2000      	movs	r0, #0
}
   22916:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   22918:	0682      	lsls	r2, r0, #26
   2291a:	d404      	bmi.n	22926 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2291c:	7a18      	ldrb	r0, [r3, #8]
   2291e:	3800      	subs	r0, #0
   22920:	bf18      	it	ne
   22922:	2001      	movne	r0, #1
   22924:	e7f7      	b.n	22916 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   22926:	2105      	movs	r1, #5
   22928:	1d18      	adds	r0, r3, #4
   2292a:	f7ff ffdb 	bl	228e4 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2292e:	2800      	cmp	r0, #0
   22930:	d1f4      	bne.n	2291c <update_keys_check+0x26>
   22932:	e7ef      	b.n	22914 <update_keys_check+0x1e>
	return true;
   22934:	2001      	movs	r0, #1
   22936:	e7ee      	b.n	22916 <update_keys_check+0x20>

00022938 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22938:	2301      	movs	r3, #1
   2293a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2293c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2293e:	f3bf 8f5b 	dmb	ish
   22942:	e850 2f00 	ldrex	r2, [r0]
   22946:	401a      	ands	r2, r3
   22948:	e840 2100 	strex	r1, r2, [r0]
   2294c:	2900      	cmp	r1, #0
   2294e:	d1f8      	bne.n	22942 <atomic_clear_bit+0xa>
   22950:	f3bf 8f5b 	dmb	ish
}
   22954:	4770      	bx	lr

00022956 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   22956:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22958:	4613      	mov	r3, r2
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   2295a:	2200      	movs	r2, #0
   2295c:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2295e:	4604      	mov	r4, r0
   22960:	460d      	mov	r5, r1
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   22962:	460a      	mov	r2, r1
   22964:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   22968:	2106      	movs	r1, #6
   2296a:	f7fe fa1a 	bl	20da2 <bt_l2cap_send_cb>
	if (err) {
   2296e:	b128      	cbz	r0, 2297c <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   22970:	4628      	mov	r0, r5
}
   22972:	b003      	add	sp, #12
   22974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   22978:	f7f5 be74 	b.w	18664 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2297c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   22980:	2300      	movs	r3, #0
   22982:	f504 7090 	add.w	r0, r4, #288	; 0x120
}
   22986:	b003      	add	sp, #12
   22988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2298c:	f7f8 bfcc 	b.w	1b928 <k_work_reschedule>

00022990 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   22990:	2007      	movs	r0, #7
   22992:	4770      	bx	lr

00022994 <atomic_test_and_clear_bit>:
{
   22994:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   22996:	2301      	movs	r3, #1
   22998:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2299c:	43ca      	mvns	r2, r1
   2299e:	f3bf 8f5b 	dmb	ish
   229a2:	e850 3f00 	ldrex	r3, [r0]
   229a6:	ea03 0402 	and.w	r4, r3, r2
   229aa:	e840 4500 	strex	r5, r4, [r0]
   229ae:	2d00      	cmp	r5, #0
   229b0:	d1f7      	bne.n	229a2 <atomic_test_and_clear_bit+0xe>
   229b2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   229b6:	4219      	tst	r1, r3
}
   229b8:	bf14      	ite	ne
   229ba:	2001      	movne	r0, #1
   229bc:	2000      	moveq	r0, #0
   229be:	bd30      	pop	{r4, r5, pc}

000229c0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   229c0:	2301      	movs	r3, #1
   229c2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   229c4:	f3bf 8f5b 	dmb	ish
   229c8:	e850 2f00 	ldrex	r2, [r0]
   229cc:	431a      	orrs	r2, r3
   229ce:	e840 2100 	strex	r1, r2, [r0]
   229d2:	2900      	cmp	r1, #0
   229d4:	d1f8      	bne.n	229c8 <atomic_set_bit+0x8>
   229d6:	f3bf 8f5b 	dmb	ish
}
   229da:	4770      	bx	lr

000229dc <smp_keypress_notif>:
{
   229dc:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   229de:	210e      	movs	r1, #14
   229e0:	f7ff ffee 	bl	229c0 <atomic_set_bit>
}
   229e4:	2000      	movs	r0, #0
   229e6:	bd08      	pop	{r3, pc}

000229e8 <smp_dhkey_check>:
{
   229e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   229ea:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   229ee:	78dd      	ldrb	r5, [r3, #3]
{
   229f0:	b091      	sub	sp, #68	; 0x44
   229f2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   229f4:	2d00      	cmp	r5, #0
   229f6:	d15c      	bne.n	22ab2 <smp_dhkey_check+0xca>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   229f8:	68cf      	ldr	r7, [r1, #12]
		(void)memset(r, 0, sizeof(r));
   229fa:	2210      	movs	r2, #16
   229fc:	4629      	mov	r1, r5
   229fe:	a80c      	add	r0, sp, #48	; 0x30
   22a00:	f7fd fa86 	bl	1ff10 <memset>
		switch (smp->method) {
   22a04:	7a23      	ldrb	r3, [r4, #8]
   22a06:	2b05      	cmp	r3, #5
   22a08:	d820      	bhi.n	22a4c <smp_dhkey_check+0x64>
   22a0a:	e8df f003 	tbb	[pc, r3]
   22a0e:	0309      	.short	0x0309
   22a10:	231f0903 	.word	0x231f0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   22a14:	2204      	movs	r2, #4
   22a16:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   22a1a:	a80c      	add	r0, sp, #48	; 0x30
   22a1c:	f7fd fa6d 	bl	1fefa <memcpy>
				 &smp->chan.chan.conn->le.resp_addr,
   22a20:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
				 &smp->chan.chan.conn->le.init_addr, e)) {
   22a24:	f103 028f 	add.w	r2, r3, #143	; 0x8f
				 &smp->chan.chan.conn->le.resp_addr,
   22a28:	3396      	adds	r3, #150	; 0x96
		if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   22a2a:	ae08      	add	r6, sp, #32
   22a2c:	9301      	str	r3, [sp, #4]
   22a2e:	f104 0311 	add.w	r3, r4, #17
   22a32:	9202      	str	r2, [sp, #8]
   22a34:	9300      	str	r3, [sp, #0]
   22a36:	9603      	str	r6, [sp, #12]
   22a38:	ab0c      	add	r3, sp, #48	; 0x30
   22a3a:	f104 0227 	add.w	r2, r4, #39	; 0x27
   22a3e:	f104 0137 	add.w	r1, r4, #55	; 0x37
   22a42:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   22a46:	f000 fdb3 	bl	235b0 <bt_crypto_f6>
   22a4a:	b148      	cbz	r0, 22a60 <smp_dhkey_check+0x78>
			return BT_SMP_ERR_UNSPECIFIED;
   22a4c:	2508      	movs	r5, #8
}
   22a4e:	4628      	mov	r0, r5
   22a50:	b011      	add	sp, #68	; 0x44
   22a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (smp->oobd_local) {
   22a54:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   22a58:	2900      	cmp	r1, #0
   22a5a:	d0e1      	beq.n	22a20 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   22a5c:	2210      	movs	r2, #16
   22a5e:	e7dc      	b.n	22a1a <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   22a60:	4630      	mov	r0, r6
   22a62:	2210      	movs	r2, #16
   22a64:	4639      	mov	r1, r7
   22a66:	f7fd fa21 	bl	1feac <memcmp>
   22a6a:	4606      	mov	r6, r0
   22a6c:	b9f8      	cbnz	r0, 22aae <smp_dhkey_check+0xc6>
	return MIN(req->max_key_size, rsp->max_key_size);
   22a6e:	7d23      	ldrb	r3, [r4, #20]
   22a70:	7b67      	ldrb	r7, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   22a72:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   22a74:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   22a76:	f04f 0202 	mov.w	r2, #2
   22a7a:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   22a7c:	bf28      	it	cs
   22a7e:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   22a80:	f7fd fa46 	bl	1ff10 <memset>
		(void)memset(rand, 0, sizeof(rand));
   22a84:	2208      	movs	r2, #8
   22a86:	4631      	mov	r1, r6
   22a88:	a806      	add	r0, sp, #24
   22a8a:	f7fd fa41 	bl	1ff10 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   22a8e:	9700      	str	r7, [sp, #0]
   22a90:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   22a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
   22a98:	aa05      	add	r2, sp, #20
   22a9a:	a906      	add	r1, sp, #24
   22a9c:	f7fe f800 	bl	20aa0 <bt_conn_le_start_encryption>
   22aa0:	2800      	cmp	r0, #0
   22aa2:	dbd3      	blt.n	22a4c <smp_dhkey_check+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   22aa4:	2101      	movs	r1, #1
   22aa6:	1d20      	adds	r0, r4, #4
   22aa8:	f7ff ff8a 	bl	229c0 <atomic_set_bit>
		return 0;
   22aac:	e7cf      	b.n	22a4e <smp_dhkey_check+0x66>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   22aae:	250b      	movs	r5, #11
   22ab0:	e7cd      	b.n	22a4e <smp_dhkey_check+0x66>
	return 0;
   22ab2:	2500      	movs	r5, #0
   22ab4:	e7cb      	b.n	22a4e <smp_dhkey_check+0x66>

00022ab6 <smp_ident_info>:
{
   22ab6:	b538      	push	{r3, r4, r5, lr}
   22ab8:	4604      	mov	r4, r0
   22aba:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   22abc:	3004      	adds	r0, #4
   22abe:	210d      	movs	r1, #13
   22ac0:	f7ff ff10 	bl	228e4 <atomic_test_bit>
   22ac4:	b170      	cbz	r0, 22ae4 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   22ac6:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   22ac8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   22acc:	2002      	movs	r0, #2
   22ace:	7a19      	ldrb	r1, [r3, #8]
   22ad0:	f103 0288 	add.w	r2, r3, #136	; 0x88
   22ad4:	f000 fcef 	bl	234b6 <bt_keys_get_type>
		if (!keys) {
   22ad8:	b150      	cbz	r0, 22af0 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   22ada:	2210      	movs	r2, #16
   22adc:	4629      	mov	r1, r5
   22ade:	302a      	adds	r0, #42	; 0x2a
   22ae0:	f7fd fa0b 	bl	1fefa <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   22ae4:	4620      	mov	r0, r4
   22ae6:	2109      	movs	r1, #9
   22ae8:	f7ff ff6a 	bl	229c0 <atomic_set_bit>
	return 0;
   22aec:	2000      	movs	r0, #0
}
   22aee:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   22af0:	2008      	movs	r0, #8
   22af2:	e7fc      	b.n	22aee <smp_ident_info+0x38>

00022af4 <smp_encrypt_info>:
{
   22af4:	b538      	push	{r3, r4, r5, lr}
   22af6:	4604      	mov	r4, r0
   22af8:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   22afa:	3004      	adds	r0, #4
   22afc:	210d      	movs	r1, #13
   22afe:	f7ff fef1 	bl	228e4 <atomic_test_bit>
   22b02:	b170      	cbz	r0, 22b22 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   22b04:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   22b06:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   22b0a:	2004      	movs	r0, #4
   22b0c:	7a19      	ldrb	r1, [r3, #8]
   22b0e:	f103 0288 	add.w	r2, r3, #136	; 0x88
   22b12:	f000 fcd0 	bl	234b6 <bt_keys_get_type>
		if (!keys) {
   22b16:	b150      	cbz	r0, 22b2e <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   22b18:	2210      	movs	r2, #16
   22b1a:	4629      	mov	r1, r5
   22b1c:	301a      	adds	r0, #26
   22b1e:	f7fd f9ec 	bl	1fefa <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   22b22:	4620      	mov	r0, r4
   22b24:	2107      	movs	r1, #7
   22b26:	f7ff ff4b 	bl	229c0 <atomic_set_bit>
	return 0;
   22b2a:	2000      	movs	r0, #0
}
   22b2c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   22b2e:	2008      	movs	r0, #8
   22b30:	e7fc      	b.n	22b2c <smp_encrypt_info+0x38>

00022b32 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   22b32:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   22b34:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   22b36:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   22b38:	4628      	mov	r0, r5
   22b3a:	2104      	movs	r1, #4
   22b3c:	f7ff fed2 	bl	228e4 <atomic_test_bit>
   22b40:	b168      	cbz	r0, 22b5e <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   22b42:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   22b44:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   22b46:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   22b48:	4608      	mov	r0, r1
   22b4a:	f7fe f927 	bl	20d9c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   22b4e:	4604      	mov	r4, r0
   22b50:	b940      	cbnz	r0, 22b64 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   22b52:	2104      	movs	r1, #4
   22b54:	4628      	mov	r0, r5
   22b56:	f7ff ff33 	bl	229c0 <atomic_set_bit>
}
   22b5a:	4620      	mov	r0, r4
   22b5c:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   22b5e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   22b62:	e7ef      	b.n	22b44 <smp_create_pdu.constprop.0+0x12>
   22b64:	2101      	movs	r1, #1
   22b66:	300c      	adds	r0, #12
   22b68:	f000 fdd5 	bl	23716 <net_buf_simple_add>
	hdr->code = op;
   22b6c:	7006      	strb	r6, [r0, #0]
	return buf;
   22b6e:	e7f4      	b.n	22b5a <smp_create_pdu.constprop.0+0x28>

00022b70 <smp_send_pairing_random>:
{
   22b70:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   22b72:	2104      	movs	r1, #4
{
   22b74:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   22b76:	f7ff ffdc 	bl	22b32 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   22b7a:	4604      	mov	r4, r0
   22b7c:	b178      	cbz	r0, 22b9e <smp_send_pairing_random+0x2e>
   22b7e:	2110      	movs	r1, #16
   22b80:	300c      	adds	r0, #12
   22b82:	f000 fdc8 	bl	23716 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   22b86:	2210      	movs	r2, #16
   22b88:	f105 0127 	add.w	r1, r5, #39	; 0x27
   22b8c:	f7fd f9b5 	bl	1fefa <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   22b90:	4628      	mov	r0, r5
   22b92:	2200      	movs	r2, #0
   22b94:	4621      	mov	r1, r4
   22b96:	f7ff fede 	bl	22956 <smp_send.constprop.0>
	return 0;
   22b9a:	2000      	movs	r0, #0
}
   22b9c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   22b9e:	2008      	movs	r0, #8
   22ba0:	e7fc      	b.n	22b9c <smp_send_pairing_random+0x2c>

00022ba2 <smp_pairing_confirm>:
{
   22ba2:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   22ba4:	68cd      	ldr	r5, [r1, #12]
{
   22ba6:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   22ba8:	210b      	movs	r1, #11
   22baa:	3004      	adds	r0, #4
   22bac:	f7ff fec4 	bl	22938 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   22bb0:	2210      	movs	r2, #16
   22bb2:	4629      	mov	r1, r5
   22bb4:	f104 0017 	add.w	r0, r4, #23
   22bb8:	f7fd f99f 	bl	1fefa <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   22bbc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   22bc0:	78db      	ldrb	r3, [r3, #3]
   22bc2:	b93b      	cbnz	r3, 22bd4 <smp_pairing_confirm+0x32>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   22bc4:	4620      	mov	r0, r4
   22bc6:	2104      	movs	r1, #4
   22bc8:	f7ff fefa 	bl	229c0 <atomic_set_bit>
}
   22bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   22bd0:	f7ff bfce 	b.w	22b70 <smp_send_pairing_random>
}
   22bd4:	2000      	movs	r0, #0
   22bd6:	bd38      	pop	{r3, r4, r5, pc}

00022bd8 <compute_and_send_central_dhcheck>:
{
   22bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22bdc:	4604      	mov	r4, r0
   22bde:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   22be0:	2210      	movs	r2, #16
   22be2:	2100      	movs	r1, #0
   22be4:	a808      	add	r0, sp, #32
   22be6:	f7fd f993 	bl	1ff10 <memset>
	switch (smp->method) {
   22bea:	7a23      	ldrb	r3, [r4, #8]
   22bec:	2b05      	cmp	r3, #5
   22bee:	d821      	bhi.n	22c34 <compute_and_send_central_dhcheck+0x5c>
   22bf0:	e8df f003 	tbb	[pc, r3]
   22bf4:	09030309 	.word	0x09030309
   22bf8:	2420      	.short	0x2420
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   22bfa:	2204      	movs	r2, #4
   22bfc:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   22c00:	a808      	add	r0, sp, #32
   22c02:	f7fd f97a 	bl	1fefa <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   22c06:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   22c0a:	f104 0247 	add.w	r2, r4, #71	; 0x47
   22c0e:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   22c12:	e9cd 5201 	strd	r5, r2, [sp, #4]
   22c16:	f104 0627 	add.w	r6, r4, #39	; 0x27
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   22c1a:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   22c1e:	f104 0837 	add.w	r8, r4, #55	; 0x37
   22c22:	9200      	str	r2, [sp, #0]
   22c24:	338f      	adds	r3, #143	; 0x8f
   22c26:	4642      	mov	r2, r8
   22c28:	4631      	mov	r1, r6
   22c2a:	f104 0097 	add.w	r0, r4, #151	; 0x97
   22c2e:	f7f5 fbbb 	bl	183a8 <bt_crypto_f5>
   22c32:	b148      	cbz	r0, 22c48 <compute_and_send_central_dhcheck+0x70>
		return BT_SMP_ERR_UNSPECIFIED;
   22c34:	2008      	movs	r0, #8
}
   22c36:	b00c      	add	sp, #48	; 0x30
   22c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (smp->oobd_remote) {
   22c3c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   22c40:	2900      	cmp	r1, #0
   22c42:	d0e0      	beq.n	22c06 <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   22c44:	2210      	movs	r2, #16
   22c46:	e7db      	b.n	22c00 <compute_and_send_central_dhcheck+0x28>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   22c48:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   22c4c:	f103 0296 	add.w	r2, r3, #150	; 0x96
   22c50:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   22c52:	9301      	str	r3, [sp, #4]
   22c54:	af04      	add	r7, sp, #16
   22c56:	f104 030a 	add.w	r3, r4, #10
   22c5a:	9202      	str	r2, [sp, #8]
   22c5c:	9300      	str	r3, [sp, #0]
   22c5e:	4628      	mov	r0, r5
   22c60:	9703      	str	r7, [sp, #12]
   22c62:	ab08      	add	r3, sp, #32
   22c64:	4642      	mov	r2, r8
   22c66:	4631      	mov	r1, r6
   22c68:	f000 fca2 	bl	235b0 <bt_crypto_f6>
   22c6c:	4605      	mov	r5, r0
   22c6e:	2800      	cmp	r0, #0
   22c70:	d1e0      	bne.n	22c34 <compute_and_send_central_dhcheck+0x5c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   22c72:	210d      	movs	r1, #13
   22c74:	4620      	mov	r0, r4
   22c76:	f7ff fea3 	bl	229c0 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   22c7a:	210d      	movs	r1, #13
   22c7c:	f7ff ff59 	bl	22b32 <smp_create_pdu.constprop.0>
	if (!buf) {
   22c80:	4606      	mov	r6, r0
   22c82:	2800      	cmp	r0, #0
   22c84:	d0d6      	beq.n	22c34 <compute_and_send_central_dhcheck+0x5c>
   22c86:	2110      	movs	r1, #16
   22c88:	300c      	adds	r0, #12
   22c8a:	f000 fd44 	bl	23716 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   22c8e:	2210      	movs	r2, #16
   22c90:	4639      	mov	r1, r7
   22c92:	f7fd f932 	bl	1fefa <memcpy>
	smp_send(smp, buf, NULL, NULL);
   22c96:	4620      	mov	r0, r4
   22c98:	462a      	mov	r2, r5
   22c9a:	4631      	mov	r1, r6
   22c9c:	f7ff fe5b 	bl	22956 <smp_send.constprop.0>
	return 0;
   22ca0:	4628      	mov	r0, r5
   22ca2:	e7c8      	b.n	22c36 <compute_and_send_central_dhcheck+0x5e>

00022ca4 <smp_reset>:
{
   22ca4:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22ca6:	1d03      	adds	r3, r0, #4
   22ca8:	4604      	mov	r4, r0
   22caa:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   22cac:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
   22cb0:	f3bf 8f5b 	dmb	ish
   22cb4:	e853 2f00 	ldrex	r2, [r3]
   22cb8:	e843 5100 	strex	r1, r5, [r3]
   22cbc:	2900      	cmp	r1, #0
   22cbe:	d1f9      	bne.n	22cb4 <smp_reset+0x10>
   22cc0:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   22cc4:	f504 7090 	add.w	r0, r4, #288	; 0x120
   22cc8:	f001 faf4 	bl	242b4 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   22ccc:	7225      	strb	r5, [r4, #8]
   22cce:	f3bf 8f5b 	dmb	ish
   22cd2:	e854 3f00 	ldrex	r3, [r4]
   22cd6:	e844 5200 	strex	r2, r5, [r4]
   22cda:	2a00      	cmp	r2, #0
   22cdc:	d1f9      	bne.n	22cd2 <smp_reset+0x2e>
   22cde:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   22ce2:	78f3      	ldrb	r3, [r6, #3]
   22ce4:	b92b      	cbnz	r3, 22cf2 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   22ce6:	4620      	mov	r0, r4
   22ce8:	210b      	movs	r1, #11
}
   22cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   22cee:	f7ff be67 	b.w	229c0 <atomic_set_bit>
}
   22cf2:	bd70      	pop	{r4, r5, r6, pc}

00022cf4 <smp_c1>:
{
   22cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22cf8:	b089      	sub	sp, #36	; 0x24
   22cfa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   22cfe:	4699      	mov	r9, r3
	p1[0] = ia->type;
   22d00:	783b      	ldrb	r3, [r7, #0]
{
   22d02:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   22d04:	f88d 3000 	strb.w	r3, [sp]
{
   22d08:	460c      	mov	r4, r1
	p1[1] = ra->type;
   22d0a:	f898 3000 	ldrb.w	r3, [r8]
   22d0e:	f88d 3001 	strb.w	r3, [sp, #1]
{
   22d12:	4611      	mov	r1, r2
   22d14:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   22d16:	2207      	movs	r2, #7
   22d18:	f10d 0002 	add.w	r0, sp, #2
   22d1c:	f7fd f8ed 	bl	1fefa <memcpy>
	memcpy(p1 + 9, pres, 7);
   22d20:	2207      	movs	r2, #7
   22d22:	4649      	mov	r1, r9
   22d24:	f10d 0009 	add.w	r0, sp, #9
   22d28:	f7fd f8e7 	bl	1fefa <memcpy>
	while (len--) {
   22d2c:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   22d30:	462a      	mov	r2, r5
   22d32:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   22d34:	f814 3b01 	ldrb.w	r3, [r4], #1
   22d38:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   22d3c:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   22d3e:	ea83 030c 	eor.w	r3, r3, ip
   22d42:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   22d46:	d1f5      	bne.n	22d34 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   22d48:	462a      	mov	r2, r5
   22d4a:	4629      	mov	r1, r5
   22d4c:	4630      	mov	r0, r6
   22d4e:	f000 ff3e 	bl	23bce <bt_encrypt_le>
	if (err) {
   22d52:	4604      	mov	r4, r0
   22d54:	bb20      	cbnz	r0, 22da0 <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   22d56:	2206      	movs	r2, #6
   22d58:	f108 0101 	add.w	r1, r8, #1
   22d5c:	a804      	add	r0, sp, #16
   22d5e:	f7fd f8cc 	bl	1fefa <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   22d62:	2206      	movs	r2, #6
   22d64:	1c79      	adds	r1, r7, #1
   22d66:	f10d 0016 	add.w	r0, sp, #22
   22d6a:	f7fd f8c6 	bl	1fefa <memcpy>
	(void)memset(p2 + 12, 0, 4);
   22d6e:	2204      	movs	r2, #4
   22d70:	4621      	mov	r1, r4
   22d72:	a807      	add	r0, sp, #28
   22d74:	f7fd f8cc 	bl	1ff10 <memset>
	while (len--) {
   22d78:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   22d7c:	462a      	mov	r2, r5
   22d7e:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   22d80:	f812 1b01 	ldrb.w	r1, [r2], #1
   22d84:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   22d88:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   22d8a:	ea81 0104 	eor.w	r1, r1, r4
   22d8e:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   22d92:	d1f5      	bne.n	22d80 <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   22d94:	462a      	mov	r2, r5
   22d96:	4629      	mov	r1, r5
   22d98:	4630      	mov	r0, r6
   22d9a:	f000 ff18 	bl	23bce <bt_encrypt_le>
   22d9e:	4604      	mov	r4, r0
}
   22da0:	4620      	mov	r0, r4
   22da2:	b009      	add	sp, #36	; 0x24
   22da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00022da8 <legacy_send_pairing_confirm>:
{
   22da8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   22daa:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   22dac:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   22db0:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   22db2:	f7ff febe 	bl	22b32 <smp_create_pdu.constprop.0>
	if (!buf) {
   22db6:	4606      	mov	r6, r0
   22db8:	b1c0      	cbz	r0, 22dec <legacy_send_pairing_confirm+0x44>
   22dba:	2110      	movs	r1, #16
   22dbc:	300c      	adds	r0, #12
   22dbe:	f000 fcaa 	bl	23716 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   22dc2:	f104 0396 	add.w	r3, r4, #150	; 0x96
   22dc6:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   22dc8:	9002      	str	r0, [sp, #8]
   22dca:	9301      	str	r3, [sp, #4]
   22dcc:	9400      	str	r4, [sp, #0]
   22dce:	f105 0310 	add.w	r3, r5, #16
   22dd2:	f105 0209 	add.w	r2, r5, #9
   22dd6:	f105 0127 	add.w	r1, r5, #39	; 0x27
   22dda:	f105 0047 	add.w	r0, r5, #71	; 0x47
   22dde:	f7ff ff89 	bl	22cf4 <smp_c1>
   22de2:	4604      	mov	r4, r0
   22de4:	b128      	cbz	r0, 22df2 <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
   22de6:	4630      	mov	r0, r6
   22de8:	f7f5 fc3c 	bl	18664 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   22dec:	2008      	movs	r0, #8
}
   22dee:	b004      	add	sp, #16
   22df0:	bd70      	pop	{r4, r5, r6, pc}
	smp_send(smp, buf, NULL, NULL);
   22df2:	4602      	mov	r2, r0
   22df4:	4631      	mov	r1, r6
   22df6:	4628      	mov	r0, r5
   22df8:	f7ff fdad 	bl	22956 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   22dfc:	1d28      	adds	r0, r5, #4
   22dfe:	4621      	mov	r1, r4
   22e00:	f7ff fd9a 	bl	22938 <atomic_clear_bit>
	return 0;
   22e04:	4620      	mov	r0, r4
   22e06:	e7f2      	b.n	22dee <legacy_send_pairing_confirm+0x46>

00022e08 <bt_smp_request_ltk>:
{
   22e08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22e0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   22e0e:	e9cd 2300 	strd	r2, r3, [sp]
   22e12:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   22e14:	f7ff fd5f 	bl	228d6 <smp_chan_get>
	if (!smp) {
   22e18:	4605      	mov	r5, r0
   22e1a:	2800      	cmp	r0, #0
   22e1c:	d07c      	beq.n	22f18 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   22e1e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   22e22:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   22e24:	f1b8 0f00 	cmp.w	r8, #0
   22e28:	d128      	bne.n	22e7c <bt_smp_request_ltk+0x74>
   22e2a:	e9dd 3200 	ldrd	r3, r2, [sp]
   22e2e:	4313      	orrs	r3, r2
   22e30:	d124      	bne.n	22e7c <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   22e32:	2103      	movs	r1, #3
   22e34:	4630      	mov	r0, r6
   22e36:	f7ff fd55 	bl	228e4 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   22e3a:	b1f8      	cbz	r0, 22e7c <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   22e3c:	2101      	movs	r1, #1
   22e3e:	4630      	mov	r0, r6
   22e40:	f7ff fd50 	bl	228e4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   22e44:	b1d0      	cbz	r0, 22e7c <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   22e46:	7d2c      	ldrb	r4, [r5, #20]
   22e48:	7b6b      	ldrb	r3, [r5, #13]
   22e4a:	429c      	cmp	r4, r3
   22e4c:	bf28      	it	cs
   22e4e:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   22e50:	4622      	mov	r2, r4
   22e52:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   22e56:	4638      	mov	r0, r7
   22e58:	f7fd f84f 	bl	1fefa <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   22e5c:	2c0f      	cmp	r4, #15
   22e5e:	d805      	bhi.n	22e6c <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   22e60:	f1c4 0210 	rsb	r2, r4, #16
   22e64:	4641      	mov	r1, r8
   22e66:	1938      	adds	r0, r7, r4
   22e68:	f7fd f852 	bl	1ff10 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   22e6c:	4630      	mov	r0, r6
   22e6e:	2101      	movs	r1, #1
   22e70:	f7ff fda6 	bl	229c0 <atomic_set_bit>
		return true;
   22e74:	2001      	movs	r0, #1
}
   22e76:	b002      	add	sp, #8
   22e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   22e7c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   22e80:	b983      	cbnz	r3, 22ea4 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   22e82:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   22e86:	7a21      	ldrb	r1, [r4, #8]
   22e88:	4642      	mov	r2, r8
   22e8a:	2020      	movs	r0, #32
   22e8c:	f7f5 fa14 	bl	182b8 <bt_keys_find>
   22e90:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   22e94:	b930      	cbnz	r0, 22ea4 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   22e96:	7a21      	ldrb	r1, [r4, #8]
   22e98:	4642      	mov	r2, r8
   22e9a:	2001      	movs	r0, #1
   22e9c:	f7f5 fa0c 	bl	182b8 <bt_keys_find>
   22ea0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   22ea4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   22ea8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   22eac:	f1b8 0f00 	cmp.w	r8, #0
   22eb0:	d10c      	bne.n	22ecc <bt_smp_request_ltk+0xc4>
   22eb2:	e9dd 3200 	ldrd	r3, r2, [sp]
   22eb6:	4313      	orrs	r3, r2
   22eb8:	d108      	bne.n	22ecc <bt_smp_request_ltk+0xc4>
   22eba:	b300      	cbz	r0, 22efe <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   22ebc:	89c3      	ldrh	r3, [r0, #14]
   22ebe:	069a      	lsls	r2, r3, #26
   22ec0:	d505      	bpl.n	22ece <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   22ec2:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   22ec4:	f100 011a 	add.w	r1, r0, #26
   22ec8:	4622      	mov	r2, r4
   22eca:	e7c4      	b.n	22e56 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   22ecc:	b1b8      	cbz	r0, 22efe <bt_smp_request_ltk+0xf6>
   22ece:	89c3      	ldrh	r3, [r0, #14]
   22ed0:	07db      	lsls	r3, r3, #31
   22ed2:	d514      	bpl.n	22efe <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   22ed4:	2208      	movs	r2, #8
   22ed6:	4669      	mov	r1, sp
   22ed8:	3040      	adds	r0, #64	; 0x40
   22eda:	f7fc ffe7 	bl	1feac <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   22ede:	b970      	cbnz	r0, 22efe <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   22ee0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   22ee4:	2202      	movs	r2, #2
   22ee6:	a908      	add	r1, sp, #32
   22ee8:	3048      	adds	r0, #72	; 0x48
   22eea:	f7fc ffdf 	bl	1feac <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   22eee:	4680      	mov	r8, r0
   22ef0:	b928      	cbnz	r0, 22efe <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   22ef2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   22ef6:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   22ef8:	314a      	adds	r1, #74	; 0x4a
   22efa:	4622      	mov	r2, r4
   22efc:	e7ab      	b.n	22e56 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   22efe:	210f      	movs	r1, #15
   22f00:	4630      	mov	r0, r6
   22f02:	f7ff fcef 	bl	228e4 <atomic_test_bit>
   22f06:	b120      	cbz	r0, 22f12 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   22f08:	2202      	movs	r2, #2
   22f0a:	2106      	movs	r1, #6
   22f0c:	4620      	mov	r0, r4
   22f0e:	f7f1 ff15 	bl	14d3c <bt_conn_security_changed>
	smp_reset(smp);
   22f12:	4628      	mov	r0, r5
   22f14:	f7ff fec6 	bl	22ca4 <smp_reset>
		return false;
   22f18:	2000      	movs	r0, #0
   22f1a:	e7ac      	b.n	22e76 <bt_smp_request_ltk+0x6e>

00022f1c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   22f1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22f20:	4770      	bx	lr

00022f22 <bt_smp_start_security>:
{
   22f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   22f24:	78c3      	ldrb	r3, [r0, #3]
{
   22f26:	4604      	mov	r4, r0
	switch (conn->role) {
   22f28:	2b00      	cmp	r3, #0
   22f2a:	d15f      	bne.n	22fec <bt_smp_start_security+0xca>
		smp = smp_chan_get(conn);
   22f2c:	f7ff fcd3 	bl	228d6 <smp_chan_get>
		if (!smp) {
   22f30:	4605      	mov	r5, r0
   22f32:	2800      	cmp	r0, #0
   22f34:	d05d      	beq.n	22ff2 <bt_smp_start_security+0xd0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   22f36:	1d06      	adds	r6, r0, #4
   22f38:	2103      	movs	r1, #3
   22f3a:	4630      	mov	r0, r6
   22f3c:	f7ff fcd2 	bl	228e4 <atomic_test_bit>
   22f40:	b120      	cbz	r0, 22f4c <bt_smp_start_security+0x2a>
			return -EBUSY;
   22f42:	f06f 040f 	mvn.w	r4, #15
}
   22f46:	4620      	mov	r0, r4
   22f48:	b003      	add	sp, #12
   22f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   22f4c:	2101      	movs	r1, #1
   22f4e:	4630      	mov	r0, r6
   22f50:	f7ff fcc8 	bl	228e4 <atomic_test_bit>
   22f54:	2800      	cmp	r0, #0
   22f56:	d1f4      	bne.n	22f42 <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   22f58:	210b      	movs	r1, #11
   22f5a:	1d20      	adds	r0, r4, #4
   22f5c:	f7ff fcc2 	bl	228e4 <atomic_test_bit>
   22f60:	b128      	cbz	r0, 22f6e <bt_smp_start_security+0x4c>
			return smp_send_pairing_req(conn);
   22f62:	4620      	mov	r0, r4
}
   22f64:	b003      	add	sp, #12
   22f66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   22f6a:	f7f4 bac3 	b.w	174f4 <smp_send_pairing_req>
	if (!conn->le.keys) {
   22f6e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   22f72:	b983      	cbnz	r3, 22f96 <bt_smp_start_security+0x74>
						     conn->id, &conn->le.dst);
   22f74:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   22f78:	7a21      	ldrb	r1, [r4, #8]
   22f7a:	463a      	mov	r2, r7
   22f7c:	2020      	movs	r0, #32
   22f7e:	f7f5 f99b 	bl	182b8 <bt_keys_find>
   22f82:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   22f86:	b930      	cbnz	r0, 22f96 <bt_smp_start_security+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   22f88:	7a21      	ldrb	r1, [r4, #8]
   22f8a:	463a      	mov	r2, r7
   22f8c:	2004      	movs	r0, #4
   22f8e:	f7f5 f993 	bl	182b8 <bt_keys_find>
   22f92:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   22f96:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   22f9a:	2900      	cmp	r1, #0
   22f9c:	d0e1      	beq.n	22f62 <bt_smp_start_security+0x40>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   22f9e:	89cb      	ldrh	r3, [r1, #14]
	if (!conn->le.keys ||
   22fa0:	f013 0f24 	tst.w	r3, #36	; 0x24
   22fa4:	d0dd      	beq.n	22f62 <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   22fa6:	7aa2      	ldrb	r2, [r4, #10]
   22fa8:	2a02      	cmp	r2, #2
   22faa:	d909      	bls.n	22fc0 <bt_smp_start_security+0x9e>
   22fac:	7b48      	ldrb	r0, [r1, #13]
   22fae:	07c0      	lsls	r0, r0, #31
   22fb0:	d5d7      	bpl.n	22f62 <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   22fb2:	2a03      	cmp	r2, #3
   22fb4:	d004      	beq.n	22fc0 <bt_smp_start_security+0x9e>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   22fb6:	069b      	lsls	r3, r3, #26
   22fb8:	d5d3      	bpl.n	22f62 <bt_smp_start_security+0x40>
   22fba:	7b0b      	ldrb	r3, [r1, #12]
   22fbc:	2b10      	cmp	r3, #16
   22fbe:	d1d0      	bne.n	22f62 <bt_smp_start_security+0x40>
		err = bt_conn_le_start_encryption(conn,
   22fc0:	7b0b      	ldrb	r3, [r1, #12]
   22fc2:	9300      	str	r3, [sp, #0]
   22fc4:	f101 0218 	add.w	r2, r1, #24
   22fc8:	f101 031a 	add.w	r3, r1, #26
   22fcc:	4620      	mov	r0, r4
   22fce:	3110      	adds	r1, #16
   22fd0:	f7fd fd66 	bl	20aa0 <bt_conn_le_start_encryption>
		if (err) {
   22fd4:	4604      	mov	r4, r0
   22fd6:	2800      	cmp	r0, #0
   22fd8:	d1b5      	bne.n	22f46 <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   22fda:	4628      	mov	r0, r5
   22fdc:	210b      	movs	r1, #11
   22fde:	f7ff fcef 	bl	229c0 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   22fe2:	2101      	movs	r1, #1
   22fe4:	4630      	mov	r0, r6
   22fe6:	f7ff fceb 	bl	229c0 <atomic_set_bit>
		return 0;
   22fea:	e7ac      	b.n	22f46 <bt_smp_start_security+0x24>
		return -EINVAL;
   22fec:	f06f 0415 	mvn.w	r4, #21
   22ff0:	e7a9      	b.n	22f46 <bt_smp_start_security+0x24>
			return -ENOTCONN;
   22ff2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   22ff6:	e7a6      	b.n	22f46 <bt_smp_start_security+0x24>

00022ff8 <smp_error>:
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   22ff8:	1d03      	adds	r3, r0, #4
{
   22ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22ffc:	4606      	mov	r6, r0
   22ffe:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   23000:	4618      	mov	r0, r3
   23002:	2102      	movs	r1, #2
   23004:	f7ff fc6e 	bl	228e4 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   23008:	4604      	mov	r4, r0
   2300a:	b120      	cbz	r0, 23016 <smp_error+0x1e>
   2300c:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   23010:	fab4 f484 	clz	r4, r4
   23014:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23016:	2103      	movs	r1, #3
   23018:	4618      	mov	r0, r3
   2301a:	f7ff fc63 	bl	228e4 <atomic_test_bit>
   2301e:	b160      	cbz	r0, 2303a <smp_error+0x42>
		smp_pairing_complete(smp, reason);
   23020:	4639      	mov	r1, r7
   23022:	4630      	mov	r0, r6
   23024:	f7f4 ff92 	bl	17f4c <smp_pairing_complete>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   23028:	2105      	movs	r1, #5
	if (remote_already_completed) {
   2302a:	b19c      	cbz	r4, 23054 <smp_error+0x5c>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   2302c:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   23030:	f7fd fdf3 	bl	20c1a <bt_conn_disconnect>
		return 0;
   23034:	2000      	movs	r0, #0
}
   23036:	b003      	add	sp, #12
   23038:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2303a:	2101      	movs	r1, #1
   2303c:	4618      	mov	r0, r3
   2303e:	f7ff fc51 	bl	228e4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23042:	2800      	cmp	r0, #0
   23044:	d1ec      	bne.n	23020 <smp_error+0x28>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   23046:	210f      	movs	r1, #15
   23048:	4618      	mov	r0, r3
   2304a:	f7ff fc4b 	bl	228e4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2304e:	2800      	cmp	r0, #0
   23050:	d1e6      	bne.n	23020 <smp_error+0x28>
   23052:	e7e9      	b.n	23028 <smp_error+0x30>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   23054:	4630      	mov	r0, r6
   23056:	f7ff fd6c 	bl	22b32 <smp_create_pdu.constprop.0>
	if (!buf) {
   2305a:	4605      	mov	r5, r0
   2305c:	b190      	cbz	r0, 23084 <smp_error+0x8c>
   2305e:	2101      	movs	r1, #1
   23060:	300c      	adds	r0, #12
   23062:	f000 fb58 	bl	23716 <net_buf_simple_add>
	rsp->reason = reason;
   23066:	7007      	strb	r7, [r0, #0]
   23068:	9400      	str	r4, [sp, #0]
   2306a:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   2306e:	4623      	mov	r3, r4
   23070:	462a      	mov	r2, r5
   23072:	2106      	movs	r1, #6
   23074:	f7fd fe95 	bl	20da2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   23078:	2800      	cmp	r0, #0
   2307a:	d0db      	beq.n	23034 <smp_error+0x3c>
		net_buf_unref(buf);
   2307c:	4628      	mov	r0, r5
   2307e:	f7f5 faf1 	bl	18664 <net_buf_unref>
   23082:	e7d7      	b.n	23034 <smp_error+0x3c>
		return -ENOBUFS;
   23084:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23088:	e7d5      	b.n	23036 <smp_error+0x3e>

0002308a <bt_smp_dhkey_ready>:
{
   2308a:	b570      	push	{r4, r5, r6, lr}
   2308c:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2308e:	2008      	movs	r0, #8
   23090:	f7f4 f94c 	bl	1732c <smp_find>
	if (smp) {
   23094:	4604      	mov	r4, r0
   23096:	b1b8      	cbz	r0, 230c8 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   23098:	1d05      	adds	r5, r0, #4
   2309a:	2108      	movs	r1, #8
   2309c:	4628      	mov	r0, r5
   2309e:	f7ff fc4b 	bl	22938 <atomic_clear_bit>
	if (!dhkey) {
   230a2:	b3b6      	cbz	r6, 23112 <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   230a4:	2107      	movs	r1, #7
   230a6:	f7ff fc47 	bl	22938 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   230aa:	4631      	mov	r1, r6
   230ac:	2220      	movs	r2, #32
   230ae:	f104 0097 	add.w	r0, r4, #151	; 0x97
   230b2:	f7fc ff22 	bl	1fefa <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   230b6:	210a      	movs	r1, #10
   230b8:	4628      	mov	r0, r5
   230ba:	f7ff fc13 	bl	228e4 <atomic_test_bit>
   230be:	b168      	cbz	r0, 230dc <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   230c0:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   230c2:	4628      	mov	r0, r5
   230c4:	f7ff fc7c 	bl	229c0 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   230c8:	2007      	movs	r0, #7
   230ca:	f7f4 f92f 	bl	1732c <smp_find>
		if (smp) {
   230ce:	4604      	mov	r4, r0
   230d0:	b118      	cbz	r0, 230da <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   230d2:	f7f4 f97d 	bl	173d0 <smp_dhkey_generate>
			if (err) {
   230d6:	4601      	mov	r1, r0
   230d8:	b9b8      	cbnz	r0, 2310a <bt_smp_dhkey_ready+0x80>
}
   230da:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   230dc:	2110      	movs	r1, #16
   230de:	4628      	mov	r0, r5
   230e0:	f7ff fc00 	bl	228e4 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   230e4:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   230e6:	2800      	cmp	r0, #0
   230e8:	d1eb      	bne.n	230c2 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   230ea:	4628      	mov	r0, r5
   230ec:	f7ff fbfa 	bl	228e4 <atomic_test_bit>
   230f0:	2800      	cmp	r0, #0
   230f2:	d0e9      	beq.n	230c8 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   230f4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   230f8:	78db      	ldrb	r3, [r3, #3]
   230fa:	2b00      	cmp	r3, #0
   230fc:	d1e4      	bne.n	230c8 <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   230fe:	4620      	mov	r0, r4
   23100:	f7ff fd6a 	bl	22bd8 <compute_and_send_central_dhcheck>
		if (err) {
   23104:	4601      	mov	r1, r0
   23106:	2800      	cmp	r0, #0
   23108:	d0de      	beq.n	230c8 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2310a:	4620      	mov	r0, r4
   2310c:	f7ff ff74 	bl	22ff8 <smp_error>
   23110:	e7da      	b.n	230c8 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   23112:	210b      	movs	r1, #11
   23114:	e7f9      	b.n	2310a <bt_smp_dhkey_ready+0x80>

00023116 <smp_ident_addr_info>:
{
   23116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   2311a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   2311e:	68cf      	ldr	r7, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   23120:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   23124:	f023 0302 	bic.w	r3, r3, #2
   23128:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   2312c:	783b      	ldrb	r3, [r7, #0]
{
   2312e:	4604      	mov	r4, r0
   23130:	b123      	cbz	r3, 2313c <smp_ident_addr_info+0x26>
	if (!bt_addr_le_is_identity(&req->addr)) {
   23132:	79bb      	ldrb	r3, [r7, #6]
   23134:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23138:	2bc0      	cmp	r3, #192	; 0xc0
   2313a:	d174      	bne.n	23226 <smp_ident_addr_info+0x110>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   2313c:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   23140:	2207      	movs	r2, #7
   23142:	4639      	mov	r1, r7
   23144:	4640      	mov	r0, r8
   23146:	f7fc feb1 	bl	1feac <memcmp>
   2314a:	b180      	cbz	r0, 2316e <smp_ident_addr_info+0x58>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   2314c:	7a28      	ldrb	r0, [r5, #8]
   2314e:	4639      	mov	r1, r7
   23150:	f7f5 f91a 	bl	18388 <bt_keys_find_addr>
		if (keys) {
   23154:	4606      	mov	r6, r0
   23156:	b150      	cbz	r0, 2316e <smp_ident_addr_info+0x58>
			if (!update_keys_check(smp, keys)) {
   23158:	4601      	mov	r1, r0
   2315a:	4620      	mov	r0, r4
   2315c:	f7ff fbcb 	bl	228f6 <update_keys_check>
   23160:	b910      	cbnz	r0, 23168 <smp_ident_addr_info+0x52>
				return BT_SMP_ERR_UNSPECIFIED;
   23162:	2008      	movs	r0, #8
}
   23164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   23168:	4630      	mov	r0, r6
   2316a:	f000 f9b8 	bl	234de <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2316e:	210d      	movs	r1, #13
   23170:	1d20      	adds	r0, r4, #4
   23172:	f7ff fbb7 	bl	228e4 <atomic_test_bit>
   23176:	b3b0      	cbz	r0, 231e6 <smp_ident_addr_info+0xd0>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   23178:	7a29      	ldrb	r1, [r5, #8]
   2317a:	4642      	mov	r2, r8
   2317c:	2002      	movs	r0, #2
   2317e:	f000 f99a 	bl	234b6 <bt_keys_get_type>
		if (!keys) {
   23182:	4606      	mov	r6, r0
   23184:	2800      	cmp	r0, #0
   23186:	d0ec      	beq.n	23162 <smp_ident_addr_info+0x4c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   23188:	78eb      	ldrb	r3, [r5, #3]
   2318a:	bbdb      	cbnz	r3, 23204 <smp_ident_addr_info+0xee>
			dst = &conn->le.resp_addr;
   2318c:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   23190:	780b      	ldrb	r3, [r1, #0]
   23192:	2b01      	cmp	r3, #1
   23194:	d120      	bne.n	231d8 <smp_ident_addr_info+0xc2>
		if (bt_addr_le_is_rpa(dst)) {
   23196:	798b      	ldrb	r3, [r1, #6]
   23198:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2319c:	2b40      	cmp	r3, #64	; 0x40
   2319e:	d11b      	bne.n	231d8 <smp_ident_addr_info+0xc2>
	memcpy(dst, src, sizeof(*dst));
   231a0:	2206      	movs	r2, #6
   231a2:	3101      	adds	r1, #1
   231a4:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   231a8:	f7fc fea7 	bl	1fefa <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   231ac:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   231b0:	b193      	cbz	r3, 231d8 <smp_ident_addr_info+0xc2>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   231b2:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   231b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   231ba:	2bc0      	cmp	r3, #192	; 0xc0
   231bc:	d00c      	beq.n	231d8 <smp_ident_addr_info+0xc2>
	memcpy(dst, src, sizeof(*dst));
   231be:	2207      	movs	r2, #7
   231c0:	4639      	mov	r1, r7
   231c2:	1c70      	adds	r0, r6, #1
   231c4:	f7fc fe99 	bl	1fefa <memcpy>
   231c8:	2207      	movs	r2, #7
   231ca:	4639      	mov	r1, r7
   231cc:	4640      	mov	r0, r8
   231ce:	f7fc fe94 	bl	1fefa <memcpy>
				bt_conn_identity_resolved(conn);
   231d2:	4628      	mov	r0, r5
   231d4:	f7f1 fd84 	bl	14ce0 <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   231d8:	4630      	mov	r0, r6
   231da:	f7f0 fc65 	bl	13aa8 <bt_id_find_conflict>
	if (conflict) {
   231de:	bb20      	cbnz	r0, 2322a <smp_ident_addr_info+0x114>
	bt_id_add(new_bond);
   231e0:	4630      	mov	r0, r6
   231e2:	f7f0 fc71 	bl	13ac8 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   231e6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   231ea:	075b      	lsls	r3, r3, #29
   231ec:	d503      	bpl.n	231f6 <smp_ident_addr_info+0xe0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   231ee:	210a      	movs	r1, #10
   231f0:	4620      	mov	r0, r4
   231f2:	f7ff fbe5 	bl	229c0 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   231f6:	78eb      	ldrb	r3, [r5, #3]
   231f8:	b13b      	cbz	r3, 2320a <smp_ident_addr_info+0xf4>
	if (!smp->local_dist && !smp->remote_dist) {
   231fa:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   231fe:	b171      	cbz	r1, 2321e <smp_ident_addr_info+0x108>
	return 0;
   23200:	2000      	movs	r0, #0
   23202:	e7af      	b.n	23164 <smp_ident_addr_info+0x4e>
			dst = &conn->le.init_addr;
   23204:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   23208:	e7c2      	b.n	23190 <smp_ident_addr_info+0x7a>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   2320a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2320e:	2b00      	cmp	r3, #0
   23210:	d1f3      	bne.n	231fa <smp_ident_addr_info+0xe4>
		err = bt_smp_distribute_keys(smp);
   23212:	4620      	mov	r0, r4
   23214:	f7f4 f8f2 	bl	173fc <bt_smp_distribute_keys>
		if (err) {
   23218:	2800      	cmp	r0, #0
   2321a:	d0ee      	beq.n	231fa <smp_ident_addr_info+0xe4>
   2321c:	e7a2      	b.n	23164 <smp_ident_addr_info+0x4e>
		smp_pairing_complete(smp, 0);
   2321e:	4620      	mov	r0, r4
   23220:	f7f4 fe94 	bl	17f4c <smp_pairing_complete>
   23224:	e7ec      	b.n	23200 <smp_ident_addr_info+0xea>
		return BT_SMP_ERR_INVALID_PARAMS;
   23226:	200a      	movs	r0, #10
   23228:	e79c      	b.n	23164 <smp_ident_addr_info+0x4e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2322a:	2003      	movs	r0, #3
   2322c:	e79a      	b.n	23164 <smp_ident_addr_info+0x4e>

0002322e <smp_central_ident>:
{
   2322e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23230:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   23232:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   23236:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   23238:	3004      	adds	r0, #4
   2323a:	210d      	movs	r1, #13
   2323c:	f7ff fb52 	bl	228e4 <atomic_test_bit>
   23240:	b198      	cbz	r0, 2326a <smp_central_ident+0x3c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   23242:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   23244:	68df      	ldr	r7, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   23246:	f106 0288 	add.w	r2, r6, #136	; 0x88
   2324a:	2004      	movs	r0, #4
   2324c:	f000 f933 	bl	234b6 <bt_keys_get_type>
		if (!keys) {
   23250:	4605      	mov	r5, r0
   23252:	b378      	cbz	r0, 232b4 <smp_central_ident+0x86>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   23254:	2202      	movs	r2, #2
   23256:	4639      	mov	r1, r7
   23258:	3018      	adds	r0, #24
   2325a:	f7fc fe4e 	bl	1fefa <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   2325e:	2208      	movs	r2, #8
   23260:	1cb9      	adds	r1, r7, #2
   23262:	f105 0010 	add.w	r0, r5, #16
   23266:	f7fc fe48 	bl	1fefa <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   2326a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2326e:	f023 0201 	bic.w	r2, r3, #1
   23272:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   23276:	079a      	lsls	r2, r3, #30
   23278:	d50a      	bpl.n	23290 <smp_central_ident+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2327a:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2327c:	4620      	mov	r0, r4
   2327e:	f7ff fb9f 	bl	229c0 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23282:	78f3      	ldrb	r3, [r6, #3]
   23284:	b143      	cbz	r3, 23298 <smp_central_ident+0x6a>
	if (!smp->local_dist && !smp->remote_dist) {
   23286:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   2328a:	b179      	cbz	r1, 232ac <smp_central_ident+0x7e>
	return 0;
   2328c:	2000      	movs	r0, #0
}
   2328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   23290:	075b      	lsls	r3, r3, #29
   23292:	d5f6      	bpl.n	23282 <smp_central_ident+0x54>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   23294:	210a      	movs	r1, #10
   23296:	e7f1      	b.n	2327c <smp_central_ident+0x4e>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   23298:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2329c:	2b00      	cmp	r3, #0
   2329e:	d1f2      	bne.n	23286 <smp_central_ident+0x58>
		err = bt_smp_distribute_keys(smp);
   232a0:	4620      	mov	r0, r4
   232a2:	f7f4 f8ab 	bl	173fc <bt_smp_distribute_keys>
		if (err) {
   232a6:	2800      	cmp	r0, #0
   232a8:	d0ed      	beq.n	23286 <smp_central_ident+0x58>
   232aa:	e7f0      	b.n	2328e <smp_central_ident+0x60>
		smp_pairing_complete(smp, 0);
   232ac:	4620      	mov	r0, r4
   232ae:	f7f4 fe4d 	bl	17f4c <smp_pairing_complete>
   232b2:	e7eb      	b.n	2328c <smp_central_ident+0x5e>
			return BT_SMP_ERR_UNSPECIFIED;
   232b4:	2008      	movs	r0, #8
   232b6:	e7ea      	b.n	2328e <smp_central_ident+0x60>

000232b8 <smp_pairing_failed>:
{
   232b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232bc:	460e      	mov	r6, r1
   232be:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   232c0:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   232c4:	f7f4 f840 	bl	17348 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   232c8:	68f7      	ldr	r7, [r6, #12]
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   232ca:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   232cc:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   232ce:	210a      	movs	r1, #10
   232d0:	4630      	mov	r0, r6
   232d2:	f7ff fb5f 	bl	22994 <atomic_test_and_clear_bit>
   232d6:	b138      	cbz	r0, 232e8 <smp_pairing_failed+0x30>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   232d8:	b96d      	cbnz	r5, 232f6 <smp_pairing_failed+0x3e>
	smp_pairing_complete(smp, req->reason);
   232da:	4620      	mov	r0, r4
   232dc:	7839      	ldrb	r1, [r7, #0]
   232de:	f7f4 fe35 	bl	17f4c <smp_pairing_complete>
}
   232e2:	2000      	movs	r0, #0
   232e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   232e8:	210b      	movs	r1, #11
   232ea:	4630      	mov	r0, r6
   232ec:	f7ff fb52 	bl	22994 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   232f0:	2800      	cmp	r0, #0
   232f2:	d1f1      	bne.n	232d8 <smp_pairing_failed+0x20>
   232f4:	e7f1      	b.n	232da <smp_pairing_failed+0x22>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   232f6:	692b      	ldr	r3, [r5, #16]
   232f8:	2b00      	cmp	r3, #0
   232fa:	d0ee      	beq.n	232da <smp_pairing_failed+0x22>
			smp_auth_cb->cancel(conn);
   232fc:	4640      	mov	r0, r8
   232fe:	4798      	blx	r3
   23300:	e7eb      	b.n	232da <smp_pairing_failed+0x22>

00023302 <bt_smp_disconnected>:
{
   23302:	b570      	push	{r4, r5, r6, lr}
   23304:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   23306:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2330a:	f850 3b34 	ldr.w	r3, [r0], #52
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2330e:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   23310:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   23314:	f000 ffce 	bl	242b4 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23318:	2103      	movs	r1, #3
   2331a:	4620      	mov	r0, r4
   2331c:	f7ff fae2 	bl	228e4 <atomic_test_bit>
   23320:	b1a0      	cbz	r0, 2334c <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   23322:	2108      	movs	r1, #8
   23324:	4630      	mov	r0, r6
   23326:	f7f4 fe11 	bl	17f4c <smp_pairing_complete>
	if (keys) {
   2332a:	b13d      	cbz	r5, 2333c <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2332c:	89eb      	ldrh	r3, [r5, #14]
   2332e:	b113      	cbz	r3, 23336 <bt_smp_disconnected+0x34>
   23330:	7b6b      	ldrb	r3, [r5, #13]
   23332:	079b      	lsls	r3, r3, #30
   23334:	d502      	bpl.n	2333c <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   23336:	4628      	mov	r0, r5
   23338:	f000 f8d1 	bl	234de <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2333c:	4630      	mov	r0, r6
   2333e:	f44f 72ac 	mov.w	r2, #344	; 0x158
}
   23342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   23346:	2100      	movs	r1, #0
   23348:	f7fc bde2 	b.w	1ff10 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2334c:	2101      	movs	r1, #1
   2334e:	4620      	mov	r0, r4
   23350:	f7ff fac8 	bl	228e4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23354:	2800      	cmp	r0, #0
   23356:	d1e4      	bne.n	23322 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   23358:	210f      	movs	r1, #15
   2335a:	4620      	mov	r0, r4
   2335c:	f7ff fac2 	bl	228e4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   23360:	2800      	cmp	r0, #0
   23362:	d1de      	bne.n	23322 <bt_smp_disconnected+0x20>
   23364:	e7e1      	b.n	2332a <bt_smp_disconnected+0x28>

00023366 <smp_timeout>:
{
   23366:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   23368:	2108      	movs	r1, #8
{
   2336a:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2336c:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
   23370:	f7f4 fdec 	bl	17f4c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   23374:	f5a4 708e 	sub.w	r0, r4, #284	; 0x11c
   23378:	2104      	movs	r1, #4
}
   2337a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2337e:	f7ff bb1f 	b.w	229c0 <atomic_set_bit>

00023382 <smp_ident_sent>:
{
   23382:	b508      	push	{r3, lr}
	if (!err) {
   23384:	b99a      	cbnz	r2, 233ae <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   23386:	7883      	ldrb	r3, [r0, #2]
   23388:	2b01      	cmp	r3, #1
   2338a:	d110      	bne.n	233ae <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2338c:	2106      	movs	r1, #6
   2338e:	f7fd fd9d 	bl	20ecc <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   23392:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   23396:	f023 0301 	bic.w	r3, r3, #1
   2339a:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2339e:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   233a2:	b921      	cbnz	r1, 233ae <smp_ident_sent+0x2c>
}
   233a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   233a8:	38ec      	subs	r0, #236	; 0xec
   233aa:	f7f4 bdcf 	b.w	17f4c <smp_pairing_complete>
}
   233ae:	bd08      	pop	{r3, pc}

000233b0 <bt_smp_update_keys>:
{
   233b0:	b570      	push	{r4, r5, r6, lr}
   233b2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   233b4:	f7ff fa8f 	bl	228d6 <smp_chan_get>
	if (!smp) {
   233b8:	4605      	mov	r5, r0
   233ba:	2800      	cmp	r0, #0
   233bc:	d07a      	beq.n	234b4 <bt_smp_update_keys+0x104>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   233be:	1d06      	adds	r6, r0, #4
   233c0:	2103      	movs	r1, #3
   233c2:	4630      	mov	r0, r6
   233c4:	f7ff fa8e 	bl	228e4 <atomic_test_bit>
   233c8:	2800      	cmp	r0, #0
   233ca:	d073      	beq.n	234b4 <bt_smp_update_keys+0x104>
	if (conn->le.keys) {
   233cc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   233d0:	b108      	cbz	r0, 233d6 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   233d2:	f000 f884 	bl	234de <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   233d6:	7a20      	ldrb	r0, [r4, #8]
   233d8:	f104 0188 	add.w	r1, r4, #136	; 0x88
   233dc:	f7f4 ff38 	bl	18250 <bt_keys_get_addr>
   233e0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   233e4:	b928      	cbnz	r0, 233f2 <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   233e6:	4628      	mov	r0, r5
   233e8:	2108      	movs	r1, #8
}
   233ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   233ee:	f7ff be03 	b.w	22ff8 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   233f2:	210e      	movs	r1, #14
   233f4:	4630      	mov	r0, r6
   233f6:	f7ff fa75 	bl	228e4 <atomic_test_bit>
   233fa:	b128      	cbz	r0, 23408 <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   233fc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   23400:	7b53      	ldrb	r3, [r2, #13]
   23402:	f043 0302 	orr.w	r3, r3, #2
   23406:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   23408:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   2340a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   2340e:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   23410:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   23412:	d83c      	bhi.n	2348e <bt_smp_update_keys+0xde>
   23414:	2a00      	cmp	r2, #0
   23416:	d041      	beq.n	2349c <bt_smp_update_keys+0xec>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   23418:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2341c:	7b53      	ldrb	r3, [r2, #13]
   2341e:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   23422:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   23424:	7b6b      	ldrb	r3, [r5, #13]
   23426:	7d29      	ldrb	r1, [r5, #20]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   23428:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
	return MIN(req->max_key_size, rsp->max_key_size);
   2342c:	428b      	cmp	r3, r1
   2342e:	bf28      	it	cs
   23430:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   23432:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   23434:	2105      	movs	r1, #5
   23436:	4630      	mov	r0, r6
   23438:	f7ff fa54 	bl	228e4 <atomic_test_bit>
   2343c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   23440:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   23442:	b3a0      	cbz	r0, 234ae <bt_smp_update_keys+0xfe>
		conn->le.keys->flags |= BT_KEYS_SC;
   23444:	f042 0210 	orr.w	r2, r2, #16
   23448:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2344a:	210d      	movs	r1, #13
   2344c:	4630      	mov	r0, r6
   2344e:	f7ff fa49 	bl	228e4 <atomic_test_bit>
   23452:	b378      	cbz	r0, 234b4 <bt_smp_update_keys+0x104>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   23454:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   23458:	2120      	movs	r1, #32
   2345a:	f000 f83c 	bl	234d6 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   2345e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   23462:	f105 0147 	add.w	r1, r5, #71	; 0x47
   23466:	2210      	movs	r2, #16
   23468:	301a      	adds	r0, #26
   2346a:	f7fc fd46 	bl	1fefa <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   2346e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   23472:	2208      	movs	r2, #8
   23474:	2100      	movs	r1, #0
   23476:	3010      	adds	r0, #16
   23478:	f7fc fd4a 	bl	1ff10 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   2347c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   23480:	2202      	movs	r2, #2
}
   23482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   23486:	2100      	movs	r1, #0
   23488:	3018      	adds	r0, #24
   2348a:	f7fc bd41 	b.w	1ff10 <memset>
	switch (smp->method) {
   2348e:	3a05      	subs	r2, #5
   23490:	2a01      	cmp	r2, #1
   23492:	d803      	bhi.n	2349c <bt_smp_update_keys+0xec>
		conn->le.keys->flags |= BT_KEYS_OOB;
   23494:	f043 0320 	orr.w	r3, r3, #32
   23498:	734b      	strb	r3, [r1, #13]
   2349a:	e7bd      	b.n	23418 <bt_smp_update_keys+0x68>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   2349c:	f023 0320 	bic.w	r3, r3, #32
   234a0:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   234a2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   234a6:	7b53      	ldrb	r3, [r2, #13]
   234a8:	f023 0301 	bic.w	r3, r3, #1
   234ac:	e7b9      	b.n	23422 <bt_smp_update_keys+0x72>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   234ae:	f022 0210 	bic.w	r2, r2, #16
   234b2:	735a      	strb	r2, [r3, #13]
}
   234b4:	bd70      	pop	{r4, r5, r6, pc}

000234b6 <bt_keys_get_type>:
{
   234b6:	b570      	push	{r4, r5, r6, lr}
   234b8:	4604      	mov	r4, r0
   234ba:	460d      	mov	r5, r1
   234bc:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   234be:	f7f4 fefb 	bl	182b8 <bt_keys_find>
	if (keys) {
   234c2:	b938      	cbnz	r0, 234d4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   234c4:	4631      	mov	r1, r6
   234c6:	4628      	mov	r0, r5
   234c8:	f7f4 fec2 	bl	18250 <bt_keys_get_addr>
	if (!keys) {
   234cc:	b110      	cbz	r0, 234d4 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
	__ASSERT_NO_MSG(keys != NULL);

	keys->keys |= type;
   234ce:	89c3      	ldrh	r3, [r0, #14]
   234d0:	431c      	orrs	r4, r3
   234d2:	81c4      	strh	r4, [r0, #14]
}
   234d4:	bd70      	pop	{r4, r5, r6, pc}

000234d6 <bt_keys_add_type>:
	keys->keys |= type;
   234d6:	89c3      	ldrh	r3, [r0, #14]
   234d8:	4319      	orrs	r1, r3
   234da:	81c1      	strh	r1, [r0, #14]
}
   234dc:	4770      	bx	lr

000234de <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   234de:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   234e0:	7a03      	ldrb	r3, [r0, #8]
   234e2:	075b      	lsls	r3, r3, #29
{
   234e4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   234e6:	d501      	bpl.n	234ec <bt_keys_clear+0xe>
		bt_id_del(keys);
   234e8:	f7f0 fb8a 	bl	13c00 <bt_id_del>

		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   234ec:	4620      	mov	r0, r4
   234ee:	225c      	movs	r2, #92	; 0x5c
}
   234f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   234f4:	2100      	movs	r1, #0
   234f6:	f7fc bd0b 	b.w	1ff10 <memset>

000234fa <sys_memcpy_swap>:
	psrc += length - 1;
   234fa:	1e53      	subs	r3, r2, #1
   234fc:	4419      	add	r1, r3
	for (; length > 0; length--) {
   234fe:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   23500:	f811 3901 	ldrb.w	r3, [r1], #-1
   23504:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   23508:	4290      	cmp	r0, r2
   2350a:	d1f9      	bne.n	23500 <sys_memcpy_swap+0x6>
}
   2350c:	4770      	bx	lr

0002350e <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2350e:	b510      	push	{r4, lr}
   23510:	1e43      	subs	r3, r0, #1
   23512:	f100 0210 	add.w	r2, r0, #16
   23516:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   23518:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2351c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   23520:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   23522:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   23524:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   23526:	d1f7      	bne.n	23518 <sys_mem_swap.constprop.0+0xa>
	}
}
   23528:	bd10      	pop	{r4, pc}

0002352a <bt_crypto_aes_cmac>:
{
   2352a:	b570      	push	{r4, r5, r6, lr}
   2352c:	b0c2      	sub	sp, #264	; 0x108
   2352e:	460d      	mov	r5, r1
   23530:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   23532:	4601      	mov	r1, r0
   23534:	aa16      	add	r2, sp, #88	; 0x58
   23536:	4668      	mov	r0, sp
{
   23538:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2353a:	f7fc fbbe 	bl	1fcba <tc_cmac_setup>
   2353e:	b918      	cbnz	r0, 23548 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   23540:	f06f 0004 	mvn.w	r0, #4
}
   23544:	b042      	add	sp, #264	; 0x108
   23546:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   23548:	4632      	mov	r2, r6
   2354a:	4629      	mov	r1, r5
   2354c:	4668      	mov	r0, sp
   2354e:	f7fc fbdf 	bl	1fd10 <tc_cmac_update>
   23552:	2800      	cmp	r0, #0
   23554:	d0f4      	beq.n	23540 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   23556:	4669      	mov	r1, sp
   23558:	4620      	mov	r0, r4
   2355a:	f7fc fc43 	bl	1fde4 <tc_cmac_final>
   2355e:	2800      	cmp	r0, #0
   23560:	d0ee      	beq.n	23540 <bt_crypto_aes_cmac+0x16>
	return 0;
   23562:	2000      	movs	r0, #0
   23564:	e7ee      	b.n	23544 <bt_crypto_aes_cmac+0x1a>

00023566 <bt_crypto_f4>:
{
   23566:	b5f0      	push	{r4, r5, r6, r7, lr}
   23568:	b097      	sub	sp, #92	; 0x5c
   2356a:	4614      	mov	r4, r2
   2356c:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2356e:	2220      	movs	r2, #32
   23570:	4601      	mov	r1, r0
   23572:	a805      	add	r0, sp, #20
{
   23574:	461d      	mov	r5, r3
   23576:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   23578:	f7ff ffbf 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2357c:	2220      	movs	r2, #32
   2357e:	4631      	mov	r1, r6
   23580:	a80d      	add	r0, sp, #52	; 0x34
   23582:	f7ff ffba 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   23586:	4621      	mov	r1, r4
   23588:	2210      	movs	r2, #16
   2358a:	a801      	add	r0, sp, #4
	m[64] = z;
   2358c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   23590:	f7ff ffb3 	bl	234fa <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   23594:	463b      	mov	r3, r7
   23596:	2241      	movs	r2, #65	; 0x41
   23598:	a905      	add	r1, sp, #20
   2359a:	a801      	add	r0, sp, #4
   2359c:	f7ff ffc5 	bl	2352a <bt_crypto_aes_cmac>
	if (err) {
   235a0:	4604      	mov	r4, r0
   235a2:	b910      	cbnz	r0, 235aa <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   235a4:	4638      	mov	r0, r7
   235a6:	f7ff ffb2 	bl	2350e <sys_mem_swap.constprop.0>
}
   235aa:	4620      	mov	r0, r4
   235ac:	b017      	add	sp, #92	; 0x5c
   235ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000235b0 <bt_crypto_f6>:
{
   235b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   235b2:	b097      	sub	sp, #92	; 0x5c
   235b4:	4605      	mov	r5, r0
   235b6:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   235b8:	a805      	add	r0, sp, #20
   235ba:	2210      	movs	r2, #16
{
   235bc:	461c      	mov	r4, r3
   235be:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   235c0:	f7ff ff9b 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   235c4:	2210      	movs	r2, #16
   235c6:	4631      	mov	r1, r6
   235c8:	a809      	add	r0, sp, #36	; 0x24
   235ca:	f7ff ff96 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   235ce:	4621      	mov	r1, r4
   235d0:	2210      	movs	r2, #16
   235d2:	a80d      	add	r0, sp, #52	; 0x34
   235d4:	f7ff ff91 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   235d8:	991c      	ldr	r1, [sp, #112]	; 0x70
   235da:	2203      	movs	r2, #3
   235dc:	a811      	add	r0, sp, #68	; 0x44
   235de:	f7ff ff8c 	bl	234fa <sys_memcpy_swap>
	m[51] = a1->type;
   235e2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   235e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   235e8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   235ec:	4621      	mov	r1, r4
   235ee:	2206      	movs	r2, #6
   235f0:	a812      	add	r0, sp, #72	; 0x48
   235f2:	f7fc fc82 	bl	1fefa <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   235f6:	4621      	mov	r1, r4
   235f8:	2206      	movs	r2, #6
   235fa:	a812      	add	r0, sp, #72	; 0x48
   235fc:	f7ff ff7d 	bl	234fa <sys_memcpy_swap>
	m[58] = a2->type;
   23600:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   23602:	f814 3b01 	ldrb.w	r3, [r4], #1
   23606:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2360a:	4621      	mov	r1, r4
   2360c:	2206      	movs	r2, #6
   2360e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   23612:	f7fc fc72 	bl	1fefa <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   23616:	4621      	mov	r1, r4
   23618:	2206      	movs	r2, #6
   2361a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2361e:	f7ff ff6c 	bl	234fa <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   23622:	2210      	movs	r2, #16
   23624:	4629      	mov	r1, r5
   23626:	a801      	add	r0, sp, #4
   23628:	f7ff ff67 	bl	234fa <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2362c:	463b      	mov	r3, r7
   2362e:	2241      	movs	r2, #65	; 0x41
   23630:	a905      	add	r1, sp, #20
   23632:	a801      	add	r0, sp, #4
   23634:	f7ff ff79 	bl	2352a <bt_crypto_aes_cmac>
	if (err) {
   23638:	4604      	mov	r4, r0
   2363a:	b910      	cbnz	r0, 23642 <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   2363c:	4638      	mov	r0, r7
   2363e:	f7ff ff66 	bl	2350e <sys_mem_swap.constprop.0>
}
   23642:	4620      	mov	r0, r4
   23644:	b017      	add	sp, #92	; 0x5c
   23646:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023648 <fixed_data_unref>:
}
   23648:	4770      	bx	lr

0002364a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2364a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2364c:	6849      	ldr	r1, [r1, #4]
   2364e:	6809      	ldr	r1, [r1, #0]
   23650:	f7f4 bf76 	b.w	18540 <net_buf_alloc_len>

00023654 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   23654:	f7f7 bf1c 	b.w	1b490 <z_impl_k_queue_get>

00023658 <net_buf_slist_put>:
	__asm__ volatile(
   23658:	f04f 0340 	mov.w	r3, #64	; 0x40
   2365c:	f3ef 8211 	mrs	r2, BASEPRI
   23660:	f383 8812 	msr	BASEPRI_MAX, r3
   23664:	f3bf 8f6f 	isb	sy
	parent->next = child;
   23668:	2300      	movs	r3, #0
   2366a:	600b      	str	r3, [r1, #0]
	return list->tail;
   2366c:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2366e:	b933      	cbnz	r3, 2367e <net_buf_slist_put+0x26>
	list->head = node;
   23670:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   23674:	f382 8811 	msr	BASEPRI, r2
   23678:	f3bf 8f6f 	isb	sy
}
   2367c:	4770      	bx	lr
	parent->next = child;
   2367e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   23680:	6041      	str	r1, [r0, #4]
}
   23682:	e7f7      	b.n	23674 <net_buf_slist_put+0x1c>

00023684 <net_buf_slist_get>:
{
   23684:	b510      	push	{r4, lr}
   23686:	4603      	mov	r3, r0
	__asm__ volatile(
   23688:	f04f 0240 	mov.w	r2, #64	; 0x40
   2368c:	f3ef 8111 	mrs	r1, BASEPRI
   23690:	f382 8812 	msr	BASEPRI_MAX, r2
   23694:	f3bf 8f6f 	isb	sy
	return list->head;
   23698:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2369a:	b128      	cbz	r0, 236a8 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2369c:	685c      	ldr	r4, [r3, #4]
	return node->next;
   2369e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   236a0:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   236a2:	42a0      	cmp	r0, r4
	list->tail = node;
   236a4:	bf08      	it	eq
   236a6:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   236a8:	f381 8811 	msr	BASEPRI, r1
   236ac:	f3bf 8f6f 	isb	sy
}
   236b0:	bd10      	pop	{r4, pc}

000236b2 <net_buf_put>:
	k_fifo_put(fifo, buf);
   236b2:	f000 bd11 	b.w	240d8 <k_queue_append>

000236b6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   236b6:	7a02      	ldrb	r2, [r0, #8]
   236b8:	3201      	adds	r2, #1
   236ba:	7202      	strb	r2, [r0, #8]
	return buf;
}
   236bc:	4770      	bx	lr

000236be <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   236be:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   236c0:	4618      	mov	r0, r3
   236c2:	685b      	ldr	r3, [r3, #4]
   236c4:	2b00      	cmp	r3, #0
   236c6:	d1fb      	bne.n	236c0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   236c8:	4770      	bx	lr

000236ca <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   236ca:	6842      	ldr	r2, [r0, #4]
{
   236cc:	b510      	push	{r4, lr}
	if (parent->frags) {
   236ce:	b12a      	cbz	r2, 236dc <net_buf_frag_insert+0x12>
   236d0:	460b      	mov	r3, r1
	while (buf->frags) {
   236d2:	461c      	mov	r4, r3
   236d4:	685b      	ldr	r3, [r3, #4]
   236d6:	2b00      	cmp	r3, #0
   236d8:	d1fb      	bne.n	236d2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   236da:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   236dc:	6041      	str	r1, [r0, #4]
}
   236de:	bd10      	pop	{r4, pc}

000236e0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   236e0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   236e2:	4604      	mov	r4, r0
   236e4:	b920      	cbnz	r0, 236f0 <net_buf_frag_add+0x10>
	buf->ref++;
   236e6:	7a0b      	ldrb	r3, [r1, #8]
   236e8:	3301      	adds	r3, #1
   236ea:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   236ec:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   236ee:	bd10      	pop	{r4, pc}
   236f0:	4603      	mov	r3, r0
	while (buf->frags) {
   236f2:	4618      	mov	r0, r3
   236f4:	685b      	ldr	r3, [r3, #4]
   236f6:	2b00      	cmp	r3, #0
   236f8:	d1fb      	bne.n	236f2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   236fa:	f7ff ffe6 	bl	236ca <net_buf_frag_insert>
   236fe:	4620      	mov	r0, r4
   23700:	e7f5      	b.n	236ee <net_buf_frag_add+0xe>

00023702 <net_buf_simple_init_with_data>:
void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
	buf->data  = data;
	buf->size  = size;
   23702:	b292      	uxth	r2, r2
	buf->__buf = data;
   23704:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   23706:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   23708:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2370a:	8082      	strh	r2, [r0, #4]
}
   2370c:	4770      	bx	lr

0002370e <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2370e:	6883      	ldr	r3, [r0, #8]
   23710:	440b      	add	r3, r1
   23712:	6003      	str	r3, [r0, #0]
}
   23714:	4770      	bx	lr

00023716 <net_buf_simple_add>:
	return buf->data + buf->len;
   23716:	8883      	ldrh	r3, [r0, #4]
   23718:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2371a:	4419      	add	r1, r3
   2371c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2371e:	18d0      	adds	r0, r2, r3
   23720:	4770      	bx	lr

00023722 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   23722:	b430      	push	{r4, r5}
   23724:	8884      	ldrh	r4, [r0, #4]
   23726:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   23728:	18a3      	adds	r3, r4, r2
   2372a:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2372c:	1928      	adds	r0, r5, r4
}
   2372e:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   23730:	f7fc bbe3 	b.w	1fefa <memcpy>

00023734 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   23734:	b510      	push	{r4, lr}
   23736:	8883      	ldrh	r3, [r0, #4]
   23738:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   2373a:	1c5c      	adds	r4, r3, #1
   2373c:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2373e:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   23740:	18d0      	adds	r0, r2, r3
   23742:	bd10      	pop	{r4, pc}

00023744 <net_buf_simple_add_le16>:
   23744:	8883      	ldrh	r3, [r0, #4]
   23746:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   23748:	b530      	push	{r4, r5, lr}
   2374a:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2374c:	1c9d      	adds	r5, r3, #2
   2374e:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   23750:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   23752:	0a09      	lsrs	r1, r1, #8
   23754:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   23756:	bd30      	pop	{r4, r5, pc}

00023758 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   23758:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2375a:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2375c:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2375e:	1a40      	subs	r0, r0, r1
	buf->len += len;
   23760:	4411      	add	r1, r2
	buf->data -= len;
   23762:	6018      	str	r0, [r3, #0]
	buf->len += len;
   23764:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   23766:	4770      	bx	lr

00023768 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   23768:	8882      	ldrh	r2, [r0, #4]
   2376a:	1a52      	subs	r2, r2, r1
{
   2376c:	4603      	mov	r3, r0
	buf->len -= len;
   2376e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   23770:	6800      	ldr	r0, [r0, #0]
   23772:	4408      	add	r0, r1
   23774:	6018      	str	r0, [r3, #0]
}
   23776:	4770      	bx	lr

00023778 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   23778:	4603      	mov	r3, r0
	void *data = buf->data;
   2377a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2377c:	889a      	ldrh	r2, [r3, #4]
   2377e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   23780:	4401      	add	r1, r0
	buf->len -= len;
   23782:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   23784:	6019      	str	r1, [r3, #0]

	return data;
}
   23786:	4770      	bx	lr

00023788 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   23788:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2378a:	6803      	ldr	r3, [r0, #0]
   2378c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2378e:	2101      	movs	r1, #1
   23790:	f7ff ffea 	bl	23768 <net_buf_simple_pull>

	return val;
}
   23794:	4620      	mov	r0, r4
   23796:	bd10      	pop	{r4, pc}

00023798 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   23798:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2379a:	6803      	ldr	r3, [r0, #0]
   2379c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2379e:	2102      	movs	r1, #2
   237a0:	f7ff ffe2 	bl	23768 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   237a4:	4620      	mov	r0, r4
   237a6:	bd10      	pop	{r4, pc}

000237a8 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   237a8:	6802      	ldr	r2, [r0, #0]
   237aa:	6880      	ldr	r0, [r0, #8]
}
   237ac:	1a10      	subs	r0, r2, r0
   237ae:	4770      	bx	lr

000237b0 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   237b0:	8883      	ldrh	r3, [r0, #4]
   237b2:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   237b4:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   237b6:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   237b8:	6803      	ldr	r3, [r0, #0]
   237ba:	1a5b      	subs	r3, r3, r1
}
   237bc:	1ad0      	subs	r0, r2, r3
   237be:	4770      	bx	lr

000237c0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   237c0:	6903      	ldr	r3, [r0, #16]
   237c2:	b2c9      	uxtb	r1, r1
   237c4:	220c      	movs	r2, #12
   237c6:	fb01 3302 	mla	r3, r1, r2, r3
   237ca:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   237cc:	f000 0007 	and.w	r0, r0, #7
   237d0:	4770      	bx	lr

000237d2 <set_on_state>:
	__asm__ volatile(
   237d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   237d6:	f3ef 8211 	mrs	r2, BASEPRI
   237da:	f383 8812 	msr	BASEPRI_MAX, r3
   237de:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   237e2:	6803      	ldr	r3, [r0, #0]
   237e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   237e8:	f043 0302 	orr.w	r3, r3, #2
   237ec:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   237ee:	f382 8811 	msr	BASEPRI, r2
   237f2:	f3bf 8f6f 	isb	sy
}
   237f6:	4770      	bx	lr

000237f8 <stop>:
{
   237f8:	b570      	push	{r4, r5, r6, lr}
   237fa:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   237fc:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   237fe:	f04f 0440 	mov.w	r4, #64	; 0x40
   23802:	f3ef 8511 	mrs	r5, BASEPRI
   23806:	f384 8812 	msr	BASEPRI_MAX, r4
   2380a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2380e:	260c      	movs	r6, #12
   23810:	fb06 3401 	mla	r4, r6, r1, r3
   23814:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23816:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2381a:	d008      	beq.n	2382e <stop+0x36>
   2381c:	42a2      	cmp	r2, r4
   2381e:	d006      	beq.n	2382e <stop+0x36>
	__asm__ volatile(
   23820:	f385 8811 	msr	BASEPRI, r5
   23824:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   23828:	f04f 30ff 	mov.w	r0, #4294967295
}
   2382c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2382e:	fb06 3301 	mla	r3, r6, r1, r3
   23832:	2201      	movs	r2, #1
   23834:	641a      	str	r2, [r3, #64]	; 0x40
   23836:	f385 8811 	msr	BASEPRI, r5
   2383a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2383e:	6843      	ldr	r3, [r0, #4]
   23840:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   23844:	685b      	ldr	r3, [r3, #4]
   23846:	4798      	blx	r3
	return 0;
   23848:	2000      	movs	r0, #0
   2384a:	e7ef      	b.n	2382c <stop+0x34>

0002384c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2384c:	2280      	movs	r2, #128	; 0x80
   2384e:	f7ff bfd3 	b.w	237f8 <stop>

00023852 <async_start>:
{
   23852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23854:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   23856:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   23858:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2385a:	f04f 0540 	mov.w	r5, #64	; 0x40
   2385e:	f3ef 8611 	mrs	r6, BASEPRI
   23862:	f385 8812 	msr	BASEPRI_MAX, r5
   23866:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2386a:	250c      	movs	r5, #12
   2386c:	fb05 4401 	mla	r4, r5, r1, r4
   23870:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   23872:	f005 0c07 	and.w	ip, r5, #7
   23876:	f1bc 0f01 	cmp.w	ip, #1
   2387a:	d10c      	bne.n	23896 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2387c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2387e:	f386 8811 	msr	BASEPRI, r6
   23882:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   23886:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2388a:	6843      	ldr	r3, [r0, #4]
   2388c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   23890:	4798      	blx	r3
	return 0;
   23892:	2000      	movs	r0, #0
}
   23894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   23896:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2389a:	42af      	cmp	r7, r5
   2389c:	f386 8811 	msr	BASEPRI, r6
   238a0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   238a4:	bf0c      	ite	eq
   238a6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   238aa:	f04f 30ff 	movne.w	r0, #4294967295
   238ae:	e7f1      	b.n	23894 <async_start+0x42>

000238b0 <api_start>:
{
   238b0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   238b2:	2480      	movs	r4, #128	; 0x80
   238b4:	9400      	str	r4, [sp, #0]
   238b6:	f7ff ffcc 	bl	23852 <async_start>
}
   238ba:	b002      	add	sp, #8
   238bc:	bd10      	pop	{r4, pc}

000238be <onoff_started_callback>:
{
   238be:	b410      	push	{r4}
	return &data->mgr[type];
   238c0:	6900      	ldr	r0, [r0, #16]
   238c2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   238c4:	241c      	movs	r4, #28
   238c6:	fb03 0004 	mla	r0, r3, r4, r0
   238ca:	2100      	movs	r1, #0
}
   238cc:	bc10      	pop	{r4}
	notify(mgr, 0);
   238ce:	4710      	bx	r2

000238d0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   238d0:	2000      	movs	r0, #0
   238d2:	f7f6 be51 	b.w	1a578 <nrfx_clock_start>

000238d6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   238d6:	2000      	movs	r0, #0
   238d8:	f000 ba07 	b.w	23cea <nrfx_clock_stop>

000238dc <blocking_start_callback>:
{
   238dc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   238de:	f7f7 be0b 	b.w	1b4f8 <z_impl_k_sem_give>

000238e2 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   238e2:	2000      	movs	r0, #0
   238e4:	4770      	bx	lr

000238e6 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   238e6:	b538      	push	{r3, r4, r5, lr}
   238e8:	460c      	mov	r4, r1
   238ea:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   238ec:	f7f0 f836 	bl	1395c <bt_is_ready>
   238f0:	b128      	cbz	r0, 238fe <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   238f2:	4629      	mov	r1, r5
   238f4:	4620      	mov	r0, r4
}
   238f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   238fa:	f7ef bc83 	b.w	13204 <bt_hci_le_rand>
}
   238fe:	f06f 000a 	mvn.w	r0, #10
   23902:	bd38      	pop	{r3, r4, r5, pc}

00023904 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   23904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23906:	460f      	mov	r7, r1
   23908:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2390a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2390e:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   23910:	42a6      	cmp	r6, r4
   23912:	d803      	bhi.n	2391c <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   23914:	d016      	beq.n	23944 <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   23916:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   23918:	b003      	add	sp, #12
   2391a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2391c:	1b33      	subs	r3, r6, r4
   2391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23922:	bf38      	it	cc
   23924:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   23926:	462a      	mov	r2, r5
   23928:	ab01      	add	r3, sp, #4
   2392a:	1939      	adds	r1, r7, r4
   2392c:	2000      	movs	r0, #0
   2392e:	f7f9 f945 	bl	1cbbc <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   23932:	b920      	cbnz	r0, 2393e <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   23934:	9b01      	ldr	r3, [sp, #4]
   23936:	42ab      	cmp	r3, r5
   23938:	d101      	bne.n	2393e <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   2393a:	442c      	add	r4, r5
   2393c:	e7e8      	b.n	23910 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   2393e:	f06f 0015 	mvn.w	r0, #21
   23942:	e7e9      	b.n	23918 <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   23944:	2000      	movs	r0, #0
   23946:	e7e7      	b.n	23918 <entropy_cc3xx_rng_get_entropy+0x14>

00023948 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   23948:	2200      	movs	r2, #0
{
   2394a:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2394c:	4611      	mov	r1, r2
   2394e:	4610      	mov	r0, r2
   23950:	f7f9 f904 	bl	1cb5c <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   23954:	2800      	cmp	r0, #0
	}

	return 0;
}
   23956:	bf18      	it	ne
   23958:	f06f 0015 	mvnne.w	r0, #21
   2395c:	bd08      	pop	{r3, pc}

0002395e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2395e:	6843      	ldr	r3, [r0, #4]
   23960:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   23962:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   23966:	600b      	str	r3, [r1, #0]
}
   23968:	2000      	movs	r0, #0
   2396a:	4770      	bx	lr

0002396c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2396c:	6843      	ldr	r3, [r0, #4]
   2396e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   23970:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   23974:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   23978:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2397c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   23980:	2000      	movs	r0, #0
   23982:	4770      	bx	lr

00023984 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23984:	6843      	ldr	r3, [r0, #4]
   23986:	685b      	ldr	r3, [r3, #4]
}
   23988:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2398a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2398e:	4770      	bx	lr

00023990 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23990:	6843      	ldr	r3, [r0, #4]
   23992:	685b      	ldr	r3, [r3, #4]
}
   23994:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   23996:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2399a:	4770      	bx	lr

0002399c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2399c:	6843      	ldr	r3, [r0, #4]
   2399e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   239a0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   239a4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   239a8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   239aa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   239ae:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   239b2:	2000      	movs	r0, #0
   239b4:	4770      	bx	lr

000239b6 <gpio_nrfx_manage_callback>:
{
   239b6:	b510      	push	{r4, lr}
	return port->data;
   239b8:	6903      	ldr	r3, [r0, #16]
	return list->head;
   239ba:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   239bc:	b1f8      	cbz	r0, 239fe <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   239be:	4288      	cmp	r0, r1
   239c0:	d119      	bne.n	239f6 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   239c2:	689c      	ldr	r4, [r3, #8]
	return node->next;
   239c4:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   239c6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   239c8:	42a1      	cmp	r1, r4
   239ca:	d100      	bne.n	239ce <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   239cc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   239ce:	2000      	movs	r0, #0
   239d0:	6008      	str	r0, [r1, #0]
	if (set) {
   239d2:	b12a      	cbz	r2, 239e0 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   239d4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   239d6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   239d8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   239da:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   239dc:	b902      	cbnz	r2, 239e0 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   239de:	6099      	str	r1, [r3, #8]
	return 0;
   239e0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   239e2:	e010      	b.n	23a06 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   239e4:	4281      	cmp	r1, r0
   239e6:	d106      	bne.n	239f6 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   239e8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   239ea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   239ec:	6898      	ldr	r0, [r3, #8]
   239ee:	4281      	cmp	r1, r0
   239f0:	d1ed      	bne.n	239ce <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   239f2:	609c      	str	r4, [r3, #8]
}
   239f4:	e7eb      	b.n	239ce <gpio_nrfx_manage_callback+0x18>
	return node->next;
   239f6:	4604      	mov	r4, r0
   239f8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   239fa:	2800      	cmp	r0, #0
   239fc:	d1f2      	bne.n	239e4 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   239fe:	2a00      	cmp	r2, #0
   23a00:	d1e8      	bne.n	239d4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   23a02:	f06f 0015 	mvn.w	r0, #21
}
   23a06:	bd10      	pop	{r4, pc}

00023a08 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   23a08:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   23a0a:	6843      	ldr	r3, [r0, #4]
   23a0c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   23a0e:	7a05      	ldrb	r5, [r0, #8]
   23a10:	6844      	ldr	r4, [r0, #4]
   23a12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   23a16:	42a3      	cmp	r3, r4
   23a18:	d302      	bcc.n	23a20 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   23a1a:	f06f 0001 	mvn.w	r0, #1
}
   23a1e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   23a20:	795c      	ldrb	r4, [r3, #5]
   23a22:	428c      	cmp	r4, r1
   23a24:	d001      	beq.n	23a2a <pinctrl_lookup_state+0x22>
		(*state)++;
   23a26:	3308      	adds	r3, #8
   23a28:	e7f0      	b.n	23a0c <pinctrl_lookup_state+0x4>
			return 0;
   23a2a:	2000      	movs	r0, #0
   23a2c:	e7f7      	b.n	23a1e <pinctrl_lookup_state+0x16>

00023a2e <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   23a2e:	6902      	ldr	r2, [r0, #16]
{
   23a30:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   23a32:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   23a36:	e883 0003 	stmia.w	r3, {r0, r1}
}
   23a3a:	2000      	movs	r0, #0
   23a3c:	4770      	bx	lr

00023a3e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   23a3e:	6843      	ldr	r3, [r0, #4]
   23a40:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23a42:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23a46:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   23a4a:	4770      	bx	lr

00023a4c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   23a4c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   23a4e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   23a50:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a52:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23a56:	b150      	cbz	r0, 23a6e <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   23a58:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a5a:	2000      	movs	r0, #0
   23a5c:	7812      	ldrb	r2, [r2, #0]
   23a5e:	700a      	strb	r2, [r1, #0]
   23a60:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23a64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23a68:	2201      	movs	r2, #1
   23a6a:	601a      	str	r2, [r3, #0]
	return 0;
   23a6c:	4770      	bx	lr
		return -1;
   23a6e:	f04f 30ff 	mov.w	r0, #4294967295
}
   23a72:	4770      	bx	lr

00023a74 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   23a74:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   23a76:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a78:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   23a7c:	b940      	cbnz	r0, 23a90 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   23a7e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   23a80:	079b      	lsls	r3, r3, #30
   23a82:	d406      	bmi.n	23a92 <is_tx_ready.isra.0+0x1e>
   23a84:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   23a88:	3800      	subs	r0, #0
   23a8a:	bf18      	it	ne
   23a8c:	2001      	movne	r0, #1
   23a8e:	4770      	bx	lr
   23a90:	2001      	movs	r0, #1
}
   23a92:	4770      	bx	lr

00023a94 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   23a94:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   23a96:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   23a98:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   23a9c:	05c9      	lsls	r1, r1, #23
   23a9e:	d518      	bpl.n	23ad2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23aa0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   23aa4:	b1a9      	cbz	r1, 23ad2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   23aa6:	f04f 0040 	mov.w	r0, #64	; 0x40
   23aaa:	f3ef 8111 	mrs	r1, BASEPRI
   23aae:	f380 8812 	msr	BASEPRI_MAX, r0
   23ab2:	f3bf 8f6f 	isb	sy
   23ab6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   23aba:	b130      	cbz	r0, 23aca <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23abc:	2000      	movs	r0, #0
   23abe:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   23ac2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23ac6:	2001      	movs	r0, #1
   23ac8:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   23aca:	f381 8811 	msr	BASEPRI, r1
   23ace:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   23ad2:	6852      	ldr	r2, [r2, #4]
   23ad4:	06d2      	lsls	r2, r2, #27
   23ad6:	d515      	bpl.n	23b04 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   23ad8:	f04f 0140 	mov.w	r1, #64	; 0x40
   23adc:	f3ef 8211 	mrs	r2, BASEPRI
   23ae0:	f381 8812 	msr	BASEPRI_MAX, r1
   23ae4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23ae8:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   23aec:	b111      	cbz	r1, 23af4 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   23aee:	2100      	movs	r1, #0
   23af0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   23af4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   23af8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   23afc:	f382 8811 	msr	BASEPRI, r2
   23b00:	f3bf 8f6f 	isb	sy
}
   23b04:	4770      	bx	lr

00023b06 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   23b06:	4770      	bx	lr

00023b08 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   23b08:	f100 0350 	add.w	r3, r0, #80	; 0x50
   23b0c:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   23b0e:	b29b      	uxth	r3, r3
   23b10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23b14:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   23b18:	2200      	movs	r2, #0
   23b1a:	601a      	str	r2, [r3, #0]
   23b1c:	681b      	ldr	r3, [r3, #0]
}
   23b1e:	4770      	bx	lr

00023b20 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   23b20:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   23b22:	2000      	movs	r0, #0
   23b24:	f7ef f85e 	bl	12be4 <sys_arch_reboot>

00023b28 <sdc_assertion_handler>:
	k_oops();
   23b28:	4040      	eors	r0, r0
   23b2a:	f380 8811 	msr	BASEPRI, r0
   23b2e:	f04f 0003 	mov.w	r0, #3
   23b32:	df02      	svc	2
}
   23b34:	4770      	bx	lr

00023b36 <hci_driver_close>:
{
   23b36:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   23b38:	f7f6 fc72 	bl	1a420 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   23b3c:	f04f 30ff 	mov.w	r0, #4294967295
   23b40:	f04f 31ff 	mov.w	r1, #4294967295
   23b44:	f7f5 fe0e 	bl	19764 <multithreading_lock_acquire>
	if (err) {
   23b48:	4604      	mov	r4, r0
   23b4a:	b920      	cbnz	r0, 23b56 <hci_driver_close+0x20>
	err = sdc_disable();
   23b4c:	f7dc fee2 	bl	914 <sdc_disable>
	if (err) {
   23b50:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   23b52:	f7f5 fe0f 	bl	19774 <multithreading_lock_release>
}
   23b56:	4620      	mov	r0, r4
   23b58:	bd10      	pop	{r4, pc}

00023b5a <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   23b5a:	f7f5 beab 	b.w	198b4 <rand_prio_low_vector_get>

00023b5e <hci_driver_send>:
{
   23b5e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   23b60:	8a03      	ldrh	r3, [r0, #16]
{
   23b62:	4605      	mov	r5, r0
	if (!buf->len) {
   23b64:	b373      	cbz	r3, 23bc4 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   23b66:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   23b68:	b1a3      	cbz	r3, 23b94 <hci_driver_send+0x36>
   23b6a:	2b02      	cmp	r3, #2
   23b6c:	d12a      	bne.n	23bc4 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   23b6e:	f04f 30ff 	mov.w	r0, #4294967295
   23b72:	f04f 31ff 	mov.w	r1, #4294967295
   23b76:	f7f5 fdf5 	bl	19764 <multithreading_lock_acquire>
	if (!errcode) {
   23b7a:	4604      	mov	r4, r0
   23b7c:	b940      	cbnz	r0, 23b90 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   23b7e:	68e8      	ldr	r0, [r5, #12]
   23b80:	f7e9 fb99 	bl	d2b6 <sdc_hci_data_put>
   23b84:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   23b86:	f7f5 fdf5 	bl	19774 <multithreading_lock_release>
		if (errcode) {
   23b8a:	b1b4      	cbz	r4, 23bba <hci_driver_send+0x5c>
			receive_signal_raise();
   23b8c:	f7f5 fea6 	bl	198dc <receive_signal_raise>
}
   23b90:	4620      	mov	r0, r4
   23b92:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   23b94:	f04f 30ff 	mov.w	r0, #4294967295
   23b98:	f04f 31ff 	mov.w	r1, #4294967295
   23b9c:	f7f5 fde2 	bl	19764 <multithreading_lock_acquire>
	if (!errcode) {
   23ba0:	4604      	mov	r4, r0
   23ba2:	2800      	cmp	r0, #0
   23ba4:	d1f4      	bne.n	23b90 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   23ba6:	68e8      	ldr	r0, [r5, #12]
   23ba8:	f7f5 ff00 	bl	199ac <hci_internal_cmd_put>
   23bac:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   23bae:	f7f5 fde1 	bl	19774 <multithreading_lock_release>
	if (errcode) {
   23bb2:	2c00      	cmp	r4, #0
   23bb4:	d1ec      	bne.n	23b90 <hci_driver_send+0x32>
	receive_signal_raise();
   23bb6:	f7f5 fe91 	bl	198dc <receive_signal_raise>
		net_buf_unref(buf);
   23bba:	4628      	mov	r0, r5
   23bbc:	f7f4 fd52 	bl	18664 <net_buf_unref>
   23bc0:	2400      	movs	r4, #0
   23bc2:	e7e5      	b.n	23b90 <hci_driver_send+0x32>
	switch (type) {
   23bc4:	f06f 0415 	mvn.w	r4, #21
   23bc8:	e7e2      	b.n	23b90 <hci_driver_send+0x32>

00023bca <receive_work_handler>:
	hci_driver_receive_process();
   23bca:	f7f5 be9b 	b.w	19904 <hci_driver_receive_process>

00023bce <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   23bce:	b5f0      	push	{r4, r5, r6, r7, lr}
   23bd0:	b08d      	sub	sp, #52	; 0x34
   23bd2:	4615      	mov	r5, r2
   23bd4:	466a      	mov	r2, sp
   23bd6:	f100 0310 	add.w	r3, r0, #16
   23bda:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   23bdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   23be0:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   23be4:	4283      	cmp	r3, r0
   23be6:	d1f9      	bne.n	23bdc <bt_encrypt_le+0xe>
   23be8:	aa04      	add	r2, sp, #16
   23bea:	f101 0310 	add.w	r3, r1, #16
   23bee:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   23bf0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   23bf4:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   23bf8:	4299      	cmp	r1, r3
   23bfa:	d1f9      	bne.n	23bf0 <bt_encrypt_le+0x22>
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   23bfc:	f04f 30ff 	mov.w	r0, #4294967295
   23c00:	f04f 31ff 	mov.w	r1, #4294967295
   23c04:	f7f5 fdae 	bl	19764 <multithreading_lock_acquire>

	if (!errcode) {
   23c08:	4604      	mov	r4, r0
   23c0a:	b990      	cbnz	r0, 23c32 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   23c0c:	aa08      	add	r2, sp, #32
   23c0e:	4639      	mov	r1, r7
   23c10:	4630      	mov	r0, r6
   23c12:	f7e9 f810 	bl	cc36 <sdc_soc_ecb_block_encrypt>
   23c16:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   23c18:	f7f5 fdac 	bl	19774 <multithreading_lock_release>
	}

	if (!errcode) {
   23c1c:	b94c      	cbnz	r4, 23c32 <bt_encrypt_le+0x64>
   23c1e:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   23c20:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   23c24:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   23c26:	f812 1901 	ldrb.w	r1, [r2], #-1
   23c2a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   23c2e:	429d      	cmp	r5, r3
   23c30:	d1f9      	bne.n	23c26 <bt_encrypt_le+0x58>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   23c32:	4620      	mov	r0, r4
   23c34:	b00d      	add	sp, #52	; 0x34
   23c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023c38 <sys_memcpy_swap.constprop.0>:
   23c38:	f101 0320 	add.w	r3, r1, #32
   23c3c:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   23c3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   23c42:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   23c46:	428b      	cmp	r3, r1
   23c48:	d1f9      	bne.n	23c3e <sys_memcpy_swap.constprop.0+0x6>
}
   23c4a:	4770      	bx	lr

00023c4c <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   23c4c:	2100      	movs	r1, #0
   23c4e:	f7f6 bc09 	b.w	1a464 <cmd_le_generate_dhkey>

00023c52 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   23c52:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   23c56:	2901      	cmp	r1, #1
   23c58:	d801      	bhi.n	23c5e <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   23c5a:	f7f6 bc03 	b.w	1a464 <cmd_le_generate_dhkey>
}
   23c5e:	2012      	movs	r0, #18
   23c60:	4770      	bx	lr

00023c62 <m_assert_handler>:
	k_oops();
   23c62:	4040      	eors	r0, r0
   23c64:	f380 8811 	msr	BASEPRI, r0
   23c68:	f04f 0003 	mov.w	r0, #3
   23c6c:	df02      	svc	2
}
   23c6e:	4770      	bx	lr

00023c70 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   23c70:	4668      	mov	r0, sp
   23c72:	f020 0107 	bic.w	r1, r0, #7
   23c76:	468d      	mov	sp, r1
   23c78:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   23c7a:	f7e7 fc61 	bl	b540 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   23c7e:	f7ee fbf3 	bl	12468 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   23c82:	f7ee fcdb 	bl	1263c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   23c86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23c8a:	4685      	mov	sp, r0
   23c8c:	4770      	bx	lr

00023c8e <mpsl_low_prio_work_handler>:
{
   23c8e:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23c90:	f04f 31ff 	mov.w	r1, #4294967295
   23c94:	f04f 30ff 	mov.w	r0, #4294967295
   23c98:	f7f5 fd64 	bl	19764 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   23c9c:	f7ec fdb1 	bl	10802 <mpsl_low_priority_process>
}
   23ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   23ca4:	f7f5 bd66 	b.w	19774 <multithreading_lock_release>

00023ca8 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   23ca8:	4668      	mov	r0, sp
   23caa:	f020 0107 	bic.w	r1, r0, #7
   23cae:	468d      	mov	sp, r1
   23cb0:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   23cb2:	f7e7 fbfb 	bl	b4ac <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   23cb6:	f7ee fbd7 	bl	12468 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   23cba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23cbe:	4685      	mov	sp, r0
   23cc0:	4770      	bx	lr

00023cc2 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   23cc2:	4668      	mov	r0, sp
   23cc4:	f020 0107 	bic.w	r1, r0, #7
   23cc8:	468d      	mov	sp, r1
   23cca:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   23ccc:	f7e5 f8a6 	bl	8e1c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   23cd0:	f7ee fbca 	bl	12468 <_arch_isr_direct_pm>
   23cd4:	f7ee fcb2 	bl	1263c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   23cd8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23cdc:	4685      	mov	sp, r0
   23cde:	4770      	bx	lr

00023ce0 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   23ce0:	b508      	push	{r3, lr}

	mpsl_fem_init();
   23ce2:	f7ec ff76 	bl	10bd2 <mpsl_fem_init>

	return 0;
}
   23ce6:	2000      	movs	r0, #0
   23ce8:	bd08      	pop	{r3, pc}

00023cea <nrfx_clock_stop>:
	switch (domain) {
   23cea:	2801      	cmp	r0, #1
   23cec:	d101      	bne.n	23cf2 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   23cee:	f7e8 bad5 	b.w	c29c <mpsl_clock_hfclk_release>
}
   23cf2:	4770      	bx	lr

00023cf4 <nrfx_clock_enable>:
}
   23cf4:	4770      	bx	lr

00023cf6 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   23cf6:	f7e8 b8db 	b.w	beb0 <MPSL_IRQ_CLOCK_Handler>

00023cfa <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   23cfa:	f7f8 bed9 	b.w	1cab0 <nrf_cc3xx_platform_init>

00023cfe <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   23cfe:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   23d00:	f7ee fa5c 	bl	121bc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   23d04:	f7ee fb30 	bl	12368 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   23d08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   23d0c:	f7f8 bed0 	b.w	1cab0 <nrf_cc3xx_platform_init>

00023d10 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   23d10:	4700      	bx	r0

00023d12 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   23d12:	f000 bc34 	b.w	2457e <z_impl_k_busy_wait>

00023d16 <nrf_gpio_reconfigure>:
{
   23d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23d18:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23d1a:	a801      	add	r0, sp, #4
{
   23d1c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   23d20:	4616      	mov	r6, r2
   23d22:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23d24:	f7f6 fd78 	bl	1a818 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   23d28:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   23d2a:	f1b6 0c00 	subs.w	ip, r6, #0
   23d2e:	bf18      	it	ne
   23d30:	f04f 0c01 	movne.w	ip, #1
   23d34:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   23d38:	1e0b      	subs	r3, r1, #0
   23d3a:	bf18      	it	ne
   23d3c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23d3e:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   23d40:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23d44:	bf14      	ite	ne
   23d46:	f04f 0c0c 	movne.w	ip, #12
   23d4a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   23d4e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   23d50:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   23d54:	bf14      	ite	ne
   23d56:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   23d5a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   23d5e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23d60:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   23d64:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   23d68:	bf14      	ite	ne
   23d6a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   23d6e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   23d72:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   23d76:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23d7a:	b101      	cbz	r1, 23d7e <nrf_gpio_reconfigure+0x68>
   23d7c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   23d7e:	b10e      	cbz	r6, 23d84 <nrf_gpio_reconfigure+0x6e>
   23d80:	7836      	ldrb	r6, [r6, #0]
   23d82:	0076      	lsls	r6, r6, #1
   23d84:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   23d86:	b10d      	cbz	r5, 23d8c <nrf_gpio_reconfigure+0x76>
   23d88:	782d      	ldrb	r5, [r5, #0]
   23d8a:	00ad      	lsls	r5, r5, #2
   23d8c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   23d8e:	b10c      	cbz	r4, 23d94 <nrf_gpio_reconfigure+0x7e>
   23d90:	7824      	ldrb	r4, [r4, #0]
   23d92:	0224      	lsls	r4, r4, #8
   23d94:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   23d96:	b10f      	cbz	r7, 23d9c <nrf_gpio_reconfigure+0x86>
   23d98:	783f      	ldrb	r7, [r7, #0]
   23d9a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23d9c:	430c      	orrs	r4, r1
   23d9e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   23da0:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   23da4:	b003      	add	sp, #12
   23da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023da8 <nrf_gpio_cfg_sense_set>:
{
   23da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   23daa:	f10d 030f 	add.w	r3, sp, #15
   23dae:	9301      	str	r3, [sp, #4]
   23db0:	2300      	movs	r3, #0
{
   23db2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   23db6:	9300      	str	r3, [sp, #0]
   23db8:	461a      	mov	r2, r3
   23dba:	4619      	mov	r1, r3
   23dbc:	f7ff ffab 	bl	23d16 <nrf_gpio_reconfigure>
}
   23dc0:	b005      	add	sp, #20
   23dc2:	f85d fb04 	ldr.w	pc, [sp], #4

00023dc6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   23dc6:	4770      	bx	lr

00023dc8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   23dc8:	b140      	cbz	r0, 23ddc <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   23dca:	68c3      	ldr	r3, [r0, #12]
   23dcc:	7858      	ldrb	r0, [r3, #1]
   23dce:	f010 0001 	ands.w	r0, r0, #1
   23dd2:	bf1e      	ittt	ne
   23dd4:	7818      	ldrbne	r0, [r3, #0]
   23dd6:	fab0 f080 	clzne	r0, r0
   23dda:	0940      	lsrne	r0, r0, #5
}
   23ddc:	4770      	bx	lr

00023dde <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23de0:	4605      	mov	r5, r0
   23de2:	460e      	mov	r6, r1
	__asm__ volatile(
   23de4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23de8:	f3ef 8711 	mrs	r7, BASEPRI
   23dec:	f383 8812 	msr	BASEPRI_MAX, r3
   23df0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   23df4:	f7f8 f87a 	bl	1beec <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   23df8:	4631      	mov	r1, r6
   23dfa:	4604      	mov	r4, r0
   23dfc:	4628      	mov	r0, r5
   23dfe:	f7ff fe8f 	bl	23b20 <k_sys_fatal_error_handler>
	__asm__ volatile(
   23e02:	f387 8811 	msr	BASEPRI, r7
   23e06:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   23e0a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   23e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23e10:	f7ee bdec 	b.w	129ec <z_impl_k_thread_abort>

00023e14 <z_early_memset>:
	(void) memset(dst, c, n);
   23e14:	f7fc b87c 	b.w	1ff10 <memset>

00023e18 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   23e18:	f7fc b86f 	b.w	1fefa <memcpy>

00023e1c <k_heap_init>:
{
   23e1c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   23e1e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   23e22:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   23e26:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   23e28:	f7fb bc5c 	b.w	1f6e4 <sys_heap_init>

00023e2c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   23e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e30:	b085      	sub	sp, #20
   23e32:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   23e36:	4607      	mov	r7, r0
   23e38:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23e3a:	4650      	mov	r0, sl
   23e3c:	4621      	mov	r1, r4
{
   23e3e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23e40:	f000 fba1 	bl	24586 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   23e44:	f1b4 3fff 	cmp.w	r4, #4294967295
   23e48:	bf08      	it	eq
   23e4a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23e4e:	4605      	mov	r5, r0
   23e50:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   23e52:	bf04      	itt	eq
   23e54:	f04f 35ff 	moveq.w	r5, #4294967295
   23e58:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23e5c:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   23e60:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e64:	f3ef 8411 	mrs	r4, BASEPRI
   23e68:	f383 8812 	msr	BASEPRI_MAX, r3
   23e6c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23e70:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   23e74:	464a      	mov	r2, r9
   23e76:	4641      	mov	r1, r8
   23e78:	4638      	mov	r0, r7
   23e7a:	f7fb fbcc 	bl	1f616 <sys_heap_aligned_alloc>
   23e7e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   23e80:	f7f8 f9ec 	bl	1c25c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   23e84:	9b03      	ldr	r3, [sp, #12]
   23e86:	b13b      	cbz	r3, 23e98 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   23e88:	f384 8811 	msr	BASEPRI, r4
   23e8c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23e90:	4618      	mov	r0, r3
   23e92:	b005      	add	sp, #20
   23e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   23e98:	1a28      	subs	r0, r5, r0
   23e9a:	eb66 0101 	sbc.w	r1, r6, r1
   23e9e:	2801      	cmp	r0, #1
   23ea0:	f171 0200 	sbcs.w	r2, r1, #0
   23ea4:	dbf0      	blt.n	23e88 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23ea6:	e9cd 0100 	strd	r0, r1, [sp]
   23eaa:	465a      	mov	r2, fp
   23eac:	4621      	mov	r1, r4
   23eae:	4650      	mov	r0, sl
   23eb0:	f7f7 fe82 	bl	1bbb8 <z_pend_curr>
	__asm__ volatile(
   23eb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23eb8:	f3ef 8411 	mrs	r4, BASEPRI
   23ebc:	f383 8812 	msr	BASEPRI_MAX, r3
   23ec0:	f3bf 8f6f 	isb	sy
	return k;
   23ec4:	e7d6      	b.n	23e74 <k_heap_aligned_alloc+0x48>

00023ec6 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   23ec6:	b538      	push	{r3, r4, r5, lr}
   23ec8:	4604      	mov	r4, r0
   23eca:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ece:	f3ef 8511 	mrs	r5, BASEPRI
   23ed2:	f383 8812 	msr	BASEPRI_MAX, r3
   23ed6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   23eda:	f7fb fb64 	bl	1f5a6 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23ede:	f104 000c 	add.w	r0, r4, #12
   23ee2:	f000 faef 	bl	244c4 <z_unpend_all>
   23ee6:	b130      	cbz	r0, 23ef6 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   23ee8:	4629      	mov	r1, r5
   23eea:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   23ef2:	f7f7 bec5 	b.w	1bc80 <z_reschedule>
	__asm__ volatile(
   23ef6:	f385 8811 	msr	BASEPRI, r5
   23efa:	f3bf 8f6f 	isb	sy
}
   23efe:	bd38      	pop	{r3, r4, r5, pc}

00023f00 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   23f00:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   23f04:	4313      	orrs	r3, r2
   23f06:	f013 0303 	ands.w	r3, r3, #3
   23f0a:	d10c      	bne.n	23f26 <create_free_list+0x26>
	slab->free_list = NULL;
   23f0c:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   23f0e:	6881      	ldr	r1, [r0, #8]
   23f10:	4299      	cmp	r1, r3
   23f12:	d801      	bhi.n	23f18 <create_free_list+0x18>
	return 0;
   23f14:	2000      	movs	r0, #0
   23f16:	4770      	bx	lr
		*(char **)p = slab->free_list;
   23f18:	6941      	ldr	r1, [r0, #20]
   23f1a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   23f1c:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   23f1e:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   23f20:	3301      	adds	r3, #1
		p += slab->block_size;
   23f22:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   23f24:	e7f3      	b.n	23f0e <create_free_list+0xe>
		return -EINVAL;
   23f26:	f06f 0015 	mvn.w	r0, #21
}
   23f2a:	4770      	bx	lr

00023f2c <k_mem_slab_init>:
{
   23f2c:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   23f2e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   23f32:	2300      	movs	r3, #0
	slab->buffer = buffer;
   23f34:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   23f36:	6183      	str	r3, [r0, #24]
{
   23f38:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   23f3a:	f7ff ffe1 	bl	23f00 <create_free_list>
	if (rc < 0) {
   23f3e:	2800      	cmp	r0, #0
   23f40:	bfa8      	it	ge
   23f42:	e9c4 4400 	strdge	r4, r4, [r4]
}
   23f46:	bd10      	pop	{r4, pc}

00023f48 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   23f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f4a:	4604      	mov	r4, r0
   23f4c:	460d      	mov	r5, r1
	__asm__ volatile(
   23f4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f52:	f3ef 8611 	mrs	r6, BASEPRI
   23f56:	f383 8812 	msr	BASEPRI_MAX, r3
   23f5a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   23f5e:	6947      	ldr	r7, [r0, #20]
   23f60:	b977      	cbnz	r7, 23f80 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   23f62:	f000 fa65 	bl	24430 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   23f66:	b158      	cbz	r0, 23f80 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23f68:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23f6a:	6142      	str	r2, [r0, #20]
   23f6c:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   23f6e:	f000 fa29 	bl	243c4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   23f72:	4631      	mov	r1, r6
   23f74:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   23f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   23f7c:	f7f7 be80 	b.w	1bc80 <z_reschedule>
	**(char ***) mem = slab->free_list;
   23f80:	682b      	ldr	r3, [r5, #0]
   23f82:	6962      	ldr	r2, [r4, #20]
   23f84:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   23f86:	682b      	ldr	r3, [r5, #0]
   23f88:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   23f8a:	69a3      	ldr	r3, [r4, #24]
   23f8c:	3b01      	subs	r3, #1
   23f8e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   23f90:	f386 8811 	msr	BASEPRI, r6
   23f94:	f3bf 8f6f 	isb	sy
}
   23f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023f9a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23f9a:	f3ef 8005 	mrs	r0, IPSR
}
   23f9e:	3800      	subs	r0, #0
   23fa0:	bf18      	it	ne
   23fa2:	2001      	movne	r0, #1
   23fa4:	4770      	bx	lr

00023fa6 <z_impl_k_thread_name_set>:
}
   23fa6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   23faa:	4770      	bx	lr

00023fac <z_impl_k_thread_start>:
	z_sched_start(thread);
   23fac:	f7f7 be7a 	b.w	1bca4 <z_sched_start>

00023fb0 <z_pm_save_idle_exit>:
{
   23fb0:	b508      	push	{r3, lr}
	pm_system_resume();
   23fb2:	f7ed ff9b 	bl	11eec <pm_system_resume>
}
   23fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   23fba:	f7ff bda4 	b.w	23b06 <sys_clock_idle_exit>

00023fbe <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   23fbe:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23fc2:	428b      	cmp	r3, r1
   23fc4:	d001      	beq.n	23fca <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   23fc6:	f7f7 be15 	b.w	1bbf4 <z_set_prio>
}
   23fca:	2000      	movs	r0, #0
   23fcc:	4770      	bx	lr

00023fce <z_impl_k_mutex_init>:
{
   23fce:	4603      	mov	r3, r0
	mutex->owner = NULL;
   23fd0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   23fd2:	e9c3 0002 	strd	r0, r0, [r3, #8]
   23fd6:	e9c3 3300 	strd	r3, r3, [r3]
}
   23fda:	4770      	bx	lr

00023fdc <queue_insert>:
{
   23fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23fe0:	4699      	mov	r9, r3
   23fe2:	4604      	mov	r4, r0
   23fe4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   23fe8:	460d      	mov	r5, r1
   23fea:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23fec:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23ff0:	f04f 0240 	mov.w	r2, #64	; 0x40
   23ff4:	f3ef 8711 	mrs	r7, BASEPRI
   23ff8:	f382 8812 	msr	BASEPRI_MAX, r2
   23ffc:	f3bf 8f6f 	isb	sy
	if (is_append) {
   24000:	b103      	cbz	r3, 24004 <queue_insert+0x28>
	return list->tail;
   24002:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24004:	4630      	mov	r0, r6
   24006:	f000 fa13 	bl	24430 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2400a:	b158      	cbz	r0, 24024 <queue_insert+0x48>
   2400c:	2300      	movs	r3, #0
   2400e:	67c3      	str	r3, [r0, #124]	; 0x7c
   24010:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   24014:	f000 f9d6 	bl	243c4 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   24018:	4630      	mov	r0, r6
   2401a:	4639      	mov	r1, r7
   2401c:	f7f7 fe30 	bl	1bc80 <z_reschedule>
		return 0;
   24020:	2000      	movs	r0, #0
   24022:	e00c      	b.n	2403e <queue_insert+0x62>
	if (alloc) {
   24024:	f1b9 0f00 	cmp.w	r9, #0
   24028:	d01b      	beq.n	24062 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2402a:	2108      	movs	r1, #8
   2402c:	f7f8 f9b4 	bl	1c398 <z_thread_aligned_alloc>
		if (anode == NULL) {
   24030:	b938      	cbnz	r0, 24042 <queue_insert+0x66>
	__asm__ volatile(
   24032:	f387 8811 	msr	BASEPRI, r7
   24036:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2403a:	f06f 000b 	mvn.w	r0, #11
}
   2403e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   24042:	2201      	movs	r2, #1
		anode->data = data;
   24044:	f8c0 8004 	str.w	r8, [r0, #4]
   24048:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2404a:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2404c:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   24050:	b95d      	cbnz	r5, 2406a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24052:	6822      	ldr	r2, [r4, #0]
   24054:	430a      	orrs	r2, r1
   24056:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24058:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2405a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2405c:	b96a      	cbnz	r2, 2407a <queue_insert+0x9e>
	list->tail = node;
   2405e:	6060      	str	r0, [r4, #4]
}
   24060:	e00b      	b.n	2407a <queue_insert+0x9e>
	node->next_and_flags = flags;
   24062:	f8c8 9000 	str.w	r9, [r8]
}
   24066:	4640      	mov	r0, r8
   24068:	e7ef      	b.n	2404a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2406a:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2406c:	2a03      	cmp	r2, #3
   2406e:	d810      	bhi.n	24092 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24070:	6001      	str	r1, [r0, #0]
	return list->tail;
   24072:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   24074:	b939      	cbnz	r1, 24086 <queue_insert+0xaa>
	list->head = node;
   24076:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2407a:	2104      	movs	r1, #4
   2407c:	f104 0010 	add.w	r0, r4, #16
   24080:	f000 fbe3 	bl	2484a <z_handle_obj_poll_events>
   24084:	e7c8      	b.n	24018 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24086:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24088:	f002 0203 	and.w	r2, r2, #3
   2408c:	4302      	orrs	r2, r0
   2408e:	600a      	str	r2, [r1, #0]
   24090:	e7e5      	b.n	2405e <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24092:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24096:	430a      	orrs	r2, r1
   24098:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2409a:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2409c:	f002 0203 	and.w	r2, r2, #3
   240a0:	ea40 0302 	orr.w	r3, r0, r2
   240a4:	602b      	str	r3, [r5, #0]
}
   240a6:	e7e8      	b.n	2407a <queue_insert+0x9e>

000240a8 <z_queue_node_peek>:
{
   240a8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   240aa:	4604      	mov	r4, r0
   240ac:	b130      	cbz	r0, 240bc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   240ae:	6802      	ldr	r2, [r0, #0]
   240b0:	0793      	lsls	r3, r2, #30
   240b2:	d003      	beq.n	240bc <z_queue_node_peek+0x14>
		ret = anode->data;
   240b4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   240b6:	b109      	cbz	r1, 240bc <z_queue_node_peek+0x14>
			k_free(anode);
   240b8:	f000 fbdd 	bl	24876 <k_free>
}
   240bc:	4620      	mov	r0, r4
   240be:	bd10      	pop	{r4, pc}

000240c0 <z_impl_k_queue_init>:
	list->head = NULL;
   240c0:	2300      	movs	r3, #0
	list->tail = NULL;
   240c2:	e9c0 3300 	strd	r3, r3, [r0]
   240c6:	f100 0308 	add.w	r3, r0, #8
   240ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   240ce:	f100 0310 	add.w	r3, r0, #16
   240d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   240d6:	4770      	bx	lr

000240d8 <k_queue_append>:
{
   240d8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   240da:	2301      	movs	r3, #1
   240dc:	9300      	str	r3, [sp, #0]
   240de:	2300      	movs	r3, #0
{
   240e0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   240e2:	4619      	mov	r1, r3
   240e4:	f7ff ff7a 	bl	23fdc <queue_insert>
}
   240e8:	b003      	add	sp, #12
   240ea:	f85d fb04 	ldr.w	pc, [sp], #4

000240ee <k_queue_prepend>:
{
   240ee:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   240f0:	2300      	movs	r3, #0
{
   240f2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   240f4:	9300      	str	r3, [sp, #0]
   240f6:	4619      	mov	r1, r3
   240f8:	f7ff ff70 	bl	23fdc <queue_insert>
}
   240fc:	b003      	add	sp, #12
   240fe:	f85d fb04 	ldr.w	pc, [sp], #4

00024102 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   24102:	6800      	ldr	r0, [r0, #0]
   24104:	2100      	movs	r1, #0
   24106:	f7ff bfcf 	b.w	240a8 <z_queue_node_peek>

0002410a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2410a:	b15a      	cbz	r2, 24124 <z_impl_k_sem_init+0x1a>
   2410c:	428a      	cmp	r2, r1
   2410e:	d309      	bcc.n	24124 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   24110:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   24114:	e9c0 1202 	strd	r1, r2, [r0, #8]
   24118:	e9c0 0000 	strd	r0, r0, [r0]
   2411c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   24120:	2000      	movs	r0, #0
   24122:	4770      	bx	lr
		return -EINVAL;
   24124:	f06f 0015 	mvn.w	r0, #21
}
   24128:	4770      	bx	lr

0002412a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2412a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2412c:	2301      	movs	r3, #1
   2412e:	408b      	lsls	r3, r1
   24130:	ea22 0303 	bic.w	r3, r2, r3
   24134:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   24136:	fa22 f001 	lsr.w	r0, r2, r1
}
   2413a:	f000 0001 	and.w	r0, r0, #1
   2413e:	4770      	bx	lr

00024140 <unschedule_locked>:
{
   24140:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24142:	2103      	movs	r1, #3
{
   24144:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24146:	300c      	adds	r0, #12
   24148:	f7ff ffef 	bl	2412a <flag_test_and_clear>
   2414c:	b130      	cbz	r0, 2415c <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   2414e:	f104 0010 	add.w	r0, r4, #16
   24152:	f000 f9ea 	bl	2452a <z_abort_timeout>
   24156:	fab0 f080 	clz	r0, r0
   2415a:	0940      	lsrs	r0, r0, #5
}
   2415c:	bd10      	pop	{r4, pc}

0002415e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2415e:	b120      	cbz	r0, 2416a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   24160:	2200      	movs	r2, #0
   24162:	4611      	mov	r1, r2
   24164:	3088      	adds	r0, #136	; 0x88
   24166:	f000 b9bd 	b.w	244e4 <z_sched_wake>
}
   2416a:	4770      	bx	lr

0002416c <cancel_async_locked>:
{
   2416c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2416e:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24170:	f3c3 0640 	ubfx	r6, r3, #1, #1
   24174:	079b      	lsls	r3, r3, #30
{
   24176:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24178:	d416      	bmi.n	241a8 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2417a:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2417c:	2102      	movs	r1, #2
   2417e:	300c      	adds	r0, #12
   24180:	f7ff ffd3 	bl	2412a <flag_test_and_clear>
   24184:	b180      	cbz	r0, 241a8 <cancel_async_locked+0x3c>
	return list->head;
   24186:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2418a:	b16a      	cbz	r2, 241a8 <cancel_async_locked+0x3c>
   2418c:	4294      	cmp	r4, r2
   2418e:	d11d      	bne.n	241cc <cancel_async_locked+0x60>
	return node->next;
   24190:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   24192:	b99e      	cbnz	r6, 241bc <cancel_async_locked+0x50>
   24194:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   24198:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2419c:	429c      	cmp	r4, r3
   2419e:	d101      	bne.n	241a4 <cancel_async_locked+0x38>
	list->tail = node;
   241a0:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   241a4:	2300      	movs	r3, #0
   241a6:	6023      	str	r3, [r4, #0]
	return *flagp;
   241a8:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   241aa:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   241ae:	bf1e      	ittt	ne
   241b0:	f043 0302 	orrne.w	r3, r3, #2
   241b4:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   241b6:	f040 0002 	orrne.w	r0, r0, #2
}
   241ba:	bd70      	pop	{r4, r5, r6, pc}
   241bc:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   241be:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   241c2:	4294      	cmp	r4, r2
	list->tail = node;
   241c4:	bf08      	it	eq
   241c6:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   241ca:	e7eb      	b.n	241a4 <cancel_async_locked+0x38>
	return node->next;
   241cc:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   241ce:	6812      	ldr	r2, [r2, #0]
   241d0:	e7db      	b.n	2418a <cancel_async_locked+0x1e>

000241d2 <work_timeout>:
{
   241d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   241d4:	4604      	mov	r4, r0
	__asm__ volatile(
   241d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   241da:	f3ef 8511 	mrs	r5, BASEPRI
   241de:	f383 8812 	msr	BASEPRI_MAX, r3
   241e2:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   241e6:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   241e8:	f1a0 0610 	sub.w	r6, r0, #16
   241ec:	2103      	movs	r1, #3
   241ee:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   241f0:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   241f2:	f7ff ff9a 	bl	2412a <flag_test_and_clear>
   241f6:	b128      	cbz	r0, 24204 <work_timeout+0x32>
		queue = dw->queue;
   241f8:	69a3      	ldr	r3, [r4, #24]
   241fa:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   241fc:	a901      	add	r1, sp, #4
   241fe:	4630      	mov	r0, r6
   24200:	f7f7 fa9c 	bl	1b73c <submit_to_queue_locked>
	__asm__ volatile(
   24204:	f385 8811 	msr	BASEPRI, r5
   24208:	f3bf 8f6f 	isb	sy
}
   2420c:	b002      	add	sp, #8
   2420e:	bd70      	pop	{r4, r5, r6, pc}

00024210 <k_work_init>:
{
   24210:	b538      	push	{r3, r4, r5, lr}
   24212:	4604      	mov	r4, r0
   24214:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   24216:	2210      	movs	r2, #16
   24218:	2100      	movs	r1, #0
   2421a:	f7fb fe79 	bl	1ff10 <memset>
   2421e:	6065      	str	r5, [r4, #4]
}
   24220:	bd38      	pop	{r3, r4, r5, pc}

00024222 <k_work_busy_get>:
	__asm__ volatile(
   24222:	f04f 0240 	mov.w	r2, #64	; 0x40
   24226:	f3ef 8311 	mrs	r3, BASEPRI
   2422a:	f382 8812 	msr	BASEPRI_MAX, r2
   2422e:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   24232:	68c0      	ldr	r0, [r0, #12]
   24234:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   24238:	f383 8811 	msr	BASEPRI, r3
   2423c:	f3bf 8f6f 	isb	sy
}
   24240:	4770      	bx	lr

00024242 <z_work_submit_to_queue>:
{
   24242:	b513      	push	{r0, r1, r4, lr}
   24244:	9001      	str	r0, [sp, #4]
   24246:	4608      	mov	r0, r1
	__asm__ volatile(
   24248:	f04f 0340 	mov.w	r3, #64	; 0x40
   2424c:	f3ef 8411 	mrs	r4, BASEPRI
   24250:	f383 8812 	msr	BASEPRI_MAX, r3
   24254:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   24258:	a901      	add	r1, sp, #4
   2425a:	f7f7 fa6f 	bl	1b73c <submit_to_queue_locked>
	__asm__ volatile(
   2425e:	f384 8811 	msr	BASEPRI, r4
   24262:	f3bf 8f6f 	isb	sy
}
   24266:	b002      	add	sp, #8
   24268:	bd10      	pop	{r4, pc}

0002426a <k_work_submit_to_queue>:
{
   2426a:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2426c:	f7ff ffe9 	bl	24242 <z_work_submit_to_queue>
	if (ret > 0) {
   24270:	1e04      	subs	r4, r0, #0
   24272:	dd09      	ble.n	24288 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   24274:	f04f 0340 	mov.w	r3, #64	; 0x40
   24278:	f3ef 8011 	mrs	r0, BASEPRI
   2427c:	f383 8812 	msr	BASEPRI_MAX, r3
   24280:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24284:	f000 f908 	bl	24498 <z_reschedule_irqlock>
}
   24288:	4620      	mov	r0, r4
   2428a:	bd10      	pop	{r4, pc}

0002428c <k_work_queue_init>:
{
   2428c:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2428e:	22a0      	movs	r2, #160	; 0xa0
   24290:	2100      	movs	r1, #0
   24292:	f7fb fe3d 	bl	1ff10 <memset>
}
   24296:	bd08      	pop	{r3, pc}

00024298 <k_work_init_delayable>:
{
   24298:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2429a:	2230      	movs	r2, #48	; 0x30
{
   2429c:	4604      	mov	r4, r0
   2429e:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   242a0:	2100      	movs	r1, #0
   242a2:	f7fb fe35 	bl	1ff10 <memset>
   242a6:	f44f 7380 	mov.w	r3, #256	; 0x100
   242aa:	6065      	str	r5, [r4, #4]
   242ac:	60e3      	str	r3, [r4, #12]
}
   242ae:	bd38      	pop	{r3, r4, r5, pc}

000242b0 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   242b0:	f7ff bfb7 	b.w	24222 <k_work_busy_get>

000242b4 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   242b4:	b538      	push	{r3, r4, r5, lr}
   242b6:	4604      	mov	r4, r0
   242b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   242bc:	f3ef 8511 	mrs	r5, BASEPRI
   242c0:	f383 8812 	msr	BASEPRI_MAX, r3
   242c4:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   242c8:	f7ff ff3a 	bl	24140 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   242cc:	4620      	mov	r0, r4
   242ce:	f7ff ff4d 	bl	2416c <cancel_async_locked>
	__asm__ volatile(
   242d2:	f385 8811 	msr	BASEPRI, r5
   242d6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   242da:	bd38      	pop	{r3, r4, r5, pc}

000242dc <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   242dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242de:	4604      	mov	r4, r0
   242e0:	460d      	mov	r5, r1
	__asm__ volatile(
   242e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   242e6:	f3ef 8611 	mrs	r6, BASEPRI
   242ea:	f383 8812 	msr	BASEPRI_MAX, r3
   242ee:	f3bf 8f6f 	isb	sy
	return *flagp;
   242f2:	68c3      	ldr	r3, [r0, #12]
   242f4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   242f8:	2b00      	cmp	r3, #0
   242fa:	bf14      	ite	ne
   242fc:	2701      	movne	r7, #1
   242fe:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   24300:	d105      	bne.n	2430e <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   24302:	f386 8811 	msr	BASEPRI, r6
   24306:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2430a:	4638      	mov	r0, r7
   2430c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   2430e:	f7ff ff17 	bl	24140 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24312:	4620      	mov	r0, r4
   24314:	f7ff ff2a 	bl	2416c <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   24318:	4629      	mov	r1, r5
   2431a:	4620      	mov	r0, r4
   2431c:	f7f7 f9f0 	bl	1b700 <cancel_sync_locked>
   24320:	f386 8811 	msr	BASEPRI, r6
   24324:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   24328:	2800      	cmp	r0, #0
   2432a:	d0ee      	beq.n	2430a <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   2432c:	f04f 32ff 	mov.w	r2, #4294967295
   24330:	f04f 33ff 	mov.w	r3, #4294967295
   24334:	f105 0008 	add.w	r0, r5, #8
   24338:	f7f7 f904 	bl	1b544 <z_impl_k_sem_take>
   2433c:	e7e5      	b.n	2430a <k_work_cancel_delayable_sync+0x2e>

0002433e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2433e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24342:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24344:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24346:	2300      	movs	r3, #0
	node->prev = NULL;
   24348:	e9c0 3300 	strd	r3, r3, [r0]
}
   2434c:	4770      	bx	lr

0002434e <unpend_thread_no_timeout>:
{
   2434e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   24350:	f7ff fff5 	bl	2433e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24354:	7b43      	ldrb	r3, [r0, #13]
   24356:	f023 0302 	bic.w	r3, r3, #2
   2435a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2435c:	2300      	movs	r3, #0
   2435e:	6083      	str	r3, [r0, #8]
}
   24360:	bd08      	pop	{r3, pc}

00024362 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   24362:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24366:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2436a:	4283      	cmp	r3, r0
		return b2 - b1;
   2436c:	bf14      	ite	ne
   2436e:	1ac0      	subne	r0, r0, r3
	return 0;
   24370:	2000      	moveq	r0, #0
}
   24372:	4770      	bx	lr

00024374 <add_to_waitq_locked>:
{
   24374:	b538      	push	{r3, r4, r5, lr}
   24376:	4604      	mov	r4, r0
   24378:	460d      	mov	r5, r1
	unready_thread(thread);
   2437a:	f7f7 fbbd 	bl	1baf8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2437e:	7b63      	ldrb	r3, [r4, #13]
   24380:	f043 0302 	orr.w	r3, r3, #2
   24384:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   24386:	b1e5      	cbz	r5, 243c2 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   24388:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2438a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2438c:	429d      	cmp	r5, r3
   2438e:	d109      	bne.n	243a4 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   24390:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   24392:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   24396:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24398:	606c      	str	r4, [r5, #4]
}
   2439a:	e012      	b.n	243c2 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2439c:	686a      	ldr	r2, [r5, #4]
   2439e:	4293      	cmp	r3, r2
   243a0:	d0f6      	beq.n	24390 <add_to_waitq_locked+0x1c>
   243a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243a4:	2b00      	cmp	r3, #0
   243a6:	d0f3      	beq.n	24390 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   243a8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   243ac:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   243b0:	428a      	cmp	r2, r1
   243b2:	d0f3      	beq.n	2439c <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   243b4:	4291      	cmp	r1, r2
   243b6:	ddf1      	ble.n	2439c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   243b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   243ba:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   243be:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   243c0:	605c      	str	r4, [r3, #4]
}
   243c2:	bd38      	pop	{r3, r4, r5, pc}

000243c4 <z_ready_thread>:
{
   243c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   243c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   243ca:	f3ef 8411 	mrs	r4, BASEPRI
   243ce:	f383 8812 	msr	BASEPRI_MAX, r3
   243d2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   243d6:	f7f7 fb5b 	bl	1ba90 <ready_thread>
	__asm__ volatile(
   243da:	f384 8811 	msr	BASEPRI, r4
   243de:	f3bf 8f6f 	isb	sy
}
   243e2:	bd10      	pop	{r4, pc}

000243e4 <z_sched_wake_thread>:
{
   243e4:	b538      	push	{r3, r4, r5, lr}
   243e6:	4604      	mov	r4, r0
	__asm__ volatile(
   243e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   243ec:	f3ef 8511 	mrs	r5, BASEPRI
   243f0:	f383 8812 	msr	BASEPRI_MAX, r3
   243f4:	f3bf 8f6f 	isb	sy
		if (!killed) {
   243f8:	7b43      	ldrb	r3, [r0, #13]
   243fa:	f013 0f28 	tst.w	r3, #40	; 0x28
   243fe:	d10b      	bne.n	24418 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   24400:	6883      	ldr	r3, [r0, #8]
   24402:	b10b      	cbz	r3, 24408 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   24404:	f7ff ffa3 	bl	2434e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24408:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   2440a:	b951      	cbnz	r1, 24422 <z_sched_wake_thread+0x3e>
   2440c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   24410:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   24412:	4620      	mov	r0, r4
   24414:	f7f7 fb3c 	bl	1ba90 <ready_thread>
	__asm__ volatile(
   24418:	f385 8811 	msr	BASEPRI, r5
   2441c:	f3bf 8f6f 	isb	sy
}
   24420:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24422:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   24426:	e7f3      	b.n	24410 <z_sched_wake_thread+0x2c>

00024428 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   24428:	2101      	movs	r1, #1
   2442a:	3818      	subs	r0, #24
   2442c:	f7ff bfda 	b.w	243e4 <z_sched_wake_thread>

00024430 <z_unpend_first_thread>:
{
   24430:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24432:	f04f 0340 	mov.w	r3, #64	; 0x40
   24436:	f3ef 8511 	mrs	r5, BASEPRI
   2443a:	f383 8812 	msr	BASEPRI_MAX, r3
   2443e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24442:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24444:	42a0      	cmp	r0, r4
   24446:	d00d      	beq.n	24464 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   24448:	b134      	cbz	r4, 24458 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   2444a:	4620      	mov	r0, r4
   2444c:	f7ff ff7f 	bl	2434e <unpend_thread_no_timeout>
   24450:	f104 0018 	add.w	r0, r4, #24
   24454:	f000 f869 	bl	2452a <z_abort_timeout>
	__asm__ volatile(
   24458:	f385 8811 	msr	BASEPRI, r5
   2445c:	f3bf 8f6f 	isb	sy
}
   24460:	4620      	mov	r0, r4
   24462:	bd38      	pop	{r3, r4, r5, pc}
   24464:	2400      	movs	r4, #0
   24466:	e7f7      	b.n	24458 <z_unpend_first_thread+0x28>

00024468 <z_unpend_thread>:
{
   24468:	b510      	push	{r4, lr}
   2446a:	4601      	mov	r1, r0
	__asm__ volatile(
   2446c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24470:	f3ef 8411 	mrs	r4, BASEPRI
   24474:	f383 8812 	msr	BASEPRI_MAX, r3
   24478:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2447c:	6883      	ldr	r3, [r0, #8]
   2447e:	b10b      	cbz	r3, 24484 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   24480:	f7ff ff65 	bl	2434e <unpend_thread_no_timeout>
	__asm__ volatile(
   24484:	f384 8811 	msr	BASEPRI, r4
   24488:	f3bf 8f6f 	isb	sy
}
   2448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24490:	f101 0018 	add.w	r0, r1, #24
   24494:	f000 b849 	b.w	2452a <z_abort_timeout>

00024498 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24498:	4603      	mov	r3, r0
   2449a:	b920      	cbnz	r0, 244a6 <z_reschedule_irqlock+0xe>
   2449c:	f3ef 8205 	mrs	r2, IPSR
   244a0:	b90a      	cbnz	r2, 244a6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   244a2:	f7ee b80f 	b.w	124c4 <arch_swap>
   244a6:	f383 8811 	msr	BASEPRI, r3
   244aa:	f3bf 8f6f 	isb	sy
}
   244ae:	4770      	bx	lr

000244b0 <z_reschedule_unlocked>:
	__asm__ volatile(
   244b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   244b4:	f3ef 8011 	mrs	r0, BASEPRI
   244b8:	f383 8812 	msr	BASEPRI_MAX, r3
   244bc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   244c0:	f7ff bfea 	b.w	24498 <z_reschedule_irqlock>

000244c4 <z_unpend_all>:
{
   244c4:	b538      	push	{r3, r4, r5, lr}
   244c6:	4605      	mov	r5, r0
	int need_sched = 0;
   244c8:	2000      	movs	r0, #0
	return list->head == list;
   244ca:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   244cc:	42a5      	cmp	r5, r4
   244ce:	d000      	beq.n	244d2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   244d0:	b904      	cbnz	r4, 244d4 <z_unpend_all+0x10>
}
   244d2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   244d4:	4620      	mov	r0, r4
   244d6:	f7ff ffc7 	bl	24468 <z_unpend_thread>
		z_ready_thread(thread);
   244da:	4620      	mov	r0, r4
   244dc:	f7ff ff72 	bl	243c4 <z_ready_thread>
		need_sched = 1;
   244e0:	2001      	movs	r0, #1
   244e2:	e7f2      	b.n	244ca <z_unpend_all+0x6>

000244e4 <z_sched_wake>:
{
   244e4:	b538      	push	{r3, r4, r5, lr}
   244e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   244ea:	f3ef 8511 	mrs	r5, BASEPRI
   244ee:	f383 8812 	msr	BASEPRI_MAX, r3
   244f2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   244f6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   244f8:	42a0      	cmp	r0, r4
   244fa:	d012      	beq.n	24522 <z_sched_wake+0x3e>
		if (thread != NULL) {
   244fc:	b19c      	cbz	r4, 24526 <z_sched_wake+0x42>
   244fe:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   24500:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   24502:	4620      	mov	r0, r4
   24504:	f7ff ff23 	bl	2434e <unpend_thread_no_timeout>
   24508:	f104 0018 	add.w	r0, r4, #24
   2450c:	f000 f80d 	bl	2452a <z_abort_timeout>
			ready_thread(thread);
   24510:	4620      	mov	r0, r4
   24512:	f7f7 fabd 	bl	1ba90 <ready_thread>
			ret = true;
   24516:	2001      	movs	r0, #1
	__asm__ volatile(
   24518:	f385 8811 	msr	BASEPRI, r5
   2451c:	f3bf 8f6f 	isb	sy
}
   24520:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   24522:	2000      	movs	r0, #0
   24524:	e7f8      	b.n	24518 <z_sched_wake+0x34>
   24526:	4620      	mov	r0, r4
   24528:	e7f6      	b.n	24518 <z_sched_wake+0x34>

0002452a <z_abort_timeout>:
{
   2452a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2452c:	f04f 0240 	mov.w	r2, #64	; 0x40
   24530:	f3ef 8411 	mrs	r4, BASEPRI
   24534:	f382 8812 	msr	BASEPRI_MAX, r2
   24538:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2453c:	6803      	ldr	r3, [r0, #0]
   2453e:	b13b      	cbz	r3, 24550 <z_abort_timeout+0x26>
			remove_timeout(to);
   24540:	f7f7 fd90 	bl	1c064 <remove_timeout>
			ret = 0;
   24544:	2000      	movs	r0, #0
	__asm__ volatile(
   24546:	f384 8811 	msr	BASEPRI, r4
   2454a:	f3bf 8f6f 	isb	sy
}
   2454e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   24550:	f06f 0015 	mvn.w	r0, #21
   24554:	e7f7      	b.n	24546 <z_abort_timeout+0x1c>

00024556 <z_get_next_timeout_expiry>:
{
   24556:	b510      	push	{r4, lr}
	__asm__ volatile(
   24558:	f04f 0340 	mov.w	r3, #64	; 0x40
   2455c:	f3ef 8411 	mrs	r4, BASEPRI
   24560:	f383 8812 	msr	BASEPRI_MAX, r3
   24564:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   24568:	f7f7 fd5c 	bl	1c024 <next_timeout>
	__asm__ volatile(
   2456c:	f384 8811 	msr	BASEPRI, r4
   24570:	f3bf 8f6f 	isb	sy
}
   24574:	bd10      	pop	{r4, pc}

00024576 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   24576:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   24578:	f7f7 fe70 	bl	1c25c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2457c:	bd08      	pop	{r3, pc}

0002457e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2457e:	b108      	cbz	r0, 24584 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   24580:	f7ee bb46 	b.w	12c10 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   24584:	4770      	bx	lr

00024586 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24586:	f1b1 3fff 	cmp.w	r1, #4294967295
   2458a:	bf08      	it	eq
   2458c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   24590:	b538      	push	{r3, r4, r5, lr}
   24592:	460c      	mov	r4, r1
   24594:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24596:	d014      	beq.n	245c2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24598:	4308      	orrs	r0, r1
   2459a:	d103      	bne.n	245a4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2459c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   245a0:	f7f7 be5c 	b.w	1c25c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   245a4:	f06f 0001 	mvn.w	r0, #1
   245a8:	1b40      	subs	r0, r0, r5
   245aa:	f04f 33ff 	mov.w	r3, #4294967295
   245ae:	eb63 0101 	sbc.w	r1, r3, r1
   245b2:	2900      	cmp	r1, #0
   245b4:	da04      	bge.n	245c0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   245b6:	f7f7 fe51 	bl	1c25c <sys_clock_tick_get>
   245ba:	1940      	adds	r0, r0, r5
   245bc:	eb41 0104 	adc.w	r1, r1, r4
}
   245c0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   245c2:	f04f 30ff 	mov.w	r0, #4294967295
   245c6:	4601      	mov	r1, r0
   245c8:	e7fa      	b.n	245c0 <sys_clock_timeout_end_calc+0x3a>

000245ca <add_event>:
{
   245ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245cc:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   245ce:	e9d0 1300 	ldrd	r1, r3, [r0]
   245d2:	4288      	cmp	r0, r1
   245d4:	4604      	mov	r4, r0
   245d6:	d105      	bne.n	245e4 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   245d8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   245da:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   245de:	601d      	str	r5, [r3, #0]
	list->tail = node;
   245e0:	6065      	str	r5, [r4, #4]
   245e2:	e01d      	b.n	24620 <add_event+0x56>
	if ((pending == NULL) ||
   245e4:	2b00      	cmp	r3, #0
   245e6:	d0f7      	beq.n	245d8 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   245e8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   245ea:	b100      	cbz	r0, 245ee <add_event+0x24>
   245ec:	3860      	subs	r0, #96	; 0x60
   245ee:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   245f2:	4639      	mov	r1, r7
   245f4:	f7ff feb5 	bl	24362 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   245f8:	2800      	cmp	r0, #0
   245fa:	dced      	bgt.n	245d8 <add_event+0xe>
	return list->head == list;
   245fc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   245fe:	42b4      	cmp	r4, r6
   24600:	d0ea      	beq.n	245d8 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   24602:	2e00      	cmp	r6, #0
   24604:	d0e8      	beq.n	245d8 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   24606:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24608:	b101      	cbz	r1, 2460c <add_event+0x42>
   2460a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2460c:	4638      	mov	r0, r7
   2460e:	f7ff fea8 	bl	24362 <z_sched_prio_cmp>
   24612:	2800      	cmp	r0, #0
   24614:	dd05      	ble.n	24622 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   24616:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   24618:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2461c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2461e:	6075      	str	r5, [r6, #4]
}
   24620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   24622:	6863      	ldr	r3, [r4, #4]
   24624:	429e      	cmp	r6, r3
   24626:	d0d7      	beq.n	245d8 <add_event+0xe>
   24628:	6836      	ldr	r6, [r6, #0]
   2462a:	e7ea      	b.n	24602 <add_event+0x38>

0002462c <register_events>:
{
   2462c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   24630:	2500      	movs	r5, #0
{
   24632:	468b      	mov	fp, r1
   24634:	4614      	mov	r4, r2
   24636:	461f      	mov	r7, r3
   24638:	4682      	mov	sl, r0
	int events_registered = 0;
   2463a:	462e      	mov	r6, r5
	event->poller = NULL;
   2463c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2463e:	455d      	cmp	r5, fp
   24640:	db02      	blt.n	24648 <register_events+0x1c>
}
   24642:	4630      	mov	r0, r6
   24644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   24648:	f04f 0340 	mov.w	r3, #64	; 0x40
   2464c:	f3ef 8911 	mrs	r9, BASEPRI
   24650:	f383 8812 	msr	BASEPRI_MAX, r3
   24654:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   24658:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2465c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24660:	3b01      	subs	r3, #1
   24662:	2b07      	cmp	r3, #7
   24664:	d80f      	bhi.n	24686 <register_events+0x5a>
   24666:	e8df f003 	tbb	[pc, r3]
   2466a:	041e      	.short	0x041e
   2466c:	0e0e0a0e 	.word	0x0e0e0a0e
   24670:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   24672:	f8da 3010 	ldr.w	r3, [sl, #16]
   24676:	689b      	ldr	r3, [r3, #8]
   24678:	b12b      	cbz	r3, 24686 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2467a:	2302      	movs	r3, #2
   2467c:	e020      	b.n	246c0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2467e:	f8da 3010 	ldr.w	r3, [sl, #16]
   24682:	681b      	ldr	r3, [r3, #0]
   24684:	bb8b      	cbnz	r3, 246ea <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   24686:	bb47      	cbnz	r7, 246da <register_events+0xae>
   24688:	7823      	ldrb	r3, [r4, #0]
   2468a:	b333      	cbz	r3, 246da <register_events+0xae>
	switch (event->type) {
   2468c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   24690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24694:	3b01      	subs	r3, #1
   24696:	2b07      	cmp	r3, #7
   24698:	d830      	bhi.n	246fc <register_events+0xd0>
   2469a:	e8df f003 	tbb	[pc, r3]
   2469e:	2833      	.short	0x2833
   246a0:	2f2f282f 	.word	0x2f2f282f
   246a4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   246a6:	f8da 3010 	ldr.w	r3, [sl, #16]
   246aa:	689b      	ldr	r3, [r3, #8]
   246ac:	2b00      	cmp	r3, #0
   246ae:	d0ea      	beq.n	24686 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   246b0:	2301      	movs	r3, #1
   246b2:	e005      	b.n	246c0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   246b4:	f8da 3010 	ldr.w	r3, [sl, #16]
   246b8:	6a1b      	ldr	r3, [r3, #32]
   246ba:	2b00      	cmp	r3, #0
   246bc:	d0e3      	beq.n	24686 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   246be:	2310      	movs	r3, #16
	event->state |= state;
   246c0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   246c4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   246c8:	f3c2 3186 	ubfx	r1, r2, #14, #7
   246cc:	430b      	orrs	r3, r1
   246ce:	f363 3294 	bfi	r2, r3, #14, #7
   246d2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   246d6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   246da:	f389 8811 	msr	BASEPRI, r9
   246de:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   246e2:	3501      	adds	r5, #1
   246e4:	f10a 0a14 	add.w	sl, sl, #20
   246e8:	e7a9      	b.n	2463e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   246ea:	2304      	movs	r3, #4
   246ec:	e7e8      	b.n	246c0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   246ee:	f8da 0010 	ldr.w	r0, [sl, #16]
   246f2:	4622      	mov	r2, r4
   246f4:	4651      	mov	r1, sl
   246f6:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   246f8:	f7ff ff67 	bl	245ca <add_event>
	event->poller = poller;
   246fc:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   24700:	3601      	adds	r6, #1
   24702:	e7ea      	b.n	246da <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   24704:	f8da 0010 	ldr.w	r0, [sl, #16]
   24708:	4622      	mov	r2, r4
   2470a:	4651      	mov	r1, sl
   2470c:	e7f4      	b.n	246f8 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2470e:	f8da 0010 	ldr.w	r0, [sl, #16]
   24712:	4622      	mov	r2, r4
   24714:	4651      	mov	r1, sl
   24716:	3024      	adds	r0, #36	; 0x24
   24718:	e7ee      	b.n	246f8 <register_events+0xcc>

0002471a <signal_poll_event>:
{
   2471a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2471e:	6884      	ldr	r4, [r0, #8]
{
   24720:	4605      	mov	r5, r0
   24722:	460e      	mov	r6, r1
	if (poller != NULL) {
   24724:	b144      	cbz	r4, 24738 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   24726:	7863      	ldrb	r3, [r4, #1]
   24728:	2b01      	cmp	r3, #1
   2472a:	d12e      	bne.n	2478a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2472c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   24730:	f013 0302 	ands.w	r3, r3, #2
   24734:	d10a      	bne.n	2474c <signal_poll_event+0x32>
		poller->is_polling = false;
   24736:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   24738:	68eb      	ldr	r3, [r5, #12]
   2473a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2473e:	4316      	orrs	r6, r2
	event->poller = NULL;
   24740:	2000      	movs	r0, #0
	event->state |= state;
   24742:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   24746:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   24748:	60eb      	str	r3, [r5, #12]
	return retcode;
   2474a:	e03e      	b.n	247ca <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2474c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   24750:	f1b3 3fff 	cmp.w	r3, #4294967295
   24754:	bf08      	it	eq
   24756:	f112 0f02 	cmneq.w	r2, #2
   2475a:	d032      	beq.n	247c2 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2475c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   24760:	4640      	mov	r0, r8
   24762:	f7ff fe81 	bl	24468 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   24766:	2e08      	cmp	r6, #8
   24768:	bf0c      	ite	eq
   2476a:	f06f 0303 	mvneq.w	r3, #3
   2476e:	2300      	movne	r3, #0
   24770:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24772:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   24776:	06db      	lsls	r3, r3, #27
   24778:	d109      	bne.n	2478e <signal_poll_event+0x74>
   2477a:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2477e:	b937      	cbnz	r7, 2478e <signal_poll_event+0x74>
	z_ready_thread(thread);
   24780:	4640      	mov	r0, r8
   24782:	f7ff fe1f 	bl	243c4 <z_ready_thread>
		poller->is_polling = false;
   24786:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   24788:	e7d6      	b.n	24738 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2478a:	2b02      	cmp	r3, #2
   2478c:	d001      	beq.n	24792 <signal_poll_event+0x78>
		poller->is_polling = false;
   2478e:	2300      	movs	r3, #0
   24790:	e7d1      	b.n	24736 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   24792:	7823      	ldrb	r3, [r4, #0]
   24794:	2b00      	cmp	r3, #0
   24796:	d0cf      	beq.n	24738 <signal_poll_event+0x1e>
   24798:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2479c:	2f00      	cmp	r7, #0
   2479e:	d0f2      	beq.n	24786 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   247a0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   247a4:	f1a4 0914 	sub.w	r9, r4, #20
   247a8:	f104 0014 	add.w	r0, r4, #20
   247ac:	f7ff febd 	bl	2452a <z_abort_timeout>
		twork->poll_result = 0;
   247b0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   247b4:	4649      	mov	r1, r9
   247b6:	4638      	mov	r0, r7
   247b8:	f7ff fd43 	bl	24242 <z_work_submit_to_queue>
		poller->is_polling = false;
   247bc:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   247c0:	e7ba      	b.n	24738 <signal_poll_event+0x1e>
		poller->is_polling = false;
   247c2:	2300      	movs	r3, #0
   247c4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   247c6:	f06f 000a 	mvn.w	r0, #10
}
   247ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000247ce <clear_event_registrations>:
	while (num_events--) {
   247ce:	2314      	movs	r3, #20
{
   247d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   247d2:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   247d6:	2400      	movs	r4, #0
	switch (event->type) {
   247d8:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   247dc:	b901      	cbnz	r1, 247e0 <clear_event_registrations+0x12>
}
   247de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   247e0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   247e4:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   247e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   247ec:	2b08      	cmp	r3, #8
   247ee:	f1a0 0714 	sub.w	r7, r0, #20
   247f2:	d80c      	bhi.n	2480e <clear_event_registrations+0x40>
   247f4:	fa26 f303 	lsr.w	r3, r6, r3
   247f8:	07db      	lsls	r3, r3, #31
   247fa:	d508      	bpl.n	2480e <clear_event_registrations+0x40>
	return node->next != NULL;
   247fc:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   24800:	b12b      	cbz	r3, 2480e <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   24802:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   24806:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   24808:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2480a:	e940 4405 	strd	r4, r4, [r0, #-20]
   2480e:	f382 8811 	msr	BASEPRI, r2
   24812:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24816:	f04f 0340 	mov.w	r3, #64	; 0x40
   2481a:	f3ef 8211 	mrs	r2, BASEPRI
   2481e:	f383 8812 	msr	BASEPRI_MAX, r3
   24822:	f3bf 8f6f 	isb	sy
   24826:	3901      	subs	r1, #1
   24828:	4638      	mov	r0, r7
   2482a:	e7d7      	b.n	247dc <clear_event_registrations+0xe>

0002482c <k_poll_event_init>:
{
   2482c:	b510      	push	{r4, lr}
	event->type = type;
   2482e:	0552      	lsls	r2, r2, #21
   24830:	0209      	lsls	r1, r1, #8
   24832:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   24836:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2483a:	430a      	orrs	r2, r1
   2483c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2483e:	2400      	movs	r4, #0
	event->type = type;
   24840:	430a      	orrs	r2, r1
	event->obj = obj;
   24842:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   24846:	6084      	str	r4, [r0, #8]
}
   24848:	bd10      	pop	{r4, pc}

0002484a <z_handle_obj_poll_events>:
{
   2484a:	4603      	mov	r3, r0
	return list->head == list;
   2484c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2484e:	4283      	cmp	r3, r0
   24850:	d008      	beq.n	24864 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   24852:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24856:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24858:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2485a:	2300      	movs	r3, #0
	node->prev = NULL;
   2485c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   24860:	f7ff bf5b 	b.w	2471a <signal_poll_event>
}
   24864:	4770      	bx	lr

00024866 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   24866:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   24868:	e9c0 0000 	strd	r0, r0, [r0]
   2486c:	6083      	str	r3, [r0, #8]
}
   2486e:	4770      	bx	lr

00024870 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   24870:	2300      	movs	r3, #0
   24872:	6083      	str	r3, [r0, #8]
}
   24874:	4770      	bx	lr

00024876 <k_free>:
	if (ptr != NULL) {
   24876:	b120      	cbz	r0, 24882 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   24878:	1f01      	subs	r1, r0, #4
   2487a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2487e:	f7ff bb22 	b.w	23ec6 <k_heap_free>
}
   24882:	4770      	bx	lr

00024884 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   24884:	4770      	bx	lr
	...
