
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00027000 <_vector_table>:
   27000:	40 32 00 20 45 99 02 00 33 f3 02 00 19 99 02 00     @2. E...3.......
   27010:	19 99 02 00 19 99 02 00 19 99 02 00 00 00 00 00     ................
	...
   2702c:	81 95 02 00 19 99 02 00 00 00 00 00 2d 95 02 00     ............-...
   2703c:	19 99 02 00                                         ....

00027040 <_irq_vector_table>:
   27040:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   27050:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   27060:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   27070:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   27080:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   27090:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   270a0:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   270b0:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   270c0:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   270d0:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   270e0:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...
   270f0:	31 96 02 00 31 96 02 00 31 96 02 00 31 96 02 00     1...1...1...1...

Disassembly of section text:

00027100 <__aeabi_uldivmod>:
   27100:	b953      	cbnz	r3, 27118 <__aeabi_uldivmod+0x18>
   27102:	b94a      	cbnz	r2, 27118 <__aeabi_uldivmod+0x18>
   27104:	2900      	cmp	r1, #0
   27106:	bf08      	it	eq
   27108:	2800      	cmpeq	r0, #0
   2710a:	bf1c      	itt	ne
   2710c:	f04f 31ff 	movne.w	r1, #4294967295
   27110:	f04f 30ff 	movne.w	r0, #4294967295
   27114:	f000 b80c 	b.w	27130 <__aeabi_idiv0>
   27118:	f1ad 0c08 	sub.w	ip, sp, #8
   2711c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   27120:	f000 f808 	bl	27134 <__udivmoddi4>
   27124:	f8dd e004 	ldr.w	lr, [sp, #4]
   27128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2712c:	b004      	add	sp, #16
   2712e:	4770      	bx	lr

00027130 <__aeabi_idiv0>:
   27130:	4770      	bx	lr
   27132:	bf00      	nop

00027134 <__udivmoddi4>:
   27134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27138:	4686      	mov	lr, r0
   2713a:	468c      	mov	ip, r1
   2713c:	4608      	mov	r0, r1
   2713e:	9e08      	ldr	r6, [sp, #32]
   27140:	4615      	mov	r5, r2
   27142:	4674      	mov	r4, lr
   27144:	4619      	mov	r1, r3
   27146:	2b00      	cmp	r3, #0
   27148:	f040 80c2 	bne.w	272d0 <__udivmoddi4+0x19c>
   2714c:	4285      	cmp	r5, r0
   2714e:	fab2 f282 	clz	r2, r2
   27152:	d945      	bls.n	271e0 <__udivmoddi4+0xac>
   27154:	b14a      	cbz	r2, 2716a <__udivmoddi4+0x36>
   27156:	f1c2 0320 	rsb	r3, r2, #32
   2715a:	fa00 fc02 	lsl.w	ip, r0, r2
   2715e:	fa2e f303 	lsr.w	r3, lr, r3
   27162:	4095      	lsls	r5, r2
   27164:	ea43 0c0c 	orr.w	ip, r3, ip
   27168:	4094      	lsls	r4, r2
   2716a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2716e:	b2a8      	uxth	r0, r5
   27170:	fbbc f8fe 	udiv	r8, ip, lr
   27174:	0c23      	lsrs	r3, r4, #16
   27176:	fb0e cc18 	mls	ip, lr, r8, ip
   2717a:	fb08 f900 	mul.w	r9, r8, r0
   2717e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   27182:	4599      	cmp	r9, r3
   27184:	d928      	bls.n	271d8 <__udivmoddi4+0xa4>
   27186:	18eb      	adds	r3, r5, r3
   27188:	f108 37ff 	add.w	r7, r8, #4294967295
   2718c:	d204      	bcs.n	27198 <__udivmoddi4+0x64>
   2718e:	4599      	cmp	r9, r3
   27190:	d902      	bls.n	27198 <__udivmoddi4+0x64>
   27192:	f1a8 0702 	sub.w	r7, r8, #2
   27196:	442b      	add	r3, r5
   27198:	eba3 0309 	sub.w	r3, r3, r9
   2719c:	b2a4      	uxth	r4, r4
   2719e:	fbb3 fcfe 	udiv	ip, r3, lr
   271a2:	fb0e 331c 	mls	r3, lr, ip, r3
   271a6:	fb0c f000 	mul.w	r0, ip, r0
   271aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   271ae:	42a0      	cmp	r0, r4
   271b0:	d914      	bls.n	271dc <__udivmoddi4+0xa8>
   271b2:	192c      	adds	r4, r5, r4
   271b4:	f10c 33ff 	add.w	r3, ip, #4294967295
   271b8:	d204      	bcs.n	271c4 <__udivmoddi4+0x90>
   271ba:	42a0      	cmp	r0, r4
   271bc:	d902      	bls.n	271c4 <__udivmoddi4+0x90>
   271be:	f1ac 0302 	sub.w	r3, ip, #2
   271c2:	442c      	add	r4, r5
   271c4:	1a24      	subs	r4, r4, r0
   271c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   271ca:	b11e      	cbz	r6, 271d4 <__udivmoddi4+0xa0>
   271cc:	40d4      	lsrs	r4, r2
   271ce:	2300      	movs	r3, #0
   271d0:	6034      	str	r4, [r6, #0]
   271d2:	6073      	str	r3, [r6, #4]
   271d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   271d8:	4647      	mov	r7, r8
   271da:	e7dd      	b.n	27198 <__udivmoddi4+0x64>
   271dc:	4663      	mov	r3, ip
   271de:	e7f1      	b.n	271c4 <__udivmoddi4+0x90>
   271e0:	bb92      	cbnz	r2, 27248 <__udivmoddi4+0x114>
   271e2:	1b43      	subs	r3, r0, r5
   271e4:	2101      	movs	r1, #1
   271e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   271ea:	b2af      	uxth	r7, r5
   271ec:	fbb3 fcfe 	udiv	ip, r3, lr
   271f0:	0c20      	lsrs	r0, r4, #16
   271f2:	fb0e 331c 	mls	r3, lr, ip, r3
   271f6:	fb0c f807 	mul.w	r8, ip, r7
   271fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   271fe:	4598      	cmp	r8, r3
   27200:	d962      	bls.n	272c8 <__udivmoddi4+0x194>
   27202:	18eb      	adds	r3, r5, r3
   27204:	f10c 30ff 	add.w	r0, ip, #4294967295
   27208:	d204      	bcs.n	27214 <__udivmoddi4+0xe0>
   2720a:	4598      	cmp	r8, r3
   2720c:	d902      	bls.n	27214 <__udivmoddi4+0xe0>
   2720e:	f1ac 0002 	sub.w	r0, ip, #2
   27212:	442b      	add	r3, r5
   27214:	eba3 0308 	sub.w	r3, r3, r8
   27218:	b2a4      	uxth	r4, r4
   2721a:	fbb3 fcfe 	udiv	ip, r3, lr
   2721e:	fb0e 331c 	mls	r3, lr, ip, r3
   27222:	fb0c f707 	mul.w	r7, ip, r7
   27226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2722a:	42a7      	cmp	r7, r4
   2722c:	d94e      	bls.n	272cc <__udivmoddi4+0x198>
   2722e:	192c      	adds	r4, r5, r4
   27230:	f10c 33ff 	add.w	r3, ip, #4294967295
   27234:	d204      	bcs.n	27240 <__udivmoddi4+0x10c>
   27236:	42a7      	cmp	r7, r4
   27238:	d902      	bls.n	27240 <__udivmoddi4+0x10c>
   2723a:	f1ac 0302 	sub.w	r3, ip, #2
   2723e:	442c      	add	r4, r5
   27240:	1be4      	subs	r4, r4, r7
   27242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   27246:	e7c0      	b.n	271ca <__udivmoddi4+0x96>
   27248:	f1c2 0320 	rsb	r3, r2, #32
   2724c:	fa20 f103 	lsr.w	r1, r0, r3
   27250:	4095      	lsls	r5, r2
   27252:	4090      	lsls	r0, r2
   27254:	fa2e f303 	lsr.w	r3, lr, r3
   27258:	4303      	orrs	r3, r0
   2725a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2725e:	b2af      	uxth	r7, r5
   27260:	fbb1 fcfe 	udiv	ip, r1, lr
   27264:	fb0e 101c 	mls	r0, lr, ip, r1
   27268:	0c19      	lsrs	r1, r3, #16
   2726a:	fb0c f807 	mul.w	r8, ip, r7
   2726e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   27272:	4588      	cmp	r8, r1
   27274:	fa04 f402 	lsl.w	r4, r4, r2
   27278:	d922      	bls.n	272c0 <__udivmoddi4+0x18c>
   2727a:	1869      	adds	r1, r5, r1
   2727c:	f10c 30ff 	add.w	r0, ip, #4294967295
   27280:	d204      	bcs.n	2728c <__udivmoddi4+0x158>
   27282:	4588      	cmp	r8, r1
   27284:	d902      	bls.n	2728c <__udivmoddi4+0x158>
   27286:	f1ac 0002 	sub.w	r0, ip, #2
   2728a:	4429      	add	r1, r5
   2728c:	eba1 0108 	sub.w	r1, r1, r8
   27290:	b29b      	uxth	r3, r3
   27292:	fbb1 fcfe 	udiv	ip, r1, lr
   27296:	fb0e 111c 	mls	r1, lr, ip, r1
   2729a:	fb0c f707 	mul.w	r7, ip, r7
   2729e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   272a2:	429f      	cmp	r7, r3
   272a4:	d90e      	bls.n	272c4 <__udivmoddi4+0x190>
   272a6:	18eb      	adds	r3, r5, r3
   272a8:	f10c 31ff 	add.w	r1, ip, #4294967295
   272ac:	d204      	bcs.n	272b8 <__udivmoddi4+0x184>
   272ae:	429f      	cmp	r7, r3
   272b0:	d902      	bls.n	272b8 <__udivmoddi4+0x184>
   272b2:	f1ac 0102 	sub.w	r1, ip, #2
   272b6:	442b      	add	r3, r5
   272b8:	1bdb      	subs	r3, r3, r7
   272ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   272be:	e792      	b.n	271e6 <__udivmoddi4+0xb2>
   272c0:	4660      	mov	r0, ip
   272c2:	e7e3      	b.n	2728c <__udivmoddi4+0x158>
   272c4:	4661      	mov	r1, ip
   272c6:	e7f7      	b.n	272b8 <__udivmoddi4+0x184>
   272c8:	4660      	mov	r0, ip
   272ca:	e7a3      	b.n	27214 <__udivmoddi4+0xe0>
   272cc:	4663      	mov	r3, ip
   272ce:	e7b7      	b.n	27240 <__udivmoddi4+0x10c>
   272d0:	4283      	cmp	r3, r0
   272d2:	d906      	bls.n	272e2 <__udivmoddi4+0x1ae>
   272d4:	b916      	cbnz	r6, 272dc <__udivmoddi4+0x1a8>
   272d6:	2100      	movs	r1, #0
   272d8:	4608      	mov	r0, r1
   272da:	e77b      	b.n	271d4 <__udivmoddi4+0xa0>
   272dc:	e9c6 e000 	strd	lr, r0, [r6]
   272e0:	e7f9      	b.n	272d6 <__udivmoddi4+0x1a2>
   272e2:	fab3 f783 	clz	r7, r3
   272e6:	b98f      	cbnz	r7, 2730c <__udivmoddi4+0x1d8>
   272e8:	4283      	cmp	r3, r0
   272ea:	d301      	bcc.n	272f0 <__udivmoddi4+0x1bc>
   272ec:	4572      	cmp	r2, lr
   272ee:	d808      	bhi.n	27302 <__udivmoddi4+0x1ce>
   272f0:	ebbe 0402 	subs.w	r4, lr, r2
   272f4:	eb60 0303 	sbc.w	r3, r0, r3
   272f8:	2001      	movs	r0, #1
   272fa:	469c      	mov	ip, r3
   272fc:	b91e      	cbnz	r6, 27306 <__udivmoddi4+0x1d2>
   272fe:	2100      	movs	r1, #0
   27300:	e768      	b.n	271d4 <__udivmoddi4+0xa0>
   27302:	4638      	mov	r0, r7
   27304:	e7fa      	b.n	272fc <__udivmoddi4+0x1c8>
   27306:	e9c6 4c00 	strd	r4, ip, [r6]
   2730a:	e7f8      	b.n	272fe <__udivmoddi4+0x1ca>
   2730c:	f1c7 0c20 	rsb	ip, r7, #32
   27310:	40bb      	lsls	r3, r7
   27312:	fa22 f40c 	lsr.w	r4, r2, ip
   27316:	431c      	orrs	r4, r3
   27318:	fa2e f10c 	lsr.w	r1, lr, ip
   2731c:	fa20 f30c 	lsr.w	r3, r0, ip
   27320:	40b8      	lsls	r0, r7
   27322:	4301      	orrs	r1, r0
   27324:	ea4f 4914 	mov.w	r9, r4, lsr #16
   27328:	fa0e f507 	lsl.w	r5, lr, r7
   2732c:	fbb3 f8f9 	udiv	r8, r3, r9
   27330:	fa1f fe84 	uxth.w	lr, r4
   27334:	fb09 3018 	mls	r0, r9, r8, r3
   27338:	0c0b      	lsrs	r3, r1, #16
   2733a:	fb08 fa0e 	mul.w	sl, r8, lr
   2733e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   27342:	459a      	cmp	sl, r3
   27344:	fa02 f207 	lsl.w	r2, r2, r7
   27348:	d940      	bls.n	273cc <__udivmoddi4+0x298>
   2734a:	18e3      	adds	r3, r4, r3
   2734c:	f108 30ff 	add.w	r0, r8, #4294967295
   27350:	d204      	bcs.n	2735c <__udivmoddi4+0x228>
   27352:	459a      	cmp	sl, r3
   27354:	d902      	bls.n	2735c <__udivmoddi4+0x228>
   27356:	f1a8 0002 	sub.w	r0, r8, #2
   2735a:	4423      	add	r3, r4
   2735c:	eba3 030a 	sub.w	r3, r3, sl
   27360:	b289      	uxth	r1, r1
   27362:	fbb3 f8f9 	udiv	r8, r3, r9
   27366:	fb09 3318 	mls	r3, r9, r8, r3
   2736a:	fb08 fe0e 	mul.w	lr, r8, lr
   2736e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   27372:	458e      	cmp	lr, r1
   27374:	d92c      	bls.n	273d0 <__udivmoddi4+0x29c>
   27376:	1861      	adds	r1, r4, r1
   27378:	f108 33ff 	add.w	r3, r8, #4294967295
   2737c:	d204      	bcs.n	27388 <__udivmoddi4+0x254>
   2737e:	458e      	cmp	lr, r1
   27380:	d902      	bls.n	27388 <__udivmoddi4+0x254>
   27382:	f1a8 0302 	sub.w	r3, r8, #2
   27386:	4421      	add	r1, r4
   27388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2738c:	fba0 9802 	umull	r9, r8, r0, r2
   27390:	eba1 010e 	sub.w	r1, r1, lr
   27394:	4541      	cmp	r1, r8
   27396:	46ce      	mov	lr, r9
   27398:	4643      	mov	r3, r8
   2739a:	d302      	bcc.n	273a2 <__udivmoddi4+0x26e>
   2739c:	d106      	bne.n	273ac <__udivmoddi4+0x278>
   2739e:	454d      	cmp	r5, r9
   273a0:	d204      	bcs.n	273ac <__udivmoddi4+0x278>
   273a2:	ebb9 0e02 	subs.w	lr, r9, r2
   273a6:	eb68 0304 	sbc.w	r3, r8, r4
   273aa:	3801      	subs	r0, #1
   273ac:	2e00      	cmp	r6, #0
   273ae:	d0a6      	beq.n	272fe <__udivmoddi4+0x1ca>
   273b0:	ebb5 020e 	subs.w	r2, r5, lr
   273b4:	eb61 0103 	sbc.w	r1, r1, r3
   273b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   273bc:	fa22 f307 	lsr.w	r3, r2, r7
   273c0:	ea4c 0303 	orr.w	r3, ip, r3
   273c4:	40f9      	lsrs	r1, r7
   273c6:	e9c6 3100 	strd	r3, r1, [r6]
   273ca:	e798      	b.n	272fe <__udivmoddi4+0x1ca>
   273cc:	4640      	mov	r0, r8
   273ce:	e7c5      	b.n	2735c <__udivmoddi4+0x228>
   273d0:	4643      	mov	r3, r8
   273d2:	e7d9      	b.n	27388 <__udivmoddi4+0x254>

000273d4 <leds_init>:
static const struct gpio_dt_spec led_red = GPIO_DT_SPEC_GET(DT_ALIAS(led0), gpios);
static const struct gpio_dt_spec led_green = GPIO_DT_SPEC_GET(DT_ALIAS(led1), gpios);
static const struct gpio_dt_spec led_blue = GPIO_DT_SPEC_GET(DT_ALIAS(led2), gpios);

void leds_init()
{
   273d4:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   273d6:	480d      	ldr	r0, [pc, #52]	; (2740c <leds_init+0x38>)
   273d8:	f008 fd41 	bl	2fe5e <z_device_is_ready>
    int ret;

    if (!gpio_is_ready_dt(&led_red) && !gpio_is_ready_dt(&led_green) && !gpio_is_ready_dt(&led_blue))
   273dc:	b150      	cbz	r0, 273f4 <leds_init+0x20>
    {
        return 0;
    }

    ret = gpio_pin_configure_dt(&led_red, GPIO_OUTPUT_ACTIVE);
   273de:	480c      	ldr	r0, [pc, #48]	; (27410 <leds_init+0x3c>)
   273e0:	f007 fa6b 	bl	2e8ba <gpio_pin_configure_dt.constprop.0.isra.0>
    ret = gpio_pin_configure_dt(&led_green, GPIO_OUTPUT_ACTIVE);
   273e4:	480b      	ldr	r0, [pc, #44]	; (27414 <leds_init+0x40>)
   273e6:	f007 fa68 	bl	2e8ba <gpio_pin_configure_dt.constprop.0.isra.0>

    if (ret < 0)
    {
        return 0;
    }
}
   273ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ret = gpio_pin_configure_dt(&led_blue, GPIO_OUTPUT_ACTIVE);
   273ee:	480a      	ldr	r0, [pc, #40]	; (27418 <leds_init+0x44>)
   273f0:	f007 ba63 	b.w	2e8ba <gpio_pin_configure_dt.constprop.0.isra.0>
   273f4:	4805      	ldr	r0, [pc, #20]	; (2740c <leds_init+0x38>)
   273f6:	f008 fd32 	bl	2fe5e <z_device_is_ready>
    if (!gpio_is_ready_dt(&led_red) && !gpio_is_ready_dt(&led_green) && !gpio_is_ready_dt(&led_blue))
   273fa:	2800      	cmp	r0, #0
   273fc:	d1ef      	bne.n	273de <leds_init+0xa>
   273fe:	4803      	ldr	r0, [pc, #12]	; (2740c <leds_init+0x38>)
   27400:	f008 fd2d 	bl	2fe5e <z_device_is_ready>
   27404:	2800      	cmp	r0, #0
   27406:	d1ea      	bne.n	273de <leds_init+0xa>
}
   27408:	bd08      	pop	{r3, pc}
   2740a:	bf00      	nop
   2740c:	0003059c 	.word	0x0003059c
   27410:	00030868 	.word	0x00030868
   27414:	00030860 	.word	0x00030860
   27418:	00030858 	.word	0x00030858

0002741c <leds_toggle_red>:

void leds_toggle_red()
{
    gpio_pin_toggle_dt(&led_red);
   2741c:	4801      	ldr	r0, [pc, #4]	; (27424 <leds_toggle_red+0x8>)
   2741e:	f007 ba44 	b.w	2e8aa <gpio_pin_toggle_dt.isra.0>
   27422:	bf00      	nop
   27424:	00030868 	.word	0x00030868

00027428 <leds_toggle_green>:
}

void leds_toggle_green()
{
    gpio_pin_toggle_dt(&led_green);
   27428:	4801      	ldr	r0, [pc, #4]	; (27430 <leds_toggle_green+0x8>)
   2742a:	f007 ba3e 	b.w	2e8aa <gpio_pin_toggle_dt.isra.0>
   2742e:	bf00      	nop
   27430:	00030860 	.word	0x00030860

00027434 <leds_toggle_blue>:
}

void leds_toggle_blue()
{
    gpio_pin_toggle_dt(&led_blue);
   27434:	4801      	ldr	r0, [pc, #4]	; (2743c <leds_toggle_blue+0x8>)
   27436:	f007 ba38 	b.w	2e8aa <gpio_pin_toggle_dt.isra.0>
   2743a:	bf00      	nop
   2743c:	00030858 	.word	0x00030858

00027440 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   27440:	4b01      	ldr	r3, [pc, #4]	; (27448 <char_out+0x8>)
   27442:	681b      	ldr	r3, [r3, #0]
   27444:	4718      	bx	r3
   27446:	bf00      	nop
   27448:	200000b0 	.word	0x200000b0

0002744c <__printk_hook_install>:
	_char_out = fn;
   2744c:	4b01      	ldr	r3, [pc, #4]	; (27454 <__printk_hook_install+0x8>)
   2744e:	6018      	str	r0, [r3, #0]
}
   27450:	4770      	bx	lr
   27452:	bf00      	nop
   27454:	200000b0 	.word	0x200000b0

00027458 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   27458:	b507      	push	{r0, r1, r2, lr}
   2745a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2745c:	2100      	movs	r1, #0
   2745e:	4602      	mov	r2, r0
   27460:	9100      	str	r1, [sp, #0]
   27462:	4803      	ldr	r0, [pc, #12]	; (27470 <vprintk+0x18>)
   27464:	f000 f914 	bl	27690 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   27468:	b003      	add	sp, #12
   2746a:	f85d fb04 	ldr.w	pc, [sp], #4
   2746e:	bf00      	nop
   27470:	00027441 	.word	0x00027441

00027474 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   27474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27478:	8b05      	ldrh	r5, [r0, #24]
{
   2747a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2747c:	0728      	lsls	r0, r5, #28
{
   2747e:	4690      	mov	r8, r2
	if (processing) {
   27480:	d411      	bmi.n	274a6 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   27482:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27484:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   27488:	f040 80cd 	bne.w	27626 <process_event+0x1b2>
			evt = process_recheck(mgr);
   2748c:	4620      	mov	r0, r4
   2748e:	f007 fc27 	bl	2ece0 <process_recheck>
		}

		if (evt == EVT_NOP) {
   27492:	b178      	cbz	r0, 274b4 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   27494:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27496:	8b21      	ldrh	r1, [r4, #24]
   27498:	2804      	cmp	r0, #4
   2749a:	d811      	bhi.n	274c0 <process_event+0x4c>
   2749c:	e8df f000 	tbb	[pc, r0]
   274a0:	856d10c3 	.word	0x856d10c3
   274a4:	95          	.byte	0x95
   274a5:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   274a6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   274a8:	bf0c      	ite	eq
   274aa:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   274ae:	f045 0520 	orrne.w	r5, r5, #32
   274b2:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   274b4:	f388 8811 	msr	BASEPRI, r8
   274b8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   274bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   274c0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   274c4:	45aa      	cmp	sl, r5
   274c6:	f000 80a6 	beq.w	27616 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   274ca:	2700      	movs	r7, #0
   274cc:	46b9      	mov	r9, r7
   274ce:	463e      	mov	r6, r7
   274d0:	68a3      	ldr	r3, [r4, #8]
   274d2:	2b00      	cmp	r3, #0
   274d4:	f000 80bd 	beq.w	27652 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   274d8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   274dc:	8321      	strh	r1, [r4, #24]
   274de:	f388 8811 	msr	BASEPRI, r8
   274e2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   274e6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   274e8:	2900      	cmp	r1, #0
   274ea:	f000 80bb 	beq.w	27664 <process_event+0x1f0>
	return node->next;
   274ee:	680d      	ldr	r5, [r1, #0]
   274f0:	2900      	cmp	r1, #0
   274f2:	f000 80b7 	beq.w	27664 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   274f6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   274fa:	4633      	mov	r3, r6
   274fc:	4652      	mov	r2, sl
   274fe:	4620      	mov	r0, r4
   27500:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   27502:	2d00      	cmp	r5, #0
   27504:	d076      	beq.n	275f4 <process_event+0x180>
   27506:	682b      	ldr	r3, [r5, #0]
   27508:	4629      	mov	r1, r5
   2750a:	461d      	mov	r5, r3
   2750c:	e7f0      	b.n	274f0 <process_event+0x7c>
   2750e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   27512:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   27514:	2a01      	cmp	r2, #1
   27516:	d81b      	bhi.n	27550 <process_event+0xdc>
	list->head = NULL;
   27518:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2751a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2751e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   27520:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27522:	b289      	uxth	r1, r1
	list->tail = NULL;
   27524:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   27528:	d109      	bne.n	2753e <process_event+0xca>
   2752a:	463b      	mov	r3, r7
   2752c:	e003      	b.n	27536 <process_event+0xc2>
				mgr->refs += 1U;
   2752e:	8b62      	ldrh	r2, [r4, #26]
   27530:	3201      	adds	r2, #1
   27532:	8362      	strh	r2, [r4, #26]
	return node->next;
   27534:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   27536:	2b00      	cmp	r3, #0
   27538:	d1f9      	bne.n	2752e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2753a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   2753e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   27540:	4620      	mov	r0, r4
   27542:	f007 fbcd 	bl	2ece0 <process_recheck>
   27546:	2800      	cmp	r0, #0
   27548:	d07b      	beq.n	27642 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2754a:	f041 0120 	orr.w	r1, r1, #32
   2754e:	e077      	b.n	27640 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   27550:	2b04      	cmp	r3, #4
   27552:	d10a      	bne.n	2756a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27554:	f021 0107 	bic.w	r1, r1, #7
   27558:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2755a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2755c:	4620      	mov	r0, r4
   2755e:	f007 fbbf 	bl	2ece0 <process_recheck>
   27562:	b110      	cbz	r0, 2756a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   27564:	f041 0120 	orr.w	r1, r1, #32
   27568:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2756a:	8b21      	ldrh	r1, [r4, #24]
   2756c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   27570:	45aa      	cmp	sl, r5
   27572:	d050      	beq.n	27616 <process_event+0x1a2>
   27574:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   27576:	46b9      	mov	r9, r7
   27578:	e7aa      	b.n	274d0 <process_event+0x5c>
			transit = mgr->transitions->start;
   2757a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2757c:	f021 0107 	bic.w	r1, r1, #7
   27580:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   27584:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   27586:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2758a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2758c:	d12d      	bne.n	275ea <process_event+0x176>
		    || (transit != NULL)) {
   2758e:	f1b9 0f00 	cmp.w	r9, #0
   27592:	d040      	beq.n	27616 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   27594:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   27598:	8321      	strh	r1, [r4, #24]
   2759a:	f388 8811 	msr	BASEPRI, r8
   2759e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   275a2:	493a      	ldr	r1, [pc, #232]	; (2768c <process_event+0x218>)
   275a4:	4620      	mov	r0, r4
   275a6:	47c8      	blx	r9
   275a8:	e029      	b.n	275fe <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   275aa:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   275ae:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   275b0:	f041 0104 	orr.w	r1, r1, #4
   275b4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   275b6:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   275b8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   275bc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   275be:	d0e6      	beq.n	2758e <process_event+0x11a>
   275c0:	2700      	movs	r7, #0
		res = 0;
   275c2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   275c4:	f04f 0a04 	mov.w	sl, #4
   275c8:	e782      	b.n	274d0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   275ca:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   275ce:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   275d0:	f041 0105 	orr.w	r1, r1, #5
   275d4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   275d6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   275d8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   275dc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   275de:	d0d6      	beq.n	2758e <process_event+0x11a>
   275e0:	2700      	movs	r7, #0
		res = 0;
   275e2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   275e4:	f04f 0a05 	mov.w	sl, #5
   275e8:	e772      	b.n	274d0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   275ea:	2700      	movs	r7, #0
		res = 0;
   275ec:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   275ee:	f04f 0a06 	mov.w	sl, #6
   275f2:	e76d      	b.n	274d0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   275f4:	462b      	mov	r3, r5
   275f6:	e787      	b.n	27508 <process_event+0x94>
			if (transit != NULL) {
   275f8:	f1b9 0f00 	cmp.w	r9, #0
   275fc:	d1d1      	bne.n	275a2 <process_event+0x12e>
	__asm__ volatile(
   275fe:	f04f 0320 	mov.w	r3, #32
   27602:	f3ef 8811 	mrs	r8, BASEPRI
   27606:	f383 8812 	msr	BASEPRI_MAX, r3
   2760a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2760e:	8b23      	ldrh	r3, [r4, #24]
   27610:	f023 0308 	bic.w	r3, r3, #8
   27614:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   27616:	8b25      	ldrh	r5, [r4, #24]
   27618:	06ea      	lsls	r2, r5, #27
   2761a:	d52e      	bpl.n	2767a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2761c:	f025 0310 	bic.w	r3, r5, #16
   27620:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   27622:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   27626:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27628:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   2762a:	2e00      	cmp	r6, #0
   2762c:	f6bf af6f 	bge.w	2750e <process_event+0x9a>
	list->head = NULL;
   27630:	2300      	movs	r3, #0
		*clients = mgr->clients;
   27632:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   27634:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27638:	f021 0107 	bic.w	r1, r1, #7
   2763c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   27640:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   27642:	8b21      	ldrh	r1, [r4, #24]
   27644:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   27648:	45aa      	cmp	sl, r5
   2764a:	f04f 0900 	mov.w	r9, #0
   2764e:	f47f af3f 	bne.w	274d0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   27652:	2f00      	cmp	r7, #0
   27654:	d09b      	beq.n	2758e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   27656:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2765a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   2765c:	f388 8811 	msr	BASEPRI, r8
   27660:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   27664:	2f00      	cmp	r7, #0
   27666:	d0c7      	beq.n	275f8 <process_event+0x184>
	return node->next;
   27668:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   2766a:	4639      	mov	r1, r7
   2766c:	4633      	mov	r3, r6
   2766e:	4652      	mov	r2, sl
   27670:	4620      	mov	r0, r4
   27672:	f007 fb61 	bl	2ed38 <notify_one>
	list->head = node;
   27676:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   27678:	e7f4      	b.n	27664 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2767a:	06ab      	lsls	r3, r5, #26
   2767c:	f57f af1a 	bpl.w	274b4 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   27680:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   27684:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   27686:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   2768a:	e6ff      	b.n	2748c <process_event+0x18>
   2768c:	0002ed65 	.word	0x0002ed65

00027690 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   27690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27694:	4681      	mov	r9, r0
   27696:	b095      	sub	sp, #84	; 0x54
   27698:	468b      	mov	fp, r1
   2769a:	4617      	mov	r7, r2
   2769c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   2769e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   276a0:	7838      	ldrb	r0, [r7, #0]
   276a2:	b908      	cbnz	r0, 276a8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   276a4:	4628      	mov	r0, r5
   276a6:	e358      	b.n	27d5a <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   276a8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   276aa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   276ac:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   276ae:	d006      	beq.n	276be <z_cbvprintf_impl+0x2e>
			OUTC('%');
   276b0:	4659      	mov	r1, fp
   276b2:	47c8      	blx	r9
   276b4:	2800      	cmp	r0, #0
   276b6:	f2c0 8350 	blt.w	27d5a <z_cbvprintf_impl+0x6ca>
   276ba:	3501      	adds	r5, #1
		if (bps == NULL) {
   276bc:	e1fb      	b.n	27ab6 <z_cbvprintf_impl+0x426>
		} state = {
   276be:	2218      	movs	r2, #24
   276c0:	2100      	movs	r1, #0
   276c2:	a80e      	add	r0, sp, #56	; 0x38
   276c4:	f007 fe57 	bl	2f376 <memset>
	if (*sp == '%') {
   276c8:	787b      	ldrb	r3, [r7, #1]
   276ca:	2b25      	cmp	r3, #37	; 0x25
   276cc:	d07d      	beq.n	277ca <z_cbvprintf_impl+0x13a>
   276ce:	2300      	movs	r3, #0
   276d0:	1c78      	adds	r0, r7, #1
   276d2:	4698      	mov	r8, r3
   276d4:	469e      	mov	lr, r3
   276d6:	469c      	mov	ip, r3
   276d8:	461e      	mov	r6, r3
   276da:	4601      	mov	r1, r0
		switch (*sp) {
   276dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   276e0:	2a2b      	cmp	r2, #43	; 0x2b
   276e2:	f000 80a1 	beq.w	27828 <z_cbvprintf_impl+0x198>
   276e6:	f200 8098 	bhi.w	2781a <z_cbvprintf_impl+0x18a>
   276ea:	2a20      	cmp	r2, #32
   276ec:	f000 809f 	beq.w	2782e <z_cbvprintf_impl+0x19e>
   276f0:	2a23      	cmp	r2, #35	; 0x23
   276f2:	f000 809f 	beq.w	27834 <z_cbvprintf_impl+0x1a4>
   276f6:	b12b      	cbz	r3, 27704 <z_cbvprintf_impl+0x74>
   276f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   276fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27700:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   27704:	f1b8 0f00 	cmp.w	r8, #0
   27708:	d005      	beq.n	27716 <z_cbvprintf_impl+0x86>
   2770a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   2770e:	f043 0320 	orr.w	r3, r3, #32
   27712:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   27716:	f1be 0f00 	cmp.w	lr, #0
   2771a:	d005      	beq.n	27728 <z_cbvprintf_impl+0x98>
   2771c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27720:	f043 0310 	orr.w	r3, r3, #16
   27724:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   27728:	f1bc 0f00 	cmp.w	ip, #0
   2772c:	d005      	beq.n	2773a <z_cbvprintf_impl+0xaa>
   2772e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27732:	f043 0308 	orr.w	r3, r3, #8
   27736:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   2773a:	b12e      	cbz	r6, 27748 <z_cbvprintf_impl+0xb8>
   2773c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27740:	f043 0304 	orr.w	r3, r3, #4
   27744:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   27748:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   2774c:	f003 0044 	and.w	r0, r3, #68	; 0x44
   27750:	2844      	cmp	r0, #68	; 0x44
   27752:	d103      	bne.n	2775c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   27754:	f36f 1386 	bfc	r3, #6, #1
   27758:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   2775c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   27760:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   27762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   27766:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   2776a:	d17f      	bne.n	2786c <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   2776c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27770:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   27774:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   27776:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   2777a:	781a      	ldrb	r2, [r3, #0]
   2777c:	2a2e      	cmp	r2, #46	; 0x2e
   2777e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27782:	bf0c      	ite	eq
   27784:	2101      	moveq	r1, #1
   27786:	2100      	movne	r1, #0
   27788:	f361 0241 	bfi	r2, r1, #1, #1
   2778c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   27790:	d178      	bne.n	27884 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   27792:	785a      	ldrb	r2, [r3, #1]
   27794:	2a2a      	cmp	r2, #42	; 0x2a
   27796:	d06e      	beq.n	27876 <z_cbvprintf_impl+0x1e6>
	++sp;
   27798:	3301      	adds	r3, #1
	size_t val = 0;
   2779a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   2779c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   277a0:	4619      	mov	r1, r3
   277a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   277a6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   277aa:	2e09      	cmp	r6, #9
   277ac:	f240 8095 	bls.w	278da <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   277b0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   277b4:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   277b6:	f3c1 0040 	ubfx	r0, r1, #1, #1
   277ba:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   277be:	460a      	mov	r2, r1
   277c0:	f360 0241 	bfi	r2, r0, #1, #1
   277c4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   277c8:	e05c      	b.n	27884 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   277ca:	1cba      	adds	r2, r7, #2
   277cc:	9203      	str	r2, [sp, #12]
   277ce:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   277d2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   277d6:	07da      	lsls	r2, r3, #31
   277d8:	f140 812e 	bpl.w	27a38 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   277dc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   277e0:	f1b8 0f00 	cmp.w	r8, #0
   277e4:	da07      	bge.n	277f6 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   277e6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   277ea:	f042 0204 	orr.w	r2, r2, #4
   277ee:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   277f2:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   277f6:	075e      	lsls	r6, r3, #29
   277f8:	f140 8127 	bpl.w	27a4a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   277fc:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   27800:	f1ba 0f00 	cmp.w	sl, #0
   27804:	f280 8126 	bge.w	27a54 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   27808:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   2780c:	f36f 0341 	bfc	r3, #1, #1
   27810:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   27814:	f04f 3aff 	mov.w	sl, #4294967295
   27818:	e11c      	b.n	27a54 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   2781a:	2a2d      	cmp	r2, #45	; 0x2d
   2781c:	d00d      	beq.n	2783a <z_cbvprintf_impl+0x1aa>
   2781e:	2a30      	cmp	r2, #48	; 0x30
   27820:	f47f af69 	bne.w	276f6 <z_cbvprintf_impl+0x66>
   27824:	2301      	movs	r3, #1
	} while (loop);
   27826:	e758      	b.n	276da <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   27828:	f04f 0c01 	mov.w	ip, #1
   2782c:	e755      	b.n	276da <z_cbvprintf_impl+0x4a>
   2782e:	f04f 0e01 	mov.w	lr, #1
   27832:	e752      	b.n	276da <z_cbvprintf_impl+0x4a>
   27834:	f04f 0801 	mov.w	r8, #1
   27838:	e74f      	b.n	276da <z_cbvprintf_impl+0x4a>
   2783a:	2601      	movs	r6, #1
   2783c:	e74d      	b.n	276da <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   2783e:	fb0e 6202 	mla	r2, lr, r2, r6
   27842:	3a30      	subs	r2, #48	; 0x30
   27844:	4603      	mov	r3, r0
   27846:	4618      	mov	r0, r3
   27848:	f810 6b01 	ldrb.w	r6, [r0], #1
   2784c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   27850:	f1bc 0f09 	cmp.w	ip, #9
   27854:	d9f3      	bls.n	2783e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   27856:	4299      	cmp	r1, r3
   27858:	d08f      	beq.n	2777a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   2785a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   2785e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   27860:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   27862:	f362 0141 	bfi	r1, r2, #1, #1
   27866:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   2786a:	e786      	b.n	2777a <z_cbvprintf_impl+0xea>
   2786c:	460b      	mov	r3, r1
	size_t val = 0;
   2786e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   27870:	f04f 0e0a 	mov.w	lr, #10
   27874:	e7e7      	b.n	27846 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   27876:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   2787a:	f042 0204 	orr.w	r2, r2, #4
   2787e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   27882:	3302      	adds	r3, #2
	switch (*sp) {
   27884:	781a      	ldrb	r2, [r3, #0]
   27886:	2a6c      	cmp	r2, #108	; 0x6c
   27888:	d047      	beq.n	2791a <z_cbvprintf_impl+0x28a>
   2788a:	d82b      	bhi.n	278e4 <z_cbvprintf_impl+0x254>
   2788c:	2a68      	cmp	r2, #104	; 0x68
   2788e:	d031      	beq.n	278f4 <z_cbvprintf_impl+0x264>
   27890:	2a6a      	cmp	r2, #106	; 0x6a
   27892:	d04b      	beq.n	2792c <z_cbvprintf_impl+0x29c>
   27894:	2a4c      	cmp	r2, #76	; 0x4c
   27896:	d051      	beq.n	2793c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   27898:	461a      	mov	r2, r3
   2789a:	f812 3b01 	ldrb.w	r3, [r2], #1
   2789e:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   278a0:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   278a2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   278a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   278aa:	f200 80be 	bhi.w	27a2a <z_cbvprintf_impl+0x39a>
   278ae:	2b6d      	cmp	r3, #109	; 0x6d
   278b0:	d851      	bhi.n	27956 <z_cbvprintf_impl+0x2c6>
   278b2:	2b69      	cmp	r3, #105	; 0x69
   278b4:	f200 80b9 	bhi.w	27a2a <z_cbvprintf_impl+0x39a>
   278b8:	2b57      	cmp	r3, #87	; 0x57
   278ba:	d867      	bhi.n	2798c <z_cbvprintf_impl+0x2fc>
   278bc:	2b41      	cmp	r3, #65	; 0x41
   278be:	d003      	beq.n	278c8 <z_cbvprintf_impl+0x238>
   278c0:	3b45      	subs	r3, #69	; 0x45
   278c2:	2b02      	cmp	r3, #2
   278c4:	f200 80b1 	bhi.w	27a2a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   278c8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   278cc:	2204      	movs	r2, #4
   278ce:	f362 0302 	bfi	r3, r2, #0, #3
   278d2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   278d6:	2301      	movs	r3, #1
			break;
   278d8:	e073      	b.n	279c2 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   278da:	fb0c 0202 	mla	r2, ip, r2, r0
   278de:	3a30      	subs	r2, #48	; 0x30
   278e0:	460b      	mov	r3, r1
   278e2:	e75d      	b.n	277a0 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   278e4:	2a74      	cmp	r2, #116	; 0x74
   278e6:	d025      	beq.n	27934 <z_cbvprintf_impl+0x2a4>
   278e8:	2a7a      	cmp	r2, #122	; 0x7a
   278ea:	d1d5      	bne.n	27898 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   278ec:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   278f0:	2106      	movs	r1, #6
   278f2:	e00c      	b.n	2790e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   278f4:	785a      	ldrb	r2, [r3, #1]
   278f6:	2a68      	cmp	r2, #104	; 0x68
   278f8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   278fc:	d106      	bne.n	2790c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   278fe:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   27900:	f361 02c6 	bfi	r2, r1, #3, #4
   27904:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   27908:	3302      	adds	r3, #2
   2790a:	e7c5      	b.n	27898 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   2790c:	2102      	movs	r1, #2
   2790e:	f361 02c6 	bfi	r2, r1, #3, #4
   27912:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   27916:	3301      	adds	r3, #1
   27918:	e7be      	b.n	27898 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   2791a:	785a      	ldrb	r2, [r3, #1]
   2791c:	2a6c      	cmp	r2, #108	; 0x6c
   2791e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27922:	d101      	bne.n	27928 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   27924:	2104      	movs	r1, #4
   27926:	e7eb      	b.n	27900 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   27928:	2103      	movs	r1, #3
   2792a:	e7f0      	b.n	2790e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   2792c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27930:	2105      	movs	r1, #5
   27932:	e7ec      	b.n	2790e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   27934:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27938:	2107      	movs	r1, #7
   2793a:	e7e8      	b.n	2790e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   2793c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   27940:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   27944:	f022 0202 	bic.w	r2, r2, #2
   27948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   2794c:	f042 0202 	orr.w	r2, r2, #2
   27950:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   27954:	e7df      	b.n	27916 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   27956:	3b6e      	subs	r3, #110	; 0x6e
   27958:	b2d9      	uxtb	r1, r3
   2795a:	2301      	movs	r3, #1
   2795c:	408b      	lsls	r3, r1
   2795e:	f240 4182 	movw	r1, #1154	; 0x482
   27962:	420b      	tst	r3, r1
   27964:	d137      	bne.n	279d6 <z_cbvprintf_impl+0x346>
   27966:	f013 0f24 	tst.w	r3, #36	; 0x24
   2796a:	d151      	bne.n	27a10 <z_cbvprintf_impl+0x380>
   2796c:	07d8      	lsls	r0, r3, #31
   2796e:	d55c      	bpl.n	27a2a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   27970:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   27974:	2103      	movs	r1, #3
   27976:	f361 0302 	bfi	r3, r1, #0, #3
   2797a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   2797e:	f002 0378 	and.w	r3, r2, #120	; 0x78
   27982:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   27986:	424b      	negs	r3, r1
   27988:	414b      	adcs	r3, r1
   2798a:	e01a      	b.n	279c2 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   2798c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   27990:	b2c9      	uxtb	r1, r1
   27992:	2001      	movs	r0, #1
   27994:	fa00 f101 	lsl.w	r1, r0, r1
   27998:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   2799c:	d194      	bne.n	278c8 <z_cbvprintf_impl+0x238>
   2799e:	f640 0601 	movw	r6, #2049	; 0x801
   279a2:	4231      	tst	r1, r6
   279a4:	d11d      	bne.n	279e2 <z_cbvprintf_impl+0x352>
   279a6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   279aa:	d03e      	beq.n	27a2a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   279ac:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   279b0:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   279b4:	f002 0278 	and.w	r2, r2, #120	; 0x78
   279b8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   279ba:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   279be:	d034      	beq.n	27a2a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   279c0:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   279c2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   279c6:	f3c2 0140 	ubfx	r1, r2, #1, #1
   279ca:	430b      	orrs	r3, r1
   279cc:	f363 0241 	bfi	r2, r3, #1, #1
   279d0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   279d4:	e6fd      	b.n	277d2 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   279d6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   279da:	2102      	movs	r1, #2
   279dc:	f361 0302 	bfi	r3, r1, #0, #3
   279e0:	e7e8      	b.n	279b4 <z_cbvprintf_impl+0x324>
   279e2:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   279e6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   279e8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   279ec:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   279f0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   279f2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   279f6:	bf02      	ittt	eq
   279f8:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   279fc:	f041 0101 	orreq.w	r1, r1, #1
   27a00:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   27a04:	2b63      	cmp	r3, #99	; 0x63
   27a06:	d1db      	bne.n	279c0 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   27a08:	1e13      	subs	r3, r2, #0
   27a0a:	bf18      	it	ne
   27a0c:	2301      	movne	r3, #1
   27a0e:	e7d8      	b.n	279c2 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   27a10:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   27a14:	2103      	movs	r1, #3
   27a16:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   27a1a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   27a1e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   27a22:	bf14      	ite	ne
   27a24:	2301      	movne	r3, #1
   27a26:	2300      	moveq	r3, #0
   27a28:	e7cb      	b.n	279c2 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   27a2a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27a2e:	f043 0301 	orr.w	r3, r3, #1
   27a32:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   27a36:	e7c3      	b.n	279c0 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   27a38:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   27a3c:	2a00      	cmp	r2, #0
			width = conv->width_value;
   27a3e:	bfb4      	ite	lt
   27a40:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   27a44:	f04f 38ff 	movge.w	r8, #4294967295
   27a48:	e6d5      	b.n	277f6 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   27a4a:	0798      	lsls	r0, r3, #30
   27a4c:	f57f aee2 	bpl.w	27814 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   27a50:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   27a54:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   27a58:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   27a5a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   27a5e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   27a62:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   27a66:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   27a68:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   27a6c:	d133      	bne.n	27ad6 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   27a6e:	1ecb      	subs	r3, r1, #3
   27a70:	2b04      	cmp	r3, #4
   27a72:	d804      	bhi.n	27a7e <z_cbvprintf_impl+0x3ee>
   27a74:	e8df f003 	tbb	[pc, r3]
   27a78:	21464621 	.word	0x21464621
   27a7c:	21          	.byte	0x21
   27a7d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   27a7e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   27a80:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   27a82:	ea4f 72e3 	mov.w	r2, r3, asr #31
   27a86:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   27a8a:	d11c      	bne.n	27ac6 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   27a8c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   27a90:	17da      	asrs	r2, r3, #31
   27a92:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   27a96:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   27a98:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27a9c:	f013 0603 	ands.w	r6, r3, #3
   27aa0:	d050      	beq.n	27b44 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   27aa2:	9b03      	ldr	r3, [sp, #12]
   27aa4:	463a      	mov	r2, r7
   27aa6:	4659      	mov	r1, fp
   27aa8:	4648      	mov	r0, r9
   27aaa:	f007 fa79 	bl	2efa0 <outs>
   27aae:	2800      	cmp	r0, #0
   27ab0:	f2c0 8153 	blt.w	27d5a <z_cbvprintf_impl+0x6ca>
   27ab4:	4405      	add	r5, r0
			continue;
   27ab6:	9f03      	ldr	r7, [sp, #12]
   27ab8:	e5f2      	b.n	276a0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   27aba:	f854 3b04 	ldr.w	r3, [r4], #4
   27abe:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   27ac0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   27ac4:	e7e8      	b.n	27a98 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   27ac6:	2902      	cmp	r1, #2
   27ac8:	d1e5      	bne.n	27a96 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   27aca:	b21a      	sxth	r2, r3
   27acc:	f343 33c0 	sbfx	r3, r3, #15, #1
   27ad0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   27ad4:	e7df      	b.n	27a96 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   27ad6:	2b02      	cmp	r3, #2
   27ad8:	d124      	bne.n	27b24 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   27ada:	1ecb      	subs	r3, r1, #3
   27adc:	2b04      	cmp	r3, #4
   27ade:	d804      	bhi.n	27aea <z_cbvprintf_impl+0x45a>
   27ae0:	e8df f003 	tbb	[pc, r3]
   27ae4:	18101018 	.word	0x18101018
   27ae8:	18          	.byte	0x18
   27ae9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   27aea:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   27aec:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   27af0:	f04f 0200 	mov.w	r2, #0
   27af4:	d014      	beq.n	27b20 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   27af6:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   27af8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   27afc:	d1cc      	bne.n	27a98 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   27afe:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   27b00:	930e      	str	r3, [sp, #56]	; 0x38
   27b02:	e7c9      	b.n	27a98 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   27b04:	3407      	adds	r4, #7
   27b06:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   27b0a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   27b0e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   27b12:	e7c1      	b.n	27a98 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   27b14:	f854 3b04 	ldr.w	r3, [r4], #4
   27b18:	930e      	str	r3, [sp, #56]	; 0x38
   27b1a:	2300      	movs	r3, #0
   27b1c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   27b1e:	e7bb      	b.n	27a98 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   27b20:	b2db      	uxtb	r3, r3
   27b22:	e7cd      	b.n	27ac0 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   27b24:	2b04      	cmp	r3, #4
   27b26:	d108      	bne.n	27b3a <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   27b28:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   27b2a:	f024 0407 	bic.w	r4, r4, #7
   27b2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   27b32:	3408      	adds	r4, #8
   27b34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   27b38:	e7ae      	b.n	27a98 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   27b3a:	2b03      	cmp	r3, #3
   27b3c:	d1ac      	bne.n	27a98 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   27b3e:	f854 3b04 	ldr.w	r3, [r4], #4
   27b42:	e7dd      	b.n	27b00 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   27b44:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   27b48:	2878      	cmp	r0, #120	; 0x78
   27b4a:	d8b4      	bhi.n	27ab6 <z_cbvprintf_impl+0x426>
   27b4c:	2862      	cmp	r0, #98	; 0x62
   27b4e:	d81c      	bhi.n	27b8a <z_cbvprintf_impl+0x4fa>
   27b50:	2825      	cmp	r0, #37	; 0x25
   27b52:	f43f adad 	beq.w	276b0 <z_cbvprintf_impl+0x20>
   27b56:	2858      	cmp	r0, #88	; 0x58
   27b58:	d1ad      	bne.n	27ab6 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   27b5a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   27b5e:	9300      	str	r3, [sp, #0]
   27b60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   27b64:	ab08      	add	r3, sp, #32
   27b66:	aa10      	add	r2, sp, #64	; 0x40
   27b68:	f007 f9d4 	bl	2ef14 <encode_uint>
			if (precision >= 0) {
   27b6c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   27b70:	4607      	mov	r7, r0
			if (precision >= 0) {
   27b72:	f280 809a 	bge.w	27caa <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   27b76:	2f00      	cmp	r7, #0
   27b78:	d09d      	beq.n	27ab6 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   27b7a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   27b7e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   27b80:	2e00      	cmp	r6, #0
   27b82:	f000 80c1 	beq.w	27d08 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   27b86:	3001      	adds	r0, #1
   27b88:	e0be      	b.n	27d08 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   27b8a:	3863      	subs	r0, #99	; 0x63
   27b8c:	2815      	cmp	r0, #21
   27b8e:	d892      	bhi.n	27ab6 <z_cbvprintf_impl+0x426>
   27b90:	a201      	add	r2, pc, #4	; (adr r2, 27b98 <z_cbvprintf_impl+0x508>)
   27b92:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   27b96:	bf00      	nop
   27b98:	00027c6d 	.word	0x00027c6d
   27b9c:	00027c7f 	.word	0x00027c7f
   27ba0:	00027ab7 	.word	0x00027ab7
   27ba4:	00027ab7 	.word	0x00027ab7
   27ba8:	00027ab7 	.word	0x00027ab7
   27bac:	00027ab7 	.word	0x00027ab7
   27bb0:	00027c7f 	.word	0x00027c7f
   27bb4:	00027ab7 	.word	0x00027ab7
   27bb8:	00027ab7 	.word	0x00027ab7
   27bbc:	00027ab7 	.word	0x00027ab7
   27bc0:	00027ab7 	.word	0x00027ab7
   27bc4:	00027d0d 	.word	0x00027d0d
   27bc8:	00027ca5 	.word	0x00027ca5
   27bcc:	00027ccb 	.word	0x00027ccb
   27bd0:	00027ab7 	.word	0x00027ab7
   27bd4:	00027ab7 	.word	0x00027ab7
   27bd8:	00027bf1 	.word	0x00027bf1
   27bdc:	00027ab7 	.word	0x00027ab7
   27be0:	00027ca5 	.word	0x00027ca5
   27be4:	00027ab7 	.word	0x00027ab7
   27be8:	00027ab7 	.word	0x00027ab7
   27bec:	00027ca5 	.word	0x00027ca5
			if (precision >= 0) {
   27bf0:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   27bf4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   27bf6:	db35      	blt.n	27c64 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   27bf8:	4651      	mov	r1, sl
   27bfa:	4638      	mov	r0, r7
   27bfc:	f007 fba7 	bl	2f34e <strnlen>
			bpe = bps + len;
   27c00:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   27c04:	2f00      	cmp	r7, #0
   27c06:	f43f af56 	beq.w	27ab6 <z_cbvprintf_impl+0x426>
		char sign = 0;
   27c0a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   27c0c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   27c10:	f013 0210 	ands.w	r2, r3, #16
   27c14:	9205      	str	r2, [sp, #20]
   27c16:	f000 8093 	beq.w	27d40 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   27c1a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   27c1c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   27c1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   27c20:	bf48      	it	mi
   27c22:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   27c24:	9204      	str	r2, [sp, #16]
   27c26:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   27c28:	bf48      	it	mi
   27c2a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   27c2c:	f1b8 0f00 	cmp.w	r8, #0
   27c30:	f340 80a0 	ble.w	27d74 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   27c34:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   27c38:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   27c3c:	f3c2 0380 	ubfx	r3, r2, #2, #1
   27c40:	0750      	lsls	r0, r2, #29
   27c42:	9306      	str	r3, [sp, #24]
   27c44:	f100 8096 	bmi.w	27d74 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   27c48:	0651      	lsls	r1, r2, #25
   27c4a:	f140 8089 	bpl.w	27d60 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   27c4e:	b13e      	cbz	r6, 27c60 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   27c50:	4659      	mov	r1, fp
   27c52:	4630      	mov	r0, r6
   27c54:	47c8      	blx	r9
   27c56:	2800      	cmp	r0, #0
   27c58:	db7f      	blt.n	27d5a <z_cbvprintf_impl+0x6ca>
   27c5a:	9b06      	ldr	r3, [sp, #24]
   27c5c:	3501      	adds	r5, #1
   27c5e:	461e      	mov	r6, r3
					pad = '0';
   27c60:	2230      	movs	r2, #48	; 0x30
   27c62:	e07e      	b.n	27d62 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   27c64:	4638      	mov	r0, r7
   27c66:	f007 fb6b 	bl	2f340 <strlen>
   27c6a:	e7c9      	b.n	27c00 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   27c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27c6e:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   27c72:	2600      	movs	r6, #0
			bps = buf;
   27c74:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   27c76:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   27c7a:	2001      	movs	r0, #1
   27c7c:	e7c6      	b.n	27c0c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   27c7e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   27c80:	bf5c      	itt	pl
   27c82:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   27c86:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   27c88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   27c8c:	bf48      	it	mi
   27c8e:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   27c90:	2b00      	cmp	r3, #0
   27c92:	f6bf af62 	bge.w	27b5a <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   27c96:	4252      	negs	r2, r2
   27c98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   27c9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   27ca0:	262d      	movs	r6, #45	; 0x2d
   27ca2:	e75a      	b.n	27b5a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   27ca4:	2600      	movs	r6, #0
   27ca6:	e758      	b.n	27b5a <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   27ca8:	2600      	movs	r6, #0
				conv->flag_zero = false;
   27caa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   27cae:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   27cb2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   27cb4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   27cb8:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   27cba:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   27cbe:	f67f af5a 	bls.w	27b76 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   27cc2:	ebaa 0303 	sub.w	r3, sl, r3
   27cc6:	9311      	str	r3, [sp, #68]	; 0x44
   27cc8:	e755      	b.n	27b76 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   27cca:	980e      	ldr	r0, [sp, #56]	; 0x38
   27ccc:	b390      	cbz	r0, 27d34 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   27cce:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   27cd2:	9300      	str	r3, [sp, #0]
   27cd4:	aa10      	add	r2, sp, #64	; 0x40
   27cd6:	ab08      	add	r3, sp, #32
   27cd8:	2100      	movs	r1, #0
   27cda:	f007 f91b 	bl	2ef14 <encode_uint>
				conv->altform_0c = true;
   27cde:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   27ce2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   27ce6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   27cea:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   27cee:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   27cf2:	4607      	mov	r7, r0
				conv->altform_0c = true;
   27cf4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   27cf8:	dad6      	bge.n	27ca8 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   27cfa:	2800      	cmp	r0, #0
   27cfc:	f43f aedb 	beq.w	27ab6 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   27d00:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   27d04:	1a18      	subs	r0, r3, r0
		char sign = 0;
   27d06:	2600      	movs	r6, #0
   27d08:	469a      	mov	sl, r3
   27d0a:	e77f      	b.n	27c0c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   27d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   27d0e:	2907      	cmp	r1, #7
   27d10:	f63f aed1 	bhi.w	27ab6 <z_cbvprintf_impl+0x426>
   27d14:	e8df f001 	tbb	[pc, r1]
   27d18:	0c06040c 	.word	0x0c06040c
   27d1c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   27d20:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   27d22:	e6c8      	b.n	27ab6 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   27d24:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   27d26:	e6c6      	b.n	27ab6 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   27d28:	17ea      	asrs	r2, r5, #31
   27d2a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   27d2e:	e6c2      	b.n	27ab6 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   27d30:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   27d32:	e6c0      	b.n	27ab6 <z_cbvprintf_impl+0x426>
   27d34:	4f2e      	ldr	r7, [pc, #184]	; (27df0 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   27d36:	4606      	mov	r6, r0
			bpe = bps + 5;
   27d38:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   27d3c:	2005      	movs	r0, #5
   27d3e:	e765      	b.n	27c0c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   27d40:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   27d42:	bf48      	it	mi
   27d44:	3001      	addmi	r0, #1
   27d46:	e769      	b.n	27c1c <z_cbvprintf_impl+0x58c>
   27d48:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   27d4a:	4610      	mov	r0, r2
   27d4c:	9206      	str	r2, [sp, #24]
   27d4e:	4659      	mov	r1, fp
   27d50:	47c8      	blx	r9
   27d52:	2800      	cmp	r0, #0
   27d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   27d58:	da04      	bge.n	27d64 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   27d5a:	b015      	add	sp, #84	; 0x54
   27d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   27d60:	2220      	movs	r2, #32
					pad = '0';
   27d62:	4643      	mov	r3, r8
				while (width-- > 0) {
   27d64:	4619      	mov	r1, r3
   27d66:	2900      	cmp	r1, #0
   27d68:	f103 33ff 	add.w	r3, r3, #4294967295
   27d6c:	dcec      	bgt.n	27d48 <z_cbvprintf_impl+0x6b8>
   27d6e:	4445      	add	r5, r8
   27d70:	1a6d      	subs	r5, r5, r1
   27d72:	4698      	mov	r8, r3
		if (sign != 0) {
   27d74:	b12e      	cbz	r6, 27d82 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   27d76:	4659      	mov	r1, fp
   27d78:	4630      	mov	r0, r6
   27d7a:	47c8      	blx	r9
   27d7c:	2800      	cmp	r0, #0
   27d7e:	dbec      	blt.n	27d5a <z_cbvprintf_impl+0x6ca>
   27d80:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   27d82:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   27d86:	06da      	lsls	r2, r3, #27
   27d88:	d401      	bmi.n	27d8e <z_cbvprintf_impl+0x6fe>
   27d8a:	071b      	lsls	r3, r3, #28
   27d8c:	d505      	bpl.n	27d9a <z_cbvprintf_impl+0x70a>
				OUTC('0');
   27d8e:	4659      	mov	r1, fp
   27d90:	2030      	movs	r0, #48	; 0x30
   27d92:	47c8      	blx	r9
   27d94:	2800      	cmp	r0, #0
   27d96:	dbe0      	blt.n	27d5a <z_cbvprintf_impl+0x6ca>
   27d98:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   27d9a:	9b05      	ldr	r3, [sp, #20]
   27d9c:	b133      	cbz	r3, 27dac <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   27d9e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   27da2:	4659      	mov	r1, fp
   27da4:	47c8      	blx	r9
   27da6:	2800      	cmp	r0, #0
   27da8:	dbd7      	blt.n	27d5a <z_cbvprintf_impl+0x6ca>
   27daa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   27dac:	9e04      	ldr	r6, [sp, #16]
   27dae:	442e      	add	r6, r5
   27db0:	e005      	b.n	27dbe <z_cbvprintf_impl+0x72e>
				OUTC('0');
   27db2:	4659      	mov	r1, fp
   27db4:	2030      	movs	r0, #48	; 0x30
   27db6:	47c8      	blx	r9
   27db8:	2800      	cmp	r0, #0
   27dba:	dbce      	blt.n	27d5a <z_cbvprintf_impl+0x6ca>
   27dbc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   27dbe:	1b73      	subs	r3, r6, r5
   27dc0:	2b00      	cmp	r3, #0
   27dc2:	dcf6      	bgt.n	27db2 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   27dc4:	4653      	mov	r3, sl
   27dc6:	463a      	mov	r2, r7
   27dc8:	4659      	mov	r1, fp
   27dca:	4648      	mov	r0, r9
   27dcc:	f007 f8e8 	bl	2efa0 <outs>
   27dd0:	2800      	cmp	r0, #0
   27dd2:	dbc2      	blt.n	27d5a <z_cbvprintf_impl+0x6ca>
   27dd4:	4405      	add	r5, r0
		while (width > 0) {
   27dd6:	44a8      	add	r8, r5
   27dd8:	eba8 0305 	sub.w	r3, r8, r5
   27ddc:	2b00      	cmp	r3, #0
   27dde:	f77f ae6a 	ble.w	27ab6 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   27de2:	4659      	mov	r1, fp
   27de4:	2020      	movs	r0, #32
   27de6:	47c8      	blx	r9
   27de8:	2800      	cmp	r0, #0
   27dea:	dbb6      	blt.n	27d5a <z_cbvprintf_impl+0x6ca>
   27dec:	3501      	adds	r5, #1
			--width;
   27dee:	e7f3      	b.n	27dd8 <z_cbvprintf_impl+0x748>
   27df0:	00030ba1 	.word	0x00030ba1

00027df4 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   27df4:	b508      	push	{r3, lr}
   27df6:	4604      	mov	r4, r0
	__asm__ volatile(
   27df8:	f04f 0220 	mov.w	r2, #32
   27dfc:	f3ef 8311 	mrs	r3, BASEPRI
   27e00:	f382 8812 	msr	BASEPRI_MAX, r2
   27e04:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   27e08:	f003 fc22 	bl	2b650 <sys_clock_disable>
	}

	sys_arch_reboot(type);
   27e0c:	4620      	mov	r0, r4
   27e0e:	f001 ff1b 	bl	29c48 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   27e12:	4803      	ldr	r0, [pc, #12]	; (27e20 <sys_reboot+0x2c>)
   27e14:	f006 fd6d 	bl	2e8f2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   27e18:	f001 faec 	bl	293f4 <arch_cpu_idle>
   27e1c:	e7fc      	b.n	27e18 <sys_reboot+0x24>
   27e1e:	bf00      	nop
   27e20:	00030ba7 	.word	0x00030ba7

00027e24 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   27e24:	f003 bc46 	b.w	2b6b4 <SystemInit>

00027e28 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   27e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27e2c:	4605      	mov	r5, r0
   27e2e:	f04f 0320 	mov.w	r3, #32
   27e32:	f3ef 8611 	mrs	r6, BASEPRI
   27e36:	f383 8812 	msr	BASEPRI_MAX, r3
   27e3a:	f3bf 8f6f 	isb	sy
	return list->head;
   27e3e:	4b0e      	ldr	r3, [pc, #56]	; (27e78 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   27e40:	4f0e      	ldr	r7, [pc, #56]	; (27e7c <pm_state_notify+0x54>)
   27e42:	681c      	ldr	r4, [r3, #0]
   27e44:	f8df 8038 	ldr.w	r8, [pc, #56]	; 27e80 <pm_state_notify+0x58>
   27e48:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   27e4c:	b92c      	cbnz	r4, 27e5a <pm_state_notify+0x32>
	__asm__ volatile(
   27e4e:	f386 8811 	msr	BASEPRI, r6
   27e52:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   27e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   27e5a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   27e5e:	2d00      	cmp	r5, #0
   27e60:	bf18      	it	ne
   27e62:	4613      	movne	r3, r2
		if (callback) {
   27e64:	b12b      	cbz	r3, 27e72 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   27e66:	f898 2010 	ldrb.w	r2, [r8, #16]
   27e6a:	fb09 f202 	mul.w	r2, r9, r2
   27e6e:	5cb8      	ldrb	r0, [r7, r2]
   27e70:	4798      	blx	r3
	return node->next;
   27e72:	6824      	ldr	r4, [r4, #0]
   27e74:	e7ea      	b.n	27e4c <pm_state_notify+0x24>
   27e76:	bf00      	nop
   27e78:	200006f0 	.word	0x200006f0
   27e7c:	200006e4 	.word	0x200006e4
   27e80:	20001980 	.word	0x20001980

00027e84 <pm_system_resume>:

void pm_system_resume(void)
{
   27e84:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   27e86:	4b19      	ldr	r3, [pc, #100]	; (27eec <pm_system_resume+0x68>)
   27e88:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27e8a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   27e8e:	f004 031f 	and.w	r3, r4, #31
   27e92:	2201      	movs	r2, #1
   27e94:	409a      	lsls	r2, r3
   27e96:	4b16      	ldr	r3, [pc, #88]	; (27ef0 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27e98:	0961      	lsrs	r1, r4, #5
   27e9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   27e9e:	43d0      	mvns	r0, r2
   27ea0:	e853 1f00 	ldrex	r1, [r3]
   27ea4:	ea01 0500 	and.w	r5, r1, r0
   27ea8:	e843 5600 	strex	r6, r5, [r3]
   27eac:	2e00      	cmp	r6, #0
   27eae:	d1f7      	bne.n	27ea0 <pm_system_resume+0x1c>
   27eb0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   27eb4:	420a      	tst	r2, r1
   27eb6:	d013      	beq.n	27ee0 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   27eb8:	4b0e      	ldr	r3, [pc, #56]	; (27ef4 <pm_system_resume+0x70>)
   27eba:	4d0f      	ldr	r5, [pc, #60]	; (27ef8 <pm_system_resume+0x74>)
   27ebc:	b18b      	cbz	r3, 27ee2 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   27ebe:	230c      	movs	r3, #12
   27ec0:	4363      	muls	r3, r4
   27ec2:	18ea      	adds	r2, r5, r3
   27ec4:	5ce8      	ldrb	r0, [r5, r3]
   27ec6:	7851      	ldrb	r1, [r2, #1]
   27ec8:	f007 fa6d 	bl	2f3a6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   27ecc:	2000      	movs	r0, #0
   27ece:	f7ff ffab 	bl	27e28 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   27ed2:	230c      	movs	r3, #12
   27ed4:	435c      	muls	r4, r3
   27ed6:	192a      	adds	r2, r5, r4
   27ed8:	2300      	movs	r3, #0
   27eda:	512b      	str	r3, [r5, r4]
   27edc:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   27ee0:	bd70      	pop	{r4, r5, r6, pc}
   27ee2:	f383 8811 	msr	BASEPRI, r3
   27ee6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   27eea:	e7ef      	b.n	27ecc <pm_system_resume+0x48>
   27eec:	20001980 	.word	0x20001980
   27ef0:	200006f8 	.word	0x200006f8
   27ef4:	0002f3a7 	.word	0x0002f3a7
   27ef8:	200006e4 	.word	0x200006e4

00027efc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   27efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   27f00:	4b35      	ldr	r3, [pc, #212]	; (27fd8 <pm_system_suspend+0xdc>)
{
   27f02:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   27f04:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   27f06:	f04f 0320 	mov.w	r3, #32
   27f0a:	f3ef 8811 	mrs	r8, BASEPRI
   27f0e:	f383 8812 	msr	BASEPRI_MAX, r3
   27f12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   27f16:	240c      	movs	r4, #12
   27f18:	4b30      	ldr	r3, [pc, #192]	; (27fdc <pm_system_suspend+0xe0>)
   27f1a:	4e31      	ldr	r6, [pc, #196]	; (27fe0 <pm_system_suspend+0xe4>)
   27f1c:	436c      	muls	r4, r5
   27f1e:	191a      	adds	r2, r3, r4
   27f20:	5d19      	ldrb	r1, [r3, r4]
   27f22:	2900      	cmp	r1, #0
   27f24:	d04c      	beq.n	27fc0 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   27f26:	ca07      	ldmia	r2, {r0, r1, r2}
   27f28:	eb06 0c04 	add.w	ip, r6, r4
   27f2c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   27f30:	2200      	movs	r2, #0
   27f32:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   27f34:	f388 8811 	msr	BASEPRI, r8
   27f38:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   27f3c:	230c      	movs	r3, #12
   27f3e:	436b      	muls	r3, r5
   27f40:	18f2      	adds	r2, r6, r3
   27f42:	5cf0      	ldrb	r0, [r6, r3]
   27f44:	2800      	cmp	r0, #0
   27f46:	d039      	beq.n	27fbc <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   27f48:	1c7b      	adds	r3, r7, #1
   27f4a:	d010      	beq.n	27f6e <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   27f4c:	f8d2 c008 	ldr.w	ip, [r2, #8]
   27f50:	4c24      	ldr	r4, [pc, #144]	; (27fe4 <pm_system_suspend+0xe8>)
   27f52:	4a25      	ldr	r2, [pc, #148]	; (27fe8 <pm_system_suspend+0xec>)
   27f54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   27f58:	2100      	movs	r1, #0
   27f5a:	fbec 4100 	umlal	r4, r1, ip, r0
   27f5e:	2300      	movs	r3, #0
   27f60:	4620      	mov	r0, r4
   27f62:	f7ff f8cd 	bl	27100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   27f66:	2101      	movs	r1, #1
   27f68:	1a38      	subs	r0, r7, r0
   27f6a:	f003 fb35 	bl	2b5d8 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   27f6e:	f005 ff85 	bl	2de7c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   27f72:	2001      	movs	r0, #1
   27f74:	f7ff ff58 	bl	27e28 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27f78:	f3bf 8f5b 	dmb	ish
   27f7c:	4b1b      	ldr	r3, [pc, #108]	; (27fec <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   27f7e:	096a      	lsrs	r2, r5, #5
   27f80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   27f84:	f005 011f 	and.w	r1, r5, #31
   27f88:	2201      	movs	r2, #1
   27f8a:	408a      	lsls	r2, r1
   27f8c:	e853 0f00 	ldrex	r0, [r3]
   27f90:	4310      	orrs	r0, r2
   27f92:	e843 0100 	strex	r1, r0, [r3]
   27f96:	2900      	cmp	r1, #0
   27f98:	d1f8      	bne.n	27f8c <pm_system_suspend+0x90>
   27f9a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   27f9e:	4b14      	ldr	r3, [pc, #80]	; (27ff0 <pm_system_suspend+0xf4>)
   27fa0:	b13b      	cbz	r3, 27fb2 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   27fa2:	230c      	movs	r3, #12
   27fa4:	fb03 f005 	mul.w	r0, r3, r5
   27fa8:	1833      	adds	r3, r6, r0
   27faa:	5c30      	ldrb	r0, [r6, r0]
   27fac:	7859      	ldrb	r1, [r3, #1]
   27fae:	f007 f9ee 	bl	2f38e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   27fb2:	f7ff ff67 	bl	27e84 <pm_system_resume>
	k_sched_unlock();
   27fb6:	f005 ff75 	bl	2dea4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   27fba:	2001      	movs	r0, #1
}
   27fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   27fc0:	4601      	mov	r1, r0
   27fc2:	4628      	mov	r0, r5
   27fc4:	f000 f816 	bl	27ff4 <pm_policy_next_state>
		if (info != NULL) {
   27fc8:	2800      	cmp	r0, #0
   27fca:	d0b3      	beq.n	27f34 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   27fcc:	c807      	ldmia	r0, {r0, r1, r2}
   27fce:	4434      	add	r4, r6
   27fd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   27fd4:	e7ae      	b.n	27f34 <pm_system_suspend+0x38>
   27fd6:	bf00      	nop
   27fd8:	20001980 	.word	0x20001980
   27fdc:	200006d8 	.word	0x200006d8
   27fe0:	200006e4 	.word	0x200006e4
   27fe4:	000f423f 	.word	0x000f423f
   27fe8:	000f4240 	.word	0x000f4240
   27fec:	200006f8 	.word	0x200006f8
   27ff0:	0002f38f 	.word	0x0002f38f

00027ff4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   27ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ff8:	b085      	sub	sp, #20
   27ffa:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   27ffc:	a903      	add	r1, sp, #12
   27ffe:	f000 f843 	bl	28088 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   28002:	4b1e      	ldr	r3, [pc, #120]	; (2807c <pm_policy_next_state+0x88>)
   28004:	9d03      	ldr	r5, [sp, #12]
   28006:	f8d3 a000 	ldr.w	sl, [r3]
   2800a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 28080 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2800e:	1e43      	subs	r3, r0, #1
   28010:	b21b      	sxth	r3, r3
   28012:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   28016:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   28018:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   2801c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   28020:	f04f 0b00 	mov.w	fp, #0
   28024:	b924      	cbnz	r4, 28030 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   28026:	46a1      	mov	r9, r4
}
   28028:	4648      	mov	r0, r9
   2802a:	b005      	add	sp, #20
   2802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28030:	6868      	ldr	r0, [r5, #4]
   28032:	4a14      	ldr	r2, [pc, #80]	; (28084 <pm_policy_next_state+0x90>)
   28034:	46c4      	mov	ip, r8
   28036:	4659      	mov	r1, fp
   28038:	fbe0 c107 	umlal	ip, r1, r0, r7
   2803c:	2300      	movs	r3, #0
   2803e:	4660      	mov	r0, ip
   28040:	f7ff f85e 	bl	27100 <__aeabi_uldivmod>
   28044:	9001      	str	r0, [sp, #4]
   28046:	68a8      	ldr	r0, [r5, #8]
   28048:	4a0e      	ldr	r2, [pc, #56]	; (28084 <pm_policy_next_state+0x90>)
   2804a:	46c4      	mov	ip, r8
   2804c:	4659      	mov	r1, fp
   2804e:	fbe0 c107 	umlal	ip, r1, r0, r7
   28052:	2300      	movs	r3, #0
   28054:	4660      	mov	r0, ip
   28056:	f7ff f853 	bl	27100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   2805a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   2805e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   28060:	d001      	beq.n	28066 <pm_policy_next_state+0x72>
   28062:	4582      	cmp	sl, r0
   28064:	d905      	bls.n	28072 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   28066:	1c73      	adds	r3, r6, #1
   28068:	d0de      	beq.n	28028 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   2806a:	9b01      	ldr	r3, [sp, #4]
   2806c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   2806e:	42b0      	cmp	r0, r6
   28070:	d9da      	bls.n	28028 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   28072:	3c01      	subs	r4, #1
   28074:	b2a4      	uxth	r4, r4
   28076:	3d0c      	subs	r5, #12
   28078:	e7d4      	b.n	28024 <pm_policy_next_state+0x30>
   2807a:	bf00      	nop
   2807c:	200000b4 	.word	0x200000b4
   28080:	000f423f 	.word	0x000f423f
   28084:	000f4240 	.word	0x000f4240

00028088 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   28088:	b908      	cbnz	r0, 2808e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2808a:	4b02      	ldr	r3, [pc, #8]	; (28094 <pm_state_cpu_get_all+0xc>)
   2808c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2808e:	2000      	movs	r0, #0
   28090:	4770      	bx	lr
   28092:	bf00      	nop
   28094:	00030870 	.word	0x00030870

00028098 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   28098:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2809a:	4b0c      	ldr	r3, [pc, #48]	; (280cc <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2809c:	4e0c      	ldr	r6, [pc, #48]	; (280d0 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2809e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   280a0:	4b0c      	ldr	r3, [pc, #48]	; (280d4 <class_handler+0x3c>)
   280a2:	42b3      	cmp	r3, r6
   280a4:	d303      	bcc.n	280ae <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   280a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   280aa:	bcf0      	pop	{r4, r5, r6, r7}
   280ac:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   280ae:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   280b0:	42bd      	cmp	r5, r7
   280b2:	d309      	bcc.n	280c8 <class_handler+0x30>
		if (iface->class_handler &&
   280b4:	691c      	ldr	r4, [r3, #16]
   280b6:	b13c      	cbz	r4, 280c8 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   280b8:	f895 c002 	ldrb.w	ip, [r5, #2]
   280bc:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   280be:	45ac      	cmp	ip, r5
   280c0:	d102      	bne.n	280c8 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   280c2:	4623      	mov	r3, r4
}
   280c4:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   280c6:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   280c8:	3324      	adds	r3, #36	; 0x24
   280ca:	e7ea      	b.n	280a2 <class_handler+0xa>
   280cc:	200006fc 	.word	0x200006fc
   280d0:	200003b4 	.word	0x200003b4
   280d4:	20000390 	.word	0x20000390

000280d8 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   280d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   280dc:	4c13      	ldr	r4, [pc, #76]	; (2812c <custom_handler+0x54>)
   280de:	f8df 8050 	ldr.w	r8, [pc, #80]	; 28130 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   280e2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 28134 <custom_handler+0x5c>
{
   280e6:	4605      	mov	r5, r0
   280e8:	460e      	mov	r6, r1
   280ea:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   280ec:	4544      	cmp	r4, r8
   280ee:	d303      	bcc.n	280f8 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   280f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   280f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   280f8:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   280fa:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   280fe:	429a      	cmp	r2, r3
   28100:	d312      	bcc.n	28128 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   28102:	69a3      	ldr	r3, [r4, #24]
   28104:	b183      	cbz	r3, 28128 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28106:	7890      	ldrb	r0, [r2, #2]
   28108:	7929      	ldrb	r1, [r5, #4]
   2810a:	4288      	cmp	r0, r1
   2810c:	d105      	bne.n	2811a <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   2810e:	463a      	mov	r2, r7
   28110:	4631      	mov	r1, r6
   28112:	4628      	mov	r0, r5
}
   28114:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   28118:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   2811a:	7952      	ldrb	r2, [r2, #5]
   2811c:	2a01      	cmp	r2, #1
   2811e:	d103      	bne.n	28128 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   28120:	463a      	mov	r2, r7
   28122:	4631      	mov	r1, r6
   28124:	4628      	mov	r0, r5
   28126:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28128:	3424      	adds	r4, #36	; 0x24
   2812a:	e7df      	b.n	280ec <custom_handler+0x14>
   2812c:	20000390 	.word	0x20000390
   28130:	200003b4 	.word	0x200003b4
   28134:	200006fc 	.word	0x200006fc

00028138 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2813c:	4c0b      	ldr	r4, [pc, #44]	; (2816c <vendor_handler+0x34>)
   2813e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 28170 <vendor_handler+0x38>
{
   28142:	4605      	mov	r5, r0
   28144:	460e      	mov	r6, r1
   28146:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28148:	4544      	cmp	r4, r8
   2814a:	d302      	bcc.n	28152 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   2814c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28150:	e009      	b.n	28166 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   28152:	6963      	ldr	r3, [r4, #20]
   28154:	b90b      	cbnz	r3, 2815a <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28156:	3424      	adds	r4, #36	; 0x24
   28158:	e7f6      	b.n	28148 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   2815a:	463a      	mov	r2, r7
   2815c:	4631      	mov	r1, r6
   2815e:	4628      	mov	r0, r5
   28160:	4798      	blx	r3
   28162:	2800      	cmp	r0, #0
   28164:	d1f7      	bne.n	28156 <vendor_handler+0x1e>
}
   28166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2816a:	bf00      	nop
   2816c:	20000390 	.word	0x20000390
   28170:	200003b4 	.word	0x200003b4

00028174 <disable_endpoint>:
{
   28174:	b510      	push	{r4, lr}
   28176:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
   28178:	f007 f94a 	bl	2f410 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   2817c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28180:	d000      	beq.n	28184 <disable_endpoint+0x10>
	} else if (ret) {
   28182:	b950      	cbnz	r0, 2819a <disable_endpoint+0x26>
	usb_dev.ep_bm &= ~ep_bm;
   28184:	4a05      	ldr	r2, [pc, #20]	; (2819c <disable_endpoint+0x28>)
	ep_bm = get_ep_bm_from_addr(ep_addr);
   28186:	4620      	mov	r0, r4
   28188:	f006 ffca 	bl	2f120 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   2818c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   28190:	ea23 0300 	bic.w	r3, r3, r0
   28194:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
   28198:	2000      	movs	r0, #0
}
   2819a:	bd10      	pop	{r4, pc}
   2819c:	200006fc 	.word	0x200006fc

000281a0 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   281a0:	4802      	ldr	r0, [pc, #8]	; (281ac <usb_reset_alt_setting+0xc>)
   281a2:	2208      	movs	r2, #8
   281a4:	2100      	movs	r1, #0
   281a6:	f007 b8e6 	b.w	2f376 <memset>
   281aa:	bf00      	nop
   281ac:	200007b7 	.word	0x200007b7

000281b0 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   281b0:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   281b2:	4b0b      	ldr	r3, [pc, #44]	; (281e0 <is_ep_valid.part.0+0x30>)
   281b4:	4c0b      	ldr	r4, [pc, #44]	; (281e4 <is_ep_valid.part.0+0x34>)
   281b6:	42a3      	cmp	r3, r4
   281b8:	d301      	bcc.n	281be <is_ep_valid.part.0+0xe>
	return false;
   281ba:	2000      	movs	r0, #0
}
   281bc:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   281be:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   281c0:	7f1e      	ldrb	r6, [r3, #28]
   281c2:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   281c4:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   281c6:	b2d5      	uxtb	r5, r2
   281c8:	42ae      	cmp	r6, r5
   281ca:	d801      	bhi.n	281d0 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   281cc:	3324      	adds	r3, #36	; 0x24
   281ce:	e7f2      	b.n	281b6 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   281d0:	3201      	adds	r2, #1
   281d2:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   281d6:	4285      	cmp	r5, r0
   281d8:	d1f5      	bne.n	281c6 <is_ep_valid.part.0+0x16>
		return true;
   281da:	2001      	movs	r0, #1
   281dc:	e7ee      	b.n	281bc <is_ep_valid.part.0+0xc>
   281de:	bf00      	nop
   281e0:	20000390 	.word	0x20000390
   281e4:	200003b4 	.word	0x200003b4

000281e8 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
   281e8:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
   281ea:	4809      	ldr	r0, [pc, #36]	; (28210 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
   281ec:	7803      	ldrb	r3, [r0, #0]
   281ee:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   281f2:	330a      	adds	r3, #10
   281f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   281f8:	b13b      	cbz	r3, 2820a <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   281fa:	f100 0208 	add.w	r2, r0, #8
   281fe:	f100 0110 	add.w	r1, r0, #16
   28202:	4798      	blx	r3
   28204:	43c0      	mvns	r0, r0
   28206:	0fc0      	lsrs	r0, r0, #31
}
   28208:	bd08      	pop	{r3, pc}
		return false;
   2820a:	4618      	mov	r0, r3
   2820c:	e7fc      	b.n	28208 <usb_handle_request.constprop.0+0x20>
   2820e:	bf00      	nop
   28210:	200006fc 	.word	0x200006fc

00028214 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   28214:	2804      	cmp	r0, #4
{
   28216:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2821a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 282b4 <forward_status_cb+0xa0>
   2821e:	4604      	mov	r4, r0
   28220:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
   28222:	d016      	beq.n	28252 <forward_status_cb+0x3e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   28224:	2801      	cmp	r0, #1
   28226:	d12d      	bne.n	28284 <forward_status_cb+0x70>
		if (usb_dev.configured) {
   28228:	f8df 808c 	ldr.w	r8, [pc, #140]	; 282b8 <forward_status_cb+0xa4>
   2822c:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
   28230:	b343      	cbz	r3, 28284 <forward_status_cb+0x70>
			usb_cancel_transfers();
   28232:	f000 fde3 	bl	28dfc <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28236:	4d21      	ldr	r5, [pc, #132]	; (282bc <forward_status_cb+0xa8>)
   28238:	454d      	cmp	r5, r9
   2823a:	d220      	bcs.n	2827e <forward_status_cb+0x6a>
		ep_data = cfg_data->endpoint;
   2823c:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28240:	f04f 0a00 	mov.w	sl, #0
   28244:	7f2b      	ldrb	r3, [r5, #28]
   28246:	fa5f f68a 	uxtb.w	r6, sl
   2824a:	42b3      	cmp	r3, r6
   2824c:	d804      	bhi.n	28258 <forward_status_cb+0x44>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2824e:	3524      	adds	r5, #36	; 0x24
   28250:	e7f2      	b.n	28238 <forward_status_cb+0x24>
		usb_reset_alt_setting();
   28252:	f7ff ffa5 	bl	281a0 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   28256:	e7e7      	b.n	28228 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
   28258:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
			if (ret < 0) {
   2825c:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
   28260:	7930      	ldrb	r0, [r6, #4]
   28262:	f007 f8d5 	bl	2f410 <usb_dc_ep_disable>
   28266:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
   28268:	7930      	ldrb	r0, [r6, #4]
   2826a:	f006 ff59 	bl	2f120 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   2826e:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
   28272:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
   28274:	ea23 0300 	bic.w	r3, r3, r0
   28278:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
   2827c:	dae2      	bge.n	28244 <forward_status_cb+0x30>
			usb_dev.configured = false;
   2827e:	2300      	movs	r3, #0
   28280:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28284:	4d0d      	ldr	r5, [pc, #52]	; (282bc <forward_status_cb+0xa8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28286:	454d      	cmp	r5, r9
   28288:	d308      	bcc.n	2829c <forward_status_cb+0x88>
	if (usb_dev.user_status_callback) {
   2828a:	4b0b      	ldr	r3, [pc, #44]	; (282b8 <forward_status_cb+0xa4>)
   2828c:	6a1b      	ldr	r3, [r3, #32]
   2828e:	b16b      	cbz	r3, 282ac <forward_status_cb+0x98>
		usb_dev.user_status_callback(status, param);
   28290:	4639      	mov	r1, r7
   28292:	4620      	mov	r0, r4
}
   28294:	b001      	add	sp, #4
   28296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
   2829a:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
   2829c:	68eb      	ldr	r3, [r5, #12]
   2829e:	b11b      	cbz	r3, 282a8 <forward_status_cb+0x94>
			cfg_data->cb_usb_status(cfg_data, status, param);
   282a0:	463a      	mov	r2, r7
   282a2:	4621      	mov	r1, r4
   282a4:	4628      	mov	r0, r5
   282a6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   282a8:	3524      	adds	r5, #36	; 0x24
   282aa:	e7ec      	b.n	28286 <forward_status_cb+0x72>
}
   282ac:	b001      	add	sp, #4
   282ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282b2:	bf00      	nop
   282b4:	200003b4 	.word	0x200003b4
   282b8:	200006fc 	.word	0x200006fc
   282bc:	20000390 	.word	0x20000390

000282c0 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   282c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   282c2:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   282c4:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   282c6:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   282c8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   282cc:	d007      	beq.n	282de <usb_halt_endpoint_req.isra.0+0x1e>
   282ce:	4620      	mov	r0, r4
   282d0:	f7ff ff6e 	bl	281b0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   282d4:	b178      	cbz	r0, 282f6 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
   282d6:	4b0d      	ldr	r3, [pc, #52]	; (2830c <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   282d8:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   282dc:	b158      	cbz	r0, 282f6 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
   282de:	4e0b      	ldr	r6, [pc, #44]	; (2830c <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
   282e0:	4620      	mov	r0, r4
		if (halt) {
   282e2:	b155      	cbz	r5, 282fa <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
   282e4:	f002 f8a8 	bl	2a438 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   282e8:	69f3      	ldr	r3, [r6, #28]
   282ea:	b11b      	cbz	r3, 282f4 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   282ec:	f10d 0107 	add.w	r1, sp, #7
   282f0:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   282f2:	4798      	blx	r3
		return true;
   282f4:	2001      	movs	r0, #1
}
   282f6:	b002      	add	sp, #8
   282f8:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   282fa:	f002 f8c5 	bl	2a488 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   282fe:	69f3      	ldr	r3, [r6, #28]
   28300:	2b00      	cmp	r3, #0
   28302:	d0f7      	beq.n	282f4 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   28304:	f10d 0107 	add.w	r1, sp, #7
   28308:	2009      	movs	r0, #9
   2830a:	e7f2      	b.n	282f2 <usb_halt_endpoint_req.isra.0+0x32>
   2830c:	200006fc 	.word	0x200006fc

00028310 <set_endpoint>:
{
   28310:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   28312:	7886      	ldrb	r6, [r0, #2]
   28314:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   28318:	7903      	ldrb	r3, [r0, #4]
   2831a:	7942      	ldrb	r2, [r0, #5]
	if (ep_bm & usb_dev.ep_bm) {
   2831c:	4c1c      	ldr	r4, [pc, #112]	; (28390 <set_endpoint+0x80>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   2831e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28322:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28326:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   28328:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2832a:	f003 0303 	and.w	r3, r3, #3
   2832e:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   28332:	f006 fef5 	bl	2f120 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
   28336:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   2833a:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   2833c:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
   2833e:	d00b      	beq.n	28358 <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
   28340:	4630      	mov	r0, r6
   28342:	f000 fd3d 	bl	28dc0 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   28346:	4630      	mov	r0, r6
   28348:	f7ff ff14 	bl	28174 <disable_endpoint>
		if (!k_is_in_isr()) {
   2834c:	f007 fdfe 	bl	2ff4c <k_is_in_isr>
   28350:	b910      	cbnz	r0, 28358 <set_endpoint+0x48>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
   28352:	2096      	movs	r0, #150	; 0x96
   28354:	f005 fe66 	bl	2e024 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
   28358:	4668      	mov	r0, sp
   2835a:	f002 f849 	bl	2a3f0 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   2835e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28362:	d003      	beq.n	2836c <set_endpoint+0x5c>
	} else if (ret) {
   28364:	b110      	cbz	r0, 2836c <set_endpoint+0x5c>
		return false;
   28366:	2000      	movs	r0, #0
}
   28368:	b002      	add	sp, #8
   2836a:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   2836c:	f89d 0000 	ldrb.w	r0, [sp]
   28370:	f002 f8c6 	bl	2a500 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   28374:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28378:	d001      	beq.n	2837e <set_endpoint+0x6e>
	} else if (ret) {
   2837a:	2800      	cmp	r0, #0
   2837c:	d1f3      	bne.n	28366 <set_endpoint+0x56>
	usb_dev.ep_bm |= ep_bm;
   2837e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
   28382:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
   28384:	432b      	orrs	r3, r5
	usb_dev.configured = true;
   28386:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
   2838a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
   2838e:	e7eb      	b.n	28368 <set_endpoint+0x58>
   28390:	200006fc 	.word	0x200006fc

00028394 <usb_handle_standard_request>:
{
   28394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   28398:	4ea3      	ldr	r6, [pc, #652]	; (28628 <usb_handle_standard_request+0x294>)
   2839a:	69b3      	ldr	r3, [r6, #24]
{
   2839c:	4604      	mov	r4, r0
   2839e:	460f      	mov	r7, r1
   283a0:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
   283a2:	b9fb      	cbnz	r3, 283e4 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
   283a4:	7823      	ldrb	r3, [r4, #0]
   283a6:	f003 031f 	and.w	r3, r3, #31
   283aa:	2b01      	cmp	r3, #1
   283ac:	f000 809d 	beq.w	284ea <usb_handle_standard_request+0x156>
   283b0:	2b02      	cmp	r3, #2
   283b2:	f000 8104 	beq.w	285be <usb_handle_standard_request+0x22a>
   283b6:	bb33      	cbnz	r3, 28406 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
   283b8:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
   283bc:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
   283be:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   283c0:	2800      	cmp	r0, #0
   283c2:	da34      	bge.n	2842e <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   283c4:	2906      	cmp	r1, #6
   283c6:	d012      	beq.n	283ee <usb_handle_standard_request+0x5a>
   283c8:	2908      	cmp	r1, #8
   283ca:	d02b      	beq.n	28424 <usb_handle_standard_request+0x90>
   283cc:	b9d9      	cbnz	r1, 28406 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   283ce:	2301      	movs	r3, #1
   283d0:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
   283d2:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   283d4:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
   283d8:	005b      	lsls	r3, r3, #1
   283da:	f043 0301 	orr.w	r3, r3, #1
   283de:	7013      	strb	r3, [r2, #0]
		*len = 2;
   283e0:	2302      	movs	r3, #2
   283e2:	e12a      	b.n	2863a <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   283e4:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   283e6:	2800      	cmp	r0, #0
   283e8:	d1dc      	bne.n	283a4 <usb_handle_standard_request+0x10>
		return 0;
   283ea:	2000      	movs	r0, #0
   283ec:	e00d      	b.n	2840a <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
   283ee:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   283f0:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   283f2:	1f01      	subs	r1, r0, #4
   283f4:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   283f6:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   283f8:	d905      	bls.n	28406 <usb_handle_standard_request+0x72>
   283fa:	2807      	cmp	r0, #7
   283fc:	d803      	bhi.n	28406 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
   283fe:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   28400:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
   28402:	780c      	ldrb	r4, [r1, #0]
   28404:	b91c      	cbnz	r4, 2840e <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
   28406:	f06f 0015 	mvn.w	r0, #21
}
   2840a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
   2840e:	784e      	ldrb	r6, [r1, #1]
   28410:	4566      	cmp	r6, ip
   28412:	d103      	bne.n	2841c <usb_handle_standard_request+0x88>
			if (cur_index == index) {
   28414:	429a      	cmp	r2, r3
   28416:	f000 810b 	beq.w	28630 <usb_handle_standard_request+0x29c>
			cur_index++;
   2841a:	3301      	adds	r3, #1
		p += p[DESC_bLength];
   2841c:	4421      	add	r1, r4
   2841e:	e7f0      	b.n	28402 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
   28420:	780b      	ldrb	r3, [r1, #0]
   28422:	e10a      	b.n	2863a <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
   28424:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   28428:	7013      	strb	r3, [r2, #0]
				*len = 1;
   2842a:	2301      	movs	r3, #1
   2842c:	e105      	b.n	2863a <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
   2842e:	3901      	subs	r1, #1
   28430:	2908      	cmp	r1, #8
   28432:	d8e8      	bhi.n	28406 <usb_handle_standard_request+0x72>
   28434:	a301      	add	r3, pc, #4	; (adr r3, 2843c <usb_handle_standard_request+0xa8>)
   28436:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2843a:	bf00      	nop
   2843c:	000284d5 	.word	0x000284d5
   28440:	00028407 	.word	0x00028407
   28444:	000284e3 	.word	0x000284e3
   28448:	00028407 	.word	0x00028407
   2844c:	00028461 	.word	0x00028461
   28450:	00028407 	.word	0x00028407
   28454:	00028407 	.word	0x00028407
   28458:	00028407 	.word	0x00028407
   2845c:	0002846d 	.word	0x0002846d
			return !usb_dc_set_address(setup->wValue);
   28460:	78a0      	ldrb	r0, [r4, #2]
   28462:	f001 ffb3 	bl	2a3cc <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   28466:	2800      	cmp	r0, #0
   28468:	d0bf      	beq.n	283ea <usb_handle_standard_request+0x56>
   2846a:	e7cc      	b.n	28406 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
   2846c:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2846e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   28470:	bb63      	cbnz	r3, 284cc <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
   28472:	f7ff fe95 	bl	281a0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   28476:	8863      	ldrh	r3, [r4, #2]
   28478:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   2847c:	69f3      	ldr	r3, [r6, #28]
   2847e:	2b00      	cmp	r3, #0
   28480:	d0b3      	beq.n	283ea <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   28482:	496a      	ldr	r1, [pc, #424]	; (2862c <usb_handle_standard_request+0x298>)
   28484:	2003      	movs	r0, #3
   28486:	4798      	blx	r3
   28488:	e7af      	b.n	283ea <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
   2848a:	786b      	ldrb	r3, [r5, #1]
   2848c:	2b04      	cmp	r3, #4
   2848e:	d010      	beq.n	284b2 <usb_handle_standard_request+0x11e>
   28490:	2b05      	cmp	r3, #5
   28492:	d011      	beq.n	284b8 <usb_handle_standard_request+0x124>
   28494:	2b02      	cmp	r3, #2
   28496:	d104      	bne.n	284a2 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
   28498:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
   2849a:	8863      	ldrh	r3, [r4, #2]
				found = true;
   2849c:	42bb      	cmp	r3, r7
   2849e:	bf08      	it	eq
   284a0:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   284a2:	782b      	ldrb	r3, [r5, #0]
   284a4:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   284a6:	782b      	ldrb	r3, [r5, #0]
   284a8:	2b00      	cmp	r3, #0
   284aa:	d1ee      	bne.n	2848a <usb_handle_standard_request+0xf6>
	if (found) {
   284ac:	2800      	cmp	r0, #0
   284ae:	d0aa      	beq.n	28406 <usb_handle_standard_request+0x72>
   284b0:	e7df      	b.n	28472 <usb_handle_standard_request+0xde>
			cur_alt_setting =
   284b2:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
   284b6:	e7f4      	b.n	284a2 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
   284b8:	8863      	ldrh	r3, [r4, #2]
   284ba:	42bb      	cmp	r3, r7
   284bc:	d1f1      	bne.n	284a2 <usb_handle_standard_request+0x10e>
   284be:	f1b8 0f00 	cmp.w	r8, #0
   284c2:	d1ee      	bne.n	284a2 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   284c4:	4628      	mov	r0, r5
   284c6:	f7ff ff23 	bl	28310 <set_endpoint>
			break;
   284ca:	e7ea      	b.n	284a2 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
   284cc:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
   284ce:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   284d0:	46b8      	mov	r8, r7
   284d2:	e7e8      	b.n	284a6 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   284d4:	8863      	ldrh	r3, [r4, #2]
   284d6:	2b01      	cmp	r3, #1
   284d8:	d195      	bne.n	28406 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
   284da:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
   284dc:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   284e0:	e783      	b.n	283ea <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   284e2:	8863      	ldrh	r3, [r4, #2]
   284e4:	2b01      	cmp	r3, #1
   284e6:	d18e      	bne.n	28406 <usb_handle_standard_request+0x72>
   284e8:	e7f8      	b.n	284dc <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
   284ea:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   284ee:	f8d5 c000 	ldr.w	ip, [r5]
   284f2:	2b00      	cmp	r3, #0
   284f4:	d087      	beq.n	28406 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   284f6:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   284f8:	88a3      	ldrh	r3, [r4, #4]
   284fa:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   284fe:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
   28500:	7810      	ldrb	r0, [r2, #0]
   28502:	2800      	cmp	r0, #0
   28504:	f43f af7f 	beq.w	28406 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   28508:	7851      	ldrb	r1, [r2, #1]
   2850a:	2902      	cmp	r1, #2
   2850c:	d104      	bne.n	28518 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
   2850e:	f892 8004 	ldrb.w	r8, [r2, #4]
   28512:	45f0      	cmp	r8, lr
   28514:	f200 8093 	bhi.w	2863e <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
   28518:	4402      	add	r2, r0
   2851a:	e7f1      	b.n	28500 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
   2851c:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
   28520:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
   28524:	6039      	str	r1, [r7, #0]
			return true;
   28526:	e760      	b.n	283ea <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
   28528:	4415      	add	r5, r2
   2852a:	e094      	b.n	28656 <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   2852c:	2a0b      	cmp	r2, #11
   2852e:	f47f af6a 	bne.w	28406 <usb_handle_standard_request+0x72>
	bool ret = false;
   28532:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   28534:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   28538:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
   2853a:	46ba      	mov	sl, r7
   2853c:	e006      	b.n	2854c <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
   2853e:	786b      	ldrb	r3, [r5, #1]
   28540:	2b04      	cmp	r3, #4
   28542:	d00f      	beq.n	28564 <usb_handle_standard_request+0x1d0>
   28544:	2b05      	cmp	r3, #5
   28546:	d021      	beq.n	2858c <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
   28548:	782b      	ldrb	r3, [r5, #0]
   2854a:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   2854c:	782b      	ldrb	r3, [r5, #0]
   2854e:	2b00      	cmp	r3, #0
   28550:	d1f5      	bne.n	2853e <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
   28552:	69f3      	ldr	r3, [r6, #28]
   28554:	b113      	cbz	r3, 2855c <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   28556:	4651      	mov	r1, sl
   28558:	2007      	movs	r0, #7
   2855a:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   2855c:	2f00      	cmp	r7, #0
   2855e:	f47f af44 	bne.w	283ea <usb_handle_standard_request+0x56>
   28562:	e750      	b.n	28406 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   28564:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
   28568:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   2856a:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
   2856e:	4598      	cmp	r8, r3
   28570:	d1ea      	bne.n	28548 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
   28572:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
   28574:	4599      	cmp	r9, r3
   28576:	d1e7      	bne.n	28548 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   28578:	f1b8 0f07 	cmp.w	r8, #7
   2857c:	d81c      	bhi.n	285b8 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
   2857e:	eb06 0308 	add.w	r3, r6, r8
		return true;
   28582:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
   28584:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
   28588:	2701      	movs	r7, #1
   2858a:	e7dd      	b.n	28548 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
   2858c:	88a3      	ldrh	r3, [r4, #4]
   2858e:	4543      	cmp	r3, r8
   28590:	d1da      	bne.n	28548 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
   28592:	78a3      	ldrb	r3, [r4, #2]
   28594:	454b      	cmp	r3, r9
   28596:	d00a      	beq.n	285ae <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
   28598:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   2859a:	4638      	mov	r0, r7
   2859c:	f000 fc10 	bl	28dc0 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   285a0:	4638      	mov	r0, r7
   285a2:	f7ff fde7 	bl	28174 <disable_endpoint>
   285a6:	fab0 f780 	clz	r7, r0
   285aa:	097f      	lsrs	r7, r7, #5
   285ac:	e7cc      	b.n	28548 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
   285ae:	4628      	mov	r0, r5
   285b0:	f7ff feae 	bl	28310 <set_endpoint>
   285b4:	4607      	mov	r7, r0
   285b6:	e7c7      	b.n	28548 <usb_handle_standard_request+0x1b4>
   285b8:	46aa      	mov	sl, r5
	return false;
   285ba:	2700      	movs	r7, #0
   285bc:	e7c4      	b.n	28548 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
   285be:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   285c2:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   285c4:	2a00      	cmp	r2, #0
   285c6:	da18      	bge.n	285fa <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   285c8:	2b00      	cmp	r3, #0
   285ca:	f47f af1c 	bne.w	28406 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
   285ce:	7924      	ldrb	r4, [r4, #4]
   285d0:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   285d2:	0663      	lsls	r3, r4, #25
   285d4:	d00a      	beq.n	285ec <usb_handle_standard_request+0x258>
   285d6:	4620      	mov	r0, r4
   285d8:	f7ff fdea 	bl	281b0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   285dc:	2800      	cmp	r0, #0
   285de:	f43f af12 	beq.w	28406 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   285e2:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   285e6:	2b00      	cmp	r3, #0
   285e8:	f43f af0d 	beq.w	28406 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
   285ec:	4629      	mov	r1, r5
   285ee:	4620      	mov	r0, r4
   285f0:	f001 ff6a 	bl	2a4c8 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   285f4:	2300      	movs	r3, #0
   285f6:	706b      	strb	r3, [r5, #1]
   285f8:	e6f2      	b.n	283e0 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
   285fa:	2b01      	cmp	r3, #1
   285fc:	d008      	beq.n	28610 <usb_handle_standard_request+0x27c>
   285fe:	2b03      	cmp	r3, #3
   28600:	f47f af01 	bne.w	28406 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   28604:	8863      	ldrh	r3, [r4, #2]
   28606:	2b00      	cmp	r3, #0
   28608:	f47f aefd 	bne.w	28406 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   2860c:	2101      	movs	r1, #1
   2860e:	e003      	b.n	28618 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   28610:	8861      	ldrh	r1, [r4, #2]
   28612:	2900      	cmp	r1, #0
   28614:	f47f aef7 	bne.w	28406 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   28618:	88a0      	ldrh	r0, [r4, #4]
   2861a:	f7ff fe51 	bl	282c0 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   2861e:	2800      	cmp	r0, #0
   28620:	f47f aee3 	bne.w	283ea <usb_handle_standard_request+0x56>
   28624:	e6ef      	b.n	28406 <usb_handle_standard_request+0x72>
   28626:	bf00      	nop
   28628:	200006fc 	.word	0x200006fc
   2862c:	200007b6 	.word	0x200007b6
		if (type == USB_DESC_CONFIGURATION) {
   28630:	2802      	cmp	r0, #2
		*data = p;
   28632:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
   28634:	f47f aef4 	bne.w	28420 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
   28638:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
   2863a:	603b      	str	r3, [r7, #0]
		return true;
   2863c:	e6d5      	b.n	283ea <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
   2863e:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
   28642:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28644:	2800      	cmp	r0, #0
   28646:	f6bf af71 	bge.w	2852c <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
   2864a:	2a00      	cmp	r2, #0
   2864c:	f43f af66 	beq.w	2851c <usb_handle_standard_request+0x188>
   28650:	2a0a      	cmp	r2, #10
   28652:	f47f aed8 	bne.w	28406 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
   28656:	782a      	ldrb	r2, [r5, #0]
   28658:	2a00      	cmp	r2, #0
   2865a:	f43f aed4 	beq.w	28406 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   2865e:	7869      	ldrb	r1, [r5, #1]
   28660:	2904      	cmp	r1, #4
   28662:	f47f af61 	bne.w	28528 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   28666:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
   28668:	428b      	cmp	r3, r1
   2866a:	f47f af5d 	bne.w	28528 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2866e:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   28670:	bf96      	itet	ls
   28672:	199b      	addls	r3, r3, r6
	return 0;
   28674:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   28676:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   2867a:	f88c 3000 	strb.w	r3, [ip]
   2867e:	e6d4      	b.n	2842a <usb_handle_standard_request+0x96>

00028680 <usb_data_to_host>:
{
   28680:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   28682:	4c13      	ldr	r4, [pc, #76]	; (286d0 <usb_data_to_host+0x50>)
   28684:	7d23      	ldrb	r3, [r4, #20]
   28686:	b9cb      	cbnz	r3, 286bc <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   28688:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2868a:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   2868c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2868e:	ab01      	add	r3, sp, #4
   28690:	2080      	movs	r0, #128	; 0x80
   28692:	f006 fd53 	bl	2f13c <usb_write>
		usb_dev.data_buf += chunk;
   28696:	9a01      	ldr	r2, [sp, #4]
   28698:	68a3      	ldr	r3, [r4, #8]
   2869a:	4413      	add	r3, r2
   2869c:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2869e:	68e3      	ldr	r3, [r4, #12]
   286a0:	1a9b      	subs	r3, r3, r2
   286a2:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   286a4:	b943      	cbnz	r3, 286b8 <usb_data_to_host+0x38>
   286a6:	b13a      	cbz	r2, 286b8 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   286a8:	6923      	ldr	r3, [r4, #16]
   286aa:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   286ac:	429a      	cmp	r2, r3
   286ae:	dd03      	ble.n	286b8 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   286b0:	069b      	lsls	r3, r3, #26
   286b2:	d101      	bne.n	286b8 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   286b4:	2301      	movs	r3, #1
   286b6:	7523      	strb	r3, [r4, #20]
}
   286b8:	b002      	add	sp, #8
   286ba:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   286bc:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   286be:	461a      	mov	r2, r3
   286c0:	4619      	mov	r1, r3
   286c2:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   286c4:	7523      	strb	r3, [r4, #20]
}
   286c6:	b002      	add	sp, #8
   286c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   286cc:	f001 bf42 	b.w	2a554 <usb_dc_ep_write>
   286d0:	200006fc 	.word	0x200006fc

000286d4 <usb_handle_control_transfer>:
{
   286d4:	b530      	push	{r4, r5, lr}
   286d6:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   286d8:	2300      	movs	r3, #0
{
   286da:	4602      	mov	r2, r0
   286dc:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   286de:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   286e0:	2800      	cmp	r0, #0
   286e2:	d158      	bne.n	28796 <usb_handle_control_transfer+0xc2>
   286e4:	2900      	cmp	r1, #0
   286e6:	d135      	bne.n	28754 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   286e8:	2208      	movs	r2, #8
   286ea:	460b      	mov	r3, r1
   286ec:	eb0d 0102 	add.w	r1, sp, r2
   286f0:	f006 fea7 	bl	2f442 <usb_dc_ep_read>
   286f4:	2800      	cmp	r0, #0
   286f6:	da04      	bge.n	28702 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   286f8:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   286fa:	f001 fe9d 	bl	2a438 <usb_dc_ep_set_stall>
}
   286fe:	b005      	add	sp, #20
   28700:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   28702:	4c2a      	ldr	r4, [pc, #168]	; (287ac <usb_handle_control_transfer+0xd8>)
   28704:	9a02      	ldr	r2, [sp, #8]
   28706:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   28708:	9a03      	ldr	r2, [sp, #12]
   2870a:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   2870c:	f104 0238 	add.w	r2, r4, #56	; 0x38
   28710:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   28712:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   28716:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   2871a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   2871c:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   2871e:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   28722:	db0a      	blt.n	2873a <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   28724:	2b80      	cmp	r3, #128	; 0x80
   28726:	d904      	bls.n	28732 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   28728:	2080      	movs	r0, #128	; 0x80
   2872a:	f001 fe85 	bl	2a438 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2872e:	2000      	movs	r0, #0
   28730:	e7e3      	b.n	286fa <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   28732:	b113      	cbz	r3, 2873a <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   28734:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   28738:	e7e1      	b.n	286fe <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   2873a:	f7ff fd55 	bl	281e8 <usb_handle_request.constprop.0>
   2873e:	2800      	cmp	r0, #0
   28740:	d0da      	beq.n	286f8 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   28742:	88e2      	ldrh	r2, [r4, #6]
   28744:	6923      	ldr	r3, [r4, #16]
   28746:	429a      	cmp	r2, r3
   28748:	bfd4      	ite	le
   2874a:	60e2      	strle	r2, [r4, #12]
   2874c:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   2874e:	f7ff ff97 	bl	28680 <usb_data_to_host>
   28752:	e7d4      	b.n	286fe <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   28754:	4c15      	ldr	r4, [pc, #84]	; (287ac <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   28756:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   2875a:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2875c:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   2875e:	dc04      	bgt.n	2876a <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   28760:	f006 fe6f 	bl	2f442 <usb_dc_ep_read>
   28764:	2800      	cmp	r0, #0
   28766:	daca      	bge.n	286fe <usb_handle_control_transfer+0x2a>
   28768:	e7c6      	b.n	286f8 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2876a:	462a      	mov	r2, r5
   2876c:	f006 fe69 	bl	2f442 <usb_dc_ep_read>
   28770:	2800      	cmp	r0, #0
   28772:	dbd9      	blt.n	28728 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   28774:	9a01      	ldr	r2, [sp, #4]
   28776:	68a3      	ldr	r3, [r4, #8]
   28778:	4413      	add	r3, r2
   2877a:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2877c:	68e3      	ldr	r3, [r4, #12]
   2877e:	1a9b      	subs	r3, r3, r2
   28780:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   28782:	2b00      	cmp	r3, #0
   28784:	d1bb      	bne.n	286fe <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   28786:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2878a:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   2878c:	f7ff fd2c 	bl	281e8 <usb_handle_request.constprop.0>
   28790:	2800      	cmp	r0, #0
   28792:	d1dc      	bne.n	2874e <usb_handle_control_transfer+0x7a>
   28794:	e7b0      	b.n	286f8 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   28796:	2880      	cmp	r0, #128	; 0x80
   28798:	d1b1      	bne.n	286fe <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   2879a:	4b04      	ldr	r3, [pc, #16]	; (287ac <usb_handle_control_transfer+0xd8>)
   2879c:	68da      	ldr	r2, [r3, #12]
   2879e:	2a00      	cmp	r2, #0
   287a0:	d1d5      	bne.n	2874e <usb_handle_control_transfer+0x7a>
   287a2:	7d1b      	ldrb	r3, [r3, #20]
   287a4:	2b00      	cmp	r3, #0
   287a6:	d1d2      	bne.n	2874e <usb_handle_control_transfer+0x7a>
   287a8:	e7a9      	b.n	286fe <usb_handle_control_transfer+0x2a>
   287aa:	bf00      	nop
   287ac:	200006fc 	.word	0x200006fc

000287b0 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   287b0:	4b05      	ldr	r3, [pc, #20]	; (287c8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   287b2:	4a06      	ldr	r2, [pc, #24]	; (287cc <usb_set_config+0x1c>)
   287b4:	629a      	str	r2, [r3, #40]	; 0x28
   287b6:	4a06      	ldr	r2, [pc, #24]	; (287d0 <usb_set_config+0x20>)
   287b8:	62da      	str	r2, [r3, #44]	; 0x2c
   287ba:	4a06      	ldr	r2, [pc, #24]	; (287d4 <usb_set_config+0x24>)
   287bc:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   287be:	4a06      	ldr	r2, [pc, #24]	; (287d8 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   287c0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   287c2:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   287c4:	2000      	movs	r0, #0
   287c6:	4770      	bx	lr
   287c8:	200006fc 	.word	0x200006fc
   287cc:	00028395 	.word	0x00028395
   287d0:	00028099 	.word	0x00028099
   287d4:	00028139 	.word	0x00028139
   287d8:	000280d9 	.word	0x000280d9

000287dc <usb_enable>:

int usb_enable(usb_dc_status_callback status_cb)
{
   287dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   287e0:	4604      	mov	r4, r0
	 * This should only be called once.
	 */
	LOG_DBG("lock usb_enable_lock mutex");
	k_mutex_lock(&usb_enable_lock, K_FOREVER);

	if (usb_dev.enabled == true) {
   287e2:	4d3b      	ldr	r5, [pc, #236]	; (288d0 <usb_enable+0xf4>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   287e4:	483b      	ldr	r0, [pc, #236]	; (288d4 <usb_enable+0xf8>)
   287e6:	f04f 32ff 	mov.w	r2, #4294967295
   287ea:	f04f 33ff 	mov.w	r3, #4294967295
   287ee:	f004 feb3 	bl	2d558 <z_impl_k_mutex_lock>
   287f2:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   287f6:	2e00      	cmp	r6, #0
   287f8:	d167      	bne.n	288ca <usb_enable+0xee>
	usb_dev.status_callback = cb;
   287fa:	4837      	ldr	r0, [pc, #220]	; (288d8 <usb_enable+0xfc>)
	ret = usb_vbus_set(true);
	if (ret < 0) {
		goto out;
	}

	usb_dev.user_status_callback = status_cb;
   287fc:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   287fe:	61e8      	str	r0, [r5, #28]
	usb_register_status_callback(forward_status_cb);
	usb_dc_set_status_callback(forward_status_cb);
   28800:	f001 ffc2 	bl	2a788 <usb_dc_set_status_callback>

	ret = usb_dc_attach();
   28804:	f001 fdb0 	bl	2a368 <usb_dc_attach>
	if (ret < 0) {
   28808:	1e04      	subs	r4, r0, #0
   2880a:	db42      	blt.n	28892 <usb_enable+0xb6>
		goto out;
	}

	ret = usb_transfer_init();
   2880c:	f000 fb1a 	bl	28e44 <usb_transfer_init>
	if (ret < 0) {
   28810:	1e04      	subs	r4, r0, #0
   28812:	db3e      	blt.n	28892 <usb_enable+0xb6>
		goto out;
	}

	/* Configure control EP */
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   28814:	2340      	movs	r3, #64	; 0x40
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;

	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
	ret = usb_dc_ep_configure(&ep0_cfg);
   28816:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   28818:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   2881c:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   28820:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   28824:	f001 fde4 	bl	2a3f0 <usb_dc_ep_configure>
	if (ret < 0) {
   28828:	1e04      	subs	r4, r0, #0
   2882a:	db32      	blt.n	28892 <usb_enable+0xb6>
		goto out;
	}

	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2882c:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   2882e:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   28830:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   28834:	f001 fddc 	bl	2a3f0 <usb_dc_ep_configure>
	if (ret < 0) {
   28838:	1e04      	subs	r4, r0, #0
   2883a:	db2a      	blt.n	28892 <usb_enable+0xb6>
		goto out;
	}

	/* Register endpoint 0 handlers*/
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   2883c:	4927      	ldr	r1, [pc, #156]	; (288dc <usb_enable+0x100>)
   2883e:	4630      	mov	r0, r6
   28840:	f001 ff8e 	bl	2a760 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   28844:	1e04      	subs	r4, r0, #0
   28846:	db24      	blt.n	28892 <usb_enable+0xb6>
		goto out;
	}

	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   28848:	4924      	ldr	r1, [pc, #144]	; (288dc <usb_enable+0x100>)
   2884a:	4638      	mov	r0, r7
   2884c:	f001 ff88 	bl	2a760 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   28850:	1e04      	subs	r4, r0, #0
   28852:	db1e      	blt.n	28892 <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28854:	4c22      	ldr	r4, [pc, #136]	; (288e0 <usb_enable+0x104>)
   28856:	f8df 808c 	ldr.w	r8, [pc, #140]	; 288e4 <usb_enable+0x108>
   2885a:	4544      	cmp	r4, r8
   2885c:	d320      	bcc.n	288a0 <usb_enable+0xc4>
	if (ret < 0) {
		goto out;
	}

	/* Enable control EP */
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   2885e:	2000      	movs	r0, #0
   28860:	f001 fe4e 	bl	2a500 <usb_dc_ep_enable>
	if (ret < 0) {
   28864:	1e04      	subs	r4, r0, #0
   28866:	db14      	blt.n	28892 <usb_enable+0xb6>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   28868:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4

	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   2886c:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   2886e:	f043 0301 	orr.w	r3, r3, #1
   28872:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   28876:	f001 fe43 	bl	2a500 <usb_dc_ep_enable>
	if (ret < 0) {
   2887a:	1e04      	subs	r4, r0, #0
   2887c:	db09      	blt.n	28892 <usb_enable+0xb6>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
   2887e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   28882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   28886:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4

	usb_dev.enabled = true;
   2888a:	2301      	movs	r3, #1
   2888c:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   28890:	2400      	movs	r4, #0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   28892:	4810      	ldr	r0, [pc, #64]	; (288d4 <usb_enable+0xf8>)
   28894:	f004 feda 	bl	2d64c <z_impl_k_mutex_unlock>
out:
	LOG_DBG("unlock usb_enable_lock mutex");
	k_mutex_unlock(&usb_enable_lock);
	return ret;
}
   28898:	4620      	mov	r0, r4
   2889a:	b002      	add	sp, #8
   2889c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   288a0:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   288a2:	2600      	movs	r6, #0
   288a4:	7f22      	ldrb	r2, [r4, #28]
   288a6:	b2f3      	uxtb	r3, r6
   288a8:	429a      	cmp	r2, r3
   288aa:	d801      	bhi.n	288b0 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   288ac:	3424      	adds	r4, #36	; 0x24
   288ae:	e7d4      	b.n	2885a <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   288b0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   288b4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   288b8:	7910      	ldrb	r0, [r2, #4]
   288ba:	f001 ff51 	bl	2a760 <usb_dc_ep_set_callback>
   288be:	3601      	adds	r6, #1
   288c0:	2800      	cmp	r0, #0
   288c2:	d0ef      	beq.n	288a4 <usb_enable+0xc8>
   288c4:	f04f 34ff 	mov.w	r4, #4294967295
   288c8:	e7e3      	b.n	28892 <usb_enable+0xb6>
		ret = -EALREADY;
   288ca:	f06f 0477 	mvn.w	r4, #119	; 0x77
   288ce:	e7e0      	b.n	28892 <usb_enable+0xb6>
   288d0:	200006fc 	.word	0x200006fc
   288d4:	200002c8 	.word	0x200002c8
   288d8:	00028215 	.word	0x00028215
   288dc:	000286d5 	.word	0x000286d5
   288e0:	20000390 	.word	0x20000390
   288e4:	200003b4 	.word	0x200003b4

000288e8 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
   288e8:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   288ea:	4b0a      	ldr	r3, [pc, #40]	; (28914 <usb_device_init+0x2c>)
   288ec:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   288f0:	b94c      	cbnz	r4, 28906 <usb_device_init+0x1e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   288f2:	f000 f855 	bl	289a0 <usb_get_device_descriptor>
	if (!device_descriptor) {
   288f6:	b148      	cbz	r0, 2890c <usb_device_init+0x24>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   288f8:	f7ff ff5a 	bl	287b0 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
   288fc:	4620      	mov	r0, r4
	}

	return 0;
}
   288fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return usb_enable(NULL);
   28902:	f7ff bf6b 	b.w	287dc <usb_enable>
		return -EALREADY;
   28906:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2890a:	bd10      	pop	{r4, pc}
		return -1;
   2890c:	f04f 30ff 	mov.w	r0, #4294967295
   28910:	e7fb      	b.n	2890a <usb_device_init+0x22>
   28912:	bf00      	nop
   28914:	200006fc 	.word	0x200006fc

00028918 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   28918:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2891a:	4b1f      	ldr	r3, [pc, #124]	; (28998 <usb_update_sn_string_descriptor+0x80>)
{
   2891c:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   2891e:	aa05      	add	r2, sp, #20
   28920:	f103 0510 	add.w	r5, r3, #16
   28924:	6818      	ldr	r0, [r3, #0]
   28926:	6859      	ldr	r1, [r3, #4]
   28928:	4614      	mov	r4, r2
   2892a:	c403      	stmia	r4!, {r0, r1}
   2892c:	3308      	adds	r3, #8
   2892e:	42ab      	cmp	r3, r5
   28930:	4622      	mov	r2, r4
   28932:	d1f7      	bne.n	28924 <usb_update_sn_string_descriptor+0xc>
   28934:	781b      	ldrb	r3, [r3, #0]
   28936:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   28938:	2210      	movs	r2, #16
   2893a:	2100      	movs	r1, #0
   2893c:	a801      	add	r0, sp, #4
   2893e:	f006 fd1a 	bl	2f376 <memset>
	memset(sn, 0, sizeof(sn));
   28942:	2212      	movs	r2, #18
   28944:	2100      	movs	r1, #0
   28946:	4815      	ldr	r0, [pc, #84]	; (2899c <usb_update_sn_string_descriptor+0x84>)
   28948:	f006 fd15 	bl	2f376 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   2894c:	2110      	movs	r1, #16
   2894e:	a801      	add	r0, sp, #4
   28950:	f006 fe6c 	bl	2f62c <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   28954:	2800      	cmp	r0, #0
   28956:	dd1b      	ble.n	28990 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   28958:	2808      	cmp	r0, #8
   2895a:	bfb8      	it	lt
   2895c:	2008      	movlt	r0, #8
   2895e:	3809      	subs	r0, #9
   28960:	ab01      	add	r3, sp, #4
   28962:	490e      	ldr	r1, [pc, #56]	; (2899c <usb_update_sn_string_descriptor+0x84>)
   28964:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   28966:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   28968:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2896c:	ac0a      	add	r4, sp, #40	; 0x28
   2896e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   28972:	f003 030f 	and.w	r3, r3, #15
   28976:	3328      	adds	r3, #40	; 0x28
   28978:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   2897a:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2897c:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   28980:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   28984:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   28986:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   28988:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   2898a:	f101 0102 	add.w	r1, r1, #2
   2898e:	d1eb      	bne.n	28968 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   28990:	4802      	ldr	r0, [pc, #8]	; (2899c <usb_update_sn_string_descriptor+0x84>)
   28992:	b00b      	add	sp, #44	; 0x2c
   28994:	bd30      	pop	{r4, r5, pc}
   28996:	bf00      	nop
   28998:	00030bde 	.word	0x00030bde
   2899c:	20001b94 	.word	0x20001b94

000289a0 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   289a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289a4:	4c64      	ldr	r4, [pc, #400]	; (28b38 <usb_get_device_descriptor+0x198>)
   289a6:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
   289a8:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   289aa:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   289ae:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
   289b0:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   289b2:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
   289b4:	7823      	ldrb	r3, [r4, #0]
   289b6:	b92b      	cbnz	r3, 289c4 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
   289b8:	4b60      	ldr	r3, [pc, #384]	; (28b3c <usb_get_device_descriptor+0x19c>)
   289ba:	3402      	adds	r4, #2
   289bc:	429c      	cmp	r4, r3
   289be:	d1f3      	bne.n	289a8 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   289c0:	485d      	ldr	r0, [pc, #372]	; (28b38 <usb_get_device_descriptor+0x198>)
   289c2:	e01c      	b.n	289fe <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
   289c4:	7863      	ldrb	r3, [r4, #1]
   289c6:	2b05      	cmp	r3, #5
   289c8:	d805      	bhi.n	289d6 <usb_get_device_descriptor+0x36>
   289ca:	e8df f003 	tbb	[pc, r3]
   289ce:	047b      	.short	0x047b
   289d0:	25077b03 	.word	0x25077b03
   289d4:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   289d6:	7823      	ldrb	r3, [r4, #0]
   289d8:	441c      	add	r4, r3
   289da:	e7eb      	b.n	289b4 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   289dc:	78e3      	ldrb	r3, [r4, #3]
   289de:	2b00      	cmp	r3, #0
   289e0:	d1f9      	bne.n	289d6 <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
   289e2:	78a3      	ldrb	r3, [r4, #2]
   289e4:	b173      	cbz	r3, 28a04 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
   289e6:	f109 0901 	add.w	r9, r9, #1
   289ea:	fa5f f989 	uxtb.w	r9, r9
			break;
   289ee:	e7f2      	b.n	289d6 <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
   289f0:	686a      	ldr	r2, [r5, #4]
   289f2:	4294      	cmp	r4, r2
   289f4:	d009      	beq.n	28a0a <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   289f6:	3524      	adds	r5, #36	; 0x24
   289f8:	429d      	cmp	r5, r3
   289fa:	d3f9      	bcc.n	289f0 <usb_get_device_descriptor+0x50>
		return NULL;
   289fc:	2000      	movs	r0, #0
}
   289fe:	b005      	add	sp, #20
   28a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28a04:	4d4e      	ldr	r5, [pc, #312]	; (28b40 <usb_get_device_descriptor+0x1a0>)
   28a06:	4b4f      	ldr	r3, [pc, #316]	; (28b44 <usb_get_device_descriptor+0x1a4>)
   28a08:	e7f6      	b.n	289f8 <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
   28a0a:	68ab      	ldr	r3, [r5, #8]
   28a0c:	2b00      	cmp	r3, #0
   28a0e:	d0ea      	beq.n	289e6 <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
   28a10:	4649      	mov	r1, r9
   28a12:	4620      	mov	r0, r4
   28a14:	4798      	blx	r3
   28a16:	e7e6      	b.n	289e6 <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
   28a18:	2d00      	cmp	r5, #0
   28a1a:	d0ef      	beq.n	289fc <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   28a1c:	2300      	movs	r3, #0
   28a1e:	2101      	movs	r1, #1
   28a20:	7f2a      	ldrb	r2, [r5, #28]
   28a22:	4293      	cmp	r3, r2
   28a24:	d2ea      	bcs.n	289fc <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   28a26:	6a2a      	ldr	r2, [r5, #32]
   28a28:	78a7      	ldrb	r7, [r4, #2]
   28a2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   28a2e:	7910      	ldrb	r0, [r2, #4]
   28a30:	4287      	cmp	r7, r0
   28a32:	d001      	beq.n	28a38 <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   28a34:	3301      	adds	r3, #1
   28a36:	e7f3      	b.n	28a20 <usb_get_device_descriptor+0x80>
   28a38:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   28a3a:	78e0      	ldrb	r0, [r4, #3]
   28a3c:	f000 0003 	and.w	r0, r0, #3
   28a40:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   28a44:	7920      	ldrb	r0, [r4, #4]
   28a46:	f894 c005 	ldrb.w	ip, [r4, #5]
   28a4a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   28a4e:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   28a52:	f994 0002 	ldrsb.w	r0, [r4, #2]
   28a56:	2800      	cmp	r0, #0
   28a58:	fa5f f887 	uxtb.w	r8, r7
   28a5c:	da27      	bge.n	28aae <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   28a5e:	f107 0010 	add.w	r0, r7, #16
   28a62:	fa01 f000 	lsl.w	r0, r1, r0
   28a66:	ea10 0f0b 	tst.w	r0, fp
   28a6a:	d127      	bne.n	28abc <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   28a6c:	f048 0080 	orr.w	r0, r8, #128	; 0x80
   28a70:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   28a74:	a802      	add	r0, sp, #8
   28a76:	e9cd 3200 	strd	r3, r2, [sp]
   28a7a:	f006 fcb1 	bl	2f3e0 <usb_dc_ep_check_cap>
   28a7e:	e9dd 3200 	ldrd	r3, r2, [sp]
   28a82:	2101      	movs	r1, #1
   28a84:	b9d0      	cbnz	r0, 28abc <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   28a86:	f89d 3008 	ldrb.w	r3, [sp, #8]
   28a8a:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   28a8c:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   28a90:	bf18      	it	ne
   28a92:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   28a96:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
   28a98:	bf18      	it	ne
   28a9a:	fa5f f888 	uxtbne.w	r8, r8
   28a9e:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
   28aa0:	bf0c      	ite	eq
   28aa2:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   28aa4:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
   28aa8:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
   28aac:	e793      	b.n	289d6 <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
   28aae:	fa01 f007 	lsl.w	r0, r1, r7
   28ab2:	ea10 0f0b 	tst.w	r0, fp
   28ab6:	d101      	bne.n	28abc <usb_get_device_descriptor+0x11c>
   28ab8:	4640      	mov	r0, r8
   28aba:	e7d9      	b.n	28a70 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   28abc:	3701      	adds	r7, #1
   28abe:	2f10      	cmp	r7, #16
   28ac0:	d1bb      	bne.n	28a3a <usb_get_device_descriptor+0x9a>
   28ac2:	e7b7      	b.n	28a34 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   28ac4:	2e03      	cmp	r6, #3
   28ac6:	d11d      	bne.n	28b04 <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   28ac8:	f7ff ff26 	bl	28918 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   28acc:	4607      	mov	r7, r0
   28ace:	b168      	cbz	r0, 28aec <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
   28ad0:	f006 fc36 	bl	2f340 <strlen>
	if (!runtime_sn_len) {
   28ad4:	4680      	mov	r8, r0
   28ad6:	b148      	cbz	r0, 28aec <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   28ad8:	481b      	ldr	r0, [pc, #108]	; (28b48 <usb_get_device_descriptor+0x1a8>)
   28ada:	f006 fc31 	bl	2f340 <strlen>
	if (runtime_sn_len != default_sn_len) {
   28ade:	4580      	cmp	r8, r0
   28ae0:	d104      	bne.n	28aec <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   28ae2:	4642      	mov	r2, r8
   28ae4:	4639      	mov	r1, r7
   28ae6:	1ca0      	adds	r0, r4, #2
   28ae8:	f006 fc3a 	bl	2f360 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   28aec:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   28aee:	f06f 0102 	mvn.w	r1, #2
   28af2:	18e2      	adds	r2, r4, r3
   28af4:	1b09      	subs	r1, r1, r4
   28af6:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   28afa:	42d1      	cmn	r1, r2
   28afc:	d513      	bpl.n	28b26 <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
   28afe:	3601      	adds	r6, #1
   28b00:	b2f6      	uxtb	r6, r6
			break;
   28b02:	e768      	b.n	289d6 <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
   28b04:	2e00      	cmp	r6, #0
   28b06:	d1f1      	bne.n	28aec <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
   28b08:	f1ba 0f00 	cmp.w	sl, #0
   28b0c:	f43f af76 	beq.w	289fc <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   28b10:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   28b14:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   28b18:	f3c3 2307 	ubfx	r3, r3, #8, #8
   28b1c:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   28b20:	f88a 9004 	strb.w	r9, [sl, #4]
   28b24:	e7eb      	b.n	28afe <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
   28b26:	f04f 0000 	mov.w	r0, #0
   28b2a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   28b2e:	f813 0901 	ldrb.w	r0, [r3], #-1
   28b32:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   28b36:	e7e0      	b.n	28afa <usb_get_device_descriptor+0x15a>
   28b38:	200002ec 	.word	0x200002ec
   28b3c:	2000038f 	.word	0x2000038f
   28b40:	20000390 	.word	0x20000390
   28b44:	200003b4 	.word	0x200003b4
   28b48:	00030bde 	.word	0x00030bde

00028b4c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   28b4c:	b510      	push	{r4, lr}
   28b4e:	4b09      	ldr	r3, [pc, #36]	; (28b74 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   28b50:	2100      	movs	r1, #0
   28b52:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   28b54:	781c      	ldrb	r4, [r3, #0]
   28b56:	4284      	cmp	r4, r0
   28b58:	d104      	bne.n	28b64 <usb_ep_get_transfer+0x18>
   28b5a:	685c      	ldr	r4, [r3, #4]
   28b5c:	b114      	cbz	r4, 28b64 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
   28b5e:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
   28b62:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   28b64:	3101      	adds	r1, #1
   28b66:	2904      	cmp	r1, #4
   28b68:	f103 0340 	add.w	r3, r3, #64	; 0x40
   28b6c:	d1f2      	bne.n	28b54 <usb_ep_get_transfer+0x8>
	return NULL;
   28b6e:	2000      	movs	r0, #0
   28b70:	e7f7      	b.n	28b62 <usb_ep_get_transfer+0x16>
   28b72:	bf00      	nop
   28b74:	200007c4 	.word	0x200007c4

00028b78 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   28b78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   28b7c:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
   28b80:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
   28b84:	3310      	adds	r3, #16
{
   28b86:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   28b88:	d110      	bne.n	28bac <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   28b8a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   28b8c:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
   28b90:	0799      	lsls	r1, r3, #30
   28b92:	d53c      	bpl.n	28c0e <usb_transfer_work+0x96>
		if (!trans->bsize) {
   28b94:	bb02      	cbnz	r2, 28bd8 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   28b96:	f013 0304 	ands.w	r3, r3, #4
   28b9a:	d104      	bne.n	28ba6 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   28b9c:	461a      	mov	r2, r3
   28b9e:	4619      	mov	r1, r3
   28ba0:	4630      	mov	r0, r6
   28ba2:	f006 facb 	bl	2f13c <usb_write>
			}
			trans->status = 0;
   28ba6:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   28ba8:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   28bac:	f854 3c28 	ldr.w	r3, [r4, #-40]
   28bb0:	3310      	adds	r3, #16
   28bb2:	d00e      	beq.n	28bd2 <usb_transfer_work+0x5a>
   28bb4:	f854 5c18 	ldr.w	r5, [r4, #-24]
   28bb8:	b15d      	cbz	r5, 28bd2 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   28bba:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
   28bbe:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
   28bc2:	f007 f9c3 	bl	2ff4c <k_is_in_isr>
   28bc6:	2800      	cmp	r0, #0
   28bc8:	d04c      	beq.n	28c64 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28bca:	482c      	ldr	r0, [pc, #176]	; (28c7c <usb_transfer_work+0x104>)
   28bcc:	4621      	mov	r1, r4
   28bce:	f007 fab1 	bl	30134 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
   28bd2:	b002      	add	sp, #8
   28bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   28bd8:	f850 1c24 	ldr.w	r1, [r0, #-36]
   28bdc:	ab01      	add	r3, sp, #4
   28bde:	4630      	mov	r0, r6
   28be0:	f006 faac 	bl	2f13c <usb_write>
		if (ret) {
   28be4:	b110      	cbz	r0, 28bec <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   28be6:	f06f 0315 	mvn.w	r3, #21
   28bea:	e7dd      	b.n	28ba8 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   28bec:	9a01      	ldr	r2, [sp, #4]
   28bee:	f854 3c24 	ldr.w	r3, [r4, #-36]
   28bf2:	4413      	add	r3, r2
   28bf4:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
   28bf8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   28bfc:	1a9b      	subs	r3, r3, r2
   28bfe:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
   28c02:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   28c06:	4413      	add	r3, r2
   28c08:	f844 3c1c 	str.w	r3, [r4, #-28]
   28c0c:	e7ce      	b.n	28bac <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   28c0e:	f850 1c24 	ldr.w	r1, [r0, #-36]
   28c12:	ab01      	add	r3, sp, #4
   28c14:	4630      	mov	r0, r6
   28c16:	f001 fd19 	bl	2a64c <usb_dc_ep_read_wait>
		if (ret) {
   28c1a:	2800      	cmp	r0, #0
   28c1c:	d1e3      	bne.n	28be6 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   28c1e:	9d01      	ldr	r5, [sp, #4]
   28c20:	f854 3c24 	ldr.w	r3, [r4, #-36]
   28c24:	442b      	add	r3, r5
   28c26:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
   28c2a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   28c2e:	1b5b      	subs	r3, r3, r5
   28c30:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
   28c34:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   28c38:	442b      	add	r3, r5
   28c3a:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   28c3e:	2d00      	cmp	r5, #0
   28c40:	d0b1      	beq.n	28ba6 <usb_transfer_work+0x2e>
   28c42:	4630      	mov	r0, r6
   28c44:	f001 fda6 	bl	2a794 <usb_dc_ep_mps>
   28c48:	fbb5 f3f0 	udiv	r3, r5, r0
   28c4c:	fb03 5510 	mls	r5, r3, r0, r5
   28c50:	2d00      	cmp	r5, #0
   28c52:	d1a8      	bne.n	28ba6 <usb_transfer_work+0x2e>
   28c54:	f854 3c20 	ldr.w	r3, [r4, #-32]
   28c58:	2b00      	cmp	r3, #0
   28c5a:	d0a4      	beq.n	28ba6 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   28c5c:	4630      	mov	r0, r6
   28c5e:	f001 fd3d 	bl	2a6dc <usb_dc_ep_read_continue>
   28c62:	e7a3      	b.n	28bac <usb_transfer_work+0x34>
		trans->cb = NULL;
   28c64:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   28c68:	f1a4 0010 	sub.w	r0, r4, #16
   28c6c:	f004 fd5e 	bl	2d72c <z_impl_k_sem_give>
		cb(ep, tsize, priv);
   28c70:	4642      	mov	r2, r8
   28c72:	4639      	mov	r1, r7
   28c74:	4630      	mov	r0, r6
   28c76:	47a8      	blx	r5
   28c78:	e7ab      	b.n	28bd2 <usb_transfer_work+0x5a>
   28c7a:	bf00      	nop
   28c7c:	200003b8 	.word	0x200003b8

00028c80 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   28c80:	1e4b      	subs	r3, r1, #1
   28c82:	2b01      	cmp	r3, #1
{
   28c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28c86:	4606      	mov	r6, r0
   28c88:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   28c8a:	d80f      	bhi.n	28cac <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   28c8c:	f7ff ff5e 	bl	28b4c <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
   28c90:	4604      	mov	r4, r0
   28c92:	b968      	cbnz	r0, 28cb0 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
   28c94:	2d01      	cmp	r5, #1
   28c96:	d109      	bne.n	28cac <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   28c98:	ab01      	add	r3, sp, #4
   28c9a:	2201      	movs	r2, #1
   28c9c:	f10d 0103 	add.w	r1, sp, #3
   28ca0:	4630      	mov	r0, r6
   28ca2:	f001 fcd3 	bl	2a64c <usb_dc_ep_read_wait>
			} while (bytes);
   28ca6:	9b01      	ldr	r3, [sp, #4]
   28ca8:	2b00      	cmp	r3, #0
   28caa:	d1f5      	bne.n	28c98 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   28cac:	b002      	add	sp, #8
   28cae:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   28cb0:	f007 f94c 	bl	2ff4c <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28cb4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   28cb8:	b108      	cbz	r0, 28cbe <usb_transfer_ep_callback+0x3e>
   28cba:	2d01      	cmp	r5, #1
   28cbc:	d105      	bne.n	28cca <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
   28cbe:	4608      	mov	r0, r1
}
   28cc0:	b002      	add	sp, #8
   28cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
   28cc6:	f7ff bf57 	b.w	28b78 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28cca:	4803      	ldr	r0, [pc, #12]	; (28cd8 <usb_transfer_ep_callback+0x58>)
}
   28ccc:	b002      	add	sp, #8
   28cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28cd2:	f007 ba2f 	b.w	30134 <k_work_submit_to_queue>
   28cd6:	bf00      	nop
   28cd8:	200003b8 	.word	0x200003b8

00028cdc <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   28cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ce0:	4606      	mov	r6, r0
   28ce2:	9101      	str	r1, [sp, #4]
   28ce4:	4615      	mov	r5, r2
   28ce6:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   28ce8:	f006 fa70 	bl	2f1cc <usb_transfer_is_busy>
   28cec:	4604      	mov	r4, r0
   28cee:	2800      	cmp	r0, #0
   28cf0:	d15c      	bne.n	28dac <usb_transfer+0xd0>
	__asm__ volatile(
   28cf2:	f04f 0320 	mov.w	r3, #32
   28cf6:	f3ef 8a11 	mrs	sl, BASEPRI
   28cfa:	f383 8812 	msr	BASEPRI_MAX, r3
   28cfe:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   28d02:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 28db4 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
   28d06:	2200      	movs	r2, #0
   28d08:	2300      	movs	r3, #0
   28d0a:	4658      	mov	r0, fp
   28d0c:	f004 fd2e 	bl	2d76c <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   28d10:	b970      	cbnz	r0, 28d30 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   28d12:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 28db8 <usb_transfer+0xdc>
   28d16:	01a7      	lsls	r7, r4, #6
   28d18:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   28d1c:	6863      	ldr	r3, [r4, #4]
   28d1e:	f113 0f10 	cmn.w	r3, #16
   28d22:	d114      	bne.n	28d4e <usb_transfer+0x72>
   28d24:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
   28d26:	4658      	mov	r0, fp
   28d28:	f004 fd00 	bl	2d72c <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
   28d2c:	9b01      	ldr	r3, [sp, #4]
   28d2e:	e006      	b.n	28d3e <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   28d30:	3401      	adds	r4, #1
   28d32:	2c04      	cmp	r4, #4
   28d34:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   28d38:	d1e5      	bne.n	28d06 <usb_transfer+0x2a>
		ret = -ENOMEM;
   28d3a:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
   28d3e:	f38a 8811 	msr	BASEPRI, sl
   28d42:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   28d46:	4618      	mov	r0, r3
   28d48:	b003      	add	sp, #12
   28d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
   28d4e:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
   28d50:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
   28d52:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
   28d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   28d58:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
   28d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28d5c:	61a3      	str	r3, [r4, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   28d5e:	4630      	mov	r0, r6
	trans->status = -EBUSY;
   28d60:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
   28d64:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
   28d68:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
   28d6c:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   28d6e:	f001 fd11 	bl	2a794 <usb_dc_ep_mps>
   28d72:	b158      	cbz	r0, 28d8c <usb_transfer+0xb0>
   28d74:	4630      	mov	r0, r6
   28d76:	f001 fd0d 	bl	2a794 <usb_dc_ep_mps>
   28d7a:	fbb5 f3f0 	udiv	r3, r5, r0
   28d7e:	fb03 5510 	mls	r5, r3, r0, r5
   28d82:	b11d      	cbz	r5, 28d8c <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
   28d84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   28d86:	f043 0304 	orr.w	r3, r3, #4
   28d8a:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
   28d8c:	f018 0f02 	tst.w	r8, #2
   28d90:	d007      	beq.n	28da2 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28d92:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   28d96:	4809      	ldr	r0, [pc, #36]	; (28dbc <usb_transfer+0xe0>)
   28d98:	4449      	add	r1, r9
   28d9a:	f007 f9cb 	bl	30134 <k_work_submit_to_queue>
	int key, ret = 0;
   28d9e:	2300      	movs	r3, #0
   28da0:	e7cd      	b.n	28d3e <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
   28da2:	4630      	mov	r0, r6
   28da4:	f001 fc9a 	bl	2a6dc <usb_dc_ep_read_continue>
   28da8:	4603      	mov	r3, r0
   28daa:	e7c8      	b.n	28d3e <usb_transfer+0x62>
		return -EBUSY;
   28dac:	f06f 030f 	mvn.w	r3, #15
   28db0:	e7c9      	b.n	28d46 <usb_transfer+0x6a>
   28db2:	bf00      	nop
   28db4:	200007e0 	.word	0x200007e0
   28db8:	200007c4 	.word	0x200007c4
   28dbc:	200003b8 	.word	0x200003b8

00028dc0 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   28dc0:	b510      	push	{r4, lr}
	__asm__ volatile(
   28dc2:	f04f 0320 	mov.w	r3, #32
   28dc6:	f3ef 8411 	mrs	r4, BASEPRI
   28dca:	f383 8812 	msr	BASEPRI_MAX, r3
   28dce:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   28dd2:	f7ff febb 	bl	28b4c <usb_ep_get_transfer>
	if (!trans) {
   28dd6:	b150      	cbz	r0, 28dee <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   28dd8:	6843      	ldr	r3, [r0, #4]
   28dda:	3310      	adds	r3, #16
   28ddc:	d107      	bne.n	28dee <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   28dde:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   28de2:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28de4:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   28de8:	4803      	ldr	r0, [pc, #12]	; (28df8 <usb_cancel_transfer+0x38>)
   28dea:	f007 f9a3 	bl	30134 <k_work_submit_to_queue>
	__asm__ volatile(
   28dee:	f384 8811 	msr	BASEPRI, r4
   28df2:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   28df6:	bd10      	pop	{r4, pc}
   28df8:	200003b8 	.word	0x200003b8

00028dfc <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   28dfc:	b570      	push	{r4, r5, r6, lr}
   28dfe:	4c0f      	ldr	r4, [pc, #60]	; (28e3c <usb_cancel_transfers+0x40>)
   28e00:	2504      	movs	r5, #4
	__asm__ volatile(
   28e02:	f04f 0320 	mov.w	r3, #32
   28e06:	f3ef 8611 	mrs	r6, BASEPRI
   28e0a:	f383 8812 	msr	BASEPRI_MAX, r3
   28e0e:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   28e12:	6863      	ldr	r3, [r4, #4]
   28e14:	3310      	adds	r3, #16
   28e16:	d107      	bne.n	28e28 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
   28e18:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28e1c:	4808      	ldr	r0, [pc, #32]	; (28e40 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
   28e1e:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28e20:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   28e24:	f007 f986 	bl	30134 <k_work_submit_to_queue>
	__asm__ volatile(
   28e28:	f386 8811 	msr	BASEPRI, r6
   28e2c:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   28e30:	3d01      	subs	r5, #1
   28e32:	f104 0440 	add.w	r4, r4, #64	; 0x40
   28e36:	d1e4      	bne.n	28e02 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   28e38:	bd70      	pop	{r4, r5, r6, pc}
   28e3a:	bf00      	nop
   28e3c:	200007c4 	.word	0x200007c4
   28e40:	200003b8 	.word	0x200003b8

00028e44 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   28e44:	b570      	push	{r4, r5, r6, lr}
   28e46:	4c0a      	ldr	r4, [pc, #40]	; (28e70 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   28e48:	4e0a      	ldr	r6, [pc, #40]	; (28e74 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   28e4a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   28e4c:	4631      	mov	r1, r6
   28e4e:	4620      	mov	r0, r4
   28e50:	f007 f953 	bl	300fa <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   28e54:	2201      	movs	r2, #1
   28e56:	f1a4 0010 	sub.w	r0, r4, #16
   28e5a:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   28e5c:	3501      	adds	r5, #1
   28e5e:	f007 f90f 	bl	30080 <z_impl_k_sem_init>
   28e62:	2d04      	cmp	r5, #4
   28e64:	f104 0440 	add.w	r4, r4, #64	; 0x40
   28e68:	d1f0      	bne.n	28e4c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   28e6a:	2000      	movs	r0, #0
   28e6c:	bd70      	pop	{r4, r5, r6, pc}
   28e6e:	bf00      	nop
   28e70:	200007f0 	.word	0x200007f0
   28e74:	00028b79 	.word	0x00028b79

00028e78 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   28e78:	b570      	push	{r4, r5, r6, lr}
   28e7a:	4604      	mov	r4, r0
   28e7c:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   28e7e:	7901      	ldrb	r1, [r0, #4]
   28e80:	4812      	ldr	r0, [pc, #72]	; (28ecc <cdc_acm_class_handle_req+0x54>)
{
   28e82:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   28e84:	f006 f97e 	bl	2f184 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   28e88:	b1e8      	cbz	r0, 28ec6 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   28e8a:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   28e8e:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
   28e90:	2a00      	cmp	r2, #0
   28e92:	db11      	blt.n	28eb8 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
   28e94:	2b20      	cmp	r3, #32
   28e96:	d004      	beq.n	28ea2 <cdc_acm_class_handle_req+0x2a>
   28e98:	2b22      	cmp	r3, #34	; 0x22
   28e9a:	d009      	beq.n	28eb0 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
   28e9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28ea0:	e005      	b.n	28eae <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
   28ea2:	6829      	ldr	r1, [r5, #0]
   28ea4:	2207      	movs	r2, #7
   28ea6:	3810      	subs	r0, #16
   28ea8:	f006 fa5a 	bl	2f360 <memcpy>
			return 0;
   28eac:	2000      	movs	r0, #0
}
   28eae:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
   28eb0:	8863      	ldrh	r3, [r4, #2]
   28eb2:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
   28eb6:	e7f9      	b.n	28eac <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
   28eb8:	2b21      	cmp	r3, #33	; 0x21
   28eba:	d1ef      	bne.n	28e9c <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
   28ebc:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
   28ebe:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
   28ec0:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
   28ec2:	6033      	str	r3, [r6, #0]
			return 0;
   28ec4:	e7f2      	b.n	28eac <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
   28ec6:	f06f 0012 	mvn.w	r0, #18
   28eca:	e7f0      	b.n	28eae <cdc_acm_class_handle_req+0x36>
   28ecc:	200008c4 	.word	0x200008c4

00028ed0 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   28ed0:	b508      	push	{r3, lr}
   28ed2:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   28ed4:	4803      	ldr	r0, [pc, #12]	; (28ee4 <cdc_acm_int_in+0x14>)
   28ed6:	f006 f963 	bl	2f1a0 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   28eda:	b110      	cbz	r0, 28ee2 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
   28edc:	2301      	movs	r3, #1
   28ede:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
   28ee2:	bd08      	pop	{r3, pc}
   28ee4:	200008c4 	.word	0x200008c4

00028ee8 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28ee8:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   28eea:	2301      	movs	r3, #1
   28eec:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
   28ef0:	680b      	ldr	r3, [r1, #0]
   28ef2:	b133      	cbz	r3, 28f02 <cdc_acm_irq_rx_enable+0x1a>
   28ef4:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
   28ef8:	b11b      	cbz	r3, 28f02 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   28efa:	4802      	ldr	r0, [pc, #8]	; (28f04 <cdc_acm_irq_rx_enable+0x1c>)
   28efc:	3108      	adds	r1, #8
   28efe:	f007 b919 	b.w	30134 <k_work_submit_to_queue>
	}
}
   28f02:	4770      	bx	lr
   28f04:	200003b8 	.word	0x200003b8

00028f08 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28f08:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   28f0a:	2301      	movs	r3, #1
   28f0c:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
   28f10:	680b      	ldr	r3, [r1, #0]
   28f12:	b133      	cbz	r3, 28f22 <cdc_acm_irq_tx_enable+0x1a>
   28f14:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   28f18:	b11b      	cbz	r3, 28f22 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   28f1a:	4802      	ldr	r0, [pc, #8]	; (28f24 <cdc_acm_irq_tx_enable+0x1c>)
   28f1c:	3108      	adds	r1, #8
   28f1e:	f007 b909 	b.w	30134 <k_work_submit_to_queue>
}
   28f22:	4770      	bx	lr
   28f24:	200003b8 	.word	0x200003b8

00028f28 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
   28f28:	4a0d      	ldr	r2, [pc, #52]	; (28f60 <cdc_acm_reset_port+0x38>)
{
   28f2a:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
   28f2c:	2100      	movs	r1, #0
   28f2e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
   28f32:	6810      	ldr	r0, [r2, #0]
   28f34:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
   28f38:	8890      	ldrh	r0, [r2, #4]
   28f3a:	7992      	ldrb	r2, [r2, #6]
   28f3c:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
   28f40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
   28f44:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
   28f48:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
   28f4c:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
   28f50:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
   28f54:	2240      	movs	r2, #64	; 0x40
   28f56:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   28f5a:	f006 ba0c 	b.w	2f376 <memset>
   28f5e:	bf00      	nop
   28f60:	00030840 	.word	0x00030840

00028f64 <cdc_acm_fifo_fill>:
{
   28f64:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28f66:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   28f68:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
   28f6c:	b188      	cbz	r0, 28f92 <cdc_acm_fifo_fill+0x2e>
   28f6e:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   28f72:	b97b      	cbnz	r3, 28f94 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
   28f74:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   28f78:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   28f7c:	f006 f85b 	bl	2f036 <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   28f80:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   28f82:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   28f84:	2300      	movs	r3, #0
   28f86:	4804      	ldr	r0, [pc, #16]	; (28f98 <cdc_acm_fifo_fill+0x34>)
   28f88:	f105 0118 	add.w	r1, r5, #24
   28f8c:	f004 fd44 	bl	2da18 <k_work_schedule_for_queue>
	return wrote;
   28f90:	4620      	mov	r0, r4
}
   28f92:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   28f94:	2000      	movs	r0, #0
   28f96:	e7fc      	b.n	28f92 <cdc_acm_fifo_fill+0x2e>
   28f98:	200003b8 	.word	0x200003b8

00028f9c <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   28f9c:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28f9e:	6904      	ldr	r4, [r0, #16]
{
   28fa0:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
   28fa4:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   28fa8:	b1a3      	cbz	r3, 28fd4 <cdc_acm_poll_out+0x38>
   28faa:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   28fae:	b98b      	cbnz	r3, 28fd4 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   28fb0:	f10d 0107 	add.w	r1, sp, #7
   28fb4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
   28fb8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   28fbc:	2201      	movs	r2, #1
   28fbe:	f006 f83a 	bl	2f036 <ring_buf_put>
   28fc2:	4601      	mov	r1, r0
   28fc4:	b140      	cbz	r0, 28fd8 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
   28fc6:	480d      	ldr	r0, [pc, #52]	; (28ffc <cdc_acm_poll_out+0x60>)
   28fc8:	2221      	movs	r2, #33	; 0x21
   28fca:	2300      	movs	r3, #0
   28fcc:	f104 0118 	add.w	r1, r4, #24
   28fd0:	f004 fd22 	bl	2da18 <k_work_schedule_for_queue>
}
   28fd4:	b002      	add	sp, #8
   28fd6:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   28fd8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   28fdc:	2201      	movs	r2, #1
   28fde:	f006 f87e 	bl	2f0de <ring_buf_get>
   28fe2:	2800      	cmp	r0, #0
   28fe4:	d0f6      	beq.n	28fd4 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   28fe6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   28fea:	2201      	movs	r2, #1
   28fec:	f10d 0107 	add.w	r1, sp, #7
   28ff0:	f006 f821 	bl	2f036 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   28ff4:	2800      	cmp	r0, #0
   28ff6:	d1e6      	bne.n	28fc6 <cdc_acm_poll_out+0x2a>
   28ff8:	e7ec      	b.n	28fd4 <cdc_acm_poll_out+0x38>
   28ffa:	bf00      	nop
   28ffc:	200003b8 	.word	0x200003b8

00029000 <tx_work_handler>:
{
   29000:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
   29002:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   29006:	685b      	ldr	r3, [r3, #4]
   29008:	6a1b      	ldr	r3, [r3, #32]
   2900a:	7d1f      	ldrb	r7, [r3, #20]
{
   2900c:	b085      	sub	sp, #20
   2900e:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
   29010:	4638      	mov	r0, r7
   29012:	f006 f8db 	bl	2f1cc <usb_transfer_is_busy>
   29016:	4606      	mov	r6, r0
   29018:	b9e0      	cbnz	r0, 29054 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   2901a:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   2901c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29020:	a903      	add	r1, sp, #12
   29022:	f006 f827 	bl	2f074 <ring_buf_get_claim>
	if (!len) {
   29026:	4604      	mov	r4, r0
   29028:	b1a0      	cbz	r0, 29054 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   2902a:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
   2902c:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
   29030:	bf08      	it	eq
   29032:	f100 34ff 	addeq.w	r4, r0, #4294967295
	dev_data->tx_ready = false;
   29036:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   2903a:	9301      	str	r3, [sp, #4]
   2903c:	4b06      	ldr	r3, [pc, #24]	; (29058 <tx_work_handler+0x58>)
   2903e:	9903      	ldr	r1, [sp, #12]
   29040:	9300      	str	r3, [sp, #0]
   29042:	4622      	mov	r2, r4
   29044:	2302      	movs	r3, #2
   29046:	4638      	mov	r0, r7
   29048:	f7ff fe48 	bl	28cdc <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   2904c:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   2904e:	4621      	mov	r1, r4
   29050:	f006 f830 	bl	2f0b4 <ring_buf_get_finish>
}
   29054:	b005      	add	sp, #20
   29056:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29058:	0002905d 	.word	0x0002905d

0002905c <cdc_acm_write_cb>:
{
   2905c:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
   2905e:	2301      	movs	r3, #1
   29060:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
   29064:	6813      	ldr	r3, [r2, #0]
{
   29066:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
   29068:	b13b      	cbz	r3, 2907a <cdc_acm_write_cb+0x1e>
   2906a:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
   2906e:	b123      	cbz	r3, 2907a <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   29070:	480a      	ldr	r0, [pc, #40]	; (2909c <cdc_acm_write_cb+0x40>)
   29072:	f102 0108 	add.w	r1, r2, #8
   29076:	f007 f85d 	bl	30134 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   2907a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2907e:	689a      	ldr	r2, [r3, #8]
   29080:	691b      	ldr	r3, [r3, #16]
   29082:	429a      	cmp	r2, r3
   29084:	d008      	beq.n	29098 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   29086:	f104 0118 	add.w	r1, r4, #24
   2908a:	4804      	ldr	r0, [pc, #16]	; (2909c <cdc_acm_write_cb+0x40>)
}
   2908c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   29090:	2200      	movs	r2, #0
   29092:	2300      	movs	r3, #0
   29094:	f004 bcc0 	b.w	2da18 <k_work_schedule_for_queue>
}
   29098:	bd10      	pop	{r4, pc}
   2909a:	bf00      	nop
   2909c:	200003b8 	.word	0x200003b8

000290a0 <cdc_acm_init>:
{
   290a0:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   290a2:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
   290a4:	2300      	movs	r3, #0
   290a6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   290aa:	4b0c      	ldr	r3, [pc, #48]	; (290dc <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
   290ac:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
   290b0:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   290b2:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   290b6:	b969      	cbnz	r1, 290d4 <cdc_acm_init+0x34>
	list->head = node;
   290b8:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   290bc:	f104 0008 	add.w	r0, r4, #8
   290c0:	4907      	ldr	r1, [pc, #28]	; (290e0 <cdc_acm_init+0x40>)
   290c2:	f007 f81a 	bl	300fa <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
   290c6:	f104 0018 	add.w	r0, r4, #24
   290ca:	4906      	ldr	r1, [pc, #24]	; (290e4 <cdc_acm_init+0x44>)
   290cc:	f007 f843 	bl	30156 <k_work_init_delayable>
}
   290d0:	2000      	movs	r0, #0
   290d2:	bd10      	pop	{r4, pc}
	parent->next = child;
   290d4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   290d6:	605a      	str	r2, [r3, #4]
}
   290d8:	e7f0      	b.n	290bc <cdc_acm_init+0x1c>
   290da:	bf00      	nop
   290dc:	200008c4 	.word	0x200008c4
   290e0:	0002f1f7 	.word	0x0002f1f7
   290e4:	00029001 	.word	0x00029001

000290e8 <cdc_acm_read_cb>:
{
   290e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   290ea:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   290ec:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
   290f0:	1e0a      	subs	r2, r1, #0
{
   290f2:	4605      	mov	r5, r0
	if (size <= 0) {
   290f4:	dd1f      	ble.n	29136 <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   290f6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   290fa:	4631      	mov	r1, r6
   290fc:	f005 ff9b 	bl	2f036 <ring_buf_put>
	dev_data->rx_ready = true;
   29100:	2301      	movs	r3, #1
   29102:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
   29106:	6823      	ldr	r3, [r4, #0]
   29108:	b13b      	cbz	r3, 2911a <cdc_acm_read_cb+0x32>
   2910a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   2910e:	b123      	cbz	r3, 2911a <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   29110:	480e      	ldr	r0, [pc, #56]	; (2914c <cdc_acm_read_cb+0x64>)
   29112:	f104 0108 	add.w	r1, r4, #8
   29116:	f007 f80d 	bl	30134 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
   2911a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   2911e:	684b      	ldr	r3, [r1, #4]
   29120:	694a      	ldr	r2, [r1, #20]
   29122:	1a9a      	subs	r2, r3, r2
   29124:	69cb      	ldr	r3, [r1, #28]
   29126:	1a9b      	subs	r3, r3, r2
   29128:	2b3f      	cmp	r3, #63	; 0x3f
   2912a:	d804      	bhi.n	29136 <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
   2912c:	2301      	movs	r3, #1
   2912e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   29132:	b002      	add	sp, #8
   29134:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   29136:	4b06      	ldr	r3, [pc, #24]	; (29150 <cdc_acm_read_cb+0x68>)
   29138:	9300      	str	r3, [sp, #0]
   2913a:	9401      	str	r4, [sp, #4]
   2913c:	2301      	movs	r3, #1
   2913e:	2240      	movs	r2, #64	; 0x40
   29140:	4631      	mov	r1, r6
   29142:	4628      	mov	r0, r5
   29144:	f7ff fdca 	bl	28cdc <usb_transfer>
   29148:	e7f3      	b.n	29132 <cdc_acm_read_cb+0x4a>
   2914a:	bf00      	nop
   2914c:	200003b8 	.word	0x200003b8
   29150:	000290e9 	.word	0x000290e9

00029154 <cdc_acm_dev_status_cb>:
{
   29154:	b538      	push	{r3, r4, r5, lr}
   29156:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   29158:	4601      	mov	r1, r0
   2915a:	481e      	ldr	r0, [pc, #120]	; (291d4 <cdc_acm_dev_status_cb+0x80>)
   2915c:	f006 f806 	bl	2f16c <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   29160:	4604      	mov	r4, r0
   29162:	b380      	cbz	r0, 291c6 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
   29164:	4602      	mov	r2, r0
	switch (status) {
   29166:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
   29168:	f852 39a4 	ldr.w	r3, [r2], #-164
   2916c:	685b      	ldr	r3, [r3, #4]
	switch (status) {
   2916e:	2905      	cmp	r1, #5
   29170:	d829      	bhi.n	291c6 <cdc_acm_dev_status_cb+0x72>
   29172:	e8df f001 	tbb	[pc, r1]
   29176:	2820      	.short	0x2820
   29178:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
   2917c:	f814 1c06 	ldrb.w	r1, [r4, #-6]
   29180:	b931      	cbnz	r1, 29190 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   29182:	6a1b      	ldr	r3, [r3, #32]
   29184:	7b18      	ldrb	r0, [r3, #12]
   29186:	f7ff ffaf 	bl	290e8 <cdc_acm_read_cb>
			dev_data->configured = true;
   2918a:	2301      	movs	r3, #1
   2918c:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
   29190:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
   29194:	b9bb      	cbnz	r3, 291c6 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
   29196:	2301      	movs	r3, #1
   29198:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   2919c:	f854 3ca4 	ldr.w	r3, [r4, #-164]
   291a0:	b18b      	cbz	r3, 291c6 <cdc_acm_dev_status_cb+0x72>
   291a2:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
   291a6:	b173      	cbz	r3, 291c6 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   291a8:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
   291ac:	480a      	ldr	r0, [pc, #40]	; (291d8 <cdc_acm_dev_status_cb+0x84>)
}
   291ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   291b2:	f006 bfbf 	b.w	30134 <k_work_submit_to_queue>
}
   291b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
   291ba:	4610      	mov	r0, r2
   291bc:	f7ff beb4 	b.w	28f28 <cdc_acm_reset_port>
		dev_data->suspended = true;
   291c0:	2301      	movs	r3, #1
			dev_data->suspended = false;
   291c2:	f804 3c05 	strb.w	r3, [r4, #-5]
}
   291c6:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
   291c8:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   291cc:	2b00      	cmp	r3, #0
   291ce:	d0fa      	beq.n	291c6 <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
   291d0:	2300      	movs	r3, #0
   291d2:	e7f6      	b.n	291c2 <cdc_acm_dev_status_cb+0x6e>
   291d4:	200008c4 	.word	0x200008c4
   291d8:	200003b8 	.word	0x200003b8

000291dc <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
   291dc:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
   291de:	4d09      	ldr	r5, [pc, #36]	; (29204 <z_usb_work_q_init+0x28>)
   291e0:	4909      	ldr	r1, [pc, #36]	; (29208 <z_usb_work_q_init+0x2c>)
   291e2:	2400      	movs	r4, #0
   291e4:	9400      	str	r4, [sp, #0]
   291e6:	f04f 33ff 	mov.w	r3, #4294967295
   291ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   291ee:	4628      	mov	r0, r5
   291f0:	f004 fbda 	bl	2d9a8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   291f4:	4905      	ldr	r1, [pc, #20]	; (2920c <z_usb_work_q_init+0x30>)
   291f6:	4628      	mov	r0, r5
   291f8:	f006 feae 	bl	2ff58 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   291fc:	4620      	mov	r0, r4
   291fe:	b003      	add	sp, #12
   29200:	bd30      	pop	{r4, r5, pc}
   29202:	bf00      	nop
   29204:	200003b8 	.word	0x200003b8
   29208:	20001c00 	.word	0x20001c00
   2920c:	00030c24 	.word	0x00030c24

00029210 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   29210:	4801      	ldr	r0, [pc, #4]	; (29218 <nrf_cc3xx_platform_abort_init+0x8>)
   29212:	f005 b98d 	b.w	2e530 <nrf_cc3xx_platform_set_abort>
   29216:	bf00      	nop
   29218:	000308bc 	.word	0x000308bc

0002921c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   2921c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   2921e:	4604      	mov	r4, r0
   29220:	b918      	cbnz	r0, 2922a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   29222:	4b0f      	ldr	r3, [pc, #60]	; (29260 <mutex_free_platform+0x44>)
   29224:	480f      	ldr	r0, [pc, #60]	; (29264 <mutex_free_platform+0x48>)
   29226:	685b      	ldr	r3, [r3, #4]
   29228:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   2922a:	6861      	ldr	r1, [r4, #4]
   2922c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   29230:	d00f      	beq.n	29252 <mutex_free_platform+0x36>
   29232:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   29236:	d00c      	beq.n	29252 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   29238:	4d0b      	ldr	r5, [pc, #44]	; (29268 <mutex_free_platform+0x4c>)
   2923a:	42a9      	cmp	r1, r5
   2923c:	d009      	beq.n	29252 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   2923e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   29242:	d007      	beq.n	29254 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   29244:	4809      	ldr	r0, [pc, #36]	; (2926c <mutex_free_platform+0x50>)
   29246:	4621      	mov	r1, r4
   29248:	f006 fe57 	bl	2fefa <k_mem_slab_free>
        mutex->mutex = NULL;
   2924c:	2300      	movs	r3, #0
   2924e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   29250:	6065      	str	r5, [r4, #4]
}
   29252:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   29254:	6820      	ldr	r0, [r4, #0]
   29256:	2214      	movs	r2, #20
   29258:	f006 f88d 	bl	2f376 <memset>
   2925c:	e7f8      	b.n	29250 <mutex_free_platform+0x34>
   2925e:	bf00      	nop
   29260:	200001f0 	.word	0x200001f0
   29264:	00030c2d 	.word	0x00030c2d
   29268:	a95c5f2c 	.word	0xa95c5f2c
   2926c:	20000dcc 	.word	0x20000dcc

00029270 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   29270:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   29272:	b320      	cbz	r0, 292be <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   29274:	6843      	ldr	r3, [r0, #4]
   29276:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   2927a:	d110      	bne.n	2929e <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2927c:	2201      	movs	r2, #1
   2927e:	6803      	ldr	r3, [r0, #0]
   29280:	f3bf 8f5b 	dmb	ish
   29284:	e853 1f00 	ldrex	r1, [r3]
   29288:	2900      	cmp	r1, #0
   2928a:	d103      	bne.n	29294 <mutex_lock_platform+0x24>
   2928c:	e843 2000 	strex	r0, r2, [r3]
   29290:	2800      	cmp	r0, #0
   29292:	d1f7      	bne.n	29284 <mutex_lock_platform+0x14>
   29294:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   29298:	d10d      	bne.n	292b6 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   2929a:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   2929c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   2929e:	4a09      	ldr	r2, [pc, #36]	; (292c4 <mutex_lock_platform+0x54>)
   292a0:	4293      	cmp	r3, r2
   292a2:	d00a      	beq.n	292ba <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   292a4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   292a6:	f04f 32ff 	mov.w	r2, #4294967295
   292aa:	f04f 33ff 	mov.w	r3, #4294967295
   292ae:	f004 f953 	bl	2d558 <z_impl_k_mutex_lock>
        if (ret == 0) {
   292b2:	2800      	cmp	r0, #0
   292b4:	d0f1      	beq.n	2929a <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   292b6:	4804      	ldr	r0, [pc, #16]	; (292c8 <mutex_lock_platform+0x58>)
   292b8:	e7f0      	b.n	2929c <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   292ba:	4804      	ldr	r0, [pc, #16]	; (292cc <mutex_lock_platform+0x5c>)
   292bc:	e7ee      	b.n	2929c <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   292be:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   292c2:	e7eb      	b.n	2929c <mutex_lock_platform+0x2c>
   292c4:	a95c5f2c 	.word	0xa95c5f2c
   292c8:	ffff8fe9 	.word	0xffff8fe9
   292cc:	ffff8fea 	.word	0xffff8fea

000292d0 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   292d0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   292d2:	b1d8      	cbz	r0, 2930c <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   292d4:	6843      	ldr	r3, [r0, #4]
   292d6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   292da:	d110      	bne.n	292fe <mutex_unlock_platform+0x2e>
   292dc:	2200      	movs	r2, #0
   292de:	6803      	ldr	r3, [r0, #0]
   292e0:	f3bf 8f5b 	dmb	ish
   292e4:	e853 1f00 	ldrex	r1, [r3]
   292e8:	2901      	cmp	r1, #1
   292ea:	d103      	bne.n	292f4 <mutex_unlock_platform+0x24>
   292ec:	e843 2000 	strex	r0, r2, [r3]
   292f0:	2800      	cmp	r0, #0
   292f2:	d1f7      	bne.n	292e4 <mutex_unlock_platform+0x14>
   292f4:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   292f8:	d10b      	bne.n	29312 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   292fa:	2000      	movs	r0, #0
    }
}
   292fc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   292fe:	4a07      	ldr	r2, [pc, #28]	; (2931c <mutex_unlock_platform+0x4c>)
   29300:	4293      	cmp	r3, r2
   29302:	d008      	beq.n	29316 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   29304:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   29306:	f004 f9a1 	bl	2d64c <z_impl_k_mutex_unlock>
   2930a:	e7f6      	b.n	292fa <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   2930c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   29310:	e7f4      	b.n	292fc <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   29312:	4803      	ldr	r0, [pc, #12]	; (29320 <mutex_unlock_platform+0x50>)
   29314:	e7f2      	b.n	292fc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   29316:	4803      	ldr	r0, [pc, #12]	; (29324 <mutex_unlock_platform+0x54>)
   29318:	e7f0      	b.n	292fc <mutex_unlock_platform+0x2c>
   2931a:	bf00      	nop
   2931c:	a95c5f2c 	.word	0xa95c5f2c
   29320:	ffff8fe9 	.word	0xffff8fe9
   29324:	ffff8fea 	.word	0xffff8fea

00029328 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   29328:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   2932a:	4604      	mov	r4, r0
   2932c:	b918      	cbnz	r0, 29336 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   2932e:	4b1d      	ldr	r3, [pc, #116]	; (293a4 <mutex_init_platform+0x7c>)
   29330:	481d      	ldr	r0, [pc, #116]	; (293a8 <mutex_init_platform+0x80>)
   29332:	685b      	ldr	r3, [r3, #4]
   29334:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   29336:	6863      	ldr	r3, [r4, #4]
   29338:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   2933c:	d02f      	beq.n	2939e <mutex_init_platform+0x76>
   2933e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   29342:	d02c      	beq.n	2939e <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   29344:	4a19      	ldr	r2, [pc, #100]	; (293ac <mutex_init_platform+0x84>)
   29346:	4293      	cmp	r3, r2
   29348:	d119      	bne.n	2937e <mutex_init_platform+0x56>
   2934a:	6823      	ldr	r3, [r4, #0]
   2934c:	bb03      	cbnz	r3, 29390 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   2934e:	4818      	ldr	r0, [pc, #96]	; (293b0 <mutex_init_platform+0x88>)
   29350:	f04f 32ff 	mov.w	r2, #4294967295
   29354:	f04f 33ff 	mov.w	r3, #4294967295
   29358:	4621      	mov	r1, r4
   2935a:	f003 fff9 	bl	2d350 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   2935e:	b908      	cbnz	r0, 29364 <mutex_init_platform+0x3c>
   29360:	6823      	ldr	r3, [r4, #0]
   29362:	b91b      	cbnz	r3, 2936c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   29364:	4b0f      	ldr	r3, [pc, #60]	; (293a4 <mutex_init_platform+0x7c>)
   29366:	4813      	ldr	r0, [pc, #76]	; (293b4 <mutex_init_platform+0x8c>)
   29368:	685b      	ldr	r3, [r3, #4]
   2936a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   2936c:	6820      	ldr	r0, [r4, #0]
   2936e:	2214      	movs	r2, #20
   29370:	2100      	movs	r1, #0
   29372:	f006 f800 	bl	2f376 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   29376:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   2937a:	6063      	str	r3, [r4, #4]
   2937c:	e008      	b.n	29390 <mutex_init_platform+0x68>
    switch(flags){
   2937e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   29382:	d80d      	bhi.n	293a0 <mutex_init_platform+0x78>
   29384:	2b3a      	cmp	r3, #58	; 0x3a
   29386:	d003      	beq.n	29390 <mutex_init_platform+0x68>
   29388:	f640 62ba 	movw	r2, #3770	; 0xeba
   2938c:	4293      	cmp	r3, r2
   2938e:	d1de      	bne.n	2934e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   29390:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   29392:	f006 fdf5 	bl	2ff80 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   29396:	6863      	ldr	r3, [r4, #4]
   29398:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   2939c:	6063      	str	r3, [r4, #4]
}
   2939e:	bd10      	pop	{r4, pc}
    switch(flags){
   293a0:	4a05      	ldr	r2, [pc, #20]	; (293b8 <mutex_init_platform+0x90>)
   293a2:	e7f3      	b.n	2938c <mutex_init_platform+0x64>
   293a4:	200001f0 	.word	0x200001f0
   293a8:	00030c2d 	.word	0x00030c2d
   293ac:	a95c5f2c 	.word	0xa95c5f2c
   293b0:	20000dcc 	.word	0x20000dcc
   293b4:	00030c53 	.word	0x00030c53
   293b8:	3a00003a 	.word	0x3a00003a

000293bc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   293bc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   293be:	4906      	ldr	r1, [pc, #24]	; (293d8 <nrf_cc3xx_platform_mutex_init+0x1c>)
   293c0:	4806      	ldr	r0, [pc, #24]	; (293dc <nrf_cc3xx_platform_mutex_init+0x20>)
   293c2:	2340      	movs	r3, #64	; 0x40
   293c4:	2214      	movs	r2, #20
   293c6:	f006 fd8a 	bl	2fede <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   293ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   293ce:	4904      	ldr	r1, [pc, #16]	; (293e0 <nrf_cc3xx_platform_mutex_init+0x24>)
   293d0:	4804      	ldr	r0, [pc, #16]	; (293e4 <nrf_cc3xx_platform_mutex_init+0x28>)
   293d2:	f005 b91f 	b.w	2e614 <nrf_cc3xx_platform_set_mutexes>
   293d6:	bf00      	nop
   293d8:	200008cc 	.word	0x200008cc
   293dc:	20000dcc 	.word	0x20000dcc
   293e0:	000308c4 	.word	0x000308c4
   293e4:	000308d8 	.word	0x000308d8

000293e8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   293e8:	4901      	ldr	r1, [pc, #4]	; (293f0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   293ea:	2210      	movs	r2, #16
	str	r2, [r1]
   293ec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   293ee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   293f0:	e000ed10 	.word	0xe000ed10

000293f4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   293f4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   293f6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   293f8:	f380 8811 	msr	BASEPRI, r0
	isb
   293fc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   29400:	f3bf 8f4f 	dsb	sy
   29404:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   29406:	b662      	cpsie	i
	isb
   29408:	f3bf 8f6f 	isb	sy

	bx	lr
   2940c:	4770      	bx	lr
   2940e:	bf00      	nop

00029410 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   29410:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   29412:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   29414:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   29418:	f3bf 8f4f 	dsb	sy
   2941c:	bf20      	wfe

	msr	BASEPRI, r0
   2941e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   29422:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   29424:	4770      	bx	lr
   29426:	bf00      	nop

00029428 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   29428:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2942a:	2800      	cmp	r0, #0
   2942c:	db07      	blt.n	2943e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2942e:	4a04      	ldr	r2, [pc, #16]	; (29440 <arch_irq_enable+0x18>)
   29430:	0941      	lsrs	r1, r0, #5
   29432:	2301      	movs	r3, #1
   29434:	f000 001f 	and.w	r0, r0, #31
   29438:	4083      	lsls	r3, r0
   2943a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   2943e:	4770      	bx	lr
   29440:	e000e100 	.word	0xe000e100

00029444 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   29444:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   29446:	2800      	cmp	r0, #0
   29448:	db0c      	blt.n	29464 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2944a:	0943      	lsrs	r3, r0, #5
   2944c:	4906      	ldr	r1, [pc, #24]	; (29468 <arch_irq_disable+0x24>)
   2944e:	f000 001f 	and.w	r0, r0, #31
   29452:	3320      	adds	r3, #32
   29454:	2201      	movs	r2, #1
   29456:	4082      	lsls	r2, r0
   29458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2945c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   29460:	f3bf 8f6f 	isb	sy
}
   29464:	4770      	bx	lr
   29466:	bf00      	nop
   29468:	e000e100 	.word	0xe000e100

0002946c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2946c:	4b05      	ldr	r3, [pc, #20]	; (29484 <arch_irq_is_enabled+0x18>)
   2946e:	0942      	lsrs	r2, r0, #5
   29470:	f000 001f 	and.w	r0, r0, #31
   29474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   29478:	2301      	movs	r3, #1
   2947a:	fa03 f000 	lsl.w	r0, r3, r0
}
   2947e:	4010      	ands	r0, r2
   29480:	4770      	bx	lr
   29482:	bf00      	nop
   29484:	e000e100 	.word	0xe000e100

00029488 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   29488:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2948a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2948c:	bfa8      	it	ge
   2948e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   29492:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29496:	bfb8      	it	lt
   29498:	4b06      	ldrlt	r3, [pc, #24]	; (294b4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2949a:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2949e:	bfac      	ite	ge
   294a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   294a4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   294a8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   294aa:	bfb4      	ite	lt
   294ac:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   294ae:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   294b2:	4770      	bx	lr
   294b4:	e000ed14 	.word	0xe000ed14

000294b8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   294b8:	bf30      	wfi
    b z_SysNmiOnReset
   294ba:	f7ff bffd 	b.w	294b8 <z_SysNmiOnReset>
   294be:	bf00      	nop

000294c0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   294c0:	4a0b      	ldr	r2, [pc, #44]	; (294f0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   294c2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   294c4:	4b0b      	ldr	r3, [pc, #44]	; (294f4 <z_arm_prep_c+0x34>)
   294c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   294ca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   294cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   294d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   294d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   294d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   294dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   294e0:	f003 fe72 	bl	2d1c8 <z_bss_zero>
	z_data_copy();
   294e4:	f004 fe30 	bl	2e148 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   294e8:	f000 fa20 	bl	2992c <z_arm_interrupt_init>
	z_cstart();
   294ec:	f003 feb0 	bl	2d250 <z_cstart>
   294f0:	00027000 	.word	0x00027000
   294f4:	e000ed00 	.word	0xe000ed00

000294f8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   294f8:	4a09      	ldr	r2, [pc, #36]	; (29520 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   294fa:	490a      	ldr	r1, [pc, #40]	; (29524 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   294fc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   294fe:	6809      	ldr	r1, [r1, #0]
   29500:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   29502:	4909      	ldr	r1, [pc, #36]	; (29528 <arch_swap+0x30>)
	_current->arch.basepri = key;
   29504:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   29506:	684b      	ldr	r3, [r1, #4]
   29508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2950c:	604b      	str	r3, [r1, #4]
   2950e:	2300      	movs	r3, #0
   29510:	f383 8811 	msr	BASEPRI, r3
   29514:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   29518:	6893      	ldr	r3, [r2, #8]
}
   2951a:	6f98      	ldr	r0, [r3, #120]	; 0x78
   2951c:	4770      	bx	lr
   2951e:	bf00      	nop
   29520:	20001980 	.word	0x20001980
   29524:	00030ac8 	.word	0x00030ac8
   29528:	e000ed00 	.word	0xe000ed00

0002952c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2952c:	4912      	ldr	r1, [pc, #72]	; (29578 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2952e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   29530:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   29534:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   29536:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2953a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2953e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   29540:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   29544:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   29548:	4f0c      	ldr	r7, [pc, #48]	; (2957c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2954a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2954e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   29550:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   29552:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   29554:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   29556:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   29558:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2955a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   2955e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   29560:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   29562:	f000 fa7f 	bl	29a64 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   29566:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2956a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2956e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   29572:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   29576:	4770      	bx	lr
    ldr r1, =_kernel
   29578:	20001980 	.word	0x20001980
    ldr v4, =_SCS_ICSR
   2957c:	e000ed04 	.word	0xe000ed04

00029580 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   29580:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   29584:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   29586:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2958a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2958e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   29590:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   29594:	2902      	cmp	r1, #2
    beq _oops
   29596:	d0ff      	beq.n	29598 <_oops>

00029598 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   29598:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   2959a:	f005 fec2 	bl	2f322 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   2959e:	bd01      	pop	{r0, pc}

000295a0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   295a0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   295a4:	9b00      	ldr	r3, [sp, #0]
   295a6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   295aa:	490a      	ldr	r1, [pc, #40]	; (295d4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   295ac:	9b01      	ldr	r3, [sp, #4]
   295ae:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   295b2:	9b02      	ldr	r3, [sp, #8]
   295b4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   295b8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   295bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   295c0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   295c4:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   295c8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   295ca:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   295cc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   295ce:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   295d0:	4770      	bx	lr
   295d2:	bf00      	nop
   295d4:	0002e90d 	.word	0x0002e90d

000295d8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   295d8:	4a09      	ldr	r2, [pc, #36]	; (29600 <z_check_thread_stack_fail+0x28>)
{
   295da:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   295dc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   295de:	b170      	cbz	r0, 295fe <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   295e0:	f113 0f16 	cmn.w	r3, #22
   295e4:	6e40      	ldr	r0, [r0, #100]	; 0x64
   295e6:	d005      	beq.n	295f4 <z_check_thread_stack_fail+0x1c>
   295e8:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   295ec:	429a      	cmp	r2, r3
   295ee:	d805      	bhi.n	295fc <z_check_thread_stack_fail+0x24>
   295f0:	4283      	cmp	r3, r0
   295f2:	d203      	bcs.n	295fc <z_check_thread_stack_fail+0x24>
		return 0;
   295f4:	4281      	cmp	r1, r0
   295f6:	bf28      	it	cs
   295f8:	2000      	movcs	r0, #0
   295fa:	4770      	bx	lr
   295fc:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   295fe:	4770      	bx	lr
   29600:	20001980 	.word	0x20001980

00029604 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   29604:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   29606:	4b09      	ldr	r3, [pc, #36]	; (2962c <arch_switch_to_main_thread+0x28>)
{
   29608:	460d      	mov	r5, r1
   2960a:	4614      	mov	r4, r2
	_current = main_thread;
   2960c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   2960e:	f000 fa29 	bl	29a64 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   29612:	4620      	mov	r0, r4
   29614:	f385 8809 	msr	PSP, r5
   29618:	2100      	movs	r1, #0
   2961a:	b663      	cpsie	if
   2961c:	f381 8811 	msr	BASEPRI, r1
   29620:	f3bf 8f6f 	isb	sy
   29624:	2200      	movs	r2, #0
   29626:	2300      	movs	r3, #0
   29628:	f005 f970 	bl	2e90c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2962c:	20001980 	.word	0x20001980

00029630 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   29630:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   29632:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   29634:	4a0b      	ldr	r2, [pc, #44]	; (29664 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   29636:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   29638:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2963a:	bf1e      	ittt	ne
	movne	r1, #0
   2963c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2963e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   29640:	f006 fc8f 	blne	2ff62 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   29644:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   29646:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2964a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2964e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   29652:	4905      	ldr	r1, [pc, #20]	; (29668 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   29654:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   29656:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   29658:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2965a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2965e:	4903      	ldr	r1, [pc, #12]	; (2966c <_isr_wrapper+0x3c>)
	bx r1
   29660:	4708      	bx	r1
   29662:	0000      	.short	0x0000
	ldr r2, =_kernel
   29664:	20001980 	.word	0x20001980
	ldr r1, =_sw_isr_table
   29668:	000305fc 	.word	0x000305fc
	ldr r1, =z_arm_int_exit
   2966c:	00029671 	.word	0x00029671

00029670 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   29670:	4b04      	ldr	r3, [pc, #16]	; (29684 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   29672:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   29674:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   29676:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   29678:	d003      	beq.n	29682 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2967a:	4903      	ldr	r1, [pc, #12]	; (29688 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2967c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   29680:	600a      	str	r2, [r1, #0]

00029682 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   29682:	4770      	bx	lr
	ldr r3, =_kernel
   29684:	20001980 	.word	0x20001980
	ldr r1, =_SCS_ICSR
   29688:	e000ed04 	.word	0xe000ed04

0002968c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   2968c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2968e:	4b26      	ldr	r3, [pc, #152]	; (29728 <mem_manage_fault+0x9c>)
{
   29690:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   29692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   29694:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   29698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   2969a:	bf14      	ite	ne
   2969c:	2411      	movne	r4, #17
   2969e:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
   296a0:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   296a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
   296a6:	bf18      	it	ne
   296a8:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   296aa:	0792      	lsls	r2, r2, #30
{
   296ac:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   296ae:	d50a      	bpl.n	296c6 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   296b0:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   296b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   296b4:	0614      	lsls	r4, r2, #24
   296b6:	d534      	bpl.n	29722 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   296b8:	b119      	cbz	r1, 296c2 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   296ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   296bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   296c0:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   296c2:	2413      	movs	r4, #19
   296c4:	e001      	b.n	296ca <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
   296c6:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   296ca:	4b17      	ldr	r3, [pc, #92]	; (29728 <mem_manage_fault+0x9c>)
   296cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   296ce:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   296d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   296d4:	bf18      	it	ne
   296d6:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   296d8:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   296dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   296de:	bf18      	it	ne
   296e0:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   296e2:	06d2      	lsls	r2, r2, #27
   296e4:	d402      	bmi.n	296ec <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   296e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   296e8:	079b      	lsls	r3, r3, #30
   296ea:	d50a      	bpl.n	29702 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   296ec:	4b0e      	ldr	r3, [pc, #56]	; (29728 <mem_manage_fault+0x9c>)
   296ee:	685b      	ldr	r3, [r3, #4]
   296f0:	0519      	lsls	r1, r3, #20
   296f2:	d506      	bpl.n	29702 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   296f4:	4631      	mov	r1, r6
   296f6:	f7ff ff6f 	bl	295d8 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   296fa:	b110      	cbz	r0, 29702 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   296fc:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   29700:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   29702:	4b09      	ldr	r3, [pc, #36]	; (29728 <mem_manage_fault+0x9c>)
   29704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29706:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   29708:	bf42      	ittt	mi
   2970a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   2970c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   29710:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   29712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29714:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   29718:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   2971a:	2300      	movs	r3, #0
   2971c:	702b      	strb	r3, [r5, #0]

	return reason;
}
   2971e:	4620      	mov	r0, r4
   29720:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   29722:	f06f 0015 	mvn.w	r0, #21
   29726:	e7cc      	b.n	296c2 <mem_manage_fault+0x36>
   29728:	e000ed00 	.word	0xe000ed00

0002972c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2972c:	4b13      	ldr	r3, [pc, #76]	; (2977c <usage_fault.constprop.0+0x50>)
   2972e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   29730:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   29734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   29736:	bf14      	ite	ne
   29738:	201e      	movne	r0, #30
   2973a:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   2973c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   29740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   29742:	bf18      	it	ne
   29744:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   29746:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2974a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   2974c:	bf18      	it	ne
   2974e:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   29750:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   29754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   29756:	bf18      	it	ne
   29758:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   2975a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2975e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   29760:	bf18      	it	ne
   29762:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   29764:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   29768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2976a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2976e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   29772:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   29774:	bf18      	it	ne
   29776:	2024      	movne	r0, #36	; 0x24
   29778:	4770      	bx	lr
   2977a:	bf00      	nop
   2977c:	e000ed00 	.word	0xe000ed00

00029780 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   29780:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   29782:	4b19      	ldr	r3, [pc, #100]	; (297e8 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   29784:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   29786:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   29788:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   2978a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   2978e:	bf14      	ite	ne
   29790:	2017      	movne	r0, #23
   29792:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
   29794:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   29798:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
   2979a:	bf18      	it	ne
   2979c:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2979e:	05a4      	lsls	r4, r4, #22
   297a0:	d509      	bpl.n	297b6 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
   297a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   297a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
   297a6:	0400      	lsls	r0, r0, #16
   297a8:	d504      	bpl.n	297b4 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
   297aa:	b11a      	cbz	r2, 297b4 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   297ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   297ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   297b2:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   297b4:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   297b6:	4b0c      	ldr	r3, [pc, #48]	; (297e8 <bus_fault.constprop.0+0x68>)
   297b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   297ba:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   297be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   297c0:	bf18      	it	ne
   297c2:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   297c4:	05d2      	lsls	r2, r2, #23
   297c6:	d40c      	bmi.n	297e2 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   297c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   297ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   297ce:	bf18      	it	ne
   297d0:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   297d2:	4a05      	ldr	r2, [pc, #20]	; (297e8 <bus_fault.constprop.0+0x68>)
   297d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   297d6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   297da:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   297dc:	2300      	movs	r3, #0
   297de:	700b      	strb	r3, [r1, #0]
}
   297e0:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   297e2:	201b      	movs	r0, #27
   297e4:	e7f5      	b.n	297d2 <bus_fault.constprop.0+0x52>
   297e6:	bf00      	nop
   297e8:	e000ed00 	.word	0xe000ed00

000297ec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   297ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   297ee:	4b45      	ldr	r3, [pc, #276]	; (29904 <z_arm_fault+0x118>)
   297f0:	685b      	ldr	r3, [r3, #4]
{
   297f2:	b08a      	sub	sp, #40	; 0x28
   297f4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   297f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   297fa:	2600      	movs	r6, #0
   297fc:	f386 8811 	msr	BASEPRI, r6
   29800:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   29804:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   29808:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2980c:	d111      	bne.n	29832 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2980e:	f002 000c 	and.w	r0, r2, #12
   29812:	2808      	cmp	r0, #8
   29814:	d00d      	beq.n	29832 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   29816:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   29818:	bf4c      	ite	mi
   2981a:	460d      	movmi	r5, r1
			*nested_exc = true;
   2981c:	2601      	movpl	r6, #1
	*recoverable = false;
   2981e:	2200      	movs	r2, #0
	switch (fault) {
   29820:	3b03      	subs	r3, #3
	*recoverable = false;
   29822:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   29826:	2b03      	cmp	r3, #3
   29828:	d805      	bhi.n	29836 <z_arm_fault+0x4a>
   2982a:	e8df f003 	tbb	[pc, r3]
   2982e:	5d1e      	.short	0x5d1e
   29830:	5a61      	.short	0x5a61
		return NULL;
   29832:	4635      	mov	r5, r6
   29834:	e7f3      	b.n	2981e <z_arm_fault+0x32>
   29836:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   29838:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2983c:	b99b      	cbnz	r3, 29866 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2983e:	2220      	movs	r2, #32
   29840:	4629      	mov	r1, r5
   29842:	a802      	add	r0, sp, #8
   29844:	f005 fd8c 	bl	2f360 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   29848:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2984a:	2e00      	cmp	r6, #0
   2984c:	d054      	beq.n	298f8 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2984e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   29852:	b922      	cbnz	r2, 2985e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   29854:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   29858:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2985c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   2985e:	a902      	add	r1, sp, #8
   29860:	4620      	mov	r0, r4
   29862:	f005 fd5c 	bl	2f31e <z_arm_fatal_error>
}
   29866:	b00a      	add	sp, #40	; 0x28
   29868:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2986a:	4b26      	ldr	r3, [pc, #152]	; (29904 <z_arm_fault+0x118>)
   2986c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2986e:	0791      	lsls	r1, r2, #30
   29870:	d4e1      	bmi.n	29836 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   29872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   29874:	2a00      	cmp	r2, #0
   29876:	dbde      	blt.n	29836 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   29878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2987a:	0052      	lsls	r2, r2, #1
   2987c:	d5db      	bpl.n	29836 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   2987e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   29880:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   29882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   29886:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   29888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2988c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   29890:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   29892:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   29896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   2989a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   2989c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   298a0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   298a4:	f64d 7202 	movw	r2, #57090	; 0xdf02
   298a8:	4291      	cmp	r1, r2
   298aa:	d00a      	beq.n	298c2 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   298ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   298ae:	b2d2      	uxtb	r2, r2
   298b0:	b14a      	cbz	r2, 298c6 <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
   298b2:	f10d 0207 	add.w	r2, sp, #7
   298b6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   298b8:	4628      	mov	r0, r5
   298ba:	f7ff fee7 	bl	2968c <mem_manage_fault>
		reason = usage_fault(esf);
   298be:	4604      	mov	r4, r0
		break;
   298c0:	e7ba      	b.n	29838 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
   298c2:	682c      	ldr	r4, [r5, #0]
   298c4:	e7b8      	b.n	29838 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   298c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   298c8:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   298cc:	d005      	beq.n	298da <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
   298ce:	f10d 0107 	add.w	r1, sp, #7
   298d2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   298d4:	f7ff ff54 	bl	29780 <bus_fault.constprop.0>
   298d8:	e7f1      	b.n	298be <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   298da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   298dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   298e0:	d3a9      	bcc.n	29836 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
   298e2:	f7ff ff23 	bl	2972c <usage_fault.constprop.0>
   298e6:	e7ea      	b.n	298be <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
   298e8:	f10d 0207 	add.w	r2, sp, #7
   298ec:	2100      	movs	r1, #0
   298ee:	e7e3      	b.n	298b8 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
   298f0:	f10d 0107 	add.w	r1, sp, #7
   298f4:	2000      	movs	r0, #0
   298f6:	e7ed      	b.n	298d4 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   298f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   298fc:	f023 0301 	bic.w	r3, r3, #1
   29900:	e7ac      	b.n	2985c <z_arm_fault+0x70>
   29902:	bf00      	nop
   29904:	e000ed00 	.word	0xe000ed00

00029908 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   29908:	4a02      	ldr	r2, [pc, #8]	; (29914 <z_arm_fault_init+0xc>)
   2990a:	6953      	ldr	r3, [r2, #20]
   2990c:	f043 0310 	orr.w	r3, r3, #16
   29910:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   29912:	4770      	bx	lr
   29914:	e000ed00 	.word	0xe000ed00

00029918 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   29918:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2991c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   29920:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   29922:	4672      	mov	r2, lr
	bl z_arm_fault
   29924:	f7ff ff62 	bl	297ec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   29928:	bd01      	pop	{r0, pc}
   2992a:	bf00      	nop

0002992c <z_arm_interrupt_init>:
   2992c:	4804      	ldr	r0, [pc, #16]	; (29940 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2992e:	2300      	movs	r3, #0
   29930:	2120      	movs	r1, #32
   29932:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   29934:	3301      	adds	r3, #1
   29936:	2b30      	cmp	r3, #48	; 0x30
   29938:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2993c:	d1f9      	bne.n	29932 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2993e:	4770      	bx	lr
   29940:	e000e100 	.word	0xe000e100

00029944 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   29944:	2000      	movs	r0, #0
    msr CONTROL, r0
   29946:	f380 8814 	msr	CONTROL, r0
    isb
   2994a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2994e:	f7fe fa69 	bl	27e24 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   29952:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   29954:	490d      	ldr	r1, [pc, #52]	; (2998c <__start+0x48>)
    str r0, [r1]
   29956:	6008      	str	r0, [r1, #0]
    dsb
   29958:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   2995c:	480c      	ldr	r0, [pc, #48]	; (29990 <__start+0x4c>)
    msr msp, r0
   2995e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   29962:	f000 f82b 	bl	299bc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   29966:	2020      	movs	r0, #32
    msr BASEPRI, r0
   29968:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2996c:	4809      	ldr	r0, [pc, #36]	; (29994 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2996e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   29972:	1840      	adds	r0, r0, r1
    msr PSP, r0
   29974:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   29978:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2997c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2997e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   29980:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   29984:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   29988:	f7ff fd9a 	bl	294c0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   2998c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   29990:	20003240 	.word	0x20003240
    ldr r0, =z_interrupt_stacks
   29994:	20002480 	.word	0x20002480

00029998 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   29998:	4907      	ldr	r1, [pc, #28]	; (299b8 <z_arm_clear_arm_mpu_config+0x20>)
   2999a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   2999e:	2300      	movs	r3, #0
	int num_regions =
   299a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   299a4:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   299a6:	4293      	cmp	r3, r2
   299a8:	db00      	blt.n	299ac <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   299aa:	4770      	bx	lr
  MPU->RNR = rnr;
   299ac:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   299b0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   299b4:	3301      	adds	r3, #1
   299b6:	e7f6      	b.n	299a6 <z_arm_clear_arm_mpu_config+0xe>
   299b8:	e000ed00 	.word	0xe000ed00

000299bc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   299bc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   299be:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   299c0:	2300      	movs	r3, #0
   299c2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   299c6:	f7ff ffe7 	bl	29998 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   299ca:	4b14      	ldr	r3, [pc, #80]	; (29a1c <z_arm_init_arch_hw_at_boot+0x60>)
   299cc:	f04f 32ff 	mov.w	r2, #4294967295
   299d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   299d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   299d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   299dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   299e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   299e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   299e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   299ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   299f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   299f4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   299f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   299fc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   29a00:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   29a04:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   29a08:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   29a0c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   29a10:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   29a12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   29a16:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   29a1a:	bd08      	pop	{r3, pc}
   29a1c:	e000e100 	.word	0xe000e100

00029a20 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   29a20:	4b08      	ldr	r3, [pc, #32]	; (29a44 <z_impl_k_thread_abort+0x24>)
   29a22:	689b      	ldr	r3, [r3, #8]
   29a24:	4283      	cmp	r3, r0
   29a26:	d10b      	bne.n	29a40 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   29a28:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   29a2c:	b143      	cbz	r3, 29a40 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   29a2e:	4b06      	ldr	r3, [pc, #24]	; (29a48 <z_impl_k_thread_abort+0x28>)
   29a30:	685a      	ldr	r2, [r3, #4]
   29a32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   29a36:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   29a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   29a3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   29a3e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   29a40:	f004 bb10 	b.w	2e064 <z_thread_abort>
   29a44:	20001980 	.word	0x20001980
   29a48:	e000ed00 	.word	0xe000ed00

00029a4c <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   29a4c:	4b02      	ldr	r3, [pc, #8]	; (29a58 <z_arm_configure_static_mpu_regions+0xc>)
   29a4e:	4a03      	ldr	r2, [pc, #12]	; (29a5c <z_arm_configure_static_mpu_regions+0x10>)
   29a50:	4803      	ldr	r0, [pc, #12]	; (29a60 <z_arm_configure_static_mpu_regions+0x14>)
   29a52:	2101      	movs	r1, #1
   29a54:	f000 b870 	b.w	29b38 <arm_core_mpu_configure_static_mpu_regions>
   29a58:	20040000 	.word	0x20040000
   29a5c:	20000000 	.word	0x20000000
   29a60:	000308e8 	.word	0x000308e8

00029a64 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   29a64:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   29a66:	4b05      	ldr	r3, [pc, #20]	; (29a7c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   29a68:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   29a6a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   29a6c:	4a04      	ldr	r2, [pc, #16]	; (29a80 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   29a6e:	2140      	movs	r1, #64	; 0x40
   29a70:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   29a74:	4618      	mov	r0, r3
   29a76:	2101      	movs	r1, #1
   29a78:	f000 b868 	b.w	29b4c <arm_core_mpu_configure_dynamic_mpu_regions>
   29a7c:	20000de8 	.word	0x20000de8
   29a80:	150b0000 	.word	0x150b0000

00029a84 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   29a84:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   29a86:	4e20      	ldr	r6, [pc, #128]	; (29b08 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   29a88:	2500      	movs	r5, #0
   29a8a:	428d      	cmp	r5, r1
   29a8c:	da39      	bge.n	29b02 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
   29a8e:	6844      	ldr	r4, [r0, #4]
   29a90:	b374      	cbz	r4, 29af0 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   29a92:	b153      	cbz	r3, 29aaa <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   29a94:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   29a98:	ea14 0f0c 	tst.w	r4, ip
   29a9c:	d12f      	bne.n	29afe <mpu_configure_regions+0x7a>
		&&
   29a9e:	2c1f      	cmp	r4, #31
   29aa0:	d92d      	bls.n	29afe <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
   29aa2:	6807      	ldr	r7, [r0, #0]
		&&
   29aa4:	ea1c 0f07 	tst.w	ip, r7
   29aa8:	d129      	bne.n	29afe <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   29aaa:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   29aac:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   29aae:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   29ab2:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   29ab6:	d91e      	bls.n	29af6 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
   29ab8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   29abc:	d81d      	bhi.n	29afa <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   29abe:	3c01      	subs	r4, #1
   29ac0:	fab4 f484 	clz	r4, r4
   29ac4:	f1c4 041f 	rsb	r4, r4, #31
   29ac8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   29aca:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   29ace:	ea4c 0c04 	orr.w	ip, ip, r4
   29ad2:	d814      	bhi.n	29afe <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   29ad4:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   29ad8:	4314      	orrs	r4, r2
   29ada:	f044 0410 	orr.w	r4, r4, #16
   29ade:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   29ae2:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   29ae6:	f04c 0401 	orr.w	r4, ip, #1
   29aea:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   29aee:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   29af0:	3501      	adds	r5, #1
   29af2:	300c      	adds	r0, #12
   29af4:	e7c9      	b.n	29a8a <mpu_configure_regions+0x6>
		return REGION_32B;
   29af6:	2408      	movs	r4, #8
   29af8:	e7e7      	b.n	29aca <mpu_configure_regions+0x46>
		return REGION_4G;
   29afa:	243e      	movs	r4, #62	; 0x3e
   29afc:	e7e5      	b.n	29aca <mpu_configure_regions+0x46>
			return -EINVAL;
   29afe:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
   29b02:	4610      	mov	r0, r2
   29b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29b06:	bf00      	nop
   29b08:	e000ed00 	.word	0xe000ed00

00029b0c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   29b0c:	4b04      	ldr	r3, [pc, #16]	; (29b20 <arm_core_mpu_enable+0x14>)
   29b0e:	2205      	movs	r2, #5
   29b10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   29b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   29b18:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   29b1c:	4770      	bx	lr
   29b1e:	bf00      	nop
   29b20:	e000ed00 	.word	0xe000ed00

00029b24 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   29b24:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   29b28:	4b02      	ldr	r3, [pc, #8]	; (29b34 <arm_core_mpu_disable+0x10>)
   29b2a:	2200      	movs	r2, #0
   29b2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   29b30:	4770      	bx	lr
   29b32:	bf00      	nop
   29b34:	e000ed00 	.word	0xe000ed00

00029b38 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   29b38:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   29b3a:	4c03      	ldr	r4, [pc, #12]	; (29b48 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   29b3c:	2301      	movs	r3, #1
   29b3e:	7822      	ldrb	r2, [r4, #0]
   29b40:	f7ff ffa0 	bl	29a84 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   29b44:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   29b46:	bd10      	pop	{r4, pc}
   29b48:	20001ba6 	.word	0x20001ba6

00029b4c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   29b4c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   29b4e:	4a09      	ldr	r2, [pc, #36]	; (29b74 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   29b50:	2300      	movs	r3, #0
   29b52:	7812      	ldrb	r2, [r2, #0]
   29b54:	f7ff ff96 	bl	29a84 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   29b58:	f110 0f16 	cmn.w	r0, #22
   29b5c:	d002      	beq.n	29b64 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   29b5e:	4a06      	ldr	r2, [pc, #24]	; (29b78 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   29b60:	2807      	cmp	r0, #7
   29b62:	dd00      	ble.n	29b66 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   29b64:	bd08      	pop	{r3, pc}
   29b66:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   29b6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   29b6e:	3001      	adds	r0, #1
   29b70:	e7f6      	b.n	29b60 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   29b72:	bf00      	nop
   29b74:	20001ba6 	.word	0x20001ba6
   29b78:	e000ed00 	.word	0xe000ed00

00029b7c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   29b7c:	4914      	ldr	r1, [pc, #80]	; (29bd0 <z_arm_mpu_init+0x54>)
   29b7e:	6808      	ldr	r0, [r1, #0]
   29b80:	2808      	cmp	r0, #8
{
   29b82:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   29b84:	d821      	bhi.n	29bca <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   29b86:	f7ff ffcd 	bl	29b24 <arm_core_mpu_disable>
   29b8a:	4c12      	ldr	r4, [pc, #72]	; (29bd4 <z_arm_mpu_init+0x58>)
   29b8c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   29b8e:	2200      	movs	r2, #0
   29b90:	4290      	cmp	r0, r2
   29b92:	f101 010c 	add.w	r1, r1, #12
   29b96:	d105      	bne.n	29ba4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   29b98:	4b0f      	ldr	r3, [pc, #60]	; (29bd8 <z_arm_mpu_init+0x5c>)
   29b9a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   29b9c:	f7ff ffb6 	bl	29b0c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   29ba0:	2000      	movs	r0, #0
}
   29ba2:	bd10      	pop	{r4, pc}
   29ba4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   29ba8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   29bac:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   29bb0:	4313      	orrs	r3, r2
   29bb2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   29bb6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   29bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
   29bbe:	f043 0301 	orr.w	r3, r3, #1
   29bc2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   29bc6:	3201      	adds	r2, #1
   29bc8:	e7e2      	b.n	29b90 <z_arm_mpu_init+0x14>
		return -1;
   29bca:	f04f 30ff 	mov.w	r0, #4294967295
   29bce:	e7e8      	b.n	29ba2 <z_arm_mpu_init+0x26>
   29bd0:	000308f4 	.word	0x000308f4
   29bd4:	e000ed00 	.word	0xe000ed00
   29bd8:	20001ba6 	.word	0x20001ba6

00029bdc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   29bdc:	4b01      	ldr	r3, [pc, #4]	; (29be4 <__stdout_hook_install+0x8>)
   29bde:	6018      	str	r0, [r3, #0]
}
   29be0:	4770      	bx	lr
   29be2:	bf00      	nop
   29be4:	20000130 	.word	0x20000130

00029be8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
   29be8:	b510      	push	{r4, lr}
	__asm__ volatile(
   29bea:	f04f 0320 	mov.w	r3, #32
   29bee:	f3ef 8011 	mrs	r0, BASEPRI
   29bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   29bf6:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   29bfa:	4a11      	ldr	r2, [pc, #68]	; (29c40 <nordicsemi_nrf52_init+0x58>)
   29bfc:	2301      	movs	r3, #1
   29bfe:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   29c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   29c06:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   29c0a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   29c0e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   29c12:	2c08      	cmp	r4, #8
   29c14:	d108      	bne.n	29c28 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   29c16:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   29c1a:	2905      	cmp	r1, #5
   29c1c:	d804      	bhi.n	29c28 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   29c1e:	4c09      	ldr	r4, [pc, #36]	; (29c44 <nordicsemi_nrf52_init+0x5c>)
   29c20:	5c61      	ldrb	r1, [r4, r1]
   29c22:	b109      	cbz	r1, 29c28 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   29c24:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   29c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29c2c:	2201      	movs	r2, #1
   29c2e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   29c32:	f380 8811 	msr	BASEPRI, r0
   29c36:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   29c3a:	2000      	movs	r0, #0
   29c3c:	bd10      	pop	{r4, pc}
   29c3e:	bf00      	nop
   29c40:	4001e000 	.word	0x4001e000
   29c44:	00030c93 	.word	0x00030c93

00029c48 <sys_arch_reboot>:
    *p_gpregret = val;
   29c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29c4c:	b2c0      	uxtb	r0, r0
   29c4e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   29c52:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   29c56:	4905      	ldr	r1, [pc, #20]	; (29c6c <sys_arch_reboot+0x24>)
   29c58:	4b05      	ldr	r3, [pc, #20]	; (29c70 <sys_arch_reboot+0x28>)
   29c5a:	68ca      	ldr	r2, [r1, #12]
   29c5c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   29c60:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   29c62:	60cb      	str	r3, [r1, #12]
   29c64:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   29c68:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   29c6a:	e7fd      	b.n	29c68 <sys_arch_reboot+0x20>
   29c6c:	e000ed00 	.word	0xe000ed00
   29c70:	05fa0004 	.word	0x05fa0004

00029c74 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   29c74:	b120      	cbz	r0, 29c80 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   29c76:	4b03      	ldr	r3, [pc, #12]	; (29c84 <arch_busy_wait+0x10>)
   29c78:	0180      	lsls	r0, r0, #6
   29c7a:	f043 0301 	orr.w	r3, r3, #1
   29c7e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   29c80:	4770      	bx	lr
   29c82:	bf00      	nop
   29c84:	00030850 	.word	0x00030850

00029c88 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   29c88:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   29c8a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   29c8e:	d512      	bpl.n	29cb6 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   29c90:	2b08      	cmp	r3, #8
   29c92:	d105      	bne.n	29ca0 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   29c94:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   29c96:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   29c9a:	d506      	bpl.n	29caa <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   29c9c:	480e      	ldr	r0, [pc, #56]	; (29cd8 <endpoint_ctx+0x50>)
   29c9e:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
   29ca0:	f010 0f78 	tst.w	r0, #120	; 0x78
   29ca4:	d112      	bne.n	29ccc <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
   29ca6:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
   29caa:	204c      	movs	r0, #76	; 0x4c
   29cac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   29cb0:	4b0a      	ldr	r3, [pc, #40]	; (29cdc <endpoint_ctx+0x54>)
   29cb2:	4418      	add	r0, r3
   29cb4:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   29cb6:	2b08      	cmp	r3, #8
   29cb8:	d105      	bne.n	29cc6 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   29cba:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   29cbc:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   29cc0:	d506      	bpl.n	29cd0 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   29cc2:	4807      	ldr	r0, [pc, #28]	; (29ce0 <endpoint_ctx+0x58>)
   29cc4:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
   29cc6:	f010 0f78 	tst.w	r0, #120	; 0x78
   29cca:	d0f6      	beq.n	29cba <endpoint_ctx+0x32>
		return NULL;
   29ccc:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
   29cce:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   29cd0:	4804      	ldr	r0, [pc, #16]	; (29ce4 <endpoint_ctx+0x5c>)
   29cd2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   29cd6:	4770      	bx	lr
   29cd8:	20000f40 	.word	0x20000f40
   29cdc:	20000df4 	.word	0x20000df4
   29ce0:	20001060 	.word	0x20001060
   29ce4:	20000f60 	.word	0x20000f60

00029ce8 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   29ce8:	4901      	ldr	r1, [pc, #4]	; (29cf0 <usbd_work_schedule+0x8>)
   29cea:	4802      	ldr	r0, [pc, #8]	; (29cf4 <usbd_work_schedule+0xc>)
   29cec:	f006 ba22 	b.w	30134 <k_work_submit_to_queue>
   29cf0:	20000e1c 	.word	0x20000e1c
   29cf4:	20000458 	.word	0x20000458

00029cf8 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   29cf8:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   29cfa:	4801      	ldr	r0, [pc, #4]	; (29d00 <usbd_evt_put+0x8>)
   29cfc:	f006 b9b5 	b.w	3006a <k_queue_append>
   29d00:	200002dc 	.word	0x200002dc

00029d04 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
   29d04:	4802      	ldr	r0, [pc, #8]	; (29d10 <usbd_evt_get+0xc>)
   29d06:	2200      	movs	r2, #0
   29d08:	2300      	movs	r3, #0
   29d0a:	f003 bcdb 	b.w	2d6c4 <z_impl_k_queue_get>
   29d0e:	bf00      	nop
   29d10:	200002dc 	.word	0x200002dc

00029d14 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
   29d14:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   29d16:	4c05      	ldr	r4, [pc, #20]	; (29d2c <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
   29d18:	f7ff fff4 	bl	29d04 <usbd_evt_get>
		if (ev) {
   29d1c:	b120      	cbz	r0, 29d28 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   29d1e:	1d01      	adds	r1, r0, #4
   29d20:	4620      	mov	r0, r4
   29d22:	f006 f8ea 	bl	2fefa <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
   29d26:	e7f7      	b.n	29d18 <usbd_evt_flush+0x4>
}
   29d28:	bd10      	pop	{r4, pc}
   29d2a:	bf00      	nop
   29d2c:	2000025c 	.word	0x2000025c

00029d30 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
   29d30:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
   29d32:	2300      	movs	r3, #0
   29d34:	480e      	ldr	r0, [pc, #56]	; (29d70 <usbd_evt_alloc+0x40>)
   29d36:	2200      	movs	r2, #0
   29d38:	a901      	add	r1, sp, #4
   29d3a:	f003 fb09 	bl	2d350 <k_mem_slab_alloc>
   29d3e:	b190      	cbz	r0, 29d66 <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
   29d40:	f7ff ffe8 	bl	29d14 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   29d44:	480a      	ldr	r0, [pc, #40]	; (29d70 <usbd_evt_alloc+0x40>)
   29d46:	2200      	movs	r2, #0
   29d48:	2300      	movs	r3, #0
   29d4a:	a901      	add	r1, sp, #4
   29d4c:	f003 fb00 	bl	2d350 <k_mem_slab_alloc>
   29d50:	b938      	cbnz	r0, 29d62 <usbd_evt_alloc+0x32>
			LOG_ERR("USBD event memory corrupted");
			__ASSERT_NO_MSG(0);
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
   29d52:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
   29d54:	2304      	movs	r3, #4
		ev->block = block;
   29d56:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   29d58:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   29d5a:	f7ff ffcd 	bl	29cf8 <usbd_evt_put>
		usbd_work_schedule();
   29d5e:	f7ff ffc3 	bl	29ce8 <usbd_work_schedule>

		return NULL;
   29d62:	2000      	movs	r0, #0
   29d64:	e001      	b.n	29d6a <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
   29d66:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   29d68:	6040      	str	r0, [r0, #4]

	return ev;
}
   29d6a:	b003      	add	sp, #12
   29d6c:	f85d fb04 	ldr.w	pc, [sp], #4
   29d70:	2000025c 	.word	0x2000025c

00029d74 <usb_dc_power_event_handler>:

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
	enum usbd_periph_state new_state;

	switch (event) {
   29d74:	2802      	cmp	r0, #2
{
   29d76:	b510      	push	{r4, lr}
   29d78:	d811      	bhi.n	29d9e <usb_dc_power_event_handler+0x2a>
   29d7a:	4b09      	ldr	r3, [pc, #36]	; (29da0 <usb_dc_power_event_handler+0x2c>)
   29d7c:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   29d7e:	f7ff ffd7 	bl	29d30 <usbd_evt_alloc>
	if (!ev) {
   29d82:	b160      	cbz	r0, 29d9e <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   29d84:	2200      	movs	r2, #0
   29d86:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   29d88:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   29d8a:	f7ff ffb5 	bl	29cf8 <usbd_evt_put>
	if (usbd_ctx.attached) {
   29d8e:	4b05      	ldr	r3, [pc, #20]	; (29da4 <usb_dc_power_event_handler+0x30>)
   29d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   29d94:	b11b      	cbz	r3, 29d9e <usb_dc_power_event_handler+0x2a>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
   29d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   29d9a:	f7ff bfa5 	b.w	29ce8 <usbd_work_schedule>
}
   29d9e:	bd10      	pop	{r4, pc}
   29da0:	00030ca8 	.word	0x00030ca8
   29da4:	20000df4 	.word	0x20000df4

00029da8 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
   29da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
   29daa:	7887      	ldrb	r7, [r0, #2]
{
   29dac:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   29dae:	4638      	mov	r0, r7
   29db0:	f7ff ff6a 	bl	29c88 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   29db4:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   29db6:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   29db8:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   29dba:	d512      	bpl.n	29de2 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   29dbc:	2d00      	cmp	r5, #0
   29dbe:	d143      	bne.n	29e48 <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
   29dc0:	f7ff ffb6 	bl	29d30 <usbd_evt_alloc>

			if (!ev) {
   29dc4:	4603      	mov	r3, r0
   29dc6:	2800      	cmp	r0, #0
   29dc8:	d03e      	beq.n	29e48 <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
   29dca:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   29dcc:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   29dce:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   29dd0:	2203      	movs	r2, #3
   29dd2:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
   29dd4:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
   29dd6:	f7ff ff8f 	bl	29cf8 <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
   29dda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
   29dde:	f7ff bf83 	b.w	29ce8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   29de2:	b14d      	cbz	r5, 29df8 <usbd_event_transfer_data+0x50>
   29de4:	2d01      	cmp	r5, #1
   29de6:	d12f      	bne.n	29e48 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   29de8:	f7ff ffa2 	bl	29d30 <usbd_evt_alloc>
			if (!ev) {
   29dec:	4603      	mov	r3, r0
   29dee:	b358      	cbz	r0, 29e48 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   29df0:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   29df2:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   29df4:	7305      	strb	r5, [r0, #12]
   29df6:	e7ed      	b.n	29dd4 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   29df8:	f7ff ff9a 	bl	29d30 <usbd_evt_alloc>
			if (!ev) {
   29dfc:	b320      	cbz	r0, 29e48 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   29dfe:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   29e00:	4b12      	ldr	r3, [pc, #72]	; (29e4c <usbd_event_transfer_data+0xa4>)
   29e02:	f012 0f80 	tst.w	r2, #128	; 0x80
   29e06:	f002 0108 	and.w	r1, r2, #8
   29e0a:	d011      	beq.n	29e30 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   29e0c:	b141      	cbz	r1, 29e20 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   29e0e:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   29e12:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   29e14:	2301      	movs	r3, #1
   29e16:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   29e18:	2302      	movs	r3, #2
   29e1a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   29e1c:	6084      	str	r4, [r0, #8]
   29e1e:	e7da      	b.n	29dd6 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   29e20:	f002 020f 	and.w	r2, r2, #15
   29e24:	2114      	movs	r1, #20
   29e26:	fb01 3302 	mla	r3, r1, r2, r3
   29e2a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   29e2e:	e7f0      	b.n	29e12 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   29e30:	b111      	cbz	r1, 29e38 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   29e32:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   29e36:	e7ec      	b.n	29e12 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   29e38:	f002 020f 	and.w	r2, r2, #15
   29e3c:	2114      	movs	r1, #20
   29e3e:	fb01 3302 	mla	r3, r1, r2, r3
   29e42:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   29e46:	e7e4      	b.n	29e12 <usbd_event_transfer_data+0x6a>
}
   29e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29e4a:	bf00      	nop
   29e4c:	40027000 	.word	0x40027000

00029e50 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
   29e50:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
   29e52:	4812      	ldr	r0, [pc, #72]	; (29e9c <usb_init+0x4c>)
   29e54:	f002 fcfa 	bl	2c84c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   29e58:	4b11      	ldr	r3, [pc, #68]	; (29ea0 <usb_init+0x50>)
   29e5a:	4298      	cmp	r0, r3
   29e5c:	d11a      	bne.n	29e94 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   29e5e:	4811      	ldr	r0, [pc, #68]	; (29ea4 <usb_init+0x54>)
   29e60:	f002 f968 	bl	2c134 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   29e64:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   29e66:	4810      	ldr	r0, [pc, #64]	; (29ea8 <usb_init+0x58>)
   29e68:	f002 f9aa 	bl	2c1c0 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   29e6c:	490f      	ldr	r1, [pc, #60]	; (29eac <usb_init+0x5c>)
   29e6e:	4810      	ldr	r0, [pc, #64]	; (29eb0 <usb_init+0x60>)
   29e70:	9400      	str	r4, [sp, #0]
   29e72:	f04f 33ff 	mov.w	r3, #4294967295
   29e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29e7a:	f003 fd95 	bl	2d9a8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   29e7e:	490d      	ldr	r1, [pc, #52]	; (29eb4 <usb_init+0x64>)
   29e80:	480b      	ldr	r0, [pc, #44]	; (29eb0 <usb_init+0x60>)
   29e82:	f006 f869 	bl	2ff58 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
   29e86:	480c      	ldr	r0, [pc, #48]	; (29eb8 <usb_init+0x68>)
   29e88:	490c      	ldr	r1, [pc, #48]	; (29ebc <usb_init+0x6c>)
   29e8a:	f006 f936 	bl	300fa <k_work_init>

	return 0;
   29e8e:	4620      	mov	r0, r4
}
   29e90:	b002      	add	sp, #8
   29e92:	bd10      	pop	{r4, pc}
		return -EIO;
   29e94:	f06f 0004 	mvn.w	r0, #4
   29e98:	e7fa      	b.n	29e90 <usb_init+0x40>
   29e9a:	bf00      	nop
   29e9c:	00029f01 	.word	0x00029f01
   29ea0:	0bad0000 	.word	0x0bad0000
   29ea4:	00030cab 	.word	0x00030cab
   29ea8:	00030914 	.word	0x00030914
   29eac:	20002040 	.word	0x20002040
   29eb0:	20000458 	.word	0x20000458
   29eb4:	00030c9d 	.word	0x00030c9d
   29eb8:	20000e1c 	.word	0x20000e1c
   29ebc:	0002a085 	.word	0x0002a085

00029ec0 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   29ec0:	b510      	push	{r4, lr}
   29ec2:	490e      	ldr	r1, [pc, #56]	; (29efc <hfxo_stop.constprop.0.isra.0+0x3c>)
   29ec4:	f3bf 8f5b 	dmb	ish
   29ec8:	2300      	movs	r3, #0
   29eca:	e851 2f00 	ldrex	r2, [r1]
   29ece:	2a01      	cmp	r2, #1
   29ed0:	d103      	bne.n	29eda <hfxo_stop.constprop.0.isra.0+0x1a>
   29ed2:	e841 3000 	strex	r0, r3, [r1]
   29ed6:	2800      	cmp	r0, #0
   29ed8:	d1f7      	bne.n	29eca <hfxo_stop.constprop.0.isra.0+0xa>
   29eda:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   29ede:	d10c      	bne.n	29efa <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   29ee0:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   29ee4:	3914      	subs	r1, #20
   29ee6:	4620      	mov	r0, r4
   29ee8:	f004 ffda 	bl	2eea0 <onoff_cancel>

	if (rv == -EALREADY) {
   29eec:	3078      	adds	r0, #120	; 0x78
   29eee:	d104      	bne.n	29efa <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
   29ef0:	4620      	mov	r0, r4
}
   29ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29ef6:	f004 bfae 	b.w	2ee56 <onoff_release>
   29efa:	bd10      	pop	{r4, pc}
   29efc:	20000e14 	.word	0x20000e14

00029f00 <usbd_event_handler>:
{
   29f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   29f02:	4606      	mov	r6, r0
   29f04:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   29f06:	2214      	movs	r2, #20
   29f08:	2100      	movs	r1, #0
   29f0a:	a803      	add	r0, sp, #12
   29f0c:	f005 fa33 	bl	2f376 <memset>
	switch (p_event->type) {
   29f10:	7833      	ldrb	r3, [r6, #0]
   29f12:	3b01      	subs	r3, #1
   29f14:	2b05      	cmp	r3, #5
   29f16:	d821      	bhi.n	29f5c <usbd_event_handler+0x5c>
   29f18:	e8df f003 	tbb	[pc, r3]
   29f1c:	1414037a 	.word	0x1414037a
   29f20:	166a      	.short	0x166a
   29f22:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   29f24:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   29f28:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   29f2a:	f7ff ff01 	bl	29d30 <usbd_evt_alloc>
		if (!ev) {
   29f2e:	4603      	mov	r3, r0
   29f30:	b1a0      	cbz	r0, 29f5c <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   29f32:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   29f34:	f100 0208 	add.w	r2, r0, #8
   29f38:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   29f3c:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   29f40:	4618      	mov	r0, r3
   29f42:	e01d      	b.n	29f80 <usbd_event_handler+0x80>
	switch (p_event->type) {
   29f44:	2304      	movs	r3, #4
   29f46:	e7ed      	b.n	29f24 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   29f48:	78b7      	ldrb	r7, [r6, #2]
   29f4a:	4638      	mov	r0, r7
   29f4c:	f7ff fe9c 	bl	29c88 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   29f50:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   29f52:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   29f54:	b123      	cbz	r3, 29f60 <usbd_event_handler+0x60>
   29f56:	3b01      	subs	r3, #1
   29f58:	2b02      	cmp	r3, #2
   29f5a:	d943      	bls.n	29fe4 <usbd_event_handler+0xe4>
}
   29f5c:	b009      	add	sp, #36	; 0x24
   29f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   29f60:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   29f62:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   29f64:	d513      	bpl.n	29f8e <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   29f66:	2d00      	cmp	r5, #0
   29f68:	d1f8      	bne.n	29f5c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   29f6a:	f7ff fee1 	bl	29d30 <usbd_evt_alloc>
			if (!ev) {
   29f6e:	4603      	mov	r3, r0
   29f70:	2800      	cmp	r0, #0
   29f72:	d0f3      	beq.n	29f5c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   29f74:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   29f76:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   29f78:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   29f7a:	2203      	movs	r2, #3
   29f7c:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   29f7e:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   29f80:	f7ff feba 	bl	29cf8 <usbd_evt_put>
}
   29f84:	b009      	add	sp, #36	; 0x24
   29f86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   29f8a:	f7ff bead 	b.w	29ce8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   29f8e:	b155      	cbz	r5, 29fa6 <usbd_event_handler+0xa6>
   29f90:	2d01      	cmp	r5, #1
   29f92:	d1e3      	bne.n	29f5c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   29f94:	f7ff fecc 	bl	29d30 <usbd_evt_alloc>
			if (!ev) {
   29f98:	4603      	mov	r3, r0
   29f9a:	2800      	cmp	r0, #0
   29f9c:	d0de      	beq.n	29f5c <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   29f9e:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   29fa0:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   29fa2:	7305      	strb	r5, [r0, #12]
   29fa4:	e7eb      	b.n	29f7e <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   29fa6:	f7ff fec3 	bl	29d30 <usbd_evt_alloc>
			if (!ev) {
   29faa:	4607      	mov	r7, r0
   29fac:	2800      	cmp	r0, #0
   29fae:	d0d5      	beq.n	29f5c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   29fb0:	2301      	movs	r3, #1
   29fb2:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   29fb4:	2302      	movs	r3, #2
   29fb6:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   29fb8:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   29fba:	f104 010c 	add.w	r1, r4, #12
   29fbe:	78b0      	ldrb	r0, [r6, #2]
   29fc0:	f005 ff1e 	bl	2fe00 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   29fc4:	4a13      	ldr	r2, [pc, #76]	; (2a014 <usbd_event_handler+0x114>)
   29fc6:	68e1      	ldr	r1, [r4, #12]
   29fc8:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   29fcc:	428b      	cmp	r3, r1
   29fce:	d906      	bls.n	29fde <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   29fd0:	1a5b      	subs	r3, r3, r1
   29fd2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   29fd6:	f002 fe75 	bl	2ccc4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   29fda:	4638      	mov	r0, r7
   29fdc:	e7d0      	b.n	29f80 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   29fde:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   29fe2:	e7fa      	b.n	29fda <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   29fe4:	4630      	mov	r0, r6
}
   29fe6:	b009      	add	sp, #36	; 0x24
   29fe8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   29fec:	f7ff bedc 	b.w	29da8 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   29ff0:	a801      	add	r0, sp, #4
   29ff2:	f002 fe41 	bl	2cc78 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   29ff6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   29ffa:	2b05      	cmp	r3, #5
   29ffc:	d104      	bne.n	2a008 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   29ffe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2a002:	f013 0f60 	tst.w	r3, #96	; 0x60
   2a006:	d0a9      	beq.n	29f5c <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   2a008:	4b03      	ldr	r3, [pc, #12]	; (2a018 <usbd_event_handler+0x118>)
   2a00a:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   2a00c:	2401      	movs	r4, #1
   2a00e:	e78c      	b.n	29f2a <usbd_event_handler+0x2a>
	switch (p_event->type) {
   2a010:	2402      	movs	r4, #2
   2a012:	e78a      	b.n	29f2a <usbd_event_handler+0x2a>
   2a014:	20000df4 	.word	0x20000df4
   2a018:	20000f60 	.word	0x20000f60

0002a01c <eps_ctx_init>:
{
   2a01c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   2a01e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2a020:	f064 007f 	orn	r0, r4, #127	; 0x7f
   2a024:	b2c0      	uxtb	r0, r0
   2a026:	f7ff fe2f 	bl	29c88 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   2a02a:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   2a02c:	f005 f9c1 	bl	2f3b2 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   2a030:	2c08      	cmp	r4, #8
   2a032:	d1f5      	bne.n	2a020 <eps_ctx_init+0x4>
   2a034:	4d0e      	ldr	r5, [pc, #56]	; (2a070 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2a036:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   2a038:	b2e0      	uxtb	r0, r4
   2a03a:	f7ff fe25 	bl	29c88 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   2a03e:	6903      	ldr	r3, [r0, #16]
   2a040:	b903      	cbnz	r3, 2a044 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   2a042:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2a044:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   2a046:	f005 f9b4 	bl	2f3b2 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2a04a:	2c08      	cmp	r4, #8
   2a04c:	f105 0540 	add.w	r5, r5, #64	; 0x40
   2a050:	d1f2      	bne.n	2a038 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   2a052:	4808      	ldr	r0, [pc, #32]	; (2a074 <eps_ctx_init+0x58>)
   2a054:	f005 f9ad 	bl	2f3b2 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   2a058:	4b07      	ldr	r3, [pc, #28]	; (2a078 <eps_ctx_init+0x5c>)
   2a05a:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
   2a05e:	b912      	cbnz	r2, 2a066 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   2a060:	4a06      	ldr	r2, [pc, #24]	; (2a07c <eps_ctx_init+0x60>)
   2a062:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   2a066:	4806      	ldr	r0, [pc, #24]	; (2a080 <eps_ctx_init+0x64>)
   2a068:	f005 f9a3 	bl	2f3b2 <ep_ctx_reset>
}
   2a06c:	2000      	movs	r0, #0
   2a06e:	bd38      	pop	{r3, r4, r5, pc}
   2a070:	20001484 	.word	0x20001484
   2a074:	20000f40 	.word	0x20000f40
   2a078:	20000df4 	.word	0x20000df4
   2a07c:	20001084 	.word	0x20001084
   2a080:	20001060 	.word	0x20001060

0002a084 <usbd_work_handler>:
{
   2a084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   2a088:	4ca7      	ldr	r4, [pc, #668]	; (2a328 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a08a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 2a32c <usbd_work_handler+0x2a8>
{
   2a08e:	b085      	sub	sp, #20
   2a090:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   2a092:	f7ff fe37 	bl	29d04 <usbd_evt_get>
   2a096:	b910      	cbnz	r0, 2a09e <usbd_work_handler+0x1a>
}
   2a098:	b005      	add	sp, #20
   2a09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   2a09e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   2a0a2:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a0a4:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   2a0a8:	b93b      	cbnz	r3, 2a0ba <usbd_work_handler+0x36>
   2a0aa:	2a00      	cmp	r2, #0
   2a0ac:	f000 8088 	beq.w	2a1c0 <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a0b0:	489e      	ldr	r0, [pc, #632]	; (2a32c <usbd_work_handler+0x2a8>)
   2a0b2:	4649      	mov	r1, r9
   2a0b4:	f005 ff21 	bl	2fefa <k_mem_slab_free>
}
   2a0b8:	e7eb      	b.n	2a092 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   2a0ba:	2a04      	cmp	r2, #4
   2a0bc:	d844      	bhi.n	2a148 <usbd_work_handler+0xc4>
   2a0be:	e8df f012 	tbh	[pc, r2, lsl #1]
   2a0c2:	007f      	.short	0x007f
   2a0c4:	01020005 	.word	0x01020005
   2a0c8:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
   2a0cc:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   2a0ce:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   2a0d0:	2b03      	cmp	r3, #3
   2a0d2:	d839      	bhi.n	2a148 <usbd_work_handler+0xc4>
   2a0d4:	e8df f003 	tbb	[pc, r3]
   2a0d8:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   2a0dc:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   2a0de:	2208      	movs	r2, #8
   2a0e0:	2100      	movs	r1, #0
   2a0e2:	4630      	mov	r0, r6
   2a0e4:	f005 f947 	bl	2f376 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2a0e8:	4b91      	ldr	r3, [pc, #580]	; (2a330 <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2a0ea:	4892      	ldr	r0, [pc, #584]	; (2a334 <usbd_work_handler+0x2b0>)
   2a0ec:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   2a0f0:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   2a0f2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   2a0f6:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   2a0f8:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   2a0fc:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   2a100:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2a104:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   2a106:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   2a10a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   2a10e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   2a112:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   2a114:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   2a118:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   2a11c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   2a120:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   2a122:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2a124:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   2a126:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2a128:	f005 f91a 	bl	2f360 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   2a12c:	682b      	ldr	r3, [r5, #0]
   2a12e:	7a68      	ldrb	r0, [r5, #9]
   2a130:	2100      	movs	r1, #0
   2a132:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   2a134:	f996 3000 	ldrsb.w	r3, [r6]
   2a138:	2b00      	cmp	r3, #0
   2a13a:	db08      	blt.n	2a14e <usbd_work_handler+0xca>
   2a13c:	88f3      	ldrh	r3, [r6, #6]
   2a13e:	b133      	cbz	r3, 2a14e <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
   2a140:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   2a144:	f002 fdbe 	bl	2ccc4 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a148:	4649      	mov	r1, r9
   2a14a:	4640      	mov	r0, r8
   2a14c:	e7b2      	b.n	2a0b4 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
   2a14e:	2300      	movs	r3, #0
   2a150:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   2a154:	e7f8      	b.n	2a148 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
   2a156:	7f6b      	ldrb	r3, [r5, #29]
   2a158:	2b00      	cmp	r3, #0
   2a15a:	d0f5      	beq.n	2a148 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
   2a15c:	7f2b      	ldrb	r3, [r5, #28]
   2a15e:	2b00      	cmp	r3, #0
   2a160:	d0f2      	beq.n	2a148 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
   2a162:	2600      	movs	r6, #0
   2a164:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2a166:	f04f 32ff 	mov.w	r2, #4294967295
   2a16a:	4873      	ldr	r0, [pc, #460]	; (2a338 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
   2a16c:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2a16e:	f04f 33ff 	mov.w	r3, #4294967295
   2a172:	f005 f931 	bl	2f3d8 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   2a176:	696b      	ldr	r3, [r5, #20]
   2a178:	9301      	str	r3, [sp, #4]
   2a17a:	686b      	ldr	r3, [r5, #4]
   2a17c:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   2a180:	a901      	add	r1, sp, #4
   2a182:	7a68      	ldrb	r0, [r5, #9]
   2a184:	f002 fba4 	bl	2c8d0 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   2a188:	486b      	ldr	r0, [pc, #428]	; (2a338 <usbd_work_handler+0x2b4>)
   2a18a:	f005 f927 	bl	2f3dc <k_mutex_unlock.isra.0>
   2a18e:	e7db      	b.n	2a148 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   2a190:	682b      	ldr	r3, [r5, #0]
   2a192:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   2a194:	7a68      	ldrb	r0, [r5, #9]
   2a196:	4798      	blx	r3
		break;
   2a198:	e7d6      	b.n	2a148 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   2a19a:	7aab      	ldrb	r3, [r5, #10]
   2a19c:	b96b      	cbnz	r3, 2a1ba <usbd_work_handler+0x136>
   2a19e:	7feb      	ldrb	r3, [r5, #31]
   2a1a0:	b95b      	cbnz	r3, 2a1ba <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2a1a2:	4865      	ldr	r0, [pc, #404]	; (2a338 <usbd_work_handler+0x2b4>)
   2a1a4:	f04f 32ff 	mov.w	r2, #4294967295
   2a1a8:	f04f 33ff 	mov.w	r3, #4294967295
   2a1ac:	f005 f914 	bl	2f3d8 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   2a1b0:	f002 fdb8 	bl	2cd24 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   2a1b4:	4860      	ldr	r0, [pc, #384]	; (2a338 <usbd_work_handler+0x2b4>)
   2a1b6:	f005 f911 	bl	2f3dc <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   2a1ba:	682b      	ldr	r3, [r5, #0]
   2a1bc:	2102      	movs	r1, #2
   2a1be:	e7e9      	b.n	2a194 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
   2a1c0:	7a02      	ldrb	r2, [r0, #8]
   2a1c2:	2a04      	cmp	r2, #4
   2a1c4:	d8c0      	bhi.n	2a148 <usbd_work_handler+0xc4>
   2a1c6:	e8df f002 	tbb	[pc, r2]
   2a1ca:	0359      	.short	0x0359
   2a1cc:	6723      	.short	0x6723
   2a1ce:	73          	.byte	0x73
   2a1cf:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   2a1d0:	f002 fb06 	bl	2c7e0 <nrfx_usbd_is_enabled>
   2a1d4:	4605      	mov	r5, r0
   2a1d6:	2800      	cmp	r0, #0
   2a1d8:	d1b6      	bne.n	2a148 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
   2a1da:	f002 fa3d 	bl	2c658 <nrfx_usbd_enable>
   2a1de:	f3bf 8f5b 	dmb	ish
   2a1e2:	4956      	ldr	r1, [pc, #344]	; (2a33c <usbd_work_handler+0x2b8>)
   2a1e4:	2301      	movs	r3, #1
   2a1e6:	e851 2f00 	ldrex	r2, [r1]
   2a1ea:	2a00      	cmp	r2, #0
   2a1ec:	d103      	bne.n	2a1f6 <usbd_work_handler+0x172>
   2a1ee:	e841 3000 	strex	r0, r3, [r1]
   2a1f2:	2800      	cmp	r0, #0
   2a1f4:	d1f7      	bne.n	2a1e6 <usbd_work_handler+0x162>
   2a1f6:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   2a1fa:	d1a5      	bne.n	2a148 <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2a1fc:	f841 5c08 	str.w	r5, [r1, #-8]
   2a200:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2a204:	69e0      	ldr	r0, [r4, #28]
   2a206:	6163      	str	r3, [r4, #20]
   2a208:	3914      	subs	r1, #20
   2a20a:	f004 fdcc 	bl	2eda6 <onoff_request>
   2a20e:	e79b      	b.n	2a148 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
   2a210:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2a212:	f065 007f 	orn	r0, r5, #127	; 0x7f
   2a216:	b2c0      	uxtb	r0, r0
   2a218:	f7ff fd36 	bl	29c88 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2a21c:	7a03      	ldrb	r3, [r0, #8]
   2a21e:	b113      	cbz	r3, 2a226 <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a220:	7a40      	ldrb	r0, [r0, #9]
   2a222:	f002 ff2f 	bl	2d084 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2a226:	3501      	adds	r5, #1
   2a228:	2d08      	cmp	r5, #8
   2a22a:	d1f2      	bne.n	2a212 <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
   2a22c:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   2a230:	b11b      	cbz	r3, 2a23a <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a232:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   2a236:	f002 ff25 	bl	2d084 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   2a23a:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   2a23c:	b2e8      	uxtb	r0, r5
   2a23e:	f7ff fd23 	bl	29c88 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2a242:	7a03      	ldrb	r3, [r0, #8]
   2a244:	b113      	cbz	r3, 2a24c <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a246:	7a40      	ldrb	r0, [r0, #9]
   2a248:	f002 ff1c 	bl	2d084 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   2a24c:	3501      	adds	r5, #1
   2a24e:	2d08      	cmp	r5, #8
   2a250:	d1f4      	bne.n	2a23c <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
   2a252:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   2a256:	b11b      	cbz	r3, 2a260 <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a258:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   2a25c:	f002 ff12 	bl	2d084 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   2a260:	2001      	movs	r0, #1
   2a262:	f002 fa9f 	bl	2c7a4 <nrfx_usbd_start>
		ctx->ready = true;
   2a266:	2301      	movs	r3, #1
   2a268:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   2a26c:	6823      	ldr	r3, [r4, #0]
   2a26e:	2b00      	cmp	r3, #0
   2a270:	f43f af6a 	beq.w	2a148 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   2a274:	2100      	movs	r1, #0
   2a276:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   2a278:	4798      	blx	r3
   2a27a:	e765      	b.n	2a148 <usbd_work_handler+0xc4>
		ctx->ready = false;
   2a27c:	2500      	movs	r5, #0
   2a27e:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   2a282:	f002 febb 	bl	2cffc <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   2a286:	f7ff fe1b 	bl	29ec0 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   2a28a:	6823      	ldr	r3, [r4, #0]
   2a28c:	2b00      	cmp	r3, #0
   2a28e:	f43f af5b 	beq.w	2a148 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   2a292:	4629      	mov	r1, r5
   2a294:	2004      	movs	r0, #4
   2a296:	e7ef      	b.n	2a278 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
   2a298:	2b00      	cmp	r3, #0
   2a29a:	f43f af55 	beq.w	2a148 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
   2a29e:	f002 faa9 	bl	2c7f4 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   2a2a2:	6823      	ldr	r3, [r4, #0]
   2a2a4:	2b00      	cmp	r3, #0
   2a2a6:	f43f af4f 	beq.w	2a148 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   2a2aa:	2100      	movs	r1, #0
   2a2ac:	2005      	movs	r0, #5
   2a2ae:	e7e3      	b.n	2a278 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
   2a2b0:	6822      	ldr	r2, [r4, #0]
   2a2b2:	2a00      	cmp	r2, #0
   2a2b4:	f43f af48 	beq.w	2a148 <usbd_work_handler+0xc4>
   2a2b8:	2b00      	cmp	r3, #0
   2a2ba:	f43f af45 	beq.w	2a148 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
   2a2be:	2100      	movs	r1, #0
   2a2c0:	2006      	movs	r0, #6
   2a2c2:	4790      	blx	r2
   2a2c4:	e740      	b.n	2a148 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2a2c6:	f107 0510 	add.w	r5, r7, #16
   2a2ca:	f04f 33ff 	mov.w	r3, #4294967295
   2a2ce:	f04f 32ff 	mov.w	r2, #4294967295
   2a2d2:	4628      	mov	r0, r5
   2a2d4:	f005 f880 	bl	2f3d8 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   2a2d8:	f7ff fea0 	bl	2a01c <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   2a2dc:	4628      	mov	r0, r5
   2a2de:	f005 f87d 	bl	2f3dc <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   2a2e2:	f857 3c28 	ldr.w	r3, [r7, #-40]
   2a2e6:	2b00      	cmp	r3, #0
   2a2e8:	f43f af2e 	beq.w	2a148 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
   2a2ec:	2100      	movs	r1, #0
   2a2ee:	2001      	movs	r0, #1
   2a2f0:	e7c2      	b.n	2a278 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
   2a2f2:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   2a2f6:	b17b      	cbz	r3, 2a318 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
   2a2f8:	2501      	movs	r5, #1
   2a2fa:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   2a2fe:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   2a302:	f7ff fd15 	bl	29d30 <usbd_evt_alloc>
		if (!ev) {
   2a306:	b138      	cbz	r0, 2a318 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
   2a308:	4a0d      	ldr	r2, [pc, #52]	; (2a340 <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
   2a30a:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2a30c:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   2a30e:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   2a310:	f7ff fcf2 	bl	29cf8 <usbd_evt_put>
		usbd_work_schedule();
   2a314:	f7ff fce8 	bl	29ce8 <usbd_work_schedule>
			if (ctx->status_cb) {
   2a318:	f857 3c28 	ldr.w	r3, [r7, #-40]
   2a31c:	2b00      	cmp	r3, #0
   2a31e:	f43f af13 	beq.w	2a148 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
   2a322:	2100      	movs	r1, #0
   2a324:	200a      	movs	r0, #10
   2a326:	e7a7      	b.n	2a278 <usbd_work_handler+0x1f4>
   2a328:	20000df4 	.word	0x20000df4
   2a32c:	2000025c 	.word	0x2000025c
   2a330:	40027000 	.word	0x40027000
   2a334:	20000df8 	.word	0x20000df8
   2a338:	20000e2c 	.word	0x20000e2c
   2a33c:	20000e14 	.word	0x20000e14
   2a340:	20001060 	.word	0x20001060
	nrfx_power_usbevt_disable();
   2a344:	f005 fcd3 	bl	2fcee <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   2a348:	f002 fe58 	bl	2cffc <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   2a34c:	f002 f97a 	bl	2c644 <nrfx_usbd_uninit>
	usbd_evt_flush();
   2a350:	f7ff fce0 	bl	29d14 <usbd_evt_flush>
	ret = eps_ctx_init();
   2a354:	f7ff fe62 	bl	2a01c <eps_ctx_init>
	nrfx_power_usbevt_enable();
   2a358:	f005 fcc2 	bl	2fce0 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   2a35c:	4801      	ldr	r0, [pc, #4]	; (2a364 <usbd_work_handler+0x2e0>)
   2a35e:	f002 fa75 	bl	2c84c <nrfx_usbd_init>
}
   2a362:	e6f1      	b.n	2a148 <usbd_work_handler+0xc4>
   2a364:	00029f01 	.word	0x00029f01

0002a368 <usb_dc_attach>:
{
   2a368:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   2a36a:	4d16      	ldr	r5, [pc, #88]	; (2a3c4 <usb_dc_attach+0x5c>)
   2a36c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   2a370:	bb2c      	cbnz	r4, 2a3be <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
   2a372:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2a376:	f005 fe03 	bl	2ff80 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   2a37a:	4620      	mov	r0, r4
   2a37c:	f000 fb10 	bl	2a9a0 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2a380:	4622      	mov	r2, r4
   2a382:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
   2a384:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2a386:	2027      	movs	r0, #39	; 0x27
   2a388:	f7ff f87e 	bl	29488 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
   2a38c:	f005 fca8 	bl	2fce0 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   2a390:	f7ff fe44 	bl	2a01c <eps_ctx_init>
	if (ret == 0) {
   2a394:	4604      	mov	r4, r0
   2a396:	b910      	cbnz	r0, 2a39e <usb_dc_attach+0x36>
		ctx->attached = true;
   2a398:	2301      	movs	r3, #1
   2a39a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   2a39e:	4b0a      	ldr	r3, [pc, #40]	; (2a3c8 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   2a3a0:	681b      	ldr	r3, [r3, #0]
   2a3a2:	b10b      	cbz	r3, 2a3a8 <usb_dc_attach+0x40>
		usbd_work_schedule();
   2a3a4:	f7ff fca0 	bl	29ce8 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   2a3a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a3ac:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   2a3b0:	07db      	lsls	r3, r3, #31
   2a3b2:	d502      	bpl.n	2a3ba <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   2a3b4:	2000      	movs	r0, #0
   2a3b6:	f7ff fcdd 	bl	29d74 <usb_dc_power_event_handler>
}
   2a3ba:	4620      	mov	r0, r4
   2a3bc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2a3be:	2400      	movs	r4, #0
   2a3c0:	e7fb      	b.n	2a3ba <usb_dc_attach+0x52>
   2a3c2:	bf00      	nop
   2a3c4:	20000df4 	.word	0x20000df4
   2a3c8:	200002dc 	.word	0x200002dc

0002a3cc <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   2a3cc:	4b07      	ldr	r3, [pc, #28]	; (2a3ec <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   2a3ce:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2a3d2:	b13a      	cbz	r2, 2a3e4 <usb_dc_set_address+0x18>
   2a3d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
   2a3d8:	2b00      	cmp	r3, #0
   2a3da:	bf14      	ite	ne
   2a3dc:	2000      	movne	r0, #0
   2a3de:	f06f 0012 	mvneq.w	r0, #18
   2a3e2:	4770      	bx	lr
   2a3e4:	f06f 0012 	mvn.w	r0, #18
}
   2a3e8:	4770      	bx	lr
   2a3ea:	bf00      	nop
   2a3ec:	20000df4 	.word	0x20000df4

0002a3f0 <usb_dc_ep_configure>:
{
   2a3f0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   2a3f2:	4b10      	ldr	r3, [pc, #64]	; (2a434 <usb_dc_ep_configure+0x44>)
	if (!dev_attached()) {
   2a3f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   2a3f8:	4604      	mov	r4, r0
	if (!dev_attached()) {
   2a3fa:	b1c3      	cbz	r3, 2a42e <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   2a3fc:	7805      	ldrb	r5, [r0, #0]
   2a3fe:	4628      	mov	r0, r5
   2a400:	f7ff fc42 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a404:	b910      	cbnz	r0, 2a40c <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   2a406:	f06f 0015 	mvn.w	r0, #21
}
   2a40a:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   2a40c:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   2a40e:	7923      	ldrb	r3, [r4, #4]
   2a410:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   2a412:	8863      	ldrh	r3, [r4, #2]
   2a414:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   2a416:	7820      	ldrb	r0, [r4, #0]
   2a418:	8861      	ldrh	r1, [r4, #2]
   2a41a:	f010 0f08 	tst.w	r0, #8
   2a41e:	d102      	bne.n	2a426 <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   2a420:	1e4b      	subs	r3, r1, #1
   2a422:	420b      	tst	r3, r1
   2a424:	d1ef      	bne.n	2a406 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   2a426:	f005 fce6 	bl	2fdf6 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   2a42a:	2000      	movs	r0, #0
   2a42c:	e7ed      	b.n	2a40a <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   2a42e:	f06f 0012 	mvn.w	r0, #18
   2a432:	e7ea      	b.n	2a40a <usb_dc_ep_configure+0x1a>
   2a434:	20000df4 	.word	0x20000df4

0002a438 <usb_dc_ep_set_stall>:
{
   2a438:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   2a43a:	4b12      	ldr	r3, [pc, #72]	; (2a484 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   2a43c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2a440:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   2a442:	b1ca      	cbz	r2, 2a478 <usb_dc_ep_set_stall+0x40>
   2a444:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2a448:	b1b3      	cbz	r3, 2a478 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   2a44a:	f7ff fc1d 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a44e:	4604      	mov	r4, r0
   2a450:	b1a8      	cbz	r0, 2a47e <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   2a452:	7a83      	ldrb	r3, [r0, #10]
   2a454:	2b01      	cmp	r3, #1
   2a456:	d012      	beq.n	2a47e <usb_dc_ep_set_stall+0x46>
   2a458:	d907      	bls.n	2a46a <usb_dc_ep_set_stall+0x32>
   2a45a:	3b02      	subs	r3, #2
   2a45c:	2b01      	cmp	r3, #1
   2a45e:	d907      	bls.n	2a470 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2a460:	6963      	ldr	r3, [r4, #20]
   2a462:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   2a464:	2000      	movs	r0, #0
   2a466:	60e0      	str	r0, [r4, #12]
}
   2a468:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
   2a46a:	f002 fc63 	bl	2cd34 <nrfx_usbd_setup_stall>
		break;
   2a46e:	e7f7      	b.n	2a460 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   2a470:	4628      	mov	r0, r5
   2a472:	f002 fbd3 	bl	2cc1c <nrfx_usbd_ep_stall>
		break;
   2a476:	e7f3      	b.n	2a460 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   2a478:	f06f 0012 	mvn.w	r0, #18
   2a47c:	e7f4      	b.n	2a468 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   2a47e:	f06f 0015 	mvn.w	r0, #21
   2a482:	e7f1      	b.n	2a468 <usb_dc_ep_set_stall+0x30>
   2a484:	20000df4 	.word	0x20000df4

0002a488 <usb_dc_ep_clear_stall>:
{
   2a488:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   2a48a:	4b0e      	ldr	r3, [pc, #56]	; (2a4c4 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   2a48c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2a490:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   2a492:	b182      	cbz	r2, 2a4b6 <usb_dc_ep_clear_stall+0x2e>
   2a494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2a498:	b16b      	cbz	r3, 2a4b6 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   2a49a:	f7ff fbf5 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a49e:	b168      	cbz	r0, 2a4bc <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   2a4a0:	f015 0408 	ands.w	r4, r5, #8
   2a4a4:	d10a      	bne.n	2a4bc <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   2a4a6:	4628      	mov	r0, r5
   2a4a8:	f002 fbda 	bl	2cc60 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   2a4ac:	4628      	mov	r0, r5
   2a4ae:	f002 fe3d 	bl	2d12c <nrfx_usbd_ep_stall_clear>
	return 0;
   2a4b2:	4620      	mov	r0, r4
}
   2a4b4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   2a4b6:	f06f 0012 	mvn.w	r0, #18
   2a4ba:	e7fb      	b.n	2a4b4 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   2a4bc:	f06f 0015 	mvn.w	r0, #21
   2a4c0:	e7f8      	b.n	2a4b4 <usb_dc_ep_clear_stall+0x2c>
   2a4c2:	bf00      	nop
   2a4c4:	20000df4 	.word	0x20000df4

0002a4c8 <usb_dc_ep_is_stalled>:
{
   2a4c8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   2a4ca:	4b0c      	ldr	r3, [pc, #48]	; (2a4fc <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   2a4cc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2a4d0:	4605      	mov	r5, r0
   2a4d2:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   2a4d4:	b162      	cbz	r2, 2a4f0 <usb_dc_ep_is_stalled+0x28>
   2a4d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2a4da:	b14b      	cbz	r3, 2a4f0 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   2a4dc:	f7ff fbd4 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a4e0:	b148      	cbz	r0, 2a4f6 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   2a4e2:	b144      	cbz	r4, 2a4f6 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   2a4e4:	4628      	mov	r0, r5
   2a4e6:	f002 fba1 	bl	2cc2c <nrfx_usbd_ep_stall_check>
   2a4ea:	7020      	strb	r0, [r4, #0]
	return 0;
   2a4ec:	2000      	movs	r0, #0
}
   2a4ee:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   2a4f0:	f06f 0012 	mvn.w	r0, #18
   2a4f4:	e7fb      	b.n	2a4ee <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   2a4f6:	f06f 0015 	mvn.w	r0, #21
   2a4fa:	e7f8      	b.n	2a4ee <usb_dc_ep_is_stalled+0x26>
   2a4fc:	20000df4 	.word	0x20000df4

0002a500 <usb_dc_ep_enable>:
{
   2a500:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   2a502:	4e13      	ldr	r6, [pc, #76]	; (2a550 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   2a504:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
   2a508:	4604      	mov	r4, r0
	if (!dev_attached()) {
   2a50a:	b1c3      	cbz	r3, 2a53e <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
   2a50c:	f7ff fbbc 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a510:	4605      	mov	r5, r0
   2a512:	b1b8      	cbz	r0, 2a544 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   2a514:	0723      	lsls	r3, r4, #28
   2a516:	d405      	bmi.n	2a524 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   2a518:	4620      	mov	r0, r4
   2a51a:	f002 fba1 	bl	2cc60 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   2a51e:	4620      	mov	r0, r4
   2a520:	f002 fe04 	bl	2d12c <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   2a524:	7a2b      	ldrb	r3, [r5, #8]
   2a526:	b983      	cbnz	r3, 2a54a <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
   2a528:	2301      	movs	r3, #1
   2a52a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   2a52c:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   2a530:	b90b      	cbnz	r3, 2a536 <usb_dc_ep_enable+0x36>
	return 0;
   2a532:	2000      	movs	r0, #0
}
   2a534:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   2a536:	4620      	mov	r0, r4
   2a538:	f002 fda4 	bl	2d084 <nrfx_usbd_ep_enable>
   2a53c:	e7f9      	b.n	2a532 <usb_dc_ep_enable+0x32>
		return -ENODEV;
   2a53e:	f06f 0012 	mvn.w	r0, #18
   2a542:	e7f7      	b.n	2a534 <usb_dc_ep_enable+0x34>
		return -EINVAL;
   2a544:	f06f 0015 	mvn.w	r0, #21
   2a548:	e7f4      	b.n	2a534 <usb_dc_ep_enable+0x34>
		return -EALREADY;
   2a54a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2a54e:	e7f1      	b.n	2a534 <usb_dc_ep_enable+0x34>
   2a550:	20000df4 	.word	0x20000df4

0002a554 <usb_dc_ep_write>:
{
   2a554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   2a558:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 2a640 <usb_dc_ep_write+0xec>
{
   2a55c:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
   2a55e:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   2a562:	b085      	sub	sp, #20
   2a564:	4607      	mov	r7, r0
   2a566:	4689      	mov	r9, r1
   2a568:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
   2a56a:	2b00      	cmp	r3, #0
   2a56c:	d061      	beq.n	2a632 <usb_dc_ep_write+0xde>
   2a56e:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   2a572:	2b00      	cmp	r3, #0
   2a574:	d05d      	beq.n	2a632 <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   2a576:	0603      	lsls	r3, r0, #24
   2a578:	d55e      	bpl.n	2a638 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
   2a57a:	f7ff fb85 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a57e:	4604      	mov	r4, r0
   2a580:	2800      	cmp	r0, #0
   2a582:	d059      	beq.n	2a638 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
   2a584:	7a03      	ldrb	r3, [r0, #8]
   2a586:	2b00      	cmp	r3, #0
   2a588:	d056      	beq.n	2a638 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2a58a:	f04f 33ff 	mov.w	r3, #4294967295
   2a58e:	f04f 32ff 	mov.w	r2, #4294967295
   2a592:	f108 0038 	add.w	r0, r8, #56	; 0x38
   2a596:	f004 ff1f 	bl	2f3d8 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   2a59a:	7fa3      	ldrb	r3, [r4, #30]
   2a59c:	b14b      	cbz	r3, 2a5b2 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   2a59e:	f108 0038 	add.w	r0, r8, #56	; 0x38
   2a5a2:	f004 ff1b 	bl	2f3dc <k_mutex_unlock.isra.0>
		return -EAGAIN;
   2a5a6:	f06f 040a 	mvn.w	r4, #10
}
   2a5aa:	4620      	mov	r0, r4
   2a5ac:	b005      	add	sp, #20
   2a5ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   2a5b2:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
   2a5b4:	b1c5      	cbz	r5, 2a5e8 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   2a5b6:	b33b      	cbz	r3, 2a608 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
   2a5b8:	2301      	movs	r3, #1
   2a5ba:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   2a5bc:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   2a5c0:	a901      	add	r1, sp, #4
   2a5c2:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   2a5c4:	e9cd 9501 	strd	r9, r5, [sp, #4]
   2a5c8:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   2a5cc:	f002 f980 	bl	2c8d0 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   2a5d0:	4b1c      	ldr	r3, [pc, #112]	; (2a644 <usb_dc_ep_write+0xf0>)
   2a5d2:	4298      	cmp	r0, r3
   2a5d4:	d029      	beq.n	2a62a <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
   2a5d6:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
   2a5da:	bb1e      	cbnz	r6, 2a624 <usb_dc_ep_write+0xd0>
		result = -EIO;
   2a5dc:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
   2a5e0:	4819      	ldr	r0, [pc, #100]	; (2a648 <usb_dc_ep_write+0xf4>)
   2a5e2:	f004 fefb 	bl	2f3dc <k_mutex_unlock.isra.0>
	return result;
   2a5e6:	e7e0      	b.n	2a5aa <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
   2a5e8:	7fe2      	ldrb	r2, [r4, #31]
   2a5ea:	b102      	cbz	r2, 2a5ee <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
   2a5ec:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   2a5ee:	2b00      	cmp	r3, #0
   2a5f0:	d1e2      	bne.n	2a5b8 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   2a5f2:	f002 fba7 	bl	2cd44 <nrfx_usbd_last_setup_dir_get>
   2a5f6:	42b8      	cmp	r0, r7
   2a5f8:	d0de      	beq.n	2a5b8 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
   2a5fa:	f002 fb93 	bl	2cd24 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   2a5fe:	4812      	ldr	r0, [pc, #72]	; (2a648 <usb_dc_ep_write+0xf4>)
   2a600:	f004 feec 	bl	2f3dc <k_mutex_unlock.isra.0>
		return 0;
   2a604:	2400      	movs	r4, #0
   2a606:	e7d0      	b.n	2a5aa <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   2a608:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   2a60c:	42ab      	cmp	r3, r5
   2a60e:	d9f0      	bls.n	2a5f2 <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   2a610:	6862      	ldr	r2, [r4, #4]
   2a612:	fbb5 f3f2 	udiv	r3, r5, r2
   2a616:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   2a61a:	2b00      	cmp	r3, #0
   2a61c:	d1e9      	bne.n	2a5f2 <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
   2a61e:	2301      	movs	r3, #1
   2a620:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   2a622:	e7e6      	b.n	2a5f2 <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
   2a624:	f8c6 8000 	str.w	r8, [r6]
   2a628:	e7d8      	b.n	2a5dc <usb_dc_ep_write+0x88>
		if (ret_bytes) {
   2a62a:	b106      	cbz	r6, 2a62e <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
   2a62c:	6035      	str	r5, [r6, #0]
	int result = 0;
   2a62e:	2400      	movs	r4, #0
   2a630:	e7d6      	b.n	2a5e0 <usb_dc_ep_write+0x8c>
		return -ENODEV;
   2a632:	f06f 0412 	mvn.w	r4, #18
   2a636:	e7b8      	b.n	2a5aa <usb_dc_ep_write+0x56>
		return -EINVAL;
   2a638:	f06f 0415 	mvn.w	r4, #21
   2a63c:	e7b5      	b.n	2a5aa <usb_dc_ep_write+0x56>
   2a63e:	bf00      	nop
   2a640:	20000df4 	.word	0x20000df4
   2a644:	0bad0000 	.word	0x0bad0000
   2a648:	20000e2c 	.word	0x20000e2c

0002a64c <usb_dc_ep_read_wait>:
{
   2a64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a650:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   2a652:	4b20      	ldr	r3, [pc, #128]	; (2a6d4 <usb_dc_ep_read_wait+0x88>)
{
   2a654:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   2a656:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2a65a:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   2a65c:	2a00      	cmp	r2, #0
   2a65e:	d033      	beq.n	2a6c8 <usb_dc_ep_read_wait+0x7c>
   2a660:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2a664:	b383      	cbz	r3, 2a6c8 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2a666:	0603      	lsls	r3, r0, #24
   2a668:	d431      	bmi.n	2a6ce <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   2a66a:	b901      	cbnz	r1, 2a66e <usb_dc_ep_read_wait+0x22>
   2a66c:	bb7f      	cbnz	r7, 2a6ce <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   2a66e:	f7ff fb0b 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a672:	4604      	mov	r4, r0
   2a674:	b358      	cbz	r0, 2a6ce <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   2a676:	7a03      	ldrb	r3, [r0, #8]
   2a678:	b34b      	cbz	r3, 2a6ce <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2a67a:	f04f 33ff 	mov.w	r3, #4294967295
   2a67e:	4816      	ldr	r0, [pc, #88]	; (2a6d8 <usb_dc_ep_read_wait+0x8c>)
   2a680:	f04f 32ff 	mov.w	r2, #4294967295
   2a684:	f004 fea8 	bl	2f3d8 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   2a688:	68e3      	ldr	r3, [r4, #12]
   2a68a:	429f      	cmp	r7, r3
   2a68c:	46b8      	mov	r8, r7
   2a68e:	bf28      	it	cs
   2a690:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   2a692:	b946      	cbnz	r6, 2a6a6 <usb_dc_ep_read_wait+0x5a>
   2a694:	b93f      	cbnz	r7, 2a6a6 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   2a696:	b105      	cbz	r5, 2a69a <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   2a698:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   2a69a:	480f      	ldr	r0, [pc, #60]	; (2a6d8 <usb_dc_ep_read_wait+0x8c>)
   2a69c:	f004 fe9e 	bl	2f3dc <k_mutex_unlock.isra.0>
		return 0;
   2a6a0:	2000      	movs	r0, #0
}
   2a6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   2a6a6:	69a1      	ldr	r1, [r4, #24]
   2a6a8:	4642      	mov	r2, r8
   2a6aa:	4630      	mov	r0, r6
   2a6ac:	f004 fe58 	bl	2f360 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   2a6b0:	69a3      	ldr	r3, [r4, #24]
   2a6b2:	4443      	add	r3, r8
   2a6b4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   2a6b6:	68e3      	ldr	r3, [r4, #12]
   2a6b8:	eba3 0308 	sub.w	r3, r3, r8
   2a6bc:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   2a6be:	2d00      	cmp	r5, #0
   2a6c0:	d0eb      	beq.n	2a69a <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   2a6c2:	f8c5 8000 	str.w	r8, [r5]
   2a6c6:	e7e8      	b.n	2a69a <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   2a6c8:	f06f 0012 	mvn.w	r0, #18
   2a6cc:	e7e9      	b.n	2a6a2 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   2a6ce:	f06f 0015 	mvn.w	r0, #21
   2a6d2:	e7e6      	b.n	2a6a2 <usb_dc_ep_read_wait+0x56>
   2a6d4:	20000df4 	.word	0x20000df4
   2a6d8:	20000e2c 	.word	0x20000e2c

0002a6dc <usb_dc_ep_read_continue>:
{
   2a6dc:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   2a6de:	4d1e      	ldr	r5, [pc, #120]	; (2a758 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   2a6e0:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   2a6e4:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   2a6e6:	b382      	cbz	r2, 2a74a <usb_dc_ep_read_continue+0x6e>
   2a6e8:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   2a6ec:	b36a      	cbz	r2, 2a74a <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2a6ee:	061b      	lsls	r3, r3, #24
   2a6f0:	d42e      	bmi.n	2a750 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   2a6f2:	f7ff fac9 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a6f6:	4604      	mov	r4, r0
   2a6f8:	b350      	cbz	r0, 2a750 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   2a6fa:	7a03      	ldrb	r3, [r0, #8]
   2a6fc:	b343      	cbz	r3, 2a750 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2a6fe:	f04f 33ff 	mov.w	r3, #4294967295
   2a702:	f04f 32ff 	mov.w	r2, #4294967295
   2a706:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2a70a:	f004 fe65 	bl	2f3d8 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   2a70e:	68e3      	ldr	r3, [r4, #12]
   2a710:	b9b3      	cbnz	r3, 2a740 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   2a712:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   2a714:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   2a716:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   2a718:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   2a71a:	7f63      	ldrb	r3, [r4, #29]
   2a71c:	b183      	cbz	r3, 2a740 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   2a71e:	f7ff fb07 	bl	29d30 <usbd_evt_alloc>
			if (!ev) {
   2a722:	b930      	cbnz	r0, 2a732 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   2a724:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2a728:	f004 fe58 	bl	2f3dc <k_mutex_unlock.isra.0>
				return -ENOMEM;
   2a72c:	f06f 000b 	mvn.w	r0, #11
}
   2a730:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   2a732:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   2a734:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2a736:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   2a738:	f7ff fade 	bl	29cf8 <usbd_evt_put>
			usbd_work_schedule();
   2a73c:	f7ff fad4 	bl	29ce8 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   2a740:	4806      	ldr	r0, [pc, #24]	; (2a75c <usb_dc_ep_read_continue+0x80>)
   2a742:	f004 fe4b 	bl	2f3dc <k_mutex_unlock.isra.0>
	return 0;
   2a746:	2000      	movs	r0, #0
   2a748:	e7f2      	b.n	2a730 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   2a74a:	f06f 0012 	mvn.w	r0, #18
   2a74e:	e7ef      	b.n	2a730 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   2a750:	f06f 0015 	mvn.w	r0, #21
   2a754:	e7ec      	b.n	2a730 <usb_dc_ep_read_continue+0x54>
   2a756:	bf00      	nop
   2a758:	20000df4 	.word	0x20000df4
   2a75c:	20000e2c 	.word	0x20000e2c

0002a760 <usb_dc_ep_set_callback>:
{
   2a760:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   2a762:	4b08      	ldr	r3, [pc, #32]	; (2a784 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   2a764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   2a768:	460c      	mov	r4, r1
	if (!dev_attached()) {
   2a76a:	b12b      	cbz	r3, 2a778 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   2a76c:	f7ff fa8c 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a770:	b128      	cbz	r0, 2a77e <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   2a772:	6004      	str	r4, [r0, #0]
	return 0;
   2a774:	2000      	movs	r0, #0
}
   2a776:	bd10      	pop	{r4, pc}
		return -ENODEV;
   2a778:	f06f 0012 	mvn.w	r0, #18
   2a77c:	e7fb      	b.n	2a776 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   2a77e:	f06f 0015 	mvn.w	r0, #21
   2a782:	e7f8      	b.n	2a776 <usb_dc_ep_set_callback+0x16>
   2a784:	20000df4 	.word	0x20000df4

0002a788 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   2a788:	4b01      	ldr	r3, [pc, #4]	; (2a790 <usb_dc_set_status_callback+0x8>)
   2a78a:	6018      	str	r0, [r3, #0]
}
   2a78c:	4770      	bx	lr
   2a78e:	bf00      	nop
   2a790:	20000df4 	.word	0x20000df4

0002a794 <usb_dc_ep_mps>:
{
   2a794:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   2a796:	4b07      	ldr	r3, [pc, #28]	; (2a7b4 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   2a798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2a79c:	b123      	cbz	r3, 2a7a8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   2a79e:	f7ff fa73 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2a7a2:	b120      	cbz	r0, 2a7ae <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   2a7a4:	6840      	ldr	r0, [r0, #4]
}
   2a7a6:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2a7a8:	f06f 0012 	mvn.w	r0, #18
   2a7ac:	e7fb      	b.n	2a7a6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   2a7ae:	f06f 0015 	mvn.w	r0, #21
   2a7b2:	e7f8      	b.n	2a7a6 <usb_dc_ep_mps+0x12>
   2a7b4:	20000df4 	.word	0x20000df4

0002a7b8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   2a7b8:	4b08      	ldr	r3, [pc, #32]	; (2a7dc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2a7ba:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2a7bc:	1ac3      	subs	r3, r0, r3
{
   2a7be:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2a7c0:	4907      	ldr	r1, [pc, #28]	; (2a7e0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   2a7c2:	109b      	asrs	r3, r3, #2
{
   2a7c4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2a7c6:	4359      	muls	r1, r3
   2a7c8:	4806      	ldr	r0, [pc, #24]	; (2a7e4 <onoff_stop+0x2c>)
   2a7ca:	2240      	movs	r2, #64	; 0x40
   2a7cc:	f004 fe64 	bl	2f498 <stop>
	notify(mgr, res);
   2a7d0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2a7d2:	4601      	mov	r1, r0
	notify(mgr, res);
   2a7d4:	4620      	mov	r0, r4
}
   2a7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2a7da:	4718      	bx	r3
   2a7dc:	20001698 	.word	0x20001698
   2a7e0:	b6db6db7 	.word	0xb6db6db7
   2a7e4:	0003056c 	.word	0x0003056c

0002a7e8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2a7e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2a7ea:	4c0c      	ldr	r4, [pc, #48]	; (2a81c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2a7ec:	4a0c      	ldr	r2, [pc, #48]	; (2a820 <onoff_start+0x38>)
   2a7ee:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   2a7f0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2a7f2:	9300      	str	r3, [sp, #0]
{
   2a7f4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2a7f6:	460b      	mov	r3, r1
   2a7f8:	490a      	ldr	r1, [pc, #40]	; (2a824 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   2a7fa:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2a7fc:	4361      	muls	r1, r4
{
   2a7fe:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2a800:	4809      	ldr	r0, [pc, #36]	; (2a828 <onoff_start+0x40>)
   2a802:	f004 fe76 	bl	2f4f2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2a806:	1e01      	subs	r1, r0, #0
   2a808:	da05      	bge.n	2a816 <onoff_start+0x2e>
		notify(mgr, err);
   2a80a:	4630      	mov	r0, r6
   2a80c:	462b      	mov	r3, r5
	}
}
   2a80e:	b002      	add	sp, #8
   2a810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   2a814:	4718      	bx	r3
}
   2a816:	b002      	add	sp, #8
   2a818:	bd70      	pop	{r4, r5, r6, pc}
   2a81a:	bf00      	nop
   2a81c:	20001698 	.word	0x20001698
   2a820:	0002f55f 	.word	0x0002f55f
   2a824:	b6db6db7 	.word	0xb6db6db7
   2a828:	0003056c 	.word	0x0003056c

0002a82c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2a82c:	2200      	movs	r2, #0
{
   2a82e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2a830:	2101      	movs	r1, #1
{
   2a832:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2a834:	4610      	mov	r0, r2
   2a836:	f7fe fe27 	bl	29488 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2a83a:	480f      	ldr	r0, [pc, #60]	; (2a878 <clk_init+0x4c>)
   2a83c:	f001 f8bc 	bl	2b9b8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2a840:	4b0e      	ldr	r3, [pc, #56]	; (2a87c <clk_init+0x50>)
   2a842:	4298      	cmp	r0, r3
   2a844:	d115      	bne.n	2a872 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2a846:	f001 f8c7 	bl	2b9d8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2a84a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2a84c:	490c      	ldr	r1, [pc, #48]	; (2a880 <clk_init+0x54>)
   2a84e:	4630      	mov	r0, r6
   2a850:	f004 fa96 	bl	2ed80 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2a854:	2800      	cmp	r0, #0
   2a856:	db0b      	blt.n	2a870 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2a858:	2501      	movs	r5, #1
   2a85a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   2a85c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2a85e:	4908      	ldr	r1, [pc, #32]	; (2a880 <clk_init+0x54>)
   2a860:	f104 001c 	add.w	r0, r4, #28
   2a864:	f004 fa8c 	bl	2ed80 <onoff_manager_init>
		if (err < 0) {
   2a868:	2800      	cmp	r0, #0
   2a86a:	db01      	blt.n	2a870 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2a86c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   2a86e:	2000      	movs	r0, #0
}
   2a870:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2a872:	f06f 0004 	mvn.w	r0, #4
   2a876:	e7fb      	b.n	2a870 <clk_init+0x44>
   2a878:	0002a8b9 	.word	0x0002a8b9
   2a87c:	0bad0000 	.word	0x0bad0000
   2a880:	00030918 	.word	0x00030918

0002a884 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2a884:	b570      	push	{r4, r5, r6, lr}
   2a886:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2a888:	230c      	movs	r3, #12
   2a88a:	4809      	ldr	r0, [pc, #36]	; (2a8b0 <clkstarted_handle.constprop.0+0x2c>)
   2a88c:	434b      	muls	r3, r1
   2a88e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   2a890:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   2a894:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   2a896:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2a898:	4418      	add	r0, r3
	sub_data->cb = NULL;
   2a89a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   2a89c:	f004 fde9 	bl	2f472 <set_on_state>
	if (callback) {
   2a8a0:	b12d      	cbz	r5, 2a8ae <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2a8a2:	4632      	mov	r2, r6
   2a8a4:	462b      	mov	r3, r5
   2a8a6:	4803      	ldr	r0, [pc, #12]	; (2a8b4 <clkstarted_handle.constprop.0+0x30>)
}
   2a8a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2a8ac:	4718      	bx	r3
}
   2a8ae:	bd70      	pop	{r4, r5, r6, pc}
   2a8b0:	20001698 	.word	0x20001698
   2a8b4:	0003056c 	.word	0x0003056c

0002a8b8 <clock_event_handler>:
	switch (event) {
   2a8b8:	b110      	cbz	r0, 2a8c0 <clock_event_handler+0x8>
   2a8ba:	2801      	cmp	r0, #1
   2a8bc:	d004      	beq.n	2a8c8 <clock_event_handler+0x10>
   2a8be:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2a8c0:	4b03      	ldr	r3, [pc, #12]	; (2a8d0 <clock_event_handler+0x18>)
   2a8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2a8c4:	075b      	lsls	r3, r3, #29
   2a8c6:	d101      	bne.n	2a8cc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2a8c8:	f7ff bfdc 	b.w	2a884 <clkstarted_handle.constprop.0>
}
   2a8cc:	4770      	bx	lr
   2a8ce:	bf00      	nop
   2a8d0:	20001698 	.word	0x20001698

0002a8d4 <generic_hfclk_start>:
{
   2a8d4:	b508      	push	{r3, lr}
	__asm__ volatile(
   2a8d6:	f04f 0320 	mov.w	r3, #32
   2a8da:	f3ef 8111 	mrs	r1, BASEPRI
   2a8de:	f383 8812 	msr	BASEPRI_MAX, r3
   2a8e2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2a8e6:	4a12      	ldr	r2, [pc, #72]	; (2a930 <generic_hfclk_start+0x5c>)
   2a8e8:	6813      	ldr	r3, [r2, #0]
   2a8ea:	f043 0002 	orr.w	r0, r3, #2
   2a8ee:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   2a8f0:	07da      	lsls	r2, r3, #31
   2a8f2:	d408      	bmi.n	2a906 <generic_hfclk_start+0x32>
	__asm__ volatile(
   2a8f4:	f381 8811 	msr	BASEPRI, r1
   2a8f8:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2a8fc:	2001      	movs	r0, #1
}
   2a8fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2a902:	f005 b94b 	b.w	2fb9c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2a906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a90a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2a90e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2a912:	07d3      	lsls	r3, r2, #31
   2a914:	d5ee      	bpl.n	2a8f4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   2a916:	4807      	ldr	r0, [pc, #28]	; (2a934 <generic_hfclk_start+0x60>)
   2a918:	f004 fdab 	bl	2f472 <set_on_state>
   2a91c:	f381 8811 	msr	BASEPRI, r1
   2a920:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   2a924:	2000      	movs	r0, #0
}
   2a926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   2a92a:	f7ff bfab 	b.w	2a884 <clkstarted_handle.constprop.0>
   2a92e:	bf00      	nop
   2a930:	200016e8 	.word	0x200016e8
   2a934:	200016d8 	.word	0x200016d8

0002a938 <api_blocking_start>:
{
   2a938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2a93a:	2200      	movs	r2, #0
   2a93c:	2301      	movs	r3, #1
   2a93e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2a942:	4a09      	ldr	r2, [pc, #36]	; (2a968 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2a944:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2a948:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2a94a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2a94e:	f004 fdff 	bl	2f550 <api_start>
	if (err < 0) {
   2a952:	2800      	cmp	r0, #0
   2a954:	db05      	blt.n	2a962 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
   2a956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2a95a:	2300      	movs	r3, #0
   2a95c:	4668      	mov	r0, sp
   2a95e:	f002 ff05 	bl	2d76c <z_impl_k_sem_take>
}
   2a962:	b005      	add	sp, #20
   2a964:	f85d fb04 	ldr.w	pc, [sp], #4
   2a968:	0002f57d 	.word	0x0002f57d

0002a96c <generic_hfclk_stop>:
{
   2a96c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a96e:	f04f 0320 	mov.w	r3, #32
   2a972:	f3ef 8411 	mrs	r4, BASEPRI
   2a976:	f383 8812 	msr	BASEPRI_MAX, r3
   2a97a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   2a97e:	4a07      	ldr	r2, [pc, #28]	; (2a99c <generic_hfclk_stop+0x30>)
   2a980:	6813      	ldr	r3, [r2, #0]
   2a982:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   2a986:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   2a988:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   2a98a:	d402      	bmi.n	2a992 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2a98c:	2001      	movs	r0, #1
   2a98e:	f005 f941 	bl	2fc14 <nrfx_clock_stop>
	__asm__ volatile(
   2a992:	f384 8811 	msr	BASEPRI, r4
   2a996:	f3bf 8f6f 	isb	sy
}
   2a99a:	bd10      	pop	{r4, pc}
   2a99c:	200016e8 	.word	0x200016e8

0002a9a0 <z_nrf_clock_control_get_onoff>:
}
   2a9a0:	4a02      	ldr	r2, [pc, #8]	; (2a9ac <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   2a9a2:	b2c3      	uxtb	r3, r0
}
   2a9a4:	201c      	movs	r0, #28
   2a9a6:	fb03 2000 	mla	r0, r3, r0, r2
   2a9aa:	4770      	bx	lr
   2a9ac:	20001698 	.word	0x20001698

0002a9b0 <z_nrf_clock_control_lf_on>:
{
   2a9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a9b4:	4938      	ldr	r1, [pc, #224]	; (2aa98 <z_nrf_clock_control_lf_on+0xe8>)
   2a9b6:	f3bf 8f5b 	dmb	ish
   2a9ba:	4607      	mov	r7, r0
   2a9bc:	2201      	movs	r2, #1
   2a9be:	e851 3f00 	ldrex	r3, [r1]
   2a9c2:	e841 2000 	strex	r0, r2, [r1]
   2a9c6:	2800      	cmp	r0, #0
   2a9c8:	d1f9      	bne.n	2a9be <z_nrf_clock_control_lf_on+0xe>
   2a9ca:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   2a9ce:	b933      	cbnz	r3, 2a9de <z_nrf_clock_control_lf_on+0x2e>
   2a9d0:	4932      	ldr	r1, [pc, #200]	; (2aa9c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   2a9d2:	4833      	ldr	r0, [pc, #204]	; (2aaa0 <z_nrf_clock_control_lf_on+0xf0>)
   2a9d4:	604b      	str	r3, [r1, #4]
   2a9d6:	60cb      	str	r3, [r1, #12]
   2a9d8:	608a      	str	r2, [r1, #8]
   2a9da:	f004 f9e4 	bl	2eda6 <onoff_request>
	switch (start_mode) {
   2a9de:	1e7b      	subs	r3, r7, #1
   2a9e0:	2b01      	cmp	r3, #1
   2a9e2:	d82b      	bhi.n	2aa3c <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2a9e4:	2f01      	cmp	r7, #1
   2a9e6:	d107      	bne.n	2a9f8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2a9e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a9ec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2a9f0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2a9f4:	2b01      	cmp	r3, #1
   2a9f6:	d021      	beq.n	2aa3c <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2a9f8:	f005 faa8 	bl	2ff4c <k_is_in_isr>
   2a9fc:	4605      	mov	r5, r0
   2a9fe:	b9f8      	cbnz	r0, 2aa40 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   2aa00:	4b28      	ldr	r3, [pc, #160]	; (2aaa4 <z_nrf_clock_control_lf_on+0xf4>)
   2aa02:	781b      	ldrb	r3, [r3, #0]
   2aa04:	b1e3      	cbz	r3, 2aa40 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   2aa06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2aa0a:	2202      	movs	r2, #2
   2aa0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   2aa10:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2aa12:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2aaa8 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2aa16:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   2aa1a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2aa1e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   2aa22:	03d2      	lsls	r2, r2, #15
   2aa24:	d516      	bpl.n	2aa54 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2aa26:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2aa2a:	2b01      	cmp	r3, #1
   2aa2c:	d001      	beq.n	2aa32 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2aa2e:	2f01      	cmp	r7, #1
   2aa30:	d110      	bne.n	2aa54 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   2aa32:	b35d      	cbz	r5, 2aa8c <z_nrf_clock_control_lf_on+0xdc>
   2aa34:	f386 8811 	msr	BASEPRI, r6
   2aa38:	f3bf 8f6f 	isb	sy
}
   2aa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   2aa40:	f04f 0320 	mov.w	r3, #32
   2aa44:	f3ef 8611 	mrs	r6, BASEPRI
   2aa48:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa4c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2aa50:	2501      	movs	r5, #1
   2aa52:	e7de      	b.n	2aa12 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2aa54:	b1ad      	cbz	r5, 2aa82 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2aa56:	4630      	mov	r0, r6
   2aa58:	f7fe fcda 	bl	29410 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   2aa5c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2aa60:	2b00      	cmp	r3, #0
   2aa62:	d1da      	bne.n	2aa1a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2aa64:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   2aa68:	2a00      	cmp	r2, #0
   2aa6a:	d0d6      	beq.n	2aa1a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2aa6c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2aa70:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   2aa74:	2301      	movs	r3, #1
   2aa76:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   2aa7a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2aa7e:	60a3      	str	r3, [r4, #8]
}
   2aa80:	e7cb      	b.n	2aa1a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   2aa82:	2100      	movs	r1, #0
   2aa84:	2021      	movs	r0, #33	; 0x21
   2aa86:	f003 fab3 	bl	2dff0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2aa8a:	e7e7      	b.n	2aa5c <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   2aa8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2aa90:	2202      	movs	r2, #2
   2aa92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2aa96:	e7d1      	b.n	2aa3c <z_nrf_clock_control_lf_on+0x8c>
   2aa98:	20001694 	.word	0x20001694
   2aa9c:	20001684 	.word	0x20001684
   2aaa0:	200016b4 	.word	0x200016b4
   2aaa4:	20001bcf 	.word	0x20001bcf
   2aaa8:	e000e100 	.word	0xe000e100

0002aaac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   2aaac:	b508      	push	{r3, lr}
   2aaae:	4807      	ldr	r0, [pc, #28]	; (2aacc <uart_console_init+0x20>)
   2aab0:	f005 f9d5 	bl	2fe5e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   2aab4:	b138      	cbz	r0, 2aac6 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   2aab6:	4806      	ldr	r0, [pc, #24]	; (2aad0 <uart_console_init+0x24>)
   2aab8:	f7ff f890 	bl	29bdc <__stdout_hook_install>
	__printk_hook_install(console_out);
   2aabc:	4804      	ldr	r0, [pc, #16]	; (2aad0 <uart_console_init+0x24>)
   2aabe:	f7fc fcc5 	bl	2744c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2aac2:	2000      	movs	r0, #0
}
   2aac4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2aac6:	f06f 0012 	mvn.w	r0, #18
   2aaca:	e7fb      	b.n	2aac4 <uart_console_init+0x18>
   2aacc:	000305b4 	.word	0x000305b4
   2aad0:	0002aad5 	.word	0x0002aad5

0002aad4 <console_out>:
	if ('\n' == c) {
   2aad4:	280a      	cmp	r0, #10
{
   2aad6:	b538      	push	{r3, r4, r5, lr}
   2aad8:	4d07      	ldr	r5, [pc, #28]	; (2aaf8 <console_out+0x24>)
   2aada:	4604      	mov	r4, r0
	if ('\n' == c) {
   2aadc:	d104      	bne.n	2aae8 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   2aade:	68ab      	ldr	r3, [r5, #8]
   2aae0:	210d      	movs	r1, #13
   2aae2:	685b      	ldr	r3, [r3, #4]
   2aae4:	4628      	mov	r0, r5
   2aae6:	4798      	blx	r3
   2aae8:	68ab      	ldr	r3, [r5, #8]
   2aaea:	4803      	ldr	r0, [pc, #12]	; (2aaf8 <console_out+0x24>)
   2aaec:	685b      	ldr	r3, [r3, #4]
   2aaee:	b2e1      	uxtb	r1, r4
   2aaf0:	4798      	blx	r3
}
   2aaf2:	4620      	mov	r0, r4
   2aaf4:	bd38      	pop	{r3, r4, r5, pc}
   2aaf6:	bf00      	nop
   2aaf8:	000305b4 	.word	0x000305b4

0002aafc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   2aafc:	b530      	push	{r4, r5, lr}
	return port->config;
   2aafe:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2ab00:	7b05      	ldrb	r5, [r0, #12]
   2ab02:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   2ab06:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   2ab0a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2ab0c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2ab10:	d105      	bne.n	2ab1e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2ab12:	4620      	mov	r0, r4
   2ab14:	f001 f9e4 	bl	2bee0 <nrfx_gpiote_trigger_disable>

		return 0;
   2ab18:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   2ab1a:	b005      	add	sp, #20
   2ab1c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ab1e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   2ab20:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ab24:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   2ab28:	d114      	bne.n	2ab54 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2ab2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ab2e:	bf0c      	ite	eq
   2ab30:	2304      	moveq	r3, #4
   2ab32:	2305      	movne	r3, #5
   2ab34:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2ab38:	2300      	movs	r3, #0
   2ab3a:	4619      	mov	r1, r3
   2ab3c:	aa02      	add	r2, sp, #8
   2ab3e:	4620      	mov	r0, r4
   2ab40:	f001 f80c 	bl	2bb5c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2ab44:	4b1f      	ldr	r3, [pc, #124]	; (2abc4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   2ab46:	4298      	cmp	r0, r3
   2ab48:	d139      	bne.n	2abbe <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2ab4a:	2101      	movs	r1, #1
   2ab4c:	4620      	mov	r0, r4
   2ab4e:	f001 f97f 	bl	2be50 <nrfx_gpiote_trigger_enable>
	return 0;
   2ab52:	e7e1      	b.n	2ab18 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2ab54:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   2ab58:	d026      	beq.n	2aba8 <gpio_nrfx_pin_interrupt_configure+0xac>
   2ab5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   2ab5e:	bf14      	ite	ne
   2ab60:	2301      	movne	r3, #1
   2ab62:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ab64:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2ab68:	6883      	ldr	r3, [r0, #8]
   2ab6a:	40cb      	lsrs	r3, r1
   2ab6c:	07d9      	lsls	r1, r3, #31
   2ab6e:	d4e3      	bmi.n	2ab38 <gpio_nrfx_pin_interrupt_configure+0x3c>
   2ab70:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   2ab74:	d1e0      	bne.n	2ab38 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   2ab76:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   2ab78:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   2ab7a:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   2ab7e:	4a12      	ldr	r2, [pc, #72]	; (2abc8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2ab80:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   2ab84:	bf18      	it	ne
   2ab86:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2ab8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2ab8e:	07db      	lsls	r3, r3, #31
   2ab90:	d4d2      	bmi.n	2ab38 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2ab92:	f10d 0507 	add.w	r5, sp, #7
   2ab96:	4629      	mov	r1, r5
   2ab98:	4620      	mov	r0, r4
   2ab9a:	f001 f905 	bl	2bda8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2ab9e:	4b0b      	ldr	r3, [pc, #44]	; (2abcc <gpio_nrfx_pin_interrupt_configure+0xd0>)
   2aba0:	4298      	cmp	r0, r3
   2aba2:	d003      	beq.n	2abac <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   2aba4:	9503      	str	r5, [sp, #12]
   2aba6:	e7c7      	b.n	2ab38 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2aba8:	2303      	movs	r3, #3
   2abaa:	e7db      	b.n	2ab64 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   2abac:	4628      	mov	r0, r5
   2abae:	f001 f949 	bl	2be44 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   2abb2:	4b04      	ldr	r3, [pc, #16]	; (2abc4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   2abb4:	4298      	cmp	r0, r3
   2abb6:	d0f5      	beq.n	2aba4 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   2abb8:	f06f 000b 	mvn.w	r0, #11
   2abbc:	e7ad      	b.n	2ab1a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   2abbe:	f06f 0015 	mvn.w	r0, #21
   2abc2:	e7aa      	b.n	2ab1a <gpio_nrfx_pin_interrupt_configure+0x1e>
   2abc4:	0bad0000 	.word	0x0bad0000
   2abc8:	50000300 	.word	0x50000300
   2abcc:	0bad0004 	.word	0x0bad0004

0002abd0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2abd0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2abd2:	f001 f927 	bl	2be24 <nrfx_gpiote_is_init>
   2abd6:	4604      	mov	r4, r0
   2abd8:	b968      	cbnz	r0, 2abf6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2abda:	f001 f8fb 	bl	2bdd4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2abde:	4b08      	ldr	r3, [pc, #32]	; (2ac00 <gpio_nrfx_init+0x30>)
   2abe0:	4298      	cmp	r0, r3
   2abe2:	d10a      	bne.n	2abfa <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2abe4:	4807      	ldr	r0, [pc, #28]	; (2ac04 <gpio_nrfx_init+0x34>)
   2abe6:	4621      	mov	r1, r4
   2abe8:	f001 f8d8 	bl	2bd9c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2abec:	4622      	mov	r2, r4
   2abee:	2105      	movs	r1, #5
   2abf0:	2006      	movs	r0, #6
   2abf2:	f7fe fc49 	bl	29488 <z_arm_irq_priority_set>
		return 0;
   2abf6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2abf8:	bd10      	pop	{r4, pc}
		return -EIO;
   2abfa:	f06f 0004 	mvn.w	r0, #4
   2abfe:	e7fb      	b.n	2abf8 <gpio_nrfx_init+0x28>
   2ac00:	0bad0000 	.word	0x0bad0000
   2ac04:	0002ac09 	.word	0x0002ac09

0002ac08 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2ac08:	0942      	lsrs	r2, r0, #5
{
   2ac0a:	b570      	push	{r4, r5, r6, lr}
   2ac0c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2ac0e:	d002      	beq.n	2ac16 <nrfx_gpio_handler+0xe>
   2ac10:	2a01      	cmp	r2, #1
   2ac12:	d017      	beq.n	2ac44 <nrfx_gpio_handler+0x3c>
}
   2ac14:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2ac16:	4e0d      	ldr	r6, [pc, #52]	; (2ac4c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   2ac18:	6932      	ldr	r2, [r6, #16]
   2ac1a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2ac1c:	2900      	cmp	r1, #0
   2ac1e:	d0f9      	beq.n	2ac14 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   2ac20:	f003 031f 	and.w	r3, r3, #31
   2ac24:	2501      	movs	r5, #1
	return node->next;
   2ac26:	680c      	ldr	r4, [r1, #0]
   2ac28:	409d      	lsls	r5, r3
   2ac2a:	2900      	cmp	r1, #0
   2ac2c:	d0f2      	beq.n	2ac14 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   2ac2e:	688a      	ldr	r2, [r1, #8]
   2ac30:	402a      	ands	r2, r5
   2ac32:	d002      	beq.n	2ac3a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2ac34:	684b      	ldr	r3, [r1, #4]
   2ac36:	4630      	mov	r0, r6
   2ac38:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2ac3a:	b12c      	cbz	r4, 2ac48 <nrfx_gpio_handler+0x40>
   2ac3c:	6823      	ldr	r3, [r4, #0]
   2ac3e:	4621      	mov	r1, r4
   2ac40:	461c      	mov	r4, r3
   2ac42:	e7f2      	b.n	2ac2a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2ac44:	4e02      	ldr	r6, [pc, #8]	; (2ac50 <nrfx_gpio_handler+0x48>)
   2ac46:	e7e7      	b.n	2ac18 <nrfx_gpio_handler+0x10>
   2ac48:	4623      	mov	r3, r4
   2ac4a:	e7f8      	b.n	2ac3e <nrfx_gpio_handler+0x36>
   2ac4c:	0003059c 	.word	0x0003059c
   2ac50:	00030584 	.word	0x00030584

0002ac54 <gpio_nrfx_pin_configure>:
{
   2ac54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   2ac58:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2ac5a:	7b3b      	ldrb	r3, [r7, #12]
   2ac5c:	f001 051f 	and.w	r5, r1, #31
   2ac60:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   2ac64:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2ac66:	4628      	mov	r0, r5
   2ac68:	f10d 0103 	add.w	r1, sp, #3
{
   2ac6c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2ac6e:	f001 f89b 	bl	2bda8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2ac72:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2ac76:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2ac78:	d10b      	bne.n	2ac92 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   2ac7a:	4628      	mov	r0, r5
   2ac7c:	f001 f958 	bl	2bf30 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   2ac80:	4b3d      	ldr	r3, [pc, #244]	; (2ad78 <gpio_nrfx_pin_configure+0x124>)
   2ac82:	4598      	cmp	r8, r3
   2ac84:	d103      	bne.n	2ac8e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   2ac86:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2ac8a:	f001 f8d5 	bl	2be38 <nrfx_gpiote_channel_free>
		return 0;
   2ac8e:	2000      	movs	r0, #0
   2ac90:	e00c      	b.n	2acac <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ac92:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2ac94:	4619      	mov	r1, r3
   2ac96:	aa02      	add	r2, sp, #8
   2ac98:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ac9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2ac9e:	f000 ff5d 	bl	2bb5c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2aca2:	4b35      	ldr	r3, [pc, #212]	; (2ad78 <gpio_nrfx_pin_configure+0x124>)
   2aca4:	4298      	cmp	r0, r3
   2aca6:	d004      	beq.n	2acb2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   2aca8:	f06f 0015 	mvn.w	r0, #21
}
   2acac:	b004      	add	sp, #16
   2acae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   2acb2:	4580      	cmp	r8, r0
   2acb4:	d103      	bne.n	2acbe <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   2acb6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2acba:	f001 f8bd 	bl	2be38 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   2acbe:	03a3      	lsls	r3, r4, #14
   2acc0:	d54b      	bpl.n	2ad5a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2acc2:	f240 3306 	movw	r3, #774	; 0x306
   2acc6:	4023      	ands	r3, r4
   2acc8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   2accc:	d019      	beq.n	2ad02 <gpio_nrfx_pin_configure+0xae>
   2acce:	d80c      	bhi.n	2acea <gpio_nrfx_pin_configure+0x96>
   2acd0:	2b06      	cmp	r3, #6
   2acd2:	d017      	beq.n	2ad04 <gpio_nrfx_pin_configure+0xb0>
   2acd4:	d804      	bhi.n	2ace0 <gpio_nrfx_pin_configure+0x8c>
   2acd6:	b1ab      	cbz	r3, 2ad04 <gpio_nrfx_pin_configure+0xb0>
   2acd8:	2b02      	cmp	r3, #2
   2acda:	d1e5      	bne.n	2aca8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   2acdc:	2304      	movs	r3, #4
   2acde:	e011      	b.n	2ad04 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2ace0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2ace4:	d1e0      	bne.n	2aca8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   2ace6:	2301      	movs	r3, #1
   2ace8:	e00c      	b.n	2ad04 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2acea:	f240 2202 	movw	r2, #514	; 0x202
   2acee:	4293      	cmp	r3, r2
   2acf0:	d027      	beq.n	2ad42 <gpio_nrfx_pin_configure+0xee>
   2acf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   2acf6:	d026      	beq.n	2ad46 <gpio_nrfx_pin_configure+0xf2>
   2acf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2acfc:	d1d4      	bne.n	2aca8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   2acfe:	2302      	movs	r3, #2
   2ad00:	e000      	b.n	2ad04 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   2ad02:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   2ad04:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2ad08:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   2ad0c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   2ad10:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   2ad12:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   2ad16:	bf54      	ite	pl
   2ad18:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2ad1c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2ad1e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   2ad20:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2ad24:	d511      	bpl.n	2ad4a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2ad26:	687a      	ldr	r2, [r7, #4]
   2ad28:	2301      	movs	r3, #1
   2ad2a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   2ad2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2ad30:	2200      	movs	r2, #0
   2ad32:	a901      	add	r1, sp, #4
   2ad34:	4628      	mov	r0, r5
   2ad36:	f000 ffbf 	bl	2bcb8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2ad3a:	4b0f      	ldr	r3, [pc, #60]	; (2ad78 <gpio_nrfx_pin_configure+0x124>)
   2ad3c:	4298      	cmp	r0, r3
   2ad3e:	d0a6      	beq.n	2ac8e <gpio_nrfx_pin_configure+0x3a>
   2ad40:	e7b2      	b.n	2aca8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   2ad42:	2305      	movs	r3, #5
   2ad44:	e7de      	b.n	2ad04 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2ad46:	2303      	movs	r3, #3
   2ad48:	e7dc      	b.n	2ad04 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2ad4a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2ad4c:	bf41      	itttt	mi
   2ad4e:	2301      	movmi	r3, #1
   2ad50:	687a      	ldrmi	r2, [r7, #4]
   2ad52:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   2ad54:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   2ad58:	e7ea      	b.n	2ad30 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   2ad5a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2ad5c:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   2ad60:	bf54      	ite	pl
   2ad62:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2ad66:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2ad68:	461a      	mov	r2, r3
   2ad6a:	a901      	add	r1, sp, #4
   2ad6c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   2ad6e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2ad72:	f000 fef3 	bl	2bb5c <nrfx_gpiote_input_configure>
   2ad76:	e7e0      	b.n	2ad3a <gpio_nrfx_pin_configure+0xe6>
   2ad78:	0bad0000 	.word	0x0bad0000

0002ad7c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   2ad80:	4e5a      	ldr	r6, [pc, #360]	; (2aeec <pinctrl_configure_pins+0x170>)
   2ad82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ad86:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2ad88:	4281      	cmp	r1, r0
   2ad8a:	d102      	bne.n	2ad92 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2ad8c:	2000      	movs	r0, #0
}
   2ad8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2ad92:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2ad94:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2ad98:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   2ad9c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2ad9e:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   2ada2:	bf08      	it	eq
   2ada4:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2ada8:	2c22      	cmp	r4, #34	; 0x22
   2adaa:	f200 809b 	bhi.w	2aee4 <pinctrl_configure_pins+0x168>
   2adae:	e8df f004 	tbb	[pc, r4]
   2adb2:	2412      	.short	0x2412
   2adb4:	402c4429 	.word	0x402c4429
   2adb8:	99999944 	.word	0x99999944
   2adbc:	99704799 	.word	0x99704799
   2adc0:	99999999 	.word	0x99999999
   2adc4:	99999999 	.word	0x99999999
   2adc8:	817e7b73 	.word	0x817e7b73
   2adcc:	84999999 	.word	0x84999999
   2add0:	93908d8a 	.word	0x93908d8a
   2add4:	96          	.byte	0x96
   2add5:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2add6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   2adda:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   2adde:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   2ade2:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
   2ade6:	bf14      	ite	ne
   2ade8:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   2adec:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2adee:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
   2adf2:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
   2adf6:	2401      	movs	r4, #1
   2adf8:	e002      	b.n	2ae00 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   2adfa:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2adfe:	2400      	movs	r4, #0
   2ae00:	46a6      	mov	lr, r4
   2ae02:	e024      	b.n	2ae4e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   2ae04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   2ae08:	e7e7      	b.n	2adda <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2ae0a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2ae0e:	2400      	movs	r4, #0
    return pin_number >> 5;
   2ae10:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   2ae14:	f1be 0f01 	cmp.w	lr, #1
   2ae18:	bf14      	ite	ne
   2ae1a:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   2ae1e:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   2ae20:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2ae24:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   2ae28:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   2ae2c:	f04f 0e01 	mov.w	lr, #1
   2ae30:	e00d      	b.n	2ae4e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2ae32:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2ae36:	2401      	movs	r4, #1
   2ae38:	e7ea      	b.n	2ae10 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2ae3a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   2ae3e:	e7de      	b.n	2adfe <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2ae40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2ae44:	2d00      	cmp	r5, #0
   2ae46:	d1da      	bne.n	2adfe <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2ae48:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2ae4a:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
   2ae4c:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2ae4e:	f850 cb04 	ldr.w	ip, [r0], #4
   2ae52:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2ae56:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2ae5a:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2ae5e:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   2ae62:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   2ae66:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2ae6a:	bf1c      	itt	ne
   2ae6c:	2401      	movne	r4, #1
   2ae6e:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ae72:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
   2ae76:	2b01      	cmp	r3, #1
   2ae78:	bf0c      	ite	eq
   2ae7a:	4633      	moveq	r3, r6
   2ae7c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ae80:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
   2ae84:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ae88:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2ae8c:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2ae90:	e77a      	b.n	2ad88 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2ae92:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2ae96:	e7d5      	b.n	2ae44 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2ae98:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2ae9c:	6804      	ldr	r4, [r0, #0]
   2ae9e:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   2aea2:	2c00      	cmp	r4, #0
   2aea4:	d0c7      	beq.n	2ae36 <pinctrl_configure_pins+0xba>
   2aea6:	e798      	b.n	2adda <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2aea8:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2aeac:	e7f6      	b.n	2ae9c <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2aeae:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2aeb2:	e7f3      	b.n	2ae9c <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2aeb4:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   2aeb8:	e7f0      	b.n	2ae9c <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2aeba:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2aebe:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2aec0:	f04f 0e00 	mov.w	lr, #0
   2aec4:	e7c3      	b.n	2ae4e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2aec6:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   2aeca:	e786      	b.n	2adda <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2aecc:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   2aed0:	e7f5      	b.n	2aebe <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2aed2:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   2aed6:	e7f2      	b.n	2aebe <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2aed8:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   2aedc:	e7ef      	b.n	2aebe <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2aede:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2aee2:	e7ec      	b.n	2aebe <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
   2aee4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2aee8:	e751      	b.n	2ad8e <pinctrl_configure_pins+0x12>
   2aeea:	bf00      	nop
   2aeec:	50000300 	.word	0x50000300

0002aef0 <regulator_fixed_enable>:
struct regulator_fixed_data {
	struct regulator_common_data common;
};

static int regulator_fixed_enable(const struct device *dev)
{
   2aef0:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   2aef2:	6844      	ldr	r4, [r0, #4]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   2aef4:	2201      	movs	r2, #1
   2aef6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   2aefa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2aefc:	f004 fc62 	bl	2f7c4 <gpio_pin_set>
	int ret;

	ret = gpio_pin_set_dt(&cfg->enable, 1);
	if (ret < 0) {
   2af00:	2800      	cmp	r0, #0
   2af02:	db02      	blt.n	2af0a <regulator_fixed_enable+0x1a>
		return ret;
	}

	if (cfg->off_on_delay_us > 0U) {
   2af04:	6a24      	ldr	r4, [r4, #32]
   2af06:	b90c      	cbnz	r4, 2af0c <regulator_fixed_enable+0x1c>
		k_sleep(K_USEC(cfg->off_on_delay_us));
	}

	return 0;
   2af08:	2000      	movs	r0, #0
}
   2af0a:	bd38      	pop	{r3, r4, r5, pc}
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   2af0c:	4806      	ldr	r0, [pc, #24]	; (2af28 <regulator_fixed_enable+0x38>)
   2af0e:	4a07      	ldr	r2, [pc, #28]	; (2af2c <regulator_fixed_enable+0x3c>)
   2af10:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2af14:	2100      	movs	r1, #0
   2af16:	2300      	movs	r3, #0
   2af18:	fbe4 0105 	umlal	r0, r1, r4, r5
   2af1c:	f7fc f8f0 	bl	27100 <__aeabi_uldivmod>
   2af20:	f003 f866 	bl	2dff0 <z_impl_k_sleep>
   2af24:	e7f0      	b.n	2af08 <regulator_fixed_enable+0x18>
   2af26:	bf00      	nop
   2af28:	000f423f 	.word	0x000f423f
   2af2c:	000f4240 	.word	0x000f4240

0002af30 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2af30:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2af32:	794b      	ldrb	r3, [r1, #5]
   2af34:	2b01      	cmp	r3, #1
   2af36:	d026      	beq.n	2af86 <uarte_nrfx_configure+0x56>
   2af38:	2b03      	cmp	r3, #3
   2af3a:	d121      	bne.n	2af80 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2af3c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2af3e:	798b      	ldrb	r3, [r1, #6]
   2af40:	2b03      	cmp	r3, #3
   2af42:	d11d      	bne.n	2af80 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2af44:	79ce      	ldrb	r6, [r1, #7]
   2af46:	b10e      	cbz	r6, 2af4c <uarte_nrfx_configure+0x1c>
   2af48:	2e01      	cmp	r6, #1
   2af4a:	d119      	bne.n	2af80 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2af4c:	790a      	ldrb	r2, [r1, #4]
   2af4e:	b112      	cbz	r2, 2af56 <uarte_nrfx_configure+0x26>
   2af50:	2a02      	cmp	r2, #2
   2af52:	d115      	bne.n	2af80 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2af54:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2af56:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   2af58:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   2af5a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2af5e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   2af60:	d067      	beq.n	2b032 <uarte_nrfx_configure+0x102>
   2af62:	d82d      	bhi.n	2afc0 <uarte_nrfx_configure+0x90>
   2af64:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2af68:	d066      	beq.n	2b038 <uarte_nrfx_configure+0x108>
   2af6a:	d816      	bhi.n	2af9a <uarte_nrfx_configure+0x6a>
   2af6c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2af70:	d064      	beq.n	2b03c <uarte_nrfx_configure+0x10c>
   2af72:	d80a      	bhi.n	2af8a <uarte_nrfx_configure+0x5a>
   2af74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2af78:	d063      	beq.n	2b042 <uarte_nrfx_configure+0x112>
   2af7a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2af7e:	d063      	beq.n	2b048 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   2af80:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2af84:	e054      	b.n	2b030 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   2af86:	2500      	movs	r5, #0
   2af88:	e7d9      	b.n	2af3e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2af8a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2af8e:	d05e      	beq.n	2b04e <uarte_nrfx_configure+0x11e>
   2af90:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2af94:	d1f4      	bne.n	2af80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2af96:	4b38      	ldr	r3, [pc, #224]	; (2b078 <uarte_nrfx_configure+0x148>)
   2af98:	e03c      	b.n	2b014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2af9a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2af9e:	d059      	beq.n	2b054 <uarte_nrfx_configure+0x124>
   2afa0:	d807      	bhi.n	2afb2 <uarte_nrfx_configure+0x82>
   2afa2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2afa6:	d057      	beq.n	2b058 <uarte_nrfx_configure+0x128>
   2afa8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2afac:	d1e8      	bne.n	2af80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2afae:	4b33      	ldr	r3, [pc, #204]	; (2b07c <uarte_nrfx_configure+0x14c>)
   2afb0:	e030      	b.n	2b014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2afb2:	f647 2412 	movw	r4, #31250	; 0x7a12
   2afb6:	42a3      	cmp	r3, r4
   2afb8:	d1e2      	bne.n	2af80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2afba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2afbe:	e029      	b.n	2b014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2afc0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2afc4:	d04a      	beq.n	2b05c <uarte_nrfx_configure+0x12c>
   2afc6:	d813      	bhi.n	2aff0 <uarte_nrfx_configure+0xc0>
   2afc8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2afcc:	d049      	beq.n	2b062 <uarte_nrfx_configure+0x132>
   2afce:	d809      	bhi.n	2afe4 <uarte_nrfx_configure+0xb4>
   2afd0:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   2afd4:	42a3      	cmp	r3, r4
   2afd6:	d046      	beq.n	2b066 <uarte_nrfx_configure+0x136>
   2afd8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2afdc:	d1d0      	bne.n	2af80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2afde:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2afe2:	e017      	b.n	2b014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2afe4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2afe8:	d1ca      	bne.n	2af80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2afea:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2afee:	e011      	b.n	2b014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2aff0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2aff4:	d03a      	beq.n	2b06c <uarte_nrfx_configure+0x13c>
   2aff6:	d808      	bhi.n	2b00a <uarte_nrfx_configure+0xda>
   2aff8:	4c21      	ldr	r4, [pc, #132]	; (2b080 <uarte_nrfx_configure+0x150>)
   2affa:	42a3      	cmp	r3, r4
   2affc:	d039      	beq.n	2b072 <uarte_nrfx_configure+0x142>
   2affe:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2b002:	d1bd      	bne.n	2af80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2b004:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2b008:	e004      	b.n	2b014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2b00a:	4c1e      	ldr	r4, [pc, #120]	; (2b084 <uarte_nrfx_configure+0x154>)
   2b00c:	42a3      	cmp	r3, r4
   2b00e:	d1b7      	bne.n	2af80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2b010:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   2b014:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2b016:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   2b01a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   2b01c:	4335      	orrs	r5, r6
   2b01e:	681b      	ldr	r3, [r3, #0]
   2b020:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2b022:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   2b026:	c903      	ldmia	r1, {r0, r1}
   2b028:	1d23      	adds	r3, r4, #4
   2b02a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2b02e:	2000      	movs	r0, #0
}
   2b030:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2b032:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2b036:	e7ed      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   2b038:	4b13      	ldr	r3, [pc, #76]	; (2b088 <uarte_nrfx_configure+0x158>)
   2b03a:	e7eb      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2b03c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2b040:	e7e8      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   2b042:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2b046:	e7e5      	b.n	2b014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2b048:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2b04c:	e7e2      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2b04e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2b052:	e7df      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2b054:	4b0d      	ldr	r3, [pc, #52]	; (2b08c <uarte_nrfx_configure+0x15c>)
   2b056:	e7dd      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2b058:	4b0d      	ldr	r3, [pc, #52]	; (2b090 <uarte_nrfx_configure+0x160>)
   2b05a:	e7db      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2b05c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2b060:	e7d8      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2b062:	4b0c      	ldr	r3, [pc, #48]	; (2b094 <uarte_nrfx_configure+0x164>)
   2b064:	e7d6      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2b066:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2b06a:	e7d3      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2b06c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2b070:	e7d0      	b.n	2b014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2b072:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2b076:	e7cd      	b.n	2b014 <uarte_nrfx_configure+0xe4>
   2b078:	0013b000 	.word	0x0013b000
   2b07c:	004ea000 	.word	0x004ea000
   2b080:	0003d090 	.word	0x0003d090
   2b084:	000f4240 	.word	0x000f4240
   2b088:	00275000 	.word	0x00275000
   2b08c:	0075c000 	.word	0x0075c000
   2b090:	003af000 	.word	0x003af000
   2b094:	013a9000 	.word	0x013a9000

0002b098 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2b098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b09c:	4680      	mov	r8, r0
   2b09e:	2200      	movs	r2, #0
   2b0a0:	2101      	movs	r1, #1
   2b0a2:	2002      	movs	r0, #2
   2b0a4:	f7fe f9f0 	bl	29488 <z_arm_irq_priority_set>
   2b0a8:	2002      	movs	r0, #2
   2b0aa:	f7fe f9bd 	bl	29428 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   2b0ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   2b0b2:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   2b0b6:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2b0b8:	2100      	movs	r1, #0
   2b0ba:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   2b0be:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2b0c2:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2b0c6:	aa01      	add	r2, sp, #4
   2b0c8:	4648      	mov	r0, r9
   2b0ca:	f004 fac3 	bl	2f654 <pinctrl_lookup_state>
	if (ret < 0) {
   2b0ce:	1e05      	subs	r5, r0, #0
   2b0d0:	db54      	blt.n	2b17c <uarte_0_init+0xe4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2b0d2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2b0d4:	f8d9 2000 	ldr.w	r2, [r9]
   2b0d8:	7919      	ldrb	r1, [r3, #4]
   2b0da:	6818      	ldr	r0, [r3, #0]
   2b0dc:	f7ff fe4e 	bl	2ad7c <pinctrl_configure_pins>
	if (err < 0) {
   2b0e0:	1e05      	subs	r5, r0, #0
   2b0e2:	db4b      	blt.n	2b17c <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   2b0e4:	1d31      	adds	r1, r6, #4
   2b0e6:	4640      	mov	r0, r8
   2b0e8:	f7ff ff22 	bl	2af30 <uarte_nrfx_configure>
	if (err) {
   2b0ec:	4605      	mov	r5, r0
   2b0ee:	2800      	cmp	r0, #0
   2b0f0:	d144      	bne.n	2b17c <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2b0f2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2b0f4:	0799      	lsls	r1, r3, #30
   2b0f6:	d51a      	bpl.n	2b12e <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2b0f8:	f106 001c 	add.w	r0, r6, #28
   2b0fc:	f001 f8ba 	bl	2c274 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2b100:	4b22      	ldr	r3, [pc, #136]	; (2b18c <uarte_0_init+0xf4>)
   2b102:	4298      	cmp	r0, r3
   2b104:	d13e      	bne.n	2b184 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2b106:	7f33      	ldrb	r3, [r6, #28]
   2b108:	00db      	lsls	r3, r3, #3
   2b10a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b10e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   2b112:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   2b116:	f504 7190 	add.w	r1, r4, #288	; 0x120
   2b11a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2b11e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2b122:	7f32      	ldrb	r2, [r6, #28]
   2b124:	2301      	movs	r3, #1
   2b126:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   2b128:	4a19      	ldr	r2, [pc, #100]	; (2b190 <uarte_0_init+0xf8>)
   2b12a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2b12e:	2308      	movs	r3, #8
   2b130:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   2b134:	7a3b      	ldrb	r3, [r7, #8]
   2b136:	b953      	cbnz	r3, 2b14e <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b138:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2b13c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2b140:	69b3      	ldr	r3, [r6, #24]
   2b142:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2b146:	2301      	movs	r3, #1
   2b148:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b14c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2b14e:	687b      	ldr	r3, [r7, #4]
   2b150:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   2b152:	bf5c      	itt	pl
   2b154:	f44f 7380 	movpl.w	r3, #256	; 0x100
   2b158:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2b15c:	687b      	ldr	r3, [r7, #4]
   2b15e:	06db      	lsls	r3, r3, #27
   2b160:	bf44      	itt	mi
   2b162:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   2b166:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2b16a:	6973      	ldr	r3, [r6, #20]
   2b16c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2b170:	2300      	movs	r3, #0
   2b172:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b176:	2301      	movs	r3, #1
   2b178:	60a3      	str	r3, [r4, #8]
   2b17a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   2b17c:	4628      	mov	r0, r5
   2b17e:	b003      	add	sp, #12
   2b180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   2b184:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   2b188:	e7f8      	b.n	2b17c <uarte_0_init+0xe4>
   2b18a:	bf00      	nop
   2b18c:	0bad0000 	.word	0x0bad0000
   2b190:	4001f000 	.word	0x4001f000

0002b194 <uarte_nrfx_poll_out>:
{
   2b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b196:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2b198:	6907      	ldr	r7, [r0, #16]
{
   2b19a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2b19c:	f004 fed6 	bl	2ff4c <k_is_in_isr>
   2b1a0:	b9b0      	cbnz	r0, 2b1d0 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   2b1a2:	4b21      	ldr	r3, [pc, #132]	; (2b228 <uarte_nrfx_poll_out+0x94>)
   2b1a4:	781b      	ldrb	r3, [r3, #0]
   2b1a6:	b19b      	cbz	r3, 2b1d0 <uarte_nrfx_poll_out+0x3c>
{
   2b1a8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2b1aa:	6860      	ldr	r0, [r4, #4]
   2b1ac:	f004 fc2b 	bl	2fa06 <is_tx_ready.isra.0>
   2b1b0:	bb00      	cbnz	r0, 2b1f4 <uarte_nrfx_poll_out+0x60>
   2b1b2:	2001      	movs	r0, #1
   2b1b4:	f004 fcf0 	bl	2fb98 <nrfx_busy_wait>
   2b1b8:	3e01      	subs	r6, #1
   2b1ba:	d1f6      	bne.n	2b1aa <uarte_nrfx_poll_out+0x16>
   2b1bc:	2100      	movs	r1, #0
   2b1be:	2021      	movs	r0, #33	; 0x21
   2b1c0:	f002 ff16 	bl	2dff0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2b1c4:	e7f0      	b.n	2b1a8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   2b1c6:	f381 8811 	msr	BASEPRI, r1
   2b1ca:	f3bf 8f6f 	isb	sy
}
   2b1ce:	e7f5      	b.n	2b1bc <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   2b1d0:	f04f 0320 	mov.w	r3, #32
   2b1d4:	f3ef 8111 	mrs	r1, BASEPRI
   2b1d8:	f383 8812 	msr	BASEPRI_MAX, r3
   2b1dc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2b1e0:	6860      	ldr	r0, [r4, #4]
   2b1e2:	460e      	mov	r6, r1
   2b1e4:	f004 fc0f 	bl	2fa06 <is_tx_ready.isra.0>
   2b1e8:	b990      	cbnz	r0, 2b210 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   2b1ea:	f381 8811 	msr	BASEPRI, r1
   2b1ee:	f3bf 8f6f 	isb	sy
}
   2b1f2:	e7ed      	b.n	2b1d0 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   2b1f4:	f04f 0320 	mov.w	r3, #32
   2b1f8:	f3ef 8111 	mrs	r1, BASEPRI
   2b1fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2b200:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2b204:	6860      	ldr	r0, [r4, #4]
   2b206:	460e      	mov	r6, r1
   2b208:	f004 fbfd 	bl	2fa06 <is_tx_ready.isra.0>
   2b20c:	2800      	cmp	r0, #0
   2b20e:	d0da      	beq.n	2b1c6 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   2b210:	697b      	ldr	r3, [r7, #20]
   2b212:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   2b214:	6979      	ldr	r1, [r7, #20]
   2b216:	2201      	movs	r2, #1
   2b218:	4620      	mov	r0, r4
   2b21a:	f004 fb34 	bl	2f886 <tx_start>
	__asm__ volatile(
   2b21e:	f386 8811 	msr	BASEPRI, r6
   2b222:	f3bf 8f6f 	isb	sy
}
   2b226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b228:	20001bcf 	.word	0x20001bcf

0002b22c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   2b22c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2b22e:	2301      	movs	r3, #1
   2b230:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b232:	4a0e      	ldr	r2, [pc, #56]	; (2b26c <compare_int_lock+0x40>)
   2b234:	f3bf 8f5b 	dmb	ish
   2b238:	43dc      	mvns	r4, r3
   2b23a:	e852 1f00 	ldrex	r1, [r2]
   2b23e:	ea01 0504 	and.w	r5, r1, r4
   2b242:	e842 5600 	strex	r6, r5, [r2]
   2b246:	2e00      	cmp	r6, #0
   2b248:	d1f7      	bne.n	2b23a <compare_int_lock+0xe>
   2b24a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2b24e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2b252:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2b254:	4806      	ldr	r0, [pc, #24]	; (2b270 <compare_int_lock+0x44>)
   2b256:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   2b25a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2b25e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   2b262:	420b      	tst	r3, r1
}
   2b264:	bf14      	ite	ne
   2b266:	2001      	movne	r0, #1
   2b268:	2000      	moveq	r0, #0
   2b26a:	bd70      	pop	{r4, r5, r6, pc}
   2b26c:	20001720 	.word	0x20001720
   2b270:	40011000 	.word	0x40011000

0002b274 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   2b274:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   2b276:	490e      	ldr	r1, [pc, #56]	; (2b2b0 <sys_clock_timeout_handler+0x3c>)
   2b278:	e9d1 3400 	ldrd	r3, r4, [r1]
   2b27c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   2b27e:	18c3      	adds	r3, r0, r3
   2b280:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   2b284:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   2b288:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2b28c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2b290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2b294:	d209      	bcs.n	2b2aa <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2b296:	4b07      	ldr	r3, [pc, #28]	; (2b2b4 <sys_clock_timeout_handler+0x40>)
   2b298:	681b      	ldr	r3, [r3, #0]
   2b29a:	0a1a      	lsrs	r2, r3, #8
   2b29c:	061b      	lsls	r3, r3, #24
   2b29e:	199c      	adds	r4, r3, r6
   2b2a0:	4b05      	ldr	r3, [pc, #20]	; (2b2b8 <sys_clock_timeout_handler+0x44>)
   2b2a2:	f142 0500 	adc.w	r5, r2, #0
   2b2a6:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   2b2aa:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   2b2ac:	f003 b822 	b.w	2e2f4 <sys_clock_announce>
   2b2b0:	20000508 	.word	0x20000508
   2b2b4:	20001724 	.word	0x20001724
   2b2b8:	20000510 	.word	0x20000510

0002b2bc <compare_int_unlock>:
	if (key) {
   2b2bc:	b311      	cbz	r1, 2b304 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b2be:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   2b2c2:	2301      	movs	r3, #1
   2b2c4:	4a10      	ldr	r2, [pc, #64]	; (2b308 <compare_int_unlock+0x4c>)
   2b2c6:	4083      	lsls	r3, r0
   2b2c8:	e852 cf00 	ldrex	ip, [r2]
   2b2cc:	ea4c 0c03 	orr.w	ip, ip, r3
   2b2d0:	e842 c100 	strex	r1, ip, [r2]
   2b2d4:	2900      	cmp	r1, #0
   2b2d6:	d1f7      	bne.n	2b2c8 <compare_int_unlock+0xc>
   2b2d8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   2b2dc:	4a0b      	ldr	r2, [pc, #44]	; (2b30c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2b2de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b2e2:	4083      	lsls	r3, r0
   2b2e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b2e8:	4b09      	ldr	r3, [pc, #36]	; (2b310 <compare_int_unlock+0x54>)
   2b2ea:	f3bf 8f5b 	dmb	ish
   2b2ee:	681b      	ldr	r3, [r3, #0]
   2b2f0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2b2f4:	40c3      	lsrs	r3, r0
   2b2f6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2b2f8:	bf42      	ittt	mi
   2b2fa:	4b06      	ldrmi	r3, [pc, #24]	; (2b314 <compare_int_unlock+0x58>)
   2b2fc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   2b300:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   2b304:	4770      	bx	lr
   2b306:	bf00      	nop
   2b308:	20001720 	.word	0x20001720
   2b30c:	40011000 	.word	0x40011000
   2b310:	2000171c 	.word	0x2000171c
   2b314:	e000e100 	.word	0xe000e100

0002b318 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2b318:	4b0d      	ldr	r3, [pc, #52]	; (2b350 <z_nrf_rtc_timer_read+0x38>)
   2b31a:	6818      	ldr	r0, [r3, #0]
   2b31c:	0a01      	lsrs	r1, r0, #8
   2b31e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2b320:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   2b324:	4b0b      	ldr	r3, [pc, #44]	; (2b354 <z_nrf_rtc_timer_read+0x3c>)
   2b326:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2b32a:	1818      	adds	r0, r3, r0
   2b32c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2b330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2b334:	d20a      	bcs.n	2b34c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2b336:	4b08      	ldr	r3, [pc, #32]	; (2b358 <z_nrf_rtc_timer_read+0x40>)
   2b338:	e9d3 2300 	ldrd	r2, r3, [r3]
   2b33c:	4290      	cmp	r0, r2
   2b33e:	eb71 0303 	sbcs.w	r3, r1, r3
   2b342:	d203      	bcs.n	2b34c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2b344:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2b348:	f141 0100 	adc.w	r1, r1, #0
}
   2b34c:	4770      	bx	lr
   2b34e:	bf00      	nop
   2b350:	20001724 	.word	0x20001724
   2b354:	40011000 	.word	0x40011000
   2b358:	20000510 	.word	0x20000510

0002b35c <compare_set>:
{
   2b35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b360:	4616      	mov	r6, r2
   2b362:	461f      	mov	r7, r3
   2b364:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   2b366:	f7ff ff61 	bl	2b22c <compare_int_lock>
   2b36a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2b36c:	f7ff ffd4 	bl	2b318 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2b370:	42b0      	cmp	r0, r6
   2b372:	eb71 0307 	sbcs.w	r3, r1, r7
   2b376:	d251      	bcs.n	2b41c <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   2b378:	4b3a      	ldr	r3, [pc, #232]	; (2b464 <compare_set+0x108>)
   2b37a:	1a30      	subs	r0, r6, r0
   2b37c:	eb67 0101 	sbc.w	r1, r7, r1
   2b380:	4298      	cmp	r0, r3
   2b382:	f171 0100 	sbcs.w	r1, r1, #0
   2b386:	d26a      	bcs.n	2b45e <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   2b388:	4b37      	ldr	r3, [pc, #220]	; (2b468 <compare_set+0x10c>)
   2b38a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2b38e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2b392:	429f      	cmp	r7, r3
   2b394:	bf08      	it	eq
   2b396:	4296      	cmpeq	r6, r2
   2b398:	d04e      	beq.n	2b438 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2b39a:	4934      	ldr	r1, [pc, #208]	; (2b46c <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2b39c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2b3a0:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2b3a4:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2b3a8:	00ad      	lsls	r5, r5, #2
   2b3aa:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   2b3ae:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b3b0:	b2ad      	uxth	r5, r5
   2b3b2:	f004 fbd5 	bl	2fb60 <event_clear>
	return absolute_time & COUNTER_MAX;
   2b3b6:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   2b3ba:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   2b3be:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2b3c2:	4a2b      	ldr	r2, [pc, #172]	; (2b470 <compare_set+0x114>)
   2b3c4:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b3c6:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   2b3ca:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   2b3cc:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   2b3d0:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2b3d2:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   2b3d6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   2b3da:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   2b3de:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2b3e2:	f06f 0002 	mvn.w	r0, #2
   2b3e6:	eba0 0008 	sub.w	r0, r0, r8
   2b3ea:	4460      	add	r0, ip
   2b3ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2b3f0:	4290      	cmp	r0, r2
   2b3f2:	d921      	bls.n	2b438 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b3f4:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   2b3f6:	b160      	cbz	r0, 2b412 <compare_set+0xb6>
     return p_reg->COUNTER;
   2b3f8:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2b3fc:	eba8 000b 	sub.w	r0, r8, fp
   2b400:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   2b404:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2b408:	d916      	bls.n	2b438 <compare_set+0xdc>
					event_clear(chan);
   2b40a:	4620      	mov	r0, r4
   2b40c:	f004 fba8 	bl	2fb60 <event_clear>
   2b410:	4a17      	ldr	r2, [pc, #92]	; (2b470 <compare_set+0x114>)
			cc_val = now + cc_inc;
   2b412:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   2b416:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   2b41a:	e7d9      	b.n	2b3d0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   2b41c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b41e:	4a15      	ldr	r2, [pc, #84]	; (2b474 <compare_set+0x118>)
   2b420:	f3bf 8f5b 	dmb	ish
   2b424:	40a3      	lsls	r3, r4
   2b426:	e852 0f00 	ldrex	r0, [r2]
   2b42a:	4318      	orrs	r0, r3
   2b42c:	e842 0100 	strex	r1, r0, [r2]
   2b430:	2900      	cmp	r1, #0
   2b432:	d1f8      	bne.n	2b426 <compare_set+0xca>
   2b434:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   2b438:	490b      	ldr	r1, [pc, #44]	; (2b468 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   2b43a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   2b43c:	0123      	lsls	r3, r4, #4
   2b43e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   2b442:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   2b446:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   2b448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b44a:	6053      	str	r3, [r2, #4]
	return ret;
   2b44c:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   2b44e:	4620      	mov	r0, r4
   2b450:	9900      	ldr	r1, [sp, #0]
   2b452:	f7ff ff33 	bl	2b2bc <compare_int_unlock>
}
   2b456:	4628      	mov	r0, r5
   2b458:	b003      	add	sp, #12
   2b45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   2b45e:	f06f 0515 	mvn.w	r5, #21
   2b462:	e7f4      	b.n	2b44e <compare_set+0xf2>
   2b464:	00800001 	.word	0x00800001
   2b468:	200004f8 	.word	0x200004f8
   2b46c:	40011000 	.word	0x40011000
   2b470:	007ffffd 	.word	0x007ffffd
   2b474:	2000171c 	.word	0x2000171c

0002b478 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   2b478:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   2b47a:	4c1b      	ldr	r4, [pc, #108]	; (2b4e8 <sys_clock_driver_init+0x70>)
   2b47c:	4b1b      	ldr	r3, [pc, #108]	; (2b4ec <sys_clock_driver_init+0x74>)
   2b47e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   2b482:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2b486:	4b1a      	ldr	r3, [pc, #104]	; (2b4f0 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   2b488:	2500      	movs	r5, #0
   2b48a:	f04f 30ff 	mov.w	r0, #4294967295
   2b48e:	f04f 31ff 	mov.w	r1, #4294967295
   2b492:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   2b496:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   2b49a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b49e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2b4a2:	4b14      	ldr	r3, [pc, #80]	; (2b4f4 <sys_clock_driver_init+0x7c>)
   2b4a4:	2602      	movs	r6, #2
   2b4a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2b4aa:	2101      	movs	r1, #1
   2b4ac:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   2b4b0:	2011      	movs	r0, #17
   2b4b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2b4b6:	462a      	mov	r2, r5
   2b4b8:	f7fd ffe6 	bl	29488 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2b4bc:	2011      	movs	r0, #17
   2b4be:	f7fd ffb3 	bl	29428 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2b4c2:	4a0d      	ldr	r2, [pc, #52]	; (2b4f8 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2b4c4:	2301      	movs	r3, #1
   2b4c6:	60a3      	str	r3, [r4, #8]
   2b4c8:	6023      	str	r3, [r4, #0]
   2b4ca:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2b4cc:	4b0b      	ldr	r3, [pc, #44]	; (2b4fc <sys_clock_driver_init+0x84>)
   2b4ce:	4a0c      	ldr	r2, [pc, #48]	; (2b500 <sys_clock_driver_init+0x88>)
   2b4d0:	9300      	str	r3, [sp, #0]
   2b4d2:	9501      	str	r5, [sp, #4]
   2b4d4:	2300      	movs	r3, #0
   2b4d6:	4628      	mov	r0, r5
   2b4d8:	f7ff ff40 	bl	2b35c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2b4dc:	4630      	mov	r0, r6
   2b4de:	f7ff fa67 	bl	2a9b0 <z_nrf_clock_control_lf_on>

	return 0;
}
   2b4e2:	4628      	mov	r0, r5
   2b4e4:	b002      	add	sp, #8
   2b4e6:	bd70      	pop	{r4, r5, r6, pc}
   2b4e8:	40011000 	.word	0x40011000
   2b4ec:	000f0003 	.word	0x000f0003
   2b4f0:	200004f8 	.word	0x200004f8
   2b4f4:	e000e100 	.word	0xe000e100
   2b4f8:	20001720 	.word	0x20001720
   2b4fc:	0002b275 	.word	0x0002b275
   2b500:	007fffff 	.word	0x007fffff

0002b504 <rtc_nrf_isr>:
{
   2b504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   2b508:	4c2f      	ldr	r4, [pc, #188]	; (2b5c8 <rtc_nrf_isr+0xc4>)
   2b50a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2b50e:	0799      	lsls	r1, r3, #30
   2b510:	d50b      	bpl.n	2b52a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b512:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2b516:	b143      	cbz	r3, 2b52a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   2b518:	4a2c      	ldr	r2, [pc, #176]	; (2b5cc <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2b51a:	2300      	movs	r3, #0
   2b51c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2b520:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2b524:	6813      	ldr	r3, [r2, #0]
   2b526:	3301      	adds	r3, #1
   2b528:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2b52a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2b52e:	03da      	lsls	r2, r3, #15
   2b530:	d52a      	bpl.n	2b588 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b532:	f3bf 8f5b 	dmb	ish
   2b536:	4b26      	ldr	r3, [pc, #152]	; (2b5d0 <rtc_nrf_isr+0xcc>)
   2b538:	e853 2f00 	ldrex	r2, [r3]
   2b53c:	f022 0101 	bic.w	r1, r2, #1
   2b540:	e843 1000 	strex	r0, r1, [r3]
   2b544:	2800      	cmp	r0, #0
   2b546:	d1f7      	bne.n	2b538 <rtc_nrf_isr+0x34>
   2b548:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2b54c:	07d3      	lsls	r3, r2, #31
   2b54e:	d402      	bmi.n	2b556 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b550:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2b554:	b1c3      	cbz	r3, 2b588 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2b556:	2500      	movs	r5, #0
   2b558:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2b55c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   2b560:	f7ff feda 	bl	2b318 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   2b564:	f04f 0320 	mov.w	r3, #32
   2b568:	f3ef 8211 	mrs	r2, BASEPRI
   2b56c:	f383 8812 	msr	BASEPRI_MAX, r3
   2b570:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   2b574:	4b17      	ldr	r3, [pc, #92]	; (2b5d4 <rtc_nrf_isr+0xd0>)
   2b576:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   2b57a:	42b0      	cmp	r0, r6
   2b57c:	41b9      	sbcs	r1, r7
   2b57e:	d206      	bcs.n	2b58e <rtc_nrf_isr+0x8a>
	__asm__ volatile(
   2b580:	f382 8811 	msr	BASEPRI, r2
   2b584:	f3bf 8f6f 	isb	sy
}
   2b588:	b003      	add	sp, #12
   2b58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2b58e:	f04f 38ff 	mov.w	r8, #4294967295
   2b592:	f04f 39ff 	mov.w	r9, #4294967295
   2b596:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   2b59a:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   2b59e:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   2b5a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b5a4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2b5a8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2b5ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2b5b0:	f382 8811 	msr	BASEPRI, r2
   2b5b4:	f3bf 8f6f 	isb	sy
		if (handler) {
   2b5b8:	2900      	cmp	r1, #0
   2b5ba:	d0e5      	beq.n	2b588 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
   2b5bc:	9000      	str	r0, [sp, #0]
   2b5be:	4632      	mov	r2, r6
   2b5c0:	463b      	mov	r3, r7
   2b5c2:	4628      	mov	r0, r5
   2b5c4:	4788      	blx	r1
   2b5c6:	e7df      	b.n	2b588 <rtc_nrf_isr+0x84>
   2b5c8:	40011000 	.word	0x40011000
   2b5cc:	20001724 	.word	0x20001724
   2b5d0:	2000171c 	.word	0x2000171c
   2b5d4:	200004f8 	.word	0x200004f8

0002b5d8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   2b5d8:	1c43      	adds	r3, r0, #1
{
   2b5da:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   2b5dc:	d022      	beq.n	2b624 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2b5de:	2801      	cmp	r0, #1
   2b5e0:	dd22      	ble.n	2b628 <sys_clock_set_timeout+0x50>
   2b5e2:	4a12      	ldr	r2, [pc, #72]	; (2b62c <sys_clock_set_timeout+0x54>)
   2b5e4:	4b12      	ldr	r3, [pc, #72]	; (2b630 <sys_clock_set_timeout+0x58>)
   2b5e6:	4290      	cmp	r0, r2
   2b5e8:	bfd4      	ite	le
   2b5ea:	4604      	movle	r4, r0
   2b5ec:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2b5ee:	f7ff fe93 	bl	2b318 <z_nrf_rtc_timer_read>
   2b5f2:	4b10      	ldr	r3, [pc, #64]	; (2b634 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   2b5f4:	490e      	ldr	r1, [pc, #56]	; (2b630 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   2b5fa:	1a80      	subs	r0, r0, r2
		cyc = 0;
   2b5fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2b600:	bf28      	it	cs
   2b602:	2400      	movcs	r4, #0
	cyc += unannounced;
   2b604:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   2b606:	428c      	cmp	r4, r1
   2b608:	bf28      	it	cs
   2b60a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   2b60c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2b60e:	490a      	ldr	r1, [pc, #40]	; (2b638 <sys_clock_set_timeout+0x60>)
   2b610:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   2b612:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2b616:	9001      	str	r0, [sp, #4]
   2b618:	f143 0300 	adc.w	r3, r3, #0
   2b61c:	f7ff fe9e 	bl	2b35c <compare_set>
}
   2b620:	b002      	add	sp, #8
   2b622:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   2b624:	4c02      	ldr	r4, [pc, #8]	; (2b630 <sys_clock_set_timeout+0x58>)
   2b626:	e7e2      	b.n	2b5ee <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2b628:	2401      	movs	r4, #1
   2b62a:	e7e0      	b.n	2b5ee <sys_clock_set_timeout+0x16>
   2b62c:	007ffffe 	.word	0x007ffffe
   2b630:	007fffff 	.word	0x007fffff
   2b634:	20000508 	.word	0x20000508
   2b638:	0002b275 	.word	0x0002b275

0002b63c <sys_clock_elapsed>:
{
   2b63c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2b63e:	f7ff fe6b 	bl	2b318 <z_nrf_rtc_timer_read>
   2b642:	4b02      	ldr	r3, [pc, #8]	; (2b64c <sys_clock_elapsed+0x10>)
   2b644:	681b      	ldr	r3, [r3, #0]
}
   2b646:	1ac0      	subs	r0, r0, r3
   2b648:	bd08      	pop	{r3, pc}
   2b64a:	bf00      	nop
   2b64c:	20000508 	.word	0x20000508

0002b650 <sys_clock_disable>:
{
   2b650:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2b652:	4c08      	ldr	r4, [pc, #32]	; (2b674 <sys_clock_disable+0x24>)
   2b654:	2301      	movs	r3, #1
   2b656:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   2b658:	2011      	movs	r0, #17
   2b65a:	f7fd fef3 	bl	29444 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2b65e:	4b06      	ldr	r3, [pc, #24]	; (2b678 <sys_clock_disable+0x28>)
   2b660:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   2b664:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   2b668:	4b04      	ldr	r3, [pc, #16]	; (2b67c <sys_clock_disable+0x2c>)
   2b66a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2b66e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2b672:	bd10      	pop	{r4, pc}
   2b674:	40011000 	.word	0x40011000
   2b678:	000f0003 	.word	0x000f0003
   2b67c:	e000e100 	.word	0xe000e100

0002b680 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b684:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2b688:	2a08      	cmp	r2, #8
   2b68a:	d106      	bne.n	2b69a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2b68c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2b690:	2b05      	cmp	r3, #5
   2b692:	d802      	bhi.n	2b69a <nrf52_errata_103+0x1a>
   2b694:	4a02      	ldr	r2, [pc, #8]	; (2b6a0 <nrf52_errata_103+0x20>)
   2b696:	5cd0      	ldrb	r0, [r2, r3]
   2b698:	4770      	bx	lr
                        return false;
   2b69a:	2000      	movs	r0, #0
}
   2b69c:	4770      	bx	lr
   2b69e:	bf00      	nop
   2b6a0:	00030d3d 	.word	0x00030d3d

0002b6a4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   2b6a4:	4a02      	ldr	r2, [pc, #8]	; (2b6b0 <nvmc_wait+0xc>)
   2b6a6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2b6aa:	2b00      	cmp	r3, #0
   2b6ac:	d0fb      	beq.n	2b6a6 <nvmc_wait+0x2>
}
   2b6ae:	4770      	bx	lr
   2b6b0:	4001e000 	.word	0x4001e000

0002b6b4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   2b6b4:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b6b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b6ba:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2b6be:	2a08      	cmp	r2, #8
   2b6c0:	d14e      	bne.n	2b760 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   2b6c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2b6c6:	2100      	movs	r1, #0
   2b6c8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2b6cc:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2b6d0:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2b6d4:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   2b6d8:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   2b6dc:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2b6e0:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   2b6e4:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2b6e8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   2b6ec:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2b6f0:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   2b6f4:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2b6f8:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   2b6fc:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2b700:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2b704:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2b708:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   2b70c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2b710:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   2b714:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2b718:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   2b71c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2b720:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   2b724:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2b728:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   2b72c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2b730:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   2b734:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2b738:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   2b73c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2b740:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   2b744:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2b748:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   2b74c:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2b750:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   2b754:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2b758:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   2b75c:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2b760:	f7ff ff8e 	bl	2b680 <nrf52_errata_103>
   2b764:	b118      	cbz	r0, 2b76e <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2b766:	4b3a      	ldr	r3, [pc, #232]	; (2b850 <SystemInit+0x19c>)
   2b768:	4a3a      	ldr	r2, [pc, #232]	; (2b854 <SystemInit+0x1a0>)
   2b76a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2b76e:	f7ff ff87 	bl	2b680 <nrf52_errata_103>
   2b772:	b118      	cbz	r0, 2b77c <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2b774:	4b38      	ldr	r3, [pc, #224]	; (2b858 <SystemInit+0x1a4>)
   2b776:	22fb      	movs	r2, #251	; 0xfb
   2b778:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2b77c:	f7ff ff80 	bl	2b680 <nrf52_errata_103>
   2b780:	b170      	cbz	r0, 2b7a0 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2b782:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2b786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2b78a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2b78e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2b792:	f022 020f 	bic.w	r2, r2, #15
   2b796:	f003 030f 	and.w	r3, r3, #15
   2b79a:	4313      	orrs	r3, r2
   2b79c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2b7a0:	f7ff ff6e 	bl	2b680 <nrf52_errata_103>
   2b7a4:	b120      	cbz	r0, 2b7b0 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2b7a6:	4b2d      	ldr	r3, [pc, #180]	; (2b85c <SystemInit+0x1a8>)
   2b7a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   2b7ac:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b7b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b7b4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2b7b8:	2b08      	cmp	r3, #8
   2b7ba:	d11a      	bne.n	2b7f2 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2b7bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b7c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2b7c4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2b7c6:	bf44      	itt	mi
   2b7c8:	f06f 0201 	mvnmi.w	r2, #1
   2b7cc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2b7d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2b7d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   2b7d8:	2b05      	cmp	r3, #5
   2b7da:	d802      	bhi.n	2b7e2 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2b7dc:	4a20      	ldr	r2, [pc, #128]	; (2b860 <SystemInit+0x1ac>)
   2b7de:	5cd3      	ldrb	r3, [r2, r3]
   2b7e0:	b13b      	cbz	r3, 2b7f2 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2b7e2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2b7e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2b7ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b7ee:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2b7f2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2b7f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2b7fa:	2a00      	cmp	r2, #0
   2b7fc:	db03      	blt.n	2b806 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2b7fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2b802:	2b00      	cmp	r3, #0
   2b804:	da22      	bge.n	2b84c <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2b806:	4917      	ldr	r1, [pc, #92]	; (2b864 <SystemInit+0x1b0>)
   2b808:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2b80a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2b80e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2b812:	2412      	movs	r4, #18
    nvmc_wait();
   2b814:	f7ff ff46 	bl	2b6a4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2b818:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2b81c:	f7ff ff42 	bl	2b6a4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2b820:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2b824:	f7ff ff3e 	bl	2b6a4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2b828:	2300      	movs	r3, #0
   2b82a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2b82e:	f7ff ff39 	bl	2b6a4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   2b832:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2b836:	490c      	ldr	r1, [pc, #48]	; (2b868 <SystemInit+0x1b4>)
   2b838:	4b0c      	ldr	r3, [pc, #48]	; (2b86c <SystemInit+0x1b8>)
   2b83a:	68ca      	ldr	r2, [r1, #12]
   2b83c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2b840:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2b842:	60cb      	str	r3, [r1, #12]
   2b844:	f3bf 8f4f 	dsb	sy
    __NOP();
   2b848:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2b84a:	e7fd      	b.n	2b848 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   2b84c:	bd10      	pop	{r4, pc}
   2b84e:	bf00      	nop
   2b850:	40005000 	.word	0x40005000
   2b854:	00038148 	.word	0x00038148
   2b858:	4000f000 	.word	0x4000f000
   2b85c:	40029000 	.word	0x40029000
   2b860:	00030d37 	.word	0x00030d37
   2b864:	4001e000 	.word	0x4001e000
   2b868:	e000ed00 	.word	0xe000ed00
   2b86c:	05fa0004 	.word	0x05fa0004

0002b870 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2b870:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2b872:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   2b874:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2b876:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   2b87a:	fab2 f382 	clz	r3, r2
   2b87e:	f1c3 031f 	rsb	r3, r3, #31
   2b882:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2b884:	fa05 f403 	lsl.w	r4, r5, r3
   2b888:	ea22 0404 	bic.w	r4, r2, r4
   2b88c:	e850 6f00 	ldrex	r6, [r0]
   2b890:	4296      	cmp	r6, r2
   2b892:	d104      	bne.n	2b89e <nrfx_flag32_alloc+0x2e>
   2b894:	e840 4c00 	strex	ip, r4, [r0]
   2b898:	f1bc 0f00 	cmp.w	ip, #0
   2b89c:	d1f6      	bne.n	2b88c <nrfx_flag32_alloc+0x1c>
   2b89e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2b8a2:	d1e7      	bne.n	2b874 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   2b8a4:	4801      	ldr	r0, [pc, #4]	; (2b8ac <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   2b8a6:	700b      	strb	r3, [r1, #0]
}
   2b8a8:	bd70      	pop	{r4, r5, r6, pc}
   2b8aa:	bf00      	nop
   2b8ac:	0bad0000 	.word	0x0bad0000

0002b8b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   2b8b0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2b8b2:	6803      	ldr	r3, [r0, #0]
   2b8b4:	40cb      	lsrs	r3, r1
   2b8b6:	07db      	lsls	r3, r3, #31
   2b8b8:	d414      	bmi.n	2b8e4 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2b8ba:	2301      	movs	r3, #1
   2b8bc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   2b8be:	6802      	ldr	r2, [r0, #0]
   2b8c0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2b8c4:	ea43 0102 	orr.w	r1, r3, r2
   2b8c8:	e850 4f00 	ldrex	r4, [r0]
   2b8cc:	4294      	cmp	r4, r2
   2b8ce:	d104      	bne.n	2b8da <nrfx_flag32_free+0x2a>
   2b8d0:	e840 1c00 	strex	ip, r1, [r0]
   2b8d4:	f1bc 0f00 	cmp.w	ip, #0
   2b8d8:	d1f6      	bne.n	2b8c8 <nrfx_flag32_free+0x18>
   2b8da:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2b8de:	d1ee      	bne.n	2b8be <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   2b8e0:	4801      	ldr	r0, [pc, #4]	; (2b8e8 <nrfx_flag32_free+0x38>)
}
   2b8e2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2b8e4:	4801      	ldr	r0, [pc, #4]	; (2b8ec <nrfx_flag32_free+0x3c>)
   2b8e6:	e7fc      	b.n	2b8e2 <nrfx_flag32_free+0x32>
   2b8e8:	0bad0000 	.word	0x0bad0000
   2b8ec:	0bad0004 	.word	0x0bad0004

0002b8f0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   2b8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   2b8f2:	4604      	mov	r4, r0
   2b8f4:	b118      	cbz	r0, 2b8fe <clock_stop+0xe>
   2b8f6:	2801      	cmp	r0, #1
   2b8f8:	d022      	beq.n	2b940 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2b8fa:	b003      	add	sp, #12
   2b8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   2b8fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b902:	2202      	movs	r2, #2
   2b904:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b908:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   2b90c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b910:	2201      	movs	r2, #1
   2b912:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2b914:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2b916:	2301      	movs	r3, #1
   2b918:	f88d 3007 	strb.w	r3, [sp, #7]
   2b91c:	f242 7510 	movw	r5, #10000	; 0x2710
   2b920:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   2b924:	b1cc      	cbz	r4, 2b95a <clock_stop+0x6a>
   2b926:	2c01      	cmp	r4, #1
   2b928:	d1e7      	bne.n	2b8fa <clock_stop+0xa>
            if (p_clk_src != NULL)
   2b92a:	b3c7      	cbz	r7, 2b99e <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2b92c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   2b930:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2b934:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2b936:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   2b93a:	03da      	lsls	r2, r3, #15
   2b93c:	d521      	bpl.n	2b982 <clock_stop+0x92>
   2b93e:	e016      	b.n	2b96e <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
   2b940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b944:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   2b946:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b94a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2b94e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b952:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2b954:	f10d 0707 	add.w	r7, sp, #7
   2b958:	e7dd      	b.n	2b916 <clock_stop+0x26>
            if (p_clk_src != NULL)
   2b95a:	b1b7      	cbz	r7, 2b98a <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2b95c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2b960:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2b964:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2b966:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   2b96a:	03d8      	lsls	r0, r3, #15
   2b96c:	d5c5      	bpl.n	2b8fa <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2b96e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2b972:	2801      	cmp	r0, #1
   2b974:	d103      	bne.n	2b97e <clock_stop+0x8e>
   2b976:	f004 f90f 	bl	2fb98 <nrfx_busy_wait>
   2b97a:	3d01      	subs	r5, #1
   2b97c:	d1d2      	bne.n	2b924 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   2b97e:	2c01      	cmp	r4, #1
   2b980:	d1bb      	bne.n	2b8fa <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   2b982:	4b0c      	ldr	r3, [pc, #48]	; (2b9b4 <clock_stop+0xc4>)
   2b984:	2200      	movs	r2, #0
   2b986:	715a      	strb	r2, [r3, #5]
   2b988:	e7b7      	b.n	2b8fa <clock_stop+0xa>
   2b98a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   2b98e:	03d9      	lsls	r1, r3, #15
   2b990:	d5b3      	bpl.n	2b8fa <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2b992:	2001      	movs	r0, #1
   2b994:	f004 f900 	bl	2fb98 <nrfx_busy_wait>
   2b998:	3d01      	subs	r5, #1
   2b99a:	d1f6      	bne.n	2b98a <clock_stop+0x9a>
   2b99c:	e7ad      	b.n	2b8fa <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2b99e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   2b9a2:	03db      	lsls	r3, r3, #15
   2b9a4:	d5ed      	bpl.n	2b982 <clock_stop+0x92>
   2b9a6:	2001      	movs	r0, #1
   2b9a8:	f004 f8f6 	bl	2fb98 <nrfx_busy_wait>
   2b9ac:	3d01      	subs	r5, #1
   2b9ae:	d1f6      	bne.n	2b99e <clock_stop+0xae>
   2b9b0:	e7e7      	b.n	2b982 <clock_stop+0x92>
   2b9b2:	bf00      	nop
   2b9b4:	20001728 	.word	0x20001728

0002b9b8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2b9b8:	4b04      	ldr	r3, [pc, #16]	; (2b9cc <nrfx_clock_init+0x14>)
   2b9ba:	791a      	ldrb	r2, [r3, #4]
   2b9bc:	b922      	cbnz	r2, 2b9c8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2b9be:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   2b9c0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2b9c2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   2b9c4:	4802      	ldr	r0, [pc, #8]	; (2b9d0 <nrfx_clock_init+0x18>)
   2b9c6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2b9c8:	4802      	ldr	r0, [pc, #8]	; (2b9d4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2b9ca:	4770      	bx	lr
   2b9cc:	20001728 	.word	0x20001728
   2b9d0:	0bad0000 	.word	0x0bad0000
   2b9d4:	0bad000c 	.word	0x0bad000c

0002b9d8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2b9d8:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2b9da:	2000      	movs	r0, #0
   2b9dc:	f7fd fd46 	bl	2946c <arch_irq_is_enabled>
   2b9e0:	b908      	cbnz	r0, 2b9e6 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2b9e2:	f7fd fd21 	bl	29428 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2b9e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b9ea:	2200      	movs	r2, #0
   2b9ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   2b9f0:	4b01      	ldr	r3, [pc, #4]	; (2b9f8 <nrfx_clock_enable+0x20>)
   2b9f2:	2201      	movs	r2, #1
   2b9f4:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2b9f6:	bd08      	pop	{r3, pc}
   2b9f8:	20001bc9 	.word	0x20001bc9

0002b9fc <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2b9fc:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2b9fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ba02:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2ba06:	b16a      	cbz	r2, 2ba24 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ba08:	2200      	movs	r2, #0
   2ba0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2ba0e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   2ba12:	2201      	movs	r2, #1
   2ba14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   2ba18:	4b11      	ldr	r3, [pc, #68]	; (2ba60 <nrfx_clock_irq_handler+0x64>)
   2ba1a:	7958      	ldrb	r0, [r3, #5]
   2ba1c:	b910      	cbnz	r0, 2ba24 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   2ba1e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2ba20:	681b      	ldr	r3, [r3, #0]
   2ba22:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2ba24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ba28:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2ba2c:	b172      	cbz	r2, 2ba4c <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ba2e:	2200      	movs	r2, #0
   2ba30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2ba34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2ba38:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2ba3c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2ba40:	0792      	lsls	r2, r2, #30
   2ba42:	d104      	bne.n	2ba4e <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2ba44:	2201      	movs	r2, #1
   2ba46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ba4a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2ba4c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   2ba4e:	2202      	movs	r2, #2
   2ba50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2ba54:	4b02      	ldr	r3, [pc, #8]	; (2ba60 <nrfx_clock_irq_handler+0x64>)
}
   2ba56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2ba5a:	681b      	ldr	r3, [r3, #0]
   2ba5c:	2001      	movs	r0, #1
   2ba5e:	4718      	bx	r3
   2ba60:	20001728 	.word	0x20001728

0002ba64 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   2ba64:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2ba66:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2ba6a:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   2ba6c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   2ba6e:	6002      	str	r2, [r0, #0]
}
   2ba70:	4802      	ldr	r0, [pc, #8]	; (2ba7c <nrf_gpio_pin_port_decode+0x18>)
   2ba72:	bf18      	it	ne
   2ba74:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   2ba78:	4770      	bx	lr
   2ba7a:	bf00      	nop
   2ba7c:	50000300 	.word	0x50000300

0002ba80 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2ba80:	4b03      	ldr	r3, [pc, #12]	; (2ba90 <pin_in_use_by_te+0x10>)
   2ba82:	3008      	adds	r0, #8
   2ba84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2ba88:	f3c0 1040 	ubfx	r0, r0, #5, #1
   2ba8c:	4770      	bx	lr
   2ba8e:	bf00      	nop
   2ba90:	20000168 	.word	0x20000168

0002ba94 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2ba94:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2ba96:	f100 0308 	add.w	r3, r0, #8
   2ba9a:	4c0c      	ldr	r4, [pc, #48]	; (2bacc <call_handler+0x38>)
   2ba9c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   2baa0:	05da      	lsls	r2, r3, #23
{
   2baa2:	4605      	mov	r5, r0
   2baa4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2baa6:	d507      	bpl.n	2bab8 <call_handler+0x24>
   2baa8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   2baac:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2bab0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2bab4:	6852      	ldr	r2, [r2, #4]
   2bab6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2bab8:	68a3      	ldr	r3, [r4, #8]
   2baba:	b12b      	cbz	r3, 2bac8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2babc:	68e2      	ldr	r2, [r4, #12]
   2babe:	4631      	mov	r1, r6
   2bac0:	4628      	mov	r0, r5
    }
}
   2bac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2bac6:	4718      	bx	r3
}
   2bac8:	bd70      	pop	{r4, r5, r6, pc}
   2baca:	bf00      	nop
   2bacc:	20000168 	.word	0x20000168

0002bad0 <release_handler>:
{
   2bad0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2bad2:	4a12      	ldr	r2, [pc, #72]	; (2bb1c <release_handler+0x4c>)
   2bad4:	3008      	adds	r0, #8
   2bad6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2bada:	05d9      	lsls	r1, r3, #23
   2badc:	d51b      	bpl.n	2bb16 <release_handler+0x46>
   2bade:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2bae2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2bae6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2baea:	f102 040e 	add.w	r4, r2, #14
   2baee:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2baf0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   2baf4:	f413 7f80 	tst.w	r3, #256	; 0x100
   2baf8:	d003      	beq.n	2bb02 <release_handler+0x32>
   2bafa:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2bafe:	4299      	cmp	r1, r3
   2bb00:	d009      	beq.n	2bb16 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2bb02:	3001      	adds	r0, #1
   2bb04:	2830      	cmp	r0, #48	; 0x30
   2bb06:	d1f3      	bne.n	2baf0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2bb08:	2300      	movs	r3, #0
   2bb0a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2bb0e:	4804      	ldr	r0, [pc, #16]	; (2bb20 <release_handler+0x50>)
}
   2bb10:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2bb12:	f7ff becd 	b.w	2b8b0 <nrfx_flag32_free>
}
   2bb16:	bc10      	pop	{r4}
   2bb18:	4770      	bx	lr
   2bb1a:	bf00      	nop
   2bb1c:	20000168 	.word	0x20000168
   2bb20:	200001dc 	.word	0x200001dc

0002bb24 <pin_handler_trigger_uninit>:
{
   2bb24:	b538      	push	{r3, r4, r5, lr}
   2bb26:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2bb28:	f7ff ffaa 	bl	2ba80 <pin_in_use_by_te>
   2bb2c:	4c09      	ldr	r4, [pc, #36]	; (2bb54 <pin_handler_trigger_uninit+0x30>)
   2bb2e:	f102 0508 	add.w	r5, r2, #8
   2bb32:	b140      	cbz	r0, 2bb46 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2bb34:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2bb38:	4907      	ldr	r1, [pc, #28]	; (2bb58 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2bb3a:	0b5b      	lsrs	r3, r3, #13
   2bb3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   2bb40:	2000      	movs	r0, #0
   2bb42:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   2bb46:	4610      	mov	r0, r2
   2bb48:	f7ff ffc2 	bl	2bad0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2bb4c:	2300      	movs	r3, #0
   2bb4e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   2bb52:	bd38      	pop	{r3, r4, r5, pc}
   2bb54:	20000168 	.word	0x20000168
   2bb58:	40006000 	.word	0x40006000

0002bb5c <nrfx_gpiote_input_configure>:
{
   2bb5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2bb60:	4604      	mov	r4, r0
   2bb62:	4616      	mov	r6, r2
   2bb64:	461d      	mov	r5, r3
    if (p_input_config)
   2bb66:	b301      	cbz	r1, 2bbaa <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2bb68:	4f4e      	ldr	r7, [pc, #312]	; (2bca4 <nrfx_gpiote_input_configure+0x148>)
   2bb6a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2bb6e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   2bb72:	079b      	lsls	r3, r3, #30
   2bb74:	d502      	bpl.n	2bb7c <nrfx_gpiote_input_configure+0x20>
   2bb76:	f7ff ff83 	bl	2ba80 <pin_in_use_by_te>
   2bb7a:	bb10      	cbnz	r0, 2bbc2 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2bb7c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2bb7e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2bb82:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2bb86:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2bb8a:	f10d 020f 	add.w	r2, sp, #15
   2bb8e:	460b      	mov	r3, r1
   2bb90:	4620      	mov	r0, r4
   2bb92:	f10d 010e 	add.w	r1, sp, #14
   2bb96:	f004 f83f 	bl	2fc18 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2bb9a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   2bb9e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2bba2:	f043 0301 	orr.w	r3, r3, #1
   2bba6:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   2bbaa:	b346      	cbz	r6, 2bbfe <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2bbac:	4b3d      	ldr	r3, [pc, #244]	; (2bca4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2bbae:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2bbb2:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2bbb4:	f104 0708 	add.w	r7, r4, #8
   2bbb8:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   2bbbc:	0788      	lsls	r0, r1, #30
   2bbbe:	d502      	bpl.n	2bbc6 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   2bbc0:	b1aa      	cbz	r2, 2bbee <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   2bbc2:	4839      	ldr	r0, [pc, #228]	; (2bca8 <nrfx_gpiote_input_configure+0x14c>)
   2bbc4:	e01d      	b.n	2bc02 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2bbc6:	f021 0120 	bic.w	r1, r1, #32
   2bbca:	04c9      	lsls	r1, r1, #19
   2bbcc:	0cc9      	lsrs	r1, r1, #19
   2bbce:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   2bbd2:	b162      	cbz	r2, 2bbee <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   2bbd4:	f1bc 0f03 	cmp.w	ip, #3
   2bbd8:	d8f3      	bhi.n	2bbc2 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   2bbda:	6872      	ldr	r2, [r6, #4]
   2bbdc:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2bbde:	f1bc 0f00 	cmp.w	ip, #0
   2bbe2:	d111      	bne.n	2bc08 <nrfx_gpiote_input_configure+0xac>
   2bbe4:	4a31      	ldr	r2, [pc, #196]	; (2bcac <nrfx_gpiote_input_configure+0x150>)
   2bbe6:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   2bbea:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2bbee:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   2bbf2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2bbf6:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   2bbfa:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   2bbfe:	bb45      	cbnz	r5, 2bc52 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   2bc00:	482b      	ldr	r0, [pc, #172]	; (2bcb0 <nrfx_gpiote_input_configure+0x154>)
}
   2bc02:	b004      	add	sp, #16
   2bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2bc08:	00b2      	lsls	r2, r6, #2
   2bc0a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2bc0e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2bc12:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   2bc16:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2bc1a:	f020 0003 	bic.w	r0, r0, #3
   2bc1e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2bc22:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2bc26:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   2bc2a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   2bc2e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2bc32:	0220      	lsls	r0, r4, #8
   2bc34:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   2bc38:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   2bc3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   2bc40:	ea40 000e 	orr.w	r0, r0, lr
   2bc44:	f041 0120 	orr.w	r1, r1, #32
   2bc48:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   2bc4c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   2bc50:	e7cd      	b.n	2bbee <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2bc52:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   2bc56:	4620      	mov	r0, r4
   2bc58:	f7ff ff3a 	bl	2bad0 <release_handler>
    if (!handler)
   2bc5c:	2e00      	cmp	r6, #0
   2bc5e:	d0cf      	beq.n	2bc00 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2bc60:	4d10      	ldr	r5, [pc, #64]	; (2bca4 <nrfx_gpiote_input_configure+0x148>)
   2bc62:	e9d5 2300 	ldrd	r2, r3, [r5]
   2bc66:	4296      	cmp	r6, r2
   2bc68:	d101      	bne.n	2bc6e <nrfx_gpiote_input_configure+0x112>
   2bc6a:	429f      	cmp	r7, r3
   2bc6c:	d018      	beq.n	2bca0 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2bc6e:	4811      	ldr	r0, [pc, #68]	; (2bcb4 <nrfx_gpiote_input_configure+0x158>)
   2bc70:	f10d 010f 	add.w	r1, sp, #15
   2bc74:	f7ff fdfc 	bl	2b870 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2bc78:	4b0d      	ldr	r3, [pc, #52]	; (2bcb0 <nrfx_gpiote_input_configure+0x154>)
   2bc7a:	4298      	cmp	r0, r3
   2bc7c:	d1c1      	bne.n	2bc02 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   2bc7e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2bc82:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2bc86:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2bc8a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   2bc8c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2bc8e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2bc92:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2bc96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2bc9a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   2bc9e:	e7af      	b.n	2bc00 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2bca0:	2200      	movs	r2, #0
   2bca2:	e7ee      	b.n	2bc82 <nrfx_gpiote_input_configure+0x126>
   2bca4:	20000168 	.word	0x20000168
   2bca8:	0bad0004 	.word	0x0bad0004
   2bcac:	40006000 	.word	0x40006000
   2bcb0:	0bad0000 	.word	0x0bad0000
   2bcb4:	200001dc 	.word	0x200001dc

0002bcb8 <nrfx_gpiote_output_configure>:
{
   2bcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bcba:	4604      	mov	r4, r0
   2bcbc:	b085      	sub	sp, #20
   2bcbe:	4615      	mov	r5, r2
    if (p_config)
   2bcc0:	b319      	cbz	r1, 2bd0a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2bcc2:	4e33      	ldr	r6, [pc, #204]	; (2bd90 <nrfx_gpiote_output_configure+0xd8>)
   2bcc4:	f100 0708 	add.w	r7, r0, #8
   2bcc8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2bccc:	0793      	lsls	r3, r2, #30
   2bcce:	d403      	bmi.n	2bcd8 <nrfx_gpiote_output_configure+0x20>
   2bcd0:	f7ff fed6 	bl	2ba80 <pin_in_use_by_te>
   2bcd4:	2800      	cmp	r0, #0
   2bcd6:	d158      	bne.n	2bd8a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2bcd8:	f012 0f1c 	tst.w	r2, #28
   2bcdc:	d002      	beq.n	2bce4 <nrfx_gpiote_output_configure+0x2c>
   2bcde:	784b      	ldrb	r3, [r1, #1]
   2bce0:	2b01      	cmp	r3, #1
   2bce2:	d052      	beq.n	2bd8a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2bce4:	2301      	movs	r3, #1
   2bce6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2bcea:	2300      	movs	r3, #0
   2bcec:	e9cd 1300 	strd	r1, r3, [sp]
   2bcf0:	1c4a      	adds	r2, r1, #1
   2bcf2:	1c8b      	adds	r3, r1, #2
   2bcf4:	4620      	mov	r0, r4
   2bcf6:	f10d 010f 	add.w	r1, sp, #15
   2bcfa:	f003 ff8d 	bl	2fc18 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2bcfe:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2bd02:	f043 0303 	orr.w	r3, r3, #3
   2bd06:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2bd0a:	b915      	cbnz	r5, 2bd12 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   2bd0c:	4821      	ldr	r0, [pc, #132]	; (2bd94 <nrfx_gpiote_output_configure+0xdc>)
}
   2bd0e:	b005      	add	sp, #20
   2bd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2bd12:	4e1f      	ldr	r6, [pc, #124]	; (2bd90 <nrfx_gpiote_output_configure+0xd8>)
   2bd14:	f104 0708 	add.w	r7, r4, #8
   2bd18:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   2bd1c:	0783      	lsls	r3, r0, #30
   2bd1e:	d534      	bpl.n	2bd8a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   2bd20:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   2bd24:	4661      	mov	r1, ip
   2bd26:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2bd28:	f020 0020 	bic.w	r0, r0, #32
   2bd2c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2bd30:	04c0      	lsls	r0, r0, #19
   2bd32:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2bd36:	0cc0      	lsrs	r0, r0, #19
   2bd38:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2bd3c:	2300      	movs	r3, #0
   2bd3e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2bd42:	786a      	ldrb	r2, [r5, #1]
   2bd44:	2a00      	cmp	r2, #0
   2bd46:	d0e1      	beq.n	2bd0c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2bd48:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   2bd4c:	78ad      	ldrb	r5, [r5, #2]
   2bd4e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   2bd52:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2bd56:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2bd5a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   2bd5e:	0223      	lsls	r3, r4, #8
   2bd60:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2bd64:	0412      	lsls	r2, r2, #16
   2bd66:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2bd6a:	ea43 030e 	orr.w	r3, r3, lr
   2bd6e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2bd70:	052a      	lsls	r2, r5, #20
   2bd72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2bd76:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2bd7a:	4313      	orrs	r3, r2
   2bd7c:	f040 0020 	orr.w	r0, r0, #32
   2bd80:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2bd84:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2bd88:	e7c0      	b.n	2bd0c <nrfx_gpiote_output_configure+0x54>
{
   2bd8a:	4803      	ldr	r0, [pc, #12]	; (2bd98 <nrfx_gpiote_output_configure+0xe0>)
   2bd8c:	e7bf      	b.n	2bd0e <nrfx_gpiote_output_configure+0x56>
   2bd8e:	bf00      	nop
   2bd90:	20000168 	.word	0x20000168
   2bd94:	0bad0000 	.word	0x0bad0000
   2bd98:	0bad0004 	.word	0x0bad0004

0002bd9c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2bd9c:	4b01      	ldr	r3, [pc, #4]	; (2bda4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2bd9e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2bda2:	4770      	bx	lr
   2bda4:	20000168 	.word	0x20000168

0002bda8 <nrfx_gpiote_channel_get>:
{
   2bda8:	b508      	push	{r3, lr}
   2bdaa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2bdac:	f7ff fe68 	bl	2ba80 <pin_in_use_by_te>
   2bdb0:	b138      	cbz	r0, 2bdc2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2bdb2:	4b05      	ldr	r3, [pc, #20]	; (2bdc8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   2bdb4:	4805      	ldr	r0, [pc, #20]	; (2bdcc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2bdb6:	3208      	adds	r2, #8
   2bdb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   2bdbc:	0b5b      	lsrs	r3, r3, #13
   2bdbe:	700b      	strb	r3, [r1, #0]
}
   2bdc0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2bdc2:	4803      	ldr	r0, [pc, #12]	; (2bdd0 <nrfx_gpiote_channel_get+0x28>)
   2bdc4:	e7fc      	b.n	2bdc0 <nrfx_gpiote_channel_get+0x18>
   2bdc6:	bf00      	nop
   2bdc8:	20000168 	.word	0x20000168
   2bdcc:	0bad0000 	.word	0x0bad0000
   2bdd0:	0bad0004 	.word	0x0bad0004

0002bdd4 <nrfx_gpiote_init>:
{
   2bdd4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2bdd6:	4c0f      	ldr	r4, [pc, #60]	; (2be14 <nrfx_gpiote_init+0x40>)
   2bdd8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   2bddc:	b9bd      	cbnz	r5, 2be0e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2bdde:	2260      	movs	r2, #96	; 0x60
   2bde0:	4629      	mov	r1, r5
   2bde2:	f104 0010 	add.w	r0, r4, #16
   2bde6:	f003 fac6 	bl	2f376 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2bdea:	2006      	movs	r0, #6
   2bdec:	f7fd fb1c 	bl	29428 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2bdf0:	4b09      	ldr	r3, [pc, #36]	; (2be18 <nrfx_gpiote_init+0x44>)
    return err_code;
   2bdf2:	480a      	ldr	r0, [pc, #40]	; (2be1c <nrfx_gpiote_init+0x48>)
   2bdf4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   2bdf8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2bdfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2be00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2be04:	2301      	movs	r3, #1
   2be06:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2be0a:	6763      	str	r3, [r4, #116]	; 0x74
}
   2be0c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2be0e:	4804      	ldr	r0, [pc, #16]	; (2be20 <nrfx_gpiote_init+0x4c>)
   2be10:	e7fc      	b.n	2be0c <nrfx_gpiote_init+0x38>
   2be12:	bf00      	nop
   2be14:	20000168 	.word	0x20000168
   2be18:	40006000 	.word	0x40006000
   2be1c:	0bad0000 	.word	0x0bad0000
   2be20:	0bad0005 	.word	0x0bad0005

0002be24 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2be24:	4b03      	ldr	r3, [pc, #12]	; (2be34 <nrfx_gpiote_is_init+0x10>)
   2be26:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2be2a:	3800      	subs	r0, #0
   2be2c:	bf18      	it	ne
   2be2e:	2001      	movne	r0, #1
   2be30:	4770      	bx	lr
   2be32:	bf00      	nop
   2be34:	20000168 	.word	0x20000168

0002be38 <nrfx_gpiote_channel_free>:
{
   2be38:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2be3a:	4801      	ldr	r0, [pc, #4]	; (2be40 <nrfx_gpiote_channel_free+0x8>)
   2be3c:	f7ff bd38 	b.w	2b8b0 <nrfx_flag32_free>
   2be40:	200001d8 	.word	0x200001d8

0002be44 <nrfx_gpiote_channel_alloc>:
{
   2be44:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2be46:	4801      	ldr	r0, [pc, #4]	; (2be4c <nrfx_gpiote_channel_alloc+0x8>)
   2be48:	f7ff bd12 	b.w	2b870 <nrfx_flag32_alloc>
   2be4c:	200001d8 	.word	0x200001d8

0002be50 <nrfx_gpiote_trigger_enable>:
{
   2be50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2be52:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2be54:	f7ff fe14 	bl	2ba80 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2be58:	f104 0208 	add.w	r2, r4, #8
   2be5c:	4b1e      	ldr	r3, [pc, #120]	; (2bed8 <nrfx_gpiote_trigger_enable+0x88>)
   2be5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2be62:	b1e8      	cbz	r0, 2bea0 <nrfx_gpiote_trigger_enable+0x50>
   2be64:	f013 0502 	ands.w	r5, r3, #2
   2be68:	d11a      	bne.n	2bea0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2be6a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2be6c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   2be6e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   2be72:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2be76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2be7a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2be7e:	6005      	str	r5, [r0, #0]
   2be80:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2be82:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2be86:	f040 0001 	orr.w	r0, r0, #1
   2be8a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   2be8e:	b129      	cbz	r1, 2be9c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   2be90:	2201      	movs	r2, #1
   2be92:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   2be96:	4a11      	ldr	r2, [pc, #68]	; (2bedc <nrfx_gpiote_trigger_enable+0x8c>)
   2be98:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2be9c:	b003      	add	sp, #12
   2be9e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2bea0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2bea4:	2b04      	cmp	r3, #4
   2bea6:	d012      	beq.n	2bece <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2bea8:	2b05      	cmp	r3, #5
   2beaa:	d012      	beq.n	2bed2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2beac:	a801      	add	r0, sp, #4
   2beae:	9401      	str	r4, [sp, #4]
   2beb0:	f7ff fdd8 	bl	2ba64 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2beb4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   2beb6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2beba:	40d9      	lsrs	r1, r3
   2bebc:	f001 0101 	and.w	r1, r1, #1
   2bec0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2bec2:	4620      	mov	r0, r4
}
   2bec4:	b003      	add	sp, #12
   2bec6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2beca:	f003 beee 	b.w	2fcaa <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2bece:	2103      	movs	r1, #3
   2bed0:	e7f7      	b.n	2bec2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2bed2:	2102      	movs	r1, #2
   2bed4:	e7f5      	b.n	2bec2 <nrfx_gpiote_trigger_enable+0x72>
   2bed6:	bf00      	nop
   2bed8:	20000168 	.word	0x20000168
   2bedc:	40006000 	.word	0x40006000

0002bee0 <nrfx_gpiote_trigger_disable>:
{
   2bee0:	b508      	push	{r3, lr}
   2bee2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2bee4:	f7ff fdcc 	bl	2ba80 <pin_in_use_by_te>
   2bee8:	b1c0      	cbz	r0, 2bf1c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2beea:	f102 0108 	add.w	r1, r2, #8
   2beee:	4b0e      	ldr	r3, [pc, #56]	; (2bf28 <nrfx_gpiote_trigger_disable+0x48>)
   2bef0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2bef4:	0799      	lsls	r1, r3, #30
   2bef6:	d411      	bmi.n	2bf1c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2bef8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2befa:	2201      	movs	r2, #1
   2befc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   2befe:	009b      	lsls	r3, r3, #2
   2bf00:	490a      	ldr	r1, [pc, #40]	; (2bf2c <nrfx_gpiote_trigger_disable+0x4c>)
   2bf02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2bf06:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2bf0a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2bf0e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2bf12:	f022 0203 	bic.w	r2, r2, #3
   2bf16:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2bf1a:	bd08      	pop	{r3, pc}
   2bf1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2bf20:	2100      	movs	r1, #0
   2bf22:	4610      	mov	r0, r2
   2bf24:	f003 bec1 	b.w	2fcaa <nrf_gpio_cfg_sense_set>
   2bf28:	20000168 	.word	0x20000168
   2bf2c:	40006000 	.word	0x40006000

0002bf30 <nrfx_gpiote_pin_uninit>:
{
   2bf30:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2bf32:	4b0e      	ldr	r3, [pc, #56]	; (2bf6c <nrfx_gpiote_pin_uninit+0x3c>)
   2bf34:	f100 0208 	add.w	r2, r0, #8
{
   2bf38:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2bf3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   2bf3e:	07db      	lsls	r3, r3, #31
   2bf40:	d511      	bpl.n	2bf66 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   2bf42:	f7ff ffcd 	bl	2bee0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2bf46:	4620      	mov	r0, r4
   2bf48:	f7ff fdec 	bl	2bb24 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bf4c:	a801      	add	r0, sp, #4
   2bf4e:	9401      	str	r4, [sp, #4]
   2bf50:	f7ff fd88 	bl	2ba64 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bf54:	9b01      	ldr	r3, [sp, #4]
   2bf56:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2bf5a:	2202      	movs	r2, #2
   2bf5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   2bf60:	4803      	ldr	r0, [pc, #12]	; (2bf70 <nrfx_gpiote_pin_uninit+0x40>)
}
   2bf62:	b002      	add	sp, #8
   2bf64:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2bf66:	4803      	ldr	r0, [pc, #12]	; (2bf74 <nrfx_gpiote_pin_uninit+0x44>)
   2bf68:	e7fb      	b.n	2bf62 <nrfx_gpiote_pin_uninit+0x32>
   2bf6a:	bf00      	nop
   2bf6c:	20000168 	.word	0x20000168
   2bf70:	0bad0000 	.word	0x0bad0000
   2bf74:	0bad0004 	.word	0x0bad0004

0002bf78 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf7c:	4b68      	ldr	r3, [pc, #416]	; (2c120 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   2bf7e:	4869      	ldr	r0, [pc, #420]	; (2c124 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2bf80:	4969      	ldr	r1, [pc, #420]	; (2c128 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   2bf82:	2600      	movs	r6, #0
{
   2bf84:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2bf86:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2bf88:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bf8a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2bf8c:	b135      	cbz	r5, 2bf9c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2bf8e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   2bf92:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2bf94:	bf1e      	ittt	ne
   2bf96:	601c      	strne	r4, [r3, #0]
   2bf98:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2bf9a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2bf9c:	3304      	adds	r3, #4
   2bf9e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   2bfa0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2bfa4:	d1f1      	bne.n	2bf8a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bfa6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2c124 <nrfx_gpiote_irq_handler+0x1ac>
   2bfaa:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2bfae:	2b00      	cmp	r3, #0
   2bfb0:	f000 8099 	beq.w	2c0e6 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   2bfb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2bfb8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2bfbc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2bfbe:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2bfc2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   2bfc6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   2bfc8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2bfcc:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   2bfd0:	f10d 0a10 	add.w	sl, sp, #16
   2bfd4:	ea4f 1348 	mov.w	r3, r8, lsl #5
   2bfd8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2bfda:	f04f 0b01 	mov.w	fp, #1
   2bfde:	e049      	b.n	2c074 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   2bfe0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2bfe2:	4a52      	ldr	r2, [pc, #328]	; (2c12c <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   2bfe4:	fa94 f4a4 	rbit	r4, r4
   2bfe8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   2bfec:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2bfee:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2bff0:	f104 0308 	add.w	r3, r4, #8
   2bff4:	9403      	str	r4, [sp, #12]
   2bff6:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   2bffa:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   2bffe:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2c002:	fa0b f202 	lsl.w	r2, fp, r2
   2c006:	ea23 0302 	bic.w	r3, r3, r2
   2c00a:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c00e:	a803      	add	r0, sp, #12
   2c010:	f7ff fd28 	bl	2ba64 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2c014:	9b03      	ldr	r3, [sp, #12]
   2c016:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2c01a:	08b9      	lsrs	r1, r7, #2
   2c01c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2c020:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   2c024:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2c026:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2c028:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   2c02c:	d52c      	bpl.n	2c088 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   2c02e:	4620      	mov	r0, r4
   2c030:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2c032:	b2dd      	uxtb	r5, r3
   2c034:	f7ff fd2e 	bl	2ba94 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c038:	a803      	add	r0, sp, #12
   2c03a:	9403      	str	r4, [sp, #12]
   2c03c:	f7ff fd12 	bl	2ba64 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2c040:	9b03      	ldr	r3, [sp, #12]
   2c042:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2c046:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2c04a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2c04e:	429d      	cmp	r5, r3
   2c050:	d107      	bne.n	2c062 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2c052:	2100      	movs	r1, #0
   2c054:	4620      	mov	r0, r4
   2c056:	f003 fe28 	bl	2fcaa <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2c05a:	4629      	mov	r1, r5
   2c05c:	4620      	mov	r0, r4
   2c05e:	f003 fe24 	bl	2fcaa <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c062:	a803      	add	r0, sp, #12
   2c064:	9403      	str	r4, [sp, #12]
   2c066:	f7ff fcfd 	bl	2ba64 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2c06a:	9b03      	ldr	r3, [sp, #12]
   2c06c:	fa0b f303 	lsl.w	r3, fp, r3
   2c070:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   2c074:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   2c078:	2c00      	cmp	r4, #0
   2c07a:	d1b1      	bne.n	2bfe0 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2c07c:	f1b8 0f00 	cmp.w	r8, #0
   2c080:	d11d      	bne.n	2c0be <nrfx_gpiote_irq_handler+0x146>
   2c082:	f04f 0801 	mov.w	r8, #1
   2c086:	e7a5      	b.n	2bfd4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2c088:	2b02      	cmp	r3, #2
   2c08a:	d10c      	bne.n	2c0a6 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2c08c:	2103      	movs	r1, #3
   2c08e:	4620      	mov	r0, r4
   2c090:	f003 fe0b 	bl	2fcaa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2c094:	f005 0305 	and.w	r3, r5, #5
   2c098:	2b01      	cmp	r3, #1
   2c09a:	d1e2      	bne.n	2c062 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   2c09c:	4639      	mov	r1, r7
   2c09e:	4620      	mov	r0, r4
   2c0a0:	f7ff fcf8 	bl	2ba94 <call_handler>
   2c0a4:	e7dd      	b.n	2c062 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2c0a6:	2102      	movs	r1, #2
   2c0a8:	4620      	mov	r0, r4
   2c0aa:	9301      	str	r3, [sp, #4]
   2c0ac:	f003 fdfd 	bl	2fcaa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2c0b0:	2d03      	cmp	r5, #3
   2c0b2:	d0f3      	beq.n	2c09c <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2c0b4:	9b01      	ldr	r3, [sp, #4]
   2c0b6:	2b03      	cmp	r3, #3
   2c0b8:	d1d3      	bne.n	2c062 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2c0ba:	2d02      	cmp	r5, #2
   2c0bc:	e7ed      	b.n	2c09a <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   2c0be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2c0c2:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   2c0c6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   2c0ca:	4919      	ldr	r1, [pc, #100]	; (2c130 <nrfx_gpiote_irq_handler+0x1b8>)
   2c0cc:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   2c0d0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2c0d2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2c0d6:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   2c0da:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   2c0dc:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   2c0de:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   2c0e2:	f47f af73 	bne.w	2bfcc <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   2c0e6:	2401      	movs	r4, #1
    while (mask)
   2c0e8:	b916      	cbnz	r6, 2c0f0 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2c0ea:	b007      	add	sp, #28
   2c0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   2c0f0:	fa96 f3a6 	rbit	r3, r6
   2c0f4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2c0f8:	fa04 f203 	lsl.w	r2, r4, r3
   2c0fc:	009b      	lsls	r3, r3, #2
   2c0fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2c102:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2c106:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2c10a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2c10e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2c112:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2c116:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2c11a:	f7ff fcbb 	bl	2ba94 <call_handler>
   2c11e:	e7e3      	b.n	2c0e8 <nrfx_gpiote_irq_handler+0x170>
   2c120:	40006100 	.word	0x40006100
   2c124:	40006000 	.word	0x40006000
   2c128:	40006120 	.word	0x40006120
   2c12c:	20000168 	.word	0x20000168
   2c130:	50000300 	.word	0x50000300

0002c134 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   2c134:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   2c136:	4c18      	ldr	r4, [pc, #96]	; (2c198 <nrfx_power_init+0x64>)
   2c138:	7823      	ldrb	r3, [r4, #0]
   2c13a:	bb53      	cbnz	r3, 2c192 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   2c13c:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   2c13e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   2c142:	0792      	lsls	r2, r2, #30
   2c144:	d512      	bpl.n	2c16c <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2c14a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2c14e:	2a08      	cmp	r2, #8
   2c150:	d10b      	bne.n	2c16a <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2c152:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2c156:	2b05      	cmp	r3, #5
   2c158:	d807      	bhi.n	2c16a <nrfx_power_init+0x36>
   2c15a:	4a10      	ldr	r2, [pc, #64]	; (2c19c <nrfx_power_init+0x68>)
   2c15c:	5cd3      	ldrb	r3, [r2, r3]
   2c15e:	b123      	cbz	r3, 2c16a <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   2c160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c164:	2201      	movs	r2, #1
   2c166:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   2c16a:	2301      	movs	r3, #1
   2c16c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2c170:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   2c174:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2c176:	f003 0301 	and.w	r3, r3, #1
   2c17a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2c17e:	2000      	movs	r0, #0
   2c180:	f7fd f974 	bl	2946c <arch_irq_is_enabled>
   2c184:	b908      	cbnz	r0, 2c18a <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2c186:	f7fd f94f 	bl	29428 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   2c18a:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   2c18c:	4804      	ldr	r0, [pc, #16]	; (2c1a0 <nrfx_power_init+0x6c>)
    m_initialized = true;
   2c18e:	7023      	strb	r3, [r4, #0]
}
   2c190:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2c192:	4804      	ldr	r0, [pc, #16]	; (2c1a4 <nrfx_power_init+0x70>)
   2c194:	e7fc      	b.n	2c190 <nrfx_power_init+0x5c>
   2c196:	bf00      	nop
   2c198:	20001bca 	.word	0x20001bca
   2c19c:	00030d5a 	.word	0x00030d5a
   2c1a0:	0bad0000 	.word	0x0bad0000
   2c1a4:	0bad000c 	.word	0x0bad000c

0002c1a8 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   2c1a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c1ac:	f44f 7260 	mov.w	r2, #896	; 0x380
   2c1b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   2c1b4:	4b01      	ldr	r3, [pc, #4]	; (2c1bc <nrfx_power_usbevt_uninit+0x14>)
   2c1b6:	2200      	movs	r2, #0
   2c1b8:	601a      	str	r2, [r3, #0]
}
   2c1ba:	4770      	bx	lr
   2c1bc:	20001730 	.word	0x20001730

0002c1c0 <nrfx_power_usbevt_init>:
{
   2c1c0:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   2c1c2:	f7ff fff1 	bl	2c1a8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   2c1c6:	6803      	ldr	r3, [r0, #0]
   2c1c8:	b10b      	cbz	r3, 2c1ce <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   2c1ca:	4a01      	ldr	r2, [pc, #4]	; (2c1d0 <nrfx_power_usbevt_init+0x10>)
   2c1cc:	6013      	str	r3, [r2, #0]
}
   2c1ce:	bd08      	pop	{r3, pc}
   2c1d0:	20001730 	.word	0x20001730

0002c1d4 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   2c1d4:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   2c1d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c1da:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   2c1de:	0762      	lsls	r2, r4, #29
   2c1e0:	d507      	bpl.n	2c1f2 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   2c1e2:	f44f 7084 	mov.w	r0, #264	; 0x108
   2c1e6:	f003 fd6f 	bl	2fcc8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   2c1ea:	b110      	cbz	r0, 2c1f2 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   2c1ec:	4b1e      	ldr	r3, [pc, #120]	; (2c268 <nrfx_power_irq_handler+0x94>)
   2c1ee:	681b      	ldr	r3, [r3, #0]
   2c1f0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   2c1f2:	06a3      	lsls	r3, r4, #26
   2c1f4:	d508      	bpl.n	2c208 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   2c1f6:	f44f 708a 	mov.w	r0, #276	; 0x114
   2c1fa:	f003 fd65 	bl	2fcc8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   2c1fe:	b118      	cbz	r0, 2c208 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   2c200:	4b1a      	ldr	r3, [pc, #104]	; (2c26c <nrfx_power_irq_handler+0x98>)
   2c202:	2000      	movs	r0, #0
   2c204:	681b      	ldr	r3, [r3, #0]
   2c206:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   2c208:	0660      	lsls	r0, r4, #25
   2c20a:	d508      	bpl.n	2c21e <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   2c20c:	f44f 708c 	mov.w	r0, #280	; 0x118
   2c210:	f003 fd5a 	bl	2fcc8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   2c214:	b118      	cbz	r0, 2c21e <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   2c216:	4b15      	ldr	r3, [pc, #84]	; (2c26c <nrfx_power_irq_handler+0x98>)
   2c218:	2001      	movs	r0, #1
   2c21a:	681b      	ldr	r3, [r3, #0]
   2c21c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   2c21e:	0621      	lsls	r1, r4, #24
   2c220:	d508      	bpl.n	2c234 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   2c222:	f44f 708e 	mov.w	r0, #284	; 0x11c
   2c226:	f003 fd4f 	bl	2fcc8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   2c22a:	b118      	cbz	r0, 2c234 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   2c22c:	4b10      	ldr	r3, [pc, #64]	; (2c270 <nrfx_power_irq_handler+0x9c>)
   2c22e:	2000      	movs	r0, #0
   2c230:	681b      	ldr	r3, [r3, #0]
   2c232:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   2c234:	05e2      	lsls	r2, r4, #23
   2c236:	d508      	bpl.n	2c24a <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   2c238:	f44f 7090 	mov.w	r0, #288	; 0x120
   2c23c:	f003 fd44 	bl	2fcc8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   2c240:	b118      	cbz	r0, 2c24a <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   2c242:	4b0b      	ldr	r3, [pc, #44]	; (2c270 <nrfx_power_irq_handler+0x9c>)
   2c244:	2001      	movs	r0, #1
   2c246:	681b      	ldr	r3, [r3, #0]
   2c248:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   2c24a:	05a3      	lsls	r3, r4, #22
   2c24c:	d50a      	bpl.n	2c264 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   2c24e:	f44f 7092 	mov.w	r0, #292	; 0x124
   2c252:	f003 fd39 	bl	2fcc8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   2c256:	b128      	cbz	r0, 2c264 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   2c258:	4b05      	ldr	r3, [pc, #20]	; (2c270 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   2c25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   2c25e:	681b      	ldr	r3, [r3, #0]
   2c260:	2002      	movs	r0, #2
   2c262:	4718      	bx	r3
}
   2c264:	bd10      	pop	{r4, pc}
   2c266:	bf00      	nop
   2c268:	20001738 	.word	0x20001738
   2c26c:	20001734 	.word	0x20001734
   2c270:	20001730 	.word	0x20001730

0002c274 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   2c274:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   2c276:	4801      	ldr	r0, [pc, #4]	; (2c27c <nrfx_ppi_channel_alloc+0x8>)
   2c278:	f7ff bafa 	b.w	2b870 <nrfx_flag32_alloc>
   2c27c:	200001e4 	.word	0x200001e4

0002c280 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2c284:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2c288:	2a08      	cmp	r2, #8
   2c28a:	d106      	bne.n	2c29a <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2c28c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2c290:	2b05      	cmp	r3, #5
   2c292:	d804      	bhi.n	2c29e <nrf52_errata_187+0x1e>
   2c294:	4a03      	ldr	r2, [pc, #12]	; (2c2a4 <nrf52_errata_187+0x24>)
   2c296:	5cd0      	ldrb	r0, [r2, r3]
   2c298:	4770      	bx	lr
                        return false;
   2c29a:	2000      	movs	r0, #0
   2c29c:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2c29e:	2001      	movs	r0, #1
}
   2c2a0:	4770      	bx	lr
   2c2a2:	bf00      	nop
   2c2a4:	00030d69 	.word	0x00030d69

0002c2a8 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2c2a8:	4b05      	ldr	r3, [pc, #20]	; (2c2c0 <ep_state_access+0x18>)
   2c2aa:	f010 0f80 	tst.w	r0, #128	; 0x80
   2c2ae:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   2c2b2:	bf08      	it	eq
   2c2b4:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   2c2b6:	f000 000f 	and.w	r0, r0, #15
}
   2c2ba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2c2be:	4770      	bx	lr
   2c2c0:	200018e4 	.word	0x200018e4

0002c2c4 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   2c2c4:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   2c2c6:	4a07      	ldr	r2, [pc, #28]	; (2c2e4 <ev_usbreset_handler+0x20>)
   2c2c8:	2300      	movs	r3, #0
   2c2ca:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2c2cc:	4a06      	ldr	r2, [pc, #24]	; (2c2e8 <ev_usbreset_handler+0x24>)
   2c2ce:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   2c2d0:	2301      	movs	r3, #1
   2c2d2:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   2c2d4:	4b05      	ldr	r3, [pc, #20]	; (2c2ec <ev_usbreset_handler+0x28>)
   2c2d6:	a801      	add	r0, sp, #4
   2c2d8:	681b      	ldr	r3, [r3, #0]
   2c2da:	4798      	blx	r3
}
   2c2dc:	b003      	add	sp, #12
   2c2de:	f85d fb04 	ldr.w	pc, [sp], #4
   2c2e2:	bf00      	nop
   2c2e4:	20001bcd 	.word	0x20001bcd
   2c2e8:	20001bcc 	.word	0x20001bcc
   2c2ec:	2000197c 	.word	0x2000197c

0002c2f0 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   2c2f0:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
   2c2f2:	4b19      	ldr	r3, [pc, #100]	; (2c358 <ev_usbevent_handler+0x68>)
   2c2f4:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   2c2f8:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   2c2fc:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   2c2fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2c302:	d508      	bpl.n	2c316 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   2c304:	4b15      	ldr	r3, [pc, #84]	; (2c35c <ev_usbevent_handler+0x6c>)
   2c306:	2201      	movs	r2, #1
   2c308:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   2c30a:	2302      	movs	r3, #2
   2c30c:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   2c30e:	4b14      	ldr	r3, [pc, #80]	; (2c360 <ev_usbevent_handler+0x70>)
   2c310:	a801      	add	r0, sp, #4
   2c312:	681b      	ldr	r3, [r3, #0]
   2c314:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   2c316:	05a2      	lsls	r2, r4, #22
   2c318:	d508      	bpl.n	2c32c <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   2c31a:	4b10      	ldr	r3, [pc, #64]	; (2c35c <ev_usbevent_handler+0x6c>)
   2c31c:	2200      	movs	r2, #0
   2c31e:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   2c320:	2303      	movs	r3, #3
   2c322:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   2c324:	4b0e      	ldr	r3, [pc, #56]	; (2c360 <ev_usbevent_handler+0x70>)
   2c326:	a801      	add	r0, sp, #4
   2c328:	681b      	ldr	r3, [r3, #0]
   2c32a:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   2c32c:	0563      	lsls	r3, r4, #21
   2c32e:	d510      	bpl.n	2c352 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   2c330:	4b0a      	ldr	r3, [pc, #40]	; (2c35c <ev_usbevent_handler+0x6c>)
   2c332:	781a      	ldrb	r2, [r3, #0]
   2c334:	b16a      	cbz	r2, 2c352 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   2c336:	2200      	movs	r2, #0
   2c338:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   2c33a:	4b07      	ldr	r3, [pc, #28]	; (2c358 <ev_usbevent_handler+0x68>)
   2c33c:	2201      	movs	r2, #1
   2c33e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2c342:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2c344:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   2c346:	2304      	movs	r3, #4
   2c348:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   2c34a:	4b05      	ldr	r3, [pc, #20]	; (2c360 <ev_usbevent_handler+0x70>)
   2c34c:	a801      	add	r0, sp, #4
   2c34e:	681b      	ldr	r3, [r3, #0]
   2c350:	4798      	blx	r3
        }
    }
}
   2c352:	b002      	add	sp, #8
   2c354:	bd10      	pop	{r4, pc}
   2c356:	bf00      	nop
   2c358:	40027000 	.word	0x40027000
   2c35c:	20001bcd 	.word	0x20001bcd
   2c360:	2000197c 	.word	0x2000197c

0002c364 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   2c364:	f04f 0320 	mov.w	r3, #32
   2c368:	f3ef 8011 	mrs	r0, BASEPRI
   2c36c:	f383 8812 	msr	BASEPRI_MAX, r3
   2c370:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2c374:	4b0a      	ldr	r3, [pc, #40]	; (2c3a0 <usbd_errata_187_211_begin+0x3c>)
   2c376:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2c37a:	2203      	movs	r2, #3
   2c37c:	b961      	cbnz	r1, 2c398 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2c37e:	f249 3175 	movw	r1, #37749	; 0x9375
   2c382:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2c386:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2c38a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2c38e:	f380 8811 	msr	BASEPRI, r0
   2c392:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2c396:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2c398:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   2c39c:	e7f7      	b.n	2c38e <usbd_errata_187_211_begin+0x2a>
   2c39e:	bf00      	nop
   2c3a0:	4006e000 	.word	0x4006e000

0002c3a4 <usbd_errata_187_211_end>:
	__asm__ volatile(
   2c3a4:	f04f 0320 	mov.w	r3, #32
   2c3a8:	f3ef 8011 	mrs	r0, BASEPRI
   2c3ac:	f383 8812 	msr	BASEPRI_MAX, r3
   2c3b0:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2c3b4:	4b0a      	ldr	r3, [pc, #40]	; (2c3e0 <usbd_errata_187_211_end+0x3c>)
   2c3b6:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2c3ba:	b961      	cbnz	r1, 2c3d6 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2c3bc:	f249 3275 	movw	r2, #37749	; 0x9375
   2c3c0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   2c3c4:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2c3c8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2c3cc:	f380 8811 	msr	BASEPRI, r0
   2c3d0:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2c3d4:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   2c3d6:	2200      	movs	r2, #0
   2c3d8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   2c3dc:	e7f6      	b.n	2c3cc <usbd_errata_187_211_end+0x28>
   2c3de:	bf00      	nop
   2c3e0:	4006e000 	.word	0x4006e000

0002c3e4 <nrfx_usbd_feeder_flash>:
{
   2c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c3e6:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2c3e8:	4f0b      	ldr	r7, [pc, #44]	; (2c418 <nrfx_usbd_feeder_flash+0x34>)
   2c3ea:	429a      	cmp	r2, r3
   2c3ec:	bf28      	it	cs
   2c3ee:	461a      	movcs	r2, r3
{
   2c3f0:	460c      	mov	r4, r1
   2c3f2:	4615      	mov	r5, r2
   2c3f4:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2c3f6:	6809      	ldr	r1, [r1, #0]
   2c3f8:	4638      	mov	r0, r7
   2c3fa:	f002 ffb1 	bl	2f360 <memcpy>
    p_next->size = tx_size;
   2c3fe:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
   2c402:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2c404:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   2c406:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
   2c408:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   2c40a:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2c40c:	6023      	str	r3, [r4, #0]
}
   2c40e:	3800      	subs	r0, #0
   2c410:	bf18      	it	ne
   2c412:	2001      	movne	r0, #1
   2c414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c416:	bf00      	nop
   2c418:	2000173c 	.word	0x2000173c

0002c41c <nrfx_usbd_feeder_flash_zlp>:
{
   2c41c:	b570      	push	{r4, r5, r6, lr}
   2c41e:	684b      	ldr	r3, [r1, #4]
   2c420:	429a      	cmp	r2, r3
   2c422:	bf28      	it	cs
   2c424:	461a      	movcs	r2, r3
   2c426:	4606      	mov	r6, r0
   2c428:	460d      	mov	r5, r1
   2c42a:	4614      	mov	r4, r2
    if (tx_size != 0)
   2c42c:	b182      	cbz	r2, 2c450 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2c42e:	6809      	ldr	r1, [r1, #0]
   2c430:	4808      	ldr	r0, [pc, #32]	; (2c454 <nrfx_usbd_feeder_flash_zlp+0x38>)
   2c432:	f002 ff95 	bl	2f360 <memcpy>
        p_next->p_data.tx = p_buffer;
   2c436:	4b07      	ldr	r3, [pc, #28]	; (2c454 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   2c438:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   2c43c:	686b      	ldr	r3, [r5, #4]
   2c43e:	1b1b      	subs	r3, r3, r4
   2c440:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   2c442:	682b      	ldr	r3, [r5, #0]
   2c444:	4423      	add	r3, r4
}
   2c446:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   2c448:	602b      	str	r3, [r5, #0]
}
   2c44a:	bf18      	it	ne
   2c44c:	2001      	movne	r0, #1
   2c44e:	bd70      	pop	{r4, r5, r6, pc}
   2c450:	4613      	mov	r3, r2
   2c452:	e7f1      	b.n	2c438 <nrfx_usbd_feeder_flash_zlp+0x1c>
   2c454:	2000173c 	.word	0x2000173c

0002c458 <ev_sof_handler>:
{
   2c458:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   2c45a:	2300      	movs	r3, #0
   2c45c:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   2c460:	4b0b      	ldr	r3, [pc, #44]	; (2c490 <ev_sof_handler+0x38>)
   2c462:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   2c466:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   2c46a:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   2c46e:	4a09      	ldr	r2, [pc, #36]	; (2c494 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   2c470:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   2c472:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   2c474:	bf14      	ite	ne
   2c476:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
   2c47a:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
   2c47e:	430b      	orrs	r3, r1
   2c480:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   2c482:	4b05      	ldr	r3, [pc, #20]	; (2c498 <ev_sof_handler+0x40>)
   2c484:	a801      	add	r0, sp, #4
   2c486:	681b      	ldr	r3, [r3, #0]
   2c488:	4798      	blx	r3
}
   2c48a:	b003      	add	sp, #12
   2c48c:	f85d fb04 	ldr.w	pc, [sp], #4
   2c490:	40027000 	.word	0x40027000
   2c494:	20001978 	.word	0x20001978
   2c498:	2000197c 	.word	0x2000197c

0002c49c <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c49c:	4b06      	ldr	r3, [pc, #24]	; (2c4b8 <atomic_and.constprop.0.isra.0+0x1c>)
   2c49e:	f3bf 8f5b 	dmb	ish
   2c4a2:	e853 1f00 	ldrex	r1, [r3]
   2c4a6:	4001      	ands	r1, r0
   2c4a8:	e843 1200 	strex	r2, r1, [r3]
   2c4ac:	2a00      	cmp	r2, #0
   2c4ae:	d1f8      	bne.n	2c4a2 <atomic_and.constprop.0.isra.0+0x6>
   2c4b0:	f3bf 8f5b 	dmb	ish
}
   2c4b4:	4770      	bx	lr
   2c4b6:	bf00      	nop
   2c4b8:	20001974 	.word	0x20001974

0002c4bc <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c4bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2c4c0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2c4c4:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   2c4c6:	bf02      	ittt	eq
   2c4c8:	4b03      	ldreq	r3, [pc, #12]	; (2c4d8 <usbd_dma_pending_clear+0x1c>)
   2c4ca:	2200      	moveq	r2, #0
   2c4cc:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
   2c4d0:	4b02      	ldr	r3, [pc, #8]	; (2c4dc <usbd_dma_pending_clear+0x20>)
   2c4d2:	2200      	movs	r2, #0
   2c4d4:	701a      	strb	r2, [r3, #0]
}
   2c4d6:	4770      	bx	lr
   2c4d8:	40027000 	.word	0x40027000
   2c4dc:	20001bcb 	.word	0x20001bcb

0002c4e0 <nrf_usbd_ep0in_dma_handler>:
{
   2c4e0:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2c4e2:	f7ff ffeb 	bl	2c4bc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2c4e6:	4b08      	ldr	r3, [pc, #32]	; (2c508 <nrf_usbd_ep0in_dma_handler+0x28>)
   2c4e8:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   2c4ec:	2a03      	cmp	r2, #3
   2c4ee:	d105      	bne.n	2c4fc <nrf_usbd_ep0in_dma_handler+0x1c>
}
   2c4f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2c4f4:	f06f 0001 	mvn.w	r0, #1
   2c4f8:	f7ff bfd0 	b.w	2c49c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2c4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   2c500:	2b00      	cmp	r3, #0
   2c502:	d0f5      	beq.n	2c4f0 <nrf_usbd_ep0in_dma_handler+0x10>
}
   2c504:	bd08      	pop	{r3, pc}
   2c506:	bf00      	nop
   2c508:	20001854 	.word	0x20001854

0002c50c <usbd_ep_data_handler>:
{
   2c50c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   2c50e:	2201      	movs	r2, #1
   2c510:	fa02 f501 	lsl.w	r5, r2, r1
   2c514:	491c      	ldr	r1, [pc, #112]	; (2c588 <usbd_ep_data_handler+0x7c>)
   2c516:	4e1d      	ldr	r6, [pc, #116]	; (2c58c <usbd_ep_data_handler+0x80>)
   2c518:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   2c51a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   2c51e:	ea43 0305 	orr.w	r3, r3, r5
{
   2c522:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   2c524:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   2c526:	d024      	beq.n	2c572 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2c528:	f000 020f 	and.w	r2, r0, #15
   2c52c:	4b18      	ldr	r3, [pc, #96]	; (2c590 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2c52e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2c532:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2c536:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2c53a:	681a      	ldr	r2, [r3, #0]
    if (ret)
   2c53c:	b132      	cbz	r2, 2c54c <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2c53e:	2200      	movs	r2, #0
   2c540:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   2c542:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   2c544:	681b      	ldr	r3, [r3, #0]
   2c546:	d011      	beq.n	2c56c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   2c548:	f003 fc26 	bl	2fd98 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   2c54c:	6833      	ldr	r3, [r6, #0]
   2c54e:	402b      	ands	r3, r5
   2c550:	d10a      	bne.n	2c568 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2c552:	2206      	movs	r2, #6
   2c554:	f88d 2004 	strb.w	r2, [sp, #4]
   2c558:	f88d 4006 	strb.w	r4, [sp, #6]
   2c55c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   2c560:	4b0c      	ldr	r3, [pc, #48]	; (2c594 <usbd_ep_data_handler+0x88>)
   2c562:	a801      	add	r0, sp, #4
   2c564:	681b      	ldr	r3, [r3, #0]
   2c566:	4798      	blx	r3
}
   2c568:	b002      	add	sp, #8
   2c56a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   2c56c:	f7ff ffb8 	bl	2c4e0 <nrf_usbd_ep0in_dma_handler>
   2c570:	e7ec      	b.n	2c54c <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   2c572:	6833      	ldr	r3, [r6, #0]
   2c574:	421d      	tst	r5, r3
   2c576:	d1f7      	bne.n	2c568 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   2c578:	2306      	movs	r3, #6
   2c57a:	f88d 3004 	strb.w	r3, [sp, #4]
   2c57e:	f88d 0006 	strb.w	r0, [sp, #6]
   2c582:	f88d 2007 	strb.w	r2, [sp, #7]
   2c586:	e7eb      	b.n	2c560 <usbd_ep_data_handler+0x54>
   2c588:	20001978 	.word	0x20001978
   2c58c:	20001974 	.word	0x20001974
   2c590:	00030b7e 	.word	0x00030b7e
   2c594:	2000197c 	.word	0x2000197c

0002c598 <ev_setup_data_handler>:
{
   2c598:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   2c59a:	4b05      	ldr	r3, [pc, #20]	; (2c5b0 <ev_setup_data_handler+0x18>)
   2c59c:	781a      	ldrb	r2, [r3, #0]
   2c59e:	4610      	mov	r0, r2
   2c5a0:	f003 fbf1 	bl	2fd86 <ep2bit>
}
   2c5a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   2c5a8:	4601      	mov	r1, r0
   2c5aa:	4610      	mov	r0, r2
   2c5ac:	f7ff bfae 	b.w	2c50c <usbd_ep_data_handler>
   2c5b0:	20001bcc 	.word	0x20001bcc

0002c5b4 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   2c5b4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   2c5b6:	f7ff ff81 	bl	2c4bc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2c5ba:	4b0c      	ldr	r3, [pc, #48]	; (2c5ec <ev_dma_epout8_handler+0x38>)
   2c5bc:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   2c5c0:	2a03      	cmp	r2, #3
   2c5c2:	d010      	beq.n	2c5e6 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   2c5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   2c5c8:	b96b      	cbnz	r3, 2c5e6 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2c5ca:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   2c5ce:	f7ff ff65 	bl	2c49c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2c5d2:	2306      	movs	r3, #6
   2c5d4:	f88d 3004 	strb.w	r3, [sp, #4]
   2c5d8:	2308      	movs	r3, #8
   2c5da:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   2c5de:	4b04      	ldr	r3, [pc, #16]	; (2c5f0 <ev_dma_epout8_handler+0x3c>)
   2c5e0:	a801      	add	r0, sp, #4
   2c5e2:	681b      	ldr	r3, [r3, #0]
   2c5e4:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   2c5e6:	b003      	add	sp, #12
   2c5e8:	f85d fb04 	ldr.w	pc, [sp], #4
   2c5ec:	20001854 	.word	0x20001854
   2c5f0:	2000197c 	.word	0x2000197c

0002c5f4 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2c5f4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   2c5f6:	f7ff ff61 	bl	2c4bc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2c5fa:	4b10      	ldr	r3, [pc, #64]	; (2c63c <ev_dma_epin8_handler+0x48>)
   2c5fc:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   2c600:	2a03      	cmp	r2, #3
   2c602:	d106      	bne.n	2c612 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2c604:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2c608:	b003      	add	sp, #12
   2c60a:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2c60e:	f7ff bf45 	b.w	2c49c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2c612:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   2c616:	b96b      	cbnz	r3, 2c634 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2c618:	f46f 7080 	mvn.w	r0, #256	; 0x100
   2c61c:	f7ff ff3e 	bl	2c49c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2c620:	2306      	movs	r3, #6
   2c622:	f88d 3004 	strb.w	r3, [sp, #4]
   2c626:	2388      	movs	r3, #136	; 0x88
   2c628:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   2c62c:	4b04      	ldr	r3, [pc, #16]	; (2c640 <ev_dma_epin8_handler+0x4c>)
   2c62e:	a801      	add	r0, sp, #4
   2c630:	681b      	ldr	r3, [r3, #0]
   2c632:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2c634:	b003      	add	sp, #12
   2c636:	f85d fb04 	ldr.w	pc, [sp], #4
   2c63a:	bf00      	nop
   2c63c:	20001854 	.word	0x20001854
   2c640:	2000197c 	.word	0x2000197c

0002c644 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   2c644:	4a02      	ldr	r2, [pc, #8]	; (2c650 <nrfx_usbd_uninit+0xc>)
   2c646:	2300      	movs	r3, #0
   2c648:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   2c64a:	4a02      	ldr	r2, [pc, #8]	; (2c654 <nrfx_usbd_uninit+0x10>)
   2c64c:	7013      	strb	r3, [r2, #0]
    return;
}
   2c64e:	4770      	bx	lr
   2c650:	2000197c 	.word	0x2000197c
   2c654:	20001bce 	.word	0x20001bce

0002c658 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   2c658:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   2c65a:	4b4c      	ldr	r3, [pc, #304]	; (2c78c <nrfx_usbd_enable+0x134>)
   2c65c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2c660:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   2c664:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   2c668:	f7ff fe0a 	bl	2c280 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   2c66c:	b108      	cbz	r0, 2c672 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   2c66e:	f7ff fe79 	bl	2c364 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c672:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2c676:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2c67a:	2b08      	cmp	r3, #8
   2c67c:	d119      	bne.n	2c6b2 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
   2c67e:	f04f 0320 	mov.w	r3, #32
   2c682:	f3ef 8011 	mrs	r0, BASEPRI
   2c686:	f383 8812 	msr	BASEPRI_MAX, r3
   2c68a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2c68e:	4b40      	ldr	r3, [pc, #256]	; (2c790 <nrfx_usbd_enable+0x138>)
   2c690:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2c694:	22c0      	movs	r2, #192	; 0xc0
   2c696:	2900      	cmp	r1, #0
   2c698:	d170      	bne.n	2c77c <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2c69a:	f249 3175 	movw	r1, #37749	; 0x9375
   2c69e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   2c6a2:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2c6a6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2c6aa:	f380 8811 	msr	BASEPRI, r0
   2c6ae:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   2c6b2:	4b36      	ldr	r3, [pc, #216]	; (2c78c <nrfx_usbd_enable+0x134>)
   2c6b4:	2201      	movs	r2, #1
   2c6b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   2c6ba:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   2c6be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   2c6c2:	0512      	lsls	r2, r2, #20
   2c6c4:	d5fb      	bpl.n	2c6be <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
   2c6c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2c6ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   2c6ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c6d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2c6d6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2c6da:	2b08      	cmp	r3, #8
   2c6dc:	d118      	bne.n	2c710 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
   2c6de:	f04f 0320 	mov.w	r3, #32
   2c6e2:	f3ef 8011 	mrs	r0, BASEPRI
   2c6e6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c6ea:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2c6ee:	4b28      	ldr	r3, [pc, #160]	; (2c790 <nrfx_usbd_enable+0x138>)
   2c6f0:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2c6f4:	2900      	cmp	r1, #0
   2c6f6:	d144      	bne.n	2c782 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2c6f8:	f249 3275 	movw	r2, #37749	; 0x9375
   2c6fc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2c700:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2c704:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2c708:	f380 8811 	msr	BASEPRI, r0
   2c70c:	f3bf 8f6f 	isb	sy
   2c710:	f7ff fdb6 	bl	2c280 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   2c714:	b130      	cbz	r0, 2c724 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
   2c716:	f7ff fe45 	bl	2c3a4 <usbd_errata_187_211_end>
   2c71a:	f7ff fdb1 	bl	2c280 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2c71e:	b108      	cbz	r0, 2c724 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
   2c720:	f7ff fe20 	bl	2c364 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c724:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2c728:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2c72c:	2b08      	cmp	r3, #8
   2c72e:	4b17      	ldr	r3, [pc, #92]	; (2c78c <nrfx_usbd_enable+0x134>)
   2c730:	d10a      	bne.n	2c748 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   2c732:	f240 72e3 	movw	r2, #2019	; 0x7e3
   2c736:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   2c73a:	2240      	movs	r2, #64	; 0x40
   2c73c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   2c740:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   2c744:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2c748:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   2c74a:	2280      	movs	r2, #128	; 0x80
   2c74c:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2c750:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2c754:	4b0f      	ldr	r3, [pc, #60]	; (2c794 <nrfx_usbd_enable+0x13c>)
   2c756:	f240 12ff 	movw	r2, #511	; 0x1ff
   2c75a:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   2c75c:	4b0e      	ldr	r3, [pc, #56]	; (2c798 <nrfx_usbd_enable+0x140>)
   2c75e:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   2c760:	f7ff feac 	bl	2c4bc <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2c764:	4b0d      	ldr	r3, [pc, #52]	; (2c79c <nrfx_usbd_enable+0x144>)
   2c766:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   2c768:	4b0d      	ldr	r3, [pc, #52]	; (2c7a0 <nrfx_usbd_enable+0x148>)
   2c76a:	2202      	movs	r2, #2
   2c76c:	701a      	strb	r2, [r3, #0]
   2c76e:	f7ff fd87 	bl	2c280 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2c772:	b150      	cbz	r0, 2c78a <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   2c774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   2c778:	f7ff be14 	b.w	2c3a4 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   2c77c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2c780:	e793      	b.n	2c6aa <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2c782:	2200      	movs	r2, #0
   2c784:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2c788:	e7be      	b.n	2c708 <nrfx_usbd_enable+0xb0>
}
   2c78a:	bd08      	pop	{r3, pc}
   2c78c:	40027000 	.word	0x40027000
   2c790:	4006e000 	.word	0x4006e000
   2c794:	20001978 	.word	0x20001978
   2c798:	20001974 	.word	0x20001974
   2c79c:	20001bcc 	.word	0x20001bcc
   2c7a0:	20001bce 	.word	0x20001bce

0002c7a4 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   2c7a4:	4b0a      	ldr	r3, [pc, #40]	; (2c7d0 <nrfx_usbd_start+0x2c>)
   2c7a6:	2200      	movs	r2, #0
{
   2c7a8:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   2c7aa:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
   2c7ac:	4a09      	ldr	r2, [pc, #36]	; (2c7d4 <nrfx_usbd_start+0x30>)
   2c7ae:	4b0a      	ldr	r3, [pc, #40]	; (2c7d8 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   2c7b0:	4c0a      	ldr	r4, [pc, #40]	; (2c7dc <nrfx_usbd_start+0x38>)
   2c7b2:	2800      	cmp	r0, #0
   2c7b4:	bf08      	it	eq
   2c7b6:	4613      	moveq	r3, r2
   2c7b8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   2c7bc:	2027      	movs	r0, #39	; 0x27
   2c7be:	f7fc fe33 	bl	29428 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   2c7c2:	2301      	movs	r3, #1
   2c7c4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   2c7c8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   2c7cc:	bd10      	pop	{r4, pc}
   2c7ce:	bf00      	nop
   2c7d0:	20001bcd 	.word	0x20001bcd
   2c7d4:	01c01407 	.word	0x01c01407
   2c7d8:	01e01407 	.word	0x01e01407
   2c7dc:	40027000 	.word	0x40027000

0002c7e0 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   2c7e0:	4b03      	ldr	r3, [pc, #12]	; (2c7f0 <nrfx_usbd_is_enabled+0x10>)
   2c7e2:	7818      	ldrb	r0, [r3, #0]
}
   2c7e4:	2801      	cmp	r0, #1
   2c7e6:	bf94      	ite	ls
   2c7e8:	2000      	movls	r0, #0
   2c7ea:	2001      	movhi	r0, #1
   2c7ec:	4770      	bx	lr
   2c7ee:	bf00      	nop
   2c7f0:	20001bce 	.word	0x20001bce

0002c7f4 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
   2c7f4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c7f6:	f04f 0320 	mov.w	r3, #32
   2c7fa:	f3ef 8111 	mrs	r1, BASEPRI
   2c7fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2c802:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
   2c806:	4b0f      	ldr	r3, [pc, #60]	; (2c844 <nrfx_usbd_suspend+0x50>)
   2c808:	781b      	ldrb	r3, [r3, #0]
   2c80a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   2c80e:	b193      	cbz	r3, 2c836 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
   2c810:	4b0d      	ldr	r3, [pc, #52]	; (2c848 <nrfx_usbd_suspend+0x54>)
   2c812:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   2c816:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   2c81a:	d10c      	bne.n	2c836 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   2c81c:	2401      	movs	r4, #1
   2c81e:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2c822:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   2c826:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   2c82a:	05a4      	lsls	r4, r4, #22
   2c82c:	d504      	bpl.n	2c838 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   2c82e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2c832:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   2c836:	2000      	movs	r0, #0
	__asm__ volatile(
   2c838:	f381 8811 	msr	BASEPRI, r1
   2c83c:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
   2c840:	bd10      	pop	{r4, pc}
   2c842:	bf00      	nop
   2c844:	20001bcd 	.word	0x20001bcd
   2c848:	40027000 	.word	0x40027000

0002c84c <nrfx_usbd_init>:
{
   2c84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   2c84e:	4b1c      	ldr	r3, [pc, #112]	; (2c8c0 <nrfx_usbd_init+0x74>)
   2c850:	781c      	ldrb	r4, [r3, #0]
   2c852:	bb94      	cbnz	r4, 2c8ba <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   2c854:	4a1b      	ldr	r2, [pc, #108]	; (2c8c4 <nrfx_usbd_init+0x78>)
   2c856:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   2c858:	2201      	movs	r2, #1
   2c85a:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2c85c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   2c860:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2c862:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2c866:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2c86a:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2c86c:	bf14      	ite	ne
   2c86e:	4639      	movne	r1, r7
   2c870:	2140      	moveq	r1, #64	; 0x40
   2c872:	4628      	mov	r0, r5
   2c874:	f003 fabf 	bl	2fdf6 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   2c878:	4628      	mov	r0, r5
   2c87a:	f7ff fd15 	bl	2c2a8 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   2c87e:	3401      	adds	r4, #1
   2c880:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   2c882:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   2c884:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   2c886:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   2c888:	d1eb      	bne.n	2c862 <nrfx_usbd_init+0x16>
   2c88a:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2c88c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   2c890:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2c892:	f014 0f08 	tst.w	r4, #8
   2c896:	b2e6      	uxtb	r6, r4
   2c898:	bf14      	ite	ne
   2c89a:	4639      	movne	r1, r7
   2c89c:	2140      	moveq	r1, #64	; 0x40
   2c89e:	4630      	mov	r0, r6
   2c8a0:	f003 faa9 	bl	2fdf6 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   2c8a4:	4630      	mov	r0, r6
   2c8a6:	f7ff fcff 	bl	2c2a8 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   2c8aa:	3401      	adds	r4, #1
   2c8ac:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   2c8ae:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   2c8b0:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   2c8b2:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   2c8b4:	d1ed      	bne.n	2c892 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
   2c8b6:	4804      	ldr	r0, [pc, #16]	; (2c8c8 <nrfx_usbd_init+0x7c>)
}
   2c8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   2c8ba:	4804      	ldr	r0, [pc, #16]	; (2c8cc <nrfx_usbd_init+0x80>)
   2c8bc:	e7fc      	b.n	2c8b8 <nrfx_usbd_init+0x6c>
   2c8be:	bf00      	nop
   2c8c0:	20001bce 	.word	0x20001bce
   2c8c4:	2000197c 	.word	0x2000197c
   2c8c8:	0bad0000 	.word	0x0bad0000
   2c8cc:	0bad0005 	.word	0x0bad0005

0002c8d0 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   2c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c8d4:	4604      	mov	r4, r0
	__asm__ volatile(
   2c8d6:	f04f 0320 	mov.w	r3, #32
   2c8da:	f3ef 8611 	mrs	r6, BASEPRI
   2c8de:	f383 8812 	msr	BASEPRI_MAX, r3
   2c8e2:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   2c8e6:	f010 090f 	ands.w	r9, r0, #15
   2c8ea:	d103      	bne.n	2c8f4 <nrfx_usbd_ep_transfer+0x24>
   2c8ec:	4b27      	ldr	r3, [pc, #156]	; (2c98c <nrfx_usbd_ep_transfer+0xbc>)
   2c8ee:	781b      	ldrb	r3, [r3, #0]
   2c8f0:	4283      	cmp	r3, r0
   2c8f2:	d147      	bne.n	2c984 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2c8f4:	4b26      	ldr	r3, [pc, #152]	; (2c990 <nrfx_usbd_ep_transfer+0xc0>)
   2c8f6:	4f27      	ldr	r7, [pc, #156]	; (2c994 <nrfx_usbd_ep_transfer+0xc4>)
   2c8f8:	681a      	ldr	r2, [r3, #0]
   2c8fa:	683b      	ldr	r3, [r7, #0]
   2c8fc:	43d2      	mvns	r2, r2
   2c8fe:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
   2c900:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2c902:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
   2c904:	f003 fa3f 	bl	2fd86 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2c908:	f04f 0801 	mov.w	r8, #1
   2c90c:	fa08 f800 	lsl.w	r8, r8, r0
   2c910:	ea12 0f08 	tst.w	r2, r8
   2c914:	d138      	bne.n	2c988 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2c916:	4620      	mov	r0, r4
   2c918:	f7ff fcc6 	bl	2c2a8 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2c91c:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
   2c91e:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2c920:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2c922:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
   2c926:	d529      	bpl.n	2c97c <nrfx_usbd_ep_transfer+0xac>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2c928:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2c92a:	6888      	ldr	r0, [r1, #8]
   2c92c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2c930:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2c934:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2c938:	d11d      	bne.n	2c976 <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2c93a:	4a17      	ldr	r2, [pc, #92]	; (2c998 <nrfx_usbd_ep_transfer+0xc8>)
   2c93c:	4c17      	ldr	r4, [pc, #92]	; (2c99c <nrfx_usbd_ep_transfer+0xcc>)
   2c93e:	2800      	cmp	r0, #0
   2c940:	bf08      	it	eq
   2c942:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2c944:	4816      	ldr	r0, [pc, #88]	; (2c9a0 <nrfx_usbd_ep_transfer+0xd0>)
   2c946:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   2c948:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
   2c94a:	c907      	ldmia	r1, {r0, r1, r2}
   2c94c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   2c950:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
   2c952:	2300      	movs	r3, #0
   2c954:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   2c956:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   2c958:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
   2c95a:	4812      	ldr	r0, [pc, #72]	; (2c9a4 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   2c95c:	ea43 0308 	orr.w	r3, r3, r8
   2c960:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c962:	4b11      	ldr	r3, [pc, #68]	; (2c9a8 <nrfx_usbd_ep_transfer+0xd8>)
   2c964:	2280      	movs	r2, #128	; 0x80
   2c966:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   2c96a:	f386 8811 	msr	BASEPRI, r6
   2c96e:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   2c972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2c976:	4a0d      	ldr	r2, [pc, #52]	; (2c9ac <nrfx_usbd_ep_transfer+0xdc>)
   2c978:	4c0d      	ldr	r4, [pc, #52]	; (2c9b0 <nrfx_usbd_ep_transfer+0xe0>)
   2c97a:	e7e0      	b.n	2c93e <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   2c97c:	4a0d      	ldr	r2, [pc, #52]	; (2c9b4 <nrfx_usbd_ep_transfer+0xe4>)
   2c97e:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   2c980:	4a0d      	ldr	r2, [pc, #52]	; (2c9b8 <nrfx_usbd_ep_transfer+0xe8>)
   2c982:	e7e1      	b.n	2c948 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
   2c984:	480d      	ldr	r0, [pc, #52]	; (2c9bc <nrfx_usbd_ep_transfer+0xec>)
   2c986:	e7f0      	b.n	2c96a <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
   2c988:	480d      	ldr	r0, [pc, #52]	; (2c9c0 <nrfx_usbd_ep_transfer+0xf0>)
   2c98a:	e7ee      	b.n	2c96a <nrfx_usbd_ep_transfer+0x9a>
   2c98c:	20001bcc 	.word	0x20001bcc
   2c990:	20001978 	.word	0x20001978
   2c994:	20001974 	.word	0x20001974
   2c998:	0002fd5f 	.word	0x0002fd5f
   2c99c:	0002fd3d 	.word	0x0002fd3d
   2c9a0:	200017e8 	.word	0x200017e8
   2c9a4:	0bad0000 	.word	0x0bad0000
   2c9a8:	e000e100 	.word	0xe000e100
   2c9ac:	0002c41d 	.word	0x0002c41d
   2c9b0:	0002c3e5 	.word	0x0002c3e5
   2c9b4:	2000177c 	.word	0x2000177c
   2c9b8:	0002fd0b 	.word	0x0002fd0b
   2c9bc:	0bad000a 	.word	0x0bad000a
   2c9c0:	0bad000b 	.word	0x0bad000b

0002c9c4 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2c9c4:	f010 0f08 	tst.w	r0, #8
   2c9c8:	4b07      	ldr	r3, [pc, #28]	; (2c9e8 <nrfx_usbd_epout_size_get+0x24>)
   2c9ca:	d006      	beq.n	2c9da <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   2c9cc:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   2c9d0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   2c9d4:	bf18      	it	ne
   2c9d6:	2000      	movne	r0, #0
   2c9d8:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   2c9da:	f000 000f 	and.w	r0, r0, #15
   2c9de:	f500 7094 	add.w	r0, r0, #296	; 0x128
   2c9e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   2c9e6:	4770      	bx	lr
   2c9e8:	40027000 	.word	0x40027000

0002c9ec <usbd_dmareq_process>:
{
   2c9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   2c9f0:	4e59      	ldr	r6, [pc, #356]	; (2cb58 <usbd_dmareq_process+0x16c>)
   2c9f2:	7833      	ldrb	r3, [r6, #0]
{
   2c9f4:	b085      	sub	sp, #20
    if (!m_dma_pending)
   2c9f6:	2b00      	cmp	r3, #0
   2c9f8:	d173      	bne.n	2cae2 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   2c9fa:	f8df 8160 	ldr.w	r8, [pc, #352]	; 2cb5c <usbd_dmareq_process+0x170>
   2c9fe:	4d58      	ldr	r5, [pc, #352]	; (2cb60 <usbd_dmareq_process+0x174>)
   2ca00:	f8d8 4000 	ldr.w	r4, [r8]
   2ca04:	682b      	ldr	r3, [r5, #0]
   2ca06:	401c      	ands	r4, r3
   2ca08:	d06b      	beq.n	2cae2 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   2ca0a:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
   2ca0e:	bf14      	ite	ne
   2ca10:	fa93 f4a3 	rbitne	r4, r3
   2ca14:	fa94 f4a4 	rbiteq	r4, r4
   2ca18:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2ca1c:	f04f 0901 	mov.w	r9, #1
   2ca20:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2ca24:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2ca26:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2ca2a:	d95d      	bls.n	2cae8 <usbd_dmareq_process+0xfc>
   2ca2c:	3c10      	subs	r4, #16
   2ca2e:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2ca30:	4620      	mov	r0, r4
   2ca32:	f7ff fc39 	bl	2c2a8 <ep_state_access>
   2ca36:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   2ca38:	4620      	mov	r0, r4
   2ca3a:	f7ff ffc3 	bl	2c9c4 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   2ca3e:	f8da 7000 	ldr.w	r7, [sl]
   2ca42:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   2ca46:	f8da 1004 	ldr.w	r1, [sl, #4]
   2ca4a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   2ca4c:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   2ca4e:	a802      	add	r0, sp, #8
   2ca50:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   2ca52:	9b02      	ldr	r3, [sp, #8]
   2ca54:	2b00      	cmp	r3, #0
   2ca56:	d153      	bne.n	2cb00 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
   2ca58:	b908      	cbnz	r0, 2ca5e <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
   2ca5a:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ca5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
   2ca62:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
   2ca64:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2ca68:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   2ca6a:	bf02      	ittt	eq
   2ca6c:	4b3d      	ldreq	r3, [pc, #244]	; (2cb64 <usbd_dmareq_process+0x178>)
   2ca6e:	2282      	moveq	r2, #130	; 0x82
   2ca70:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   2ca74:	2301      	movs	r3, #1
   2ca76:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
   2ca78:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   2ca7a:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   2ca7c:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   2ca7e:	ea03 0309 	and.w	r3, r3, r9
   2ca82:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   2ca84:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   2ca88:	2900      	cmp	r1, #0
   2ca8a:	4413      	add	r3, r2
   2ca8c:	f8ca 3008 	str.w	r3, [sl, #8]
   2ca90:	f004 0508 	and.w	r5, r4, #8
   2ca94:	4b33      	ldr	r3, [pc, #204]	; (2cb64 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2ca96:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   2ca9a:	da4e      	bge.n	2cb3a <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   2ca9c:	2d00      	cmp	r5, #0
   2ca9e:	d044      	beq.n	2cb2a <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   2caa0:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   2caa4:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   2caa8:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2caaa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2caae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2cab2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2cab6:	2201      	movs	r2, #1
   2cab8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2caba:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2cabc:	4a2a      	ldr	r2, [pc, #168]	; (2cb68 <usbd_dmareq_process+0x17c>)
   2cabe:	4b2b      	ldr	r3, [pc, #172]	; (2cb6c <usbd_dmareq_process+0x180>)
   2cac0:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   2cac4:	bf38      	it	cc
   2cac6:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2cac8:	4926      	ldr	r1, [pc, #152]	; (2cb64 <usbd_dmareq_process+0x178>)
   2caca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2cace:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2cad2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2cad6:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   2cad8:	b91a      	cbnz	r2, 2cae2 <usbd_dmareq_process+0xf6>
   2cada:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   2cade:	2a00      	cmp	r2, #0
   2cae0:	d0f9      	beq.n	2cad6 <usbd_dmareq_process+0xea>
}
   2cae2:	b005      	add	sp, #20
   2cae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2cae8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2caec:	4620      	mov	r0, r4
   2caee:	f7ff fbdb 	bl	2c2a8 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
   2caf2:	6803      	ldr	r3, [r0, #0]
   2caf4:	8982      	ldrh	r2, [r0, #12]
   2caf6:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2caf8:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
   2cafa:	a802      	add	r0, sp, #8
   2cafc:	4798      	blx	r3
   2cafe:	e7ab      	b.n	2ca58 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
   2cb00:	9b03      	ldr	r3, [sp, #12]
   2cb02:	459b      	cmp	fp, r3
   2cb04:	d9a8      	bls.n	2ca58 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   2cb06:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2cb08:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   2cb0a:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2cb0e:	f7ff fcc5 	bl	2c49c <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2cb12:	2306      	movs	r3, #6
   2cb14:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   2cb18:	4b15      	ldr	r3, [pc, #84]	; (2cb70 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2cb1a:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   2cb1e:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2cb20:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   2cb24:	a801      	add	r0, sp, #4
   2cb26:	4798      	blx	r3
                    continue;
   2cb28:	e76a      	b.n	2ca00 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
   2cb2a:	2514      	movs	r5, #20
   2cb2c:	fb05 3304 	mla	r3, r5, r4, r3
   2cb30:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   2cb34:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
   2cb38:	e7b6      	b.n	2caa8 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
   2cb3a:	b12d      	cbz	r5, 2cb48 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   2cb3c:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   2cb40:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
   2cb44:	2328      	movs	r3, #40	; 0x28
   2cb46:	e7b0      	b.n	2caaa <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
   2cb48:	2514      	movs	r5, #20
   2cb4a:	fb05 3304 	mla	r3, r5, r4, r3
   2cb4e:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   2cb52:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   2cb56:	e7f5      	b.n	2cb44 <usbd_dmareq_process+0x158>
   2cb58:	20001bcb 	.word	0x20001bcb
   2cb5c:	20001974 	.word	0x20001974
   2cb60:	20001978 	.word	0x20001978
   2cb64:	40027000 	.word	0x40027000
   2cb68:	00030b6c 	.word	0x00030b6c
   2cb6c:	00030b7e 	.word	0x00030b7e
   2cb70:	2000197c 	.word	0x2000197c

0002cb74 <ev_epdata_handler>:
{
   2cb74:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   2cb76:	4b0f      	ldr	r3, [pc, #60]	; (2cbb4 <ev_epdata_handler+0x40>)
   2cb78:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   2cb7c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   2cb80:	2501      	movs	r5, #1
    while (dataepstatus)
   2cb82:	b91c      	cbnz	r4, 2cb8c <ev_epdata_handler+0x18>
}
   2cb84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   2cb88:	f7ff bf30 	b.w	2c9ec <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2cb8c:	fa94 f3a4 	rbit	r3, r4
   2cb90:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2cb94:	2b0f      	cmp	r3, #15
   2cb96:	bfc8      	it	gt
   2cb98:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2cb9c:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2cb9e:	bfd4      	ite	le
   2cba0:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   2cba4:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   2cba6:	fa05 f303 	lsl.w	r3, r5, r3
   2cbaa:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   2cbae:	f7ff fcad 	bl	2c50c <usbd_ep_data_handler>
   2cbb2:	e7e6      	b.n	2cb82 <ev_epdata_handler+0xe>
   2cbb4:	40027000 	.word	0x40027000

0002cbb8 <nrf_usbd_epout_dma_handler>:
{
   2cbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
   2cbba:	f7ff fc7f 	bl	2c4bc <usbd_dma_pending_clear>
{
   2cbbe:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2cbc0:	f7ff fb72 	bl	2c2a8 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2cbc4:	7b83      	ldrb	r3, [r0, #14]
   2cbc6:	2b03      	cmp	r3, #3
   2cbc8:	d10d      	bne.n	2cbe6 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2cbca:	4620      	mov	r0, r4
   2cbcc:	f003 f8db 	bl	2fd86 <ep2bit>
   2cbd0:	2301      	movs	r3, #1
   2cbd2:	fa03 f000 	lsl.w	r0, r3, r0
   2cbd6:	43c0      	mvns	r0, r0
   2cbd8:	f7ff fc60 	bl	2c49c <atomic_and.constprop.0.isra.0>
}
   2cbdc:	b003      	add	sp, #12
   2cbde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   2cbe2:	f7ff bf03 	b.w	2c9ec <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   2cbe6:	6805      	ldr	r5, [r0, #0]
   2cbe8:	2d00      	cmp	r5, #0
   2cbea:	d1f7      	bne.n	2cbdc <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2cbec:	4620      	mov	r0, r4
   2cbee:	f003 f8ca 	bl	2fd86 <ep2bit>
   2cbf2:	2301      	movs	r3, #1
   2cbf4:	fa03 f000 	lsl.w	r0, r3, r0
   2cbf8:	43c0      	mvns	r0, r0
   2cbfa:	f7ff fc4f 	bl	2c49c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2cbfe:	2306      	movs	r3, #6
   2cc00:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   2cc04:	4b04      	ldr	r3, [pc, #16]	; (2cc18 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2cc06:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   2cc0a:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2cc0c:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   2cc10:	a801      	add	r0, sp, #4
   2cc12:	4798      	blx	r3
   2cc14:	e7e2      	b.n	2cbdc <nrf_usbd_epout_dma_handler+0x24>
   2cc16:	bf00      	nop
   2cc18:	2000197c 	.word	0x2000197c

0002cc1c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   2cc1c:	4b02      	ldr	r3, [pc, #8]	; (2cc28 <nrfx_usbd_ep_stall+0xc>)
   2cc1e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2cc22:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   2cc26:	4770      	bx	lr
   2cc28:	40027000 	.word	0x40027000

0002cc2c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2cc2c:	0702      	lsls	r2, r0, #28
   2cc2e:	d413      	bmi.n	2cc58 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   2cc30:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   2cc34:	f010 0f80 	tst.w	r0, #128	; 0x80
   2cc38:	4a08      	ldr	r2, [pc, #32]	; (2cc5c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   2cc3a:	bf0b      	itete	eq
   2cc3c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   2cc40:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   2cc44:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   2cc48:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   2cc4c:	bf08      	it	eq
   2cc4e:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   2cc50:	1e43      	subs	r3, r0, #1
   2cc52:	4258      	negs	r0, r3
   2cc54:	4158      	adcs	r0, r3
   2cc56:	4770      	bx	lr
        return false;
   2cc58:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   2cc5a:	4770      	bx	lr
   2cc5c:	40027000 	.word	0x40027000

0002cc60 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   2cc60:	4b04      	ldr	r3, [pc, #16]	; (2cc74 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   2cc62:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   2cc66:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2cc6a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   2cc6e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   2cc72:	4770      	bx	lr
   2cc74:	40027000 	.word	0x40027000

0002cc78 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   2cc78:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   2cc7a:	2208      	movs	r2, #8
   2cc7c:	2100      	movs	r1, #0
{
   2cc7e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   2cc80:	f002 fb79 	bl	2f376 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2cc84:	4b0e      	ldr	r3, [pc, #56]	; (2ccc0 <nrfx_usbd_setup_get+0x48>)
   2cc86:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   2cc8a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   2cc8c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   2cc90:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   2cc92:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   2cc96:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   2cc9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2cc9e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   2cca0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   2cca4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   2cca8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   2ccac:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   2ccae:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   2ccb2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   2ccb6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   2ccba:	80e3      	strh	r3, [r4, #6]
}
   2ccbc:	bd10      	pop	{r4, pc}
   2ccbe:	bf00      	nop
   2ccc0:	40027000 	.word	0x40027000

0002ccc4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2ccc4:	4b02      	ldr	r3, [pc, #8]	; (2ccd0 <nrfx_usbd_setup_data_clear+0xc>)
   2ccc6:	2201      	movs	r2, #1
   2ccc8:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2ccca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   2cccc:	4770      	bx	lr
   2ccce:	bf00      	nop
   2ccd0:	40027000 	.word	0x40027000

0002ccd4 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2ccd4:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   2ccd6:	f7ff fbf1 	bl	2c4bc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2ccda:	4b10      	ldr	r3, [pc, #64]	; (2cd1c <ev_dma_epout0_handler+0x48>)
   2ccdc:	7b9a      	ldrb	r2, [r3, #14]
   2ccde:	2a03      	cmp	r2, #3
   2cce0:	d106      	bne.n	2ccf0 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2cce2:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2cce6:	b002      	add	sp, #8
   2cce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2ccec:	f7ff bbd6 	b.w	2c49c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   2ccf0:	681c      	ldr	r4, [r3, #0]
   2ccf2:	b974      	cbnz	r4, 2cd12 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2ccf4:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   2ccf8:	f7ff fbd0 	bl	2c49c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2ccfc:	2306      	movs	r3, #6
   2ccfe:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   2cd02:	4b07      	ldr	r3, [pc, #28]	; (2cd20 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2cd04:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   2cd08:	681b      	ldr	r3, [r3, #0]
   2cd0a:	a801      	add	r0, sp, #4
   2cd0c:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2cd0e:	b002      	add	sp, #8
   2cd10:	bd10      	pop	{r4, pc}
   2cd12:	b002      	add	sp, #8
   2cd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   2cd18:	f7ff bfd4 	b.w	2ccc4 <nrfx_usbd_setup_data_clear>
   2cd1c:	20001854 	.word	0x20001854
   2cd20:	2000197c 	.word	0x2000197c

0002cd24 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2cd24:	4b02      	ldr	r3, [pc, #8]	; (2cd30 <nrfx_usbd_setup_clear+0xc>)
   2cd26:	2201      	movs	r2, #1
   2cd28:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2cd2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   2cd2c:	4770      	bx	lr
   2cd2e:	bf00      	nop
   2cd30:	40027000 	.word	0x40027000

0002cd34 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2cd34:	4b02      	ldr	r3, [pc, #8]	; (2cd40 <nrfx_usbd_setup_stall+0xc>)
   2cd36:	2201      	movs	r2, #1
   2cd38:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2cd3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   2cd3c:	4770      	bx	lr
   2cd3e:	bf00      	nop
   2cd40:	40027000 	.word	0x40027000

0002cd44 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   2cd44:	4b01      	ldr	r3, [pc, #4]	; (2cd4c <nrfx_usbd_last_setup_dir_get+0x8>)
   2cd46:	7818      	ldrb	r0, [r3, #0]
   2cd48:	4770      	bx	lr
   2cd4a:	bf00      	nop
   2cd4c:	20001bcc 	.word	0x20001bcc

0002cd50 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   2cd50:	b510      	push	{r4, lr}
   2cd52:	4602      	mov	r2, r0
	__asm__ volatile(
   2cd54:	f04f 0320 	mov.w	r3, #32
   2cd58:	f3ef 8411 	mrs	r4, BASEPRI
   2cd5c:	f383 8812 	msr	BASEPRI_MAX, r3
   2cd60:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   2cd64:	f003 f80f 	bl	2fd86 <ep2bit>
   2cd68:	490d      	ldr	r1, [pc, #52]	; (2cda0 <nrfx_usbd_transfer_out_drop+0x50>)
   2cd6a:	2301      	movs	r3, #1
   2cd6c:	fa03 f000 	lsl.w	r0, r3, r0
   2cd70:	680b      	ldr	r3, [r1, #0]
   2cd72:	ea23 0300 	bic.w	r3, r3, r0
   2cd76:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   2cd78:	f012 0108 	ands.w	r1, r2, #8
   2cd7c:	d10a      	bne.n	2cd94 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   2cd7e:	f002 030f 	and.w	r3, r2, #15
   2cd82:	009b      	lsls	r3, r3, #2
   2cd84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2cd88:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   2cd8c:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   2cd90:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   2cd94:	f384 8811 	msr	BASEPRI, r4
   2cd98:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2cd9c:	bd10      	pop	{r4, pc}
   2cd9e:	bf00      	nop
   2cda0:	20001978 	.word	0x20001978

0002cda4 <usbd_ep_abort>:
{
   2cda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2cda6:	4601      	mov	r1, r0
	__asm__ volatile(
   2cda8:	f04f 0320 	mov.w	r3, #32
   2cdac:	f3ef 8511 	mrs	r5, BASEPRI
   2cdb0:	f383 8812 	msr	BASEPRI_MAX, r3
   2cdb4:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2cdb8:	f7ff fa76 	bl	2c2a8 <ep_state_access>
   2cdbc:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2cdbe:	4608      	mov	r0, r1
   2cdc0:	f002 ffe1 	bl	2fd86 <ep2bit>
   2cdc4:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   2cdc6:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2cdca:	fa02 f200 	lsl.w	r2, r2, r0
   2cdce:	482e      	ldr	r0, [pc, #184]	; (2ce88 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   2cdd0:	d119      	bne.n	2ce06 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2cdd2:	6803      	ldr	r3, [r0, #0]
   2cdd4:	ea32 0303 	bics.w	r3, r2, r3
   2cdd8:	d00a      	beq.n	2cdf0 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   2cdda:	4608      	mov	r0, r1
   2cddc:	f7ff ffb8 	bl	2cd50 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   2cde0:	2303      	movs	r3, #3
   2cde2:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   2cde4:	f385 8811 	msr	BASEPRI, r5
   2cde8:	f3bf 8f6f 	isb	sy
}
   2cdec:	b003      	add	sp, #12
   2cdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
   2cdf0:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2cdf2:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2cdf4:	4925      	ldr	r1, [pc, #148]	; (2ce8c <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2cdf6:	ea23 0302 	bic.w	r3, r3, r2
   2cdfa:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2cdfc:	680b      	ldr	r3, [r1, #0]
   2cdfe:	ea23 0302 	bic.w	r3, r3, r2
   2ce02:	600b      	str	r3, [r1, #0]
   2ce04:	e7ec      	b.n	2cde0 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   2ce06:	070b      	lsls	r3, r1, #28
   2ce08:	d415      	bmi.n	2ce36 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
   2ce0a:	2980      	cmp	r1, #128	; 0x80
   2ce0c:	4b20      	ldr	r3, [pc, #128]	; (2ce90 <usbd_ep_abort+0xec>)
   2ce0e:	d02f      	beq.n	2ce70 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   2ce10:	f001 040f 	and.w	r4, r1, #15
   2ce14:	f204 34da 	addw	r4, r4, #986	; 0x3da
   2ce18:	0064      	lsls	r4, r4, #1
   2ce1a:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2ce1e:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2ce22:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2ce26:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2ce28:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2ce2c:	433c      	orrs	r4, r7
   2ce2e:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   2ce32:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   2ce36:	4f15      	ldr	r7, [pc, #84]	; (2ce8c <usbd_ep_abort+0xe8>)
   2ce38:	6804      	ldr	r4, [r0, #0]
   2ce3a:	683b      	ldr	r3, [r7, #0]
   2ce3c:	ea64 0c03 	orn	ip, r4, r3
   2ce40:	ea1c 0f02 	tst.w	ip, r2
   2ce44:	d0ce      	beq.n	2cde4 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   2ce46:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2ce48:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   2ce4c:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   2ce4e:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2ce50:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   2ce52:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   2ce54:	2303      	movs	r3, #3
   2ce56:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2ce58:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   2ce5c:	4b0d      	ldr	r3, [pc, #52]	; (2ce94 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2ce5e:	f88d 1006 	strb.w	r1, [sp, #6]
   2ce62:	2206      	movs	r2, #6
            m_event_handler(&evt);
   2ce64:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2ce66:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   2ce6a:	a801      	add	r0, sp, #4
   2ce6c:	4798      	blx	r3
   2ce6e:	e7b9      	b.n	2cde4 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   2ce70:	f240 74b4 	movw	r4, #1972	; 0x7b4
   2ce74:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2ce78:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2ce7c:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2ce80:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2ce82:	f044 0404 	orr.w	r4, r4, #4
   2ce86:	e7d1      	b.n	2ce2c <usbd_ep_abort+0x88>
   2ce88:	20001974 	.word	0x20001974
   2ce8c:	20001978 	.word	0x20001978
   2ce90:	40027000 	.word	0x40027000
   2ce94:	2000197c 	.word	0x2000197c

0002ce98 <ev_setup_handler>:
{
   2ce98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2ce9a:	4b14      	ldr	r3, [pc, #80]	; (2ceec <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2ce9c:	4c14      	ldr	r4, [pc, #80]	; (2cef0 <ev_setup_handler+0x58>)
   2ce9e:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   2cea2:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   2cea4:	4e13      	ldr	r6, [pc, #76]	; (2cef4 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2cea6:	43da      	mvns	r2, r3
   2cea8:	4b13      	ldr	r3, [pc, #76]	; (2cef8 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   2ceaa:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2ceac:	681b      	ldr	r3, [r3, #0]
   2ceae:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   2ceb0:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2ceb2:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   2ceb4:	f002 ff67 	bl	2fd86 <ep2bit>
   2ceb8:	2301      	movs	r3, #1
   2ceba:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2cebc:	4213      	tst	r3, r2
   2cebe:	d002      	beq.n	2cec6 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   2cec0:	4608      	mov	r0, r1
   2cec2:	f7ff ff6f 	bl	2cda4 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   2cec6:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
   2ceca:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   2cece:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   2ced0:	f7ff fae4 	bl	2c49c <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   2ced4:	6823      	ldr	r3, [r4, #0]
   2ced6:	f043 0301 	orr.w	r3, r3, #1
   2ceda:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   2cedc:	2305      	movs	r3, #5
   2cede:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   2cee0:	4b06      	ldr	r3, [pc, #24]	; (2cefc <ev_setup_handler+0x64>)
   2cee2:	a801      	add	r0, sp, #4
   2cee4:	681b      	ldr	r3, [r3, #0]
   2cee6:	4798      	blx	r3
}
   2cee8:	b002      	add	sp, #8
   2ceea:	bd70      	pop	{r4, r5, r6, pc}
   2ceec:	40027000 	.word	0x40027000
   2cef0:	20001978 	.word	0x20001978
   2cef4:	20001bcc 	.word	0x20001bcc
   2cef8:	20001974 	.word	0x20001974
   2cefc:	2000197c 	.word	0x2000197c

0002cf00 <nrfx_usbd_irq_handler>:
{
   2cf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
   2cf04:	4b1a      	ldr	r3, [pc, #104]	; (2cf70 <nrfx_usbd_irq_handler+0x70>)
   2cf06:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   2cf0a:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
   2cf0c:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2cf0e:	461d      	mov	r5, r3
    while (to_process)
   2cf10:	b970      	cbnz	r0, 2cf30 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   2cf12:	4f18      	ldr	r7, [pc, #96]	; (2cf74 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   2cf14:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   2cf18:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   2cf1c:	f04f 0801 	mov.w	r8, #1
    while (active)
   2cf20:	b9bc      	cbnz	r4, 2cf52 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   2cf22:	f7ff fd63 	bl	2c9ec <usbd_dmareq_process>
    if (setup_active)
   2cf26:	b306      	cbz	r6, 2cf6a <nrfx_usbd_irq_handler+0x6a>
}
   2cf28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   2cf2c:	f7ff bfb4 	b.w	2ce98 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   2cf30:	fa90 f2a0 	rbit	r2, r0
   2cf34:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2cf38:	490f      	ldr	r1, [pc, #60]	; (2cf78 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   2cf3a:	0096      	lsls	r6, r2, #2
   2cf3c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   2cf3e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2cf42:	680e      	ldr	r6, [r1, #0]
    if (ret)
   2cf44:	b116      	cbz	r6, 2cf4c <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2cf46:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   2cf48:	6809      	ldr	r1, [r1, #0]
   2cf4a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   2cf4c:	ea20 0002 	bic.w	r0, r0, r2
   2cf50:	e7de      	b.n	2cf10 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   2cf52:	fa94 f5a4 	rbit	r5, r4
   2cf56:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   2cf5a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   2cf5e:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   2cf62:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   2cf64:	ea24 0405 	bic.w	r4, r4, r5
   2cf68:	e7da      	b.n	2cf20 <nrfx_usbd_irq_handler+0x20>
}
   2cf6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cf6e:	bf00      	nop
   2cf70:	40027000 	.word	0x40027000
   2cf74:	00030a64 	.word	0x00030a64
   2cf78:	40027100 	.word	0x40027100

0002cf7c <nrfx_usbd_stop>:
{
   2cf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cf7e:	4b1b      	ldr	r3, [pc, #108]	; (2cfec <nrfx_usbd_stop+0x70>)
   2cf80:	2280      	movs	r2, #128	; 0x80
   2cf82:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   2cf86:	2027      	movs	r0, #39	; 0x27
   2cf88:	f7fc fa70 	bl	2946c <arch_irq_is_enabled>
   2cf8c:	b1b8      	cbz	r0, 2cfbe <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   2cf8e:	4e18      	ldr	r6, [pc, #96]	; (2cff0 <nrfx_usbd_stop+0x74>)
   2cf90:	4b18      	ldr	r3, [pc, #96]	; (2cff4 <nrfx_usbd_stop+0x78>)
   2cf92:	6834      	ldr	r4, [r6, #0]
   2cf94:	681b      	ldr	r3, [r3, #0]
   2cf96:	0c24      	lsrs	r4, r4, #16
   2cf98:	0424      	lsls	r4, r4, #16
   2cf9a:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   2cf9c:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   2cf9e:	b97c      	cbnz	r4, 2cfc0 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   2cfa0:	4d15      	ldr	r5, [pc, #84]	; (2cff8 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2cfa2:	f240 13ff 	movw	r3, #511	; 0x1ff
   2cfa6:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
   2cfa8:	2027      	movs	r0, #39	; 0x27
   2cfaa:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   2cfae:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   2cfb2:	f7fc fa47 	bl	29444 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2cfb6:	f04f 33ff 	mov.w	r3, #4294967295
   2cfba:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
   2cfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   2cfc0:	fa94 f5a4 	rbit	r5, r4
   2cfc4:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2cfc8:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   2cfca:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2cfcc:	bfc6      	itte	gt
   2cfce:	f1a5 0010 	subgt.w	r0, r5, #16
   2cfd2:	b2c0      	uxtbgt	r0, r0
   2cfd4:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   2cfd8:	0703      	lsls	r3, r0, #28
   2cfda:	d401      	bmi.n	2cfe0 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
   2cfdc:	f7ff fee2 	bl	2cda4 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   2cfe0:	fa07 f505 	lsl.w	r5, r7, r5
   2cfe4:	ea24 0405 	bic.w	r4, r4, r5
   2cfe8:	e7d9      	b.n	2cf9e <nrfx_usbd_stop+0x22>
   2cfea:	bf00      	nop
   2cfec:	e000e100 	.word	0xe000e100
   2cff0:	20001978 	.word	0x20001978
   2cff4:	20001974 	.word	0x20001974
   2cff8:	40027000 	.word	0x40027000

0002cffc <nrfx_usbd_disable>:
{
   2cffc:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   2cffe:	f7ff ffbd 	bl	2cf7c <nrfx_usbd_stop>
    return p_reg->INTENSET;
   2d002:	4b08      	ldr	r3, [pc, #32]	; (2d024 <nrfx_usbd_disable+0x28>)
   2d004:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   2d008:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   2d00c:	2200      	movs	r2, #0
   2d00e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   2d012:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   2d016:	f7ff fa51 	bl	2c4bc <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   2d01a:	4b03      	ldr	r3, [pc, #12]	; (2d028 <nrfx_usbd_disable+0x2c>)
   2d01c:	2201      	movs	r2, #1
   2d01e:	701a      	strb	r2, [r3, #0]
}
   2d020:	bd08      	pop	{r3, pc}
   2d022:	bf00      	nop
   2d024:	40027000 	.word	0x40027000
   2d028:	20001bce 	.word	0x20001bce

0002d02c <nrfx_usbd_ep_disable>:
{
   2d02c:	b510      	push	{r4, lr}
   2d02e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   2d030:	f7ff feb8 	bl	2cda4 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2d034:	4a10      	ldr	r2, [pc, #64]	; (2d078 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   2d036:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2d03a:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   2d03e:	f04f 0301 	mov.w	r3, #1
   2d042:	bf14      	ite	ne
   2d044:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2d048:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   2d04c:	fa03 f300 	lsl.w	r3, r3, r0
   2d050:	ea6f 0303 	mvn.w	r3, r3
   2d054:	bf15      	itete	ne
   2d056:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2d058:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   2d05a:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2d05e:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2d062:	bf14      	ite	ne
   2d064:	4b05      	ldrne	r3, [pc, #20]	; (2d07c <nrfx_usbd_ep_disable+0x50>)
   2d066:	4b06      	ldreq	r3, [pc, #24]	; (2d080 <nrfx_usbd_ep_disable+0x54>)
   2d068:	5c1a      	ldrb	r2, [r3, r0]
   2d06a:	2301      	movs	r3, #1
   2d06c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   2d06e:	4a02      	ldr	r2, [pc, #8]	; (2d078 <nrfx_usbd_ep_disable+0x4c>)
   2d070:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   2d074:	bd10      	pop	{r4, pc}
   2d076:	bf00      	nop
   2d078:	40027000 	.word	0x40027000
   2d07c:	00030d78 	.word	0x00030d78
   2d080:	00030d6f 	.word	0x00030d6f

0002d084 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2d084:	f010 0f80 	tst.w	r0, #128	; 0x80
{
   2d088:	b570      	push	{r4, r5, r6, lr}
   2d08a:	4924      	ldr	r1, [pc, #144]	; (2d11c <nrfx_usbd_ep_enable+0x98>)
   2d08c:	4604      	mov	r4, r0
   2d08e:	f000 030f 	and.w	r3, r0, #15
   2d092:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2d096:	d012      	beq.n	2d0be <nrfx_usbd_ep_enable+0x3a>
   2d098:	4a21      	ldr	r2, [pc, #132]	; (2d120 <nrfx_usbd_ep_enable+0x9c>)
   2d09a:	5cd2      	ldrb	r2, [r2, r3]
   2d09c:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   2d0a0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   2d0a4:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2d0a8:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   2d0aa:	07d0      	lsls	r0, r2, #31
   2d0ac:	d406      	bmi.n	2d0bc <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
   2d0ae:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2d0b2:	fa05 f303 	lsl.w	r3, r5, r3
   2d0b6:	4313      	orrs	r3, r2
   2d0b8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
   2d0bc:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2d0be:	4a19      	ldr	r2, [pc, #100]	; (2d124 <nrfx_usbd_ep_enable+0xa0>)
   2d0c0:	5cd2      	ldrb	r2, [r2, r3]
   2d0c2:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   2d0c6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   2d0ca:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
   2d0ce:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   2d0d0:	07d2      	lsls	r2, r2, #31
   2d0d2:	d4f3      	bmi.n	2d0bc <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
   2d0d4:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
   2d0d8:	fa05 f203 	lsl.w	r2, r5, r3
   2d0dc:	4332      	orrs	r2, r6
   2d0de:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   2d0e2:	2b00      	cmp	r3, #0
   2d0e4:	d0ea      	beq.n	2d0bc <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
   2d0e6:	0703      	lsls	r3, r0, #28
   2d0e8:	d4e8      	bmi.n	2d0bc <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
   2d0ea:	f04f 0320 	mov.w	r3, #32
   2d0ee:	f3ef 8611 	mrs	r6, BASEPRI
   2d0f2:	f383 8812 	msr	BASEPRI_MAX, r3
   2d0f6:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   2d0fa:	f7ff fe29 	bl	2cd50 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2d0fe:	4620      	mov	r0, r4
   2d100:	f002 fe41 	bl	2fd86 <ep2bit>
   2d104:	4a08      	ldr	r2, [pc, #32]	; (2d128 <nrfx_usbd_ep_enable+0xa4>)
   2d106:	6813      	ldr	r3, [r2, #0]
   2d108:	fa05 f000 	lsl.w	r0, r5, r0
   2d10c:	ea23 0300 	bic.w	r3, r3, r0
   2d110:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2d112:	f386 8811 	msr	BASEPRI, r6
   2d116:	f3bf 8f6f 	isb	sy
}
   2d11a:	e7cf      	b.n	2d0bc <nrfx_usbd_ep_enable+0x38>
   2d11c:	40027000 	.word	0x40027000
   2d120:	00030d78 	.word	0x00030d78
   2d124:	00030d6f 	.word	0x00030d6f
   2d128:	20001974 	.word	0x20001974

0002d12c <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   2d12c:	0603      	lsls	r3, r0, #24
{
   2d12e:	b510      	push	{r4, lr}
   2d130:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   2d132:	d405      	bmi.n	2d140 <nrfx_usbd_ep_stall_clear+0x14>
   2d134:	f7ff fd7a 	bl	2cc2c <nrfx_usbd_ep_stall_check>
   2d138:	b110      	cbz	r0, 2d140 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   2d13a:	4620      	mov	r0, r4
   2d13c:	f7ff fe08 	bl	2cd50 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   2d140:	4b01      	ldr	r3, [pc, #4]	; (2d148 <nrfx_usbd_ep_stall_clear+0x1c>)
   2d142:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   2d146:	bd10      	pop	{r4, pc}
   2d148:	40027000 	.word	0x40027000

0002d14c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2d14c:	4b10      	ldr	r3, [pc, #64]	; (2d190 <z_sys_init_run_level+0x44>)
{
   2d14e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2d150:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2d154:	3001      	adds	r0, #1
   2d156:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2d15a:	42a6      	cmp	r6, r4
   2d15c:	d800      	bhi.n	2d160 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   2d15e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   2d160:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   2d164:	b18d      	cbz	r5, 2d18a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   2d166:	4628      	mov	r0, r5
   2d168:	4798      	blx	r3
			if (rc != 0) {
   2d16a:	b138      	cbz	r0, 2d17c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2d16c:	2800      	cmp	r0, #0
   2d16e:	bfb8      	it	lt
   2d170:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   2d172:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   2d174:	28ff      	cmp	r0, #255	; 0xff
   2d176:	bfa8      	it	ge
   2d178:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   2d17a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2d17c:	68ea      	ldr	r2, [r5, #12]
   2d17e:	7853      	ldrb	r3, [r2, #1]
   2d180:	f043 0301 	orr.w	r3, r3, #1
   2d184:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2d186:	3408      	adds	r4, #8
   2d188:	e7e7      	b.n	2d15a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   2d18a:	4798      	blx	r3
   2d18c:	e7fb      	b.n	2d186 <z_sys_init_run_level+0x3a>
   2d18e:	bf00      	nop
   2d190:	00030acc 	.word	0x00030acc

0002d194 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   2d194:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   2d196:	4b0a      	ldr	r3, [pc, #40]	; (2d1c0 <bg_thread_main+0x2c>)
   2d198:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2d19a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   2d19c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2d19e:	f7ff ffd5 	bl	2d14c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2d1a2:	f001 f94b 	bl	2e43c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2d1a6:	2004      	movs	r0, #4
   2d1a8:	f7ff ffd0 	bl	2d14c <z_sys_init_run_level>

	z_init_static_threads();
   2d1ac:	f000 f95c 	bl	2d468 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   2d1b0:	f001 fb6b 	bl	2e88a <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2d1b4:	4a03      	ldr	r2, [pc, #12]	; (2d1c4 <bg_thread_main+0x30>)
   2d1b6:	7b13      	ldrb	r3, [r2, #12]
   2d1b8:	f023 0301 	bic.w	r3, r3, #1
   2d1bc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2d1be:	bd08      	pop	{r3, pc}
   2d1c0:	20001bcf 	.word	0x20001bcf
   2d1c4:	20000598 	.word	0x20000598

0002d1c8 <z_bss_zero>:
{
   2d1c8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2d1ca:	4803      	ldr	r0, [pc, #12]	; (2d1d8 <z_bss_zero+0x10>)
   2d1cc:	4a03      	ldr	r2, [pc, #12]	; (2d1dc <z_bss_zero+0x14>)
   2d1ce:	2100      	movs	r1, #0
   2d1d0:	1a12      	subs	r2, r2, r0
   2d1d2:	f002 fe6a 	bl	2feaa <z_early_memset>
}
   2d1d6:	bd08      	pop	{r3, pc}
   2d1d8:	200003b8 	.word	0x200003b8
   2d1dc:	20001bd4 	.word	0x20001bd4

0002d1e0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2d1e0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   2d1e2:	2300      	movs	r3, #0
{
   2d1e4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2d1e6:	2201      	movs	r2, #1
   2d1e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   2d1ec:	4e13      	ldr	r6, [pc, #76]	; (2d23c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2d1ee:	4d14      	ldr	r5, [pc, #80]	; (2d240 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   2d1f0:	9301      	str	r3, [sp, #4]
   2d1f2:	220f      	movs	r2, #15
   2d1f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2d1f8:	4912      	ldr	r1, [pc, #72]	; (2d244 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2d1fa:	2314      	movs	r3, #20
   2d1fc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   2d200:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   2d204:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2d206:	f44f 70c0 	mov.w	r0, #384	; 0x180
   2d20a:	fb00 1104 	mla	r1, r0, r4, r1
   2d20e:	4b0e      	ldr	r3, [pc, #56]	; (2d248 <z_init_cpu+0x68>)
   2d210:	9500      	str	r5, [sp, #0]
   2d212:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2d216:	4630      	mov	r0, r6
   2d218:	f000 f8c8 	bl	2d3ac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d21c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2d21e:	4a0b      	ldr	r2, [pc, #44]	; (2d24c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2d220:	60ee      	str	r6, [r5, #12]
   2d222:	f023 0304 	bic.w	r3, r3, #4
   2d226:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2d228:	f44f 6304 	mov.w	r3, #2112	; 0x840
   2d22c:	fb04 3303 	mla	r3, r4, r3, r3
   2d230:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   2d232:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   2d234:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   2d236:	b006      	add	sp, #24
   2d238:	bd70      	pop	{r4, r5, r6, pc}
   2d23a:	bf00      	nop
   2d23c:	20000518 	.word	0x20000518
   2d240:	20001980 	.word	0x20001980
   2d244:	20002cc0 	.word	0x20002cc0
   2d248:	0002d521 	.word	0x0002d521
   2d24c:	20002480 	.word	0x20002480

0002d250 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   2d250:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2d252:	2000      	movs	r0, #0
{
   2d254:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2d256:	f7ff ff79 	bl	2d14c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2d25a:	4b2d      	ldr	r3, [pc, #180]	; (2d310 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2d25c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2d260:	4d2c      	ldr	r5, [pc, #176]	; (2d314 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   2d262:	4e2d      	ldr	r6, [pc, #180]	; (2d318 <z_cstart+0xc8>)
   2d264:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2d266:	4f2d      	ldr	r7, [pc, #180]	; (2d31c <z_cstart+0xcc>)
   2d268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2d26c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2d26e:	2400      	movs	r4, #0
   2d270:	23e0      	movs	r3, #224	; 0xe0
   2d272:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2d276:	77ec      	strb	r4, [r5, #31]
   2d278:	762c      	strb	r4, [r5, #24]
   2d27a:	766c      	strb	r4, [r5, #25]
   2d27c:	76ac      	strb	r4, [r5, #26]
   2d27e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2d282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d284:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2d288:	626b      	str	r3, [r5, #36]	; 0x24
   2d28a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2d28e:	f7fc fb3b 	bl	29908 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2d292:	f7fc f8a9 	bl	293e8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2d296:	f04f 33ff 	mov.w	r3, #4294967295
   2d29a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2d29c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2d29e:	f7fc fc6d 	bl	29b7c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2d2a2:	f7fc fbd3 	bl	29a4c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2d2a6:	f240 1301 	movw	r3, #257	; 0x101
   2d2aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2d2ae:	ab06      	add	r3, sp, #24
   2d2b0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   2d2b2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
   2d2b6:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2d2b8:	f002 fdd0 	bl	2fe5c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   2d2bc:	2001      	movs	r0, #1
   2d2be:	f7ff ff45 	bl	2d14c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2d2c2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   2d2c4:	4d16      	ldr	r5, [pc, #88]	; (2d320 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2d2c6:	f7ff ff41 	bl	2d14c <z_sys_init_run_level>
	z_sched_init();
   2d2ca:	f000 fe07 	bl	2dedc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2d2ce:	4b15      	ldr	r3, [pc, #84]	; (2d324 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   2d2d0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2d2d2:	9305      	str	r3, [sp, #20]
   2d2d4:	2301      	movs	r3, #1
   2d2d6:	4914      	ldr	r1, [pc, #80]	; (2d328 <z_cstart+0xd8>)
   2d2d8:	9400      	str	r4, [sp, #0]
   2d2da:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2d2de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2d2e2:	463b      	mov	r3, r7
   2d2e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2d2e8:	4628      	mov	r0, r5
   2d2ea:	f000 f85f 	bl	2d3ac <z_setup_new_thread>
   2d2ee:	7b6a      	ldrb	r2, [r5, #13]
   2d2f0:	4606      	mov	r6, r0
   2d2f2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   2d2f6:	4628      	mov	r0, r5
   2d2f8:	736a      	strb	r2, [r5, #13]
   2d2fa:	f002 ff72 	bl	301e2 <z_ready_thread>
	z_init_cpu(0);
   2d2fe:	4620      	mov	r0, r4
   2d300:	f7ff ff6e 	bl	2d1e0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2d304:	463a      	mov	r2, r7
   2d306:	4631      	mov	r1, r6
   2d308:	4628      	mov	r0, r5
   2d30a:	f7fc f97b 	bl	29604 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2d30e:	bf00      	nop
   2d310:	20002cc0 	.word	0x20002cc0
   2d314:	e000ed00 	.word	0xe000ed00
   2d318:	20001980 	.word	0x20001980
   2d31c:	0002d195 	.word	0x0002d195
   2d320:	20000598 	.word	0x20000598
   2d324:	00030d8b 	.word	0x00030d8b
   2d328:	20002e40 	.word	0x20002e40

0002d32c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   2d32c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2d32e:	4c06      	ldr	r4, [pc, #24]	; (2d348 <init_mem_slab_module+0x1c>)
   2d330:	4d06      	ldr	r5, [pc, #24]	; (2d34c <init_mem_slab_module+0x20>)
	int rc = 0;
   2d332:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2d334:	42ac      	cmp	r4, r5
   2d336:	d300      	bcc.n	2d33a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   2d338:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   2d33a:	4620      	mov	r0, r4
   2d33c:	f002 fdb9 	bl	2feb2 <create_free_list>
		if (rc < 0) {
   2d340:	2800      	cmp	r0, #0
   2d342:	dbf9      	blt.n	2d338 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2d344:	341c      	adds	r4, #28
   2d346:	e7f5      	b.n	2d334 <init_mem_slab_module+0x8>
   2d348:	2000025c 	.word	0x2000025c
   2d34c:	20000278 	.word	0x20000278

0002d350 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2d350:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d352:	460c      	mov	r4, r1
	__asm__ volatile(
   2d354:	f04f 0520 	mov.w	r5, #32
   2d358:	f3ef 8111 	mrs	r1, BASEPRI
   2d35c:	f385 8812 	msr	BASEPRI_MAX, r5
   2d360:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2d364:	6945      	ldr	r5, [r0, #20]
   2d366:	b15d      	cbz	r5, 2d380 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   2d368:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2d36a:	682b      	ldr	r3, [r5, #0]
   2d36c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2d36e:	6983      	ldr	r3, [r0, #24]
   2d370:	3301      	adds	r3, #1
   2d372:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2d374:	2000      	movs	r0, #0
	__asm__ volatile(
   2d376:	f381 8811 	msr	BASEPRI, r1
   2d37a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2d37e:	e011      	b.n	2d3a4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2d380:	ea52 0603 	orrs.w	r6, r2, r3
   2d384:	d103      	bne.n	2d38e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2d386:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   2d388:	f06f 000b 	mvn.w	r0, #11
   2d38c:	e7f3      	b.n	2d376 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2d38e:	e9cd 2300 	strd	r2, r3, [sp]
   2d392:	4602      	mov	r2, r0
   2d394:	3008      	adds	r0, #8
   2d396:	f000 fcab 	bl	2dcf0 <z_pend_curr>
		if (result == 0) {
   2d39a:	b918      	cbnz	r0, 2d3a4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   2d39c:	4b02      	ldr	r3, [pc, #8]	; (2d3a8 <k_mem_slab_alloc+0x58>)
   2d39e:	689b      	ldr	r3, [r3, #8]
   2d3a0:	695b      	ldr	r3, [r3, #20]
   2d3a2:	6023      	str	r3, [r4, #0]
}
   2d3a4:	b002      	add	sp, #8
   2d3a6:	bd70      	pop	{r4, r5, r6, pc}
   2d3a8:	20001980 	.word	0x20001980

0002d3ac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2d3ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2d3b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2d3b2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2d3b4:	2604      	movs	r6, #4
   2d3b6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   2d3b8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2d3ba:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2d3bc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   2d3c0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2d3c2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2d3c4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2d3c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   2d3ca:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2d3cc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2d3d0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2d3d2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   2d3d6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   2d3da:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   2d3dc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2d3de:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2d3e0:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2d3e4:	9202      	str	r2, [sp, #8]
   2d3e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d3e8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2d3ea:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2d3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d3ee:	9200      	str	r2, [sp, #0]
   2d3f0:	4642      	mov	r2, r8
{
   2d3f2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2d3f4:	f7fc f8d4 	bl	295a0 <arch_new_thread>
	if (!_current) {
   2d3f8:	4b04      	ldr	r3, [pc, #16]	; (2d40c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   2d3fa:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2d3fc:	689b      	ldr	r3, [r3, #8]
   2d3fe:	b103      	cbz	r3, 2d402 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   2d400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
   2d402:	6723      	str	r3, [r4, #112]	; 0x70
}
   2d404:	4640      	mov	r0, r8
   2d406:	b004      	add	sp, #16
   2d408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d40c:	20001980 	.word	0x20001980

0002d410 <z_impl_k_thread_create>:
{
   2d410:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d412:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2d414:	2500      	movs	r5, #0
   2d416:	9505      	str	r5, [sp, #20]
   2d418:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2d41a:	9504      	str	r5, [sp, #16]
   2d41c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2d41e:	9503      	str	r5, [sp, #12]
   2d420:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2d422:	9502      	str	r5, [sp, #8]
{
   2d424:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2d428:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2d42a:	9501      	str	r5, [sp, #4]
   2d42c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2d42e:	9500      	str	r5, [sp, #0]
{
   2d430:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2d432:	f7ff ffbb 	bl	2d3ac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2d436:	f1b6 3fff 	cmp.w	r6, #4294967295
   2d43a:	bf08      	it	eq
   2d43c:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   2d440:	d005      	beq.n	2d44e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2d442:	ea56 0307 	orrs.w	r3, r6, r7
   2d446:	d105      	bne.n	2d454 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2d448:	4620      	mov	r0, r4
   2d44a:	f000 fcc7 	bl	2dddc <z_sched_start>
}
   2d44e:	4620      	mov	r0, r4
   2d450:	b007      	add	sp, #28
   2d452:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2d454:	4903      	ldr	r1, [pc, #12]	; (2d464 <z_impl_k_thread_create+0x54>)
   2d456:	463a      	mov	r2, r7
   2d458:	4633      	mov	r3, r6
   2d45a:	f104 0018 	add.w	r0, r4, #24
   2d45e:	f000 fed3 	bl	2e208 <z_add_timeout>
   2d462:	e7f4      	b.n	2d44e <z_impl_k_thread_create+0x3e>
   2d464:	00030247 	.word	0x00030247

0002d468 <z_init_static_threads>:
{
   2d468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d46c:	4c29      	ldr	r4, [pc, #164]	; (2d514 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2d46e:	4d2a      	ldr	r5, [pc, #168]	; (2d518 <z_init_static_threads+0xb0>)
{
   2d470:	b087      	sub	sp, #28
   2d472:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   2d474:	42ae      	cmp	r6, r5
   2d476:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   2d47a:	d30f      	bcc.n	2d49c <z_init_static_threads+0x34>
	k_sched_lock();
   2d47c:	f000 fcfe 	bl	2de7c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2d480:	4c24      	ldr	r4, [pc, #144]	; (2d514 <z_init_static_threads+0xac>)
   2d482:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2d51c <z_init_static_threads+0xb4>
   2d486:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2d48a:	f240 37e7 	movw	r7, #999	; 0x3e7
   2d48e:	42ac      	cmp	r4, r5
   2d490:	d320      	bcc.n	2d4d4 <z_init_static_threads+0x6c>
}
   2d492:	b007      	add	sp, #28
   2d494:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2d498:	f000 bd04 	b.w	2dea4 <k_sched_unlock>
		z_setup_new_thread(
   2d49c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2d4a0:	9305      	str	r3, [sp, #20]
   2d4a2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2d4a6:	9304      	str	r3, [sp, #16]
   2d4a8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2d4ac:	9303      	str	r3, [sp, #12]
   2d4ae:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2d4b2:	9302      	str	r3, [sp, #8]
   2d4b4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2d4b8:	9301      	str	r3, [sp, #4]
   2d4ba:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2d4be:	9300      	str	r3, [sp, #0]
   2d4c0:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   2d4c4:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   2d4c8:	f7ff ff70 	bl	2d3ac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2d4cc:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2d4d0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2d4d2:	e7ce      	b.n	2d472 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2d4d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d4d6:	1c5a      	adds	r2, r3, #1
   2d4d8:	d00d      	beq.n	2d4f6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2d4da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2d4de:	2100      	movs	r1, #0
   2d4e0:	4638      	mov	r0, r7
   2d4e2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2d4e6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2d4ea:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2d4ee:	d104      	bne.n	2d4fa <z_init_static_threads+0x92>
	z_sched_start(thread);
   2d4f0:	4640      	mov	r0, r8
   2d4f2:	f000 fc73 	bl	2dddc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2d4f6:	342c      	adds	r4, #44	; 0x2c
   2d4f8:	e7c9      	b.n	2d48e <z_init_static_threads+0x26>
   2d4fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d4fe:	2300      	movs	r3, #0
   2d500:	f7f9 fdfe 	bl	27100 <__aeabi_uldivmod>
   2d504:	4602      	mov	r2, r0
   2d506:	460b      	mov	r3, r1
   2d508:	f108 0018 	add.w	r0, r8, #24
   2d50c:	4649      	mov	r1, r9
   2d50e:	f000 fe7b 	bl	2e208 <z_add_timeout>
   2d512:	e7f0      	b.n	2d4f6 <z_init_static_threads+0x8e>
   2d514:	0003077c 	.word	0x0003077c
   2d518:	0003077c 	.word	0x0003077c
   2d51c:	00030247 	.word	0x00030247

0002d520 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2d520:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2d522:	4c0b      	ldr	r4, [pc, #44]	; (2d550 <idle+0x30>)
	return !z_sys_post_kernel;
   2d524:	4d0b      	ldr	r5, [pc, #44]	; (2d554 <idle+0x34>)
	__asm__ volatile(
   2d526:	f04f 0220 	mov.w	r2, #32
   2d52a:	f3ef 8311 	mrs	r3, BASEPRI
   2d52e:	f382 8812 	msr	BASEPRI_MAX, r2
   2d532:	f3bf 8f6f 	isb	sy
   2d536:	f002 ff1d 	bl	30374 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2d53a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2d53c:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2d53e:	b913      	cbnz	r3, 2d546 <idle+0x26>
	arch_cpu_idle();
   2d540:	f7fb ff58 	bl	293f4 <arch_cpu_idle>
}
   2d544:	e7ef      	b.n	2d526 <idle+0x6>
   2d546:	f7fa fcd9 	bl	27efc <pm_system_suspend>
   2d54a:	2800      	cmp	r0, #0
   2d54c:	d1eb      	bne.n	2d526 <idle+0x6>
   2d54e:	e7f7      	b.n	2d540 <idle+0x20>
   2d550:	20001980 	.word	0x20001980
   2d554:	20001bcf 	.word	0x20001bcf

0002d558 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2d558:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d55c:	4604      	mov	r4, r0
   2d55e:	4617      	mov	r7, r2
   2d560:	461e      	mov	r6, r3
   2d562:	f04f 0320 	mov.w	r3, #32
   2d566:	f3ef 8811 	mrs	r8, BASEPRI
   2d56a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d56e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2d572:	68c3      	ldr	r3, [r0, #12]
   2d574:	4a33      	ldr	r2, [pc, #204]	; (2d644 <z_impl_k_mutex_lock+0xec>)
   2d576:	b17b      	cbz	r3, 2d598 <z_impl_k_mutex_lock+0x40>
   2d578:	6880      	ldr	r0, [r0, #8]
   2d57a:	6891      	ldr	r1, [r2, #8]
   2d57c:	4288      	cmp	r0, r1
   2d57e:	d019      	beq.n	2d5b4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2d580:	ea57 0306 	orrs.w	r3, r7, r6
   2d584:	d118      	bne.n	2d5b8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2d586:	f388 8811 	msr	BASEPRI, r8
   2d58a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2d58e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2d592:	b002      	add	sp, #8
   2d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2d598:	6891      	ldr	r1, [r2, #8]
   2d59a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2d59e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2d5a0:	3301      	adds	r3, #1
   2d5a2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2d5a4:	6893      	ldr	r3, [r2, #8]
   2d5a6:	60a3      	str	r3, [r4, #8]
   2d5a8:	f388 8811 	msr	BASEPRI, r8
   2d5ac:	f3bf 8f6f 	isb	sy
		return 0;
   2d5b0:	2000      	movs	r0, #0
   2d5b2:	e7ee      	b.n	2d592 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   2d5b4:	6921      	ldr	r1, [r4, #16]
   2d5b6:	e7f2      	b.n	2d59e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2d5b8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2d5bc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2d5c0:	4299      	cmp	r1, r3
   2d5c2:	bfa8      	it	ge
   2d5c4:	4619      	movge	r1, r3
   2d5c6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2d5ca:	4291      	cmp	r1, r2
   2d5cc:	bfb8      	it	lt
   2d5ce:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2d5d0:	428b      	cmp	r3, r1
   2d5d2:	dd2e      	ble.n	2d632 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   2d5d4:	f002 fccc 	bl	2ff70 <adjust_owner_prio.isra.0>
   2d5d8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2d5da:	e9cd 7600 	strd	r7, r6, [sp]
   2d5de:	481a      	ldr	r0, [pc, #104]	; (2d648 <z_impl_k_mutex_lock+0xf0>)
   2d5e0:	4622      	mov	r2, r4
   2d5e2:	4641      	mov	r1, r8
   2d5e4:	f000 fb84 	bl	2dcf0 <z_pend_curr>
	if (got_mutex == 0) {
   2d5e8:	2800      	cmp	r0, #0
   2d5ea:	d0e1      	beq.n	2d5b0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   2d5ec:	f04f 0320 	mov.w	r3, #32
   2d5f0:	f3ef 8611 	mrs	r6, BASEPRI
   2d5f4:	f383 8812 	msr	BASEPRI_MAX, r3
   2d5f8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   2d5fc:	68a0      	ldr	r0, [r4, #8]
   2d5fe:	b1d0      	cbz	r0, 2d636 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2d600:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2d602:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d604:	429c      	cmp	r4, r3
   2d606:	d00a      	beq.n	2d61e <z_impl_k_mutex_lock+0xc6>
   2d608:	b14b      	cbz	r3, 2d61e <z_impl_k_mutex_lock+0xc6>
   2d60a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2d60e:	4299      	cmp	r1, r3
   2d610:	bfa8      	it	ge
   2d612:	4619      	movge	r1, r3
   2d614:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2d618:	4299      	cmp	r1, r3
   2d61a:	bfb8      	it	lt
   2d61c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2d61e:	f002 fca7 	bl	2ff70 <adjust_owner_prio.isra.0>
   2d622:	b140      	cbz	r0, 2d636 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2d624:	4808      	ldr	r0, [pc, #32]	; (2d648 <z_impl_k_mutex_lock+0xf0>)
   2d626:	4631      	mov	r1, r6
   2d628:	f000 fbc6 	bl	2ddb8 <z_reschedule>
	return -EAGAIN;
   2d62c:	f06f 000a 	mvn.w	r0, #10
   2d630:	e7af      	b.n	2d592 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   2d632:	2500      	movs	r5, #0
   2d634:	e7d1      	b.n	2d5da <z_impl_k_mutex_lock+0x82>
	if (resched) {
   2d636:	2d00      	cmp	r5, #0
   2d638:	d1f4      	bne.n	2d624 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   2d63a:	f386 8811 	msr	BASEPRI, r6
   2d63e:	f3bf 8f6f 	isb	sy
   2d642:	e7f3      	b.n	2d62c <z_impl_k_mutex_lock+0xd4>
   2d644:	20001980 	.word	0x20001980
   2d648:	20001bd0 	.word	0x20001bd0

0002d64c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2d64c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2d64e:	6883      	ldr	r3, [r0, #8]
{
   2d650:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2d652:	b36b      	cbz	r3, 2d6b0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2d654:	4a19      	ldr	r2, [pc, #100]	; (2d6bc <z_impl_k_mutex_unlock+0x70>)
   2d656:	6892      	ldr	r2, [r2, #8]
   2d658:	4293      	cmp	r3, r2
   2d65a:	d12c      	bne.n	2d6b6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2d65c:	68c3      	ldr	r3, [r0, #12]
   2d65e:	2b01      	cmp	r3, #1
   2d660:	d903      	bls.n	2d66a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2d662:	3b01      	subs	r3, #1
   2d664:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2d666:	2000      	movs	r0, #0
}
   2d668:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2d66a:	f04f 0320 	mov.w	r3, #32
   2d66e:	f3ef 8511 	mrs	r5, BASEPRI
   2d672:	f383 8812 	msr	BASEPRI_MAX, r3
   2d676:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2d67a:	6901      	ldr	r1, [r0, #16]
   2d67c:	6880      	ldr	r0, [r0, #8]
   2d67e:	f002 fc77 	bl	2ff70 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2d682:	4620      	mov	r0, r4
   2d684:	f002 fde3 	bl	3024e <z_unpend_first_thread>
	mutex->owner = new_owner;
   2d688:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2d68a:	b158      	cbz	r0, 2d6a4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   2d68c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2d690:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2d692:	2200      	movs	r2, #0
   2d694:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   2d696:	f002 fda4 	bl	301e2 <z_ready_thread>
		z_reschedule(&lock, key);
   2d69a:	4809      	ldr	r0, [pc, #36]	; (2d6c0 <z_impl_k_mutex_unlock+0x74>)
   2d69c:	4629      	mov	r1, r5
   2d69e:	f000 fb8b 	bl	2ddb8 <z_reschedule>
   2d6a2:	e7e0      	b.n	2d666 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2d6a4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2d6a6:	f385 8811 	msr	BASEPRI, r5
   2d6aa:	f3bf 8f6f 	isb	sy
   2d6ae:	e7da      	b.n	2d666 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   2d6b0:	f06f 0015 	mvn.w	r0, #21
   2d6b4:	e7d8      	b.n	2d668 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2d6b6:	f04f 30ff 	mov.w	r0, #4294967295
   2d6ba:	e7d5      	b.n	2d668 <z_impl_k_mutex_unlock+0x1c>
   2d6bc:	20001980 	.word	0x20001980
   2d6c0:	20001bd0 	.word	0x20001bd0

0002d6c4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2d6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d6c6:	4611      	mov	r1, r2
	__asm__ volatile(
   2d6c8:	f04f 0220 	mov.w	r2, #32
   2d6cc:	f3ef 8511 	mrs	r5, BASEPRI
   2d6d0:	f382 8812 	msr	BASEPRI_MAX, r2
   2d6d4:	f3bf 8f6f 	isb	sy
   2d6d8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2d6da:	b19c      	cbz	r4, 2d704 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d6dc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2d6de:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d6e0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2d6e4:	4294      	cmp	r4, r2
	list->head = node;
   2d6e6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   2d6e8:	bf08      	it	eq
   2d6ea:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2d6ec:	2101      	movs	r1, #1
   2d6ee:	4620      	mov	r0, r4
   2d6f0:	f002 fcaf 	bl	30052 <z_queue_node_peek>
   2d6f4:	4604      	mov	r4, r0
	__asm__ volatile(
   2d6f6:	f385 8811 	msr	BASEPRI, r5
   2d6fa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2d6fe:	4620      	mov	r0, r4
   2d700:	b003      	add	sp, #12
   2d702:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2d704:	ea51 0203 	orrs.w	r2, r1, r3
   2d708:	d0f5      	beq.n	2d6f6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d70a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2d70e:	e9cd 1300 	strd	r1, r3, [sp]
   2d712:	4610      	mov	r0, r2
   2d714:	4629      	mov	r1, r5
   2d716:	f000 faeb 	bl	2dcf0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2d71a:	2800      	cmp	r0, #0
   2d71c:	d1ef      	bne.n	2d6fe <z_impl_k_queue_get+0x3a>
   2d71e:	4b02      	ldr	r3, [pc, #8]	; (2d728 <z_impl_k_queue_get+0x64>)
   2d720:	689b      	ldr	r3, [r3, #8]
   2d722:	695c      	ldr	r4, [r3, #20]
   2d724:	e7eb      	b.n	2d6fe <z_impl_k_queue_get+0x3a>
   2d726:	bf00      	nop
   2d728:	20001980 	.word	0x20001980

0002d72c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2d72c:	b538      	push	{r3, r4, r5, lr}
   2d72e:	4604      	mov	r4, r0
	__asm__ volatile(
   2d730:	f04f 0320 	mov.w	r3, #32
   2d734:	f3ef 8511 	mrs	r5, BASEPRI
   2d738:	f383 8812 	msr	BASEPRI_MAX, r3
   2d73c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2d740:	f002 fd85 	bl	3024e <z_unpend_first_thread>

	if (thread != NULL) {
   2d744:	b148      	cbz	r0, 2d75a <z_impl_k_sem_give+0x2e>
   2d746:	2200      	movs	r2, #0
   2d748:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2d74a:	f002 fd4a 	bl	301e2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2d74e:	4629      	mov	r1, r5
   2d750:	4805      	ldr	r0, [pc, #20]	; (2d768 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2d752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2d756:	f000 bb2f 	b.w	2ddb8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2d75a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2d75e:	429a      	cmp	r2, r3
   2d760:	bf18      	it	ne
   2d762:	3301      	addne	r3, #1
   2d764:	60a3      	str	r3, [r4, #8]
}
   2d766:	e7f2      	b.n	2d74e <z_impl_k_sem_give+0x22>
   2d768:	20001bd0 	.word	0x20001bd0

0002d76c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2d76c:	b513      	push	{r0, r1, r4, lr}
   2d76e:	f04f 0420 	mov.w	r4, #32
   2d772:	f3ef 8111 	mrs	r1, BASEPRI
   2d776:	f384 8812 	msr	BASEPRI_MAX, r4
   2d77a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2d77e:	6884      	ldr	r4, [r0, #8]
   2d780:	b144      	cbz	r4, 2d794 <z_impl_k_sem_take+0x28>
		sem->count--;
   2d782:	3c01      	subs	r4, #1
   2d784:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2d786:	f381 8811 	msr	BASEPRI, r1
   2d78a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2d78e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2d790:	b002      	add	sp, #8
   2d792:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2d794:	ea52 0403 	orrs.w	r4, r2, r3
   2d798:	d106      	bne.n	2d7a8 <z_impl_k_sem_take+0x3c>
   2d79a:	f381 8811 	msr	BASEPRI, r1
   2d79e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2d7a2:	f06f 000f 	mvn.w	r0, #15
   2d7a6:	e7f3      	b.n	2d790 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2d7a8:	e9cd 2300 	strd	r2, r3, [sp]
   2d7ac:	4602      	mov	r2, r0
   2d7ae:	4802      	ldr	r0, [pc, #8]	; (2d7b8 <z_impl_k_sem_take+0x4c>)
   2d7b0:	f000 fa9e 	bl	2dcf0 <z_pend_curr>
	return ret;
   2d7b4:	e7ec      	b.n	2d790 <z_impl_k_sem_take+0x24>
   2d7b6:	bf00      	nop
   2d7b8:	20001bd0 	.word	0x20001bd0

0002d7bc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   2d7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   2d7c0:	4e4a      	ldr	r6, [pc, #296]	; (2d8ec <work_queue_main+0x130>)
   2d7c2:	b085      	sub	sp, #20
   2d7c4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   2d7c6:	f04f 38ff 	mov.w	r8, #4294967295
   2d7ca:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   2d7ce:	f04f 0320 	mov.w	r3, #32
   2d7d2:	f3ef 8711 	mrs	r7, BASEPRI
   2d7d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2d7da:	f3bf 8f6f 	isb	sy
   2d7de:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   2d7e2:	b98d      	cbnz	r5, 2d808 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   2d7e4:	2102      	movs	r1, #2
   2d7e6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2d7ea:	f002 fc55 	bl	30098 <flag_test_and_clear>
   2d7ee:	2800      	cmp	r0, #0
   2d7f0:	d143      	bne.n	2d87a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2d7f2:	2300      	movs	r3, #0
   2d7f4:	e9cd 8900 	strd	r8, r9, [sp]
   2d7f8:	9302      	str	r3, [sp, #8]
   2d7fa:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2d7fe:	4639      	mov	r1, r7
   2d800:	483b      	ldr	r0, [pc, #236]	; (2d8f0 <work_queue_main+0x134>)
   2d802:	f000 fc8f 	bl	2e124 <z_sched_wait>
			continue;
   2d806:	e7e2      	b.n	2d7ce <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d808:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   2d80c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2d80e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d812:	4295      	cmp	r5, r2
	list->tail = node;
   2d814:	bf08      	it	eq
   2d816:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2d81a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2d81e:	f043 0302 	orr.w	r3, r3, #2
   2d822:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2d826:	68eb      	ldr	r3, [r5, #12]
   2d828:	f023 0304 	bic.w	r3, r3, #4
   2d82c:	f043 0301 	orr.w	r3, r3, #1
   2d830:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2d832:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2d834:	f387 8811 	msr	BASEPRI, r7
   2d838:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2d83c:	4628      	mov	r0, r5
   2d83e:	4798      	blx	r3
	__asm__ volatile(
   2d840:	f04f 0320 	mov.w	r3, #32
   2d844:	f3ef 8b11 	mrs	fp, BASEPRI
   2d848:	f383 8812 	msr	BASEPRI_MAX, r3
   2d84c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2d850:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d852:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2d854:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d858:	d419      	bmi.n	2d88e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   2d85a:	60ea      	str	r2, [r5, #12]
   2d85c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2d860:	f023 0302 	bic.w	r3, r3, #2
   2d864:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   2d868:	f38b 8811 	msr	BASEPRI, fp
   2d86c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2d870:	05db      	lsls	r3, r3, #23
   2d872:	d4ac      	bmi.n	2d7ce <work_queue_main+0x12>
	z_impl_k_yield();
   2d874:	f000 fb3a 	bl	2deec <z_impl_k_yield>
}
   2d878:	e7a9      	b.n	2d7ce <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2d87a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2d87e:	2200      	movs	r2, #0
   2d880:	2101      	movs	r1, #1
   2d882:	4628      	mov	r0, r5
   2d884:	f002 fd3d 	bl	30302 <z_sched_wake>
   2d888:	2800      	cmp	r0, #0
   2d88a:	d1f8      	bne.n	2d87e <work_queue_main+0xc2>
   2d88c:	e7b1      	b.n	2d7f2 <work_queue_main+0x36>
	return list->head;
   2d88e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2d890:	f023 0303 	bic.w	r3, r3, #3
   2d894:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2d896:	2800      	cmp	r0, #0
   2d898:	d0e0      	beq.n	2d85c <work_queue_main+0xa0>
	return node->next;
   2d89a:	2700      	movs	r7, #0
   2d89c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   2d8a0:	463b      	mov	r3, r7
   2d8a2:	2800      	cmp	r0, #0
   2d8a4:	d0da      	beq.n	2d85c <work_queue_main+0xa0>
		if (wc->work == work) {
   2d8a6:	6842      	ldr	r2, [r0, #4]
   2d8a8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2d8aa:	4601      	mov	r1, r0
		if (wc->work == work) {
   2d8ac:	d10c      	bne.n	2d8c8 <work_queue_main+0x10c>
	return node->next;
   2d8ae:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2d8b0:	b99f      	cbnz	r7, 2d8da <work_queue_main+0x11e>
   2d8b2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   2d8b4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d8b6:	4282      	cmp	r2, r0
   2d8b8:	d100      	bne.n	2d8bc <work_queue_main+0x100>
	list->tail = node;
   2d8ba:	6071      	str	r1, [r6, #4]
	parent->next = child;
   2d8bc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   2d8c0:	f7ff ff34 	bl	2d72c <z_impl_k_sem_give>
}
   2d8c4:	4639      	mov	r1, r7
   2d8c6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2d8c8:	f1ba 0f00 	cmp.w	sl, #0
   2d8cc:	d00b      	beq.n	2d8e6 <work_queue_main+0x12a>
	return node->next;
   2d8ce:	f8da 2000 	ldr.w	r2, [sl]
   2d8d2:	4650      	mov	r0, sl
   2d8d4:	460f      	mov	r7, r1
   2d8d6:	4692      	mov	sl, r2
   2d8d8:	e7e3      	b.n	2d8a2 <work_queue_main+0xe6>
	parent->next = child;
   2d8da:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d8dc:	6872      	ldr	r2, [r6, #4]
   2d8de:	4282      	cmp	r2, r0
	list->tail = node;
   2d8e0:	bf08      	it	eq
   2d8e2:	6077      	streq	r7, [r6, #4]
}
   2d8e4:	e7ea      	b.n	2d8bc <work_queue_main+0x100>
   2d8e6:	4652      	mov	r2, sl
   2d8e8:	e7f3      	b.n	2d8d2 <work_queue_main+0x116>
   2d8ea:	bf00      	nop
   2d8ec:	200019a4 	.word	0x200019a4
   2d8f0:	20001bd0 	.word	0x20001bd0

0002d8f4 <submit_to_queue_locked>:
{
   2d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2d8f6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d8f8:	079a      	lsls	r2, r3, #30
{
   2d8fa:	4604      	mov	r4, r0
   2d8fc:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d8fe:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2d902:	d42c      	bmi.n	2d95e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2d904:	075b      	lsls	r3, r3, #29
   2d906:	d41a      	bmi.n	2d93e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   2d908:	680b      	ldr	r3, [r1, #0]
   2d90a:	b90b      	cbnz	r3, 2d910 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2d90c:	6883      	ldr	r3, [r0, #8]
   2d90e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   2d910:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2d912:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   2d914:	bf44      	itt	mi
   2d916:	68a3      	ldrmi	r3, [r4, #8]
   2d918:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   2d91a:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   2d91c:	bf4c      	ite	mi
   2d91e:	2602      	movmi	r6, #2
		ret = 1;
   2d920:	2601      	movpl	r6, #1
	if (queue == NULL) {
   2d922:	2d00      	cmp	r5, #0
   2d924:	d03a      	beq.n	2d99c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2d926:	4b1f      	ldr	r3, [pc, #124]	; (2d9a4 <submit_to_queue_locked+0xb0>)
   2d928:	689b      	ldr	r3, [r3, #8]
   2d92a:	42ab      	cmp	r3, r5
   2d92c:	d00a      	beq.n	2d944 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   2d92e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2d932:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2d934:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2d938:	d414      	bmi.n	2d964 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   2d93a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2d93e:	2300      	movs	r3, #0
   2d940:	603b      	str	r3, [r7, #0]
	return ret;
   2d942:	e025      	b.n	2d990 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2d944:	f002 fb02 	bl	2ff4c <k_is_in_isr>
   2d948:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2d94c:	2800      	cmp	r0, #0
   2d94e:	d1f0      	bne.n	2d932 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2d950:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2d952:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2d956:	d5f0      	bpl.n	2d93a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   2d958:	b152      	cbz	r2, 2d970 <submit_to_queue_locked+0x7c>
   2d95a:	075b      	lsls	r3, r3, #29
   2d95c:	d408      	bmi.n	2d970 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   2d95e:	f06f 060f 	mvn.w	r6, #15
   2d962:	e7ec      	b.n	2d93e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   2d964:	2a00      	cmp	r2, #0
   2d966:	d1fa      	bne.n	2d95e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2d968:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   2d96c:	2b00      	cmp	r3, #0
   2d96e:	d1f6      	bne.n	2d95e <submit_to_queue_locked+0x6a>
	parent->next = child;
   2d970:	2300      	movs	r3, #0
   2d972:	6023      	str	r3, [r4, #0]
	return list->tail;
   2d974:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   2d978:	b963      	cbnz	r3, 2d994 <submit_to_queue_locked+0xa0>
	list->head = node;
   2d97a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2d97e:	4628      	mov	r0, r5
   2d980:	f002 fb95 	bl	300ae <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2d984:	68e3      	ldr	r3, [r4, #12]
   2d986:	f043 0304 	orr.w	r3, r3, #4
   2d98a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2d98c:	683b      	ldr	r3, [r7, #0]
   2d98e:	60a3      	str	r3, [r4, #8]
}
   2d990:	4630      	mov	r0, r6
   2d992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2d994:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2d996:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   2d99a:	e7f0      	b.n	2d97e <submit_to_queue_locked+0x8a>
		return -EINVAL;
   2d99c:	f06f 0615 	mvn.w	r6, #21
   2d9a0:	e7cd      	b.n	2d93e <submit_to_queue_locked+0x4a>
   2d9a2:	bf00      	nop
   2d9a4:	20001980 	.word	0x20001980

0002d9a8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2d9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d9aa:	b089      	sub	sp, #36	; 0x24
   2d9ac:	4604      	mov	r4, r0
	list->head = NULL;
   2d9ae:	2000      	movs	r0, #0
	list->tail = NULL;
   2d9b0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   2d9b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2d9b6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2d9ba:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   2d9be:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2d9c2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2d9c6:	b31d      	cbz	r5, 2da10 <k_work_queue_start+0x68>
   2d9c8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2d9ca:	2800      	cmp	r0, #0
   2d9cc:	f240 1001 	movw	r0, #257	; 0x101
   2d9d0:	bf08      	it	eq
   2d9d2:	2001      	moveq	r0, #1
	*flagp = flags;
   2d9d4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2d9d8:	2000      	movs	r0, #0
   2d9da:	f04f 36ff 	mov.w	r6, #4294967295
   2d9de:	f04f 37ff 	mov.w	r7, #4294967295
   2d9e2:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2d9e6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2d9ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2d9ee:	4b09      	ldr	r3, [pc, #36]	; (2da14 <k_work_queue_start+0x6c>)
   2d9f0:	9400      	str	r4, [sp, #0]
   2d9f2:	4620      	mov	r0, r4
   2d9f4:	f7ff fd0c 	bl	2d410 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2d9f8:	b125      	cbz	r5, 2da04 <k_work_queue_start+0x5c>
   2d9fa:	6829      	ldr	r1, [r5, #0]
   2d9fc:	b111      	cbz	r1, 2da04 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2d9fe:	4620      	mov	r0, r4
   2da00:	f002 faaa 	bl	2ff58 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2da04:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2da06:	b009      	add	sp, #36	; 0x24
   2da08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2da0c:	f002 baa7 	b.w	2ff5e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2da10:	2001      	movs	r0, #1
   2da12:	e7df      	b.n	2d9d4 <k_work_queue_start+0x2c>
   2da14:	0002d7bd 	.word	0x0002d7bd

0002da18 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2da18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2da1a:	9001      	str	r0, [sp, #4]
   2da1c:	4608      	mov	r0, r1
	__asm__ volatile(
   2da1e:	f04f 0120 	mov.w	r1, #32
   2da22:	f3ef 8411 	mrs	r4, BASEPRI
   2da26:	f381 8812 	msr	BASEPRI_MAX, r1
   2da2a:	f3bf 8f6f 	isb	sy
	return *flagp;
   2da2e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2da30:	f011 0f0e 	tst.w	r1, #14
   2da34:	d116      	bne.n	2da64 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2da36:	ea53 0502 	orrs.w	r5, r3, r2
   2da3a:	d108      	bne.n	2da4e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   2da3c:	a901      	add	r1, sp, #4
   2da3e:	f7ff ff59 	bl	2d8f4 <submit_to_queue_locked>
	__asm__ volatile(
   2da42:	f384 8811 	msr	BASEPRI, r4
   2da46:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2da4a:	b003      	add	sp, #12
   2da4c:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   2da4e:	f041 0108 	orr.w	r1, r1, #8
   2da52:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2da54:	9901      	ldr	r1, [sp, #4]
   2da56:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2da58:	3010      	adds	r0, #16
   2da5a:	4903      	ldr	r1, [pc, #12]	; (2da68 <k_work_schedule_for_queue+0x50>)
   2da5c:	f000 fbd4 	bl	2e208 <z_add_timeout>
	return ret;
   2da60:	2001      	movs	r0, #1
   2da62:	e7ee      	b.n	2da42 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   2da64:	2000      	movs	r0, #0
   2da66:	e7ec      	b.n	2da42 <k_work_schedule_for_queue+0x2a>
   2da68:	000300bd 	.word	0x000300bd

0002da6c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   2da6c:	89c3      	ldrh	r3, [r0, #14]
   2da6e:	2b7f      	cmp	r3, #127	; 0x7f
   2da70:	d812      	bhi.n	2da98 <sliceable+0x2c>
	int ret = slice_ticks;
   2da72:	4b0a      	ldr	r3, [pc, #40]	; (2da9c <sliceable+0x30>)
   2da74:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   2da76:	b163      	cbz	r3, 2da92 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2da78:	4b09      	ldr	r3, [pc, #36]	; (2daa0 <sliceable+0x34>)
   2da7a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2da7e:	681b      	ldr	r3, [r3, #0]
   2da80:	429a      	cmp	r2, r3
   2da82:	db09      	blt.n	2da98 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   2da84:	7b43      	ldrb	r3, [r0, #13]
   2da86:	06db      	lsls	r3, r3, #27
   2da88:	d106      	bne.n	2da98 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2da8a:	4b06      	ldr	r3, [pc, #24]	; (2daa4 <sliceable+0x38>)
   2da8c:	1ac3      	subs	r3, r0, r3
   2da8e:	bf18      	it	ne
   2da90:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   2da92:	f003 0001 	and.w	r0, r3, #1
   2da96:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   2da98:	2300      	movs	r3, #0
   2da9a:	e7fa      	b.n	2da92 <sliceable+0x26>
   2da9c:	200019b4 	.word	0x200019b4
   2daa0:	200019b0 	.word	0x200019b0
   2daa4:	20000518 	.word	0x20000518

0002daa8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   2daa8:	4b04      	ldr	r3, [pc, #16]	; (2dabc <slice_timeout+0x14>)
   2daaa:	1ac0      	subs	r0, r0, r3
   2daac:	4b04      	ldr	r3, [pc, #16]	; (2dac0 <slice_timeout+0x18>)
   2daae:	10c0      	asrs	r0, r0, #3
   2dab0:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   2dab2:	4b04      	ldr	r3, [pc, #16]	; (2dac4 <slice_timeout+0x1c>)
   2dab4:	2201      	movs	r2, #1
   2dab6:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   2dab8:	4770      	bx	lr
   2daba:	bf00      	nop
   2dabc:	20000618 	.word	0x20000618
   2dac0:	aaaaaaab 	.word	0xaaaaaaab
   2dac4:	20001bd0 	.word	0x20001bd0

0002dac8 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   2dac8:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   2daca:	4b0e      	ldr	r3, [pc, #56]	; (2db04 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   2dacc:	4c0e      	ldr	r4, [pc, #56]	; (2db08 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   2dace:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   2dad0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2dad4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   2dad8:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   2dada:	4620      	mov	r0, r4
   2dadc:	f002 fc34 	bl	30348 <z_abort_timeout>
	slice_expired[cpu] = false;
   2dae0:	4b0a      	ldr	r3, [pc, #40]	; (2db0c <z_reset_time_slice+0x44>)
   2dae2:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   2dae4:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   2dae6:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   2dae8:	f7ff ffc0 	bl	2da6c <sliceable>
   2daec:	b148      	cbz	r0, 2db02 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   2daee:	4b08      	ldr	r3, [pc, #32]	; (2db10 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2daf0:	4908      	ldr	r1, [pc, #32]	; (2db14 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   2daf2:	681a      	ldr	r2, [r3, #0]
   2daf4:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2daf6:	4620      	mov	r0, r4
   2daf8:	17d3      	asrs	r3, r2, #31
	}
}
   2dafa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2dafe:	f000 bb83 	b.w	2e208 <z_add_timeout>
}
   2db02:	bd70      	pop	{r4, r5, r6, pc}
   2db04:	20001980 	.word	0x20001980
   2db08:	20000618 	.word	0x20000618
   2db0c:	20001bd0 	.word	0x20001bd0
   2db10:	200019b4 	.word	0x200019b4
   2db14:	0002daa9 	.word	0x0002daa9

0002db18 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   2db18:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2db1a:	4d0d      	ldr	r5, [pc, #52]	; (2db50 <update_cache+0x38>)
   2db1c:	462b      	mov	r3, r5
   2db1e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2db22:	429c      	cmp	r4, r3
   2db24:	d000      	beq.n	2db28 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2db26:	b904      	cbnz	r4, 2db2a <update_cache+0x12>
   2db28:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2db2a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2db2c:	b938      	cbnz	r0, 2db3e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   2db2e:	7b5a      	ldrb	r2, [r3, #13]
   2db30:	06d2      	lsls	r2, r2, #27
   2db32:	d104      	bne.n	2db3e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2db34:	69a2      	ldr	r2, [r4, #24]
   2db36:	b912      	cbnz	r2, 2db3e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   2db38:	89da      	ldrh	r2, [r3, #14]
   2db3a:	2a7f      	cmp	r2, #127	; 0x7f
   2db3c:	d805      	bhi.n	2db4a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2db3e:	429c      	cmp	r4, r3
   2db40:	d002      	beq.n	2db48 <update_cache+0x30>
			z_reset_time_slice(thread);
   2db42:	4620      	mov	r0, r4
   2db44:	f7ff ffc0 	bl	2dac8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   2db48:	4623      	mov	r3, r4
   2db4a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2db4c:	bd38      	pop	{r3, r4, r5, pc}
   2db4e:	bf00      	nop
   2db50:	20001980 	.word	0x20001980

0002db54 <move_thread_to_end_of_prio_q>:
{
   2db54:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2db56:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2db5a:	7b43      	ldrb	r3, [r0, #13]
   2db5c:	2a00      	cmp	r2, #0
{
   2db5e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2db60:	da04      	bge.n	2db6c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2db62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2db66:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2db68:	f002 fb01 	bl	3016e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2db6c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2db6e:	4a15      	ldr	r2, [pc, #84]	; (2dbc4 <move_thread_to_end_of_prio_q+0x70>)
   2db70:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2db74:	4610      	mov	r0, r2
   2db76:	734b      	strb	r3, [r1, #13]
   2db78:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2db7c:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2db7e:	4283      	cmp	r3, r0
   2db80:	bf08      	it	eq
   2db82:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2db84:	b923      	cbnz	r3, 2db90 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   2db86:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   2db8a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   2db8c:	6211      	str	r1, [r2, #32]
}
   2db8e:	e00c      	b.n	2dbaa <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   2db90:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2db94:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2db98:	42b5      	cmp	r5, r6
   2db9a:	d00e      	beq.n	2dbba <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2db9c:	42ae      	cmp	r6, r5
   2db9e:	dd0c      	ble.n	2dbba <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2dba0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2dba2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2dba6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2dba8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2dbaa:	6890      	ldr	r0, [r2, #8]
   2dbac:	1a43      	subs	r3, r0, r1
   2dbae:	4258      	negs	r0, r3
}
   2dbb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2dbb4:	4158      	adcs	r0, r3
   2dbb6:	f7ff bfaf 	b.w	2db18 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2dbba:	429c      	cmp	r4, r3
   2dbbc:	d0e3      	beq.n	2db86 <move_thread_to_end_of_prio_q+0x32>
   2dbbe:	681b      	ldr	r3, [r3, #0]
   2dbc0:	e7e0      	b.n	2db84 <move_thread_to_end_of_prio_q+0x30>
   2dbc2:	bf00      	nop
   2dbc4:	20001980 	.word	0x20001980

0002dbc8 <ready_thread>:
{
   2dbc8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2dbca:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2dbce:	7b42      	ldrb	r2, [r0, #13]
   2dbd0:	2b00      	cmp	r3, #0
   2dbd2:	db29      	blt.n	2dc28 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2dbd4:	06d3      	lsls	r3, r2, #27
   2dbd6:	d127      	bne.n	2dc28 <ready_thread+0x60>
	return node->next != NULL;
   2dbd8:	6983      	ldr	r3, [r0, #24]
   2dbda:	bb2b      	cbnz	r3, 2dc28 <ready_thread+0x60>
	return list->head == list;
   2dbdc:	4913      	ldr	r1, [pc, #76]	; (2dc2c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2dbde:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2dbe2:	7342      	strb	r2, [r0, #13]
   2dbe4:	460a      	mov	r2, r1
   2dbe6:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dbea:	4294      	cmp	r4, r2
   2dbec:	bf18      	it	ne
   2dbee:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   2dbf0:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2dbf2:	b923      	cbnz	r3, 2dbfe <ready_thread+0x36>
	node->prev = tail;
   2dbf4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   2dbf8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2dbfa:	6208      	str	r0, [r1, #32]
}
   2dbfc:	e00c      	b.n	2dc18 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   2dbfe:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2dc02:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2dc06:	42b5      	cmp	r5, r6
   2dc08:	d00a      	beq.n	2dc20 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2dc0a:	42ae      	cmp	r6, r5
   2dc0c:	dd08      	ble.n	2dc20 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   2dc0e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2dc10:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2dc14:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2dc16:	6058      	str	r0, [r3, #4]
}
   2dc18:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   2dc1a:	2000      	movs	r0, #0
   2dc1c:	f7ff bf7c 	b.w	2db18 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2dc20:	42a3      	cmp	r3, r4
   2dc22:	d0e7      	beq.n	2dbf4 <ready_thread+0x2c>
   2dc24:	681b      	ldr	r3, [r3, #0]
   2dc26:	e7e4      	b.n	2dbf2 <ready_thread+0x2a>
}
   2dc28:	bc70      	pop	{r4, r5, r6}
   2dc2a:	4770      	bx	lr
   2dc2c:	20001980 	.word	0x20001980

0002dc30 <unready_thread>:
{
   2dc30:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2dc32:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2dc36:	7b43      	ldrb	r3, [r0, #13]
   2dc38:	2a00      	cmp	r2, #0
{
   2dc3a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2dc3c:	da04      	bge.n	2dc48 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2dc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2dc42:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2dc44:	f002 fa93 	bl	3016e <sys_dlist_remove>
	update_cache(thread == _current);
   2dc48:	4b04      	ldr	r3, [pc, #16]	; (2dc5c <unready_thread+0x2c>)
   2dc4a:	6898      	ldr	r0, [r3, #8]
   2dc4c:	1a43      	subs	r3, r0, r1
   2dc4e:	4258      	negs	r0, r3
   2dc50:	4158      	adcs	r0, r3
}
   2dc52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2dc56:	f7ff bf5f 	b.w	2db18 <update_cache>
   2dc5a:	bf00      	nop
   2dc5c:	20001980 	.word	0x20001980

0002dc60 <pend_locked>:
{
   2dc60:	b570      	push	{r4, r5, r6, lr}
   2dc62:	4615      	mov	r5, r2
   2dc64:	461c      	mov	r4, r3
   2dc66:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   2dc68:	f002 fa93 	bl	30192 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2dc6c:	f1b4 3fff 	cmp.w	r4, #4294967295
   2dc70:	bf08      	it	eq
   2dc72:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2dc76:	d008      	beq.n	2dc8a <pend_locked+0x2a>
   2dc78:	462a      	mov	r2, r5
   2dc7a:	4623      	mov	r3, r4
   2dc7c:	f106 0018 	add.w	r0, r6, #24
   2dc80:	4902      	ldr	r1, [pc, #8]	; (2dc8c <pend_locked+0x2c>)
}
   2dc82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2dc86:	f000 babf 	b.w	2e208 <z_add_timeout>
   2dc8a:	bd70      	pop	{r4, r5, r6, pc}
   2dc8c:	00030247 	.word	0x00030247

0002dc90 <z_time_slice>:
{
   2dc90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2dc92:	f04f 0320 	mov.w	r3, #32
   2dc96:	f3ef 8511 	mrs	r5, BASEPRI
   2dc9a:	f383 8812 	msr	BASEPRI_MAX, r3
   2dc9e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   2dca2:	4b10      	ldr	r3, [pc, #64]	; (2dce4 <z_time_slice+0x54>)
	if (pending_current == curr) {
   2dca4:	4a10      	ldr	r2, [pc, #64]	; (2dce8 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   2dca6:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   2dca8:	6810      	ldr	r0, [r2, #0]
   2dcaa:	42a0      	cmp	r0, r4
   2dcac:	d106      	bne.n	2dcbc <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   2dcae:	f7ff ff0b 	bl	2dac8 <z_reset_time_slice>
	__asm__ volatile(
   2dcb2:	f385 8811 	msr	BASEPRI, r5
   2dcb6:	f3bf 8f6f 	isb	sy
}
   2dcba:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2dcbc:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2dcbe:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   2dcc0:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2dcc2:	4a0a      	ldr	r2, [pc, #40]	; (2dcec <z_time_slice+0x5c>)
   2dcc4:	5cd3      	ldrb	r3, [r2, r3]
   2dcc6:	2b00      	cmp	r3, #0
   2dcc8:	d0f3      	beq.n	2dcb2 <z_time_slice+0x22>
   2dcca:	4620      	mov	r0, r4
   2dccc:	f7ff fece 	bl	2da6c <sliceable>
   2dcd0:	2800      	cmp	r0, #0
   2dcd2:	d0ee      	beq.n	2dcb2 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   2dcd4:	7b63      	ldrb	r3, [r4, #13]
   2dcd6:	06db      	lsls	r3, r3, #27
   2dcd8:	d102      	bne.n	2dce0 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   2dcda:	4620      	mov	r0, r4
   2dcdc:	f7ff ff3a 	bl	2db54 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   2dce0:	4620      	mov	r0, r4
   2dce2:	e7e4      	b.n	2dcae <z_time_slice+0x1e>
   2dce4:	20001980 	.word	0x20001980
   2dce8:	200019ac 	.word	0x200019ac
   2dcec:	20001bd0 	.word	0x20001bd0

0002dcf0 <z_pend_curr>:
{
   2dcf0:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   2dcf2:	480c      	ldr	r0, [pc, #48]	; (2dd24 <z_pend_curr+0x34>)
   2dcf4:	4d0c      	ldr	r5, [pc, #48]	; (2dd28 <z_pend_curr+0x38>)
   2dcf6:	6886      	ldr	r6, [r0, #8]
   2dcf8:	602e      	str	r6, [r5, #0]
{
   2dcfa:	460c      	mov	r4, r1
   2dcfc:	4611      	mov	r1, r2
   2dcfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   2dd02:	f04f 0620 	mov.w	r6, #32
   2dd06:	f3ef 8511 	mrs	r5, BASEPRI
   2dd0a:	f386 8812 	msr	BASEPRI_MAX, r6
   2dd0e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   2dd12:	6880      	ldr	r0, [r0, #8]
   2dd14:	f7ff ffa4 	bl	2dc60 <pend_locked>
	ret = arch_swap(key);
   2dd18:	4620      	mov	r0, r4
}
   2dd1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2dd1e:	f7fb bbeb 	b.w	294f8 <arch_swap>
   2dd22:	bf00      	nop
   2dd24:	20001980 	.word	0x20001980
   2dd28:	200019ac 	.word	0x200019ac

0002dd2c <z_set_prio>:
{
   2dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd2e:	4604      	mov	r4, r0
   2dd30:	f04f 0320 	mov.w	r3, #32
   2dd34:	f3ef 8611 	mrs	r6, BASEPRI
   2dd38:	f383 8812 	msr	BASEPRI_MAX, r3
   2dd3c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   2dd40:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2dd42:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2dd44:	b249      	sxtb	r1, r1
   2dd46:	d119      	bne.n	2dd7c <z_set_prio+0x50>
	return node->next != NULL;
   2dd48:	6985      	ldr	r5, [r0, #24]
   2dd4a:	b9bd      	cbnz	r5, 2dd7c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2dd4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2dd50:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2dd52:	f002 fa0c 	bl	3016e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2dd56:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2dd58:	4a16      	ldr	r2, [pc, #88]	; (2ddb4 <z_set_prio+0x88>)
				thread->base.prio = prio;
   2dd5a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2dd5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2dd60:	7343      	strb	r3, [r0, #13]
   2dd62:	4613      	mov	r3, r2
   2dd64:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dd68:	4298      	cmp	r0, r3
   2dd6a:	bf18      	it	ne
   2dd6c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   2dd6e:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2dd70:	b95d      	cbnz	r5, 2dd8a <z_set_prio+0x5e>
	node->prev = tail;
   2dd72:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   2dd76:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2dd78:	6214      	str	r4, [r2, #32]
}
   2dd7a:	e011      	b.n	2dda0 <z_set_prio+0x74>
			thread->base.prio = prio;
   2dd7c:	73a1      	strb	r1, [r4, #14]
   2dd7e:	2000      	movs	r0, #0
	__asm__ volatile(
   2dd80:	f386 8811 	msr	BASEPRI, r6
   2dd84:	f3bf 8f6f 	isb	sy
}
   2dd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   2dd8a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   2dd8e:	42b9      	cmp	r1, r7
   2dd90:	d00b      	beq.n	2ddaa <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2dd92:	428f      	cmp	r7, r1
   2dd94:	dd09      	ble.n	2ddaa <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   2dd96:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2dd98:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   2dd9c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2dd9e:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2dda0:	2001      	movs	r0, #1
   2dda2:	f7ff feb9 	bl	2db18 <update_cache>
   2dda6:	2001      	movs	r0, #1
   2dda8:	e7ea      	b.n	2dd80 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   2ddaa:	42a8      	cmp	r0, r5
   2ddac:	d0e1      	beq.n	2dd72 <z_set_prio+0x46>
   2ddae:	682d      	ldr	r5, [r5, #0]
   2ddb0:	e7de      	b.n	2dd70 <z_set_prio+0x44>
   2ddb2:	bf00      	nop
   2ddb4:	20001980 	.word	0x20001980

0002ddb8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ddb8:	b949      	cbnz	r1, 2ddce <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2ddba:	f3ef 8005 	mrs	r0, IPSR
   2ddbe:	b930      	cbnz	r0, 2ddce <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   2ddc0:	4b05      	ldr	r3, [pc, #20]	; (2ddd8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2ddc2:	699a      	ldr	r2, [r3, #24]
   2ddc4:	689b      	ldr	r3, [r3, #8]
   2ddc6:	429a      	cmp	r2, r3
   2ddc8:	d001      	beq.n	2ddce <z_reschedule+0x16>
   2ddca:	f7fb bb95 	b.w	294f8 <arch_swap>
   2ddce:	f381 8811 	msr	BASEPRI, r1
   2ddd2:	f3bf 8f6f 	isb	sy
}
   2ddd6:	4770      	bx	lr
   2ddd8:	20001980 	.word	0x20001980

0002dddc <z_sched_start>:
{
   2dddc:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ddde:	f04f 0220 	mov.w	r2, #32
   2dde2:	f3ef 8411 	mrs	r4, BASEPRI
   2dde6:	f382 8812 	msr	BASEPRI_MAX, r2
   2ddea:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2ddee:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   2ddf0:	0751      	lsls	r1, r2, #29
   2ddf2:	d404      	bmi.n	2ddfe <z_sched_start+0x22>
	__asm__ volatile(
   2ddf4:	f384 8811 	msr	BASEPRI, r4
   2ddf8:	f3bf 8f6f 	isb	sy
}
   2ddfc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2ddfe:	f022 0204 	bic.w	r2, r2, #4
   2de02:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2de04:	f7ff fee0 	bl	2dbc8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2de08:	4621      	mov	r1, r4
   2de0a:	4802      	ldr	r0, [pc, #8]	; (2de14 <z_sched_start+0x38>)
}
   2de0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2de10:	f7ff bfd2 	b.w	2ddb8 <z_reschedule>
   2de14:	20001bd1 	.word	0x20001bd1

0002de18 <z_impl_k_thread_suspend>:
{
   2de18:	b570      	push	{r4, r5, r6, lr}
   2de1a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2de1c:	3018      	adds	r0, #24
   2de1e:	f002 fa93 	bl	30348 <z_abort_timeout>
	__asm__ volatile(
   2de22:	f04f 0320 	mov.w	r3, #32
   2de26:	f3ef 8611 	mrs	r6, BASEPRI
   2de2a:	f383 8812 	msr	BASEPRI_MAX, r3
   2de2e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2de32:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2de36:	7b63      	ldrb	r3, [r4, #13]
   2de38:	2a00      	cmp	r2, #0
   2de3a:	da05      	bge.n	2de48 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2de3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2de40:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2de42:	4620      	mov	r0, r4
   2de44:	f002 f993 	bl	3016e <sys_dlist_remove>
		update_cache(thread == _current);
   2de48:	4d0b      	ldr	r5, [pc, #44]	; (2de78 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2de4a:	7b63      	ldrb	r3, [r4, #13]
   2de4c:	68a8      	ldr	r0, [r5, #8]
   2de4e:	f043 0310 	orr.w	r3, r3, #16
   2de52:	7363      	strb	r3, [r4, #13]
   2de54:	1b03      	subs	r3, r0, r4
   2de56:	4258      	negs	r0, r3
   2de58:	4158      	adcs	r0, r3
   2de5a:	f7ff fe5d 	bl	2db18 <update_cache>
	__asm__ volatile(
   2de5e:	f386 8811 	msr	BASEPRI, r6
   2de62:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2de66:	68ab      	ldr	r3, [r5, #8]
   2de68:	42a3      	cmp	r3, r4
   2de6a:	d103      	bne.n	2de74 <z_impl_k_thread_suspend+0x5c>
}
   2de6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2de70:	f002 ba2d 	b.w	302ce <z_reschedule_unlocked>
}
   2de74:	bd70      	pop	{r4, r5, r6, pc}
   2de76:	bf00      	nop
   2de78:	20001980 	.word	0x20001980

0002de7c <k_sched_lock>:
	__asm__ volatile(
   2de7c:	f04f 0320 	mov.w	r3, #32
   2de80:	f3ef 8111 	mrs	r1, BASEPRI
   2de84:	f383 8812 	msr	BASEPRI_MAX, r3
   2de88:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2de8c:	4b04      	ldr	r3, [pc, #16]	; (2dea0 <k_sched_lock+0x24>)
   2de8e:	689a      	ldr	r2, [r3, #8]
   2de90:	7bd3      	ldrb	r3, [r2, #15]
   2de92:	3b01      	subs	r3, #1
   2de94:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2de96:	f381 8811 	msr	BASEPRI, r1
   2de9a:	f3bf 8f6f 	isb	sy
}
   2de9e:	4770      	bx	lr
   2dea0:	20001980 	.word	0x20001980

0002dea4 <k_sched_unlock>:
{
   2dea4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2dea6:	f04f 0320 	mov.w	r3, #32
   2deaa:	f3ef 8411 	mrs	r4, BASEPRI
   2deae:	f383 8812 	msr	BASEPRI_MAX, r3
   2deb2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2deb6:	4b08      	ldr	r3, [pc, #32]	; (2ded8 <k_sched_unlock+0x34>)
   2deb8:	689a      	ldr	r2, [r3, #8]
   2deba:	7bd3      	ldrb	r3, [r2, #15]
   2debc:	3301      	adds	r3, #1
   2debe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2dec0:	2000      	movs	r0, #0
   2dec2:	f7ff fe29 	bl	2db18 <update_cache>
	__asm__ volatile(
   2dec6:	f384 8811 	msr	BASEPRI, r4
   2deca:	f3bf 8f6f 	isb	sy
}
   2dece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2ded2:	f002 b9fc 	b.w	302ce <z_reschedule_unlocked>
   2ded6:	bf00      	nop
   2ded8:	20001980 	.word	0x20001980

0002dedc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2dedc:	4b02      	ldr	r3, [pc, #8]	; (2dee8 <z_sched_init+0xc>)
   2dede:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   2dee2:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   2dee6:	4770      	bx	lr
   2dee8:	20001980 	.word	0x20001980

0002deec <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2deee:	f04f 0320 	mov.w	r3, #32
   2def2:	f3ef 8511 	mrs	r5, BASEPRI
   2def6:	f383 8812 	msr	BASEPRI_MAX, r3
   2defa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2defe:	4919      	ldr	r1, [pc, #100]	; (2df64 <z_impl_k_yield+0x78>)
   2df00:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2df02:	7b43      	ldrb	r3, [r0, #13]
   2df04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2df08:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2df0a:	f002 f930 	bl	3016e <sys_dlist_remove>
	}
	queue_thread(_current);
   2df0e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2df10:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2df12:	4608      	mov	r0, r1
   2df14:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2df18:	735a      	strb	r2, [r3, #13]
   2df1a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   2df1e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2df20:	4282      	cmp	r2, r0
   2df22:	bf08      	it	eq
   2df24:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2df26:	b922      	cbnz	r2, 2df32 <z_impl_k_yield+0x46>
	node->prev = tail;
   2df28:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   2df2c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2df2e:	620b      	str	r3, [r1, #32]
}
   2df30:	e00c      	b.n	2df4c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2df32:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2df36:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2df3a:	42be      	cmp	r6, r7
   2df3c:	d00e      	beq.n	2df5c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2df3e:	42b7      	cmp	r7, r6
   2df40:	dd0c      	ble.n	2df5c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2df42:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2df44:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2df48:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2df4a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2df4c:	2001      	movs	r0, #1
   2df4e:	f7ff fde3 	bl	2db18 <update_cache>
   2df52:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2df54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2df58:	f7fb bace 	b.w	294f8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2df5c:	42a2      	cmp	r2, r4
   2df5e:	d0e3      	beq.n	2df28 <z_impl_k_yield+0x3c>
   2df60:	6812      	ldr	r2, [r2, #0]
   2df62:	e7e0      	b.n	2df26 <z_impl_k_yield+0x3a>
   2df64:	20001980 	.word	0x20001980

0002df68 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2df68:	ea50 0301 	orrs.w	r3, r0, r1
{
   2df6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2df70:	4605      	mov	r5, r0
   2df72:	460e      	mov	r6, r1
	if (ticks == 0) {
   2df74:	d103      	bne.n	2df7e <z_tick_sleep+0x16>
	z_impl_k_yield();
   2df76:	f7ff ffb9 	bl	2deec <z_impl_k_yield>
		k_yield();
		return 0;
   2df7a:	2000      	movs	r0, #0
   2df7c:	e02c      	b.n	2dfd8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   2df7e:	1c83      	adds	r3, r0, #2
   2df80:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   2df84:	db2a      	blt.n	2dfdc <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2df86:	f002 fa05 	bl	30394 <sys_clock_tick_get_32>
   2df8a:	182c      	adds	r4, r5, r0
   2df8c:	f04f 0320 	mov.w	r3, #32
   2df90:	f3ef 8811 	mrs	r8, BASEPRI
   2df94:	f383 8812 	msr	BASEPRI_MAX, r3
   2df98:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   2df9c:	4f11      	ldr	r7, [pc, #68]	; (2dfe4 <z_tick_sleep+0x7c>)
   2df9e:	4b12      	ldr	r3, [pc, #72]	; (2dfe8 <z_tick_sleep+0x80>)
   2dfa0:	68b8      	ldr	r0, [r7, #8]
   2dfa2:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   2dfa4:	f7ff fe44 	bl	2dc30 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2dfa8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2dfaa:	4910      	ldr	r1, [pc, #64]	; (2dfec <z_tick_sleep+0x84>)
   2dfac:	462a      	mov	r2, r5
   2dfae:	4633      	mov	r3, r6
   2dfb0:	3018      	adds	r0, #24
   2dfb2:	f000 f929 	bl	2e208 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2dfb6:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2dfb8:	7b53      	ldrb	r3, [r2, #13]
   2dfba:	f043 0310 	orr.w	r3, r3, #16
   2dfbe:	7353      	strb	r3, [r2, #13]
   2dfc0:	4640      	mov	r0, r8
   2dfc2:	f7fb fa99 	bl	294f8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2dfc6:	f002 f9e5 	bl	30394 <sys_clock_tick_get_32>
   2dfca:	1a20      	subs	r0, r4, r0
   2dfcc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2dfd0:	2801      	cmp	r0, #1
   2dfd2:	f173 0300 	sbcs.w	r3, r3, #0
   2dfd6:	dbd0      	blt.n	2df7a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   2dfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2dfdc:	f06f 0401 	mvn.w	r4, #1
   2dfe0:	1a24      	subs	r4, r4, r0
   2dfe2:	e7d3      	b.n	2df8c <z_tick_sleep+0x24>
   2dfe4:	20001980 	.word	0x20001980
   2dfe8:	200019ac 	.word	0x200019ac
   2dfec:	00030247 	.word	0x00030247

0002dff0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2dff0:	f1b1 3fff 	cmp.w	r1, #4294967295
   2dff4:	bf08      	it	eq
   2dff6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2dffa:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2dffc:	d106      	bne.n	2e00c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2dffe:	4b08      	ldr	r3, [pc, #32]	; (2e020 <z_impl_k_sleep+0x30>)
   2e000:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2e002:	f7ff ff09 	bl	2de18 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2e006:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2e00a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2e00c:	f7ff ffac 	bl	2df68 <z_tick_sleep>
   2e010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2e014:	fb80 0303 	smull	r0, r3, r0, r3
   2e018:	0bc0      	lsrs	r0, r0, #15
   2e01a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2e01e:	e7f4      	b.n	2e00a <z_impl_k_sleep+0x1a>
   2e020:	20001980 	.word	0x20001980

0002e024 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   2e024:	b538      	push	{r3, r4, r5, lr}
   2e026:	4c0a      	ldr	r4, [pc, #40]	; (2e050 <z_impl_k_usleep+0x2c>)
   2e028:	4a0a      	ldr	r2, [pc, #40]	; (2e054 <z_impl_k_usleep+0x30>)
   2e02a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2e02e:	2100      	movs	r1, #0
   2e030:	fbc0 4105 	smlal	r4, r1, r0, r5
   2e034:	2300      	movs	r3, #0
   2e036:	4620      	mov	r0, r4
   2e038:	f7f9 f862 	bl	27100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   2e03c:	17c1      	asrs	r1, r0, #31
   2e03e:	f7ff ff93 	bl	2df68 <z_tick_sleep>
   2e042:	4b04      	ldr	r3, [pc, #16]	; (2e054 <z_impl_k_usleep+0x30>)
   2e044:	fb80 0303 	smull	r0, r3, r0, r3
   2e048:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   2e04a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2e04e:	bd38      	pop	{r3, r4, r5, pc}
   2e050:	000f423f 	.word	0x000f423f
   2e054:	000f4240 	.word	0x000f4240

0002e058 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2e058:	4b01      	ldr	r3, [pc, #4]	; (2e060 <z_impl_z_current_get+0x8>)
   2e05a:	6898      	ldr	r0, [r3, #8]
   2e05c:	4770      	bx	lr
   2e05e:	bf00      	nop
   2e060:	20001980 	.word	0x20001980

0002e064 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e068:	4604      	mov	r4, r0
   2e06a:	f04f 0320 	mov.w	r3, #32
   2e06e:	f3ef 8611 	mrs	r6, BASEPRI
   2e072:	f383 8812 	msr	BASEPRI_MAX, r3
   2e076:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2e07a:	7b03      	ldrb	r3, [r0, #12]
   2e07c:	07d9      	lsls	r1, r3, #31
   2e07e:	d50b      	bpl.n	2e098 <z_thread_abort+0x34>
	__asm__ volatile(
   2e080:	f386 8811 	msr	BASEPRI, r6
   2e084:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   2e088:	4040      	eors	r0, r0
   2e08a:	f380 8811 	msr	BASEPRI, r0
   2e08e:	f04f 0004 	mov.w	r0, #4
   2e092:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2e094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2e098:	7b43      	ldrb	r3, [r0, #13]
   2e09a:	071a      	lsls	r2, r3, #28
   2e09c:	d504      	bpl.n	2e0a8 <z_thread_abort+0x44>
   2e09e:	f386 8811 	msr	BASEPRI, r6
   2e0a2:	f3bf 8f6f 	isb	sy
   2e0a6:	e7f5      	b.n	2e094 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2e0a8:	f023 0220 	bic.w	r2, r3, #32
   2e0ac:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2e0b0:	09d2      	lsrs	r2, r2, #7
   2e0b2:	d120      	bne.n	2e0f6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2e0b4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2e0b6:	68a3      	ldr	r3, [r4, #8]
   2e0b8:	b113      	cbz	r3, 2e0c0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   2e0ba:	4620      	mov	r0, r4
   2e0bc:	f002 f85f 	bl	3017e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2e0c0:	f104 0018 	add.w	r0, r4, #24
   2e0c4:	f002 f940 	bl	30348 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2e0c8:	f104 0758 	add.w	r7, r4, #88	; 0x58
   2e0cc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2e0d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e0d2:	42bd      	cmp	r5, r7
   2e0d4:	d000      	beq.n	2e0d8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2e0d6:	b9b5      	cbnz	r5, 2e106 <z_thread_abort+0xa2>
		update_cache(1);
   2e0d8:	2001      	movs	r0, #1
   2e0da:	f7ff fd1d 	bl	2db18 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2e0de:	4b10      	ldr	r3, [pc, #64]	; (2e120 <z_thread_abort+0xbc>)
   2e0e0:	689b      	ldr	r3, [r3, #8]
   2e0e2:	42a3      	cmp	r3, r4
   2e0e4:	d1db      	bne.n	2e09e <z_thread_abort+0x3a>
   2e0e6:	f3ef 8305 	mrs	r3, IPSR
   2e0ea:	2b00      	cmp	r3, #0
   2e0ec:	d1d7      	bne.n	2e09e <z_thread_abort+0x3a>
   2e0ee:	4630      	mov	r0, r6
   2e0f0:	f7fb fa02 	bl	294f8 <arch_swap>
	return ret;
   2e0f4:	e7d3      	b.n	2e09e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2e0f6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2e0fa:	f043 0308 	orr.w	r3, r3, #8
   2e0fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2e100:	f002 f835 	bl	3016e <sys_dlist_remove>
}
   2e104:	e7d7      	b.n	2e0b6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   2e106:	4628      	mov	r0, r5
   2e108:	f002 f839 	bl	3017e <unpend_thread_no_timeout>
   2e10c:	f105 0018 	add.w	r0, r5, #24
   2e110:	f002 f91a 	bl	30348 <z_abort_timeout>
   2e114:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   2e118:	4628      	mov	r0, r5
   2e11a:	f7ff fd55 	bl	2dbc8 <ready_thread>
   2e11e:	e7d7      	b.n	2e0d0 <z_thread_abort+0x6c>
   2e120:	20001980 	.word	0x20001980

0002e124 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2e124:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2e126:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2e12a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2e12c:	e9cd 6700 	strd	r6, r7, [sp]
   2e130:	f7ff fdde 	bl	2dcf0 <z_pend_curr>

	if (data != NULL) {
   2e134:	b11c      	cbz	r4, 2e13e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2e136:	4b03      	ldr	r3, [pc, #12]	; (2e144 <z_sched_wait+0x20>)
   2e138:	689b      	ldr	r3, [r3, #8]
   2e13a:	695b      	ldr	r3, [r3, #20]
   2e13c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2e13e:	b002      	add	sp, #8
   2e140:	bdd0      	pop	{r4, r6, r7, pc}
   2e142:	bf00      	nop
   2e144:	20001980 	.word	0x20001980

0002e148 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2e148:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2e14a:	4806      	ldr	r0, [pc, #24]	; (2e164 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2e14c:	4a06      	ldr	r2, [pc, #24]	; (2e168 <z_data_copy+0x20>)
   2e14e:	4907      	ldr	r1, [pc, #28]	; (2e16c <z_data_copy+0x24>)
   2e150:	1a12      	subs	r2, r2, r0
   2e152:	f001 feac 	bl	2feae <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2e156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2e15a:	4a05      	ldr	r2, [pc, #20]	; (2e170 <z_data_copy+0x28>)
   2e15c:	4905      	ldr	r1, [pc, #20]	; (2e174 <z_data_copy+0x2c>)
   2e15e:	4806      	ldr	r0, [pc, #24]	; (2e178 <z_data_copy+0x30>)
   2e160:	f001 bea5 	b.w	2feae <z_early_memcpy>
   2e164:	20000000 	.word	0x20000000
   2e168:	200003b4 	.word	0x200003b4
   2e16c:	00030dcc 	.word	0x00030dcc
   2e170:	00000000 	.word	0x00000000
   2e174:	00030dcc 	.word	0x00030dcc
   2e178:	20000000 	.word	0x20000000

0002e17c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2e17c:	4b03      	ldr	r3, [pc, #12]	; (2e18c <elapsed+0x10>)
   2e17e:	681b      	ldr	r3, [r3, #0]
   2e180:	b90b      	cbnz	r3, 2e186 <elapsed+0xa>
   2e182:	f7fd ba5b 	b.w	2b63c <sys_clock_elapsed>
}
   2e186:	2000      	movs	r0, #0
   2e188:	4770      	bx	lr
   2e18a:	bf00      	nop
   2e18c:	200019b8 	.word	0x200019b8

0002e190 <next_timeout>:

static int32_t next_timeout(void)
{
   2e190:	b510      	push	{r4, lr}
	return list->head == list;
   2e192:	4b0e      	ldr	r3, [pc, #56]	; (2e1cc <next_timeout+0x3c>)
   2e194:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e196:	429c      	cmp	r4, r3
   2e198:	d104      	bne.n	2e1a4 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2e19a:	f7ff ffef 	bl	2e17c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2e19e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   2e1a2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   2e1a4:	f7ff ffea 	bl	2e17c <elapsed>
	if ((to == NULL) ||
   2e1a8:	2c00      	cmp	r4, #0
   2e1aa:	d0f8      	beq.n	2e19e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2e1ac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2e1b0:	1a1b      	subs	r3, r3, r0
   2e1b2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2e1b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2e1ba:	f172 0100 	sbcs.w	r1, r2, #0
   2e1be:	daee      	bge.n	2e19e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   2e1c0:	2a00      	cmp	r2, #0
   2e1c2:	bfac      	ite	ge
   2e1c4:	4618      	movge	r0, r3
   2e1c6:	2000      	movlt	r0, #0
	return ret;
   2e1c8:	e7eb      	b.n	2e1a2 <next_timeout+0x12>
   2e1ca:	bf00      	nop
   2e1cc:	200001e8 	.word	0x200001e8

0002e1d0 <remove_timeout>:
{
   2e1d0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2e1d2:	b170      	cbz	r0, 2e1f2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2e1d4:	4b0b      	ldr	r3, [pc, #44]	; (2e204 <remove_timeout+0x34>)
   2e1d6:	685b      	ldr	r3, [r3, #4]
   2e1d8:	4298      	cmp	r0, r3
   2e1da:	d00a      	beq.n	2e1f2 <remove_timeout+0x22>
   2e1dc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2e1de:	b143      	cbz	r3, 2e1f2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2e1e0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2e1e4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2e1e8:	1912      	adds	r2, r2, r4
   2e1ea:	eb41 0105 	adc.w	r1, r1, r5
   2e1ee:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2e1f2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   2e1f6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2e1f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e1fa:	2300      	movs	r3, #0
	node->prev = NULL;
   2e1fc:	e9c0 3300 	strd	r3, r3, [r0]
}
   2e200:	bd30      	pop	{r4, r5, pc}
   2e202:	bf00      	nop
   2e204:	200001e8 	.word	0x200001e8

0002e208 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e208:	f1b3 3fff 	cmp.w	r3, #4294967295
   2e20c:	bf08      	it	eq
   2e20e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2e212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e214:	4604      	mov	r4, r0
   2e216:	461d      	mov	r5, r3
   2e218:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e21a:	d05c      	beq.n	2e2d6 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2e21c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2e21e:	f04f 0320 	mov.w	r3, #32
   2e222:	f3ef 8711 	mrs	r7, BASEPRI
   2e226:	f383 8812 	msr	BASEPRI_MAX, r3
   2e22a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2e22e:	3201      	adds	r2, #1
   2e230:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   2e234:	da24      	bge.n	2e280 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2e236:	492d      	ldr	r1, [pc, #180]	; (2e2ec <z_add_timeout+0xe4>)
   2e238:	e9d1 2000 	ldrd	r2, r0, [r1]
   2e23c:	f06f 0301 	mvn.w	r3, #1
   2e240:	1a9b      	subs	r3, r3, r2
   2e242:	f04f 32ff 	mov.w	r2, #4294967295
   2e246:	eb62 0000 	sbc.w	r0, r2, r0
   2e24a:	1b9e      	subs	r6, r3, r6
   2e24c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2e250:	2e01      	cmp	r6, #1
   2e252:	f170 0300 	sbcs.w	r3, r0, #0
   2e256:	da01      	bge.n	2e25c <z_add_timeout+0x54>
   2e258:	2601      	movs	r6, #1
   2e25a:	2000      	movs	r0, #0
   2e25c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   2e260:	4e23      	ldr	r6, [pc, #140]	; (2e2f0 <z_add_timeout+0xe8>)
   2e262:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2e266:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e268:	45b4      	cmp	ip, r6
   2e26a:	bf08      	it	eq
   2e26c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   2e270:	f1bc 0f00 	cmp.w	ip, #0
   2e274:	d10d      	bne.n	2e292 <z_add_timeout+0x8a>
	node->prev = tail;
   2e276:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   2e27a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2e27c:	6074      	str	r4, [r6, #4]
}
   2e27e:	e01c      	b.n	2e2ba <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   2e280:	f7ff ff7c 	bl	2e17c <elapsed>
   2e284:	3601      	adds	r6, #1
   2e286:	f145 0500 	adc.w	r5, r5, #0
   2e28a:	1836      	adds	r6, r6, r0
   2e28c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2e290:	e7e4      	b.n	2e25c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   2e292:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   2e296:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   2e29a:	4293      	cmp	r3, r2
   2e29c:	eb71 0e00 	sbcs.w	lr, r1, r0
   2e2a0:	da1a      	bge.n	2e2d8 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   2e2a2:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   2e2a4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2e2a8:	eb60 0001 	sbc.w	r0, r0, r1
   2e2ac:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   2e2b0:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   2e2b4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2e2b6:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   2e2ba:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e2bc:	42b3      	cmp	r3, r6
   2e2be:	d006      	beq.n	2e2ce <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2e2c0:	429c      	cmp	r4, r3
   2e2c2:	d104      	bne.n	2e2ce <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   2e2c4:	f7ff ff64 	bl	2e190 <next_timeout>
   2e2c8:	2100      	movs	r1, #0
   2e2ca:	f7fd f985 	bl	2b5d8 <sys_clock_set_timeout>
	__asm__ volatile(
   2e2ce:	f387 8811 	msr	BASEPRI, r7
   2e2d2:	f3bf 8f6f 	isb	sy
		}
	}
}
   2e2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   2e2d8:	1a9b      	subs	r3, r3, r2
   2e2da:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   2e2de:	45ac      	cmp	ip, r5
   2e2e0:	e9c4 3104 	strd	r3, r1, [r4, #16]
   2e2e4:	d0c7      	beq.n	2e276 <z_add_timeout+0x6e>
   2e2e6:	f8dc c000 	ldr.w	ip, [ip]
   2e2ea:	e7c1      	b.n	2e270 <z_add_timeout+0x68>
   2e2ec:	20000630 	.word	0x20000630
   2e2f0:	200001e8 	.word	0x200001e8

0002e2f4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   2e2f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   2e2f8:	f04f 0320 	mov.w	r3, #32
   2e2fc:	f3ef 8c11 	mrs	ip, BASEPRI
   2e300:	f383 8812 	msr	BASEPRI_MAX, r3
   2e304:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2e308:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2e3bc <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2e30c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 2e3c0 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   2e310:	4f2c      	ldr	r7, [pc, #176]	; (2e3c4 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   2e312:	f8c9 0000 	str.w	r0, [r9]
   2e316:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   2e31a:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e31c:	4550      	cmp	r0, sl
   2e31e:	bf08      	it	eq
   2e320:	2000      	moveq	r0, #0
   2e322:	2500      	movs	r5, #0
		curr_tick += dt;
   2e324:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   2e328:	f8d9 3000 	ldr.w	r3, [r9]
   2e32c:	46e0      	mov	r8, ip
   2e32e:	b380      	cbz	r0, 2e392 <sys_clock_announce+0x9e>
   2e330:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   2e334:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   2e338:	42b3      	cmp	r3, r6
   2e33a:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   2e33e:	da05      	bge.n	2e34c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   2e340:	1af6      	subs	r6, r6, r3
   2e342:	eb6c 040e 	sbc.w	r4, ip, lr
   2e346:	e9c0 6404 	strd	r6, r4, [r0, #16]
   2e34a:	e022      	b.n	2e392 <sys_clock_announce+0x9e>
		curr_tick += dt;
   2e34c:	18b2      	adds	r2, r6, r2
   2e34e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   2e352:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   2e356:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   2e35a:	f7ff ff39 	bl	2e1d0 <remove_timeout>
	__asm__ volatile(
   2e35e:	f388 8811 	msr	BASEPRI, r8
   2e362:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2e366:	6883      	ldr	r3, [r0, #8]
   2e368:	4798      	blx	r3
	__asm__ volatile(
   2e36a:	f04f 0320 	mov.w	r3, #32
   2e36e:	f3ef 8811 	mrs	r8, BASEPRI
   2e372:	f383 8812 	msr	BASEPRI_MAX, r3
   2e376:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   2e37a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   2e37e:	f8da 0000 	ldr.w	r0, [sl]
   2e382:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e384:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   2e386:	46c4      	mov	ip, r8
   2e388:	f8c9 3000 	str.w	r3, [r9]
   2e38c:	d1ca      	bne.n	2e324 <sys_clock_announce+0x30>
		curr_tick += dt;
   2e38e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   2e392:	189a      	adds	r2, r3, r2
   2e394:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   2e398:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2e39a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   2e39e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   2e3a2:	f7ff fef5 	bl	2e190 <next_timeout>
   2e3a6:	4621      	mov	r1, r4
   2e3a8:	f7fd f916 	bl	2b5d8 <sys_clock_set_timeout>
	__asm__ volatile(
   2e3ac:	f388 8811 	msr	BASEPRI, r8
   2e3b0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   2e3b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   2e3b8:	f7ff bc6a 	b.w	2dc90 <z_time_slice>
   2e3bc:	200001e8 	.word	0x200001e8
   2e3c0:	200019b8 	.word	0x200019b8
   2e3c4:	20000630 	.word	0x20000630

0002e3c8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2e3c8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e3ca:	f04f 0320 	mov.w	r3, #32
   2e3ce:	f3ef 8411 	mrs	r4, BASEPRI
   2e3d2:	f383 8812 	msr	BASEPRI_MAX, r3
   2e3d6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2e3da:	f7ff fecf 	bl	2e17c <elapsed>
   2e3de:	4a06      	ldr	r2, [pc, #24]	; (2e3f8 <sys_clock_tick_get+0x30>)
   2e3e0:	4603      	mov	r3, r0
   2e3e2:	e9d2 0100 	ldrd	r0, r1, [r2]
   2e3e6:	1818      	adds	r0, r3, r0
   2e3e8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   2e3ec:	f384 8811 	msr	BASEPRI, r4
   2e3f0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2e3f4:	bd10      	pop	{r4, pc}
   2e3f6:	bf00      	nop
   2e3f8:	20000630 	.word	0x20000630

0002e3fc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2e3fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e3fe:	4606      	mov	r6, r0
   2e400:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2e402:	f001 fda3 	bl	2ff4c <k_is_in_isr>
   2e406:	b978      	cbnz	r0, 2e428 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2e408:	4b0b      	ldr	r3, [pc, #44]	; (2e438 <z_thread_aligned_alloc+0x3c>)
   2e40a:	689b      	ldr	r3, [r3, #8]
   2e40c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
   2e40e:	b17c      	cbz	r4, 2e430 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2e410:	1d2a      	adds	r2, r5, #4
   2e412:	d209      	bcs.n	2e428 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2e414:	2000      	movs	r0, #0
   2e416:	2100      	movs	r1, #0
   2e418:	e9cd 0100 	strd	r0, r1, [sp]
   2e41c:	f046 0104 	orr.w	r1, r6, #4
   2e420:	4620      	mov	r0, r4
   2e422:	f001 fff0 	bl	30406 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2e426:	b908      	cbnz	r0, 2e42c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   2e428:	2400      	movs	r4, #0
	}

	return ret;
   2e42a:	e001      	b.n	2e430 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   2e42c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2e42e:	1d04      	adds	r4, r0, #4
}
   2e430:	4620      	mov	r0, r4
   2e432:	b002      	add	sp, #8
   2e434:	bd70      	pop	{r4, r5, r6, pc}
   2e436:	bf00      	nop
   2e438:	20001980 	.word	0x20001980

0002e43c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2e43c:	4801      	ldr	r0, [pc, #4]	; (2e444 <boot_banner+0x8>)
   2e43e:	f000 ba58 	b.w	2e8f2 <printk>
   2e442:	bf00      	nop
   2e444:	00030d93 	.word	0x00030d93

0002e448 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   2e448:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2e44a:	4c06      	ldr	r4, [pc, #24]	; (2e464 <statics_init+0x1c>)
   2e44c:	4d06      	ldr	r5, [pc, #24]	; (2e468 <statics_init+0x20>)
   2e44e:	42ac      	cmp	r4, r5
   2e450:	d301      	bcc.n	2e456 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2e452:	2000      	movs	r0, #0
   2e454:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2e456:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2e45a:	4620      	mov	r0, r4
   2e45c:	f001 ffcb 	bl	303f6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2e460:	3414      	adds	r4, #20
   2e462:	e7f4      	b.n	2e44e <statics_init+0x6>
   2e464:	20000278 	.word	0x20000278
   2e468:	20000278 	.word	0x20000278

0002e46c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   2e46c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2e46e:	4b09      	ldr	r3, [pc, #36]	; (2e494 <k_sys_work_q_init+0x28>)
   2e470:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2e472:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   2e474:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2e476:	9300      	str	r3, [sp, #0]
   2e478:	4907      	ldr	r1, [pc, #28]	; (2e498 <k_sys_work_q_init+0x2c>)
   2e47a:	4808      	ldr	r0, [pc, #32]	; (2e49c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2e47c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2e480:	f04f 33ff 	mov.w	r3, #4294967295
   2e484:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2e488:	f7ff fa8e 	bl	2d9a8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2e48c:	4620      	mov	r0, r4
   2e48e:	b004      	add	sp, #16
   2e490:	bd10      	pop	{r4, pc}
   2e492:	bf00      	nop
   2e494:	00030dc1 	.word	0x00030dc1
   2e498:	20003280 	.word	0x20003280
   2e49c:	20000638 	.word	0x20000638

0002e4a0 <nrf_cc3xx_platform_init_no_rng>:
   2e4a0:	b510      	push	{r4, lr}
   2e4a2:	4c0a      	ldr	r4, [pc, #40]	; (2e4cc <nrf_cc3xx_platform_init_no_rng+0x2c>)
   2e4a4:	6823      	ldr	r3, [r4, #0]
   2e4a6:	b11b      	cbz	r3, 2e4b0 <nrf_cc3xx_platform_init_no_rng+0x10>
   2e4a8:	2301      	movs	r3, #1
   2e4aa:	6023      	str	r3, [r4, #0]
   2e4ac:	2000      	movs	r0, #0
   2e4ae:	bd10      	pop	{r4, pc}
   2e4b0:	f000 f8ea 	bl	2e688 <CC_LibInitNoRng>
   2e4b4:	2800      	cmp	r0, #0
   2e4b6:	d0f7      	beq.n	2e4a8 <nrf_cc3xx_platform_init_no_rng+0x8>
   2e4b8:	3801      	subs	r0, #1
   2e4ba:	2806      	cmp	r0, #6
   2e4bc:	d803      	bhi.n	2e4c6 <nrf_cc3xx_platform_init_no_rng+0x26>
   2e4be:	4b04      	ldr	r3, [pc, #16]	; (2e4d0 <nrf_cc3xx_platform_init_no_rng+0x30>)
   2e4c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2e4c4:	bd10      	pop	{r4, pc}
   2e4c6:	4803      	ldr	r0, [pc, #12]	; (2e4d4 <nrf_cc3xx_platform_init_no_rng+0x34>)
   2e4c8:	bd10      	pop	{r4, pc}
   2e4ca:	bf00      	nop
   2e4cc:	200019bc 	.word	0x200019bc
   2e4d0:	00030ae4 	.word	0x00030ae4
   2e4d4:	ffff8ffe 	.word	0xffff8ffe

0002e4d8 <nrf_cc3xx_platform_abort>:
   2e4d8:	f3bf 8f4f 	dsb	sy
   2e4dc:	4905      	ldr	r1, [pc, #20]	; (2e4f4 <nrf_cc3xx_platform_abort+0x1c>)
   2e4de:	4b06      	ldr	r3, [pc, #24]	; (2e4f8 <nrf_cc3xx_platform_abort+0x20>)
   2e4e0:	68ca      	ldr	r2, [r1, #12]
   2e4e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2e4e6:	4313      	orrs	r3, r2
   2e4e8:	60cb      	str	r3, [r1, #12]
   2e4ea:	f3bf 8f4f 	dsb	sy
   2e4ee:	bf00      	nop
   2e4f0:	e7fd      	b.n	2e4ee <nrf_cc3xx_platform_abort+0x16>
   2e4f2:	bf00      	nop
   2e4f4:	e000ed00 	.word	0xe000ed00
   2e4f8:	05fa0004 	.word	0x05fa0004

0002e4fc <CC_PalAbort>:
   2e4fc:	b410      	push	{r4}
   2e4fe:	4b09      	ldr	r3, [pc, #36]	; (2e524 <CC_PalAbort+0x28>)
   2e500:	4909      	ldr	r1, [pc, #36]	; (2e528 <CC_PalAbort+0x2c>)
   2e502:	4c0a      	ldr	r4, [pc, #40]	; (2e52c <CC_PalAbort+0x30>)
   2e504:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   2e508:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2e50c:	6849      	ldr	r1, [r1, #4]
   2e50e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   2e512:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2e516:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2e51a:	2300      	movs	r3, #0
   2e51c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   2e520:	bc10      	pop	{r4}
   2e522:	4708      	bx	r1
   2e524:	5002b000 	.word	0x5002b000
   2e528:	200001f0 	.word	0x200001f0
   2e52c:	5002a000 	.word	0x5002a000

0002e530 <nrf_cc3xx_platform_set_abort>:
   2e530:	e9d0 1200 	ldrd	r1, r2, [r0]
   2e534:	4b01      	ldr	r3, [pc, #4]	; (2e53c <nrf_cc3xx_platform_set_abort+0xc>)
   2e536:	e9c3 1200 	strd	r1, r2, [r3]
   2e53a:	4770      	bx	lr
   2e53c:	200001f0 	.word	0x200001f0

0002e540 <mutex_free>:
   2e540:	b510      	push	{r4, lr}
   2e542:	4604      	mov	r4, r0
   2e544:	b150      	cbz	r0, 2e55c <mutex_free+0x1c>
   2e546:	6863      	ldr	r3, [r4, #4]
   2e548:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   2e54c:	d005      	beq.n	2e55a <mutex_free+0x1a>
   2e54e:	4a06      	ldr	r2, [pc, #24]	; (2e568 <mutex_free+0x28>)
   2e550:	4293      	cmp	r3, r2
   2e552:	d002      	beq.n	2e55a <mutex_free+0x1a>
   2e554:	2300      	movs	r3, #0
   2e556:	6023      	str	r3, [r4, #0]
   2e558:	6062      	str	r2, [r4, #4]
   2e55a:	bd10      	pop	{r4, pc}
   2e55c:	4b03      	ldr	r3, [pc, #12]	; (2e56c <mutex_free+0x2c>)
   2e55e:	4804      	ldr	r0, [pc, #16]	; (2e570 <mutex_free+0x30>)
   2e560:	685b      	ldr	r3, [r3, #4]
   2e562:	4798      	blx	r3
   2e564:	e7ef      	b.n	2e546 <mutex_free+0x6>
   2e566:	bf00      	nop
   2e568:	a95c5f2c 	.word	0xa95c5f2c
   2e56c:	200001f0 	.word	0x200001f0
   2e570:	00030b00 	.word	0x00030b00

0002e574 <mutex_lock>:
   2e574:	b1c8      	cbz	r0, 2e5aa <mutex_lock+0x36>
   2e576:	6843      	ldr	r3, [r0, #4]
   2e578:	4a0d      	ldr	r2, [pc, #52]	; (2e5b0 <mutex_lock+0x3c>)
   2e57a:	4293      	cmp	r3, r2
   2e57c:	d013      	beq.n	2e5a6 <mutex_lock+0x32>
   2e57e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   2e582:	d00e      	beq.n	2e5a2 <mutex_lock+0x2e>
   2e584:	2301      	movs	r3, #1
   2e586:	e850 2f00 	ldrex	r2, [r0]
   2e58a:	4619      	mov	r1, r3
   2e58c:	e840 1c00 	strex	ip, r1, [r0]
   2e590:	f09c 0f00 	teq	ip, #0
   2e594:	d1f7      	bne.n	2e586 <mutex_lock+0x12>
   2e596:	2a01      	cmp	r2, #1
   2e598:	d0f5      	beq.n	2e586 <mutex_lock+0x12>
   2e59a:	f3bf 8f5f 	dmb	sy
   2e59e:	2000      	movs	r0, #0
   2e5a0:	4770      	bx	lr
   2e5a2:	4804      	ldr	r0, [pc, #16]	; (2e5b4 <mutex_lock+0x40>)
   2e5a4:	4770      	bx	lr
   2e5a6:	4804      	ldr	r0, [pc, #16]	; (2e5b8 <mutex_lock+0x44>)
   2e5a8:	4770      	bx	lr
   2e5aa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2e5ae:	4770      	bx	lr
   2e5b0:	a95c5f2c 	.word	0xa95c5f2c
   2e5b4:	ffff8fe9 	.word	0xffff8fe9
   2e5b8:	ffff8fea 	.word	0xffff8fea

0002e5bc <mutex_unlock>:
   2e5bc:	b180      	cbz	r0, 2e5e0 <mutex_unlock+0x24>
   2e5be:	6843      	ldr	r3, [r0, #4]
   2e5c0:	4a09      	ldr	r2, [pc, #36]	; (2e5e8 <mutex_unlock+0x2c>)
   2e5c2:	4293      	cmp	r3, r2
   2e5c4:	d00a      	beq.n	2e5dc <mutex_unlock+0x20>
   2e5c6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   2e5ca:	d005      	beq.n	2e5d8 <mutex_unlock+0x1c>
   2e5cc:	f3bf 8f5f 	dmb	sy
   2e5d0:	2300      	movs	r3, #0
   2e5d2:	6003      	str	r3, [r0, #0]
   2e5d4:	4618      	mov	r0, r3
   2e5d6:	4770      	bx	lr
   2e5d8:	4804      	ldr	r0, [pc, #16]	; (2e5ec <mutex_unlock+0x30>)
   2e5da:	4770      	bx	lr
   2e5dc:	4804      	ldr	r0, [pc, #16]	; (2e5f0 <mutex_unlock+0x34>)
   2e5de:	4770      	bx	lr
   2e5e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2e5e4:	4770      	bx	lr
   2e5e6:	bf00      	nop
   2e5e8:	a95c5f2c 	.word	0xa95c5f2c
   2e5ec:	ffff8fe9 	.word	0xffff8fe9
   2e5f0:	ffff8fea 	.word	0xffff8fea

0002e5f4 <mutex_init>:
   2e5f4:	b510      	push	{r4, lr}
   2e5f6:	4604      	mov	r4, r0
   2e5f8:	b120      	cbz	r0, 2e604 <mutex_init+0x10>
   2e5fa:	4b04      	ldr	r3, [pc, #16]	; (2e60c <mutex_init+0x18>)
   2e5fc:	6063      	str	r3, [r4, #4]
   2e5fe:	2200      	movs	r2, #0
   2e600:	6022      	str	r2, [r4, #0]
   2e602:	bd10      	pop	{r4, pc}
   2e604:	4802      	ldr	r0, [pc, #8]	; (2e610 <mutex_init+0x1c>)
   2e606:	f7ff ff79 	bl	2e4fc <CC_PalAbort>
   2e60a:	e7f6      	b.n	2e5fa <mutex_init+0x6>
   2e60c:	3a00003a 	.word	0x3a00003a
   2e610:	00030b28 	.word	0x00030b28

0002e614 <nrf_cc3xx_platform_set_mutexes>:
   2e614:	b570      	push	{r4, r5, r6, lr}
   2e616:	e9d0 2300 	ldrd	r2, r3, [r0]
   2e61a:	4c17      	ldr	r4, [pc, #92]	; (2e678 <nrf_cc3xx_platform_set_mutexes+0x64>)
   2e61c:	4d17      	ldr	r5, [pc, #92]	; (2e67c <nrf_cc3xx_platform_set_mutexes+0x68>)
   2e61e:	6063      	str	r3, [r4, #4]
   2e620:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   2e624:	e9c4 3002 	strd	r3, r0, [r4, #8]
   2e628:	6022      	str	r2, [r4, #0]
   2e62a:	6848      	ldr	r0, [r1, #4]
   2e62c:	f8d1 c000 	ldr.w	ip, [r1]
   2e630:	4b13      	ldr	r3, [pc, #76]	; (2e680 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   2e632:	e9c3 c000 	strd	ip, r0, [r3]
   2e636:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   2e63a:	f8d1 c008 	ldr.w	ip, [r1, #8]
   2e63e:	f8c3 c008 	str.w	ip, [r3, #8]
   2e642:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   2e646:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   2e64a:	6909      	ldr	r1, [r1, #16]
   2e64c:	f8c3 c00c 	str.w	ip, [r3, #12]
   2e650:	6119      	str	r1, [r3, #16]
   2e652:	d010      	beq.n	2e676 <nrf_cc3xx_platform_set_mutexes+0x62>
   2e654:	490b      	ldr	r1, [pc, #44]	; (2e684 <nrf_cc3xx_platform_set_mutexes+0x70>)
   2e656:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   2e65a:	2300      	movs	r3, #0
   2e65c:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   2e660:	f505 708a 	add.w	r0, r5, #276	; 0x114
   2e664:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   2e668:	4790      	blx	r2
   2e66a:	6823      	ldr	r3, [r4, #0]
   2e66c:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   2e670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e674:	4718      	bx	r3
   2e676:	bd70      	pop	{r4, r5, r6, pc}
   2e678:	2000020c 	.word	0x2000020c
   2e67c:	200019d4 	.word	0x200019d4
   2e680:	200001f8 	.word	0x200001f8
   2e684:	a95c5f2c 	.word	0xa95c5f2c

0002e688 <CC_LibInitNoRng>:
   2e688:	b538      	push	{r3, r4, r5, lr}
   2e68a:	f000 f82f 	bl	2e6ec <CC_HalInit>
   2e68e:	b120      	cbz	r0, 2e69a <CC_LibInitNoRng+0x12>
   2e690:	2403      	movs	r4, #3
   2e692:	f000 f863 	bl	2e75c <CC_PalTerminate>
   2e696:	4620      	mov	r0, r4
   2e698:	bd38      	pop	{r3, r4, r5, pc}
   2e69a:	f000 f831 	bl	2e700 <CC_PalInit>
   2e69e:	b998      	cbnz	r0, 2e6c8 <CC_LibInitNoRng+0x40>
   2e6a0:	f000 f8ac 	bl	2e7fc <CC_PalPowerSaveModeSelect>
   2e6a4:	b998      	cbnz	r0, 2e6ce <CC_LibInitNoRng+0x46>
   2e6a6:	4d0f      	ldr	r5, [pc, #60]	; (2e6e4 <CC_LibInitNoRng+0x5c>)
   2e6a8:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   2e6ac:	0e1b      	lsrs	r3, r3, #24
   2e6ae:	2bf0      	cmp	r3, #240	; 0xf0
   2e6b0:	d108      	bne.n	2e6c4 <CC_LibInitNoRng+0x3c>
   2e6b2:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
   2e6b6:	4b0c      	ldr	r3, [pc, #48]	; (2e6e8 <CC_LibInitNoRng+0x60>)
   2e6b8:	429a      	cmp	r2, r3
   2e6ba:	d00a      	beq.n	2e6d2 <CC_LibInitNoRng+0x4a>
   2e6bc:	2407      	movs	r4, #7
   2e6be:	f000 f817 	bl	2e6f0 <CC_HalTerminate>
   2e6c2:	e7e6      	b.n	2e692 <CC_LibInitNoRng+0xa>
   2e6c4:	2406      	movs	r4, #6
   2e6c6:	e7fa      	b.n	2e6be <CC_LibInitNoRng+0x36>
   2e6c8:	2404      	movs	r4, #4
   2e6ca:	4620      	mov	r0, r4
   2e6cc:	bd38      	pop	{r3, r4, r5, pc}
   2e6ce:	2400      	movs	r4, #0
   2e6d0:	e7f5      	b.n	2e6be <CC_LibInitNoRng+0x36>
   2e6d2:	2001      	movs	r0, #1
   2e6d4:	f000 f892 	bl	2e7fc <CC_PalPowerSaveModeSelect>
   2e6d8:	4604      	mov	r4, r0
   2e6da:	2800      	cmp	r0, #0
   2e6dc:	d1f7      	bne.n	2e6ce <CC_LibInitNoRng+0x46>
   2e6de:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
   2e6e2:	e7d8      	b.n	2e696 <CC_LibInitNoRng+0xe>
   2e6e4:	5002b000 	.word	0x5002b000
   2e6e8:	20e00000 	.word	0x20e00000

0002e6ec <CC_HalInit>:
   2e6ec:	2000      	movs	r0, #0
   2e6ee:	4770      	bx	lr

0002e6f0 <CC_HalTerminate>:
   2e6f0:	2000      	movs	r0, #0
   2e6f2:	4770      	bx	lr

0002e6f4 <CC_HalMaskInterrupt>:
   2e6f4:	4b01      	ldr	r3, [pc, #4]	; (2e6fc <CC_HalMaskInterrupt+0x8>)
   2e6f6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   2e6fa:	4770      	bx	lr
   2e6fc:	5002b000 	.word	0x5002b000

0002e700 <CC_PalInit>:
   2e700:	b510      	push	{r4, lr}
   2e702:	4811      	ldr	r0, [pc, #68]	; (2e748 <CC_PalInit+0x48>)
   2e704:	f000 f848 	bl	2e798 <CC_PalMutexCreate>
   2e708:	b100      	cbz	r0, 2e70c <CC_PalInit+0xc>
   2e70a:	bd10      	pop	{r4, pc}
   2e70c:	480f      	ldr	r0, [pc, #60]	; (2e74c <CC_PalInit+0x4c>)
   2e70e:	f000 f843 	bl	2e798 <CC_PalMutexCreate>
   2e712:	2800      	cmp	r0, #0
   2e714:	d1f9      	bne.n	2e70a <CC_PalInit+0xa>
   2e716:	4c0e      	ldr	r4, [pc, #56]	; (2e750 <CC_PalInit+0x50>)
   2e718:	4620      	mov	r0, r4
   2e71a:	f000 f83d 	bl	2e798 <CC_PalMutexCreate>
   2e71e:	2800      	cmp	r0, #0
   2e720:	d1f3      	bne.n	2e70a <CC_PalInit+0xa>
   2e722:	4b0c      	ldr	r3, [pc, #48]	; (2e754 <CC_PalInit+0x54>)
   2e724:	480c      	ldr	r0, [pc, #48]	; (2e758 <CC_PalInit+0x58>)
   2e726:	601c      	str	r4, [r3, #0]
   2e728:	f000 f836 	bl	2e798 <CC_PalMutexCreate>
   2e72c:	4601      	mov	r1, r0
   2e72e:	2800      	cmp	r0, #0
   2e730:	d1eb      	bne.n	2e70a <CC_PalInit+0xa>
   2e732:	f000 f82d 	bl	2e790 <CC_PalDmaInit>
   2e736:	4604      	mov	r4, r0
   2e738:	b108      	cbz	r0, 2e73e <CC_PalInit+0x3e>
   2e73a:	4620      	mov	r0, r4
   2e73c:	bd10      	pop	{r4, pc}
   2e73e:	f000 f83f 	bl	2e7c0 <CC_PalPowerSaveModeInit>
   2e742:	4620      	mov	r0, r4
   2e744:	e7fa      	b.n	2e73c <CC_PalInit+0x3c>
   2e746:	bf00      	nop
   2e748:	2000024c 	.word	0x2000024c
   2e74c:	20000248 	.word	0x20000248
   2e750:	20000244 	.word	0x20000244
   2e754:	2000023c 	.word	0x2000023c
   2e758:	20000240 	.word	0x20000240

0002e75c <CC_PalTerminate>:
   2e75c:	b508      	push	{r3, lr}
   2e75e:	4808      	ldr	r0, [pc, #32]	; (2e780 <CC_PalTerminate+0x24>)
   2e760:	f000 f824 	bl	2e7ac <CC_PalMutexDestroy>
   2e764:	4807      	ldr	r0, [pc, #28]	; (2e784 <CC_PalTerminate+0x28>)
   2e766:	f000 f821 	bl	2e7ac <CC_PalMutexDestroy>
   2e76a:	4807      	ldr	r0, [pc, #28]	; (2e788 <CC_PalTerminate+0x2c>)
   2e76c:	f000 f81e 	bl	2e7ac <CC_PalMutexDestroy>
   2e770:	4806      	ldr	r0, [pc, #24]	; (2e78c <CC_PalTerminate+0x30>)
   2e772:	f000 f81b 	bl	2e7ac <CC_PalMutexDestroy>
   2e776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2e77a:	f000 b80b 	b.w	2e794 <CC_PalDmaTerminate>
   2e77e:	bf00      	nop
   2e780:	2000024c 	.word	0x2000024c
   2e784:	20000248 	.word	0x20000248
   2e788:	20000244 	.word	0x20000244
   2e78c:	20000240 	.word	0x20000240

0002e790 <CC_PalDmaInit>:
   2e790:	2000      	movs	r0, #0
   2e792:	4770      	bx	lr

0002e794 <CC_PalDmaTerminate>:
   2e794:	4770      	bx	lr
   2e796:	bf00      	nop

0002e798 <CC_PalMutexCreate>:
   2e798:	b508      	push	{r3, lr}
   2e79a:	4b03      	ldr	r3, [pc, #12]	; (2e7a8 <CC_PalMutexCreate+0x10>)
   2e79c:	6802      	ldr	r2, [r0, #0]
   2e79e:	681b      	ldr	r3, [r3, #0]
   2e7a0:	6810      	ldr	r0, [r2, #0]
   2e7a2:	4798      	blx	r3
   2e7a4:	2000      	movs	r0, #0
   2e7a6:	bd08      	pop	{r3, pc}
   2e7a8:	2000020c 	.word	0x2000020c

0002e7ac <CC_PalMutexDestroy>:
   2e7ac:	b508      	push	{r3, lr}
   2e7ae:	4b03      	ldr	r3, [pc, #12]	; (2e7bc <CC_PalMutexDestroy+0x10>)
   2e7b0:	6802      	ldr	r2, [r0, #0]
   2e7b2:	685b      	ldr	r3, [r3, #4]
   2e7b4:	6810      	ldr	r0, [r2, #0]
   2e7b6:	4798      	blx	r3
   2e7b8:	2000      	movs	r0, #0
   2e7ba:	bd08      	pop	{r3, pc}
   2e7bc:	2000020c 	.word	0x2000020c

0002e7c0 <CC_PalPowerSaveModeInit>:
   2e7c0:	b570      	push	{r4, r5, r6, lr}
   2e7c2:	4c09      	ldr	r4, [pc, #36]	; (2e7e8 <CC_PalPowerSaveModeInit+0x28>)
   2e7c4:	4d09      	ldr	r5, [pc, #36]	; (2e7ec <CC_PalPowerSaveModeInit+0x2c>)
   2e7c6:	6920      	ldr	r0, [r4, #16]
   2e7c8:	68ab      	ldr	r3, [r5, #8]
   2e7ca:	4798      	blx	r3
   2e7cc:	b118      	cbz	r0, 2e7d6 <CC_PalPowerSaveModeInit+0x16>
   2e7ce:	4b08      	ldr	r3, [pc, #32]	; (2e7f0 <CC_PalPowerSaveModeInit+0x30>)
   2e7d0:	4808      	ldr	r0, [pc, #32]	; (2e7f4 <CC_PalPowerSaveModeInit+0x34>)
   2e7d2:	685b      	ldr	r3, [r3, #4]
   2e7d4:	4798      	blx	r3
   2e7d6:	4a08      	ldr	r2, [pc, #32]	; (2e7f8 <CC_PalPowerSaveModeInit+0x38>)
   2e7d8:	68eb      	ldr	r3, [r5, #12]
   2e7da:	6920      	ldr	r0, [r4, #16]
   2e7dc:	2100      	movs	r1, #0
   2e7de:	6011      	str	r1, [r2, #0]
   2e7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e7e4:	4718      	bx	r3
   2e7e6:	bf00      	nop
   2e7e8:	200001f8 	.word	0x200001f8
   2e7ec:	2000020c 	.word	0x2000020c
   2e7f0:	200001f0 	.word	0x200001f0
   2e7f4:	00030b4c 	.word	0x00030b4c
   2e7f8:	200019d0 	.word	0x200019d0

0002e7fc <CC_PalPowerSaveModeSelect>:
   2e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e7fe:	4d1a      	ldr	r5, [pc, #104]	; (2e868 <CC_PalPowerSaveModeSelect+0x6c>)
   2e800:	4e1a      	ldr	r6, [pc, #104]	; (2e86c <CC_PalPowerSaveModeSelect+0x70>)
   2e802:	4604      	mov	r4, r0
   2e804:	68b2      	ldr	r2, [r6, #8]
   2e806:	6928      	ldr	r0, [r5, #16]
   2e808:	4790      	blx	r2
   2e80a:	b9e8      	cbnz	r0, 2e848 <CC_PalPowerSaveModeSelect+0x4c>
   2e80c:	4f18      	ldr	r7, [pc, #96]	; (2e870 <CC_PalPowerSaveModeSelect+0x74>)
   2e80e:	683b      	ldr	r3, [r7, #0]
   2e810:	b14c      	cbz	r4, 2e826 <CC_PalPowerSaveModeSelect+0x2a>
   2e812:	b1a3      	cbz	r3, 2e83e <CC_PalPowerSaveModeSelect+0x42>
   2e814:	2b01      	cmp	r3, #1
   2e816:	d019      	beq.n	2e84c <CC_PalPowerSaveModeSelect+0x50>
   2e818:	3b01      	subs	r3, #1
   2e81a:	603b      	str	r3, [r7, #0]
   2e81c:	6928      	ldr	r0, [r5, #16]
   2e81e:	68f3      	ldr	r3, [r6, #12]
   2e820:	4798      	blx	r3
   2e822:	2000      	movs	r0, #0
   2e824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e826:	b943      	cbnz	r3, 2e83a <CC_PalPowerSaveModeSelect+0x3e>
   2e828:	4a12      	ldr	r2, [pc, #72]	; (2e874 <CC_PalPowerSaveModeSelect+0x78>)
   2e82a:	2101      	movs	r1, #1
   2e82c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   2e830:	4911      	ldr	r1, [pc, #68]	; (2e878 <CC_PalPowerSaveModeSelect+0x7c>)
   2e832:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   2e836:	2a00      	cmp	r2, #0
   2e838:	d1fb      	bne.n	2e832 <CC_PalPowerSaveModeSelect+0x36>
   2e83a:	3301      	adds	r3, #1
   2e83c:	603b      	str	r3, [r7, #0]
   2e83e:	68f3      	ldr	r3, [r6, #12]
   2e840:	6928      	ldr	r0, [r5, #16]
   2e842:	4798      	blx	r3
   2e844:	2000      	movs	r0, #0
   2e846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e848:	480c      	ldr	r0, [pc, #48]	; (2e87c <CC_PalPowerSaveModeSelect+0x80>)
   2e84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e84c:	4a0a      	ldr	r2, [pc, #40]	; (2e878 <CC_PalPowerSaveModeSelect+0x7c>)
   2e84e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2e852:	2b00      	cmp	r3, #0
   2e854:	d1fb      	bne.n	2e84e <CC_PalPowerSaveModeSelect+0x52>
   2e856:	4a07      	ldr	r2, [pc, #28]	; (2e874 <CC_PalPowerSaveModeSelect+0x78>)
   2e858:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   2e85c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   2e860:	f7ff ff48 	bl	2e6f4 <CC_HalMaskInterrupt>
   2e864:	683b      	ldr	r3, [r7, #0]
   2e866:	e7d7      	b.n	2e818 <CC_PalPowerSaveModeSelect+0x1c>
   2e868:	200001f8 	.word	0x200001f8
   2e86c:	2000020c 	.word	0x2000020c
   2e870:	200019d0 	.word	0x200019d0
   2e874:	5002a000 	.word	0x5002a000
   2e878:	5002b000 	.word	0x5002b000
   2e87c:	ffff8fe9 	.word	0xffff8fe9

0002e880 <k_msleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
   2e880:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2e884:	2100      	movs	r1, #0
   2e886:	f7ff bbb3 	b.w	2dff0 <z_impl_k_sleep>

0002e88a <main>:

/* 1000 msec = 1 sec */
#define SLEEP_TIME_MS 1000

int main(void)
{
   2e88a:	b508      	push	{r3, lr}
	// Show init status
	leds_init();
   2e88c:	f7f8 fda2 	bl	273d4 <leds_init>

	// Led green on successful initialization.

	while (1)
	{
		leds_toggle_red();
   2e890:	f7f8 fdc4 	bl	2741c <leds_toggle_red>

		k_msleep(SLEEP_TIME_MS);
   2e894:	f7ff fff4 	bl	2e880 <k_msleep.constprop.0.isra.0>
		leds_toggle_green();
   2e898:	f7f8 fdc6 	bl	27428 <leds_toggle_green>
		k_msleep(SLEEP_TIME_MS);
   2e89c:	f7ff fff0 	bl	2e880 <k_msleep.constprop.0.isra.0>
		leds_toggle_blue();
   2e8a0:	f7f8 fdc8 	bl	27434 <leds_toggle_blue>
		k_msleep(SLEEP_TIME_MS);
   2e8a4:	f7ff ffec 	bl	2e880 <k_msleep.constprop.0.isra.0>
	while (1)
   2e8a8:	e7f2      	b.n	2e890 <main+0x6>

0002e8aa <gpio_pin_toggle_dt.isra.0>:
 *     gpio_pin_toggle(spec->port, spec->pin);
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
   2e8aa:	4603      	mov	r3, r0
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   2e8ac:	2101      	movs	r1, #1
   2e8ae:	791b      	ldrb	r3, [r3, #4]
{
	return gpio_pin_toggle(spec->port, spec->pin);
   2e8b0:	6800      	ldr	r0, [r0, #0]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   2e8b2:	4099      	lsls	r1, r3
	return api->port_toggle_bits(port, pins);
   2e8b4:	6883      	ldr	r3, [r0, #8]
   2e8b6:	695b      	ldr	r3, [r3, #20]
   2e8b8:	4718      	bx	r3

0002e8ba <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   2e8ba:	b4f0      	push	{r4, r5, r6, r7}
   2e8bc:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
   2e8be:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2e8c0:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2e8c2:	88db      	ldrh	r3, [r3, #6]
	struct gpio_driver_data *data =
   2e8c4:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   2e8c6:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2e8c8:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2e8ca:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   2e8cc:	bf54      	ite	pl
   2e8ce:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2e8d2:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2e8d6:	2501      	movs	r5, #1
   2e8d8:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2e8da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2e8de:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2e8e0:	bf4c      	ite	mi
   2e8e2:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2e8e4:	43ac      	bicpl	r4, r5
   2e8e6:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   2e8e8:	683b      	ldr	r3, [r7, #0]
}
   2e8ea:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   2e8ec:	4718      	bx	r3

0002e8ee <arch_printk_char_out>:
}
   2e8ee:	2000      	movs	r0, #0
   2e8f0:	4770      	bx	lr

0002e8f2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   2e8f2:	b40f      	push	{r0, r1, r2, r3}
   2e8f4:	b507      	push	{r0, r1, r2, lr}
   2e8f6:	a904      	add	r1, sp, #16
   2e8f8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2e8fc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2e8fe:	f7f8 fdab 	bl	27458 <vprintk>

	va_end(ap);
}
   2e902:	b003      	add	sp, #12
   2e904:	f85d eb04 	ldr.w	lr, [sp], #4
   2e908:	b004      	add	sp, #16
   2e90a:	4770      	bx	lr

0002e90c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2e90c:	4604      	mov	r4, r0
   2e90e:	b508      	push	{r3, lr}
   2e910:	4608      	mov	r0, r1
   2e912:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2e914:	461a      	mov	r2, r3
   2e916:	47a0      	blx	r4
	return z_impl_z_current_get();
   2e918:	f7ff fb9e 	bl	2e058 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2e91c:	f7fb f880 	bl	29a20 <z_impl_k_thread_abort>

0002e920 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2e920:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2e924:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2e926:	0840      	lsrs	r0, r0, #1
   2e928:	4770      	bx	lr

0002e92a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2e92a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e92c:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2e92e:	f7ff fff7 	bl	2e920 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2e932:	fab0 f080 	clz	r0, r0
   2e936:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2e93a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2e93e:	00ca      	lsls	r2, r1, #3
   2e940:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2e944:	1d17      	adds	r7, r2, #4
{
   2e946:	460c      	mov	r4, r1
   2e948:	3206      	adds	r2, #6
   2e94a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2e94c:	b956      	cbnz	r6, 2e964 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2e94e:	2101      	movs	r1, #1
   2e950:	fa01 f000 	lsl.w	r0, r1, r0
   2e954:	68d9      	ldr	r1, [r3, #12]
   2e956:	4301      	orrs	r1, r0
   2e958:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2e95a:	f8cc 4010 	str.w	r4, [ip, #16]
   2e95e:	53dd      	strh	r5, [r3, r7]
   2e960:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2e962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2e964:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2e966:	3104      	adds	r1, #4
   2e968:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2e96a:	53d8      	strh	r0, [r3, r7]
   2e96c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2e970:	529e      	strh	r6, [r3, r2]
   2e972:	80c5      	strh	r5, [r0, #6]
   2e974:	525d      	strh	r5, [r3, r1]
   2e976:	e7f4      	b.n	2e962 <free_list_add+0x38>

0002e978 <free_list_remove_bidx>:
{
   2e978:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2e97a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2e97e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2e980:	4299      	cmp	r1, r3
   2e982:	f102 0104 	add.w	r1, r2, #4
   2e986:	d10a      	bne.n	2e99e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2e988:	2301      	movs	r3, #1
   2e98a:	fa03 f202 	lsl.w	r2, r3, r2
   2e98e:	68c3      	ldr	r3, [r0, #12]
   2e990:	ea23 0302 	bic.w	r3, r3, r2
   2e994:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2e996:	2300      	movs	r3, #0
   2e998:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2e99c:	bd10      	pop	{r4, pc}
   2e99e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2e9a0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2e9a4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2e9a8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2e9ac:	80cb      	strh	r3, [r1, #6]
   2e9ae:	8082      	strh	r2, [r0, #4]
}
   2e9b0:	e7f4      	b.n	2e99c <free_list_remove_bidx+0x24>

0002e9b2 <free_list_remove>:
{
   2e9b2:	b508      	push	{r3, lr}
   2e9b4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2e9b6:	f7ff ffb3 	bl	2e920 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2e9ba:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2e9be:	f1c2 021f 	rsb	r2, r2, #31
   2e9c2:	4618      	mov	r0, r3
}
   2e9c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2e9c8:	f7ff bfd6 	b.w	2e978 <free_list_remove_bidx>

0002e9cc <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2e9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e9d0:	fab1 f581 	clz	r5, r1
   2e9d4:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2e9d8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   2e9dc:	4603      	mov	r3, r0
	if (b->next) {
   2e9de:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2e9e2:	460e      	mov	r6, r1
	if (b->next) {
   2e9e4:	b1c2      	cbz	r2, 2ea18 <alloc_chunk+0x4c>
   2e9e6:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2e9e8:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2e9ec:	4618      	mov	r0, r3
   2e9ee:	4621      	mov	r1, r4
   2e9f0:	f7ff ff96 	bl	2e920 <chunk_size>
   2e9f4:	42b0      	cmp	r0, r6
   2e9f6:	d306      	bcc.n	2ea06 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2e9f8:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2e9fa:	4618      	mov	r0, r3
   2e9fc:	f7ff ffbc 	bl	2e978 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2ea00:	4620      	mov	r0, r4
   2ea02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2ea06:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2ea0a:	3f01      	subs	r7, #1
   2ea0c:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   2ea0e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2ea12:	d001      	beq.n	2ea18 <alloc_chunk+0x4c>
   2ea14:	4282      	cmp	r2, r0
   2ea16:	d1e7      	bne.n	2e9e8 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2ea18:	f1c5 0220 	rsb	r2, r5, #32
   2ea1c:	f04f 34ff 	mov.w	r4, #4294967295
   2ea20:	4094      	lsls	r4, r2
   2ea22:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2ea24:	4014      	ands	r4, r2
   2ea26:	d0eb      	beq.n	2ea00 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2ea28:	fa94 f2a4 	rbit	r2, r4
   2ea2c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2ea30:	1d11      	adds	r1, r2, #4
   2ea32:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2ea36:	4621      	mov	r1, r4
   2ea38:	e7df      	b.n	2e9fa <alloc_chunk+0x2e>

0002ea3a <merge_chunks>:
{
   2ea3a:	b538      	push	{r3, r4, r5, lr}
   2ea3c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2ea3e:	f7ff ff6f 	bl	2e920 <chunk_size>
{
   2ea42:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2ea44:	4604      	mov	r4, r0
   2ea46:	4611      	mov	r1, r2
   2ea48:	4618      	mov	r0, r3
   2ea4a:	f7ff ff69 	bl	2e920 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2ea4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2ea52:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2ea54:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2ea56:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2ea58:	4618      	mov	r0, r3
   2ea5a:	f7ff ff61 	bl	2e920 <chunk_size>
	void *cmem = &buf[c];
   2ea5e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2ea60:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2ea64:	bd38      	pop	{r3, r4, r5, pc}

0002ea66 <split_chunks>:
{
   2ea66:	b538      	push	{r3, r4, r5, lr}
   2ea68:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2ea6a:	f7ff ff59 	bl	2e920 <chunk_size>
{
   2ea6e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2ea70:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2ea72:	1a51      	subs	r1, r2, r1
   2ea74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2ea78:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2ea7a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2ea7c:	8060      	strh	r0, [r4, #2]
   2ea7e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2ea82:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2ea84:	8044      	strh	r4, [r0, #2]
   2ea86:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2ea8a:	4618      	mov	r0, r3
   2ea8c:	4611      	mov	r1, r2
   2ea8e:	f7ff ff47 	bl	2e920 <chunk_size>
	void *cmem = &buf[c];
   2ea92:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2ea94:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2ea98:	bd38      	pop	{r3, r4, r5, pc}

0002ea9a <free_chunk>:
{
   2ea9a:	b538      	push	{r3, r4, r5, lr}
   2ea9c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2ea9e:	f7ff ff3f 	bl	2e920 <chunk_size>
   2eaa2:	460c      	mov	r4, r1
   2eaa4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2eaa6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2eaaa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2eaac:	07da      	lsls	r2, r3, #31
   2eaae:	d40a      	bmi.n	2eac6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2eab0:	4628      	mov	r0, r5
   2eab2:	f7ff ff7e 	bl	2e9b2 <free_list_remove>
	return c + chunk_size(h, c);
   2eab6:	4621      	mov	r1, r4
   2eab8:	4628      	mov	r0, r5
   2eaba:	f7ff ff31 	bl	2e920 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2eabe:	1822      	adds	r2, r4, r0
   2eac0:	4628      	mov	r0, r5
   2eac2:	f7ff ffba 	bl	2ea3a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2eac6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2eaca:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2eacc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2ead0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2ead2:	07db      	lsls	r3, r3, #31
   2ead4:	d40c      	bmi.n	2eaf0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2ead6:	4628      	mov	r0, r5
   2ead8:	f7ff ff6b 	bl	2e9b2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2eadc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2eae0:	4622      	mov	r2, r4
   2eae2:	1a61      	subs	r1, r4, r1
   2eae4:	4628      	mov	r0, r5
   2eae6:	f7ff ffa8 	bl	2ea3a <merge_chunks>
   2eaea:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2eaee:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2eaf0:	4621      	mov	r1, r4
   2eaf2:	4628      	mov	r0, r5
}
   2eaf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2eaf8:	f7ff bf17 	b.w	2e92a <free_list_add>

0002eafc <sys_heap_free>:
	if (mem == NULL) {
   2eafc:	b161      	cbz	r1, 2eb18 <sys_heap_free+0x1c>
   2eafe:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2eb00:	3904      	subs	r1, #4
   2eb02:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2eb04:	f021 0307 	bic.w	r3, r1, #7
   2eb08:	4403      	add	r3, r0
	free_chunk(h, c);
   2eb0a:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2eb0c:	885a      	ldrh	r2, [r3, #2]
   2eb0e:	f022 0201 	bic.w	r2, r2, #1
   2eb12:	805a      	strh	r2, [r3, #2]
   2eb14:	f7ff bfc1 	b.w	2ea9a <free_chunk>
}
   2eb18:	4770      	bx	lr

0002eb1a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2eb1a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2eb1c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2eb1e:	b909      	cbnz	r1, 2eb24 <sys_heap_alloc+0xa>
		return NULL;
   2eb20:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2eb22:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2eb24:	68ab      	ldr	r3, [r5, #8]
   2eb26:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2eb2a:	d9f9      	bls.n	2eb20 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2eb2c:	310b      	adds	r1, #11
   2eb2e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2eb30:	4621      	mov	r1, r4
   2eb32:	4628      	mov	r0, r5
   2eb34:	f7ff ff4a 	bl	2e9cc <alloc_chunk>
	if (c == 0U) {
   2eb38:	4606      	mov	r6, r0
   2eb3a:	2800      	cmp	r0, #0
   2eb3c:	d0f0      	beq.n	2eb20 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2eb3e:	4601      	mov	r1, r0
   2eb40:	4628      	mov	r0, r5
   2eb42:	f7ff feed 	bl	2e920 <chunk_size>
   2eb46:	42a0      	cmp	r0, r4
   2eb48:	d907      	bls.n	2eb5a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2eb4a:	1932      	adds	r2, r6, r4
   2eb4c:	4628      	mov	r0, r5
   2eb4e:	f7ff ff8a 	bl	2ea66 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2eb52:	4611      	mov	r1, r2
   2eb54:	4628      	mov	r0, r5
   2eb56:	f7ff fee8 	bl	2e92a <free_list_add>
	void *cmem = &buf[c];
   2eb5a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2eb5e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2eb60:	8853      	ldrh	r3, [r2, #2]
   2eb62:	f043 0301 	orr.w	r3, r3, #1
   2eb66:	8053      	strh	r3, [r2, #2]
   2eb68:	3004      	adds	r0, #4
	return mem;
   2eb6a:	e7da      	b.n	2eb22 <sys_heap_alloc+0x8>

0002eb6c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2eb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2eb70:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   2eb74:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   2eb78:	6806      	ldr	r6, [r0, #0]
{
   2eb7a:	460f      	mov	r7, r1
   2eb7c:	4614      	mov	r4, r2
	if (align != rew) {
   2eb7e:	d00c      	beq.n	2eb9a <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   2eb80:	424b      	negs	r3, r1
   2eb82:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2eb84:	2b04      	cmp	r3, #4
   2eb86:	461a      	mov	r2, r3
   2eb88:	464f      	mov	r7, r9
   2eb8a:	bf28      	it	cs
   2eb8c:	2204      	movcs	r2, #4
	rew = align & -align;
   2eb8e:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2eb90:	b964      	cbnz	r4, 2ebac <sys_heap_aligned_alloc+0x40>
		return NULL;
   2eb92:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2eb94:	4628      	mov	r0, r5
   2eb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2eb9a:	2904      	cmp	r1, #4
   2eb9c:	d804      	bhi.n	2eba8 <sys_heap_aligned_alloc+0x3c>
}
   2eb9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2eba2:	4611      	mov	r1, r2
   2eba4:	f7ff bfb9 	b.w	2eb1a <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2eba8:	2204      	movs	r2, #4
   2ebaa:	e7f1      	b.n	2eb90 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2ebac:	68b3      	ldr	r3, [r6, #8]
   2ebae:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2ebb2:	d9ee      	bls.n	2eb92 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2ebb4:	f104 010b 	add.w	r1, r4, #11
   2ebb8:	4439      	add	r1, r7
   2ebba:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2ebbc:	08c9      	lsrs	r1, r1, #3
   2ebbe:	4630      	mov	r0, r6
   2ebc0:	f7ff ff04 	bl	2e9cc <alloc_chunk>
	if (c0 == 0) {
   2ebc4:	4680      	mov	r8, r0
   2ebc6:	2800      	cmp	r0, #0
   2ebc8:	d0e3      	beq.n	2eb92 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2ebca:	f109 0504 	add.w	r5, r9, #4
   2ebce:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2ebd2:	1e7b      	subs	r3, r7, #1
   2ebd4:	4435      	add	r5, r6
   2ebd6:	441d      	add	r5, r3
   2ebd8:	427f      	negs	r7, r7
   2ebda:	403d      	ands	r5, r7
   2ebdc:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2ebe0:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2ebe2:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2ebe4:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2ebe6:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2ebe8:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2ebec:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2ebee:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2ebf2:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2ebf6:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2ebfa:	d208      	bcs.n	2ec0e <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   2ebfc:	4601      	mov	r1, r0
   2ebfe:	463a      	mov	r2, r7
   2ec00:	4630      	mov	r0, r6
   2ec02:	f7ff ff30 	bl	2ea66 <split_chunks>
		free_list_add(h, c0);
   2ec06:	4641      	mov	r1, r8
   2ec08:	4630      	mov	r0, r6
   2ec0a:	f7ff fe8e 	bl	2e92a <free_list_add>
	return c + chunk_size(h, c);
   2ec0e:	4639      	mov	r1, r7
   2ec10:	4630      	mov	r0, r6
   2ec12:	f7ff fe85 	bl	2e920 <chunk_size>
   2ec16:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2ec18:	4284      	cmp	r4, r0
   2ec1a:	d207      	bcs.n	2ec2c <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   2ec1c:	4630      	mov	r0, r6
   2ec1e:	4622      	mov	r2, r4
   2ec20:	f7ff ff21 	bl	2ea66 <split_chunks>
		free_list_add(h, c_end);
   2ec24:	4621      	mov	r1, r4
   2ec26:	4630      	mov	r0, r6
   2ec28:	f7ff fe7f 	bl	2e92a <free_list_add>
	void *cmem = &buf[c];
   2ec2c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2ec30:	8873      	ldrh	r3, [r6, #2]
   2ec32:	f043 0301 	orr.w	r3, r3, #1
   2ec36:	8073      	strh	r3, [r6, #2]
   2ec38:	e7ac      	b.n	2eb94 <sys_heap_aligned_alloc+0x28>

0002ec3a <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2ec3a:	3a04      	subs	r2, #4
{
   2ec3c:	b4f0      	push	{r4, r5, r6, r7}
   2ec3e:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2ec40:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2ec42:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2ec44:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2ec48:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2ec4c:	1a0e      	subs	r6, r1, r0
   2ec4e:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2ec50:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   2ec52:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2ec56:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2ec58:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   2ec5c:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   2ec5e:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2ec60:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   2ec62:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2ec66:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2ec68:	f1c2 0220 	rsb	r2, r2, #32
   2ec6c:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2ec6e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   2ec72:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2ec76:	4294      	cmp	r4, r2
   2ec78:	d1fb      	bne.n	2ec72 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2ec7a:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2ec7c:	f042 0201 	orr.w	r2, r2, #1
   2ec80:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   2ec82:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2ec86:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2ec88:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2ec8a:	8007      	strh	r7, [r0, #0]
   2ec8c:	8065      	strh	r5, [r4, #2]
   2ec8e:	1984      	adds	r4, r0, r6
   2ec90:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   2ec94:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2ec98:	8067      	strh	r7, [r4, #2]
   2ec9a:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2ec9c:	885a      	ldrh	r2, [r3, #2]
   2ec9e:	f042 0201 	orr.w	r2, r2, #1
   2eca2:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2eca4:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2eca6:	f7ff be40 	b.w	2e92a <free_list_add>

0002ecaa <sys_slist_find_and_remove>:
	return list->head;
   2ecaa:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ecac:	2200      	movs	r2, #0
   2ecae:	b90b      	cbnz	r3, 2ecb4 <sys_slist_find_and_remove+0xa>
   2ecb0:	4618      	mov	r0, r3
   2ecb2:	4770      	bx	lr
   2ecb4:	428b      	cmp	r3, r1
   2ecb6:	d110      	bne.n	2ecda <sys_slist_find_and_remove+0x30>
	return node->next;
   2ecb8:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ecba:	b942      	cbnz	r2, 2ecce <sys_slist_find_and_remove+0x24>
   2ecbc:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2ecbe:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ecc0:	4291      	cmp	r1, r2
   2ecc2:	d100      	bne.n	2ecc6 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2ecc4:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2ecc6:	2300      	movs	r3, #0
   2ecc8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ecca:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2eccc:	4770      	bx	lr
	parent->next = child;
   2ecce:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ecd0:	6843      	ldr	r3, [r0, #4]
   2ecd2:	4299      	cmp	r1, r3
	list->tail = node;
   2ecd4:	bf08      	it	eq
   2ecd6:	6042      	streq	r2, [r0, #4]
}
   2ecd8:	e7f5      	b.n	2ecc6 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2ecda:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ecdc:	681b      	ldr	r3, [r3, #0]
   2ecde:	e7e6      	b.n	2ecae <sys_slist_find_and_remove+0x4>

0002ece0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2ece0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2ece2:	f013 0307 	ands.w	r3, r3, #7
   2ece6:	d105      	bne.n	2ecf4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2ece8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2ecea:	2b00      	cmp	r3, #0
   2ecec:	bf0c      	ite	eq
   2ecee:	2000      	moveq	r0, #0
   2ecf0:	2003      	movne	r0, #3
   2ecf2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2ecf4:	2b02      	cmp	r3, #2
   2ecf6:	d105      	bne.n	2ed04 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2ecf8:	8b40      	ldrh	r0, [r0, #26]
   2ecfa:	fab0 f080 	clz	r0, r0
   2ecfe:	0940      	lsrs	r0, r0, #5
   2ed00:	0080      	lsls	r0, r0, #2
   2ed02:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2ed04:	2b01      	cmp	r3, #1
   2ed06:	d105      	bne.n	2ed14 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2ed08:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2ed0a:	2b00      	cmp	r3, #0
   2ed0c:	bf0c      	ite	eq
   2ed0e:	2000      	moveq	r0, #0
   2ed10:	2005      	movne	r0, #5
   2ed12:	4770      	bx	lr
	int evt = EVT_NOP;
   2ed14:	2000      	movs	r0, #0
}
   2ed16:	4770      	bx	lr

0002ed18 <validate_args>:
{
   2ed18:	b510      	push	{r4, lr}
   2ed1a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2ed1c:	b100      	cbz	r0, 2ed20 <validate_args+0x8>
   2ed1e:	b911      	cbnz	r1, 2ed26 <validate_args+0xe>
		return -EINVAL;
   2ed20:	f06f 0015 	mvn.w	r0, #21
}
   2ed24:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2ed26:	1d08      	adds	r0, r1, #4
   2ed28:	f000 f8d6 	bl	2eed8 <sys_notify_validate>
	if ((rv == 0)
   2ed2c:	2800      	cmp	r0, #0
   2ed2e:	d1f9      	bne.n	2ed24 <validate_args+0xc>
	    && ((cli->notify.flags
   2ed30:	68a3      	ldr	r3, [r4, #8]
   2ed32:	2b03      	cmp	r3, #3
   2ed34:	d9f6      	bls.n	2ed24 <validate_args+0xc>
   2ed36:	e7f3      	b.n	2ed20 <validate_args+0x8>

0002ed38 <notify_one>:
{
   2ed38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ed3c:	460d      	mov	r5, r1
   2ed3e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2ed40:	4619      	mov	r1, r3
   2ed42:	1d28      	adds	r0, r5, #4
{
   2ed44:	4690      	mov	r8, r2
   2ed46:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2ed48:	f000 f8d7 	bl	2eefa <sys_notify_finalize>
	if (cb) {
   2ed4c:	4604      	mov	r4, r0
   2ed4e:	b138      	cbz	r0, 2ed60 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2ed50:	4633      	mov	r3, r6
   2ed52:	4642      	mov	r2, r8
   2ed54:	4629      	mov	r1, r5
   2ed56:	4638      	mov	r0, r7
   2ed58:	46a4      	mov	ip, r4
}
   2ed5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2ed5e:	4760      	bx	ip
}
   2ed60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ed64 <transition_complete>:
{
   2ed64:	b410      	push	{r4}
	__asm__ volatile(
   2ed66:	f04f 0420 	mov.w	r4, #32
   2ed6a:	f3ef 8211 	mrs	r2, BASEPRI
   2ed6e:	f384 8812 	msr	BASEPRI_MAX, r4
   2ed72:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2ed76:	6141      	str	r1, [r0, #20]
}
   2ed78:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2ed7a:	2101      	movs	r1, #1
   2ed7c:	f7f8 bb7a 	b.w	27474 <process_event>

0002ed80 <onoff_manager_init>:
{
   2ed80:	b538      	push	{r3, r4, r5, lr}
   2ed82:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2ed84:	4605      	mov	r5, r0
   2ed86:	b158      	cbz	r0, 2eda0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2ed88:	b151      	cbz	r1, 2eda0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2ed8a:	680b      	ldr	r3, [r1, #0]
   2ed8c:	b143      	cbz	r3, 2eda0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2ed8e:	684b      	ldr	r3, [r1, #4]
   2ed90:	b133      	cbz	r3, 2eda0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2ed92:	221c      	movs	r2, #28
   2ed94:	2100      	movs	r1, #0
   2ed96:	f000 faee 	bl	2f376 <memset>
   2ed9a:	612c      	str	r4, [r5, #16]
	return 0;
   2ed9c:	2000      	movs	r0, #0
}
   2ed9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2eda0:	f06f 0015 	mvn.w	r0, #21
   2eda4:	e7fb      	b.n	2ed9e <onoff_manager_init+0x1e>

0002eda6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2eda6:	b570      	push	{r4, r5, r6, lr}
   2eda8:	4605      	mov	r5, r0
   2edaa:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2edac:	f7ff ffb4 	bl	2ed18 <validate_args>

	if (rv < 0) {
   2edb0:	1e04      	subs	r4, r0, #0
   2edb2:	db15      	blt.n	2ede0 <onoff_request+0x3a>
   2edb4:	f04f 0320 	mov.w	r3, #32
   2edb8:	f3ef 8211 	mrs	r2, BASEPRI
   2edbc:	f383 8812 	msr	BASEPRI_MAX, r3
   2edc0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2edc4:	8b6b      	ldrh	r3, [r5, #26]
   2edc6:	8b2c      	ldrh	r4, [r5, #24]
   2edc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2edcc:	428b      	cmp	r3, r1
   2edce:	f004 0407 	and.w	r4, r4, #7
   2edd2:	d107      	bne.n	2ede4 <onoff_request+0x3e>
	__asm__ volatile(
   2edd4:	f382 8811 	msr	BASEPRI, r2
   2edd8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   2eddc:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2ede0:	4620      	mov	r0, r4
   2ede2:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2ede4:	2c02      	cmp	r4, #2
   2ede6:	d10c      	bne.n	2ee02 <onoff_request+0x5c>
		mgr->refs += 1U;
   2ede8:	3301      	adds	r3, #1
   2edea:	836b      	strh	r3, [r5, #26]
   2edec:	f382 8811 	msr	BASEPRI, r2
   2edf0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2edf4:	2300      	movs	r3, #0
   2edf6:	4622      	mov	r2, r4
   2edf8:	4631      	mov	r1, r6
   2edfa:	4628      	mov	r0, r5
   2edfc:	f7ff ff9c 	bl	2ed38 <notify_one>
   2ee00:	e7ee      	b.n	2ede0 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   2ee02:	2c06      	cmp	r4, #6
   2ee04:	d814      	bhi.n	2ee30 <onoff_request+0x8a>
   2ee06:	e8df f004 	tbb	[pc, r4]
   2ee0a:	1304      	.short	0x1304
   2ee0c:	1a041313 	.word	0x1a041313
   2ee10:	04          	.byte	0x04
   2ee11:	00          	.byte	0x00
	parent->next = child;
   2ee12:	2300      	movs	r3, #0
   2ee14:	6033      	str	r3, [r6, #0]
	return list->tail;
   2ee16:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2ee18:	b93b      	cbnz	r3, 2ee2a <onoff_request+0x84>
	list->head = node;
   2ee1a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   2ee1e:	b9ac      	cbnz	r4, 2ee4c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2ee20:	2102      	movs	r1, #2
   2ee22:	4628      	mov	r0, r5
   2ee24:	f7f8 fb26 	bl	27474 <process_event>
   2ee28:	e7da      	b.n	2ede0 <onoff_request+0x3a>
	parent->next = child;
   2ee2a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2ee2c:	606e      	str	r6, [r5, #4]
}
   2ee2e:	e7f6      	b.n	2ee1e <onoff_request+0x78>
   2ee30:	f382 8811 	msr	BASEPRI, r2
   2ee34:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   2ee38:	f06f 0404 	mvn.w	r4, #4
   2ee3c:	e7d0      	b.n	2ede0 <onoff_request+0x3a>
   2ee3e:	f382 8811 	msr	BASEPRI, r2
   2ee42:	f3bf 8f6f 	isb	sy
   2ee46:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2ee4a:	e7c9      	b.n	2ede0 <onoff_request+0x3a>
   2ee4c:	f382 8811 	msr	BASEPRI, r2
   2ee50:	f3bf 8f6f 	isb	sy
		if (notify) {
   2ee54:	e7c4      	b.n	2ede0 <onoff_request+0x3a>

0002ee56 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2ee56:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ee58:	f04f 0320 	mov.w	r3, #32
   2ee5c:	f3ef 8211 	mrs	r2, BASEPRI
   2ee60:	f383 8812 	msr	BASEPRI_MAX, r3
   2ee64:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2ee68:	8b04      	ldrh	r4, [r0, #24]
   2ee6a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2ee6e:	2c02      	cmp	r4, #2
   2ee70:	d00a      	beq.n	2ee88 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2ee72:	2c01      	cmp	r4, #1
   2ee74:	bf0c      	ite	eq
   2ee76:	f06f 0004 	mvneq.w	r0, #4
   2ee7a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   2ee7e:	f382 8811 	msr	BASEPRI, r2
   2ee82:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   2ee86:	e008      	b.n	2ee9a <onoff_release+0x44>
	mgr->refs -= 1U;
   2ee88:	8b43      	ldrh	r3, [r0, #26]
   2ee8a:	3b01      	subs	r3, #1
   2ee8c:	b29b      	uxth	r3, r3
   2ee8e:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2ee90:	b923      	cbnz	r3, 2ee9c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2ee92:	4621      	mov	r1, r4
   2ee94:	f7f8 faee 	bl	27474 <process_event>
	int rv = state;
   2ee98:	4620      	mov	r0, r4
}
   2ee9a:	bd10      	pop	{r4, pc}
	int rv = state;
   2ee9c:	4620      	mov	r0, r4
   2ee9e:	e7ee      	b.n	2ee7e <onoff_release+0x28>

0002eea0 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   2eea0:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   2eea2:	b1b0      	cbz	r0, 2eed2 <onoff_cancel+0x32>
   2eea4:	b1a9      	cbz	r1, 2eed2 <onoff_cancel+0x32>
	__asm__ volatile(
   2eea6:	f04f 0220 	mov.w	r2, #32
   2eeaa:	f3ef 8511 	mrs	r5, BASEPRI
   2eeae:	f382 8812 	msr	BASEPRI_MAX, r2
   2eeb2:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2eeb6:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   2eeb8:	f7ff fef7 	bl	2ecaa <sys_slist_find_and_remove>
   2eebc:	b130      	cbz	r0, 2eecc <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   2eebe:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   2eec2:	f385 8811 	msr	BASEPRI, r5
   2eec6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   2eeca:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   2eecc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2eed0:	e7f7      	b.n	2eec2 <onoff_cancel+0x22>
		return -EINVAL;
   2eed2:	f06f 0015 	mvn.w	r0, #21
   2eed6:	e7f8      	b.n	2eeca <onoff_cancel+0x2a>

0002eed8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2eed8:	4603      	mov	r3, r0
   2eeda:	b158      	cbz	r0, 2eef4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2eedc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2eede:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2eee2:	2a01      	cmp	r2, #1
   2eee4:	d003      	beq.n	2eeee <sys_notify_validate+0x16>
   2eee6:	2a03      	cmp	r2, #3
   2eee8:	d104      	bne.n	2eef4 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   2eeea:	6802      	ldr	r2, [r0, #0]
   2eeec:	b112      	cbz	r2, 2eef4 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   2eeee:	2000      	movs	r0, #0
   2eef0:	6098      	str	r0, [r3, #8]
   2eef2:	4770      	bx	lr
   2eef4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   2eef8:	4770      	bx	lr

0002eefa <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2eefa:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   2eefc:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   2eefe:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   2ef02:	2a03      	cmp	r2, #3
   2ef04:	f04f 0200 	mov.w	r2, #0
{
   2ef08:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2ef0a:	bf0c      	ite	eq
   2ef0c:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2ef0e:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2ef10:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2ef12:	4770      	bx	lr

0002ef14 <encode_uint>:
{
   2ef14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ef18:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   2ef1a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2ef1c:	2b6f      	cmp	r3, #111	; 0x6f
{
   2ef1e:	4680      	mov	r8, r0
   2ef20:	460f      	mov	r7, r1
   2ef22:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2ef24:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2ef28:	d029      	beq.n	2ef7e <encode_uint+0x6a>
   2ef2a:	d824      	bhi.n	2ef76 <encode_uint+0x62>
		return 10;
   2ef2c:	2b58      	cmp	r3, #88	; 0x58
   2ef2e:	bf0c      	ite	eq
   2ef30:	2610      	moveq	r6, #16
   2ef32:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   2ef34:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   2ef38:	4632      	mov	r2, r6
   2ef3a:	2300      	movs	r3, #0
   2ef3c:	4640      	mov	r0, r8
   2ef3e:	4639      	mov	r1, r7
   2ef40:	f7f8 f8de 	bl	27100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2ef44:	2a09      	cmp	r2, #9
   2ef46:	b2d4      	uxtb	r4, r2
   2ef48:	d81e      	bhi.n	2ef88 <encode_uint+0x74>
   2ef4a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2ef4c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2ef4e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2ef50:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2ef54:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2ef58:	d301      	bcc.n	2ef5e <encode_uint+0x4a>
   2ef5a:	45d1      	cmp	r9, sl
   2ef5c:	d811      	bhi.n	2ef82 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2ef5e:	782b      	ldrb	r3, [r5, #0]
   2ef60:	069b      	lsls	r3, r3, #26
   2ef62:	d505      	bpl.n	2ef70 <encode_uint+0x5c>
		if (radix == 8) {
   2ef64:	2e08      	cmp	r6, #8
   2ef66:	d115      	bne.n	2ef94 <encode_uint+0x80>
			conv->altform_0 = true;
   2ef68:	78ab      	ldrb	r3, [r5, #2]
   2ef6a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2ef6e:	70ab      	strb	r3, [r5, #2]
}
   2ef70:	4648      	mov	r0, r9
   2ef72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2ef76:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   2ef7a:	2b70      	cmp	r3, #112	; 0x70
   2ef7c:	e7d7      	b.n	2ef2e <encode_uint+0x1a>
	switch (specifier) {
   2ef7e:	2608      	movs	r6, #8
   2ef80:	e7d8      	b.n	2ef34 <encode_uint+0x20>
		value /= radix;
   2ef82:	4680      	mov	r8, r0
   2ef84:	460f      	mov	r7, r1
   2ef86:	e7d7      	b.n	2ef38 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2ef88:	f1bb 0f19 	cmp.w	fp, #25
   2ef8c:	bf94      	ite	ls
   2ef8e:	3437      	addls	r4, #55	; 0x37
   2ef90:	3457      	addhi	r4, #87	; 0x57
   2ef92:	e7db      	b.n	2ef4c <encode_uint+0x38>
		} else if (radix == 16) {
   2ef94:	2e10      	cmp	r6, #16
   2ef96:	d1eb      	bne.n	2ef70 <encode_uint+0x5c>
			conv->altform_0c = true;
   2ef98:	78ab      	ldrb	r3, [r5, #2]
   2ef9a:	f043 0310 	orr.w	r3, r3, #16
   2ef9e:	e7e6      	b.n	2ef6e <encode_uint+0x5a>

0002efa0 <outs>:
{
   2efa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2efa4:	4607      	mov	r7, r0
   2efa6:	4688      	mov	r8, r1
   2efa8:	4615      	mov	r5, r2
   2efaa:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2efac:	4614      	mov	r4, r2
   2efae:	42b4      	cmp	r4, r6
   2efb0:	d305      	bcc.n	2efbe <outs+0x1e>
   2efb2:	b10e      	cbz	r6, 2efb8 <outs+0x18>
	return (int)count;
   2efb4:	1b60      	subs	r0, r4, r5
   2efb6:	e008      	b.n	2efca <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2efb8:	7823      	ldrb	r3, [r4, #0]
   2efba:	2b00      	cmp	r3, #0
   2efbc:	d0fa      	beq.n	2efb4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2efbe:	f814 0b01 	ldrb.w	r0, [r4], #1
   2efc2:	4641      	mov	r1, r8
   2efc4:	47b8      	blx	r7
		if (rc < 0) {
   2efc6:	2800      	cmp	r0, #0
   2efc8:	daf1      	bge.n	2efae <outs+0xe>
}
   2efca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002efce <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2efce:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
   2efd0:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
   2efd2:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
   2efd4:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
   2efd6:	1baf      	subs	r7, r5, r6
{
   2efd8:	4604      	mov	r4, r0
   2efda:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
   2efdc:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
   2efde:	bf98      	it	ls
   2efe0:	1aff      	subls	r7, r7, r3
   2efe2:	eba5 0000 	sub.w	r0, r5, r0
{
   2efe6:	4694      	mov	ip, r2
		base += buf->size;
   2efe8:	bf98      	it	ls
   2efea:	18f6      	addls	r6, r6, r3
   2efec:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
   2efee:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
   2eff0:	6823      	ldr	r3, [r4, #0]
   2eff2:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
   2eff4:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2eff6:	442b      	add	r3, r5
	size = MIN(size, free_space);
   2eff8:	bf28      	it	cs
   2effa:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2effc:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
   2effe:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
   2f000:	4290      	cmp	r0, r2
   2f002:	bf28      	it	cs
   2f004:	4610      	movcs	r0, r2
	buf->put_head += size;
   2f006:	4403      	add	r3, r0
   2f008:	6063      	str	r3, [r4, #4]

	return size;
}
   2f00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f00c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   2f00c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2f010:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   2f012:	428a      	cmp	r2, r1
   2f014:	d30c      	bcc.n	2f030 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
   2f016:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
   2f018:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
   2f01a:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
   2f01c:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
   2f020:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   2f022:	428a      	cmp	r2, r1
   2f024:	d901      	bls.n	2f02a <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
   2f026:	2000      	movs	r0, #0
   2f028:	4770      	bx	lr
		buf->put_base += buf->size;
   2f02a:	4413      	add	r3, r2
   2f02c:	60c3      	str	r3, [r0, #12]
   2f02e:	e7fa      	b.n	2f026 <ring_buf_put_finish+0x1a>
		return -EINVAL;
   2f030:	f06f 0015 	mvn.w	r0, #21
}
   2f034:	4770      	bx	lr

0002f036 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   2f036:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f03a:	4680      	mov	r8, r0
   2f03c:	460e      	mov	r6, r1
   2f03e:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2f040:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2f042:	462a      	mov	r2, r5
   2f044:	a901      	add	r1, sp, #4
   2f046:	4640      	mov	r0, r8
   2f048:	f7ff ffc1 	bl	2efce <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   2f04c:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2f04e:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   2f050:	4602      	mov	r2, r0
   2f052:	9801      	ldr	r0, [sp, #4]
   2f054:	f000 f984 	bl	2f360 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   2f058:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   2f05a:	4427      	add	r7, r4
		data += partial_size;
   2f05c:	4426      	add	r6, r4
	} while (size && partial_size);
   2f05e:	d001      	beq.n	2f064 <ring_buf_put+0x2e>
   2f060:	2c00      	cmp	r4, #0
   2f062:	d1ee      	bne.n	2f042 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   2f064:	4639      	mov	r1, r7
   2f066:	4640      	mov	r0, r8
   2f068:	f7ff ffd0 	bl	2f00c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2f06c:	4638      	mov	r0, r7
   2f06e:	b002      	add	sp, #8
   2f070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f074 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2f074:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f076:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   2f078:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   2f07a:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
   2f07c:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   2f07e:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
   2f080:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   2f082:	42b8      	cmp	r0, r7
{
   2f084:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
   2f086:	bf98      	it	ls
   2f088:	1836      	addls	r6, r6, r0
   2f08a:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
   2f08e:	6823      	ldr	r3, [r4, #0]
   2f090:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
   2f094:	bf98      	it	ls
   2f096:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
   2f098:	442b      	add	r3, r5
	size = MIN(size, available_size);
   2f09a:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
   2f09c:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
   2f0a0:	bf28      	it	cs
   2f0a2:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
   2f0a4:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
   2f0a6:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
   2f0a8:	4290      	cmp	r0, r2
   2f0aa:	bf28      	it	cs
   2f0ac:	4610      	movcs	r0, r2
	buf->get_head += size;
   2f0ae:	4403      	add	r3, r0
   2f0b0:	6123      	str	r3, [r4, #16]

	return size;
}
   2f0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f0b4 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   2f0b4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   2f0b8:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   2f0ba:	428a      	cmp	r2, r1
   2f0bc:	d30c      	bcc.n	2f0d8 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
   2f0be:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
   2f0c0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
   2f0c4:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
   2f0c8:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   2f0ca:	428a      	cmp	r2, r1
   2f0cc:	d901      	bls.n	2f0d2 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
   2f0ce:	2000      	movs	r0, #0
   2f0d0:	4770      	bx	lr
		buf->get_base += buf->size;
   2f0d2:	4413      	add	r3, r2
   2f0d4:	6183      	str	r3, [r0, #24]
   2f0d6:	e7fa      	b.n	2f0ce <ring_buf_get_finish+0x1a>
		return -EINVAL;
   2f0d8:	f06f 0015 	mvn.w	r0, #21
}
   2f0dc:	4770      	bx	lr

0002f0de <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   2f0de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f0e2:	4680      	mov	r8, r0
   2f0e4:	460d      	mov	r5, r1
   2f0e6:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2f0e8:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   2f0ea:	4632      	mov	r2, r6
   2f0ec:	a901      	add	r1, sp, #4
   2f0ee:	4640      	mov	r0, r8
   2f0f0:	f7ff ffc0 	bl	2f074 <ring_buf_get_claim>
   2f0f4:	4604      	mov	r4, r0
		if (data) {
   2f0f6:	b12d      	cbz	r5, 2f104 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   2f0f8:	4602      	mov	r2, r0
   2f0fa:	9901      	ldr	r1, [sp, #4]
   2f0fc:	4628      	mov	r0, r5
   2f0fe:	f000 f92f 	bl	2f360 <memcpy>
			data += partial_size;
   2f102:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   2f104:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   2f106:	4427      	add	r7, r4
	} while (size && partial_size);
   2f108:	d001      	beq.n	2f10e <ring_buf_get+0x30>
   2f10a:	2c00      	cmp	r4, #0
   2f10c:	d1ed      	bne.n	2f0ea <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   2f10e:	4639      	mov	r1, r7
   2f110:	4640      	mov	r0, r8
   2f112:	f7ff ffcf 	bl	2f0b4 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2f116:	4638      	mov	r0, r7
   2f118:	b002      	add	sp, #8
   2f11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f11e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2f11e:	4770      	bx	lr

0002f120 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
   2f120:	f010 0f70 	tst.w	r0, #112	; 0x70
   2f124:	d108      	bne.n	2f138 <get_ep_bm_from_addr+0x18>
	ep_idx = ep & (~USB_EP_DIR_IN);
   2f126:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
   2f12a:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
   2f12e:	bf18      	it	ne
   2f130:	3310      	addne	r3, #16
   2f132:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
   2f134:	4098      	lsls	r0, r3
   2f136:	4770      	bx	lr
	uint32_t ep_bm = 0;
   2f138:	2000      	movs	r0, #0
}
   2f13a:	4770      	bx	lr

0002f13c <usb_write>:
{
   2f13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f140:	4606      	mov	r6, r0
   2f142:	460f      	mov	r7, r1
   2f144:	4690      	mov	r8, r2
   2f146:	4699      	mov	r9, r3
   2f148:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   2f14a:	464b      	mov	r3, r9
   2f14c:	4642      	mov	r2, r8
   2f14e:	4639      	mov	r1, r7
   2f150:	4630      	mov	r0, r6
   2f152:	f7fb f9ff 	bl	2a554 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   2f156:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   2f15a:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   2f15c:	d103      	bne.n	2f166 <usb_write+0x2a>
	z_impl_k_yield();
   2f15e:	f7fe fec5 	bl	2deec <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   2f162:	3d01      	subs	r5, #1
   2f164:	d1f1      	bne.n	2f14a <usb_write+0xe>
}
   2f166:	4620      	mov	r0, r4
   2f168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002f16c <usb_get_dev_data_by_cfg>:
	return list->head;
   2f16c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2f16e:	b140      	cbz	r0, 2f182 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   2f170:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   2f174:	685b      	ldr	r3, [r3, #4]
   2f176:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2f178:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   2f17c:	d001      	beq.n	2f182 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   2f17e:	6840      	ldr	r0, [r0, #4]
   2f180:	e7f5      	b.n	2f16e <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   2f182:	4770      	bx	lr

0002f184 <usb_get_dev_data_by_iface>:
	return list->head;
   2f184:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2f186:	b150      	cbz	r0, 2f19e <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2f188:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   2f18c:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   2f18e:	685b      	ldr	r3, [r3, #4]
   2f190:	789b      	ldrb	r3, [r3, #2]
   2f192:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2f194:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   2f198:	d001      	beq.n	2f19e <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   2f19a:	6840      	ldr	r0, [r0, #4]
   2f19c:	e7f3      	b.n	2f186 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   2f19e:	4770      	bx	lr

0002f1a0 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   2f1a0:	b530      	push	{r4, r5, lr}
	return list->head;
   2f1a2:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2f1a4:	b188      	cbz	r0, 2f1ca <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2f1a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2f1aa:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   2f1ac:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2f1ae:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2f1b0:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2f1b2:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   2f1b4:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2f1b6:	b2dc      	uxtb	r4, r3
   2f1b8:	42a5      	cmp	r5, r4
   2f1ba:	d801      	bhi.n	2f1c0 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   2f1bc:	6840      	ldr	r0, [r0, #4]
   2f1be:	e7f1      	b.n	2f1a4 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   2f1c0:	3301      	adds	r3, #1
   2f1c2:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   2f1c6:	428c      	cmp	r4, r1
   2f1c8:	d1f5      	bne.n	2f1b6 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   2f1ca:	bd30      	pop	{r4, r5, pc}

0002f1cc <usb_transfer_is_busy>:
{
   2f1cc:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   2f1ce:	f7f9 fcbd 	bl	28b4c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   2f1d2:	b128      	cbz	r0, 2f1e0 <usb_transfer_is_busy+0x14>
   2f1d4:	6840      	ldr	r0, [r0, #4]
   2f1d6:	f110 0f10 	cmn.w	r0, #16
   2f1da:	bf14      	ite	ne
   2f1dc:	2000      	movne	r0, #0
   2f1de:	2001      	moveq	r0, #1
}
   2f1e0:	bd08      	pop	{r3, pc}

0002f1e2 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2f1e2:	1c4b      	adds	r3, r1, #1
   2f1e4:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   2f1e6:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   2f1e8:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2f1ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   2f1ee:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   2f1f0:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   2f1f4:	4770      	bx	lr

0002f1f6 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   2f1f6:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   2f1fa:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   2f1fe:	4718      	bx	r3

0002f200 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2f200:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   2f202:	2200      	movs	r2, #0
   2f204:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   2f208:	4770      	bx	lr

0002f20a <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2f20a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   2f20c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   2f210:	b108      	cbz	r0, 2f216 <cdc_acm_irq_tx_ready+0xc>
   2f212:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
   2f216:	4770      	bx	lr

0002f218 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2f218:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   2f21a:	2200      	movs	r2, #0
   2f21c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
   2f220:	4770      	bx	lr

0002f222 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   2f222:	6903      	ldr	r3, [r0, #16]
}
   2f224:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
   2f228:	4770      	bx	lr

0002f22a <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2f22a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   2f22c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2f230:	b112      	cbz	r2, 2f238 <cdc_acm_irq_is_pending+0xe>
   2f232:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   2f236:	b92a      	cbnz	r2, 2f244 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   2f238:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
   2f23c:	b118      	cbz	r0, 2f246 <cdc_acm_irq_is_pending+0x1c>
   2f23e:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
   2f242:	4770      	bx	lr
		return 1;
   2f244:	2001      	movs	r0, #1
}
   2f246:	4770      	bx	lr

0002f248 <cdc_acm_irq_update>:
}
   2f248:	2001      	movs	r0, #1
   2f24a:	4770      	bx	lr

0002f24c <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2f24c:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   2f24e:	e9c3 1200 	strd	r1, r2, [r3]
}
   2f252:	4770      	bx	lr

0002f254 <cdc_acm_configure>:
}
   2f254:	2000      	movs	r0, #0
   2f256:	4770      	bx	lr

0002f258 <cdc_acm_config_get>:
{
   2f258:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2f25a:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   2f25c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   2f260:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
   2f262:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   2f266:	b16a      	cbz	r2, 2f284 <cdc_acm_config_get+0x2c>
   2f268:	2a01      	cmp	r2, #1
   2f26a:	bf0c      	ite	eq
   2f26c:	2202      	moveq	r2, #2
   2f26e:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
   2f270:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
   2f272:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
   2f276:	1e50      	subs	r0, r2, #1
   2f278:	2803      	cmp	r0, #3
   2f27a:	d805      	bhi.n	2f288 <cdc_acm_config_get+0x30>
   2f27c:	e8df f000 	tbb	[pc, r0]
   2f280:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
   2f284:	2201      	movs	r2, #1
   2f286:	e7f3      	b.n	2f270 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
   2f288:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
   2f28a:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
   2f28c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2f290:	2b06      	cmp	r3, #6
   2f292:	d009      	beq.n	2f2a8 <cdc_acm_config_get+0x50>
   2f294:	2b07      	cmp	r3, #7
   2f296:	d009      	beq.n	2f2ac <cdc_acm_config_get+0x54>
   2f298:	2b05      	cmp	r3, #5
   2f29a:	bf0c      	ite	eq
   2f29c:	2300      	moveq	r3, #0
   2f29e:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   2f2a0:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
   2f2a2:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   2f2a4:	71c8      	strb	r0, [r1, #7]
}
   2f2a6:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
   2f2a8:	2301      	movs	r3, #1
   2f2aa:	e7f9      	b.n	2f2a0 <cdc_acm_config_get+0x48>
   2f2ac:	2302      	movs	r3, #2
   2f2ae:	e7f7      	b.n	2f2a0 <cdc_acm_config_get+0x48>

0002f2b0 <cdc_acm_fifo_read>:
{
   2f2b0:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2f2b2:	6904      	ldr	r4, [r0, #16]
{
   2f2b4:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2f2b6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   2f2ba:	f7ff ff10 	bl	2f0de <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   2f2be:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2f2c2:	691a      	ldr	r2, [r3, #16]
   2f2c4:	6899      	ldr	r1, [r3, #8]
   2f2c6:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
   2f2c8:	bf04      	itt	eq
   2f2ca:	2200      	moveq	r2, #0
   2f2cc:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
   2f2d0:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2f2d4:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
   2f2d6:	b19a      	cbz	r2, 2f300 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
   2f2d8:	685a      	ldr	r2, [r3, #4]
   2f2da:	6959      	ldr	r1, [r3, #20]
   2f2dc:	69db      	ldr	r3, [r3, #28]
   2f2de:	1a52      	subs	r2, r2, r1
   2f2e0:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
   2f2e2:	2b3f      	cmp	r3, #63	; 0x3f
   2f2e4:	d90c      	bls.n	2f300 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
   2f2e6:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   2f2ea:	b133      	cbz	r3, 2f2fa <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
   2f2ec:	686b      	ldr	r3, [r5, #4]
   2f2ee:	6a1b      	ldr	r3, [r3, #32]
   2f2f0:	4622      	mov	r2, r4
   2f2f2:	7b18      	ldrb	r0, [r3, #12]
   2f2f4:	2100      	movs	r1, #0
   2f2f6:	f7f9 fef7 	bl	290e8 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
   2f2fa:	2300      	movs	r3, #0
   2f2fc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   2f300:	4630      	mov	r0, r6
   2f302:	bd70      	pop	{r4, r5, r6, pc}

0002f304 <cdc_acm_poll_in>:
{
   2f304:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   2f306:	2201      	movs	r2, #1
   2f308:	f7ff ffd2 	bl	2f2b0 <cdc_acm_fifo_read>
}
   2f30c:	3801      	subs	r0, #1
   2f30e:	bf18      	it	ne
   2f310:	f04f 30ff 	movne.w	r0, #4294967295
   2f314:	bd08      	pop	{r3, pc}

0002f316 <abort_function>:
{
   2f316:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2f318:	2000      	movs	r0, #0
   2f31a:	f7f8 fd6b 	bl	27df4 <sys_reboot>

0002f31e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   2f31e:	f000 bda9 	b.w	2fe74 <z_fatal_error>

0002f322 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2f322:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   2f324:	6800      	ldr	r0, [r0, #0]
   2f326:	f000 bda5 	b.w	2fe74 <z_fatal_error>

0002f32a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2f32a:	2100      	movs	r1, #0
   2f32c:	2001      	movs	r0, #1
   2f32e:	f7ff bff6 	b.w	2f31e <z_arm_fatal_error>

0002f332 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2f332:	b508      	push	{r3, lr}
	handler();
   2f334:	f7fa f8c0 	bl	294b8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2f338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2f33c:	f7fa b998 	b.w	29670 <z_arm_exc_exit>

0002f340 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2f340:	4603      	mov	r3, r0
	size_t n = 0;
   2f342:	2000      	movs	r0, #0

	while (*s != '\0') {
   2f344:	5c1a      	ldrb	r2, [r3, r0]
   2f346:	b902      	cbnz	r2, 2f34a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2f348:	4770      	bx	lr
		n++;
   2f34a:	3001      	adds	r0, #1
   2f34c:	e7fa      	b.n	2f344 <strlen+0x4>

0002f34e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2f34e:	4603      	mov	r3, r0
	size_t n = 0;
   2f350:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2f352:	5c1a      	ldrb	r2, [r3, r0]
   2f354:	b10a      	cbz	r2, 2f35a <strnlen+0xc>
   2f356:	4288      	cmp	r0, r1
   2f358:	d100      	bne.n	2f35c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2f35a:	4770      	bx	lr
		n++;
   2f35c:	3001      	adds	r0, #1
   2f35e:	e7f8      	b.n	2f352 <strnlen+0x4>

0002f360 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2f360:	b510      	push	{r4, lr}
   2f362:	1e43      	subs	r3, r0, #1
   2f364:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2f366:	4291      	cmp	r1, r2
   2f368:	d100      	bne.n	2f36c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2f36a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2f36c:	f811 4b01 	ldrb.w	r4, [r1], #1
   2f370:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2f374:	e7f7      	b.n	2f366 <memcpy+0x6>

0002f376 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2f376:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2f378:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2f37a:	4603      	mov	r3, r0
	while (n > 0) {
   2f37c:	4293      	cmp	r3, r2
   2f37e:	d100      	bne.n	2f382 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2f380:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2f382:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2f386:	e7f9      	b.n	2f37c <memset+0x6>

0002f388 <_stdout_hook_default>:
}
   2f388:	f04f 30ff 	mov.w	r0, #4294967295
   2f38c:	4770      	bx	lr

0002f38e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2f38e:	2806      	cmp	r0, #6
   2f390:	d108      	bne.n	2f3a4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2f392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2f396:	2201      	movs	r2, #1
   2f398:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2f39c:	f3bf 8f4f 	dsb	sy
        __WFE();
   2f3a0:	bf20      	wfe
    while (true)
   2f3a2:	e7fd      	b.n	2f3a0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2f3a4:	4770      	bx	lr

0002f3a6 <pm_state_exit_post_ops>:
   2f3a6:	2300      	movs	r3, #0
   2f3a8:	f383 8811 	msr	BASEPRI, r3
   2f3ac:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2f3b0:	4770      	bx	lr

0002f3b2 <ep_ctx_reset>:
{
   2f3b2:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   2f3b4:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2f3b6:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   2f3ba:	2300      	movs	r3, #0
   2f3bc:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   2f3be:	7f83      	ldrb	r3, [r0, #30]
{
   2f3c0:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   2f3c2:	b113      	cbz	r3, 2f3ca <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2f3c4:	7a40      	ldrb	r0, [r0, #9]
   2f3c6:	f000 fd47 	bl	2fe58 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   2f3ca:	2301      	movs	r3, #1
   2f3cc:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2f3ce:	2300      	movs	r3, #0
   2f3d0:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   2f3d2:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   2f3d4:	77a3      	strb	r3, [r4, #30]
}
   2f3d6:	bd10      	pop	{r4, pc}

0002f3d8 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2f3d8:	f7fe b8be 	b.w	2d558 <z_impl_k_mutex_lock>

0002f3dc <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2f3dc:	f7fe b936 	b.w	2d64c <z_impl_k_mutex_unlock>

0002f3e0 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2f3e0:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   2f3e2:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2f3e4:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   2f3e8:	b921      	cbnz	r1, 2f3f4 <usb_dc_ep_check_cap+0x14>
   2f3ea:	3a00      	subs	r2, #0
   2f3ec:	bf18      	it	ne
   2f3ee:	2201      	movne	r2, #1
   2f3f0:	4250      	negs	r0, r2
   2f3f2:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   2f3f4:	2a08      	cmp	r2, #8
   2f3f6:	d806      	bhi.n	2f406 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   2f3f8:	2901      	cmp	r1, #1
   2f3fa:	d107      	bne.n	2f40c <usb_dc_ep_check_cap+0x2c>
   2f3fc:	f083 0008 	eor.w	r0, r3, #8
   2f400:	f340 00c0 	sbfx	r0, r0, #3, #1
   2f404:	4770      	bx	lr
		return -1;
   2f406:	f04f 30ff 	mov.w	r0, #4294967295
   2f40a:	4770      	bx	lr
	return 0;
   2f40c:	2000      	movs	r0, #0
}
   2f40e:	4770      	bx	lr

0002f410 <usb_dc_ep_disable>:
{
   2f410:	b538      	push	{r3, r4, r5, lr}
   2f412:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   2f414:	f7fa fc38 	bl	29c88 <endpoint_ctx>
	if (!ep_ctx) {
   2f418:	4605      	mov	r5, r0
   2f41a:	b160      	cbz	r0, 2f436 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
   2f41c:	7a03      	ldrb	r3, [r0, #8]
   2f41e:	b16b      	cbz	r3, 2f43c <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   2f420:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   2f422:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   2f424:	f7fd fe02 	bl	2d02c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   2f428:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   2f42a:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   2f42c:	f7ff ffc1 	bl	2f3b2 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   2f430:	722c      	strb	r4, [r5, #8]
	return 0;
   2f432:	4620      	mov	r0, r4
}
   2f434:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2f436:	f06f 0015 	mvn.w	r0, #21
   2f43a:	e7fb      	b.n	2f434 <usb_dc_ep_disable+0x24>
		return -EALREADY;
   2f43c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f440:	e7f8      	b.n	2f434 <usb_dc_ep_disable+0x24>

0002f442 <usb_dc_ep_read>:
{
   2f442:	b570      	push	{r4, r5, r6, lr}
   2f444:	4604      	mov	r4, r0
   2f446:	460e      	mov	r6, r1
   2f448:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2f44a:	f7fb f8ff 	bl	2a64c <usb_dc_ep_read_wait>
	if (ret) {
   2f44e:	b930      	cbnz	r0, 2f45e <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   2f450:	b906      	cbnz	r6, 2f454 <usb_dc_ep_read+0x12>
   2f452:	b125      	cbz	r5, 2f45e <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   2f454:	4620      	mov	r0, r4
}
   2f456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   2f45a:	f7fb b93f 	b.w	2a6dc <usb_dc_ep_read_continue>
}
   2f45e:	bd70      	pop	{r4, r5, r6, pc}

0002f460 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2f460:	6903      	ldr	r3, [r0, #16]
   2f462:	b2c9      	uxtb	r1, r1
   2f464:	220c      	movs	r2, #12
   2f466:	fb01 3302 	mla	r3, r1, r2, r3
   2f46a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2f46c:	f000 0007 	and.w	r0, r0, #7
   2f470:	4770      	bx	lr

0002f472 <set_on_state>:
	__asm__ volatile(
   2f472:	f04f 0320 	mov.w	r3, #32
   2f476:	f3ef 8211 	mrs	r2, BASEPRI
   2f47a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f47e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2f482:	6803      	ldr	r3, [r0, #0]
   2f484:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f488:	f043 0302 	orr.w	r3, r3, #2
   2f48c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2f48e:	f382 8811 	msr	BASEPRI, r2
   2f492:	f3bf 8f6f 	isb	sy
}
   2f496:	4770      	bx	lr

0002f498 <stop>:
{
   2f498:	b570      	push	{r4, r5, r6, lr}
   2f49a:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2f49c:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2f49e:	f04f 0420 	mov.w	r4, #32
   2f4a2:	f3ef 8511 	mrs	r5, BASEPRI
   2f4a6:	f384 8812 	msr	BASEPRI_MAX, r4
   2f4aa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f4ae:	260c      	movs	r6, #12
   2f4b0:	fb06 3401 	mla	r4, r6, r1, r3
   2f4b4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2f4b6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2f4ba:	d008      	beq.n	2f4ce <stop+0x36>
   2f4bc:	42a2      	cmp	r2, r4
   2f4be:	d006      	beq.n	2f4ce <stop+0x36>
	__asm__ volatile(
   2f4c0:	f385 8811 	msr	BASEPRI, r5
   2f4c4:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2f4c8:	f04f 30ff 	mov.w	r0, #4294967295
}
   2f4cc:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2f4ce:	fb06 3301 	mla	r3, r6, r1, r3
   2f4d2:	2201      	movs	r2, #1
   2f4d4:	641a      	str	r2, [r3, #64]	; 0x40
   2f4d6:	f385 8811 	msr	BASEPRI, r5
   2f4da:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2f4de:	6843      	ldr	r3, [r0, #4]
   2f4e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   2f4e4:	685b      	ldr	r3, [r3, #4]
   2f4e6:	4798      	blx	r3
	return 0;
   2f4e8:	2000      	movs	r0, #0
   2f4ea:	e7ef      	b.n	2f4cc <stop+0x34>

0002f4ec <api_stop>:
	return stop(dev, subsys, CTX_API);
   2f4ec:	2280      	movs	r2, #128	; 0x80
   2f4ee:	f7ff bfd3 	b.w	2f498 <stop>

0002f4f2 <async_start>:
{
   2f4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f4f4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2f4f6:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2f4f8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2f4fa:	f04f 0520 	mov.w	r5, #32
   2f4fe:	f3ef 8611 	mrs	r6, BASEPRI
   2f502:	f385 8812 	msr	BASEPRI_MAX, r5
   2f506:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f50a:	250c      	movs	r5, #12
   2f50c:	fb05 4401 	mla	r4, r5, r1, r4
   2f510:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2f512:	f005 0c07 	and.w	ip, r5, #7
   2f516:	f1bc 0f01 	cmp.w	ip, #1
   2f51a:	d10c      	bne.n	2f536 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2f51c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2f51e:	f386 8811 	msr	BASEPRI, r6
   2f522:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2f526:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2f52a:	6843      	ldr	r3, [r0, #4]
   2f52c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   2f530:	4798      	blx	r3
	return 0;
   2f532:	2000      	movs	r0, #0
}
   2f534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2f536:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2f53a:	42af      	cmp	r7, r5
   2f53c:	f386 8811 	msr	BASEPRI, r6
   2f540:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2f544:	bf0c      	ite	eq
   2f546:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2f54a:	f04f 30ff 	movne.w	r0, #4294967295
   2f54e:	e7f1      	b.n	2f534 <async_start+0x42>

0002f550 <api_start>:
{
   2f550:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2f552:	2480      	movs	r4, #128	; 0x80
   2f554:	9400      	str	r4, [sp, #0]
   2f556:	f7ff ffcc 	bl	2f4f2 <async_start>
}
   2f55a:	b002      	add	sp, #8
   2f55c:	bd10      	pop	{r4, pc}

0002f55e <onoff_started_callback>:
{
   2f55e:	b410      	push	{r4}
	return &data->mgr[type];
   2f560:	6900      	ldr	r0, [r0, #16]
   2f562:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2f564:	241c      	movs	r4, #28
   2f566:	fb03 0004 	mla	r0, r3, r4, r0
   2f56a:	2100      	movs	r1, #0
}
   2f56c:	bc10      	pop	{r4}
	notify(mgr, 0);
   2f56e:	4710      	bx	r2

0002f570 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2f570:	2000      	movs	r0, #0
   2f572:	f000 bb13 	b.w	2fb9c <nrfx_clock_start>

0002f576 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2f576:	2000      	movs	r0, #0
   2f578:	f000 bb4c 	b.w	2fc14 <nrfx_clock_stop>

0002f57c <blocking_start_callback>:
{
   2f57c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2f57e:	f7fe b8d5 	b.w	2d72c <z_impl_k_sem_give>

0002f582 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f582:	6843      	ldr	r3, [r0, #4]
   2f584:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2f586:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2f58a:	600b      	str	r3, [r1, #0]
}
   2f58c:	2000      	movs	r0, #0
   2f58e:	4770      	bx	lr

0002f590 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f590:	6843      	ldr	r3, [r0, #4]
   2f592:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2f594:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2f598:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2f59c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2f5a0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2f5a4:	2000      	movs	r0, #0
   2f5a6:	4770      	bx	lr

0002f5a8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f5a8:	6843      	ldr	r3, [r0, #4]
   2f5aa:	685b      	ldr	r3, [r3, #4]
}
   2f5ac:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2f5ae:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2f5b2:	4770      	bx	lr

0002f5b4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f5b4:	6843      	ldr	r3, [r0, #4]
   2f5b6:	685b      	ldr	r3, [r3, #4]
}
   2f5b8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2f5ba:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2f5be:	4770      	bx	lr

0002f5c0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f5c0:	6843      	ldr	r3, [r0, #4]
   2f5c2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2f5c4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2f5c8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2f5cc:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2f5ce:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2f5d2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2f5d6:	2000      	movs	r0, #0
   2f5d8:	4770      	bx	lr

0002f5da <gpio_nrfx_manage_callback>:
{
   2f5da:	b510      	push	{r4, lr}
	return port->data;
   2f5dc:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2f5de:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2f5e0:	b1f8      	cbz	r0, 2f622 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f5e2:	4288      	cmp	r0, r1
   2f5e4:	d119      	bne.n	2f61a <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2f5e6:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2f5e8:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   2f5ea:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2f5ec:	42a1      	cmp	r1, r4
   2f5ee:	d100      	bne.n	2f5f2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2f5f0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2f5f2:	2000      	movs	r0, #0
   2f5f4:	6008      	str	r0, [r1, #0]
	if (set) {
   2f5f6:	b12a      	cbz	r2, 2f604 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2f5f8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2f5fa:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f5fc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2f5fe:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f600:	b902      	cbnz	r2, 2f604 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2f602:	6099      	str	r1, [r3, #8]
	return 0;
   2f604:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2f606:	e010      	b.n	2f62a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f608:	4281      	cmp	r1, r0
   2f60a:	d106      	bne.n	2f61a <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2f60c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2f60e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f610:	6898      	ldr	r0, [r3, #8]
   2f612:	4281      	cmp	r1, r0
   2f614:	d1ed      	bne.n	2f5f2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2f616:	609c      	str	r4, [r3, #8]
}
   2f618:	e7eb      	b.n	2f5f2 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2f61a:	4604      	mov	r4, r0
   2f61c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f61e:	2800      	cmp	r0, #0
   2f620:	d1f2      	bne.n	2f608 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2f622:	2a00      	cmp	r2, #0
   2f624:	d1e8      	bne.n	2f5f8 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   2f626:	f06f 0015 	mvn.w	r0, #21
}
   2f62a:	bd10      	pop	{r4, pc}

0002f62c <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2f62c:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2f62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
   2f632:	2908      	cmp	r1, #8
   2f634:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2f636:	6e52      	ldr	r2, [r2, #100]	; 0x64
   2f638:	bf28      	it	cs
   2f63a:	2108      	movcs	r1, #8
   2f63c:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   2f63e:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   2f640:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
   2f642:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   2f644:	460a      	mov	r2, r1
   2f646:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   2f648:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   2f64a:	f7ff fe89 	bl	2f360 <memcpy>

	return length;
}
   2f64e:	4620      	mov	r0, r4
   2f650:	b002      	add	sp, #8
   2f652:	bd10      	pop	{r4, pc}

0002f654 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2f654:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2f656:	6843      	ldr	r3, [r0, #4]
   2f658:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2f65a:	7a05      	ldrb	r5, [r0, #8]
   2f65c:	6844      	ldr	r4, [r0, #4]
   2f65e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2f662:	42a3      	cmp	r3, r4
   2f664:	d302      	bcc.n	2f66c <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2f666:	f06f 0001 	mvn.w	r0, #1
}
   2f66a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2f66c:	795c      	ldrb	r4, [r3, #5]
   2f66e:	428c      	cmp	r4, r1
   2f670:	d001      	beq.n	2f676 <pinctrl_lookup_state+0x22>
		(*state)++;
   2f672:	3308      	adds	r3, #8
   2f674:	e7f0      	b.n	2f658 <pinctrl_lookup_state+0x4>
			return 0;
   2f676:	2000      	movs	r0, #0
   2f678:	e7f7      	b.n	2f66a <pinctrl_lookup_state+0x16>

0002f67a <regulator_common_data_init>:
 */

#include <zephyr/drivers/regulator.h>

void regulator_common_data_init(const struct device *dev)
{
   2f67a:	b510      	push	{r4, lr}
	struct regulator_common_data *data = dev->data;
   2f67c:	6904      	ldr	r4, [r0, #16]
	return z_impl_k_mutex_init(mutex);
   2f67e:	4620      	mov	r0, r4
   2f680:	f000 fc7e 	bl	2ff80 <z_impl_k_mutex_init>

	(void)k_mutex_init(&data->lock);
	data->refcnt = 0;
   2f684:	2300      	movs	r3, #0
   2f686:	6163      	str	r3, [r4, #20]
}
   2f688:	bd10      	pop	{r4, pc}

0002f68a <regulator_is_enabled>:

	return ret;
}

bool regulator_is_enabled(const struct device *dev)
{
   2f68a:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_common_config *config = dev->config;
	struct regulator_common_data *data = dev->data;
	bool enabled;

	if ((config->flags & REGULATOR_ALWAYS_ON) != 0U) {
   2f68c:	6843      	ldr	r3, [r0, #4]
   2f68e:	7e9b      	ldrb	r3, [r3, #26]
   2f690:	07db      	lsls	r3, r3, #31
   2f692:	d410      	bmi.n	2f6b6 <regulator_is_enabled+0x2c>
	struct regulator_common_data *data = dev->data;
   2f694:	6905      	ldr	r5, [r0, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
   2f696:	f04f 32ff 	mov.w	r2, #4294967295
   2f69a:	f04f 33ff 	mov.w	r3, #4294967295
   2f69e:	4628      	mov	r0, r5
   2f6a0:	f7fd ff5a 	bl	2d558 <z_impl_k_mutex_lock>
		enabled = true;
	} else {
		(void)k_mutex_lock(&data->lock, K_FOREVER);
		enabled = data->refcnt != 0;
   2f6a4:	696c      	ldr	r4, [r5, #20]
   2f6a6:	3c00      	subs	r4, #0
   2f6a8:	bf18      	it	ne
   2f6aa:	2401      	movne	r4, #1
	return z_impl_k_mutex_unlock(mutex);
   2f6ac:	4628      	mov	r0, r5
   2f6ae:	f7fd ffcd 	bl	2d64c <z_impl_k_mutex_unlock>
		k_mutex_unlock(&data->lock);
	}

	return enabled;
}
   2f6b2:	4620      	mov	r0, r4
   2f6b4:	bd38      	pop	{r3, r4, r5, pc}
		enabled = true;
   2f6b6:	2401      	movs	r4, #1
   2f6b8:	e7fb      	b.n	2f6b2 <regulator_is_enabled+0x28>

0002f6ba <regulator_set_voltage>:
	return false;
}

int regulator_set_voltage(const struct device *dev, int32_t min_uv,
			  int32_t max_uv)
{
   2f6ba:	b4f0      	push	{r4, r5, r6, r7}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_voltage == NULL) {
   2f6bc:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   2f6c0:	691b      	ldr	r3, [r3, #16]
   2f6c2:	b13b      	cbz	r3, 2f6d4 <regulator_set_voltage+0x1a>
		return -ENOSYS;
	}

	/* voltage may not be allowed, even if supported */
	if ((min_uv > config->max_uv) || (max_uv < config->min_uv)) {
   2f6c4:	6877      	ldr	r7, [r6, #4]
   2f6c6:	428f      	cmp	r7, r1
   2f6c8:	db08      	blt.n	2f6dc <regulator_set_voltage+0x22>
   2f6ca:	6835      	ldr	r5, [r6, #0]
   2f6cc:	4295      	cmp	r5, r2
   2f6ce:	dc05      	bgt.n	2f6dc <regulator_set_voltage+0x22>
		return -EINVAL;
	}

	return api->set_voltage(dev, min_uv, max_uv);
}
   2f6d0:	bcf0      	pop	{r4, r5, r6, r7}
	return api->set_voltage(dev, min_uv, max_uv);
   2f6d2:	4718      	bx	r3
		return -ENOSYS;
   2f6d4:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   2f6d8:	bcf0      	pop	{r4, r5, r6, r7}
   2f6da:	4770      	bx	lr
		return -EINVAL;
   2f6dc:	f06f 0015 	mvn.w	r0, #21
   2f6e0:	e7fa      	b.n	2f6d8 <regulator_set_voltage+0x1e>

0002f6e2 <regulator_set_mode>:

	return api->set_current_limit(dev, min_ua, max_ua);
}

int regulator_set_mode(const struct device *dev, regulator_mode_t mode)
{
   2f6e2:	b470      	push	{r4, r5, r6}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_mode == NULL) {
   2f6e4:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
   2f6e8:	6a15      	ldr	r5, [r2, #32]
{
   2f6ea:	4603      	mov	r3, r0
   2f6ec:	460c      	mov	r4, r1
	if (api->set_mode == NULL) {
   2f6ee:	b19d      	cbz	r5, 2f718 <regulator_set_mode+0x36>
		return -ENOSYS;
	}

	/* no mode restrictions */
	if (config->allowed_modes_cnt == 0U) {
   2f6f0:	7e32      	ldrb	r2, [r6, #24]
   2f6f2:	b912      	cbnz	r2, 2f6fa <regulator_set_mode+0x18>
	}

	/* check if mode is allowed, apply if it is */
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
		if (mode == config->allowed_modes[i]) {
			return api->set_mode(dev, mode);
   2f6f4:	462b      	mov	r3, r5
		}
	}

	return -ENOTSUP;
}
   2f6f6:	bc70      	pop	{r4, r5, r6}
			return api->set_mode(dev, mode);
   2f6f8:	4718      	bx	r3
   2f6fa:	6970      	ldr	r0, [r6, #20]
   2f6fc:	4402      	add	r2, r0
		if (mode == config->allowed_modes[i]) {
   2f6fe:	f810 1b01 	ldrb.w	r1, [r0], #1
   2f702:	42a1      	cmp	r1, r4
   2f704:	d102      	bne.n	2f70c <regulator_set_mode+0x2a>
			return api->set_mode(dev, mode);
   2f706:	4621      	mov	r1, r4
   2f708:	4618      	mov	r0, r3
   2f70a:	e7f3      	b.n	2f6f4 <regulator_set_mode+0x12>
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
   2f70c:	4290      	cmp	r0, r2
   2f70e:	d1f6      	bne.n	2f6fe <regulator_set_mode+0x1c>
	return -ENOTSUP;
   2f710:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2f714:	bc70      	pop	{r4, r5, r6}
   2f716:	4770      	bx	lr
		return -ENOSYS;
   2f718:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2f71c:	e7fa      	b.n	2f714 <regulator_set_mode+0x32>

0002f71e <regulator_common_init>:
{
   2f71e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct regulator_common_config *config = dev->config;
   2f722:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
{
   2f726:	460e      	mov	r6, r1
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   2f728:	f898 1019 	ldrb.w	r1, [r8, #25]
	struct regulator_common_data *data = dev->data;
   2f72c:	6905      	ldr	r5, [r0, #16]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   2f72e:	29ff      	cmp	r1, #255	; 0xff
{
   2f730:	4604      	mov	r4, r0
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   2f732:	d123      	bne.n	2f77c <regulator_common_init+0x5e>
	if (config->init_uv > INT32_MIN) {
   2f734:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2f738:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   2f73c:	d005      	beq.n	2f74a <regulator_common_init+0x2c>
		ret = regulator_set_voltage(dev, config->init_uv, config->init_uv);
   2f73e:	4611      	mov	r1, r2
   2f740:	4620      	mov	r0, r4
   2f742:	f7ff ffba 	bl	2f6ba <regulator_set_voltage>
		if (ret < 0) {
   2f746:	2800      	cmp	r0, #0
   2f748:	db1c      	blt.n	2f784 <regulator_common_init+0x66>
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
   2f74a:	f8d8 3000 	ldr.w	r3, [r8]
   2f74e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2f752:	d01a      	beq.n	2f78a <regulator_common_init+0x6c>
					int32_t *volt_uv)
{
	const struct regulator_driver_api *api =
		(const struct regulator_driver_api *)dev->api;

	if (api->get_voltage == NULL) {
   2f754:	68a3      	ldr	r3, [r4, #8]
   2f756:	695b      	ldr	r3, [r3, #20]
   2f758:	b38b      	cbz	r3, 2f7be <regulator_common_init+0xa0>
		return -ENOSYS;
	}

	return api->get_voltage(dev, volt_uv);
   2f75a:	a901      	add	r1, sp, #4
   2f75c:	4620      	mov	r0, r4
   2f75e:	4798      	blx	r3
		if (ret < 0) {
   2f760:	2800      	cmp	r0, #0
   2f762:	db0f      	blt.n	2f784 <regulator_common_init+0x66>
		if (current_uv < config->min_uv) {
   2f764:	f8d8 2000 	ldr.w	r2, [r8]
   2f768:	9b01      	ldr	r3, [sp, #4]
   2f76a:	429a      	cmp	r2, r3
   2f76c:	dd22      	ble.n	2f7b4 <regulator_common_init+0x96>
			ret = regulator_set_voltage(dev, config->max_uv, config->max_uv);
   2f76e:	4611      	mov	r1, r2
   2f770:	4620      	mov	r0, r4
   2f772:	f7ff ffa2 	bl	2f6ba <regulator_set_voltage>
			if (ret < 0) {
   2f776:	2800      	cmp	r0, #0
   2f778:	da0d      	bge.n	2f796 <regulator_common_init+0x78>
   2f77a:	e003      	b.n	2f784 <regulator_common_init+0x66>
		ret = regulator_set_mode(dev, config->initial_mode);
   2f77c:	f7ff ffb1 	bl	2f6e2 <regulator_set_mode>
		if (ret < 0) {
   2f780:	2800      	cmp	r0, #0
   2f782:	dad7      	bge.n	2f734 <regulator_common_init+0x16>
}
   2f784:	b002      	add	sp, #8
   2f786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
   2f78a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2f78e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2f792:	429a      	cmp	r2, r3
   2f794:	d1de      	bne.n	2f754 <regulator_common_init+0x36>
	if (is_enabled) {
   2f796:	b946      	cbnz	r6, 2f7aa <regulator_common_init+0x8c>
	} else if ((config->flags & REGULATOR_INIT_ENABLED) != 0U) {
   2f798:	f898 301a 	ldrb.w	r3, [r8, #26]
   2f79c:	079b      	lsls	r3, r3, #30
   2f79e:	d007      	beq.n	2f7b0 <regulator_common_init+0x92>
		ret = api->enable(dev);
   2f7a0:	683b      	ldr	r3, [r7, #0]
   2f7a2:	4620      	mov	r0, r4
   2f7a4:	4798      	blx	r3
		if (ret < 0) {
   2f7a6:	2800      	cmp	r0, #0
   2f7a8:	dbec      	blt.n	2f784 <regulator_common_init+0x66>
		data->refcnt++;
   2f7aa:	696b      	ldr	r3, [r5, #20]
   2f7ac:	3301      	adds	r3, #1
   2f7ae:	616b      	str	r3, [r5, #20]
	return 0;
   2f7b0:	2000      	movs	r0, #0
   2f7b2:	e7e7      	b.n	2f784 <regulator_common_init+0x66>
		} else if (current_uv > config->max_uv) {
   2f7b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2f7b8:	4293      	cmp	r3, r2
   2f7ba:	ddec      	ble.n	2f796 <regulator_common_init+0x78>
   2f7bc:	e7d7      	b.n	2f76e <regulator_common_init+0x50>
		return -ENOSYS;
   2f7be:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2f7c2:	e7df      	b.n	2f784 <regulator_common_init+0x66>

0002f7c4 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2f7c4:	2301      	movs	r3, #1
   2f7c6:	fa03 f101 	lsl.w	r1, r3, r1
   2f7ca:	6903      	ldr	r3, [r0, #16]
   2f7cc:	681b      	ldr	r3, [r3, #0]
   2f7ce:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2f7d0:	bf18      	it	ne
   2f7d2:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2f7d6:	b112      	cbz	r2, 2f7de <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   2f7d8:	6883      	ldr	r3, [r0, #8]
   2f7da:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2f7dc:	4718      	bx	r3
   2f7de:	6883      	ldr	r3, [r0, #8]
   2f7e0:	691b      	ldr	r3, [r3, #16]
   2f7e2:	e7fb      	b.n	2f7dc <gpio_pin_set+0x18>

0002f7e4 <regulator_fixed_init>:
	.enable = regulator_fixed_enable,
	.disable = regulator_fixed_disable,
};

static int regulator_fixed_init(const struct device *dev)
{
   2f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   2f7e6:	6844      	ldr	r4, [r0, #4]
{
   2f7e8:	4605      	mov	r5, r0
	int ret;

	regulator_common_data_init(dev);
   2f7ea:	f7ff ff46 	bl	2f67a <regulator_common_data_init>

	if (!device_is_ready(cfg->enable.port)) {
   2f7ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2f7f0:	f000 fb35 	bl	2fe5e <z_device_is_ready>
   2f7f4:	b370      	cbz	r0, 2f854 <regulator_fixed_init+0x70>
	return gpio_pin_configure(spec->port,
   2f7f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
				  spec->pin,
   2f7f8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
				  spec->dt_flags | extra_flags);
   2f7fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	struct gpio_driver_data *data =
   2f7fe:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   2f802:	f8d0 e008 	ldr.w	lr, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2f806:	f8dc 6000 	ldr.w	r6, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2f80a:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   2f80c:	bf54      	ite	pl
   2f80e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2f812:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2f816:	2701      	movs	r7, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2f818:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2f81c:	408f      	lsls	r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2f81e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2f820:	bf4c      	ite	mi
   2f822:	433e      	orrmi	r6, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2f824:	43be      	bicpl	r6, r7
   2f826:	f8cc 6000 	str.w	r6, [ip]
	return api->pin_configure(port, pin, flags);
   2f82a:	f8de 3000 	ldr.w	r3, [lr]
   2f82e:	4798      	blx	r3
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
		return -ENODEV;
	}

	ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_INACTIVE);
	if (ret < 0) {
   2f830:	2800      	cmp	r0, #0
   2f832:	db0a      	blt.n	2f84a <regulator_fixed_init+0x66>
		return ret;
	}

	ret = regulator_common_init(dev, false);
   2f834:	2100      	movs	r1, #0
   2f836:	4628      	mov	r0, r5
   2f838:	f7ff ff71 	bl	2f71e <regulator_common_init>
	if (ret < 0) {
   2f83c:	2800      	cmp	r0, #0
   2f83e:	db04      	blt.n	2f84a <regulator_fixed_init+0x66>
		return ret;
	}

	if (regulator_is_enabled(dev)) {
   2f840:	4628      	mov	r0, r5
   2f842:	f7ff ff22 	bl	2f68a <regulator_is_enabled>
   2f846:	b908      	cbnz	r0, 2f84c <regulator_fixed_init+0x68>
		k_busy_wait(cfg->startup_delay_us);
	}

	return 0;
   2f848:	2000      	movs	r0, #0
}
   2f84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_busy_wait(cfg->startup_delay_us);
   2f84c:	69e0      	ldr	r0, [r4, #28]
	z_impl_k_busy_wait(usec_to_wait);
   2f84e:	f000 fda5 	bl	3039c <z_impl_k_busy_wait>
}
   2f852:	e7f9      	b.n	2f848 <regulator_fixed_init+0x64>
		return -ENODEV;
   2f854:	f06f 0012 	mvn.w	r0, #18
   2f858:	e7f7      	b.n	2f84a <regulator_fixed_init+0x66>

0002f85a <regulator_fixed_disable>:
	const struct regulator_fixed_config *cfg = dev->config;
   2f85a:	6843      	ldr	r3, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   2f85c:	2200      	movs	r2, #0
   2f85e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   2f862:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f864:	f7ff bfae 	b.w	2f7c4 <gpio_pin_set>

0002f868 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2f868:	6902      	ldr	r2, [r0, #16]
{
   2f86a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2f86c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2f870:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2f874:	2000      	movs	r0, #0
   2f876:	4770      	bx	lr

0002f878 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2f878:	6843      	ldr	r3, [r0, #4]
   2f87a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f87c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f880:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2f884:	4770      	bx	lr

0002f886 <tx_start>:
{
   2f886:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2f888:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2f88a:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f88c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f890:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f894:	2200      	movs	r2, #0
   2f896:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2f89a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2f89e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2f8a2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f8a6:	6862      	ldr	r2, [r4, #4]
   2f8a8:	06d2      	lsls	r2, r2, #27
   2f8aa:	d508      	bpl.n	2f8be <tx_start+0x38>
	return config->uarte_regs;
   2f8ac:	6842      	ldr	r2, [r0, #4]
   2f8ae:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2f8b0:	2108      	movs	r1, #8
   2f8b2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2f8b6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2f8ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f8be:	2201      	movs	r2, #1
   2f8c0:	609a      	str	r2, [r3, #8]
}
   2f8c2:	bd10      	pop	{r4, pc}

0002f8c4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2f8c4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2f8c6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2f8c8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f8ca:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f8ce:	b150      	cbz	r0, 2f8e6 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2f8d0:	6992      	ldr	r2, [r2, #24]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f8d2:	2000      	movs	r0, #0
   2f8d4:	7812      	ldrb	r2, [r2, #0]
   2f8d6:	700a      	strb	r2, [r1, #0]
   2f8d8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2f8dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f8e0:	2201      	movs	r2, #1
   2f8e2:	601a      	str	r2, [r3, #0]
	return 0;
   2f8e4:	4770      	bx	lr
		return -1;
   2f8e6:	f04f 30ff 	mov.w	r0, #4294967295
}
   2f8ea:	4770      	bx	lr

0002f8ec <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f8ec:	2a00      	cmp	r2, #0
{
   2f8ee:	b510      	push	{r4, lr}
   2f8f0:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f8f2:	dd10      	ble.n	2f916 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   2f8f4:	6843      	ldr	r3, [r0, #4]
   2f8f6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f8f8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f8fc:	b150      	cbz	r0, 2f914 <uarte_nrfx_fifo_read+0x28>
	const struct uarte_nrfx_data *data = dev->data;
   2f8fe:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f900:	2000      	movs	r0, #0
   2f902:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
   2f906:	6992      	ldr	r2, [r2, #24]
   2f908:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   2f90c:	7812      	ldrb	r2, [r2, #0]
   2f90e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f910:	2001      	movs	r0, #1
   2f912:	6018      	str	r0, [r3, #0]
}
   2f914:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2f916:	2000      	movs	r0, #0
   2f918:	e7fc      	b.n	2f914 <uarte_nrfx_fifo_read+0x28>

0002f91a <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2f91a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2f91c:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2f91e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2f920:	f04f 0020 	mov.w	r0, #32
   2f924:	f3ef 8311 	mrs	r3, BASEPRI
   2f928:	f380 8812 	msr	BASEPRI_MAX, r0
   2f92c:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2f930:	68c9      	ldr	r1, [r1, #12]
   2f932:	2000      	movs	r0, #0
   2f934:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2f936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2f93a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2f93e:	f383 8811 	msr	BASEPRI, r3
   2f942:	f3bf 8f6f 	isb	sy
}
   2f946:	4770      	bx	lr

0002f948 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2f948:	6903      	ldr	r3, [r0, #16]
   2f94a:	68db      	ldr	r3, [r3, #12]
   2f94c:	2201      	movs	r2, #1
   2f94e:	739a      	strb	r2, [r3, #14]
}
   2f950:	4770      	bx	lr

0002f952 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2f952:	6903      	ldr	r3, [r0, #16]
   2f954:	68db      	ldr	r3, [r3, #12]
   2f956:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2f958:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2f95c:	b962      	cbnz	r2, 2f978 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2f95e:	6842      	ldr	r2, [r0, #4]
   2f960:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f962:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2f966:	b140      	cbz	r0, 2f97a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2f968:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2f96c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2f970:	d003      	beq.n	2f97a <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2f972:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2f974:	2001      	movs	r0, #1
   2f976:	4770      	bx	lr
   2f978:	2000      	movs	r0, #0
}
   2f97a:	4770      	bx	lr

0002f97c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2f97c:	6843      	ldr	r3, [r0, #4]
   2f97e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f980:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2f984:	3800      	subs	r0, #0
   2f986:	bf18      	it	ne
   2f988:	2001      	movne	r0, #1
   2f98a:	4770      	bx	lr

0002f98c <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2f98c:	6843      	ldr	r3, [r0, #4]
   2f98e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2f990:	2210      	movs	r2, #16
   2f992:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f996:	4770      	bx	lr

0002f998 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2f998:	6843      	ldr	r3, [r0, #4]
   2f99a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2f99c:	2210      	movs	r2, #16
   2f99e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2f9a2:	4770      	bx	lr

0002f9a4 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2f9a4:	6843      	ldr	r3, [r0, #4]
   2f9a6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2f9a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   2f9ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f9b0:	4770      	bx	lr

0002f9b2 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   2f9b2:	6843      	ldr	r3, [r0, #4]
   2f9b4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2f9b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   2f9ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2f9be:	4770      	bx	lr

0002f9c0 <uarte_nrfx_irq_is_pending>:
{
   2f9c0:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2f9c2:	6843      	ldr	r3, [r0, #4]
   2f9c4:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2f9c6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2f9ca:	025b      	lsls	r3, r3, #9
{
   2f9cc:	4604      	mov	r4, r0
		||
   2f9ce:	d405      	bmi.n	2f9dc <uarte_nrfx_irq_is_pending+0x1c>
   2f9d0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2f9d4:	f010 0010 	ands.w	r0, r0, #16
   2f9d8:	d106      	bne.n	2f9e8 <uarte_nrfx_irq_is_pending+0x28>
}
   2f9da:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2f9dc:	f7ff ffb9 	bl	2f952 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2f9e0:	2800      	cmp	r0, #0
   2f9e2:	d0f5      	beq.n	2f9d0 <uarte_nrfx_irq_is_pending+0x10>
		||
   2f9e4:	2001      	movs	r0, #1
   2f9e6:	e7f8      	b.n	2f9da <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2f9e8:	4620      	mov	r0, r4
   2f9ea:	f7ff ffc7 	bl	2f97c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2f9ee:	3800      	subs	r0, #0
   2f9f0:	bf18      	it	ne
   2f9f2:	2001      	movne	r0, #1
   2f9f4:	e7f1      	b.n	2f9da <uarte_nrfx_irq_is_pending+0x1a>

0002f9f6 <uarte_nrfx_irq_update>:
}
   2f9f6:	2001      	movs	r0, #1
   2f9f8:	4770      	bx	lr

0002f9fa <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2f9fa:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   2f9fc:	68d8      	ldr	r0, [r3, #12]
   2f9fe:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   2fa00:	68db      	ldr	r3, [r3, #12]
   2fa02:	605a      	str	r2, [r3, #4]
}
   2fa04:	4770      	bx	lr

0002fa06 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2fa06:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2fa08:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fa0a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fa0e:	b940      	cbnz	r0, 2fa22 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2fa10:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fa12:	079b      	lsls	r3, r3, #30
   2fa14:	d406      	bmi.n	2fa24 <is_tx_ready.isra.0+0x1e>
   2fa16:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2fa1a:	3800      	subs	r0, #0
   2fa1c:	bf18      	it	ne
   2fa1e:	2001      	movne	r0, #1
   2fa20:	4770      	bx	lr
   2fa22:	2001      	movs	r0, #1
}
   2fa24:	4770      	bx	lr

0002fa26 <uarte_nrfx_fifo_fill>:
{
   2fa26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2fa28:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2fa2a:	68f3      	ldr	r3, [r6, #12]
   2fa2c:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2fa2e:	f3bf 8f5b 	dmb	ish
   2fa32:	4294      	cmp	r4, r2
   2fa34:	bfa8      	it	ge
   2fa36:	4614      	movge	r4, r2
{
   2fa38:	4605      	mov	r5, r0
   2fa3a:	3310      	adds	r3, #16
   2fa3c:	2201      	movs	r2, #1
   2fa3e:	e853 0f00 	ldrex	r0, [r3]
   2fa42:	2800      	cmp	r0, #0
   2fa44:	d103      	bne.n	2fa4e <uarte_nrfx_fifo_fill+0x28>
   2fa46:	e843 2700 	strex	r7, r2, [r3]
   2fa4a:	2f00      	cmp	r7, #0
   2fa4c:	d1f7      	bne.n	2fa3e <uarte_nrfx_fifo_fill+0x18>
   2fa4e:	f3bf 8f5b 	dmb	ish
   2fa52:	bf0c      	ite	eq
   2fa54:	4613      	moveq	r3, r2
   2fa56:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2fa58:	d11f      	bne.n	2fa9a <uarte_nrfx_fifo_fill+0x74>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   2fa5a:	68f3      	ldr	r3, [r6, #12]
   2fa5c:	4622      	mov	r2, r4
   2fa5e:	6898      	ldr	r0, [r3, #8]
   2fa60:	f7ff fc7e 	bl	2f360 <memcpy>
	__asm__ volatile(
   2fa64:	f04f 0320 	mov.w	r3, #32
   2fa68:	f3ef 8711 	mrs	r7, BASEPRI
   2fa6c:	f383 8812 	msr	BASEPRI_MAX, r3
   2fa70:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2fa74:	6868      	ldr	r0, [r5, #4]
   2fa76:	f7ff ffc6 	bl	2fa06 <is_tx_ready.isra.0>
   2fa7a:	68f3      	ldr	r3, [r6, #12]
   2fa7c:	b938      	cbnz	r0, 2fa8e <uarte_nrfx_fifo_fill+0x68>
		data->int_driven->fifo_fill_lock = 0;
   2fa7e:	6118      	str	r0, [r3, #16]
		len = 0;
   2fa80:	4604      	mov	r4, r0
	__asm__ volatile(
   2fa82:	f387 8811 	msr	BASEPRI, r7
   2fa86:	f3bf 8f6f 	isb	sy
}
   2fa8a:	4620      	mov	r0, r4
   2fa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   2fa8e:	6899      	ldr	r1, [r3, #8]
   2fa90:	4622      	mov	r2, r4
   2fa92:	4628      	mov	r0, r5
   2fa94:	f7ff fef7 	bl	2f886 <tx_start>
   2fa98:	e7f3      	b.n	2fa82 <uarte_nrfx_fifo_fill+0x5c>
		return 0;
   2fa9a:	461c      	mov	r4, r3
   2fa9c:	e7f5      	b.n	2fa8a <uarte_nrfx_fifo_fill+0x64>

0002fa9e <uarte_nrfx_isr_int>:
{
   2fa9e:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   2faa0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2faa2:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2faa4:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2faa8:	05c9      	lsls	r1, r1, #23
   2faaa:	d518      	bpl.n	2fade <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2faac:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2fab0:	b1a9      	cbz	r1, 2fade <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2fab2:	f04f 0420 	mov.w	r4, #32
   2fab6:	f3ef 8111 	mrs	r1, BASEPRI
   2faba:	f384 8812 	msr	BASEPRI_MAX, r4
   2fabe:	f3bf 8f6f 	isb	sy
   2fac2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2fac6:	b134      	cbz	r4, 2fad6 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fac8:	2400      	movs	r4, #0
   2faca:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2face:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fad2:	2401      	movs	r4, #1
   2fad4:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   2fad6:	f381 8811 	msr	BASEPRI, r1
   2fada:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fade:	6852      	ldr	r2, [r2, #4]
   2fae0:	06d2      	lsls	r2, r2, #27
   2fae2:	d51a      	bpl.n	2fb1a <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   2fae4:	f04f 0220 	mov.w	r2, #32
   2fae8:	f3ef 8111 	mrs	r1, BASEPRI
   2faec:	f382 8812 	msr	BASEPRI_MAX, r2
   2faf0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2faf4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2faf8:	b112      	cbz	r2, 2fb00 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2fafa:	2200      	movs	r2, #0
   2fafc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2fb00:	6902      	ldr	r2, [r0, #16]
   2fb02:	68d2      	ldr	r2, [r2, #12]
   2fb04:	b10a      	cbz	r2, 2fb0a <uarte_nrfx_isr_int+0x6c>
   2fb06:	6912      	ldr	r2, [r2, #16]
   2fb08:	b91a      	cbnz	r2, 2fb12 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   2fb0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2fb0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2fb12:	f381 8811 	msr	BASEPRI, r1
   2fb16:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   2fb1a:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   2fb1c:	68d4      	ldr	r4, [r2, #12]
   2fb1e:	b16c      	cbz	r4, 2fb3c <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fb20:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2fb24:	b161      	cbz	r1, 2fb40 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
   2fb26:	2100      	movs	r1, #0
   2fb28:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   2fb2a:	68d4      	ldr	r4, [r2, #12]
   2fb2c:	7ba4      	ldrb	r4, [r4, #14]
   2fb2e:	b13c      	cbz	r4, 2fb40 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
   2fb30:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2fb34:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2fb38:	68d3      	ldr	r3, [r2, #12]
   2fb3a:	7399      	strb	r1, [r3, #14]
}
   2fb3c:	bc10      	pop	{r4}
   2fb3e:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fb40:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2fb44:	b121      	cbz	r1, 2fb50 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fb46:	2100      	movs	r1, #0
   2fb48:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2fb4c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2fb50:	68d2      	ldr	r2, [r2, #12]
   2fb52:	6813      	ldr	r3, [r2, #0]
   2fb54:	2b00      	cmp	r3, #0
   2fb56:	d0f1      	beq.n	2fb3c <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2fb58:	6851      	ldr	r1, [r2, #4]
}
   2fb5a:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2fb5c:	4718      	bx	r3

0002fb5e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2fb5e:	4770      	bx	lr

0002fb60 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2fb60:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2fb64:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2fb66:	b29b      	uxth	r3, r3
   2fb68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2fb6c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2fb70:	2200      	movs	r2, #0
   2fb72:	601a      	str	r2, [r3, #0]
   2fb74:	681b      	ldr	r3, [r3, #0]
}
   2fb76:	4770      	bx	lr

0002fb78 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2fb78:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   2fb7a:	2000      	movs	r0, #0
   2fb7c:	f7fa f864 	bl	29c48 <sys_arch_reboot>

0002fb80 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   2fb80:	f7fe bc8e 	b.w	2e4a0 <nrf_cc3xx_platform_init_no_rng>

0002fb84 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   2fb84:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2fb86:	f7f9 fb43 	bl	29210 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2fb8a:	f7f9 fc17 	bl	293bc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   2fb8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   2fb92:	f7fe bc85 	b.w	2e4a0 <nrf_cc3xx_platform_init_no_rng>

0002fb96 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2fb96:	4700      	bx	r0

0002fb98 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2fb98:	f000 bc00 	b.w	3039c <z_impl_k_busy_wait>

0002fb9c <nrfx_clock_start>:
{
   2fb9c:	b508      	push	{r3, lr}
    switch (domain)
   2fb9e:	b110      	cbz	r0, 2fba6 <nrfx_clock_start+0xa>
   2fba0:	2801      	cmp	r0, #1
   2fba2:	d02c      	beq.n	2fbfe <nrfx_clock_start+0x62>
}
   2fba4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2fba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2fbaa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2fbae:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   2fbb2:	03c8      	lsls	r0, r1, #15
   2fbb4:	d40b      	bmi.n	2fbce <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   2fbb6:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   2fbba:	07d9      	lsls	r1, r3, #31
   2fbbc:	d50f      	bpl.n	2fbde <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2fbbe:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2fbc2:	079b      	lsls	r3, r3, #30
   2fbc4:	d408      	bmi.n	2fbd8 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
   2fbc6:	2302      	movs	r3, #2
   2fbc8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   2fbcc:	e7ea      	b.n	2fba4 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2fbce:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2fbd2:	2b01      	cmp	r3, #1
   2fbd4:	d004      	beq.n	2fbe0 <nrfx_clock_start+0x44>
   2fbd6:	b113      	cbz	r3, 2fbde <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2fbd8:	2000      	movs	r0, #0
   2fbda:	f7fb fe89 	bl	2b8f0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   2fbde:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   2fbe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2fbe4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fbe8:	2300      	movs	r3, #0
   2fbea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   2fbee:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   2fbf2:	2302      	movs	r3, #2
   2fbf4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fbf8:	2301      	movs	r3, #1
   2fbfa:	6093      	str	r3, [r2, #8]
}
   2fbfc:	e7d2      	b.n	2fba4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fbfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2fc02:	2200      	movs	r2, #0
   2fc04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2fc08:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2fc0c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fc10:	6018      	str	r0, [r3, #0]
}
   2fc12:	e7c7      	b.n	2fba4 <nrfx_clock_start+0x8>

0002fc14 <nrfx_clock_stop>:
    clock_stop(domain);
   2fc14:	f7fb be6c 	b.w	2b8f0 <clock_stop>

0002fc18 <nrf_gpio_reconfigure>:
{
   2fc18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2fc1a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2fc1c:	a801      	add	r0, sp, #4
{
   2fc1e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2fc22:	4616      	mov	r6, r2
   2fc24:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2fc26:	f7fb ff1d 	bl	2ba64 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2fc2a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2fc2c:	f1b6 0c00 	subs.w	ip, r6, #0
   2fc30:	bf18      	it	ne
   2fc32:	f04f 0c01 	movne.w	ip, #1
   2fc36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2fc3a:	1e0b      	subs	r3, r1, #0
   2fc3c:	bf18      	it	ne
   2fc3e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2fc40:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2fc42:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2fc46:	bf14      	ite	ne
   2fc48:	f04f 0c0c 	movne.w	ip, #12
   2fc4c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2fc50:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2fc52:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2fc56:	bf14      	ite	ne
   2fc58:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2fc5c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2fc60:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2fc62:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2fc66:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2fc6a:	bf14      	ite	ne
   2fc6c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2fc70:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2fc74:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2fc78:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2fc7c:	b101      	cbz	r1, 2fc80 <nrf_gpio_reconfigure+0x68>
   2fc7e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2fc80:	b10e      	cbz	r6, 2fc86 <nrf_gpio_reconfigure+0x6e>
   2fc82:	7836      	ldrb	r6, [r6, #0]
   2fc84:	0076      	lsls	r6, r6, #1
   2fc86:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2fc88:	b10d      	cbz	r5, 2fc8e <nrf_gpio_reconfigure+0x76>
   2fc8a:	782d      	ldrb	r5, [r5, #0]
   2fc8c:	00ad      	lsls	r5, r5, #2
   2fc8e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2fc90:	b10c      	cbz	r4, 2fc96 <nrf_gpio_reconfigure+0x7e>
   2fc92:	7824      	ldrb	r4, [r4, #0]
   2fc94:	0224      	lsls	r4, r4, #8
   2fc96:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2fc98:	b10f      	cbz	r7, 2fc9e <nrf_gpio_reconfigure+0x86>
   2fc9a:	783f      	ldrb	r7, [r7, #0]
   2fc9c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2fc9e:	430c      	orrs	r4, r1
   2fca0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2fca2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2fca6:	b003      	add	sp, #12
   2fca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fcaa <nrf_gpio_cfg_sense_set>:
{
   2fcaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2fcac:	f10d 030f 	add.w	r3, sp, #15
   2fcb0:	9301      	str	r3, [sp, #4]
   2fcb2:	2300      	movs	r3, #0
{
   2fcb4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2fcb8:	9300      	str	r3, [sp, #0]
   2fcba:	461a      	mov	r2, r3
   2fcbc:	4619      	mov	r1, r3
   2fcbe:	f7ff ffab 	bl	2fc18 <nrf_gpio_reconfigure>
}
   2fcc2:	b005      	add	sp, #20
   2fcc4:	f85d fb04 	ldr.w	pc, [sp], #4

0002fcc8 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fcc8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2fccc:	681a      	ldr	r2, [r3, #0]
   2fcce:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fcd0:	bf1f      	itttt	ne
   2fcd2:	2200      	movne	r2, #0
   2fcd4:	601a      	strne	r2, [r3, #0]
   2fcd6:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fcd8:	2001      	movne	r0, #1
   2fcda:	bf08      	it	eq
   2fcdc:	2000      	moveq	r0, #0
}
   2fcde:	4770      	bx	lr

0002fce0 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   2fce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2fce4:	f44f 7260 	mov.w	r2, #896	; 0x380
   2fce8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2fcec:	4770      	bx	lr

0002fcee <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   2fcee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2fcf2:	f44f 7260 	mov.w	r2, #896	; 0x380
   2fcf6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2fcfa:	4770      	bx	lr

0002fcfc <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   2fcfc:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   2fcfe:	f7fc fa69 	bl	2c1d4 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   2fd02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   2fd06:	f7fb be79 	b.w	2b9fc <nrfx_clock_irq_handler>

0002fd0a <nrfx_usbd_consumer>:
{
   2fd0a:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   2fd0c:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   2fd0e:	429c      	cmp	r4, r3
   2fd10:	d209      	bcs.n	2fd26 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
   2fd12:	2500      	movs	r5, #0
   2fd14:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2fd16:	6809      	ldr	r1, [r1, #0]
   2fd18:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   2fd1a:	429a      	cmp	r2, r3
   2fd1c:	d10c      	bne.n	2fd38 <nrfx_usbd_consumer+0x2e>
   2fd1e:	1e20      	subs	r0, r4, #0
   2fd20:	bf18      	it	ne
   2fd22:	2001      	movne	r0, #1
}
   2fd24:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
   2fd26:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2fd28:	680d      	ldr	r5, [r1, #0]
   2fd2a:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
   2fd2c:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
   2fd2e:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   2fd30:	4418      	add	r0, r3
        p_transfer->size = size;
   2fd32:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   2fd34:	6008      	str	r0, [r1, #0]
   2fd36:	e7f0      	b.n	2fd1a <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   2fd38:	2000      	movs	r0, #0
   2fd3a:	e7f3      	b.n	2fd24 <nrfx_usbd_consumer+0x1a>

0002fd3c <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
   2fd3c:	684b      	ldr	r3, [r1, #4]
   2fd3e:	429a      	cmp	r2, r3
   2fd40:	bf28      	it	cs
   2fd42:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
   2fd44:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   2fd46:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   2fd4a:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2fd4c:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   2fd4e:	1a80      	subs	r0, r0, r2
   2fd50:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2fd52:	4413      	add	r3, r2
}
   2fd54:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2fd56:	600b      	str	r3, [r1, #0]
}
   2fd58:	bf18      	it	ne
   2fd5a:	2001      	movne	r0, #1
   2fd5c:	4770      	bx	lr

0002fd5e <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
   2fd5e:	684b      	ldr	r3, [r1, #4]
   2fd60:	429a      	cmp	r2, r3
   2fd62:	bf28      	it	cs
   2fd64:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2fd66:	b162      	cbz	r2, 2fd82 <nrfx_usbd_feeder_ram_zlp+0x24>
   2fd68:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   2fd6a:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   2fd6e:	684b      	ldr	r3, [r1, #4]
   2fd70:	1a9b      	subs	r3, r3, r2
   2fd72:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2fd74:	680b      	ldr	r3, [r1, #0]
}
   2fd76:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
   2fd78:	4413      	add	r3, r2
   2fd7a:	600b      	str	r3, [r1, #0]
}
   2fd7c:	bf18      	it	ne
   2fd7e:	2001      	movne	r0, #1
   2fd80:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2fd82:	4613      	mov	r3, r2
   2fd84:	e7f1      	b.n	2fd6a <nrfx_usbd_feeder_ram_zlp+0xc>

0002fd86 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   2fd86:	43c3      	mvns	r3, r0
   2fd88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   2fd8c:	f000 000f 	and.w	r0, r0, #15
}
   2fd90:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   2fd94:	4770      	bx	lr

0002fd96 <ev_started_handler>:
}
   2fd96:	4770      	bx	lr

0002fd98 <nrf_usbd_epin_dma_handler>:
{
   2fd98:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2fd9a:	f7fc fb8f 	bl	2c4bc <usbd_dma_pending_clear>
{
   2fd9e:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2fda0:	f7fc fa82 	bl	2c2a8 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2fda4:	7b83      	ldrb	r3, [r0, #14]
   2fda6:	2b03      	cmp	r3, #3
   2fda8:	d10a      	bne.n	2fdc0 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2fdaa:	4608      	mov	r0, r1
   2fdac:	f7ff ffeb 	bl	2fd86 <ep2bit>
   2fdb0:	2301      	movs	r3, #1
   2fdb2:	fa03 f000 	lsl.w	r0, r3, r0
   2fdb6:	43c0      	mvns	r0, r0
}
   2fdb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2fdbc:	f7fc bb6e 	b.w	2c49c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2fdc0:	6803      	ldr	r3, [r0, #0]
   2fdc2:	2b00      	cmp	r3, #0
   2fdc4:	d0f1      	beq.n	2fdaa <nrf_usbd_epin_dma_handler+0x12>
}
   2fdc6:	bd08      	pop	{r3, pc}

0002fdc8 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   2fdc8:	2087      	movs	r0, #135	; 0x87
   2fdca:	f7ff bfe5 	b.w	2fd98 <nrf_usbd_epin_dma_handler>

0002fdce <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   2fdce:	2086      	movs	r0, #134	; 0x86
   2fdd0:	f7ff bfe2 	b.w	2fd98 <nrf_usbd_epin_dma_handler>

0002fdd4 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   2fdd4:	2085      	movs	r0, #133	; 0x85
   2fdd6:	f7ff bfdf 	b.w	2fd98 <nrf_usbd_epin_dma_handler>

0002fdda <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   2fdda:	2084      	movs	r0, #132	; 0x84
   2fddc:	f7ff bfdc 	b.w	2fd98 <nrf_usbd_epin_dma_handler>

0002fde0 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   2fde0:	2083      	movs	r0, #131	; 0x83
   2fde2:	f7ff bfd9 	b.w	2fd98 <nrf_usbd_epin_dma_handler>

0002fde6 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   2fde6:	2082      	movs	r0, #130	; 0x82
   2fde8:	f7ff bfd6 	b.w	2fd98 <nrf_usbd_epin_dma_handler>

0002fdec <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   2fdec:	2081      	movs	r0, #129	; 0x81
   2fdee:	f7ff bfd3 	b.w	2fd98 <nrf_usbd_epin_dma_handler>

0002fdf2 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   2fdf2:	f7fc bb75 	b.w	2c4e0 <nrf_usbd_ep0in_dma_handler>

0002fdf6 <nrfx_usbd_ep_max_packet_size_set>:
{
   2fdf6:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2fdf8:	f7fc fa56 	bl	2c2a8 <ep_state_access>
    p_state->max_packet_size = size;
   2fdfc:	8181      	strh	r1, [r0, #12]
}
   2fdfe:	bd08      	pop	{r3, pc}

0002fe00 <nrfx_usbd_ep_status_get>:
{
   2fe00:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   2fe02:	f7fc fa51 	bl	2c2a8 <ep_state_access>
	__asm__ volatile(
   2fe06:	f04f 0220 	mov.w	r2, #32
   2fe0a:	f3ef 8311 	mrs	r3, BASEPRI
   2fe0e:	f382 8812 	msr	BASEPRI_MAX, r2
   2fe12:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   2fe16:	6882      	ldr	r2, [r0, #8]
   2fe18:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2fe1a:	6802      	ldr	r2, [r0, #0]
   2fe1c:	b92a      	cbnz	r2, 2fe2a <nrfx_usbd_ep_status_get+0x2a>
   2fe1e:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   2fe20:	f383 8811 	msr	BASEPRI, r3
   2fe24:	f3bf 8f6f 	isb	sy
}
   2fe28:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2fe2a:	2004      	movs	r0, #4
   2fe2c:	e7f8      	b.n	2fe20 <nrfx_usbd_ep_status_get+0x20>

0002fe2e <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   2fe2e:	2007      	movs	r0, #7
   2fe30:	f7fc bec2 	b.w	2cbb8 <nrf_usbd_epout_dma_handler>

0002fe34 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   2fe34:	2006      	movs	r0, #6
   2fe36:	f7fc bebf 	b.w	2cbb8 <nrf_usbd_epout_dma_handler>

0002fe3a <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   2fe3a:	2005      	movs	r0, #5
   2fe3c:	f7fc bebc 	b.w	2cbb8 <nrf_usbd_epout_dma_handler>

0002fe40 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   2fe40:	2004      	movs	r0, #4
   2fe42:	f7fc beb9 	b.w	2cbb8 <nrf_usbd_epout_dma_handler>

0002fe46 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   2fe46:	2003      	movs	r0, #3
   2fe48:	f7fc beb6 	b.w	2cbb8 <nrf_usbd_epout_dma_handler>

0002fe4c <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   2fe4c:	2002      	movs	r0, #2
   2fe4e:	f7fc beb3 	b.w	2cbb8 <nrf_usbd_epout_dma_handler>

0002fe52 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   2fe52:	2001      	movs	r0, #1
   2fe54:	f7fc beb0 	b.w	2cbb8 <nrf_usbd_epout_dma_handler>

0002fe58 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   2fe58:	f7fc bfa4 	b.w	2cda4 <usbd_ep_abort>

0002fe5c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2fe5c:	4770      	bx	lr

0002fe5e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2fe5e:	b140      	cbz	r0, 2fe72 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2fe60:	68c3      	ldr	r3, [r0, #12]
   2fe62:	7858      	ldrb	r0, [r3, #1]
   2fe64:	f010 0001 	ands.w	r0, r0, #1
   2fe68:	bf1e      	ittt	ne
   2fe6a:	7818      	ldrbne	r0, [r3, #0]
   2fe6c:	fab0 f080 	clzne	r0, r0
   2fe70:	0940      	lsrne	r0, r0, #5
}
   2fe72:	4770      	bx	lr

0002fe74 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2fe74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fe76:	4605      	mov	r5, r0
   2fe78:	460e      	mov	r6, r1
	__asm__ volatile(
   2fe7a:	f04f 0320 	mov.w	r3, #32
   2fe7e:	f3ef 8711 	mrs	r7, BASEPRI
   2fe82:	f383 8812 	msr	BASEPRI_MAX, r3
   2fe86:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2fe8a:	f7fe f8e5 	bl	2e058 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2fe8e:	4631      	mov	r1, r6
   2fe90:	4604      	mov	r4, r0
   2fe92:	4628      	mov	r0, r5
   2fe94:	f7ff fe70 	bl	2fb78 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2fe98:	f387 8811 	msr	BASEPRI, r7
   2fe9c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2fea0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2fea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2fea6:	f7f9 bdbb 	b.w	29a20 <z_impl_k_thread_abort>

0002feaa <z_early_memset>:
	(void) memset(dst, c, n);
   2feaa:	f7ff ba64 	b.w	2f376 <memset>

0002feae <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2feae:	f7ff ba57 	b.w	2f360 <memcpy>

0002feb2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2feb2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   2feb6:	4313      	orrs	r3, r2
   2feb8:	f013 0303 	ands.w	r3, r3, #3
   2febc:	d10c      	bne.n	2fed8 <create_free_list+0x26>
	slab->free_list = NULL;
   2febe:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2fec0:	6881      	ldr	r1, [r0, #8]
   2fec2:	4299      	cmp	r1, r3
   2fec4:	d801      	bhi.n	2feca <create_free_list+0x18>
	return 0;
   2fec6:	2000      	movs	r0, #0
   2fec8:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2feca:	6941      	ldr	r1, [r0, #20]
   2fecc:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2fece:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   2fed0:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2fed2:	3301      	adds	r3, #1
		p += slab->block_size;
   2fed4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2fed6:	e7f3      	b.n	2fec0 <create_free_list+0xe>
		return -EINVAL;
   2fed8:	f06f 0015 	mvn.w	r0, #21
}
   2fedc:	4770      	bx	lr

0002fede <k_mem_slab_init>:
{
   2fede:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   2fee0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   2fee4:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2fee6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   2fee8:	6183      	str	r3, [r0, #24]
{
   2feea:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   2feec:	f7ff ffe1 	bl	2feb2 <create_free_list>
	if (rc < 0) {
   2fef0:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
   2fef2:	bfa8      	it	ge
   2fef4:	e9c4 4400 	strdge	r4, r4, [r4]
}
   2fef8:	bd10      	pop	{r4, pc}

0002fefa <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2fefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fefc:	4604      	mov	r4, r0
   2fefe:	460d      	mov	r5, r1
	__asm__ volatile(
   2ff00:	f04f 0320 	mov.w	r3, #32
   2ff04:	f3ef 8611 	mrs	r6, BASEPRI
   2ff08:	f383 8812 	msr	BASEPRI_MAX, r3
   2ff0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2ff10:	6947      	ldr	r7, [r0, #20]
   2ff12:	b977      	cbnz	r7, 2ff32 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2ff14:	f000 f99b 	bl	3024e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2ff18:	b158      	cbz	r0, 2ff32 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2ff1a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2ff1c:	6142      	str	r2, [r0, #20]
   2ff1e:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   2ff20:	f000 f95f 	bl	301e2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2ff24:	4631      	mov	r1, r6
   2ff26:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2ff2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2ff2e:	f7fd bf43 	b.w	2ddb8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2ff32:	682b      	ldr	r3, [r5, #0]
   2ff34:	6962      	ldr	r2, [r4, #20]
   2ff36:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2ff38:	682b      	ldr	r3, [r5, #0]
   2ff3a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2ff3c:	69a3      	ldr	r3, [r4, #24]
   2ff3e:	3b01      	subs	r3, #1
   2ff40:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2ff42:	f386 8811 	msr	BASEPRI, r6
   2ff46:	f3bf 8f6f 	isb	sy
}
   2ff4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ff4c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2ff4c:	f3ef 8005 	mrs	r0, IPSR
}
   2ff50:	3800      	subs	r0, #0
   2ff52:	bf18      	it	ne
   2ff54:	2001      	movne	r0, #1
   2ff56:	4770      	bx	lr

0002ff58 <z_impl_k_thread_name_set>:
}
   2ff58:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2ff5c:	4770      	bx	lr

0002ff5e <z_impl_k_thread_start>:
	z_sched_start(thread);
   2ff5e:	f7fd bf3d 	b.w	2dddc <z_sched_start>

0002ff62 <z_pm_save_idle_exit>:
{
   2ff62:	b508      	push	{r3, lr}
	pm_system_resume();
   2ff64:	f7f7 ff8e 	bl	27e84 <pm_system_resume>
}
   2ff68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2ff6c:	f7ff bdf7 	b.w	2fb5e <sys_clock_idle_exit>

0002ff70 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2ff70:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ff74:	428b      	cmp	r3, r1
   2ff76:	d001      	beq.n	2ff7c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2ff78:	f7fd bed8 	b.w	2dd2c <z_set_prio>
}
   2ff7c:	2000      	movs	r0, #0
   2ff7e:	4770      	bx	lr

0002ff80 <z_impl_k_mutex_init>:
{
   2ff80:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2ff82:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2ff84:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2ff88:	e9c3 3300 	strd	r3, r3, [r3]
}
   2ff8c:	4770      	bx	lr

0002ff8e <queue_insert>:
{
   2ff8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ff92:	4699      	mov	r9, r3
   2ff94:	4604      	mov	r4, r0
   2ff96:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2ff9a:	460d      	mov	r5, r1
   2ff9c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2ff9e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2ffa2:	f04f 0220 	mov.w	r2, #32
   2ffa6:	f3ef 8711 	mrs	r7, BASEPRI
   2ffaa:	f382 8812 	msr	BASEPRI_MAX, r2
   2ffae:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2ffb2:	b103      	cbz	r3, 2ffb6 <queue_insert+0x28>
	return list->tail;
   2ffb4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2ffb6:	4630      	mov	r0, r6
   2ffb8:	f000 f949 	bl	3024e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2ffbc:	b158      	cbz	r0, 2ffd6 <queue_insert+0x48>
   2ffbe:	2300      	movs	r3, #0
   2ffc0:	6783      	str	r3, [r0, #120]	; 0x78
   2ffc2:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2ffc6:	f000 f90c 	bl	301e2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2ffca:	4630      	mov	r0, r6
   2ffcc:	4639      	mov	r1, r7
   2ffce:	f7fd fef3 	bl	2ddb8 <z_reschedule>
		return 0;
   2ffd2:	2000      	movs	r0, #0
   2ffd4:	e00c      	b.n	2fff0 <queue_insert+0x62>
	if (alloc) {
   2ffd6:	f1b9 0f00 	cmp.w	r9, #0
   2ffda:	d01c      	beq.n	30016 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2ffdc:	2108      	movs	r1, #8
   2ffde:	f7fe fa0d 	bl	2e3fc <z_thread_aligned_alloc>
		if (anode == NULL) {
   2ffe2:	b938      	cbnz	r0, 2fff4 <queue_insert+0x66>
	__asm__ volatile(
   2ffe4:	f387 8811 	msr	BASEPRI, r7
   2ffe8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2ffec:	f06f 000b 	mvn.w	r0, #11
}
   2fff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2fff4:	2201      	movs	r2, #1
		anode->data = data;
   2fff6:	f8c0 8004 	str.w	r8, [r0, #4]
   2fffa:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2fffc:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2fffe:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   30002:	b965      	cbnz	r5, 3001e <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   30004:	6822      	ldr	r2, [r4, #0]
   30006:	430a      	orrs	r2, r1
   30008:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3000a:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   3000c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3000e:	2a00      	cmp	r2, #0
   30010:	d1db      	bne.n	2ffca <queue_insert+0x3c>
	list->tail = node;
   30012:	6060      	str	r0, [r4, #4]
}
   30014:	e7d9      	b.n	2ffca <queue_insert+0x3c>
	node->next_and_flags = flags;
   30016:	f8c8 9000 	str.w	r9, [r8]
}
   3001a:	4640      	mov	r0, r8
   3001c:	e7ee      	b.n	2fffc <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3001e:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   30020:	2a03      	cmp	r2, #3
   30022:	d80b      	bhi.n	3003c <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
   30024:	6001      	str	r1, [r0, #0]
	return list->tail;
   30026:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   30028:	b911      	cbnz	r1, 30030 <queue_insert+0xa2>
	list->head = node;
   3002a:	e9c4 0000 	strd	r0, r0, [r4]
}
   3002e:	e7cc      	b.n	2ffca <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30030:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30032:	f002 0203 	and.w	r2, r2, #3
   30036:	4302      	orrs	r2, r0
   30038:	600a      	str	r2, [r1, #0]
   3003a:	e7ea      	b.n	30012 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3003c:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30040:	430a      	orrs	r2, r1
   30042:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30044:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30046:	f002 0203 	and.w	r2, r2, #3
   3004a:	ea40 0302 	orr.w	r3, r0, r2
   3004e:	602b      	str	r3, [r5, #0]
}
   30050:	e7bb      	b.n	2ffca <queue_insert+0x3c>

00030052 <z_queue_node_peek>:
{
   30052:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   30054:	4604      	mov	r4, r0
   30056:	b130      	cbz	r0, 30066 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30058:	6802      	ldr	r2, [r0, #0]
   3005a:	0793      	lsls	r3, r2, #30
   3005c:	d003      	beq.n	30066 <z_queue_node_peek+0x14>
		ret = anode->data;
   3005e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   30060:	b109      	cbz	r1, 30066 <z_queue_node_peek+0x14>
			k_free(anode);
   30062:	f000 f9c1 	bl	303e8 <k_free>
}
   30066:	4620      	mov	r0, r4
   30068:	bd10      	pop	{r4, pc}

0003006a <k_queue_append>:
{
   3006a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3006c:	2301      	movs	r3, #1
   3006e:	9300      	str	r3, [sp, #0]
   30070:	2300      	movs	r3, #0
{
   30072:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   30074:	4619      	mov	r1, r3
   30076:	f7ff ff8a 	bl	2ff8e <queue_insert>
}
   3007a:	b003      	add	sp, #12
   3007c:	f85d fb04 	ldr.w	pc, [sp], #4

00030080 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   30080:	b13a      	cbz	r2, 30092 <z_impl_k_sem_init+0x12>
   30082:	428a      	cmp	r2, r1
   30084:	d305      	bcc.n	30092 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   30086:	e9c0 1202 	strd	r1, r2, [r0, #8]
   3008a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   3008e:	2000      	movs	r0, #0
   30090:	4770      	bx	lr
		return -EINVAL;
   30092:	f06f 0015 	mvn.w	r0, #21
}
   30096:	4770      	bx	lr

00030098 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   30098:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   3009a:	2301      	movs	r3, #1
   3009c:	408b      	lsls	r3, r1
   3009e:	ea22 0303 	bic.w	r3, r2, r3
   300a2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   300a4:	fa22 f001 	lsr.w	r0, r2, r1
}
   300a8:	f000 0001 	and.w	r0, r0, #1
   300ac:	4770      	bx	lr

000300ae <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   300ae:	b120      	cbz	r0, 300ba <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   300b0:	2200      	movs	r2, #0
   300b2:	4611      	mov	r1, r2
   300b4:	3088      	adds	r0, #136	; 0x88
   300b6:	f000 b924 	b.w	30302 <z_sched_wake>
}
   300ba:	4770      	bx	lr

000300bc <work_timeout>:
{
   300bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   300be:	4604      	mov	r4, r0
	__asm__ volatile(
   300c0:	f04f 0320 	mov.w	r3, #32
   300c4:	f3ef 8511 	mrs	r5, BASEPRI
   300c8:	f383 8812 	msr	BASEPRI_MAX, r3
   300cc:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   300d0:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   300d2:	f1a0 0610 	sub.w	r6, r0, #16
   300d6:	2103      	movs	r1, #3
   300d8:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   300da:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   300dc:	f7ff ffdc 	bl	30098 <flag_test_and_clear>
   300e0:	b128      	cbz	r0, 300ee <work_timeout+0x32>
		queue = dw->queue;
   300e2:	69a3      	ldr	r3, [r4, #24]
   300e4:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   300e6:	a901      	add	r1, sp, #4
   300e8:	4630      	mov	r0, r6
   300ea:	f7fd fc03 	bl	2d8f4 <submit_to_queue_locked>
	__asm__ volatile(
   300ee:	f385 8811 	msr	BASEPRI, r5
   300f2:	f3bf 8f6f 	isb	sy
}
   300f6:	b002      	add	sp, #8
   300f8:	bd70      	pop	{r4, r5, r6, pc}

000300fa <k_work_init>:
{
   300fa:	b538      	push	{r3, r4, r5, lr}
   300fc:	4604      	mov	r4, r0
   300fe:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   30100:	2210      	movs	r2, #16
   30102:	2100      	movs	r1, #0
   30104:	f7ff f937 	bl	2f376 <memset>
   30108:	6065      	str	r5, [r4, #4]
}
   3010a:	bd38      	pop	{r3, r4, r5, pc}

0003010c <z_work_submit_to_queue>:
{
   3010c:	b513      	push	{r0, r1, r4, lr}
   3010e:	9001      	str	r0, [sp, #4]
   30110:	4608      	mov	r0, r1
	__asm__ volatile(
   30112:	f04f 0320 	mov.w	r3, #32
   30116:	f3ef 8411 	mrs	r4, BASEPRI
   3011a:	f383 8812 	msr	BASEPRI_MAX, r3
   3011e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   30122:	a901      	add	r1, sp, #4
   30124:	f7fd fbe6 	bl	2d8f4 <submit_to_queue_locked>
	__asm__ volatile(
   30128:	f384 8811 	msr	BASEPRI, r4
   3012c:	f3bf 8f6f 	isb	sy
}
   30130:	b002      	add	sp, #8
   30132:	bd10      	pop	{r4, pc}

00030134 <k_work_submit_to_queue>:
{
   30134:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   30136:	f7ff ffe9 	bl	3010c <z_work_submit_to_queue>
	if (ret > 0) {
   3013a:	1e04      	subs	r4, r0, #0
   3013c:	dd09      	ble.n	30152 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   3013e:	f04f 0320 	mov.w	r3, #32
   30142:	f3ef 8011 	mrs	r0, BASEPRI
   30146:	f383 8812 	msr	BASEPRI_MAX, r3
   3014a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3014e:	f000 f8b2 	bl	302b6 <z_reschedule_irqlock>
}
   30152:	4620      	mov	r0, r4
   30154:	bd10      	pop	{r4, pc}

00030156 <k_work_init_delayable>:
{
   30156:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   30158:	2230      	movs	r2, #48	; 0x30
{
   3015a:	4604      	mov	r4, r0
   3015c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   3015e:	2100      	movs	r1, #0
   30160:	f7ff f909 	bl	2f376 <memset>
   30164:	f44f 7380 	mov.w	r3, #256	; 0x100
   30168:	6065      	str	r5, [r4, #4]
   3016a:	60e3      	str	r3, [r4, #12]
}
   3016c:	bd38      	pop	{r3, r4, r5, pc}

0003016e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   3016e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   30172:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30174:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30176:	2300      	movs	r3, #0
	node->prev = NULL;
   30178:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   3017c:	4770      	bx	lr

0003017e <unpend_thread_no_timeout>:
{
   3017e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   30180:	f7ff fff5 	bl	3016e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   30184:	7b43      	ldrb	r3, [r0, #13]
   30186:	f023 0302 	bic.w	r3, r3, #2
   3018a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   3018c:	2300      	movs	r3, #0
   3018e:	6083      	str	r3, [r0, #8]
}
   30190:	bd08      	pop	{r3, pc}

00030192 <add_to_waitq_locked>:
{
   30192:	b538      	push	{r3, r4, r5, lr}
   30194:	4604      	mov	r4, r0
   30196:	460d      	mov	r5, r1
	unready_thread(thread);
   30198:	f7fd fd4a 	bl	2dc30 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   3019c:	7b63      	ldrb	r3, [r4, #13]
   3019e:	f043 0302 	orr.w	r3, r3, #2
   301a2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   301a4:	b1e5      	cbz	r5, 301e0 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   301a6:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   301a8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   301aa:	429d      	cmp	r5, r3
   301ac:	d109      	bne.n	301c2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   301ae:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   301b0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   301b4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   301b6:	606c      	str	r4, [r5, #4]
}
   301b8:	e012      	b.n	301e0 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   301ba:	686a      	ldr	r2, [r5, #4]
   301bc:	4293      	cmp	r3, r2
   301be:	d0f6      	beq.n	301ae <add_to_waitq_locked+0x1c>
   301c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   301c2:	2b00      	cmp	r3, #0
   301c4:	d0f3      	beq.n	301ae <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   301c6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   301ca:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   301ce:	428a      	cmp	r2, r1
   301d0:	d0f3      	beq.n	301ba <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   301d2:	4291      	cmp	r1, r2
   301d4:	ddf1      	ble.n	301ba <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   301d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   301d8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   301dc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   301de:	605c      	str	r4, [r3, #4]
}
   301e0:	bd38      	pop	{r3, r4, r5, pc}

000301e2 <z_ready_thread>:
{
   301e2:	b510      	push	{r4, lr}
   301e4:	f04f 0320 	mov.w	r3, #32
   301e8:	f3ef 8411 	mrs	r4, BASEPRI
   301ec:	f383 8812 	msr	BASEPRI_MAX, r3
   301f0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   301f4:	f7fd fce8 	bl	2dbc8 <ready_thread>
	__asm__ volatile(
   301f8:	f384 8811 	msr	BASEPRI, r4
   301fc:	f3bf 8f6f 	isb	sy
}
   30200:	bd10      	pop	{r4, pc}

00030202 <z_sched_wake_thread>:
{
   30202:	b538      	push	{r3, r4, r5, lr}
   30204:	4604      	mov	r4, r0
	__asm__ volatile(
   30206:	f04f 0320 	mov.w	r3, #32
   3020a:	f3ef 8511 	mrs	r5, BASEPRI
   3020e:	f383 8812 	msr	BASEPRI_MAX, r3
   30212:	f3bf 8f6f 	isb	sy
		if (!killed) {
   30216:	7b43      	ldrb	r3, [r0, #13]
   30218:	f013 0f28 	tst.w	r3, #40	; 0x28
   3021c:	d10b      	bne.n	30236 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   3021e:	6883      	ldr	r3, [r0, #8]
   30220:	b10b      	cbz	r3, 30226 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   30222:	f7ff ffac 	bl	3017e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   30226:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   30228:	b951      	cbnz	r1, 30240 <z_sched_wake_thread+0x3e>
   3022a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   3022e:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   30230:	4620      	mov	r0, r4
   30232:	f7fd fcc9 	bl	2dbc8 <ready_thread>
	__asm__ volatile(
   30236:	f385 8811 	msr	BASEPRI, r5
   3023a:	f3bf 8f6f 	isb	sy
}
   3023e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   30240:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   30244:	e7f3      	b.n	3022e <z_sched_wake_thread+0x2c>

00030246 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   30246:	2101      	movs	r1, #1
   30248:	3818      	subs	r0, #24
   3024a:	f7ff bfda 	b.w	30202 <z_sched_wake_thread>

0003024e <z_unpend_first_thread>:
{
   3024e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   30250:	f04f 0320 	mov.w	r3, #32
   30254:	f3ef 8511 	mrs	r5, BASEPRI
   30258:	f383 8812 	msr	BASEPRI_MAX, r3
   3025c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   30260:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30262:	42a0      	cmp	r0, r4
   30264:	d00d      	beq.n	30282 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   30266:	b134      	cbz	r4, 30276 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   30268:	4620      	mov	r0, r4
   3026a:	f7ff ff88 	bl	3017e <unpend_thread_no_timeout>
   3026e:	f104 0018 	add.w	r0, r4, #24
   30272:	f000 f869 	bl	30348 <z_abort_timeout>
	__asm__ volatile(
   30276:	f385 8811 	msr	BASEPRI, r5
   3027a:	f3bf 8f6f 	isb	sy
}
   3027e:	4620      	mov	r0, r4
   30280:	bd38      	pop	{r3, r4, r5, pc}
   30282:	2400      	movs	r4, #0
   30284:	e7f7      	b.n	30276 <z_unpend_first_thread+0x28>

00030286 <z_unpend_thread>:
{
   30286:	b510      	push	{r4, lr}
   30288:	4601      	mov	r1, r0
	__asm__ volatile(
   3028a:	f04f 0320 	mov.w	r3, #32
   3028e:	f3ef 8411 	mrs	r4, BASEPRI
   30292:	f383 8812 	msr	BASEPRI_MAX, r3
   30296:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   3029a:	6883      	ldr	r3, [r0, #8]
   3029c:	b10b      	cbz	r3, 302a2 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   3029e:	f7ff ff6e 	bl	3017e <unpend_thread_no_timeout>
	__asm__ volatile(
   302a2:	f384 8811 	msr	BASEPRI, r4
   302a6:	f3bf 8f6f 	isb	sy
}
   302aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   302ae:	f101 0018 	add.w	r0, r1, #24
   302b2:	f000 b849 	b.w	30348 <z_abort_timeout>

000302b6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   302b6:	4603      	mov	r3, r0
   302b8:	b920      	cbnz	r0, 302c4 <z_reschedule_irqlock+0xe>
   302ba:	f3ef 8205 	mrs	r2, IPSR
   302be:	b90a      	cbnz	r2, 302c4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   302c0:	f7f9 b91a 	b.w	294f8 <arch_swap>
   302c4:	f383 8811 	msr	BASEPRI, r3
   302c8:	f3bf 8f6f 	isb	sy
}
   302cc:	4770      	bx	lr

000302ce <z_reschedule_unlocked>:
	__asm__ volatile(
   302ce:	f04f 0320 	mov.w	r3, #32
   302d2:	f3ef 8011 	mrs	r0, BASEPRI
   302d6:	f383 8812 	msr	BASEPRI_MAX, r3
   302da:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   302de:	f7ff bfea 	b.w	302b6 <z_reschedule_irqlock>

000302e2 <z_unpend_all>:
{
   302e2:	b538      	push	{r3, r4, r5, lr}
   302e4:	4605      	mov	r5, r0
	int need_sched = 0;
   302e6:	2000      	movs	r0, #0
	return list->head == list;
   302e8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   302ea:	42a5      	cmp	r5, r4
   302ec:	d000      	beq.n	302f0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   302ee:	b904      	cbnz	r4, 302f2 <z_unpend_all+0x10>
}
   302f0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   302f2:	4620      	mov	r0, r4
   302f4:	f7ff ffc7 	bl	30286 <z_unpend_thread>
		z_ready_thread(thread);
   302f8:	4620      	mov	r0, r4
   302fa:	f7ff ff72 	bl	301e2 <z_ready_thread>
		need_sched = 1;
   302fe:	2001      	movs	r0, #1
   30300:	e7f2      	b.n	302e8 <z_unpend_all+0x6>

00030302 <z_sched_wake>:
{
   30302:	b538      	push	{r3, r4, r5, lr}
   30304:	f04f 0320 	mov.w	r3, #32
   30308:	f3ef 8511 	mrs	r5, BASEPRI
   3030c:	f383 8812 	msr	BASEPRI_MAX, r3
   30310:	f3bf 8f6f 	isb	sy
	return list->head == list;
   30314:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30316:	42a0      	cmp	r0, r4
   30318:	d012      	beq.n	30340 <z_sched_wake+0x3e>
		if (thread != NULL) {
   3031a:	b19c      	cbz	r4, 30344 <z_sched_wake+0x42>
   3031c:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
   3031e:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   30320:	4620      	mov	r0, r4
   30322:	f7ff ff2c 	bl	3017e <unpend_thread_no_timeout>
   30326:	f104 0018 	add.w	r0, r4, #24
   3032a:	f000 f80d 	bl	30348 <z_abort_timeout>
			ready_thread(thread);
   3032e:	4620      	mov	r0, r4
   30330:	f7fd fc4a 	bl	2dbc8 <ready_thread>
			ret = true;
   30334:	2001      	movs	r0, #1
	__asm__ volatile(
   30336:	f385 8811 	msr	BASEPRI, r5
   3033a:	f3bf 8f6f 	isb	sy
}
   3033e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   30340:	2000      	movs	r0, #0
   30342:	e7f8      	b.n	30336 <z_sched_wake+0x34>
   30344:	4620      	mov	r0, r4
   30346:	e7f6      	b.n	30336 <z_sched_wake+0x34>

00030348 <z_abort_timeout>:
{
   30348:	b510      	push	{r4, lr}
	__asm__ volatile(
   3034a:	f04f 0220 	mov.w	r2, #32
   3034e:	f3ef 8411 	mrs	r4, BASEPRI
   30352:	f382 8812 	msr	BASEPRI_MAX, r2
   30356:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   3035a:	6803      	ldr	r3, [r0, #0]
   3035c:	b13b      	cbz	r3, 3036e <z_abort_timeout+0x26>
			remove_timeout(to);
   3035e:	f7fd ff37 	bl	2e1d0 <remove_timeout>
			ret = 0;
   30362:	2000      	movs	r0, #0
	__asm__ volatile(
   30364:	f384 8811 	msr	BASEPRI, r4
   30368:	f3bf 8f6f 	isb	sy
}
   3036c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   3036e:	f06f 0015 	mvn.w	r0, #21
   30372:	e7f7      	b.n	30364 <z_abort_timeout+0x1c>

00030374 <z_get_next_timeout_expiry>:
{
   30374:	b510      	push	{r4, lr}
	__asm__ volatile(
   30376:	f04f 0320 	mov.w	r3, #32
   3037a:	f3ef 8411 	mrs	r4, BASEPRI
   3037e:	f383 8812 	msr	BASEPRI_MAX, r3
   30382:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   30386:	f7fd ff03 	bl	2e190 <next_timeout>
	__asm__ volatile(
   3038a:	f384 8811 	msr	BASEPRI, r4
   3038e:	f3bf 8f6f 	isb	sy
}
   30392:	bd10      	pop	{r4, pc}

00030394 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   30394:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   30396:	f7fe f817 	bl	2e3c8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3039a:	bd08      	pop	{r3, pc}

0003039c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3039c:	b108      	cbz	r0, 303a2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3039e:	f7f9 bc69 	b.w	29c74 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   303a2:	4770      	bx	lr

000303a4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   303a4:	f1b1 3fff 	cmp.w	r1, #4294967295
   303a8:	bf08      	it	eq
   303aa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   303ae:	b538      	push	{r3, r4, r5, lr}
   303b0:	460c      	mov	r4, r1
   303b2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   303b4:	d014      	beq.n	303e0 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   303b6:	4308      	orrs	r0, r1
   303b8:	d103      	bne.n	303c2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   303ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   303be:	f7fe b803 	b.w	2e3c8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   303c2:	f06f 0001 	mvn.w	r0, #1
   303c6:	1b40      	subs	r0, r0, r5
   303c8:	f04f 33ff 	mov.w	r3, #4294967295
   303cc:	eb63 0101 	sbc.w	r1, r3, r1
   303d0:	2900      	cmp	r1, #0
   303d2:	da04      	bge.n	303de <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   303d4:	f7fd fff8 	bl	2e3c8 <sys_clock_tick_get>
   303d8:	1940      	adds	r0, r0, r5
   303da:	eb41 0104 	adc.w	r1, r1, r4
}
   303de:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   303e0:	f04f 30ff 	mov.w	r0, #4294967295
   303e4:	4601      	mov	r1, r0
   303e6:	e7fa      	b.n	303de <sys_clock_timeout_end_calc+0x3a>

000303e8 <k_free>:
	if (ptr != NULL) {
   303e8:	b120      	cbz	r0, 303f4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   303ea:	1f01      	subs	r1, r0, #4
   303ec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   303f0:	f000 b856 	b.w	304a0 <k_heap_free>
}
   303f4:	4770      	bx	lr

000303f6 <k_heap_init>:
{
   303f6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   303f8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   303fc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30400:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   30402:	f7fe bc1a 	b.w	2ec3a <sys_heap_init>

00030406 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   30406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3040a:	b085      	sub	sp, #20
   3040c:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   30410:	4607      	mov	r7, r0
   30412:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30414:	4650      	mov	r0, sl
   30416:	4621      	mov	r1, r4
{
   30418:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   3041a:	f7ff ffc3 	bl	303a4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   3041e:	f1b4 3fff 	cmp.w	r4, #4294967295
   30422:	bf08      	it	eq
   30424:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30428:	4605      	mov	r5, r0
   3042a:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   3042c:	bf04      	itt	eq
   3042e:	f04f 35ff 	moveq.w	r5, #4294967295
   30432:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   30436:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   3043a:	f04f 0320 	mov.w	r3, #32
   3043e:	f3ef 8411 	mrs	r4, BASEPRI
   30442:	f383 8812 	msr	BASEPRI_MAX, r3
   30446:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3044a:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   3044e:	464a      	mov	r2, r9
   30450:	4641      	mov	r1, r8
   30452:	4638      	mov	r0, r7
   30454:	f7fe fb8a 	bl	2eb6c <sys_heap_aligned_alloc>
   30458:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   3045a:	f7fd ffb5 	bl	2e3c8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   3045e:	9b03      	ldr	r3, [sp, #12]
   30460:	b13b      	cbz	r3, 30472 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   30462:	f384 8811 	msr	BASEPRI, r4
   30466:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3046a:	4618      	mov	r0, r3
   3046c:	b005      	add	sp, #20
   3046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   30472:	1a28      	subs	r0, r5, r0
   30474:	eb66 0101 	sbc.w	r1, r6, r1
   30478:	2801      	cmp	r0, #1
   3047a:	f171 0200 	sbcs.w	r2, r1, #0
   3047e:	dbf0      	blt.n	30462 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30480:	e9cd 0100 	strd	r0, r1, [sp]
   30484:	465a      	mov	r2, fp
   30486:	4621      	mov	r1, r4
   30488:	4650      	mov	r0, sl
   3048a:	f7fd fc31 	bl	2dcf0 <z_pend_curr>
	__asm__ volatile(
   3048e:	f04f 0320 	mov.w	r3, #32
   30492:	f3ef 8411 	mrs	r4, BASEPRI
   30496:	f383 8812 	msr	BASEPRI_MAX, r3
   3049a:	f3bf 8f6f 	isb	sy
	return k;
   3049e:	e7d6      	b.n	3044e <k_heap_aligned_alloc+0x48>

000304a0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   304a0:	b538      	push	{r3, r4, r5, lr}
   304a2:	4604      	mov	r4, r0
   304a4:	f04f 0320 	mov.w	r3, #32
   304a8:	f3ef 8511 	mrs	r5, BASEPRI
   304ac:	f383 8812 	msr	BASEPRI_MAX, r3
   304b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   304b4:	f7fe fb22 	bl	2eafc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   304b8:	f104 000c 	add.w	r0, r4, #12
   304bc:	f7ff ff11 	bl	302e2 <z_unpend_all>
   304c0:	b130      	cbz	r0, 304d0 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   304c2:	4629      	mov	r1, r5
   304c4:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   304c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   304cc:	f7fd bc74 	b.w	2ddb8 <z_reschedule>
	__asm__ volatile(
   304d0:	f385 8811 	msr	BASEPRI, r5
   304d4:	f3bf 8f6f 	isb	sy
}
   304d8:	bd38      	pop	{r3, r4, r5, pc}

000304da <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   304da:	4770      	bx	lr
